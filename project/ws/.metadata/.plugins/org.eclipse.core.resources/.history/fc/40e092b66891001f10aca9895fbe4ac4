/**
  ******************************************************************************
  * @file    taskControle.h
  * @brief   This file contains the declarations for the FreeRTOS task 
  *          taskControle, which make a control of a autonomous vehicle by the
  *          high level control action given by Autoware or manualy controled by
  *          a physical joysitck.
  ******************************************************************************
  * @author  Gabriel Toffanetto Fran√ßa da Rocha 
  *          Laboratory of Autonomous Vehicles (LMA) - FEM/Unicamp
  * @date    Created:  October 21, 2024
  *          Modified: 
  ******************************************************************************
  */
#include "taskControle.h"

extern unsigned int ucADC1Buffer[2];


// Control action struct with high level control action from MicroAutoware to TaskControle,
// for compute the vehicle control action. [From freertos.c].
extern control_action xControlAction;

// Control signal struct with low level control signal from TaskControle to MicroAutoware,
// for publish in simulator topics by micro-ros. [From freertos.c].
extern control_signal xControlSignal;

/**
  * @name   StartTaskControle
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{

  unsigned char ucControlMode;

  unsigned int uiX0   = 33970;
  unsigned int uiXMin = 1057;
  unsigned int uiXMax = 65535;
  unsigned int uiY0   = 33580;
  unsigned int uiYMin = 1062;
  unsigned int uiYMax = 65535;

  float fJoyXAxis;
  float fJoyYAxis;
  float fLongitudinalSpeed;
  float fSteeringAngle;


  ucControlMode = AUTOWARE;

  for(;;)
  {

    // Joystick read block -- START
    fJoyXAxis = fGetJoyPostition((unsigned int) ucADC1Buffer[0], uiX0, uiXMax, uiXMin);
	fJoyYAxis = fGetJoyPostition((unsigned int) ucADC1Buffer[1], uiY0, uiYMax, uiYMin);
	osDelay(20);

    // Joystick read block -- END

  }


}
