
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013294  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a5c  08013534  08013534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014f90  08014f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  08014f98  08014f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014fd8  08014fd8  00015fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013ec  24000000  08014fdc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000320f4  240013ec  080163c8  000173ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240334e0  080163c8  000174e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000173ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a10f  00000000  00000000  0001741a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050db  00000000  00000000  00041529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e50  00000000  00000000  00046608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000176c  00000000  00000000  00048458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e4b3  00000000  00000000  00049bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002bfc4  00000000  00000000  00088077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018ed68  00000000  00000000  000b403b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  00242da3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008790  00000000  00000000  00242e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  0024b5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013ec 	.word	0x240013ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801351c 	.word	0x0801351c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f0 	.word	0x240013f0
 80002dc:	0801351c 	.word	0x0801351c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000314:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000318:	f000 b96a 	b.w	80005f0 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	460c      	mov	r4, r1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14e      	bne.n	80003de <__udivmoddi4+0xaa>
 8000340:	4694      	mov	ip, r2
 8000342:	458c      	cmp	ip, r1
 8000344:	4686      	mov	lr, r0
 8000346:	fab2 f282 	clz	r2, r2
 800034a:	d962      	bls.n	8000412 <__udivmoddi4+0xde>
 800034c:	b14a      	cbz	r2, 8000362 <__udivmoddi4+0x2e>
 800034e:	f1c2 0320 	rsb	r3, r2, #32
 8000352:	4091      	lsls	r1, r2
 8000354:	fa20 f303 	lsr.w	r3, r0, r3
 8000358:	fa0c fc02 	lsl.w	ip, ip, r2
 800035c:	4319      	orrs	r1, r3
 800035e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f f68c 	uxth.w	r6, ip
 800036a:	fbb1 f4f7 	udiv	r4, r1, r7
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb07 1114 	mls	r1, r7, r4, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb04 f106 	mul.w	r1, r4, r6
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800038a:	f080 8112 	bcs.w	80005b2 <__udivmoddi4+0x27e>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 810f 	bls.w	80005b2 <__udivmoddi4+0x27e>
 8000394:	3c02      	subs	r4, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a59      	subs	r1, r3, r1
 800039a:	fa1f f38e 	uxth.w	r3, lr
 800039e:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a2:	fb07 1110 	mls	r1, r7, r0, r1
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f606 	mul.w	r6, r0, r6
 80003ae:	429e      	cmp	r6, r3
 80003b0:	d90a      	bls.n	80003c8 <__udivmoddi4+0x94>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003ba:	f080 80fc 	bcs.w	80005b6 <__udivmoddi4+0x282>
 80003be:	429e      	cmp	r6, r3
 80003c0:	f240 80f9 	bls.w	80005b6 <__udivmoddi4+0x282>
 80003c4:	4463      	add	r3, ip
 80003c6:	3802      	subs	r0, #2
 80003c8:	1b9b      	subs	r3, r3, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	2100      	movs	r1, #0
 80003d0:	b11d      	cbz	r5, 80003da <__udivmoddi4+0xa6>
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	e9c5 3200 	strd	r3, r2, [r5]
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d905      	bls.n	80003ee <__udivmoddi4+0xba>
 80003e2:	b10d      	cbz	r5, 80003e8 <__udivmoddi4+0xb4>
 80003e4:	e9c5 0100 	strd	r0, r1, [r5]
 80003e8:	2100      	movs	r1, #0
 80003ea:	4608      	mov	r0, r1
 80003ec:	e7f5      	b.n	80003da <__udivmoddi4+0xa6>
 80003ee:	fab3 f183 	clz	r1, r3
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d146      	bne.n	8000484 <__udivmoddi4+0x150>
 80003f6:	42a3      	cmp	r3, r4
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xcc>
 80003fa:	4290      	cmp	r0, r2
 80003fc:	f0c0 80f0 	bcc.w	80005e0 <__udivmoddi4+0x2ac>
 8000400:	1a86      	subs	r6, r0, r2
 8000402:	eb64 0303 	sbc.w	r3, r4, r3
 8000406:	2001      	movs	r0, #1
 8000408:	2d00      	cmp	r5, #0
 800040a:	d0e6      	beq.n	80003da <__udivmoddi4+0xa6>
 800040c:	e9c5 6300 	strd	r6, r3, [r5]
 8000410:	e7e3      	b.n	80003da <__udivmoddi4+0xa6>
 8000412:	2a00      	cmp	r2, #0
 8000414:	f040 8090 	bne.w	8000538 <__udivmoddi4+0x204>
 8000418:	eba1 040c 	sub.w	r4, r1, ip
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	2101      	movs	r1, #1
 8000426:	fbb4 f6f8 	udiv	r6, r4, r8
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb08 4416 	mls	r4, r8, r6, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb07 f006 	mul.w	r0, r7, r6
 800043a:	4298      	cmp	r0, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x11c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x11a>
 8000448:	4298      	cmp	r0, r3
 800044a:	f200 80cd 	bhi.w	80005e8 <__udivmoddi4+0x2b4>
 800044e:	4626      	mov	r6, r4
 8000450:	1a1c      	subs	r4, r3, r0
 8000452:	fa1f f38e 	uxth.w	r3, lr
 8000456:	fbb4 f0f8 	udiv	r0, r4, r8
 800045a:	fb08 4410 	mls	r4, r8, r0, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb00 f707 	mul.w	r7, r0, r7
 8000466:	429f      	cmp	r7, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x148>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x146>
 8000474:	429f      	cmp	r7, r3
 8000476:	f200 80b0 	bhi.w	80005da <__udivmoddi4+0x2a6>
 800047a:	4620      	mov	r0, r4
 800047c:	1bdb      	subs	r3, r3, r7
 800047e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000482:	e7a5      	b.n	80003d0 <__udivmoddi4+0x9c>
 8000484:	f1c1 0620 	rsb	r6, r1, #32
 8000488:	408b      	lsls	r3, r1
 800048a:	fa22 f706 	lsr.w	r7, r2, r6
 800048e:	431f      	orrs	r7, r3
 8000490:	fa20 fc06 	lsr.w	ip, r0, r6
 8000494:	fa04 f301 	lsl.w	r3, r4, r1
 8000498:	ea43 030c 	orr.w	r3, r3, ip
 800049c:	40f4      	lsrs	r4, r6
 800049e:	fa00 f801 	lsl.w	r8, r0, r1
 80004a2:	0c38      	lsrs	r0, r7, #16
 80004a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004a8:	fbb4 fef0 	udiv	lr, r4, r0
 80004ac:	fa1f fc87 	uxth.w	ip, r7
 80004b0:	fb00 441e 	mls	r4, r0, lr, r4
 80004b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b8:	fb0e f90c 	mul.w	r9, lr, ip
 80004bc:	45a1      	cmp	r9, r4
 80004be:	fa02 f201 	lsl.w	r2, r2, r1
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x1a6>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004ca:	f080 8084 	bcs.w	80005d6 <__udivmoddi4+0x2a2>
 80004ce:	45a1      	cmp	r9, r4
 80004d0:	f240 8081 	bls.w	80005d6 <__udivmoddi4+0x2a2>
 80004d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d8:	443c      	add	r4, r7
 80004da:	eba4 0409 	sub.w	r4, r4, r9
 80004de:	fa1f f983 	uxth.w	r9, r3
 80004e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004e6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f2:	45a4      	cmp	ip, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1d2>
 80004f6:	193c      	adds	r4, r7, r4
 80004f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004fc:	d267      	bcs.n	80005ce <__udivmoddi4+0x29a>
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d965      	bls.n	80005ce <__udivmoddi4+0x29a>
 8000502:	3b02      	subs	r3, #2
 8000504:	443c      	add	r4, r7
 8000506:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800050a:	fba0 9302 	umull	r9, r3, r0, r2
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	429c      	cmp	r4, r3
 8000514:	46ce      	mov	lr, r9
 8000516:	469c      	mov	ip, r3
 8000518:	d351      	bcc.n	80005be <__udivmoddi4+0x28a>
 800051a:	d04e      	beq.n	80005ba <__udivmoddi4+0x286>
 800051c:	b155      	cbz	r5, 8000534 <__udivmoddi4+0x200>
 800051e:	ebb8 030e 	subs.w	r3, r8, lr
 8000522:	eb64 040c 	sbc.w	r4, r4, ip
 8000526:	fa04 f606 	lsl.w	r6, r4, r6
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431e      	orrs	r6, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	e9c5 6400 	strd	r6, r4, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	e750      	b.n	80003da <__udivmoddi4+0xa6>
 8000538:	f1c2 0320 	rsb	r3, r2, #32
 800053c:	fa20 f103 	lsr.w	r1, r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa24 f303 	lsr.w	r3, r4, r3
 8000548:	4094      	lsls	r4, r2
 800054a:	430c      	orrs	r4, r1
 800054c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000550:	fa00 fe02 	lsl.w	lr, r0, r2
 8000554:	fa1f f78c 	uxth.w	r7, ip
 8000558:	fbb3 f0f8 	udiv	r0, r3, r8
 800055c:	fb08 3110 	mls	r1, r8, r0, r3
 8000560:	0c23      	lsrs	r3, r4, #16
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	fb00 f107 	mul.w	r1, r0, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x24c>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000576:	d22c      	bcs.n	80005d2 <__udivmoddi4+0x29e>
 8000578:	4299      	cmp	r1, r3
 800057a:	d92a      	bls.n	80005d2 <__udivmoddi4+0x29e>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1a5b      	subs	r3, r3, r1
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb3 f1f8 	udiv	r1, r3, r8
 8000588:	fb08 3311 	mls	r3, r8, r1, r3
 800058c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000590:	fb01 f307 	mul.w	r3, r1, r7
 8000594:	42a3      	cmp	r3, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x276>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a0:	d213      	bcs.n	80005ca <__udivmoddi4+0x296>
 80005a2:	42a3      	cmp	r3, r4
 80005a4:	d911      	bls.n	80005ca <__udivmoddi4+0x296>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	1ae4      	subs	r4, r4, r3
 80005ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b0:	e739      	b.n	8000426 <__udivmoddi4+0xf2>
 80005b2:	4604      	mov	r4, r0
 80005b4:	e6f0      	b.n	8000398 <__udivmoddi4+0x64>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e706      	b.n	80003c8 <__udivmoddi4+0x94>
 80005ba:	45c8      	cmp	r8, r9
 80005bc:	d2ae      	bcs.n	800051c <__udivmoddi4+0x1e8>
 80005be:	ebb9 0e02 	subs.w	lr, r9, r2
 80005c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7a8      	b.n	800051c <__udivmoddi4+0x1e8>
 80005ca:	4631      	mov	r1, r6
 80005cc:	e7ed      	b.n	80005aa <__udivmoddi4+0x276>
 80005ce:	4603      	mov	r3, r0
 80005d0:	e799      	b.n	8000506 <__udivmoddi4+0x1d2>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e7d4      	b.n	8000580 <__udivmoddi4+0x24c>
 80005d6:	46d6      	mov	lr, sl
 80005d8:	e77f      	b.n	80004da <__udivmoddi4+0x1a6>
 80005da:	4463      	add	r3, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e74d      	b.n	800047c <__udivmoddi4+0x148>
 80005e0:	4606      	mov	r6, r0
 80005e2:	4623      	mov	r3, r4
 80005e4:	4608      	mov	r0, r1
 80005e6:	e70f      	b.n	8000408 <__udivmoddi4+0xd4>
 80005e8:	3e02      	subs	r6, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	e730      	b.n	8000450 <__udivmoddi4+0x11c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_ADC1_Init+0x108>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000620:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800065e:	2203      	movs	r2, #3
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000678:	f001 fd58 	bl	800212c <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 fbad 	bl	8000de0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000692:	f002 fd7b 	bl	800318c <HAL_ADCEx_MultiModeConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800069c:	f000 fba0 	bl	8000de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x10c>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2306      	movs	r3, #6
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006c4:	f001 ffb6 	bl	8002634 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fb87 	bl	8000de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_ADC1_Init+0x110>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d6:	230c      	movs	r3, #12
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006e0:	f001 ffa8 	bl	8002634 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ea:	f000 fb79 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24001408 	.word	0x24001408
 80006fc:	40022000 	.word	0x40022000
 8000700:	19200040 	.word	0x19200040
 8000704:	08600004 	.word	0x08600004

08000708 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ba      	sub	sp, #232	@ 0xe8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	22c0      	movs	r2, #192	@ 0xc0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f012 fc85 	bl	8013038 <memset>
  if(adcHandle->Instance==ADC1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <HAL_ADC_MspInit+0x140>)
 8000734:	4293      	cmp	r3, r2
 8000736:	f040 8083 	bne.w	8000840 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800074a:	2325      	movs	r3, #37	@ 0x25
 800074c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075e:	2320      	movs	r3, #32
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f006 ff4a 	bl	800760c <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800077e:	f000 fb2f 	bl	8000de0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000788:	4a30      	ldr	r2, [pc, #192]	@ (800084c <HAL_ADC_MspInit+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	@ (8000850 <HAL_ADC_MspInit+0x148>)
 80007da:	f005 fcd1 	bl	8006180 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <HAL_ADC_MspInit+0x150>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800081c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000826:	f002 fe6f 	bl	8003508 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8000830:	f000 fad6 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000838:	64da      	str	r2, [r3, #76]	@ 0x4c
 800083a:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	37e8      	adds	r7, #232	@ 0xe8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40022000 	.word	0x40022000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021400 	.word	0x58021400
 8000854:	2400146c 	.word	0x2400146c
 8000858:	40020410 	.word	0x40020410

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <MX_DMA_Init+0x7c>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000868:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <MX_DMA_Init+0x7c>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_DMA_Init+0x7c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <MX_DMA_Init+0x7c>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000886:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <MX_DMA_Init+0x7c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_DMA_Init+0x7c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200b      	movs	r0, #11
 80008a4:	f002 fe08 	bl	80034b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008a8:	200b      	movs	r0, #11
 80008aa:	f002 fe1f 	bl	80034ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	200c      	movs	r0, #12
 80008b4:	f002 fe00 	bl	80034b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008b8:	200c      	movs	r0, #12
 80008ba:	f002 fe17 	bl	80034ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203a      	movs	r0, #58	@ 0x3a
 80008c4:	f002 fdf8 	bl	80034b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008c8:	203a      	movs	r0, #58	@ 0x3a
 80008ca:	f002 fe0f 	bl	80034ec <HAL_NVIC_EnableIRQ>

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58024400 	.word	0x58024400

080008dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 80008e0:	480a      	ldr	r0, [pc, #40]	@ (800090c <MX_FREERTOS_Init+0x30>)
 80008e2:	f00c f911 	bl	800cb08 <osMutexNew>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a09      	ldr	r2, [pc, #36]	@ (8000910 <MX_FREERTOS_Init+0x34>)
 80008ea:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <MX_FREERTOS_Init+0x38>)
 80008ee:	f00c f90b 	bl	800cb08 <osMutexNew>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a08      	ldr	r2, [pc, #32]	@ (8000918 <MX_FREERTOS_Init+0x3c>)
 80008f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 80008f8:	4a08      	ldr	r2, [pc, #32]	@ (800091c <MX_FREERTOS_Init+0x40>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <MX_FREERTOS_Init+0x44>)
 80008fe:	f00c f823 	bl	800c948 <osThreadNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a07      	ldr	r2, [pc, #28]	@ (8000924 <MX_FREERTOS_Init+0x48>)
 8000906:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	080135b8 	.word	0x080135b8
 8000910:	240014fc 	.word	0x240014fc
 8000914:	080135c8 	.word	0x080135c8
 8000918:	24001500 	.word	0x24001500
 800091c:	08013594 	.word	0x08013594
 8000920:	0800124d 	.word	0x0800124d
 8000924:	240014f8 	.word	0x240014f8

08000928 <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000938:	d10d      	bne.n	8000956 <HAL_GPIO_EXTI_Callback+0x2e>
    ucButtonState ^= 1;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x38>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f083 0301 	eor.w	r3, r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x38>)
 8000946:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, 0x1000);
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x3c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000950:	4618      	mov	r0, r3
 8000952:	f00c f88b 	bl	800ca6c <osThreadFlagsSet>
  }
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	24001504 	.word	0x24001504
 8000964:	240014f8 	.word	0x240014f8

08000968 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b9e      	ldr	r3, [pc, #632]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	4a9c      	ldr	r2, [pc, #624]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098e:	4b9a      	ldr	r3, [pc, #616]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	623b      	str	r3, [r7, #32]
 800099a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099c:	4b96      	ldr	r3, [pc, #600]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a95      	ldr	r2, [pc, #596]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b92      	ldr	r3, [pc, #584]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b6:	61fb      	str	r3, [r7, #28]
 80009b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b8f      	ldr	r3, [pc, #572]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	4a8d      	ldr	r2, [pc, #564]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ca:	4b8b      	ldr	r3, [pc, #556]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d8:	4b87      	ldr	r3, [pc, #540]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	4a86      	ldr	r2, [pc, #536]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e8:	4b83      	ldr	r3, [pc, #524]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4b80      	ldr	r3, [pc, #512]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	4a7e      	ldr	r2, [pc, #504]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 80009fe:	f043 0320 	orr.w	r3, r3, #32
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a06:	4b7c      	ldr	r3, [pc, #496]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	f003 0320 	and.w	r3, r3, #32
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a14:	4b78      	ldr	r3, [pc, #480]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	4a77      	ldr	r2, [pc, #476]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a24:	4b74      	ldr	r3, [pc, #464]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	4b71      	ldr	r3, [pc, #452]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	4a6f      	ldr	r2, [pc, #444]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a42:	4b6d      	ldr	r3, [pc, #436]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a50:	4b69      	ldr	r3, [pc, #420]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	4a68      	ldr	r2, [pc, #416]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a60:	4b65      	ldr	r3, [pc, #404]	@ (8000bf8 <MX_GPIO_Init+0x290>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a74:	4861      	ldr	r0, [pc, #388]	@ (8000bfc <MX_GPIO_Init+0x294>)
 8000a76:	f005 fd33 	bl	80064e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a80:	485f      	ldr	r0, [pc, #380]	@ (8000c00 <MX_GPIO_Init+0x298>)
 8000a82:	f005 fd2d 	bl	80064e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	485e      	ldr	r0, [pc, #376]	@ (8000c04 <MX_GPIO_Init+0x29c>)
 8000a8c:	f005 fd28 	bl	80064e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4858      	ldr	r0, [pc, #352]	@ (8000c08 <MX_GPIO_Init+0x2a0>)
 8000aa6:	f005 fb6b 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000aaa:	2332      	movs	r3, #50	@ 0x32
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aba:	230b      	movs	r3, #11
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4850      	ldr	r0, [pc, #320]	@ (8000c08 <MX_GPIO_Init+0x2a0>)
 8000ac6:	f005 fb5b 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000aca:	2386      	movs	r3, #134	@ 0x86
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ada:	230b      	movs	r3, #11
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4849      	ldr	r0, [pc, #292]	@ (8000c0c <MX_GPIO_Init+0x2a4>)
 8000ae6:	f005 fb4b 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aea:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	483e      	ldr	r0, [pc, #248]	@ (8000bfc <MX_GPIO_Init+0x294>)
 8000b04:	f005 fb3c 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	483c      	ldr	r0, [pc, #240]	@ (8000c10 <MX_GPIO_Init+0x2a8>)
 8000b20:	f005 fb2e 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b36:	230b      	movs	r3, #11
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	482e      	ldr	r0, [pc, #184]	@ (8000bfc <MX_GPIO_Init+0x294>)
 8000b42:	f005 fb1d 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4828      	ldr	r0, [pc, #160]	@ (8000c00 <MX_GPIO_Init+0x298>)
 8000b60:	f005 fb0e 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	4826      	ldr	r0, [pc, #152]	@ (8000c14 <MX_GPIO_Init+0x2ac>)
 8000b7a:	f005 fb01 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b7e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b90:	230a      	movs	r3, #10
 8000b92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481c      	ldr	r0, [pc, #112]	@ (8000c0c <MX_GPIO_Init+0x2a4>)
 8000b9c:	f005 faf0 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ba0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4815      	ldr	r0, [pc, #84]	@ (8000c14 <MX_GPIO_Init+0x2ac>)
 8000bbe:	f005 fadf 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480a      	ldr	r0, [pc, #40]	@ (8000c04 <MX_GPIO_Init+0x29c>)
 8000bda:	f005 fad1 	bl	8006180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2107      	movs	r1, #7
 8000be2:	2028      	movs	r0, #40	@ 0x28
 8000be4:	f002 fc68 	bl	80034b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000be8:	2028      	movs	r0, #40	@ 0x28
 8000bea:	f002 fc7f 	bl	80034ec <HAL_NVIC_EnableIRQ>

}
 8000bee:	bf00      	nop
 8000bf0:	3738      	adds	r7, #56	@ 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	58020400 	.word	0x58020400
 8000c00:	58020c00 	.word	0x58020c00
 8000c04:	58021000 	.word	0x58021000
 8000c08:	58020800 	.word	0x58020800
 8000c0c:	58020000 	.word	0x58020000
 8000c10:	58021400 	.word	0x58021400
 8000c14:	58021800 	.word	0x58021800

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f001 f812 	bl	8001c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f81c 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f7ff fea0 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c28:	f7ff fe18 	bl	800085c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c2c:	f000 fbf0 	bl	8001410 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c30:	f7ff fce0 	bl	80005f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c34:	f000 fba0 	bl	8001378 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8000c38:	2202      	movs	r2, #2
 8000c3a:	4906      	ldr	r1, [pc, #24]	@ (8000c54 <main+0x3c>)
 8000c3c:	4806      	ldr	r0, [pc, #24]	@ (8000c58 <main+0x40>)
 8000c3e:	f001 fc17 	bl	8002470 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c42:	f00b fe37 	bl	800c8b4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c46:	f7ff fe49 	bl	80008dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c4a:	f00b fe57 	bl	800c8fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c4e:	bf00      	nop
 8000c50:	e7fd      	b.n	8000c4e <main+0x36>
 8000c52:	bf00      	nop
 8000c54:	24001508 	.word	0x24001508
 8000c58:	24001408 	.word	0x24001408

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09e      	sub	sp, #120	@ 0x78
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c66:	224c      	movs	r2, #76	@ 0x4c
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f012 f9e4 	bl	8013038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2220      	movs	r2, #32
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f012 f9dd 	bl	8013038 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f005 fc62 	bl	8006548 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b49      	ldr	r3, [pc, #292]	@ (8000db0 <SystemClock_Config+0x154>)
 8000c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c8c:	4a48      	ldr	r2, [pc, #288]	@ (8000db0 <SystemClock_Config+0x154>)
 8000c8e:	f023 0301 	bic.w	r3, r3, #1
 8000c92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c94:	4b46      	ldr	r3, [pc, #280]	@ (8000db0 <SystemClock_Config+0x154>)
 8000c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b45      	ldr	r3, [pc, #276]	@ (8000db4 <SystemClock_Config+0x158>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a44      	ldr	r2, [pc, #272]	@ (8000db4 <SystemClock_Config+0x158>)
 8000ca4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b42      	ldr	r3, [pc, #264]	@ (8000db4 <SystemClock_Config+0x158>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb6:	bf00      	nop
 8000cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000db4 <SystemClock_Config+0x158>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cc4:	d1f8      	bne.n	8000cb8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8000db8 <SystemClock_Config+0x15c>)
 8000cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ccc:	4a3a      	ldr	r2, [pc, #232]	@ (8000db8 <SystemClock_Config+0x15c>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cd6:	4b38      	ldr	r3, [pc, #224]	@ (8000db8 <SystemClock_Config+0x15c>)
 8000cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	4b32      	ldr	r3, [pc, #200]	@ (8000db4 <SystemClock_Config+0x158>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a31      	ldr	r2, [pc, #196]	@ (8000db4 <SystemClock_Config+0x158>)
 8000cee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <SystemClock_Config+0x158>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <SystemClock_Config+0x154>)
 8000d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d02:	4a2b      	ldr	r2, [pc, #172]	@ (8000db0 <SystemClock_Config+0x154>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d0a:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <SystemClock_Config+0x154>)
 8000d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d16:	bf00      	nop
 8000d18:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <SystemClock_Config+0x158>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d24:	d1f8      	bne.n	8000d18 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000d26:	2310      	movs	r3, #16
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000d2a:	2380      	movs	r3, #128	@ 0x80
 8000d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000d2e:	2320      	movs	r3, #32
 8000d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2302      	movs	r3, #2
 8000d34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000d36:	2301      	movs	r3, #1
 8000d38:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000d3e:	23f0      	movs	r3, #240	@ 0xf0
 8000d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d46:	2304      	movs	r3, #4
 8000d48:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f005 fc2c 	bl	80065bc <HAL_RCC_OscConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000d6a:	f000 f839 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	233f      	movs	r3, #63	@ 0x3f
 8000d70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2303      	movs	r3, #3
 8000d74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d7e:	2340      	movs	r3, #64	@ 0x40
 8000d80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d82:	2340      	movs	r3, #64	@ 0x40
 8000d84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d8c:	2340      	movs	r3, #64	@ 0x40
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2104      	movs	r1, #4
 8000d96:	4618      	mov	r0, r3
 8000d98:	f006 f86a 	bl	8006e70 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000da2:	f000 f81d 	bl	8000de0 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3778      	adds	r7, #120	@ 0x78
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	58000400 	.word	0x58000400
 8000db4:	58024800 	.word	0x58024800
 8000db8:	58024400 	.word	0x58024400

08000dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dce:	f000 ff75 	bl	8001cbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40001000 	.word	0x40001000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <Error_Handler+0x8>

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <HAL_MspInit+0x38>)
 8000df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_MspInit+0x38>)
 8000dfa:	f043 0302 	orr.w	r3, r3, #2
 8000dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <HAL_MspInit+0x38>)
 8000e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	210f      	movs	r1, #15
 8000e14:	f06f 0001 	mvn.w	r0, #1
 8000e18:	f002 fb4e 	bl	80034b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58024400 	.word	0x58024400

08000e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b090      	sub	sp, #64	@ 0x40
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	d827      	bhi.n	8000e86 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e36:	2200      	movs	r2, #0
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	2036      	movs	r0, #54	@ 0x36
 8000e3c:	f002 fb3c 	bl	80034b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e40:	2036      	movs	r0, #54	@ 0x36
 8000e42:	f002 fb53 	bl	80034ec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e46:	4a29      	ldr	r2, [pc, #164]	@ (8000eec <HAL_InitTick+0xc4>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <HAL_InitTick+0xc8>)
 8000e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e52:	4a27      	ldr	r2, [pc, #156]	@ (8000ef0 <HAL_InitTick+0xc8>)
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <HAL_InitTick+0xc8>)
 8000e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6a:	f107 0210 	add.w	r2, r7, #16
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 fb87 	bl	8007588 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d106      	bne.n	8000e92 <HAL_InitTick+0x6a>
 8000e84:	e001      	b.n	8000e8a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e02b      	b.n	8000ee2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e8a:	f006 fb51 	bl	8007530 <HAL_RCC_GetPCLK1Freq>
 8000e8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000e90:	e004      	b.n	8000e9c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e92:	f006 fb4d 	bl	8007530 <HAL_RCC_GetPCLK1Freq>
 8000e96:	4603      	mov	r3, r0
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ef4 <HAL_InitTick+0xcc>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	0c9b      	lsrs	r3, r3, #18
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <HAL_InitTick+0xd0>)
 8000eac:	4a13      	ldr	r2, [pc, #76]	@ (8000efc <HAL_InitTick+0xd4>)
 8000eae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_InitTick+0xd0>)
 8000eb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <HAL_InitTick+0xd0>)
 8000eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ebc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_InitTick+0xd0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_InitTick+0xd0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000eca:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <HAL_InitTick+0xd0>)
 8000ecc:	f009 f89c 	bl	800a008 <HAL_TIM_Base_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d104      	bne.n	8000ee0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ed6:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <HAL_InitTick+0xd0>)
 8000ed8:	f009 f8f8 	bl	800a0cc <HAL_TIM_Base_Start_IT>
 8000edc:	4603      	mov	r3, r0
 8000ede:	e000      	b.n	8000ee2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3740      	adds	r7, #64	@ 0x40
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	24000008 	.word	0x24000008
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	431bde83 	.word	0x431bde83
 8000ef8:	24001510 	.word	0x24001510
 8000efc:	40001000 	.word	0x40001000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <NMI_Handler+0x4>

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <MemManage_Handler+0x4>

08000f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <DMA1_Stream0_IRQHandler+0x10>)
 8000f3e:	f003 fe0d 	bl	8004b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	24001778 	.word	0x24001778

08000f4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <DMA1_Stream1_IRQHandler+0x10>)
 8000f52:	f003 fe03 	bl	8004b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	240017f0 	.word	0x240017f0

08000f60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <USART2_IRQHandler+0x10>)
 8000f66:	f009 fd4b 	bl	800aa00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	24001560 	.word	0x24001560

08000f74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <USART3_IRQHandler+0x10>)
 8000f7a:	f009 fd41 	bl	800aa00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	240015f4 	.word	0x240015f4

08000f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8000f8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f90:	f005 fabf 	bl	8006512 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <TIM6_DAC_IRQHandler+0x10>)
 8000f9e:	f009 f90d 	bl	800a1bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	24001510 	.word	0x24001510

08000fac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <DMA2_Stream2_IRQHandler+0x10>)
 8000fb2:	f003 fdd3 	bl	8004b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	24001700 	.word	0x24001700

08000fc0 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fca:	f012 f8e9 	bl	80131a0 <__errno>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2216      	movs	r2, #22
 8000fd2:	601a      	str	r2, [r3, #0]
  return -1;
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_exit>:

void _exit (int status)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffe7 	bl	8000fc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ff2:	bf00      	nop
 8000ff4:	e7fd      	b.n	8000ff2 <_exit+0x12>

08000ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e00a      	b.n	800101e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001008:	f3af 8000 	nop.w
 800100c:	4601      	mov	r1, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	60ba      	str	r2, [r7, #8]
 8001014:	b2ca      	uxtb	r2, r1
 8001016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	429a      	cmp	r2, r3
 8001024:	dbf0      	blt.n	8001008 <_read+0x12>
  }

  return len;
 8001026:	687b      	ldr	r3, [r7, #4]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e009      	b.n	8001056 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	60ba      	str	r2, [r7, #8]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	429a      	cmp	r2, r3
 800105c:	dbf1      	blt.n	8001042 <_write+0x12>
  }
  return len;
 800105e:	687b      	ldr	r3, [r7, #4]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_close>:

int _close(int file)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001090:	605a      	str	r2, [r3, #4]
  return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_isatty>:

int _isatty(int file)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a8:	2301      	movs	r3, #1
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f012 f84e 	bl	80131a0 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	24080000 	.word	0x24080000
 8001130:	00000400 	.word	0x00000400
 8001134:	2400155c 	.word	0x2400155c
 8001138:	240334e0 	.word	0x240334e0

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001140:	4b37      	ldr	r3, [pc, #220]	@ (8001220 <SystemInit+0xe4>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a36      	ldr	r2, [pc, #216]	@ (8001220 <SystemInit+0xe4>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001150:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <SystemInit+0xe8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	2b06      	cmp	r3, #6
 800115a:	d807      	bhi.n	800116c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800115c:	4b31      	ldr	r3, [pc, #196]	@ (8001224 <SystemInit+0xe8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 030f 	bic.w	r3, r3, #15
 8001164:	4a2f      	ldr	r2, [pc, #188]	@ (8001224 <SystemInit+0xe8>)
 8001166:	f043 0307 	orr.w	r3, r3, #7
 800116a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800116c:	4b2e      	ldr	r3, [pc, #184]	@ (8001228 <SystemInit+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a2d      	ldr	r2, [pc, #180]	@ (8001228 <SystemInit+0xec>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001178:	4b2b      	ldr	r3, [pc, #172]	@ (8001228 <SystemInit+0xec>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800117e:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <SystemInit+0xec>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4929      	ldr	r1, [pc, #164]	@ (8001228 <SystemInit+0xec>)
 8001184:	4b29      	ldr	r3, [pc, #164]	@ (800122c <SystemInit+0xf0>)
 8001186:	4013      	ands	r3, r2
 8001188:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800118a:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <SystemInit+0xe8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001196:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <SystemInit+0xe8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 030f 	bic.w	r3, r3, #15
 800119e:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <SystemInit+0xe8>)
 80011a0:	f043 0307 	orr.w	r3, r3, #7
 80011a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <SystemInit+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <SystemInit+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <SystemInit+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <SystemInit+0xec>)
 80011ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001230 <SystemInit+0xf4>)
 80011bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <SystemInit+0xec>)
 80011c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <SystemInit+0xf8>)
 80011c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <SystemInit+0xec>)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <SystemInit+0xfc>)
 80011c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ca:	4b17      	ldr	r3, [pc, #92]	@ (8001228 <SystemInit+0xec>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <SystemInit+0xec>)
 80011d2:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <SystemInit+0xfc>)
 80011d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011d6:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <SystemInit+0xec>)
 80011d8:	2200      	movs	r2, #0
 80011da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <SystemInit+0xec>)
 80011de:	4a16      	ldr	r2, [pc, #88]	@ (8001238 <SystemInit+0xfc>)
 80011e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <SystemInit+0xec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <SystemInit+0xec>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001228 <SystemInit+0xec>)
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <SystemInit+0xec>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <SystemInit+0x100>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <SystemInit+0x104>)
 8001200:	4013      	ands	r3, r2
 8001202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001206:	d202      	bcs.n	800120e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001208:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <SystemInit+0x108>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <SystemInit+0x10c>)
 8001210:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001214:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	52002000 	.word	0x52002000
 8001228:	58024400 	.word	0x58024400
 800122c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001230:	02020200 	.word	0x02020200
 8001234:	01ff0000 	.word	0x01ff0000
 8001238:	01010280 	.word	0x01010280
 800123c:	5c001000 	.word	0x5c001000
 8001240:	ffff0000 	.word	0xffff0000
 8001244:	51008108 	.word	0x51008108
 8001248:	52004000 	.word	0x52004000

0800124c <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0a6      	sub	sp, #152	@ 0x98
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]

  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;
  unsigned char ucGetVehicleDataAttempts = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

  // Joystick calibration
  unsigned int uiX0   = 33970;
 800125a:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 800125e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  unsigned int uiXMin = 1057;
 8001262:	f240 4321 	movw	r3, #1057	@ 0x421
 8001266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  unsigned int uiXMax = 65535;
 800126a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800126e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  unsigned int uiY0   = 33580;
 8001272:	f248 332c 	movw	r3, #33580	@ 0x832c
 8001276:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned int uiYMin = 1062;
 8001278:	f240 4326 	movw	r3, #1062	@ 0x426
 800127c:	67bb      	str	r3, [r7, #120]	@ 0x78
  unsigned int uiYMax = 65535;
 800127e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001282:	677b      	str	r3, [r7, #116]	@ 0x74
  unsigned char cDmaBuffer[UART2_DMA_BUFFER_SIZE]; // TODO Ajustar o buffer pro tamanho da mensagem, manter a mais nova

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, cDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	2240      	movs	r2, #64	@ 0x40
 800128a:	4619      	mov	r1, r3
 800128c:	4835      	ldr	r0, [pc, #212]	@ (8001364 <StartTaskControle+0x118>)
 800128e:	f009 fa59 	bl	800a744 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = AUTOWARE;
 8001292:	2301      	movs	r3, #1
 8001294:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

  // TESTING CODE FOR UART -- START

	xControlAction.fTrottle = 11.11;
 8001298:	4b33      	ldr	r3, [pc, #204]	@ (8001368 <StartTaskControle+0x11c>)
 800129a:	4a34      	ldr	r2, [pc, #208]	@ (800136c <StartTaskControle+0x120>)
 800129c:	601a      	str	r2, [r3, #0]
	xControlAction.fBrake = 22.22;
 800129e:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <StartTaskControle+0x11c>)
 80012a0:	4a33      	ldr	r2, [pc, #204]	@ (8001370 <StartTaskControle+0x124>)
 80012a2:	605a      	str	r2, [r3, #4]
	xControlAction.fSteeringAngle = 33.33;
 80012a4:	4b30      	ldr	r3, [pc, #192]	@ (8001368 <StartTaskControle+0x11c>)
 80012a6:	4a33      	ldr	r2, [pc, #204]	@ (8001374 <StartTaskControle+0x128>)
 80012a8:	609a      	str	r2, [r3, #8]
	xControlAction.ucManualGearShift = 1;
 80012aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001368 <StartTaskControle+0x11c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	739a      	strb	r2, [r3, #14]
	xControlAction.ucHandBrake = 2;
 80012b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <StartTaskControle+0x11c>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	731a      	strb	r2, [r3, #12]
	xControlAction.ucReverse = 3;
 80012b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001368 <StartTaskControle+0x11c>)
 80012b8:	2203      	movs	r2, #3
 80012ba:	735a      	strb	r2, [r3, #13]
	xControlAction.ucControlMode = MANUAL;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001368 <StartTaskControle+0x11c>)
 80012be:	2202      	movs	r2, #2
 80012c0:	741a      	strb	r2, [r3, #16]
	xControlAction.ucGear = 4;
 80012c2:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <StartTaskControle+0x11c>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	73da      	strb	r2, [r3, #15]

  while(1){

	vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80012c8:	4b27      	ldr	r3, [pc, #156]	@ (8001368 <StartTaskControle+0x11c>)
 80012ca:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80012ce:	9201      	str	r2, [sp, #4]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d6:	f000 faa7 	bl	8001828 <vGetStringFromControlAction>

	// Send cTxMsgToCarla to CARLA
	if (huart2.gState == HAL_UART_STATE_READY)
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <StartTaskControle+0x118>)
 80012dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e0:	2b20      	cmp	r3, #32
 80012e2:	d10c      	bne.n	80012fe <StartTaskControle+0xb2>
	{
	  HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla));
 80012e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f803 	bl	80002f4 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012f6:	4619      	mov	r1, r3
 80012f8:	481a      	ldr	r0, [pc, #104]	@ (8001364 <StartTaskControle+0x118>)
 80012fa:	f009 f9a3 	bl	800a644 <HAL_UART_Transmit_DMA>
	}

	do{

	    HAL_UART_DMAPause(&huart2); // Maybe its not a good idea pause DMA just after transmit
 80012fe:	4819      	ldr	r0, [pc, #100]	@ (8001364 <StartTaskControle+0x118>)
 8001300:	f009 fa6c 	bl	800a7dc <HAL_UART_DMAPause>
		ucFlagFullMsg = ucGetVehicleStatusFromString(&xVehicleStatus, cDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001304:	f107 0108 	add.w	r1, r7, #8
 8001308:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800130c:	2240      	movs	r2, #64	@ 0x40
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fb0a 	bl	8001928 <ucGetVehicleStatusFromString>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	    HAL_UART_DMAResume(&huart2);
 800131a:	4812      	ldr	r0, [pc, #72]	@ (8001364 <StartTaskControle+0x118>)
 800131c:	f009 faec 	bl	800a8f8 <HAL_UART_DMAResume>
		ucGetVehicleDataAttempts++;
 8001320:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001324:	3301      	adds	r3, #1
 8001326:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	} while(!ucFlagFullMsg && ucGetVehicleDataAttempts <= MAX_VEHICLE_GET_DATA_ATTEMPTS); //NAO_ENCONTRAR_O_$ -> Precisa da mensagem inteira
 800132a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800132e:	2b00      	cmp	r3, #0
 8001330:	d103      	bne.n	800133a <StartTaskControle+0xee>
 8001332:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001336:	2b05      	cmp	r3, #5
 8001338:	d9e1      	bls.n	80012fe <StartTaskControle+0xb2>
	if(ucGetVehicleDataAttempts == MAX_VEHICLE_GET_DATA_ATTEMPTS)
	{
		// Chamar rotina de emergência
	}

	ucGetVehicleDataAttempts = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	xControlAction.fTrottle = xVehicleStatus.xHeadingRate.fFloat;
 8001340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001342:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <StartTaskControle+0x11c>)
 8001344:	6013      	str	r3, [r2, #0]
	xControlAction.fBrake = xVehicleStatus.xLatSpeed.fFloat;
 8001346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001348:	4a07      	ldr	r2, [pc, #28]	@ (8001368 <StartTaskControle+0x11c>)
 800134a:	6053      	str	r3, [r2, #4]
	xControlAction.fSteeringAngle = xVehicleStatus.xLongSpeed.fFloat;
 800134c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800134e:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <StartTaskControle+0x11c>)
 8001350:	6093      	str	r3, [r2, #8]
	xControlAction.ucGear = xVehicleStatus.ucGear;
 8001352:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8001356:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <StartTaskControle+0x11c>)
 8001358:	73da      	strb	r2, [r3, #15]

	HAL_Delay(500);
 800135a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800135e:	f000 fccd 	bl	8001cfc <HAL_Delay>
	vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8001362:	e7b1      	b.n	80012c8 <StartTaskControle+0x7c>
 8001364:	24001560 	.word	0x24001560
 8001368:	240014e4 	.word	0x240014e4
 800136c:	4131c28f 	.word	0x4131c28f
 8001370:	41b1c28f 	.word	0x41b1c28f
 8001374:	420551ec 	.word	0x420551ec

08001378 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 800137e:	4a23      	ldr	r2, [pc, #140]	@ (800140c <MX_USART2_UART_Init+0x94>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c0:	4811      	ldr	r0, [pc, #68]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 80013c2:	f009 f8ef 	bl	800a5a4 <HAL_UART_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013cc:	f7ff fd08 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d0:	2100      	movs	r1, #0
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 80013d4:	f00b f960 	bl	800c698 <HAL_UARTEx_SetTxFifoThreshold>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013de:	f7ff fcff 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e2:	2100      	movs	r1, #0
 80013e4:	4808      	ldr	r0, [pc, #32]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 80013e6:	f00b f995 	bl	800c714 <HAL_UARTEx_SetRxFifoThreshold>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013f0:	f7ff fcf6 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_USART2_UART_Init+0x90>)
 80013f6:	f00b f916 	bl	800c626 <HAL_UARTEx_DisableFifoMode>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001400:	f7ff fcee 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24001560 	.word	0x24001560
 800140c:	40004400 	.word	0x40004400

08001410 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 8001416:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <MX_USART3_UART_Init+0x94>)
 8001418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 800141c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001458:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 800145a:	f009 f8a3 	bl	800a5a4 <HAL_UART_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001464:	f7ff fcbc 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001468:	2100      	movs	r1, #0
 800146a:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 800146c:	f00b f914 	bl	800c698 <HAL_UARTEx_SetTxFifoThreshold>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001476:	f7ff fcb3 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147a:	2100      	movs	r1, #0
 800147c:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 800147e:	f00b f949 	bl	800c714 <HAL_UARTEx_SetRxFifoThreshold>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001488:	f7ff fcaa 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_USART3_UART_Init+0x90>)
 800148e:	f00b f8ca 	bl	800c626 <HAL_UARTEx_DisableFifoMode>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001498:	f7ff fca2 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	240015f4 	.word	0x240015f4
 80014a4:	40004800 	.word	0x40004800

080014a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0be      	sub	sp, #248	@ 0xf8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	22c0      	movs	r2, #192	@ 0xc0
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f011 fdb5 	bl	8013038 <memset>
  if(uartHandle->Instance==USART2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6a      	ldr	r2, [pc, #424]	@ (800167c <HAL_UART_MspInit+0x1d4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	f040 80e1 	bne.w	800169c <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014da:	f04f 0202 	mov.w	r2, #2
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	4618      	mov	r0, r3
 80014f2:	f006 f88b 	bl	800760c <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80014fc:	f7ff fc70 	bl	8000de0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001500:	4b5f      	ldr	r3, [pc, #380]	@ (8001680 <HAL_UART_MspInit+0x1d8>)
 8001502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001506:	4a5e      	ldr	r2, [pc, #376]	@ (8001680 <HAL_UART_MspInit+0x1d8>)
 8001508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800150c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001510:	4b5b      	ldr	r3, [pc, #364]	@ (8001680 <HAL_UART_MspInit+0x1d8>)
 8001512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b58      	ldr	r3, [pc, #352]	@ (8001680 <HAL_UART_MspInit+0x1d8>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001524:	4a56      	ldr	r2, [pc, #344]	@ (8001680 <HAL_UART_MspInit+0x1d8>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152e:	4b54      	ldr	r3, [pc, #336]	@ (8001680 <HAL_UART_MspInit+0x1d8>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b50      	ldr	r3, [pc, #320]	@ (8001680 <HAL_UART_MspInit+0x1d8>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001542:	4a4f      	ldr	r2, [pc, #316]	@ (8001680 <HAL_UART_MspInit+0x1d8>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154c:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <HAL_UART_MspInit+0x1d8>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800155a:	2308      	movs	r3, #8
 800155c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001572:	2307      	movs	r3, #7
 8001574:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800157c:	4619      	mov	r1, r3
 800157e:	4841      	ldr	r0, [pc, #260]	@ (8001684 <HAL_UART_MspInit+0x1dc>)
 8001580:	f004 fdfe 	bl	8006180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001584:	2320      	movs	r3, #32
 8001586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159c:	2307      	movs	r3, #7
 800159e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4837      	ldr	r0, [pc, #220]	@ (8001688 <HAL_UART_MspInit+0x1e0>)
 80015aa:	f004 fde9 	bl	8006180 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015b0:	4a37      	ldr	r2, [pc, #220]	@ (8001690 <HAL_UART_MspInit+0x1e8>)
 80015b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80015b4:	4b35      	ldr	r3, [pc, #212]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015b6:	222b      	movs	r2, #43	@ 0x2b
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ba:	4b34      	ldr	r3, [pc, #208]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b32      	ldr	r3, [pc, #200]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b31      	ldr	r3, [pc, #196]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ce:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d4:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80015da:	4b2c      	ldr	r3, [pc, #176]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015e2:	4b2a      	ldr	r3, [pc, #168]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015e4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ea:	4b28      	ldr	r3, [pc, #160]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015f0:	4826      	ldr	r0, [pc, #152]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 80015f2:	f001 ff89 	bl	8003508 <HAL_DMA_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 80015fc:	f7ff fbf0 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a22      	ldr	r2, [pc, #136]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 8001604:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001608:	4a20      	ldr	r2, [pc, #128]	@ (800168c <HAL_UART_MspInit+0x1e4>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001610:	4a21      	ldr	r2, [pc, #132]	@ (8001698 <HAL_UART_MspInit+0x1f0>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001616:	222c      	movs	r2, #44	@ 0x2c
 8001618:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161a:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 800161c:	2240      	movs	r2, #64	@ 0x40
 800161e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800162c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001642:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001646:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800164e:	4811      	ldr	r0, [pc, #68]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001650:	f001 ff5a 	bl	8003508 <HAL_DMA_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_UART_MspInit+0x1b6>
    {
      Error_Handler();
 800165a:	f7ff fbc1 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a0c      	ldr	r2, [pc, #48]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001662:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001664:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <HAL_UART_MspInit+0x1ec>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2105      	movs	r1, #5
 800166e:	2026      	movs	r0, #38	@ 0x26
 8001670:	f001 ff22 	bl	80034b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001674:	2026      	movs	r0, #38	@ 0x26
 8001676:	f001 ff39 	bl	80034ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800167a:	e0c2      	b.n	8001802 <HAL_UART_MspInit+0x35a>
 800167c:	40004400 	.word	0x40004400
 8001680:	58024400 	.word	0x58024400
 8001684:	58020000 	.word	0x58020000
 8001688:	58020c00 	.word	0x58020c00
 800168c:	24001688 	.word	0x24001688
 8001690:	40020428 	.word	0x40020428
 8001694:	24001700 	.word	0x24001700
 8001698:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a5a      	ldr	r2, [pc, #360]	@ (800180c <HAL_UART_MspInit+0x364>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	f040 80ad 	bne.w	8001802 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016a8:	f04f 0202 	mov.w	r2, #2
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	f107 0320 	add.w	r3, r7, #32
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 ffa4 	bl	800760c <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_UART_MspInit+0x226>
      Error_Handler();
 80016ca:	f7ff fb89 	bl	8000de0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ce:	4b50      	ldr	r3, [pc, #320]	@ (8001810 <HAL_UART_MspInit+0x368>)
 80016d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001810 <HAL_UART_MspInit+0x368>)
 80016d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016de:	4b4c      	ldr	r3, [pc, #304]	@ (8001810 <HAL_UART_MspInit+0x368>)
 80016e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ec:	4b48      	ldr	r3, [pc, #288]	@ (8001810 <HAL_UART_MspInit+0x368>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	4a47      	ldr	r2, [pc, #284]	@ (8001810 <HAL_UART_MspInit+0x368>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fc:	4b44      	ldr	r3, [pc, #272]	@ (8001810 <HAL_UART_MspInit+0x368>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800170a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800170e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001724:	2307      	movs	r3, #7
 8001726:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800172e:	4619      	mov	r1, r3
 8001730:	4838      	ldr	r0, [pc, #224]	@ (8001814 <HAL_UART_MspInit+0x36c>)
 8001732:	f004 fd25 	bl	8006180 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001736:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <HAL_UART_MspInit+0x370>)
 8001738:	4a38      	ldr	r2, [pc, #224]	@ (800181c <HAL_UART_MspInit+0x374>)
 800173a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800173c:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <HAL_UART_MspInit+0x370>)
 800173e:	222d      	movs	r2, #45	@ 0x2d
 8001740:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001742:	4b35      	ldr	r3, [pc, #212]	@ (8001818 <HAL_UART_MspInit+0x370>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	4b33      	ldr	r3, [pc, #204]	@ (8001818 <HAL_UART_MspInit+0x370>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <HAL_UART_MspInit+0x370>)
 8001750:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001754:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001756:	4b30      	ldr	r3, [pc, #192]	@ (8001818 <HAL_UART_MspInit+0x370>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175c:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <HAL_UART_MspInit+0x370>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001762:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <HAL_UART_MspInit+0x370>)
 8001764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001768:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800176a:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <HAL_UART_MspInit+0x370>)
 800176c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001770:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <HAL_UART_MspInit+0x370>)
 8001774:	2200      	movs	r2, #0
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001778:	4827      	ldr	r0, [pc, #156]	@ (8001818 <HAL_UART_MspInit+0x370>)
 800177a:	f001 fec5 	bl	8003508 <HAL_DMA_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8001784:	f7ff fb2c 	bl	8000de0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a23      	ldr	r2, [pc, #140]	@ (8001818 <HAL_UART_MspInit+0x370>)
 800178c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001790:	4a21      	ldr	r2, [pc, #132]	@ (8001818 <HAL_UART_MspInit+0x370>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001796:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <HAL_UART_MspInit+0x378>)
 8001798:	4a22      	ldr	r2, [pc, #136]	@ (8001824 <HAL_UART_MspInit+0x37c>)
 800179a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800179c:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <HAL_UART_MspInit+0x378>)
 800179e:	222e      	movs	r2, #46	@ 0x2e
 80017a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017a4:	2240      	movs	r2, #64	@ 0x40
 80017a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017bc:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80017ce:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80017d6:	4812      	ldr	r0, [pc, #72]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017d8:	f001 fe96 	bl	8003508 <HAL_DMA_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 80017e2:	f7ff fafd 	bl	8000de0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017ea:	67da      	str	r2, [r3, #124]	@ 0x7c
 80017ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <HAL_UART_MspInit+0x378>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2108      	movs	r1, #8
 80017f6:	2027      	movs	r0, #39	@ 0x27
 80017f8:	f001 fe5e 	bl	80034b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017fc:	2027      	movs	r0, #39	@ 0x27
 80017fe:	f001 fe75 	bl	80034ec <HAL_NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	37f8      	adds	r7, #248	@ 0xf8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40004800 	.word	0x40004800
 8001810:	58024400 	.word	0x58024400
 8001814:	58020c00 	.word	0x58020c00
 8001818:	24001778 	.word	0x24001778
 800181c:	40020010 	.word	0x40020010
 8001820:	240017f0 	.word	0x240017f0
 8001824:	40020028 	.word	0x40020028

08001828 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8001828:	b084      	sub	sp, #16
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	f107 0c18 	add.w	ip, r7, #24
 8001834:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  float_bytes xThrottle;
  float_bytes xSteering;
  float_bytes xBrake;

  xThrottle.fFloat = xControlActionTx.fTrottle;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	60fb      	str	r3, [r7, #12]
  xSteering.fFloat = xControlActionTx.fSteeringAngle;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	60bb      	str	r3, [r7, #8]
  xBrake.fFloat = xControlActionTx.fBrake;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	607b      	str	r3, [r7, #4]

  ucTxMsg[0]  = (unsigned char)'#';
 8001844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001846:	2223      	movs	r2, #35	@ 0x23
 8001848:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'T';
 800184a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184c:	3301      	adds	r3, #1
 800184e:	2254      	movs	r2, #84	@ 0x54
 8001850:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xThrottle.ucBytes[0];
 8001852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001854:	3302      	adds	r3, #2
 8001856:	7b3a      	ldrb	r2, [r7, #12]
 8001858:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xThrottle.ucBytes[1];
 800185a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185c:	3303      	adds	r3, #3
 800185e:	7b7a      	ldrb	r2, [r7, #13]
 8001860:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xThrottle.ucBytes[2];
 8001862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001864:	3304      	adds	r3, #4
 8001866:	7bba      	ldrb	r2, [r7, #14]
 8001868:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xThrottle.ucBytes[3];
 800186a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186c:	3305      	adds	r3, #5
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'S';
 8001872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001874:	3306      	adds	r3, #6
 8001876:	2253      	movs	r2, #83	@ 0x53
 8001878:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xSteering.ucBytes[0];
 800187a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187c:	3307      	adds	r3, #7
 800187e:	7a3a      	ldrb	r2, [r7, #8]
 8001880:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xSteering.ucBytes[1];
 8001882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001884:	3308      	adds	r3, #8
 8001886:	7a7a      	ldrb	r2, [r7, #9]
 8001888:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xSteering.ucBytes[2];
 800188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188c:	3309      	adds	r3, #9
 800188e:	7aba      	ldrb	r2, [r7, #10]
 8001890:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xSteering.ucBytes[3];
 8001892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001894:	330a      	adds	r3, #10
 8001896:	7afa      	ldrb	r2, [r7, #11]
 8001898:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'B';
 800189a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189c:	330b      	adds	r3, #11
 800189e:	2242      	movs	r2, #66	@ 0x42
 80018a0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xBrake.ucBytes[0];
 80018a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a4:	330c      	adds	r3, #12
 80018a6:	793a      	ldrb	r2, [r7, #4]
 80018a8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xBrake.ucBytes[1];
 80018aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ac:	330d      	adds	r3, #13
 80018ae:	797a      	ldrb	r2, [r7, #5]
 80018b0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xBrake.ucBytes[2];
 80018b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b4:	330e      	adds	r3, #14
 80018b6:	79ba      	ldrb	r2, [r7, #6]
 80018b8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xBrake.ucBytes[3];
 80018ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018bc:	330f      	adds	r3, #15
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'H';
 80018c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c4:	3310      	adds	r3, #16
 80018c6:	2248      	movs	r2, #72	@ 0x48
 80018c8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.ucHandBrake;
 80018ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018cc:	3311      	adds	r3, #17
 80018ce:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80018d2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = (unsigned char)'R';
 80018d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d6:	3312      	adds	r3, #18
 80018d8:	2252      	movs	r2, #82	@ 0x52
 80018da:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.ucReverse;
 80018dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018de:	3313      	adds	r3, #19
 80018e0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80018e4:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = (unsigned char)'G';
 80018e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e8:	3314      	adds	r3, #20
 80018ea:	2247      	movs	r2, #71	@ 0x47
 80018ec:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = xControlActionTx.ucGear;
 80018ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f0:	3315      	adds	r3, #21
 80018f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80018f6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = (unsigned char)'M';
 80018f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fa:	3316      	adds	r3, #22
 80018fc:	224d      	movs	r2, #77	@ 0x4d
 80018fe:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.ucManualGearShift;
 8001900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001902:	3317      	adds	r3, #23
 8001904:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001908:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = (unsigned char)'$';
 800190a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190c:	3318      	adds	r3, #24
 800190e:	2224      	movs	r2, #36	@ 0x24
 8001910:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = (unsigned char)'\0';
 8001912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001914:	3319      	adds	r3, #25
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
  
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	b004      	add	sp, #16
 8001926:	4770      	bx	lr

08001928 <ucGetVehicleStatusFromString>:
  * @param  ucSmState: State machine state.
  * @param  ucBufferSize: DMA buffer size.
  * @retval String casted in uc that will be send in serial.
  */
unsigned char ucGetVehicleStatusFromString(vehicle_status * xVehicleStatusRx, unsigned char * ucStringRx, unsigned char ucBufferSize)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	4613      	mov	r3, r2
 8001934:	71fb      	strb	r3, [r7, #7]
  unsigned char ucSmState = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	75fb      	strb	r3, [r7, #23]
  unsigned char ucDataProcessed = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	75bb      	strb	r3, [r7, #22]
  unsigned char ucIndex = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	757b      	strb	r3, [r7, #21]

  while(ucDataProcessed < strlen((char * )ucStringRx))
 8001942:	e147      	b.n	8001bd4 <ucGetVehicleStatusFromString+0x2ac>
  {
    switch (ucSmState)
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	2b28      	cmp	r3, #40	@ 0x28
 8001948:	f200 8135 	bhi.w	8001bb6 <ucGetVehicleStatusFromString+0x28e>
 800194c:	a201      	add	r2, pc, #4	@ (adr r2, 8001954 <ucGetVehicleStatusFromString+0x2c>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	080019f9 	.word	0x080019f9
 8001958:	08001a11 	.word	0x08001a11
 800195c:	08001bb7 	.word	0x08001bb7
 8001960:	08001bb7 	.word	0x08001bb7
 8001964:	08001bb7 	.word	0x08001bb7
 8001968:	08001bb7 	.word	0x08001bb7
 800196c:	08001bb7 	.word	0x08001bb7
 8001970:	08001bb7 	.word	0x08001bb7
 8001974:	08001bb7 	.word	0x08001bb7
 8001978:	08001bb7 	.word	0x08001bb7
 800197c:	08001acd 	.word	0x08001acd
 8001980:	08001adf 	.word	0x08001adf
 8001984:	08001af1 	.word	0x08001af1
 8001988:	08001b03 	.word	0x08001b03
 800198c:	08001bb7 	.word	0x08001bb7
 8001990:	08001bb7 	.word	0x08001bb7
 8001994:	08001bb7 	.word	0x08001bb7
 8001998:	08001bb7 	.word	0x08001bb7
 800199c:	08001bb7 	.word	0x08001bb7
 80019a0:	08001bb7 	.word	0x08001bb7
 80019a4:	08001b15 	.word	0x08001b15
 80019a8:	08001b27 	.word	0x08001b27
 80019ac:	08001b39 	.word	0x08001b39
 80019b0:	08001b4b 	.word	0x08001b4b
 80019b4:	08001bb7 	.word	0x08001bb7
 80019b8:	08001bb7 	.word	0x08001bb7
 80019bc:	08001bb7 	.word	0x08001bb7
 80019c0:	08001bb7 	.word	0x08001bb7
 80019c4:	08001bb7 	.word	0x08001bb7
 80019c8:	08001bb7 	.word	0x08001bb7
 80019cc:	08001b5d 	.word	0x08001b5d
 80019d0:	08001b6f 	.word	0x08001b6f
 80019d4:	08001b81 	.word	0x08001b81
 80019d8:	08001b93 	.word	0x08001b93
 80019dc:	08001bb7 	.word	0x08001bb7
 80019e0:	08001bb7 	.word	0x08001bb7
 80019e4:	08001bb7 	.word	0x08001bb7
 80019e8:	08001bb7 	.word	0x08001bb7
 80019ec:	08001bb7 	.word	0x08001bb7
 80019f0:	08001bb7 	.word	0x08001bb7
 80019f4:	08001ba5 	.word	0x08001ba5
    {
      case 0:
        if('#' == ucStringRx[ucIndex])
 80019f8:	7d7b      	ldrb	r3, [r7, #21]
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b23      	cmp	r3, #35	@ 0x23
 8001a02:	f040 80da 	bne.w	8001bba <ucGetVehicleStatusFromString+0x292>
        {
          ucSmState = 1;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
          ucDataProcessed = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75bb      	strb	r3, [r7, #22]
        }
        break;
 8001a0e:	e0d4      	b.n	8001bba <ucGetVehicleStatusFromString+0x292>
      
      case 1:
        switch (ucStringRx[ucIndex])
 8001a10:	7d7b      	ldrb	r3, [r7, #21]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3b24      	subs	r3, #36	@ 0x24
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d854      	bhi.n	8001ac8 <ucGetVehicleStatusFromString+0x1a0>
 8001a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a24 <ucGetVehicleStatusFromString+0xfc>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001ac1 	.word	0x08001ac1
 8001a28:	08001ac9 	.word	0x08001ac9
 8001a2c:	08001ac9 	.word	0x08001ac9
 8001a30:	08001ac9 	.word	0x08001ac9
 8001a34:	08001ac9 	.word	0x08001ac9
 8001a38:	08001ac9 	.word	0x08001ac9
 8001a3c:	08001ac9 	.word	0x08001ac9
 8001a40:	08001ac9 	.word	0x08001ac9
 8001a44:	08001ac9 	.word	0x08001ac9
 8001a48:	08001ac9 	.word	0x08001ac9
 8001a4c:	08001ac9 	.word	0x08001ac9
 8001a50:	08001ac9 	.word	0x08001ac9
 8001a54:	08001ac9 	.word	0x08001ac9
 8001a58:	08001ac9 	.word	0x08001ac9
 8001a5c:	08001ac9 	.word	0x08001ac9
 8001a60:	08001ac9 	.word	0x08001ac9
 8001a64:	08001ac9 	.word	0x08001ac9
 8001a68:	08001ac9 	.word	0x08001ac9
 8001a6c:	08001ac9 	.word	0x08001ac9
 8001a70:	08001ac9 	.word	0x08001ac9
 8001a74:	08001ac9 	.word	0x08001ac9
 8001a78:	08001ac9 	.word	0x08001ac9
 8001a7c:	08001ac9 	.word	0x08001ac9
 8001a80:	08001ac9 	.word	0x08001ac9
 8001a84:	08001ac9 	.word	0x08001ac9
 8001a88:	08001ac9 	.word	0x08001ac9
 8001a8c:	08001ac9 	.word	0x08001ac9
 8001a90:	08001ac9 	.word	0x08001ac9
 8001a94:	08001ac9 	.word	0x08001ac9
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001aaf 	.word	0x08001aaf
 8001aa0:	08001ab5 	.word	0x08001ab5
 8001aa4:	08001abb 	.word	0x08001abb
        {
          case 'A':
            ucSmState = 10;
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	75fb      	strb	r3, [r7, #23]
            break;
 8001aac:	e00d      	b.n	8001aca <ucGetVehicleStatusFromString+0x1a2>

          case 'B':
            ucSmState = 20;
 8001aae:	2314      	movs	r3, #20
 8001ab0:	75fb      	strb	r3, [r7, #23]
            break;
 8001ab2:	e00a      	b.n	8001aca <ucGetVehicleStatusFromString+0x1a2>

          case 'C':
            ucSmState = 30;
 8001ab4:	231e      	movs	r3, #30
 8001ab6:	75fb      	strb	r3, [r7, #23]
            break;
 8001ab8:	e007      	b.n	8001aca <ucGetVehicleStatusFromString+0x1a2>

          case 'D':
            ucSmState = 40;
 8001aba:	2328      	movs	r3, #40	@ 0x28
 8001abc:	75fb      	strb	r3, [r7, #23]
            break;
 8001abe:	e004      	b.n	8001aca <ucGetVehicleStatusFromString+0x1a2>

          case '$':
            ucSmState = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
            return 1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e08e      	b.n	8001be6 <ucGetVehicleStatusFromString+0x2be>
            break;
                
          default:
              break;
 8001ac8:	bf00      	nop
        }
        break;
 8001aca:	e077      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 10:
        xVehicleStatusRx->xLongSpeed.ucBytes[0] = ucStringRx[ucIndex];
 8001acc:	7d7b      	ldrb	r3, [r7, #21]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	701a      	strb	r2, [r3, #0]
        ucSmState = 11;
 8001ad8:	230b      	movs	r3, #11
 8001ada:	75fb      	strb	r3, [r7, #23]
        break;
 8001adc:	e06e      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 11:
        xVehicleStatusRx->xLongSpeed.ucBytes[1] = ucStringRx[ucIndex];
 8001ade:	7d7b      	ldrb	r3, [r7, #21]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	705a      	strb	r2, [r3, #1]
        ucSmState = 12;
 8001aea:	230c      	movs	r3, #12
 8001aec:	75fb      	strb	r3, [r7, #23]
        break;
 8001aee:	e065      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 12:
        xVehicleStatusRx->xLongSpeed.ucBytes[2] = ucStringRx[ucIndex];
 8001af0:	7d7b      	ldrb	r3, [r7, #21]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	4413      	add	r3, r2
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	709a      	strb	r2, [r3, #2]
        ucSmState = 13;
 8001afc:	230d      	movs	r3, #13
 8001afe:	75fb      	strb	r3, [r7, #23]
        break;
 8001b00:	e05c      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 13:
        xVehicleStatusRx->xLongSpeed.ucBytes[3] = ucStringRx[ucIndex];
 8001b02:	7d7b      	ldrb	r3, [r7, #21]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	4413      	add	r3, r2
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	70da      	strb	r2, [r3, #3]
        ucSmState = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
        break;
 8001b12:	e053      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 20:
        xVehicleStatusRx->xLatSpeed.ucBytes[0] = ucStringRx[ucIndex];
 8001b14:	7d7b      	ldrb	r3, [r7, #21]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4413      	add	r3, r2
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	711a      	strb	r2, [r3, #4]
        ucSmState = 21;
 8001b20:	2315      	movs	r3, #21
 8001b22:	75fb      	strb	r3, [r7, #23]
        break;
 8001b24:	e04a      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 21:
        xVehicleStatusRx->xLatSpeed.ucBytes[1] = ucStringRx[ucIndex];
 8001b26:	7d7b      	ldrb	r3, [r7, #21]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	715a      	strb	r2, [r3, #5]
        ucSmState = 22;
 8001b32:	2316      	movs	r3, #22
 8001b34:	75fb      	strb	r3, [r7, #23]
        break;
 8001b36:	e041      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 22:
        xVehicleStatusRx->xLatSpeed.ucBytes[2] = ucStringRx[ucIndex];
 8001b38:	7d7b      	ldrb	r3, [r7, #21]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	719a      	strb	r2, [r3, #6]
        ucSmState = 23;
 8001b44:	2317      	movs	r3, #23
 8001b46:	75fb      	strb	r3, [r7, #23]
        break;
 8001b48:	e038      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 23:
        xVehicleStatusRx->xLatSpeed.ucBytes[3] = ucStringRx[ucIndex];
 8001b4a:	7d7b      	ldrb	r3, [r7, #21]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	71da      	strb	r2, [r3, #7]
        ucSmState = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
        break;
 8001b5a:	e02f      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 30:
        xVehicleStatusRx->xHeadingRate.ucBytes[0] = ucStringRx[ucIndex];
 8001b5c:	7d7b      	ldrb	r3, [r7, #21]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	4413      	add	r3, r2
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	721a      	strb	r2, [r3, #8]
        ucSmState = 31;
 8001b68:	231f      	movs	r3, #31
 8001b6a:	75fb      	strb	r3, [r7, #23]
        break;
 8001b6c:	e026      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 31:
        xVehicleStatusRx->xHeadingRate.ucBytes[1] = ucStringRx[ucIndex];
 8001b6e:	7d7b      	ldrb	r3, [r7, #21]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	4413      	add	r3, r2
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	725a      	strb	r2, [r3, #9]
        ucSmState = 32;
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	75fb      	strb	r3, [r7, #23]
        break;
 8001b7e:	e01d      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 32:
        xVehicleStatusRx->xHeadingRate.ucBytes[2] = ucStringRx[ucIndex];
 8001b80:	7d7b      	ldrb	r3, [r7, #21]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	4413      	add	r3, r2
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	729a      	strb	r2, [r3, #10]
        ucSmState = 33;
 8001b8c:	2321      	movs	r3, #33	@ 0x21
 8001b8e:	75fb      	strb	r3, [r7, #23]
        break;
 8001b90:	e014      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 33:
        xVehicleStatusRx->xHeadingRate.ucBytes[3] = ucStringRx[ucIndex];
 8001b92:	7d7b      	ldrb	r3, [r7, #21]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	4413      	add	r3, r2
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	72da      	strb	r2, [r3, #11]
        ucSmState = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	75fb      	strb	r3, [r7, #23]
        break;
 8001ba2:	e00b      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>

      case 40:
        xVehicleStatusRx->ucGear = ucStringRx[ucIndex];
 8001ba4:	7d7b      	ldrb	r3, [r7, #21]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4413      	add	r3, r2
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	731a      	strb	r2, [r3, #12]
        ucSmState = 1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	75fb      	strb	r3, [r7, #23]
        break;
 8001bb4:	e002      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>


      default:
          break;
 8001bb6:	bf00      	nop
 8001bb8:	e000      	b.n	8001bbc <ucGetVehicleStatusFromString+0x294>
        break;
 8001bba:	bf00      	nop
    }

    ucIndex = (ucIndex + 1) % ucBufferSize;
 8001bbc:	7d7b      	ldrb	r3, [r7, #21]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bc6:	fb01 f202 	mul.w	r2, r1, r2
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	757b      	strb	r3, [r7, #21]
    ucDataProcessed++;
 8001bce:	7dbb      	ldrb	r3, [r7, #22]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	75bb      	strb	r3, [r7, #22]
  while(ucDataProcessed < strlen((char * )ucStringRx))
 8001bd4:	7dbc      	ldrb	r4, [r7, #22]
 8001bd6:	68b8      	ldr	r0, [r7, #8]
 8001bd8:	f7fe fb8c 	bl	80002f4 <strlen>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	429c      	cmp	r4, r3
 8001be0:	f4ff aeb0 	bcc.w	8001944 <ucGetVehicleStatusFromString+0x1c>

  }
  return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bf4:	f7ff faa2 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	@ (8001c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	@ (8001c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	@ (8001c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f011 fac5 	bl	80131ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7fe fff9 	bl	8000c18 <main>
  bx  lr
 8001c26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c30:	240013ec 	.word	0x240013ec
  ldr r2, =_sidata
 8001c34:	08014fdc 	.word	0x08014fdc
  ldr r2, =_sbss
 8001c38:	240013ec 	.word	0x240013ec
  ldr r4, =_ebss
 8001c3c:	240334e0 	.word	0x240334e0

08001c40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC3_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	f001 fc29 	bl	80034a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c50:	f005 fac4 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_Init+0x68>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4913      	ldr	r1, [pc, #76]	@ (8001cb0 <HAL_Init+0x6c>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_Init+0x68>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb0 <HAL_Init+0x6c>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb4 <HAL_Init+0x70>)
 8001c86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c88:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb8 <HAL_Init+0x74>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c8e:	200f      	movs	r0, #15
 8001c90:	f7ff f8ca 	bl	8000e28 <HAL_InitTick>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e002      	b.n	8001ca4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9e:	f7ff f8a5 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	080135d8 	.word	0x080135d8
 8001cb4:	24000004 	.word	0x24000004
 8001cb8:	24000000 	.word	0x24000000

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	2400000c 	.word	0x2400000c
 8001ce0:	24001868 	.word	0x24001868

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	@ (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	24001868 	.word	0x24001868

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff ffee 	bl	8001ce4 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <HAL_Delay+0x44>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffde 	bl	8001ce4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2400000c 	.word	0x2400000c

08001d44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d48:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <HAL_GetREVID+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0c1b      	lsrs	r3, r3, #16
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	5c001000 	.word	0x5c001000

08001d5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3360      	adds	r3, #96	@ 0x60
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	431a      	orrs	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	431a      	orrs	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	611a      	str	r2, [r3, #16]
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b087      	sub	sp, #28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3360      	adds	r3, #96	@ 0x60
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]
  }
}
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b087      	sub	sp, #28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3330      	adds	r3, #48	@ 0x30
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	211f      	movs	r1, #31
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0e9b      	lsrs	r3, r3, #26
 8001eca:	f003 011f 	and.w	r1, r3, #31
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f023 0203 	bic.w	r2, r3, #3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3314      	adds	r3, #20
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	0e5b      	lsrs	r3, r3, #25
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0d1b      	lsrs	r3, r3, #20
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2107      	movs	r1, #7
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	401a      	ands	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0d1b      	lsrs	r3, r3, #20
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f80:	43db      	mvns	r3, r3
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0318 	and.w	r3, r3, #24
 8001f8a:	4908      	ldr	r1, [pc, #32]	@ (8001fac <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f8c:	40d9      	lsrs	r1, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	400b      	ands	r3, r1
 8001f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	000fffff 	.word	0x000fffff

08001fb0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <LL_ADC_DisableDeepPowerDown+0x20>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6093      	str	r3, [r2, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	5fffffc0 	.word	0x5fffffc0

08001ff0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002004:	d101      	bne.n	800200a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <LL_ADC_EnableInternalRegulator+0x24>)
 8002026:	4013      	ands	r3, r2
 8002028:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	6fffffc0 	.word	0x6fffffc0

08002040 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002054:	d101      	bne.n	800205a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <LL_ADC_Enable+0x24>)
 8002076:	4013      	ands	r3, r2
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	7fffffc0 	.word	0x7fffffc0

08002090 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <LL_ADC_IsEnabled+0x18>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <LL_ADC_IsEnabled+0x1a>
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <LL_ADC_REG_StartConversion+0x24>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	f043 0204 	orr.w	r2, r3, #4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	7fffffc0 	.word	0x7fffffc0

080020e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d101      	bne.n	80020f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b08      	cmp	r3, #8
 8002118:	d101      	bne.n	800211e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e18f      	b.n	8002466 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe fad7 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff3f 	bl	8001ff0 <LL_ADC_IsDeepPowerDownEnabled>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff25 	bl	8001fcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff5a 	bl	8002040 <LL_ADC_IsInternalRegulatorEnabled>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d114      	bne.n	80021bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff3e 	bl	8002018 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800219c:	4b87      	ldr	r3, [pc, #540]	@ (80023bc <HAL_ADC_Init+0x290>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	4a87      	ldr	r2, [pc, #540]	@ (80023c0 <HAL_ADC_Init+0x294>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	3301      	adds	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021ae:	e002      	b.n	80021b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f9      	bne.n	80021b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff3d 	bl	8002040 <LL_ADC_IsInternalRegulatorEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff77 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 80021f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 8129 	bne.w	8002454 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 8125 	bne.w	8002454 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff36 	bl	8002090 <LL_ADC_IsEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d136      	bne.n	8002298 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a65      	ldr	r2, [pc, #404]	@ (80023c4 <HAL_ADC_Init+0x298>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d004      	beq.n	800223e <HAL_ADC_Init+0x112>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a63      	ldr	r2, [pc, #396]	@ (80023c8 <HAL_ADC_Init+0x29c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10e      	bne.n	800225c <HAL_ADC_Init+0x130>
 800223e:	4861      	ldr	r0, [pc, #388]	@ (80023c4 <HAL_ADC_Init+0x298>)
 8002240:	f7ff ff26 	bl	8002090 <LL_ADC_IsEnabled>
 8002244:	4604      	mov	r4, r0
 8002246:	4860      	ldr	r0, [pc, #384]	@ (80023c8 <HAL_ADC_Init+0x29c>)
 8002248:	f7ff ff22 	bl	8002090 <LL_ADC_IsEnabled>
 800224c:	4603      	mov	r3, r0
 800224e:	4323      	orrs	r3, r4
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e008      	b.n	800226e <HAL_ADC_Init+0x142>
 800225c:	485b      	ldr	r0, [pc, #364]	@ (80023cc <HAL_ADC_Init+0x2a0>)
 800225e:	f7ff ff17 	bl	8002090 <LL_ADC_IsEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d012      	beq.n	8002298 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a53      	ldr	r2, [pc, #332]	@ (80023c4 <HAL_ADC_Init+0x298>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d004      	beq.n	8002286 <HAL_ADC_Init+0x15a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a51      	ldr	r2, [pc, #324]	@ (80023c8 <HAL_ADC_Init+0x29c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_ADC_Init+0x15e>
 8002286:	4a52      	ldr	r2, [pc, #328]	@ (80023d0 <HAL_ADC_Init+0x2a4>)
 8002288:	e000      	b.n	800228c <HAL_ADC_Init+0x160>
 800228a:	4a52      	ldr	r2, [pc, #328]	@ (80023d4 <HAL_ADC_Init+0x2a8>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f7ff fd62 	bl	8001d5c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002298:	f7ff fd54 	bl	8001d44 <HAL_GetREVID>
 800229c:	4603      	mov	r3, r0
 800229e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d914      	bls.n	80022d0 <HAL_ADC_Init+0x1a4>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d110      	bne.n	80022d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7d5b      	ldrb	r3, [r3, #21]
 80022b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7f1b      	ldrb	r3, [r3, #28]
 80022c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022c8:	f043 030c 	orr.w	r3, r3, #12
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e00d      	b.n	80022ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7d5b      	ldrb	r3, [r3, #21]
 80022d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7f1b      	ldrb	r3, [r3, #28]
 80022e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7f1b      	ldrb	r3, [r3, #28]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	045b      	lsls	r3, r3, #17
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	4b2c      	ldr	r3, [pc, #176]	@ (80023d8 <HAL_ADC_Init+0x2ac>)
 8002326:	4013      	ands	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	69b9      	ldr	r1, [r7, #24]
 800232e:	430b      	orrs	r3, r1
 8002330:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fed2 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 800233c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fedf 	bl	8002106 <LL_ADC_INJ_IsConversionOngoing>
 8002348:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d15f      	bne.n	8002410 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d15c      	bne.n	8002410 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7d1b      	ldrb	r3, [r3, #20]
 800235a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <HAL_ADC_Init+0x2b0>)
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	430b      	orrs	r3, r1
 8002376:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800237e:	2b01      	cmp	r3, #1
 8002380:	d130      	bne.n	80023e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <HAL_ADC_Init+0x2b4>)
 8002390:	4013      	ands	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002396:	3a01      	subs	r2, #1
 8002398:	0411      	lsls	r1, r2, #16
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023a4:	4311      	orrs	r1, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023aa:	430a      	orrs	r2, r1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	611a      	str	r2, [r3, #16]
 80023b8:	e01c      	b.n	80023f4 <HAL_ADC_Init+0x2c8>
 80023ba:	bf00      	nop
 80023bc:	24000000 	.word	0x24000000
 80023c0:	053e2d63 	.word	0x053e2d63
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40022100 	.word	0x40022100
 80023cc:	58026000 	.word	0x58026000
 80023d0:	40022300 	.word	0x40022300
 80023d4:	58026300 	.word	0x58026300
 80023d8:	fff0c003 	.word	0xfff0c003
 80023dc:	ffffbffc 	.word	0xffffbffc
 80023e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fd8c 	bl	8002f28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10c      	bne.n	8002432 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f023 010f 	bic.w	r1, r3, #15
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	1e5a      	subs	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002430:	e007      	b.n	8002442 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 020f 	bic.w	r2, r2, #15
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54
 8002452:	e007      	b.n	8002464 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002458:	f043 0210 	orr.w	r2, r3, #16
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002464:	7ffb      	ldrb	r3, [r7, #31]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	@ 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop

08002470 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a55      	ldr	r2, [pc, #340]	@ (80025d8 <HAL_ADC_Start_DMA+0x168>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_ADC_Start_DMA+0x20>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a54      	ldr	r2, [pc, #336]	@ (80025dc <HAL_ADC_Start_DMA+0x16c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d101      	bne.n	8002494 <HAL_ADC_Start_DMA+0x24>
 8002490:	4b53      	ldr	r3, [pc, #332]	@ (80025e0 <HAL_ADC_Start_DMA+0x170>)
 8002492:	e000      	b.n	8002496 <HAL_ADC_Start_DMA+0x26>
 8002494:	4b53      	ldr	r3, [pc, #332]	@ (80025e4 <HAL_ADC_Start_DMA+0x174>)
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fd8a 	bl	8001fb0 <LL_ADC_GetMultimode>
 800249c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fe1c 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 808c 	bne.w	80025c8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Start_DMA+0x4e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e087      	b.n	80025ce <HAL_ADC_Start_DMA+0x15e>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d002      	beq.n	80024d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	d170      	bne.n	80025ba <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fc07 	bl	8002cec <ADC_Enable>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d163      	bne.n	80025b0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024ec:	4b3e      	ldr	r3, [pc, #248]	@ (80025e8 <HAL_ADC_Start_DMA+0x178>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a37      	ldr	r2, [pc, #220]	@ (80025dc <HAL_ADC_Start_DMA+0x16c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d002      	beq.n	8002508 <HAL_ADC_Start_DMA+0x98>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	e000      	b.n	800250a <HAL_ADC_Start_DMA+0x9a>
 8002508:	4b33      	ldr	r3, [pc, #204]	@ (80025d8 <HAL_ADC_Start_DMA+0x168>)
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	4293      	cmp	r3, r2
 8002510:	d002      	beq.n	8002518 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	f023 0206 	bic.w	r2, r3, #6
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	659a      	str	r2, [r3, #88]	@ 0x58
 800253c:	e002      	b.n	8002544 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	4a28      	ldr	r2, [pc, #160]	@ (80025ec <HAL_ADC_Start_DMA+0x17c>)
 800254a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	4a27      	ldr	r2, [pc, #156]	@ (80025f0 <HAL_ADC_Start_DMA+0x180>)
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002558:	4a26      	ldr	r2, [pc, #152]	@ (80025f4 <HAL_ADC_Start_DMA+0x184>)
 800255a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	221c      	movs	r2, #28
 8002562:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0210 	orr.w	r2, r2, #16
 800257a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f7ff fcaf 	bl	8001eea <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3340      	adds	r3, #64	@ 0x40
 8002596:	4619      	mov	r1, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f001 fb10 	bl	8003bc0 <HAL_DMA_Start_IT>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fd85 	bl	80020b8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025ae:	e00d      	b.n	80025cc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80025b8:	e008      	b.n	80025cc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80025c6:	e001      	b.n	80025cc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
 80025ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40022100 	.word	0x40022100
 80025e0:	40022300 	.word	0x40022300
 80025e4:	58026300 	.word	0x58026300
 80025e8:	fffff0fe 	.word	0xfffff0fe
 80025ec:	08002e01 	.word	0x08002e01
 80025f0:	08002ed9 	.word	0x08002ed9
 80025f4:	08002ef5 	.word	0x08002ef5

080025f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b0a1      	sub	sp, #132	@ 0x84
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a65      	ldr	r2, [pc, #404]	@ (80027e4 <HAL_ADC_ConfigChannel+0x1b0>)
 800264e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x2a>
 800265a:	2302      	movs	r3, #2
 800265c:	e32e      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x688>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fd38 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8313 	bne.w	8002c9e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db2c      	blt.n	80026da <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <HAL_ADC_ConfigChannel+0x6a>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2201      	movs	r2, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	e016      	b.n	80026cc <HAL_ADC_ConfigChannel+0x98>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ae:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e003      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80026ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2201      	movs	r2, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	69d1      	ldr	r1, [r2, #28]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7ff fbd3 	bl	8001e92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fcf5 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 80026f6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fd02 	bl	8002106 <LL_ADC_INJ_IsConversionOngoing>
 8002702:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 80b8 	bne.w	800287c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800270c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 80b4 	bne.w	800287c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	461a      	mov	r2, r3
 8002722:	f7ff fbf5 	bl	8001f10 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002726:	4b30      	ldr	r3, [pc, #192]	@ (80027e8 <HAL_ADC_ConfigChannel+0x1b4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800272e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002732:	d10b      	bne.n	800274c <HAL_ADC_ConfigChannel+0x118>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	e01d      	b.n	8002788 <HAL_ADC_ConfigChannel+0x154>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x13e>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	e00a      	b.n	8002788 <HAL_ADC_ConfigChannel+0x154>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d02c      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6919      	ldr	r1, [r3, #16]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027a0:	f7ff fb10 	bl	8001dc4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	7e5b      	ldrb	r3, [r3, #25]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d102      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x186>
 80027b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80027b8:	e000      	b.n	80027bc <HAL_ADC_ConfigChannel+0x188>
 80027ba:	2300      	movs	r3, #0
 80027bc:	461a      	mov	r2, r3
 80027be:	f7ff fb3a 	bl	8001e36 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6919      	ldr	r1, [r3, #16]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	7e1b      	ldrb	r3, [r3, #24]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1a4>
 80027d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027d6:	e000      	b.n	80027da <HAL_ADC_ConfigChannel+0x1a6>
 80027d8:	2300      	movs	r3, #0
 80027da:	461a      	mov	r2, r3
 80027dc:	f7ff fb12 	bl	8001e04 <LL_ADC_SetDataRightShift>
 80027e0:	e04c      	b.n	800287c <HAL_ADC_ConfigChannel+0x248>
 80027e2:	bf00      	nop
 80027e4:	47ff0000 	.word	0x47ff0000
 80027e8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	069b      	lsls	r3, r3, #26
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d107      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800280e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002816:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	069b      	lsls	r3, r3, #26
 8002820:	429a      	cmp	r2, r3
 8002822:	d107      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002832:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800283a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	069b      	lsls	r3, r3, #26
 8002844:	429a      	cmp	r2, r3
 8002846:	d107      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002856:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800285e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	069b      	lsls	r3, r3, #26
 8002868:	429a      	cmp	r2, r3
 800286a:	d107      	bne.n	800287c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800287a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fc05 	bl	8002090 <LL_ADC_IsEnabled>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 8211 	bne.w	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	f7ff fb64 	bl	8001f68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4aa1      	ldr	r2, [pc, #644]	@ (8002b2c <HAL_ADC_ConfigChannel+0x4f8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	f040 812e 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x2a0>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	3301      	adds	r3, #1
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2b09      	cmp	r3, #9
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e019      	b.n	8002908 <HAL_ADC_ConfigChannel+0x2d4>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80028e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80028e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e003      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80028f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2b09      	cmp	r3, #9
 8002900:	bf94      	ite	ls
 8002902:	2301      	movls	r3, #1
 8002904:	2300      	movhi	r3, #0
 8002906:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002908:	2b00      	cmp	r3, #0
 800290a:	d079      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x2f4>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	3301      	adds	r3, #1
 8002920:	069b      	lsls	r3, r3, #26
 8002922:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002926:	e015      	b.n	8002954 <HAL_ADC_ConfigChannel+0x320>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002938:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800293a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e003      	b.n	800294c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	069b      	lsls	r3, r3, #26
 8002950:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x340>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0e9b      	lsrs	r3, r3, #26
 8002966:	3301      	adds	r3, #1
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	e017      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x370>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002984:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	ea42 0103 	orr.w	r1, r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x396>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	051b      	lsls	r3, r3, #20
 80029c8:	e018      	b.n	80029fc <HAL_ADC_ConfigChannel+0x3c8>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80029d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e003      	b.n	80029ee <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80029e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fc:	430b      	orrs	r3, r1
 80029fe:	e07e      	b.n	8002afe <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x3e8>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	3301      	adds	r3, #1
 8002a14:	069b      	lsls	r3, r3, #26
 8002a16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a1a:	e015      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x414>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	069b      	lsls	r3, r3, #26
 8002a44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x434>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	e017      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x464>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	61bb      	str	r3, [r7, #24]
  return result;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	ea42 0103 	orr.w	r1, r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x490>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b1e      	subs	r3, #30
 8002abc:	051b      	lsls	r3, r3, #20
 8002abe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	e01b      	b.n	8002afc <HAL_ADC_ConfigChannel+0x4c8>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	60fb      	str	r3, [r7, #12]
  return result;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002adc:	2320      	movs	r3, #32
 8002ade:	e003      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f003 021f 	and.w	r2, r3, #31
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	3b1e      	subs	r3, #30
 8002af6:	051b      	lsls	r3, r3, #20
 8002af8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afc:	430b      	orrs	r3, r1
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7ff fa04 	bl	8001f10 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f280 80cf 	bge.w	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a06      	ldr	r2, [pc, #24]	@ (8002b30 <HAL_ADC_ConfigChannel+0x4fc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_ADC_ConfigChannel+0x4f2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <HAL_ADC_ConfigChannel+0x500>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10a      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x508>
 8002b26:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <HAL_ADC_ConfigChannel+0x504>)
 8002b28:	e009      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x50a>
 8002b2a:	bf00      	nop
 8002b2c:	47ff0000 	.word	0x47ff0000
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40022100 	.word	0x40022100
 8002b38:	40022300 	.word	0x40022300
 8002b3c:	4b61      	ldr	r3, [pc, #388]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x690>)
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f932 	bl	8001da8 <LL_ADC_GetCommonPathInternalCh>
 8002b44:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x694>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_ADC_ConfigChannel+0x526>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5d      	ldr	r2, [pc, #372]	@ (8002ccc <HAL_ADC_ConfigChannel+0x698>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d10e      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x544>
 8002b5a:	485b      	ldr	r0, [pc, #364]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x694>)
 8002b5c:	f7ff fa98 	bl	8002090 <LL_ADC_IsEnabled>
 8002b60:	4604      	mov	r4, r0
 8002b62:	485a      	ldr	r0, [pc, #360]	@ (8002ccc <HAL_ADC_ConfigChannel+0x698>)
 8002b64:	f7ff fa94 	bl	8002090 <LL_ADC_IsEnabled>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4323      	orrs	r3, r4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e008      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x556>
 8002b78:	4855      	ldr	r0, [pc, #340]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x69c>)
 8002b7a:	f7ff fa89 	bl	8002090 <LL_ADC_IsEnabled>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d07d      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a50      	ldr	r2, [pc, #320]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x6a0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d130      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x5c6>
 8002b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d12b      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a4a      	ldr	r2, [pc, #296]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x69c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	f040 8081 	bne.w	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a45      	ldr	r2, [pc, #276]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x694>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x58e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a43      	ldr	r2, [pc, #268]	@ (8002ccc <HAL_ADC_ConfigChannel+0x698>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x592>
 8002bc2:	4a45      	ldr	r2, [pc, #276]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x6a4>)
 8002bc4:	e000      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x594>
 8002bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x690>)
 8002bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7ff f8d6 	bl	8001d82 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd6:	4b41      	ldr	r3, [pc, #260]	@ (8002cdc <HAL_ADC_ConfigChannel+0x6a8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	4a40      	ldr	r2, [pc, #256]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x6ac>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	3301      	adds	r3, #1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bea:	e002      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f9      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf8:	e05a      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a39      	ldr	r2, [pc, #228]	@ (8002ce4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d11e      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x60e>
 8002c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d119      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x69c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d14b      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x694>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_ADC_ConfigChannel+0x5f8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a29      	ldr	r2, [pc, #164]	@ (8002ccc <HAL_ADC_ConfigChannel+0x698>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x5fc>
 8002c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x6a4>)
 8002c2e:	e000      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x5fe>
 8002c30:	4a24      	ldr	r2, [pc, #144]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x690>)
 8002c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f7ff f8a1 	bl	8001d82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c40:	e036      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a28      	ldr	r2, [pc, #160]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x6b4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d131      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
 8002c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d12c      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x69c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d127      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a18      	ldr	r2, [pc, #96]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x694>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x640>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ccc <HAL_ADC_ConfigChannel+0x698>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x644>
 8002c74:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x6a4>)
 8002c76:	e000      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x646>
 8002c78:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x690>)
 8002c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f7ff f87d 	bl	8001d82 <LL_ADC_SetCommonPathInternalCh>
 8002c88:	e012      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002c9c:	e008      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cb8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3784      	adds	r7, #132	@ 0x84
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	58026300 	.word	0x58026300
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	40022100 	.word	0x40022100
 8002cd0:	58026000 	.word	0x58026000
 8002cd4:	cb840000 	.word	0xcb840000
 8002cd8:	40022300 	.word	0x40022300
 8002cdc:	24000000 	.word	0x24000000
 8002ce0:	053e2d63 	.word	0x053e2d63
 8002ce4:	c7520000 	.word	0xc7520000
 8002ce8:	cfb80000 	.word	0xcfb80000

08002cec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f9c9 	bl	8002090 <LL_ADC_IsEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d16e      	bne.n	8002de2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	4b38      	ldr	r3, [pc, #224]	@ (8002dec <ADC_Enable+0x100>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d16:	f043 0210 	orr.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e05a      	b.n	8002de4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f998 	bl	8002068 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d38:	f7fe ffd4 	bl	8001ce4 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2b      	ldr	r2, [pc, #172]	@ (8002df0 <ADC_Enable+0x104>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <ADC_Enable+0x66>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a29      	ldr	r2, [pc, #164]	@ (8002df4 <ADC_Enable+0x108>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <ADC_Enable+0x6a>
 8002d52:	4b29      	ldr	r3, [pc, #164]	@ (8002df8 <ADC_Enable+0x10c>)
 8002d54:	e000      	b.n	8002d58 <ADC_Enable+0x6c>
 8002d56:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <ADC_Enable+0x110>)
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff f929 	bl	8001fb0 <LL_ADC_GetMultimode>
 8002d5e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <ADC_Enable+0x108>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d002      	beq.n	8002d70 <ADC_Enable+0x84>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	e000      	b.n	8002d72 <ADC_Enable+0x86>
 8002d70:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <ADC_Enable+0x104>)
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02c      	beq.n	8002dd4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d130      	bne.n	8002de2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d80:	e028      	b.n	8002dd4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f982 	bl	8002090 <LL_ADC_IsEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f966 	bl	8002068 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d9c:	f7fe ffa2 	bl	8001ce4 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d914      	bls.n	8002dd4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d00d      	beq.n	8002dd4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbc:	f043 0210 	orr.w	r2, r3, #16
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e007      	b.n	8002de4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d1cf      	bne.n	8002d82 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	8000003f 	.word	0x8000003f
 8002df0:	40022000 	.word	0x40022000
 8002df4:	40022100 	.word	0x40022100
 8002df8:	40022300 	.word	0x40022300
 8002dfc:	58026300 	.word	0x58026300

08002e00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e12:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d14b      	bne.n	8002eb2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d021      	beq.n	8002e78 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff f817 	bl	8001e6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d032      	beq.n	8002eaa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d12b      	bne.n	8002eaa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11f      	bne.n	8002eaa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e76:	e018      	b.n	8002eaa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d111      	bne.n	8002eaa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f7ff fba4 	bl	80025f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eb0:	e00e      	b.n	8002ed0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff fbae 	bl	8002620 <HAL_ADC_ErrorCallback>
}
 8002ec4:	e004      	b.n	8002ed0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fb90 	bl	800260c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	f043 0204 	orr.w	r2, r3, #4
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fb80 	bl	8002620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a7a      	ldr	r2, [pc, #488]	@ (8003120 <ADC_ConfigureBoostMode+0x1f8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <ADC_ConfigureBoostMode+0x1c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a79      	ldr	r2, [pc, #484]	@ (8003124 <ADC_ConfigureBoostMode+0x1fc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d109      	bne.n	8002f58 <ADC_ConfigureBoostMode+0x30>
 8002f44:	4b78      	ldr	r3, [pc, #480]	@ (8003128 <ADC_ConfigureBoostMode+0x200>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e008      	b.n	8002f6a <ADC_ConfigureBoostMode+0x42>
 8002f58:	4b74      	ldr	r3, [pc, #464]	@ (800312c <ADC_ConfigureBoostMode+0x204>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01c      	beq.n	8002fa8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f6e:	f004 faaf 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 8002f72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f7c:	d010      	beq.n	8002fa0 <ADC_ConfigureBoostMode+0x78>
 8002f7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f82:	d873      	bhi.n	800306c <ADC_ConfigureBoostMode+0x144>
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f88:	d002      	beq.n	8002f90 <ADC_ConfigureBoostMode+0x68>
 8002f8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f8e:	d16d      	bne.n	800306c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
        break;
 8002f9e:	e068      	b.n	8003072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	60fb      	str	r3, [r7, #12]
        break;
 8002fa6:	e064      	b.n	8003072 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002fa8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	f005 fd36 	bl	8008a20 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fb4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002fbe:	d051      	beq.n	8003064 <ADC_ConfigureBoostMode+0x13c>
 8002fc0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002fc4:	d854      	bhi.n	8003070 <ADC_ConfigureBoostMode+0x148>
 8002fc6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002fca:	d047      	beq.n	800305c <ADC_ConfigureBoostMode+0x134>
 8002fcc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002fd0:	d84e      	bhi.n	8003070 <ADC_ConfigureBoostMode+0x148>
 8002fd2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002fd6:	d03d      	beq.n	8003054 <ADC_ConfigureBoostMode+0x12c>
 8002fd8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002fdc:	d848      	bhi.n	8003070 <ADC_ConfigureBoostMode+0x148>
 8002fde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fe2:	d033      	beq.n	800304c <ADC_ConfigureBoostMode+0x124>
 8002fe4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fe8:	d842      	bhi.n	8003070 <ADC_ConfigureBoostMode+0x148>
 8002fea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002fee:	d029      	beq.n	8003044 <ADC_ConfigureBoostMode+0x11c>
 8002ff0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ff4:	d83c      	bhi.n	8003070 <ADC_ConfigureBoostMode+0x148>
 8002ff6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ffa:	d01a      	beq.n	8003032 <ADC_ConfigureBoostMode+0x10a>
 8002ffc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003000:	d836      	bhi.n	8003070 <ADC_ConfigureBoostMode+0x148>
 8003002:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003006:	d014      	beq.n	8003032 <ADC_ConfigureBoostMode+0x10a>
 8003008:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800300c:	d830      	bhi.n	8003070 <ADC_ConfigureBoostMode+0x148>
 800300e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003012:	d00e      	beq.n	8003032 <ADC_ConfigureBoostMode+0x10a>
 8003014:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003018:	d82a      	bhi.n	8003070 <ADC_ConfigureBoostMode+0x148>
 800301a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800301e:	d008      	beq.n	8003032 <ADC_ConfigureBoostMode+0x10a>
 8003020:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003024:	d824      	bhi.n	8003070 <ADC_ConfigureBoostMode+0x148>
 8003026:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800302a:	d002      	beq.n	8003032 <ADC_ConfigureBoostMode+0x10a>
 800302c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003030:	d11e      	bne.n	8003070 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	0c9b      	lsrs	r3, r3, #18
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	60fb      	str	r3, [r7, #12]
        break;
 8003042:	e016      	b.n	8003072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	60fb      	str	r3, [r7, #12]
        break;
 800304a:	e012      	b.n	8003072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	60fb      	str	r3, [r7, #12]
        break;
 8003052:	e00e      	b.n	8003072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	60fb      	str	r3, [r7, #12]
        break;
 800305a:	e00a      	b.n	8003072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	09db      	lsrs	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
        break;
 8003062:	e006      	b.n	8003072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	60fb      	str	r3, [r7, #12]
        break;
 800306a:	e002      	b.n	8003072 <ADC_ConfigureBoostMode+0x14a>
        break;
 800306c:	bf00      	nop
 800306e:	e000      	b.n	8003072 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003070:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003072:	f7fe fe67 	bl	8001d44 <HAL_GetREVID>
 8003076:	4603      	mov	r3, r0
 8003078:	f241 0203 	movw	r2, #4099	@ 0x1003
 800307c:	4293      	cmp	r3, r2
 800307e:	d815      	bhi.n	80030ac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a2b      	ldr	r2, [pc, #172]	@ (8003130 <ADC_ConfigureBoostMode+0x208>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d908      	bls.n	800309a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003096:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003098:	e03e      	b.n	8003118 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030a8:	609a      	str	r2, [r3, #8]
}
 80030aa:	e035      	b.n	8003118 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003134 <ADC_ConfigureBoostMode+0x20c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d808      	bhi.n	80030cc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80030c8:	609a      	str	r2, [r3, #8]
}
 80030ca:	e025      	b.n	8003118 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <ADC_ConfigureBoostMode+0x210>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d80a      	bhi.n	80030ea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	e016      	b.n	8003118 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a13      	ldr	r2, [pc, #76]	@ (800313c <ADC_ConfigureBoostMode+0x214>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d80a      	bhi.n	8003108 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003104:	609a      	str	r2, [r3, #8]
}
 8003106:	e007      	b.n	8003118 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003116:	609a      	str	r2, [r3, #8]
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40022000 	.word	0x40022000
 8003124:	40022100 	.word	0x40022100
 8003128:	40022300 	.word	0x40022300
 800312c:	58026300 	.word	0x58026300
 8003130:	01312d00 	.word	0x01312d00
 8003134:	005f5e10 	.word	0x005f5e10
 8003138:	00bebc20 	.word	0x00bebc20
 800313c:	017d7840 	.word	0x017d7840

08003140 <LL_ADC_IsEnabled>:
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <LL_ADC_IsEnabled+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <LL_ADC_IsEnabled+0x1a>
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_ADC_REG_IsConversionOngoing>:
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b04      	cmp	r3, #4
 8003178:	d101      	bne.n	800317e <LL_ADC_REG_IsConversionOngoing+0x18>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b09f      	sub	sp, #124	@ 0x7c
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0be      	b.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5c      	ldr	r2, [pc, #368]	@ (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d102      	bne.n	80031ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	e001      	b.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e09d      	b.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ffb9 	bl	8003166 <LL_ADC_REG_IsConversionOngoing>
 80031f4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ffb3 	bl	8003166 <LL_ADC_REG_IsConversionOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d17f      	bne.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003208:	2b00      	cmp	r3, #0
 800320a:	d17c      	bne.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a47      	ldr	r2, [pc, #284]	@ (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a46      	ldr	r2, [pc, #280]	@ (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003220:	4b45      	ldr	r3, [pc, #276]	@ (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003222:	e000      	b.n	8003226 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003224:	4b45      	ldr	r3, [pc, #276]	@ (800333c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003226:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d039      	beq.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	431a      	orrs	r2, r3
 800323e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003240:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a3a      	ldr	r2, [pc, #232]	@ (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a38      	ldr	r2, [pc, #224]	@ (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d10e      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003256:	4836      	ldr	r0, [pc, #216]	@ (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003258:	f7ff ff72 	bl	8003140 <LL_ADC_IsEnabled>
 800325c:	4604      	mov	r4, r0
 800325e:	4835      	ldr	r0, [pc, #212]	@ (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003260:	f7ff ff6e 	bl	8003140 <LL_ADC_IsEnabled>
 8003264:	4603      	mov	r3, r0
 8003266:	4323      	orrs	r3, r4
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e008      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003274:	4832      	ldr	r0, [pc, #200]	@ (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003276:	f7ff ff63 	bl	8003140 <LL_ADC_IsEnabled>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d047      	beq.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800328a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	4b2d      	ldr	r3, [pc, #180]	@ (8003344 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003290:	4013      	ands	r3, r2
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	6811      	ldr	r1, [r2, #0]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	6892      	ldr	r2, [r2, #8]
 800329a:	430a      	orrs	r2, r1
 800329c:	431a      	orrs	r2, r3
 800329e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032a2:	e03a      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80032a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1d      	ldr	r2, [pc, #116]	@ (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d10e      	bne.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80032c4:	481a      	ldr	r0, [pc, #104]	@ (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032c6:	f7ff ff3b 	bl	8003140 <LL_ADC_IsEnabled>
 80032ca:	4604      	mov	r4, r0
 80032cc:	4819      	ldr	r0, [pc, #100]	@ (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032ce:	f7ff ff37 	bl	8003140 <LL_ADC_IsEnabled>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4323      	orrs	r3, r4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bf0c      	ite	eq
 80032da:	2301      	moveq	r3, #1
 80032dc:	2300      	movne	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	e008      	b.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80032e2:	4817      	ldr	r0, [pc, #92]	@ (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80032e4:	f7ff ff2c 	bl	8003140 <LL_ADC_IsEnabled>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d010      	beq.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80032fe:	4013      	ands	r3, r2
 8003300:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003302:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003304:	e009      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330a:	f043 0220 	orr.w	r2, r3, #32
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003318:	e000      	b.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800331a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003324:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003328:	4618      	mov	r0, r3
 800332a:	377c      	adds	r7, #124	@ 0x7c
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}
 8003330:	40022000 	.word	0x40022000
 8003334:	40022100 	.word	0x40022100
 8003338:	40022300 	.word	0x40022300
 800333c:	58026300 	.word	0x58026300
 8003340:	58026000 	.word	0x58026000
 8003344:	fffff0e0 	.word	0xfffff0e0

08003348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <__NVIC_SetPriorityGrouping+0x40>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003370:	4b06      	ldr	r3, [pc, #24]	@ (800338c <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	4313      	orrs	r3, r2
 8003374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003376:	4a04      	ldr	r2, [pc, #16]	@ (8003388 <__NVIC_SetPriorityGrouping+0x40>)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	60d3      	str	r3, [r2, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00
 800338c:	05fa0000 	.word	0x05fa0000

08003390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db0b      	blt.n	80033d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4907      	ldr	r1, [pc, #28]	@ (80033e4 <__NVIC_EnableIRQ+0x38>)
 80033c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2001      	movs	r0, #1
 80033ce:	fa00 f202 	lsl.w	r2, r0, r2
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	@ (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	@ (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	@ 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
         );
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	@ 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff4c 	bl	8003348 <__NVIC_SetPriorityGrouping>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c6:	f7ff ff63 	bl	8003390 <__NVIC_GetPriorityGrouping>
 80034ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	6978      	ldr	r0, [r7, #20]
 80034d2:	f7ff ffb3 	bl	800343c <NVIC_EncodePriority>
 80034d6:	4602      	mov	r2, r0
 80034d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff82 	bl	80033e8 <__NVIC_SetPriority>
}
 80034e4:	bf00      	nop
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff56 	bl	80033ac <__NVIC_EnableIRQ>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003510:	f7fe fbe8 	bl	8001ce4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e316      	b.n	8003b4e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a66      	ldr	r2, [pc, #408]	@ (80036c0 <HAL_DMA_Init+0x1b8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d04a      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a65      	ldr	r2, [pc, #404]	@ (80036c4 <HAL_DMA_Init+0x1bc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d045      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a63      	ldr	r2, [pc, #396]	@ (80036c8 <HAL_DMA_Init+0x1c0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d040      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a62      	ldr	r2, [pc, #392]	@ (80036cc <HAL_DMA_Init+0x1c4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d03b      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a60      	ldr	r2, [pc, #384]	@ (80036d0 <HAL_DMA_Init+0x1c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d036      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a5f      	ldr	r2, [pc, #380]	@ (80036d4 <HAL_DMA_Init+0x1cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d031      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5d      	ldr	r2, [pc, #372]	@ (80036d8 <HAL_DMA_Init+0x1d0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02c      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5c      	ldr	r2, [pc, #368]	@ (80036dc <HAL_DMA_Init+0x1d4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d027      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a5a      	ldr	r2, [pc, #360]	@ (80036e0 <HAL_DMA_Init+0x1d8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a59      	ldr	r2, [pc, #356]	@ (80036e4 <HAL_DMA_Init+0x1dc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d01d      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a57      	ldr	r2, [pc, #348]	@ (80036e8 <HAL_DMA_Init+0x1e0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a56      	ldr	r2, [pc, #344]	@ (80036ec <HAL_DMA_Init+0x1e4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a54      	ldr	r2, [pc, #336]	@ (80036f0 <HAL_DMA_Init+0x1e8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a53      	ldr	r2, [pc, #332]	@ (80036f4 <HAL_DMA_Init+0x1ec>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a51      	ldr	r2, [pc, #324]	@ (80036f8 <HAL_DMA_Init+0x1f0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a50      	ldr	r2, [pc, #320]	@ (80036fc <HAL_DMA_Init+0x1f4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_DMA_Init+0xbc>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_Init+0xbe>
 80035c4:	2300      	movs	r3, #0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 813b 	beq.w	8003842 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a37      	ldr	r2, [pc, #220]	@ (80036c0 <HAL_DMA_Init+0x1b8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04a      	beq.n	800367c <HAL_DMA_Init+0x174>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a36      	ldr	r2, [pc, #216]	@ (80036c4 <HAL_DMA_Init+0x1bc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d045      	beq.n	800367c <HAL_DMA_Init+0x174>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a34      	ldr	r2, [pc, #208]	@ (80036c8 <HAL_DMA_Init+0x1c0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d040      	beq.n	800367c <HAL_DMA_Init+0x174>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a33      	ldr	r2, [pc, #204]	@ (80036cc <HAL_DMA_Init+0x1c4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d03b      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a31      	ldr	r2, [pc, #196]	@ (80036d0 <HAL_DMA_Init+0x1c8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d036      	beq.n	800367c <HAL_DMA_Init+0x174>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a30      	ldr	r2, [pc, #192]	@ (80036d4 <HAL_DMA_Init+0x1cc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d031      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2e      	ldr	r2, [pc, #184]	@ (80036d8 <HAL_DMA_Init+0x1d0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02c      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2d      	ldr	r2, [pc, #180]	@ (80036dc <HAL_DMA_Init+0x1d4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d027      	beq.n	800367c <HAL_DMA_Init+0x174>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2b      	ldr	r2, [pc, #172]	@ (80036e0 <HAL_DMA_Init+0x1d8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d022      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2a      	ldr	r2, [pc, #168]	@ (80036e4 <HAL_DMA_Init+0x1dc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d01d      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a28      	ldr	r2, [pc, #160]	@ (80036e8 <HAL_DMA_Init+0x1e0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <HAL_DMA_Init+0x174>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a27      	ldr	r2, [pc, #156]	@ (80036ec <HAL_DMA_Init+0x1e4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a25      	ldr	r2, [pc, #148]	@ (80036f0 <HAL_DMA_Init+0x1e8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <HAL_DMA_Init+0x174>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a24      	ldr	r2, [pc, #144]	@ (80036f4 <HAL_DMA_Init+0x1ec>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_DMA_Init+0x1f0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <HAL_DMA_Init+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d108      	bne.n	800368e <HAL_DMA_Init+0x186>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e007      	b.n	800369e <HAL_DMA_Init+0x196>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800369e:	e02f      	b.n	8003700 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036a0:	f7fe fb20 	bl	8001ce4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d928      	bls.n	8003700 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2203      	movs	r2, #3
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e246      	b.n	8003b4e <HAL_DMA_Init+0x646>
 80036c0:	40020010 	.word	0x40020010
 80036c4:	40020028 	.word	0x40020028
 80036c8:	40020040 	.word	0x40020040
 80036cc:	40020058 	.word	0x40020058
 80036d0:	40020070 	.word	0x40020070
 80036d4:	40020088 	.word	0x40020088
 80036d8:	400200a0 	.word	0x400200a0
 80036dc:	400200b8 	.word	0x400200b8
 80036e0:	40020410 	.word	0x40020410
 80036e4:	40020428 	.word	0x40020428
 80036e8:	40020440 	.word	0x40020440
 80036ec:	40020458 	.word	0x40020458
 80036f0:	40020470 	.word	0x40020470
 80036f4:	40020488 	.word	0x40020488
 80036f8:	400204a0 	.word	0x400204a0
 80036fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1c8      	bne.n	80036a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4b83      	ldr	r3, [pc, #524]	@ (8003928 <HAL_DMA_Init+0x420>)
 800371a:	4013      	ands	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003726:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003732:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	2b04      	cmp	r3, #4
 8003752:	d107      	bne.n	8003764 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375c:	4313      	orrs	r3, r2
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003764:	4b71      	ldr	r3, [pc, #452]	@ (800392c <HAL_DMA_Init+0x424>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b71      	ldr	r3, [pc, #452]	@ (8003930 <HAL_DMA_Init+0x428>)
 800376a:	4013      	ands	r3, r2
 800376c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003770:	d328      	bcc.n	80037c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b28      	cmp	r3, #40	@ 0x28
 8003778:	d903      	bls.n	8003782 <HAL_DMA_Init+0x27a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003780:	d917      	bls.n	80037b2 <HAL_DMA_Init+0x2aa>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b3e      	cmp	r3, #62	@ 0x3e
 8003788:	d903      	bls.n	8003792 <HAL_DMA_Init+0x28a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b42      	cmp	r3, #66	@ 0x42
 8003790:	d90f      	bls.n	80037b2 <HAL_DMA_Init+0x2aa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b46      	cmp	r3, #70	@ 0x46
 8003798:	d903      	bls.n	80037a2 <HAL_DMA_Init+0x29a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b48      	cmp	r3, #72	@ 0x48
 80037a0:	d907      	bls.n	80037b2 <HAL_DMA_Init+0x2aa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80037a8:	d905      	bls.n	80037b6 <HAL_DMA_Init+0x2ae>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b52      	cmp	r3, #82	@ 0x52
 80037b0:	d801      	bhi.n	80037b6 <HAL_DMA_Init+0x2ae>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_DMA_Init+0x2b0>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d117      	bne.n	800381e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f002 fb33 	bl	8005e6c <DMA_CheckFifoParam>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2240      	movs	r2, #64	@ 0x40
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e197      	b.n	8003b4e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f002 fa6e 	bl	8005d08 <DMA_CalcBaseAndBitshift>
 800382c:	4603      	mov	r3, r0
 800382e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	223f      	movs	r2, #63	@ 0x3f
 800383a:	409a      	lsls	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e0cd      	b.n	80039de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a3b      	ldr	r2, [pc, #236]	@ (8003934 <HAL_DMA_Init+0x42c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a39      	ldr	r2, [pc, #228]	@ (8003938 <HAL_DMA_Init+0x430>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01d      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a38      	ldr	r2, [pc, #224]	@ (800393c <HAL_DMA_Init+0x434>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d018      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a36      	ldr	r2, [pc, #216]	@ (8003940 <HAL_DMA_Init+0x438>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a35      	ldr	r2, [pc, #212]	@ (8003944 <HAL_DMA_Init+0x43c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a33      	ldr	r2, [pc, #204]	@ (8003948 <HAL_DMA_Init+0x440>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a32      	ldr	r2, [pc, #200]	@ (800394c <HAL_DMA_Init+0x444>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a30      	ldr	r2, [pc, #192]	@ (8003950 <HAL_DMA_Init+0x448>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_DMA_Init+0x38e>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_DMA_Init+0x390>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8097 	beq.w	80039cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a24      	ldr	r2, [pc, #144]	@ (8003934 <HAL_DMA_Init+0x42c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d021      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a22      	ldr	r2, [pc, #136]	@ (8003938 <HAL_DMA_Init+0x430>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01c      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a21      	ldr	r2, [pc, #132]	@ (800393c <HAL_DMA_Init+0x434>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d017      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003940 <HAL_DMA_Init+0x438>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d012      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003944 <HAL_DMA_Init+0x43c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00d      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <HAL_DMA_Init+0x440>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d008      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1b      	ldr	r2, [pc, #108]	@ (800394c <HAL_DMA_Init+0x444>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d003      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	@ (8003950 <HAL_DMA_Init+0x448>)
 80038ea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4b13      	ldr	r3, [pc, #76]	@ (8003954 <HAL_DMA_Init+0x44c>)
 8003908:	4013      	ands	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b40      	cmp	r3, #64	@ 0x40
 8003912:	d021      	beq.n	8003958 <HAL_DMA_Init+0x450>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b80      	cmp	r3, #128	@ 0x80
 800391a:	d102      	bne.n	8003922 <HAL_DMA_Init+0x41a>
 800391c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003920:	e01b      	b.n	800395a <HAL_DMA_Init+0x452>
 8003922:	2300      	movs	r3, #0
 8003924:	e019      	b.n	800395a <HAL_DMA_Init+0x452>
 8003926:	bf00      	nop
 8003928:	fe10803f 	.word	0xfe10803f
 800392c:	5c001000 	.word	0x5c001000
 8003930:	ffff0000 	.word	0xffff0000
 8003934:	58025408 	.word	0x58025408
 8003938:	5802541c 	.word	0x5802541c
 800393c:	58025430 	.word	0x58025430
 8003940:	58025444 	.word	0x58025444
 8003944:	58025458 	.word	0x58025458
 8003948:	5802546c 	.word	0x5802546c
 800394c:	58025480 	.word	0x58025480
 8003950:	58025494 	.word	0x58025494
 8003954:	fffe000f 	.word	0xfffe000f
 8003958:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68d2      	ldr	r2, [r2, #12]
 800395e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003960:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003968:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003988:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	4b6e      	ldr	r3, [pc, #440]	@ (8003b58 <HAL_DMA_Init+0x650>)
 80039a0:	4413      	add	r3, r2
 80039a2:	4a6e      	ldr	r2, [pc, #440]	@ (8003b5c <HAL_DMA_Init+0x654>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	009a      	lsls	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f002 f9a9 	bl	8005d08 <DMA_CalcBaseAndBitshift>
 80039b6:	4603      	mov	r3, r0
 80039b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2201      	movs	r2, #1
 80039c4:	409a      	lsls	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	e008      	b.n	80039de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2240      	movs	r2, #64	@ 0x40
 80039d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2203      	movs	r2, #3
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0b7      	b.n	8003b4e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003b60 <HAL_DMA_Init+0x658>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d072      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003b64 <HAL_DMA_Init+0x65c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d06d      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b68 <HAL_DMA_Init+0x660>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d068      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5a      	ldr	r2, [pc, #360]	@ (8003b6c <HAL_DMA_Init+0x664>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d063      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a59      	ldr	r2, [pc, #356]	@ (8003b70 <HAL_DMA_Init+0x668>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d05e      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a57      	ldr	r2, [pc, #348]	@ (8003b74 <HAL_DMA_Init+0x66c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d059      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a56      	ldr	r2, [pc, #344]	@ (8003b78 <HAL_DMA_Init+0x670>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d054      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a54      	ldr	r2, [pc, #336]	@ (8003b7c <HAL_DMA_Init+0x674>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d04f      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a53      	ldr	r2, [pc, #332]	@ (8003b80 <HAL_DMA_Init+0x678>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d04a      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a51      	ldr	r2, [pc, #324]	@ (8003b84 <HAL_DMA_Init+0x67c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d045      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a50      	ldr	r2, [pc, #320]	@ (8003b88 <HAL_DMA_Init+0x680>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d040      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a4e      	ldr	r2, [pc, #312]	@ (8003b8c <HAL_DMA_Init+0x684>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d03b      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b90 <HAL_DMA_Init+0x688>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d036      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a4b      	ldr	r2, [pc, #300]	@ (8003b94 <HAL_DMA_Init+0x68c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d031      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b98 <HAL_DMA_Init+0x690>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d02c      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a48      	ldr	r2, [pc, #288]	@ (8003b9c <HAL_DMA_Init+0x694>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d027      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a47      	ldr	r2, [pc, #284]	@ (8003ba0 <HAL_DMA_Init+0x698>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d022      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a45      	ldr	r2, [pc, #276]	@ (8003ba4 <HAL_DMA_Init+0x69c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01d      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a44      	ldr	r2, [pc, #272]	@ (8003ba8 <HAL_DMA_Init+0x6a0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d018      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a42      	ldr	r2, [pc, #264]	@ (8003bac <HAL_DMA_Init+0x6a4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a41      	ldr	r2, [pc, #260]	@ (8003bb0 <HAL_DMA_Init+0x6a8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8003bb4 <HAL_DMA_Init+0x6ac>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb8 <HAL_DMA_Init+0x6b0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bbc <HAL_DMA_Init+0x6b4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA_Init+0x5ca>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_DMA_Init+0x5cc>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d032      	beq.n	8003b3e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f002 fa43 	bl	8005f64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b80      	cmp	r3, #128	@ 0x80
 8003ae4:	d102      	bne.n	8003aec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d010      	beq.n	8003b2c <HAL_DMA_Init+0x624>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d80c      	bhi.n	8003b2c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f002 fac0 	bl	8006098 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	e008      	b.n	8003b3e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	a7fdabf8 	.word	0xa7fdabf8
 8003b5c:	cccccccd 	.word	0xcccccccd
 8003b60:	40020010 	.word	0x40020010
 8003b64:	40020028 	.word	0x40020028
 8003b68:	40020040 	.word	0x40020040
 8003b6c:	40020058 	.word	0x40020058
 8003b70:	40020070 	.word	0x40020070
 8003b74:	40020088 	.word	0x40020088
 8003b78:	400200a0 	.word	0x400200a0
 8003b7c:	400200b8 	.word	0x400200b8
 8003b80:	40020410 	.word	0x40020410
 8003b84:	40020428 	.word	0x40020428
 8003b88:	40020440 	.word	0x40020440
 8003b8c:	40020458 	.word	0x40020458
 8003b90:	40020470 	.word	0x40020470
 8003b94:	40020488 	.word	0x40020488
 8003b98:	400204a0 	.word	0x400204a0
 8003b9c:	400204b8 	.word	0x400204b8
 8003ba0:	58025408 	.word	0x58025408
 8003ba4:	5802541c 	.word	0x5802541c
 8003ba8:	58025430 	.word	0x58025430
 8003bac:	58025444 	.word	0x58025444
 8003bb0:	58025458 	.word	0x58025458
 8003bb4:	5802546c 	.word	0x5802546c
 8003bb8:	58025480 	.word	0x58025480
 8003bbc:	58025494 	.word	0x58025494

08003bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e226      	b.n	800402a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_DMA_Start_IT+0x2a>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e21f      	b.n	800402a <HAL_DMA_Start_IT+0x46a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	f040 820a 	bne.w	8004014 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a68      	ldr	r2, [pc, #416]	@ (8003db4 <HAL_DMA_Start_IT+0x1f4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d04a      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a66      	ldr	r2, [pc, #408]	@ (8003db8 <HAL_DMA_Start_IT+0x1f8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d045      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a65      	ldr	r2, [pc, #404]	@ (8003dbc <HAL_DMA_Start_IT+0x1fc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d040      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a63      	ldr	r2, [pc, #396]	@ (8003dc0 <HAL_DMA_Start_IT+0x200>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d03b      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a62      	ldr	r2, [pc, #392]	@ (8003dc4 <HAL_DMA_Start_IT+0x204>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d036      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a60      	ldr	r2, [pc, #384]	@ (8003dc8 <HAL_DMA_Start_IT+0x208>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d031      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dcc <HAL_DMA_Start_IT+0x20c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d02c      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5d      	ldr	r2, [pc, #372]	@ (8003dd0 <HAL_DMA_Start_IT+0x210>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d027      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a5c      	ldr	r2, [pc, #368]	@ (8003dd4 <HAL_DMA_Start_IT+0x214>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d022      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003dd8 <HAL_DMA_Start_IT+0x218>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01d      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a59      	ldr	r2, [pc, #356]	@ (8003ddc <HAL_DMA_Start_IT+0x21c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d018      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a57      	ldr	r2, [pc, #348]	@ (8003de0 <HAL_DMA_Start_IT+0x220>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a56      	ldr	r2, [pc, #344]	@ (8003de4 <HAL_DMA_Start_IT+0x224>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a54      	ldr	r2, [pc, #336]	@ (8003de8 <HAL_DMA_Start_IT+0x228>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a53      	ldr	r2, [pc, #332]	@ (8003dec <HAL_DMA_Start_IT+0x22c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a51      	ldr	r2, [pc, #324]	@ (8003df0 <HAL_DMA_Start_IT+0x230>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d108      	bne.n	8003cc0 <HAL_DMA_Start_IT+0x100>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e007      	b.n	8003cd0 <HAL_DMA_Start_IT+0x110>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f001 fe6a 	bl	80059b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a34      	ldr	r2, [pc, #208]	@ (8003db4 <HAL_DMA_Start_IT+0x1f4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04a      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a33      	ldr	r2, [pc, #204]	@ (8003db8 <HAL_DMA_Start_IT+0x1f8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d045      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a31      	ldr	r2, [pc, #196]	@ (8003dbc <HAL_DMA_Start_IT+0x1fc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d040      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a30      	ldr	r2, [pc, #192]	@ (8003dc0 <HAL_DMA_Start_IT+0x200>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d03b      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2e      	ldr	r2, [pc, #184]	@ (8003dc4 <HAL_DMA_Start_IT+0x204>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d036      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2d      	ldr	r2, [pc, #180]	@ (8003dc8 <HAL_DMA_Start_IT+0x208>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d031      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003dcc <HAL_DMA_Start_IT+0x20c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d02c      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2a      	ldr	r2, [pc, #168]	@ (8003dd0 <HAL_DMA_Start_IT+0x210>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d027      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a28      	ldr	r2, [pc, #160]	@ (8003dd4 <HAL_DMA_Start_IT+0x214>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a27      	ldr	r2, [pc, #156]	@ (8003dd8 <HAL_DMA_Start_IT+0x218>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01d      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a25      	ldr	r2, [pc, #148]	@ (8003ddc <HAL_DMA_Start_IT+0x21c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a24      	ldr	r2, [pc, #144]	@ (8003de0 <HAL_DMA_Start_IT+0x220>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a22      	ldr	r2, [pc, #136]	@ (8003de4 <HAL_DMA_Start_IT+0x224>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a21      	ldr	r2, [pc, #132]	@ (8003de8 <HAL_DMA_Start_IT+0x228>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dec <HAL_DMA_Start_IT+0x22c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_DMA_Start_IT+0x1bc>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1e      	ldr	r2, [pc, #120]	@ (8003df0 <HAL_DMA_Start_IT+0x230>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_DMA_Start_IT+0x1c0>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_DMA_Start_IT+0x1c2>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d036      	beq.n	8003df4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 021e 	bic.w	r2, r3, #30
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0216 	orr.w	r2, r2, #22
 8003d98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d03e      	beq.n	8003e20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0208 	orr.w	r2, r2, #8
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e035      	b.n	8003e20 <HAL_DMA_Start_IT+0x260>
 8003db4:	40020010 	.word	0x40020010
 8003db8:	40020028 	.word	0x40020028
 8003dbc:	40020040 	.word	0x40020040
 8003dc0:	40020058 	.word	0x40020058
 8003dc4:	40020070 	.word	0x40020070
 8003dc8:	40020088 	.word	0x40020088
 8003dcc:	400200a0 	.word	0x400200a0
 8003dd0:	400200b8 	.word	0x400200b8
 8003dd4:	40020410 	.word	0x40020410
 8003dd8:	40020428 	.word	0x40020428
 8003ddc:	40020440 	.word	0x40020440
 8003de0:	40020458 	.word	0x40020458
 8003de4:	40020470 	.word	0x40020470
 8003de8:	40020488 	.word	0x40020488
 8003dec:	400204a0 	.word	0x400204a0
 8003df0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 020e 	bic.w	r2, r3, #14
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 020a 	orr.w	r2, r2, #10
 8003e06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0204 	orr.w	r2, r2, #4
 8003e1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a83      	ldr	r2, [pc, #524]	@ (8004034 <HAL_DMA_Start_IT+0x474>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d072      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a82      	ldr	r2, [pc, #520]	@ (8004038 <HAL_DMA_Start_IT+0x478>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d06d      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a80      	ldr	r2, [pc, #512]	@ (800403c <HAL_DMA_Start_IT+0x47c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d068      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a7f      	ldr	r2, [pc, #508]	@ (8004040 <HAL_DMA_Start_IT+0x480>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d063      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a7d      	ldr	r2, [pc, #500]	@ (8004044 <HAL_DMA_Start_IT+0x484>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d05e      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7c      	ldr	r2, [pc, #496]	@ (8004048 <HAL_DMA_Start_IT+0x488>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d059      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7a      	ldr	r2, [pc, #488]	@ (800404c <HAL_DMA_Start_IT+0x48c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d054      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a79      	ldr	r2, [pc, #484]	@ (8004050 <HAL_DMA_Start_IT+0x490>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d04f      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a77      	ldr	r2, [pc, #476]	@ (8004054 <HAL_DMA_Start_IT+0x494>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d04a      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a76      	ldr	r2, [pc, #472]	@ (8004058 <HAL_DMA_Start_IT+0x498>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d045      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a74      	ldr	r2, [pc, #464]	@ (800405c <HAL_DMA_Start_IT+0x49c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d040      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a73      	ldr	r2, [pc, #460]	@ (8004060 <HAL_DMA_Start_IT+0x4a0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d03b      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a71      	ldr	r2, [pc, #452]	@ (8004064 <HAL_DMA_Start_IT+0x4a4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d036      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a70      	ldr	r2, [pc, #448]	@ (8004068 <HAL_DMA_Start_IT+0x4a8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800406c <HAL_DMA_Start_IT+0x4ac>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02c      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6d      	ldr	r2, [pc, #436]	@ (8004070 <HAL_DMA_Start_IT+0x4b0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d027      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8004074 <HAL_DMA_Start_IT+0x4b4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6a      	ldr	r2, [pc, #424]	@ (8004078 <HAL_DMA_Start_IT+0x4b8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01d      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a68      	ldr	r2, [pc, #416]	@ (800407c <HAL_DMA_Start_IT+0x4bc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a67      	ldr	r2, [pc, #412]	@ (8004080 <HAL_DMA_Start_IT+0x4c0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a65      	ldr	r2, [pc, #404]	@ (8004084 <HAL_DMA_Start_IT+0x4c4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a64      	ldr	r2, [pc, #400]	@ (8004088 <HAL_DMA_Start_IT+0x4c8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a62      	ldr	r2, [pc, #392]	@ (800408c <HAL_DMA_Start_IT+0x4cc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_Start_IT+0x350>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a61      	ldr	r2, [pc, #388]	@ (8004090 <HAL_DMA_Start_IT+0x4d0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_DMA_Start_IT+0x354>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_DMA_Start_IT+0x356>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01a      	beq.n	8003f50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a37      	ldr	r2, [pc, #220]	@ (8004034 <HAL_DMA_Start_IT+0x474>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04a      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a36      	ldr	r2, [pc, #216]	@ (8004038 <HAL_DMA_Start_IT+0x478>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d045      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a34      	ldr	r2, [pc, #208]	@ (800403c <HAL_DMA_Start_IT+0x47c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d040      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a33      	ldr	r2, [pc, #204]	@ (8004040 <HAL_DMA_Start_IT+0x480>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d03b      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a31      	ldr	r2, [pc, #196]	@ (8004044 <HAL_DMA_Start_IT+0x484>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d036      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a30      	ldr	r2, [pc, #192]	@ (8004048 <HAL_DMA_Start_IT+0x488>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d031      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a2e      	ldr	r2, [pc, #184]	@ (800404c <HAL_DMA_Start_IT+0x48c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02c      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004050 <HAL_DMA_Start_IT+0x490>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d027      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <HAL_DMA_Start_IT+0x494>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2a      	ldr	r2, [pc, #168]	@ (8004058 <HAL_DMA_Start_IT+0x498>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a28      	ldr	r2, [pc, #160]	@ (800405c <HAL_DMA_Start_IT+0x49c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a27      	ldr	r2, [pc, #156]	@ (8004060 <HAL_DMA_Start_IT+0x4a0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <HAL_DMA_Start_IT+0x4a4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a24      	ldr	r2, [pc, #144]	@ (8004068 <HAL_DMA_Start_IT+0x4a8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_DMA_Start_IT+0x4ac>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x430>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a21      	ldr	r2, [pc, #132]	@ (8004070 <HAL_DMA_Start_IT+0x4b0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d108      	bne.n	8004002 <HAL_DMA_Start_IT+0x442>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e012      	b.n	8004028 <HAL_DMA_Start_IT+0x468>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e009      	b.n	8004028 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800401a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40020010 	.word	0x40020010
 8004038:	40020028 	.word	0x40020028
 800403c:	40020040 	.word	0x40020040
 8004040:	40020058 	.word	0x40020058
 8004044:	40020070 	.word	0x40020070
 8004048:	40020088 	.word	0x40020088
 800404c:	400200a0 	.word	0x400200a0
 8004050:	400200b8 	.word	0x400200b8
 8004054:	40020410 	.word	0x40020410
 8004058:	40020428 	.word	0x40020428
 800405c:	40020440 	.word	0x40020440
 8004060:	40020458 	.word	0x40020458
 8004064:	40020470 	.word	0x40020470
 8004068:	40020488 	.word	0x40020488
 800406c:	400204a0 	.word	0x400204a0
 8004070:	400204b8 	.word	0x400204b8
 8004074:	58025408 	.word	0x58025408
 8004078:	5802541c 	.word	0x5802541c
 800407c:	58025430 	.word	0x58025430
 8004080:	58025444 	.word	0x58025444
 8004084:	58025458 	.word	0x58025458
 8004088:	5802546c 	.word	0x5802546c
 800408c:	58025480 	.word	0x58025480
 8004090:	58025494 	.word	0x58025494

08004094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800409c:	f7fd fe22 	bl	8001ce4 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e2dc      	b.n	8004666 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d008      	beq.n	80040ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2280      	movs	r2, #128	@ 0x80
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e2cd      	b.n	8004666 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a76      	ldr	r2, [pc, #472]	@ (80042a8 <HAL_DMA_Abort+0x214>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04a      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a74      	ldr	r2, [pc, #464]	@ (80042ac <HAL_DMA_Abort+0x218>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d045      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a73      	ldr	r2, [pc, #460]	@ (80042b0 <HAL_DMA_Abort+0x21c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d040      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a71      	ldr	r2, [pc, #452]	@ (80042b4 <HAL_DMA_Abort+0x220>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d03b      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a70      	ldr	r2, [pc, #448]	@ (80042b8 <HAL_DMA_Abort+0x224>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d036      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6e      	ldr	r2, [pc, #440]	@ (80042bc <HAL_DMA_Abort+0x228>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d031      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a6d      	ldr	r2, [pc, #436]	@ (80042c0 <HAL_DMA_Abort+0x22c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02c      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a6b      	ldr	r2, [pc, #428]	@ (80042c4 <HAL_DMA_Abort+0x230>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6a      	ldr	r2, [pc, #424]	@ (80042c8 <HAL_DMA_Abort+0x234>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a68      	ldr	r2, [pc, #416]	@ (80042cc <HAL_DMA_Abort+0x238>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a67      	ldr	r2, [pc, #412]	@ (80042d0 <HAL_DMA_Abort+0x23c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a65      	ldr	r2, [pc, #404]	@ (80042d4 <HAL_DMA_Abort+0x240>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a64      	ldr	r2, [pc, #400]	@ (80042d8 <HAL_DMA_Abort+0x244>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a62      	ldr	r2, [pc, #392]	@ (80042dc <HAL_DMA_Abort+0x248>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a61      	ldr	r2, [pc, #388]	@ (80042e0 <HAL_DMA_Abort+0x24c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_DMA_Abort+0xd6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a5f      	ldr	r2, [pc, #380]	@ (80042e4 <HAL_DMA_Abort+0x250>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_DMA_Abort+0xda>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_DMA_Abort+0xdc>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d013      	beq.n	800419c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 021e 	bic.w	r2, r2, #30
 8004182:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004192:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e00a      	b.n	80041b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 020e 	bic.w	r2, r2, #14
 80041aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a3c      	ldr	r2, [pc, #240]	@ (80042a8 <HAL_DMA_Abort+0x214>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d072      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3a      	ldr	r2, [pc, #232]	@ (80042ac <HAL_DMA_Abort+0x218>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d06d      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a39      	ldr	r2, [pc, #228]	@ (80042b0 <HAL_DMA_Abort+0x21c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d068      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a37      	ldr	r2, [pc, #220]	@ (80042b4 <HAL_DMA_Abort+0x220>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d063      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a36      	ldr	r2, [pc, #216]	@ (80042b8 <HAL_DMA_Abort+0x224>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d05e      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a34      	ldr	r2, [pc, #208]	@ (80042bc <HAL_DMA_Abort+0x228>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d059      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a33      	ldr	r2, [pc, #204]	@ (80042c0 <HAL_DMA_Abort+0x22c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d054      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a31      	ldr	r2, [pc, #196]	@ (80042c4 <HAL_DMA_Abort+0x230>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d04f      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a30      	ldr	r2, [pc, #192]	@ (80042c8 <HAL_DMA_Abort+0x234>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d04a      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2e      	ldr	r2, [pc, #184]	@ (80042cc <HAL_DMA_Abort+0x238>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d045      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2d      	ldr	r2, [pc, #180]	@ (80042d0 <HAL_DMA_Abort+0x23c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d040      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2b      	ldr	r2, [pc, #172]	@ (80042d4 <HAL_DMA_Abort+0x240>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d03b      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2a      	ldr	r2, [pc, #168]	@ (80042d8 <HAL_DMA_Abort+0x244>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d036      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a28      	ldr	r2, [pc, #160]	@ (80042dc <HAL_DMA_Abort+0x248>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d031      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a27      	ldr	r2, [pc, #156]	@ (80042e0 <HAL_DMA_Abort+0x24c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d02c      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a25      	ldr	r2, [pc, #148]	@ (80042e4 <HAL_DMA_Abort+0x250>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d027      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a24      	ldr	r2, [pc, #144]	@ (80042e8 <HAL_DMA_Abort+0x254>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d022      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a22      	ldr	r2, [pc, #136]	@ (80042ec <HAL_DMA_Abort+0x258>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01d      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a21      	ldr	r2, [pc, #132]	@ (80042f0 <HAL_DMA_Abort+0x25c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d018      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1f      	ldr	r2, [pc, #124]	@ (80042f4 <HAL_DMA_Abort+0x260>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1e      	ldr	r2, [pc, #120]	@ (80042f8 <HAL_DMA_Abort+0x264>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1c      	ldr	r2, [pc, #112]	@ (80042fc <HAL_DMA_Abort+0x268>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1b      	ldr	r2, [pc, #108]	@ (8004300 <HAL_DMA_Abort+0x26c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_DMA_Abort+0x20e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a19      	ldr	r2, [pc, #100]	@ (8004304 <HAL_DMA_Abort+0x270>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d132      	bne.n	8004308 <HAL_DMA_Abort+0x274>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e031      	b.n	800430a <HAL_DMA_Abort+0x276>
 80042a6:	bf00      	nop
 80042a8:	40020010 	.word	0x40020010
 80042ac:	40020028 	.word	0x40020028
 80042b0:	40020040 	.word	0x40020040
 80042b4:	40020058 	.word	0x40020058
 80042b8:	40020070 	.word	0x40020070
 80042bc:	40020088 	.word	0x40020088
 80042c0:	400200a0 	.word	0x400200a0
 80042c4:	400200b8 	.word	0x400200b8
 80042c8:	40020410 	.word	0x40020410
 80042cc:	40020428 	.word	0x40020428
 80042d0:	40020440 	.word	0x40020440
 80042d4:	40020458 	.word	0x40020458
 80042d8:	40020470 	.word	0x40020470
 80042dc:	40020488 	.word	0x40020488
 80042e0:	400204a0 	.word	0x400204a0
 80042e4:	400204b8 	.word	0x400204b8
 80042e8:	58025408 	.word	0x58025408
 80042ec:	5802541c 	.word	0x5802541c
 80042f0:	58025430 	.word	0x58025430
 80042f4:	58025444 	.word	0x58025444
 80042f8:	58025458 	.word	0x58025458
 80042fc:	5802546c 	.word	0x5802546c
 8004300:	58025480 	.word	0x58025480
 8004304:	58025494 	.word	0x58025494
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004318:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800431c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6d      	ldr	r2, [pc, #436]	@ (80044d8 <HAL_DMA_Abort+0x444>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d04a      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6b      	ldr	r2, [pc, #428]	@ (80044dc <HAL_DMA_Abort+0x448>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d045      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6a      	ldr	r2, [pc, #424]	@ (80044e0 <HAL_DMA_Abort+0x44c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d040      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a68      	ldr	r2, [pc, #416]	@ (80044e4 <HAL_DMA_Abort+0x450>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d03b      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a67      	ldr	r2, [pc, #412]	@ (80044e8 <HAL_DMA_Abort+0x454>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d036      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a65      	ldr	r2, [pc, #404]	@ (80044ec <HAL_DMA_Abort+0x458>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d031      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a64      	ldr	r2, [pc, #400]	@ (80044f0 <HAL_DMA_Abort+0x45c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d02c      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a62      	ldr	r2, [pc, #392]	@ (80044f4 <HAL_DMA_Abort+0x460>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d027      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a61      	ldr	r2, [pc, #388]	@ (80044f8 <HAL_DMA_Abort+0x464>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d022      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a5f      	ldr	r2, [pc, #380]	@ (80044fc <HAL_DMA_Abort+0x468>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01d      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a5e      	ldr	r2, [pc, #376]	@ (8004500 <HAL_DMA_Abort+0x46c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d018      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a5c      	ldr	r2, [pc, #368]	@ (8004504 <HAL_DMA_Abort+0x470>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a5b      	ldr	r2, [pc, #364]	@ (8004508 <HAL_DMA_Abort+0x474>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a59      	ldr	r2, [pc, #356]	@ (800450c <HAL_DMA_Abort+0x478>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a58      	ldr	r2, [pc, #352]	@ (8004510 <HAL_DMA_Abort+0x47c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_DMA_Abort+0x32a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a56      	ldr	r2, [pc, #344]	@ (8004514 <HAL_DMA_Abort+0x480>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <HAL_DMA_Abort+0x33c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e007      	b.n	80043e0 <HAL_DMA_Abort+0x34c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043e0:	e013      	b.n	800440a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043e2:	f7fd fc7f 	bl	8001ce4 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d90c      	bls.n	800440a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2203      	movs	r2, #3
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e12d      	b.n	8004666 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e5      	bne.n	80043e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2f      	ldr	r2, [pc, #188]	@ (80044d8 <HAL_DMA_Abort+0x444>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d04a      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2d      	ldr	r2, [pc, #180]	@ (80044dc <HAL_DMA_Abort+0x448>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d045      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2c      	ldr	r2, [pc, #176]	@ (80044e0 <HAL_DMA_Abort+0x44c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d040      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2a      	ldr	r2, [pc, #168]	@ (80044e4 <HAL_DMA_Abort+0x450>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d03b      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a29      	ldr	r2, [pc, #164]	@ (80044e8 <HAL_DMA_Abort+0x454>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d036      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a27      	ldr	r2, [pc, #156]	@ (80044ec <HAL_DMA_Abort+0x458>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d031      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a26      	ldr	r2, [pc, #152]	@ (80044f0 <HAL_DMA_Abort+0x45c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d02c      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a24      	ldr	r2, [pc, #144]	@ (80044f4 <HAL_DMA_Abort+0x460>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d027      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a23      	ldr	r2, [pc, #140]	@ (80044f8 <HAL_DMA_Abort+0x464>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d022      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a21      	ldr	r2, [pc, #132]	@ (80044fc <HAL_DMA_Abort+0x468>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01d      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a20      	ldr	r2, [pc, #128]	@ (8004500 <HAL_DMA_Abort+0x46c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d018      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1e      	ldr	r2, [pc, #120]	@ (8004504 <HAL_DMA_Abort+0x470>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1d      	ldr	r2, [pc, #116]	@ (8004508 <HAL_DMA_Abort+0x474>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00e      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1b      	ldr	r2, [pc, #108]	@ (800450c <HAL_DMA_Abort+0x478>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004510 <HAL_DMA_Abort+0x47c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_DMA_Abort+0x422>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a18      	ldr	r2, [pc, #96]	@ (8004514 <HAL_DMA_Abort+0x480>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d101      	bne.n	80044ba <HAL_DMA_Abort+0x426>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <HAL_DMA_Abort+0x428>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02b      	beq.n	8004518 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	223f      	movs	r2, #63	@ 0x3f
 80044d0:	409a      	lsls	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	e02a      	b.n	800452e <HAL_DMA_Abort+0x49a>
 80044d8:	40020010 	.word	0x40020010
 80044dc:	40020028 	.word	0x40020028
 80044e0:	40020040 	.word	0x40020040
 80044e4:	40020058 	.word	0x40020058
 80044e8:	40020070 	.word	0x40020070
 80044ec:	40020088 	.word	0x40020088
 80044f0:	400200a0 	.word	0x400200a0
 80044f4:	400200b8 	.word	0x400200b8
 80044f8:	40020410 	.word	0x40020410
 80044fc:	40020428 	.word	0x40020428
 8004500:	40020440 	.word	0x40020440
 8004504:	40020458 	.word	0x40020458
 8004508:	40020470 	.word	0x40020470
 800450c:	40020488 	.word	0x40020488
 8004510:	400204a0 	.word	0x400204a0
 8004514:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	2201      	movs	r2, #1
 8004528:	409a      	lsls	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a4f      	ldr	r2, [pc, #316]	@ (8004670 <HAL_DMA_Abort+0x5dc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d072      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a4d      	ldr	r2, [pc, #308]	@ (8004674 <HAL_DMA_Abort+0x5e0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d06d      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4c      	ldr	r2, [pc, #304]	@ (8004678 <HAL_DMA_Abort+0x5e4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d068      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a4a      	ldr	r2, [pc, #296]	@ (800467c <HAL_DMA_Abort+0x5e8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d063      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a49      	ldr	r2, [pc, #292]	@ (8004680 <HAL_DMA_Abort+0x5ec>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d05e      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a47      	ldr	r2, [pc, #284]	@ (8004684 <HAL_DMA_Abort+0x5f0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d059      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a46      	ldr	r2, [pc, #280]	@ (8004688 <HAL_DMA_Abort+0x5f4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d054      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a44      	ldr	r2, [pc, #272]	@ (800468c <HAL_DMA_Abort+0x5f8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d04f      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a43      	ldr	r2, [pc, #268]	@ (8004690 <HAL_DMA_Abort+0x5fc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d04a      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a41      	ldr	r2, [pc, #260]	@ (8004694 <HAL_DMA_Abort+0x600>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d045      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a40      	ldr	r2, [pc, #256]	@ (8004698 <HAL_DMA_Abort+0x604>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d040      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a3e      	ldr	r2, [pc, #248]	@ (800469c <HAL_DMA_Abort+0x608>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d03b      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a3d      	ldr	r2, [pc, #244]	@ (80046a0 <HAL_DMA_Abort+0x60c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d036      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a3b      	ldr	r2, [pc, #236]	@ (80046a4 <HAL_DMA_Abort+0x610>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d031      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a3a      	ldr	r2, [pc, #232]	@ (80046a8 <HAL_DMA_Abort+0x614>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d02c      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a38      	ldr	r2, [pc, #224]	@ (80046ac <HAL_DMA_Abort+0x618>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d027      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a37      	ldr	r2, [pc, #220]	@ (80046b0 <HAL_DMA_Abort+0x61c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a35      	ldr	r2, [pc, #212]	@ (80046b4 <HAL_DMA_Abort+0x620>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01d      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a34      	ldr	r2, [pc, #208]	@ (80046b8 <HAL_DMA_Abort+0x624>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a32      	ldr	r2, [pc, #200]	@ (80046bc <HAL_DMA_Abort+0x628>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a31      	ldr	r2, [pc, #196]	@ (80046c0 <HAL_DMA_Abort+0x62c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2f      	ldr	r2, [pc, #188]	@ (80046c4 <HAL_DMA_Abort+0x630>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2e      	ldr	r2, [pc, #184]	@ (80046c8 <HAL_DMA_Abort+0x634>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_DMA_Abort+0x58a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2c      	ldr	r2, [pc, #176]	@ (80046cc <HAL_DMA_Abort+0x638>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d101      	bne.n	8004622 <HAL_DMA_Abort+0x58e>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_DMA_Abort+0x590>
 8004622:	2300      	movs	r3, #0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004630:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004644:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004648:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004652:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40020010 	.word	0x40020010
 8004674:	40020028 	.word	0x40020028
 8004678:	40020040 	.word	0x40020040
 800467c:	40020058 	.word	0x40020058
 8004680:	40020070 	.word	0x40020070
 8004684:	40020088 	.word	0x40020088
 8004688:	400200a0 	.word	0x400200a0
 800468c:	400200b8 	.word	0x400200b8
 8004690:	40020410 	.word	0x40020410
 8004694:	40020428 	.word	0x40020428
 8004698:	40020440 	.word	0x40020440
 800469c:	40020458 	.word	0x40020458
 80046a0:	40020470 	.word	0x40020470
 80046a4:	40020488 	.word	0x40020488
 80046a8:	400204a0 	.word	0x400204a0
 80046ac:	400204b8 	.word	0x400204b8
 80046b0:	58025408 	.word	0x58025408
 80046b4:	5802541c 	.word	0x5802541c
 80046b8:	58025430 	.word	0x58025430
 80046bc:	58025444 	.word	0x58025444
 80046c0:	58025458 	.word	0x58025458
 80046c4:	5802546c 	.word	0x5802546c
 80046c8:	58025480 	.word	0x58025480
 80046cc:	58025494 	.word	0x58025494

080046d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e237      	b.n	8004b52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d004      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2280      	movs	r2, #128	@ 0x80
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e22c      	b.n	8004b52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5c      	ldr	r2, [pc, #368]	@ (8004870 <HAL_DMA_Abort_IT+0x1a0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04a      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a5b      	ldr	r2, [pc, #364]	@ (8004874 <HAL_DMA_Abort_IT+0x1a4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d045      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a59      	ldr	r2, [pc, #356]	@ (8004878 <HAL_DMA_Abort_IT+0x1a8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d040      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a58      	ldr	r2, [pc, #352]	@ (800487c <HAL_DMA_Abort_IT+0x1ac>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d03b      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a56      	ldr	r2, [pc, #344]	@ (8004880 <HAL_DMA_Abort_IT+0x1b0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d036      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a55      	ldr	r2, [pc, #340]	@ (8004884 <HAL_DMA_Abort_IT+0x1b4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d031      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a53      	ldr	r2, [pc, #332]	@ (8004888 <HAL_DMA_Abort_IT+0x1b8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a52      	ldr	r2, [pc, #328]	@ (800488c <HAL_DMA_Abort_IT+0x1bc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d027      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a50      	ldr	r2, [pc, #320]	@ (8004890 <HAL_DMA_Abort_IT+0x1c0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4f      	ldr	r2, [pc, #316]	@ (8004894 <HAL_DMA_Abort_IT+0x1c4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01d      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a4d      	ldr	r2, [pc, #308]	@ (8004898 <HAL_DMA_Abort_IT+0x1c8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a4c      	ldr	r2, [pc, #304]	@ (800489c <HAL_DMA_Abort_IT+0x1cc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a4a      	ldr	r2, [pc, #296]	@ (80048a0 <HAL_DMA_Abort_IT+0x1d0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a49      	ldr	r2, [pc, #292]	@ (80048a4 <HAL_DMA_Abort_IT+0x1d4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a47      	ldr	r2, [pc, #284]	@ (80048a8 <HAL_DMA_Abort_IT+0x1d8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_DMA_Abort_IT+0xc8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a46      	ldr	r2, [pc, #280]	@ (80048ac <HAL_DMA_Abort_IT+0x1dc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d101      	bne.n	800479c <HAL_DMA_Abort_IT+0xcc>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_DMA_Abort_IT+0xce>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8086 	beq.w	80048b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2204      	movs	r2, #4
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004870 <HAL_DMA_Abort_IT+0x1a0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d04a      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004874 <HAL_DMA_Abort_IT+0x1a4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d045      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004878 <HAL_DMA_Abort_IT+0x1a8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d040      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2b      	ldr	r2, [pc, #172]	@ (800487c <HAL_DMA_Abort_IT+0x1ac>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d03b      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a29      	ldr	r2, [pc, #164]	@ (8004880 <HAL_DMA_Abort_IT+0x1b0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d036      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a28      	ldr	r2, [pc, #160]	@ (8004884 <HAL_DMA_Abort_IT+0x1b4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d031      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a26      	ldr	r2, [pc, #152]	@ (8004888 <HAL_DMA_Abort_IT+0x1b8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d02c      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a25      	ldr	r2, [pc, #148]	@ (800488c <HAL_DMA_Abort_IT+0x1bc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d027      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a23      	ldr	r2, [pc, #140]	@ (8004890 <HAL_DMA_Abort_IT+0x1c0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d022      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a22      	ldr	r2, [pc, #136]	@ (8004894 <HAL_DMA_Abort_IT+0x1c4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d01d      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a20      	ldr	r2, [pc, #128]	@ (8004898 <HAL_DMA_Abort_IT+0x1c8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d018      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1f      	ldr	r2, [pc, #124]	@ (800489c <HAL_DMA_Abort_IT+0x1cc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d013      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1d      	ldr	r2, [pc, #116]	@ (80048a0 <HAL_DMA_Abort_IT+0x1d0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00e      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1c      	ldr	r2, [pc, #112]	@ (80048a4 <HAL_DMA_Abort_IT+0x1d4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1a      	ldr	r2, [pc, #104]	@ (80048a8 <HAL_DMA_Abort_IT+0x1d8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_DMA_Abort_IT+0x17c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a19      	ldr	r2, [pc, #100]	@ (80048ac <HAL_DMA_Abort_IT+0x1dc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d108      	bne.n	800485e <HAL_DMA_Abort_IT+0x18e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e178      	b.n	8004b50 <HAL_DMA_Abort_IT+0x480>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0201 	bic.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e16f      	b.n	8004b50 <HAL_DMA_Abort_IT+0x480>
 8004870:	40020010 	.word	0x40020010
 8004874:	40020028 	.word	0x40020028
 8004878:	40020040 	.word	0x40020040
 800487c:	40020058 	.word	0x40020058
 8004880:	40020070 	.word	0x40020070
 8004884:	40020088 	.word	0x40020088
 8004888:	400200a0 	.word	0x400200a0
 800488c:	400200b8 	.word	0x400200b8
 8004890:	40020410 	.word	0x40020410
 8004894:	40020428 	.word	0x40020428
 8004898:	40020440 	.word	0x40020440
 800489c:	40020458 	.word	0x40020458
 80048a0:	40020470 	.word	0x40020470
 80048a4:	40020488 	.word	0x40020488
 80048a8:	400204a0 	.word	0x400204a0
 80048ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 020e 	bic.w	r2, r2, #14
 80048be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a6c      	ldr	r2, [pc, #432]	@ (8004a78 <HAL_DMA_Abort_IT+0x3a8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d04a      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6b      	ldr	r2, [pc, #428]	@ (8004a7c <HAL_DMA_Abort_IT+0x3ac>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d045      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a69      	ldr	r2, [pc, #420]	@ (8004a80 <HAL_DMA_Abort_IT+0x3b0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d040      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a68      	ldr	r2, [pc, #416]	@ (8004a84 <HAL_DMA_Abort_IT+0x3b4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d03b      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a66      	ldr	r2, [pc, #408]	@ (8004a88 <HAL_DMA_Abort_IT+0x3b8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d036      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a65      	ldr	r2, [pc, #404]	@ (8004a8c <HAL_DMA_Abort_IT+0x3bc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d031      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a63      	ldr	r2, [pc, #396]	@ (8004a90 <HAL_DMA_Abort_IT+0x3c0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02c      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a62      	ldr	r2, [pc, #392]	@ (8004a94 <HAL_DMA_Abort_IT+0x3c4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d027      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a60      	ldr	r2, [pc, #384]	@ (8004a98 <HAL_DMA_Abort_IT+0x3c8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a5f      	ldr	r2, [pc, #380]	@ (8004a9c <HAL_DMA_Abort_IT+0x3cc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d01d      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a5d      	ldr	r2, [pc, #372]	@ (8004aa0 <HAL_DMA_Abort_IT+0x3d0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5c      	ldr	r2, [pc, #368]	@ (8004aa4 <HAL_DMA_Abort_IT+0x3d4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a5a      	ldr	r2, [pc, #360]	@ (8004aa8 <HAL_DMA_Abort_IT+0x3d8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a59      	ldr	r2, [pc, #356]	@ (8004aac <HAL_DMA_Abort_IT+0x3dc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a57      	ldr	r2, [pc, #348]	@ (8004ab0 <HAL_DMA_Abort_IT+0x3e0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_DMA_Abort_IT+0x290>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a56      	ldr	r2, [pc, #344]	@ (8004ab4 <HAL_DMA_Abort_IT+0x3e4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d108      	bne.n	8004972 <HAL_DMA_Abort_IT+0x2a2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e007      	b.n	8004982 <HAL_DMA_Abort_IT+0x2b2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a3c      	ldr	r2, [pc, #240]	@ (8004a78 <HAL_DMA_Abort_IT+0x3a8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d072      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a3a      	ldr	r2, [pc, #232]	@ (8004a7c <HAL_DMA_Abort_IT+0x3ac>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d06d      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a39      	ldr	r2, [pc, #228]	@ (8004a80 <HAL_DMA_Abort_IT+0x3b0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d068      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a37      	ldr	r2, [pc, #220]	@ (8004a84 <HAL_DMA_Abort_IT+0x3b4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d063      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a36      	ldr	r2, [pc, #216]	@ (8004a88 <HAL_DMA_Abort_IT+0x3b8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d05e      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a34      	ldr	r2, [pc, #208]	@ (8004a8c <HAL_DMA_Abort_IT+0x3bc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d059      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a33      	ldr	r2, [pc, #204]	@ (8004a90 <HAL_DMA_Abort_IT+0x3c0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d054      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a31      	ldr	r2, [pc, #196]	@ (8004a94 <HAL_DMA_Abort_IT+0x3c4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d04f      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a30      	ldr	r2, [pc, #192]	@ (8004a98 <HAL_DMA_Abort_IT+0x3c8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d04a      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2e      	ldr	r2, [pc, #184]	@ (8004a9c <HAL_DMA_Abort_IT+0x3cc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d045      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2d      	ldr	r2, [pc, #180]	@ (8004aa0 <HAL_DMA_Abort_IT+0x3d0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d040      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa4 <HAL_DMA_Abort_IT+0x3d4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d03b      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2a      	ldr	r2, [pc, #168]	@ (8004aa8 <HAL_DMA_Abort_IT+0x3d8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d036      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a28      	ldr	r2, [pc, #160]	@ (8004aac <HAL_DMA_Abort_IT+0x3dc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d031      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a27      	ldr	r2, [pc, #156]	@ (8004ab0 <HAL_DMA_Abort_IT+0x3e0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d02c      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	@ (8004ab4 <HAL_DMA_Abort_IT+0x3e4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d027      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a24      	ldr	r2, [pc, #144]	@ (8004ab8 <HAL_DMA_Abort_IT+0x3e8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d022      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a22      	ldr	r2, [pc, #136]	@ (8004abc <HAL_DMA_Abort_IT+0x3ec>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01d      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a21      	ldr	r2, [pc, #132]	@ (8004ac0 <HAL_DMA_Abort_IT+0x3f0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d018      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac4 <HAL_DMA_Abort_IT+0x3f4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac8 <HAL_DMA_Abort_IT+0x3f8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00e      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1c      	ldr	r2, [pc, #112]	@ (8004acc <HAL_DMA_Abort_IT+0x3fc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d009      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad0 <HAL_DMA_Abort_IT+0x400>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d004      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x3a2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <HAL_DMA_Abort_IT+0x404>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d132      	bne.n	8004ad8 <HAL_DMA_Abort_IT+0x408>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e031      	b.n	8004ada <HAL_DMA_Abort_IT+0x40a>
 8004a76:	bf00      	nop
 8004a78:	40020010 	.word	0x40020010
 8004a7c:	40020028 	.word	0x40020028
 8004a80:	40020040 	.word	0x40020040
 8004a84:	40020058 	.word	0x40020058
 8004a88:	40020070 	.word	0x40020070
 8004a8c:	40020088 	.word	0x40020088
 8004a90:	400200a0 	.word	0x400200a0
 8004a94:	400200b8 	.word	0x400200b8
 8004a98:	40020410 	.word	0x40020410
 8004a9c:	40020428 	.word	0x40020428
 8004aa0:	40020440 	.word	0x40020440
 8004aa4:	40020458 	.word	0x40020458
 8004aa8:	40020470 	.word	0x40020470
 8004aac:	40020488 	.word	0x40020488
 8004ab0:	400204a0 	.word	0x400204a0
 8004ab4:	400204b8 	.word	0x400204b8
 8004ab8:	58025408 	.word	0x58025408
 8004abc:	5802541c 	.word	0x5802541c
 8004ac0:	58025430 	.word	0x58025430
 8004ac4:	58025444 	.word	0x58025444
 8004ac8:	58025458 	.word	0x58025458
 8004acc:	5802546c 	.word	0x5802546c
 8004ad0:	58025480 	.word	0x58025480
 8004ad4:	58025494 	.word	0x58025494
 8004ad8:	2300      	movs	r3, #0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d028      	beq.n	8004b30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2201      	movs	r2, #1
 8004afe:	409a      	lsls	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00c      	beq.n	8004b30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop

08004b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	@ 0x28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b68:	4b67      	ldr	r3, [pc, #412]	@ (8004d08 <HAL_DMA_IRQHandler+0x1ac>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a67      	ldr	r2, [pc, #412]	@ (8004d0c <HAL_DMA_IRQHandler+0x1b0>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	0a9b      	lsrs	r3, r3, #10
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a5f      	ldr	r2, [pc, #380]	@ (8004d10 <HAL_DMA_IRQHandler+0x1b4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d04a      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004d14 <HAL_DMA_IRQHandler+0x1b8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d045      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8004d18 <HAL_DMA_IRQHandler+0x1bc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d040      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d1c <HAL_DMA_IRQHandler+0x1c0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d03b      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a59      	ldr	r2, [pc, #356]	@ (8004d20 <HAL_DMA_IRQHandler+0x1c4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d036      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a57      	ldr	r2, [pc, #348]	@ (8004d24 <HAL_DMA_IRQHandler+0x1c8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d031      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a56      	ldr	r2, [pc, #344]	@ (8004d28 <HAL_DMA_IRQHandler+0x1cc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d02c      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a54      	ldr	r2, [pc, #336]	@ (8004d2c <HAL_DMA_IRQHandler+0x1d0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d027      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a53      	ldr	r2, [pc, #332]	@ (8004d30 <HAL_DMA_IRQHandler+0x1d4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d022      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a51      	ldr	r2, [pc, #324]	@ (8004d34 <HAL_DMA_IRQHandler+0x1d8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01d      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a50      	ldr	r2, [pc, #320]	@ (8004d38 <HAL_DMA_IRQHandler+0x1dc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d018      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a4e      	ldr	r2, [pc, #312]	@ (8004d3c <HAL_DMA_IRQHandler+0x1e0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004d40 <HAL_DMA_IRQHandler+0x1e4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00e      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a4b      	ldr	r2, [pc, #300]	@ (8004d44 <HAL_DMA_IRQHandler+0x1e8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d48 <HAL_DMA_IRQHandler+0x1ec>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xd2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a48      	ldr	r2, [pc, #288]	@ (8004d4c <HAL_DMA_IRQHandler+0x1f0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d101      	bne.n	8004c32 <HAL_DMA_IRQHandler+0xd6>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <HAL_DMA_IRQHandler+0xd8>
 8004c32:	2300      	movs	r3, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 842b 	beq.w	8005490 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	2208      	movs	r2, #8
 8004c44:	409a      	lsls	r2, r3
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80a2 	beq.w	8004d94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a2e      	ldr	r2, [pc, #184]	@ (8004d10 <HAL_DMA_IRQHandler+0x1b4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d04a      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004d14 <HAL_DMA_IRQHandler+0x1b8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d045      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2b      	ldr	r2, [pc, #172]	@ (8004d18 <HAL_DMA_IRQHandler+0x1bc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d040      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2a      	ldr	r2, [pc, #168]	@ (8004d1c <HAL_DMA_IRQHandler+0x1c0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d03b      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a28      	ldr	r2, [pc, #160]	@ (8004d20 <HAL_DMA_IRQHandler+0x1c4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d036      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a27      	ldr	r2, [pc, #156]	@ (8004d24 <HAL_DMA_IRQHandler+0x1c8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d031      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a25      	ldr	r2, [pc, #148]	@ (8004d28 <HAL_DMA_IRQHandler+0x1cc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d02c      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a24      	ldr	r2, [pc, #144]	@ (8004d2c <HAL_DMA_IRQHandler+0x1d0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d027      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a22      	ldr	r2, [pc, #136]	@ (8004d30 <HAL_DMA_IRQHandler+0x1d4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d022      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a21      	ldr	r2, [pc, #132]	@ (8004d34 <HAL_DMA_IRQHandler+0x1d8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d01d      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d38 <HAL_DMA_IRQHandler+0x1dc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d018      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d3c <HAL_DMA_IRQHandler+0x1e0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d40 <HAL_DMA_IRQHandler+0x1e4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00e      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d44 <HAL_DMA_IRQHandler+0x1e8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <HAL_DMA_IRQHandler+0x1ec>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x194>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a18      	ldr	r2, [pc, #96]	@ (8004d4c <HAL_DMA_IRQHandler+0x1f0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d12f      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x1f4>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	bf14      	ite	ne
 8004cfe:	2301      	movne	r3, #1
 8004d00:	2300      	moveq	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	e02e      	b.n	8004d64 <HAL_DMA_IRQHandler+0x208>
 8004d06:	bf00      	nop
 8004d08:	24000000 	.word	0x24000000
 8004d0c:	1b4e81b5 	.word	0x1b4e81b5
 8004d10:	40020010 	.word	0x40020010
 8004d14:	40020028 	.word	0x40020028
 8004d18:	40020040 	.word	0x40020040
 8004d1c:	40020058 	.word	0x40020058
 8004d20:	40020070 	.word	0x40020070
 8004d24:	40020088 	.word	0x40020088
 8004d28:	400200a0 	.word	0x400200a0
 8004d2c:	400200b8 	.word	0x400200b8
 8004d30:	40020410 	.word	0x40020410
 8004d34:	40020428 	.word	0x40020428
 8004d38:	40020440 	.word	0x40020440
 8004d3c:	40020458 	.word	0x40020458
 8004d40:	40020470 	.word	0x40020470
 8004d44:	40020488 	.word	0x40020488
 8004d48:	400204a0 	.word	0x400204a0
 8004d4c:	400204b8 	.word	0x400204b8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf14      	ite	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	2300      	moveq	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d015      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0204 	bic.w	r2, r2, #4
 8004d76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2208      	movs	r2, #8
 8004d82:	409a      	lsls	r2, r3
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8c:	f043 0201 	orr.w	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d06e      	beq.n	8004e88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a69      	ldr	r2, [pc, #420]	@ (8004f54 <HAL_DMA_IRQHandler+0x3f8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d04a      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a67      	ldr	r2, [pc, #412]	@ (8004f58 <HAL_DMA_IRQHandler+0x3fc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d045      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a66      	ldr	r2, [pc, #408]	@ (8004f5c <HAL_DMA_IRQHandler+0x400>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d040      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a64      	ldr	r2, [pc, #400]	@ (8004f60 <HAL_DMA_IRQHandler+0x404>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d03b      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a63      	ldr	r2, [pc, #396]	@ (8004f64 <HAL_DMA_IRQHandler+0x408>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d036      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a61      	ldr	r2, [pc, #388]	@ (8004f68 <HAL_DMA_IRQHandler+0x40c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d031      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a60      	ldr	r2, [pc, #384]	@ (8004f6c <HAL_DMA_IRQHandler+0x410>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d02c      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f70 <HAL_DMA_IRQHandler+0x414>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d027      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a5d      	ldr	r2, [pc, #372]	@ (8004f74 <HAL_DMA_IRQHandler+0x418>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d022      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5b      	ldr	r2, [pc, #364]	@ (8004f78 <HAL_DMA_IRQHandler+0x41c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d01d      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a5a      	ldr	r2, [pc, #360]	@ (8004f7c <HAL_DMA_IRQHandler+0x420>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d018      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a58      	ldr	r2, [pc, #352]	@ (8004f80 <HAL_DMA_IRQHandler+0x424>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a57      	ldr	r2, [pc, #348]	@ (8004f84 <HAL_DMA_IRQHandler+0x428>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00e      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a55      	ldr	r2, [pc, #340]	@ (8004f88 <HAL_DMA_IRQHandler+0x42c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d009      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a54      	ldr	r2, [pc, #336]	@ (8004f8c <HAL_DMA_IRQHandler+0x430>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x2ee>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a52      	ldr	r2, [pc, #328]	@ (8004f90 <HAL_DMA_IRQHandler+0x434>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d10a      	bne.n	8004e60 <HAL_DMA_IRQHandler+0x304>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	bf14      	ite	ne
 8004e58:	2301      	movne	r3, #1
 8004e5a:	2300      	moveq	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	e003      	b.n	8004e68 <HAL_DMA_IRQHandler+0x30c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2300      	movs	r3, #0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00d      	beq.n	8004e88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	2201      	movs	r2, #1
 8004e76:	409a      	lsls	r2, r3
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e80:	f043 0202 	orr.w	r2, r3, #2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2204      	movs	r2, #4
 8004e92:	409a      	lsls	r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 808f 	beq.w	8004fbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f54 <HAL_DMA_IRQHandler+0x3f8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d04a      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a2a      	ldr	r2, [pc, #168]	@ (8004f58 <HAL_DMA_IRQHandler+0x3fc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d045      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a29      	ldr	r2, [pc, #164]	@ (8004f5c <HAL_DMA_IRQHandler+0x400>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d040      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a27      	ldr	r2, [pc, #156]	@ (8004f60 <HAL_DMA_IRQHandler+0x404>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d03b      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a26      	ldr	r2, [pc, #152]	@ (8004f64 <HAL_DMA_IRQHandler+0x408>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d036      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a24      	ldr	r2, [pc, #144]	@ (8004f68 <HAL_DMA_IRQHandler+0x40c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d031      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a23      	ldr	r2, [pc, #140]	@ (8004f6c <HAL_DMA_IRQHandler+0x410>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d02c      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a21      	ldr	r2, [pc, #132]	@ (8004f70 <HAL_DMA_IRQHandler+0x414>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d027      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a20      	ldr	r2, [pc, #128]	@ (8004f74 <HAL_DMA_IRQHandler+0x418>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d022      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1e      	ldr	r2, [pc, #120]	@ (8004f78 <HAL_DMA_IRQHandler+0x41c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01d      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1d      	ldr	r2, [pc, #116]	@ (8004f7c <HAL_DMA_IRQHandler+0x420>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d018      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1b      	ldr	r2, [pc, #108]	@ (8004f80 <HAL_DMA_IRQHandler+0x424>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004f84 <HAL_DMA_IRQHandler+0x428>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00e      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a18      	ldr	r2, [pc, #96]	@ (8004f88 <HAL_DMA_IRQHandler+0x42c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d009      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a17      	ldr	r2, [pc, #92]	@ (8004f8c <HAL_DMA_IRQHandler+0x430>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x3e2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <HAL_DMA_IRQHandler+0x434>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d12a      	bne.n	8004f94 <HAL_DMA_IRQHandler+0x438>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bf14      	ite	ne
 8004f4c:	2301      	movne	r3, #1
 8004f4e:	2300      	moveq	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	e023      	b.n	8004f9c <HAL_DMA_IRQHandler+0x440>
 8004f54:	40020010 	.word	0x40020010
 8004f58:	40020028 	.word	0x40020028
 8004f5c:	40020040 	.word	0x40020040
 8004f60:	40020058 	.word	0x40020058
 8004f64:	40020070 	.word	0x40020070
 8004f68:	40020088 	.word	0x40020088
 8004f6c:	400200a0 	.word	0x400200a0
 8004f70:	400200b8 	.word	0x400200b8
 8004f74:	40020410 	.word	0x40020410
 8004f78:	40020428 	.word	0x40020428
 8004f7c:	40020440 	.word	0x40020440
 8004f80:	40020458 	.word	0x40020458
 8004f84:	40020470 	.word	0x40020470
 8004f88:	40020488 	.word	0x40020488
 8004f8c:	400204a0 	.word	0x400204a0
 8004f90:	400204b8 	.word	0x400204b8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00d      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2204      	movs	r2, #4
 8004faa:	409a      	lsls	r2, r3
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	f043 0204 	orr.w	r2, r3, #4
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	409a      	lsls	r2, r3
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80a6 	beq.w	800511e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a85      	ldr	r2, [pc, #532]	@ (80051ec <HAL_DMA_IRQHandler+0x690>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d04a      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a83      	ldr	r2, [pc, #524]	@ (80051f0 <HAL_DMA_IRQHandler+0x694>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d045      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a82      	ldr	r2, [pc, #520]	@ (80051f4 <HAL_DMA_IRQHandler+0x698>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d040      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a80      	ldr	r2, [pc, #512]	@ (80051f8 <HAL_DMA_IRQHandler+0x69c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d03b      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7f      	ldr	r2, [pc, #508]	@ (80051fc <HAL_DMA_IRQHandler+0x6a0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d036      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a7d      	ldr	r2, [pc, #500]	@ (8005200 <HAL_DMA_IRQHandler+0x6a4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d031      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7c      	ldr	r2, [pc, #496]	@ (8005204 <HAL_DMA_IRQHandler+0x6a8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d02c      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7a      	ldr	r2, [pc, #488]	@ (8005208 <HAL_DMA_IRQHandler+0x6ac>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d027      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a79      	ldr	r2, [pc, #484]	@ (800520c <HAL_DMA_IRQHandler+0x6b0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d022      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a77      	ldr	r2, [pc, #476]	@ (8005210 <HAL_DMA_IRQHandler+0x6b4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01d      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a76      	ldr	r2, [pc, #472]	@ (8005214 <HAL_DMA_IRQHandler+0x6b8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a74      	ldr	r2, [pc, #464]	@ (8005218 <HAL_DMA_IRQHandler+0x6bc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a73      	ldr	r2, [pc, #460]	@ (800521c <HAL_DMA_IRQHandler+0x6c0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a71      	ldr	r2, [pc, #452]	@ (8005220 <HAL_DMA_IRQHandler+0x6c4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a70      	ldr	r2, [pc, #448]	@ (8005224 <HAL_DMA_IRQHandler+0x6c8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_DMA_IRQHandler+0x516>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a6e      	ldr	r2, [pc, #440]	@ (8005228 <HAL_DMA_IRQHandler+0x6cc>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10a      	bne.n	8005088 <HAL_DMA_IRQHandler+0x52c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e009      	b.n	800509c <HAL_DMA_IRQHandler+0x540>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	bf14      	ite	ne
 8005096:	2301      	movne	r3, #1
 8005098:	2300      	moveq	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d03e      	beq.n	800511e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2210      	movs	r2, #16
 80050aa:	409a      	lsls	r2, r3
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d018      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d108      	bne.n	80050de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d024      	beq.n	800511e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
 80050dc:	e01f      	b.n	800511e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01b      	beq.n	800511e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
 80050ee:	e016      	b.n	800511e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0208 	bic.w	r2, r2, #8
 800510c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	2220      	movs	r2, #32
 8005128:	409a      	lsls	r2, r3
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8110 	beq.w	8005354 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2c      	ldr	r2, [pc, #176]	@ (80051ec <HAL_DMA_IRQHandler+0x690>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d04a      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2b      	ldr	r2, [pc, #172]	@ (80051f0 <HAL_DMA_IRQHandler+0x694>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d045      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a29      	ldr	r2, [pc, #164]	@ (80051f4 <HAL_DMA_IRQHandler+0x698>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d040      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a28      	ldr	r2, [pc, #160]	@ (80051f8 <HAL_DMA_IRQHandler+0x69c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d03b      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a26      	ldr	r2, [pc, #152]	@ (80051fc <HAL_DMA_IRQHandler+0x6a0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d036      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a25      	ldr	r2, [pc, #148]	@ (8005200 <HAL_DMA_IRQHandler+0x6a4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d031      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a23      	ldr	r2, [pc, #140]	@ (8005204 <HAL_DMA_IRQHandler+0x6a8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d02c      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a22      	ldr	r2, [pc, #136]	@ (8005208 <HAL_DMA_IRQHandler+0x6ac>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d027      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a20      	ldr	r2, [pc, #128]	@ (800520c <HAL_DMA_IRQHandler+0x6b0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1f      	ldr	r2, [pc, #124]	@ (8005210 <HAL_DMA_IRQHandler+0x6b4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d01d      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1d      	ldr	r2, [pc, #116]	@ (8005214 <HAL_DMA_IRQHandler+0x6b8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005218 <HAL_DMA_IRQHandler+0x6bc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1a      	ldr	r2, [pc, #104]	@ (800521c <HAL_DMA_IRQHandler+0x6c0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a19      	ldr	r2, [pc, #100]	@ (8005220 <HAL_DMA_IRQHandler+0x6c4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <HAL_DMA_IRQHandler+0x6c8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x678>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a16      	ldr	r2, [pc, #88]	@ (8005228 <HAL_DMA_IRQHandler+0x6cc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d12b      	bne.n	800522c <HAL_DMA_IRQHandler+0x6d0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	e02a      	b.n	8005240 <HAL_DMA_IRQHandler+0x6e4>
 80051ea:	bf00      	nop
 80051ec:	40020010 	.word	0x40020010
 80051f0:	40020028 	.word	0x40020028
 80051f4:	40020040 	.word	0x40020040
 80051f8:	40020058 	.word	0x40020058
 80051fc:	40020070 	.word	0x40020070
 8005200:	40020088 	.word	0x40020088
 8005204:	400200a0 	.word	0x400200a0
 8005208:	400200b8 	.word	0x400200b8
 800520c:	40020410 	.word	0x40020410
 8005210:	40020428 	.word	0x40020428
 8005214:	40020440 	.word	0x40020440
 8005218:	40020458 	.word	0x40020458
 800521c:	40020470 	.word	0x40020470
 8005220:	40020488 	.word	0x40020488
 8005224:	400204a0 	.word	0x400204a0
 8005228:	400204b8 	.word	0x400204b8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8087 	beq.w	8005354 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2220      	movs	r2, #32
 8005250:	409a      	lsls	r2, r3
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b04      	cmp	r3, #4
 8005260:	d139      	bne.n	80052d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0216 	bic.w	r2, r2, #22
 8005270:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005280:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d103      	bne.n	8005292 <HAL_DMA_IRQHandler+0x736>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0208 	bic.w	r2, r2, #8
 80052a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	223f      	movs	r2, #63	@ 0x3f
 80052ac:	409a      	lsls	r2, r3
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 834a 	beq.w	8005960 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
          }
          return;
 80052d4:	e344      	b.n	8005960 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d018      	beq.n	8005316 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d108      	bne.n	8005304 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d02c      	beq.n	8005354 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	4798      	blx	r3
 8005302:	e027      	b.n	8005354 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d023      	beq.n	8005354 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	4798      	blx	r3
 8005314:	e01e      	b.n	8005354 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10f      	bne.n	8005344 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0210 	bic.w	r2, r2, #16
 8005332:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8306 	beq.w	800596a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8088 	beq.w	800547c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2204      	movs	r2, #4
 8005370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a7a      	ldr	r2, [pc, #488]	@ (8005564 <HAL_DMA_IRQHandler+0xa08>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d04a      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a79      	ldr	r2, [pc, #484]	@ (8005568 <HAL_DMA_IRQHandler+0xa0c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d045      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a77      	ldr	r2, [pc, #476]	@ (800556c <HAL_DMA_IRQHandler+0xa10>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d040      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a76      	ldr	r2, [pc, #472]	@ (8005570 <HAL_DMA_IRQHandler+0xa14>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d03b      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a74      	ldr	r2, [pc, #464]	@ (8005574 <HAL_DMA_IRQHandler+0xa18>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d036      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a73      	ldr	r2, [pc, #460]	@ (8005578 <HAL_DMA_IRQHandler+0xa1c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d031      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a71      	ldr	r2, [pc, #452]	@ (800557c <HAL_DMA_IRQHandler+0xa20>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d02c      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a70      	ldr	r2, [pc, #448]	@ (8005580 <HAL_DMA_IRQHandler+0xa24>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d027      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a6e      	ldr	r2, [pc, #440]	@ (8005584 <HAL_DMA_IRQHandler+0xa28>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d022      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a6d      	ldr	r2, [pc, #436]	@ (8005588 <HAL_DMA_IRQHandler+0xa2c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d01d      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a6b      	ldr	r2, [pc, #428]	@ (800558c <HAL_DMA_IRQHandler+0xa30>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d018      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a6a      	ldr	r2, [pc, #424]	@ (8005590 <HAL_DMA_IRQHandler+0xa34>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a68      	ldr	r2, [pc, #416]	@ (8005594 <HAL_DMA_IRQHandler+0xa38>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a67      	ldr	r2, [pc, #412]	@ (8005598 <HAL_DMA_IRQHandler+0xa3c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a65      	ldr	r2, [pc, #404]	@ (800559c <HAL_DMA_IRQHandler+0xa40>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_DMA_IRQHandler+0x8b8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a64      	ldr	r2, [pc, #400]	@ (80055a0 <HAL_DMA_IRQHandler+0xa44>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d108      	bne.n	8005426 <HAL_DMA_IRQHandler+0x8ca>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	e007      	b.n	8005436 <HAL_DMA_IRQHandler+0x8da>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543e:	429a      	cmp	r2, r3
 8005440:	d307      	bcc.n	8005452 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f2      	bne.n	8005436 <HAL_DMA_IRQHandler+0x8da>
 8005450:	e000      	b.n	8005454 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005452:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d004      	beq.n	800546c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2203      	movs	r2, #3
 8005466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800546a:	e003      	b.n	8005474 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8272 	beq.w	800596a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
 800548e:	e26c      	b.n	800596a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a43      	ldr	r2, [pc, #268]	@ (80055a4 <HAL_DMA_IRQHandler+0xa48>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d022      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x984>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a42      	ldr	r2, [pc, #264]	@ (80055a8 <HAL_DMA_IRQHandler+0xa4c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d01d      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x984>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a40      	ldr	r2, [pc, #256]	@ (80055ac <HAL_DMA_IRQHandler+0xa50>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d018      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x984>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a3f      	ldr	r2, [pc, #252]	@ (80055b0 <HAL_DMA_IRQHandler+0xa54>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x984>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3d      	ldr	r2, [pc, #244]	@ (80055b4 <HAL_DMA_IRQHandler+0xa58>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x984>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a3c      	ldr	r2, [pc, #240]	@ (80055b8 <HAL_DMA_IRQHandler+0xa5c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d009      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x984>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a3a      	ldr	r2, [pc, #232]	@ (80055bc <HAL_DMA_IRQHandler+0xa60>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x984>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a39      	ldr	r2, [pc, #228]	@ (80055c0 <HAL_DMA_IRQHandler+0xa64>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d101      	bne.n	80054e4 <HAL_DMA_IRQHandler+0x988>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <HAL_DMA_IRQHandler+0x98a>
 80054e4:	2300      	movs	r3, #0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 823f 	beq.w	800596a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	2204      	movs	r2, #4
 80054fe:	409a      	lsls	r2, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80cd 	beq.w	80056a4 <HAL_DMA_IRQHandler+0xb48>
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80c7 	beq.w	80056a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	2204      	movs	r2, #4
 8005520:	409a      	lsls	r2, r3
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d049      	beq.n	80055c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8210 	beq.w	8005964 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800554c:	e20a      	b.n	8005964 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8206 	beq.w	8005964 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005560:	e200      	b.n	8005964 <HAL_DMA_IRQHandler+0xe08>
 8005562:	bf00      	nop
 8005564:	40020010 	.word	0x40020010
 8005568:	40020028 	.word	0x40020028
 800556c:	40020040 	.word	0x40020040
 8005570:	40020058 	.word	0x40020058
 8005574:	40020070 	.word	0x40020070
 8005578:	40020088 	.word	0x40020088
 800557c:	400200a0 	.word	0x400200a0
 8005580:	400200b8 	.word	0x400200b8
 8005584:	40020410 	.word	0x40020410
 8005588:	40020428 	.word	0x40020428
 800558c:	40020440 	.word	0x40020440
 8005590:	40020458 	.word	0x40020458
 8005594:	40020470 	.word	0x40020470
 8005598:	40020488 	.word	0x40020488
 800559c:	400204a0 	.word	0x400204a0
 80055a0:	400204b8 	.word	0x400204b8
 80055a4:	58025408 	.word	0x58025408
 80055a8:	5802541c 	.word	0x5802541c
 80055ac:	58025430 	.word	0x58025430
 80055b0:	58025444 	.word	0x58025444
 80055b4:	58025458 	.word	0x58025458
 80055b8:	5802546c 	.word	0x5802546c
 80055bc:	58025480 	.word	0x58025480
 80055c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d160      	bne.n	8005690 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a7f      	ldr	r2, [pc, #508]	@ (80057d0 <HAL_DMA_IRQHandler+0xc74>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d04a      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a7d      	ldr	r2, [pc, #500]	@ (80057d4 <HAL_DMA_IRQHandler+0xc78>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d045      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a7c      	ldr	r2, [pc, #496]	@ (80057d8 <HAL_DMA_IRQHandler+0xc7c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d040      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a7a      	ldr	r2, [pc, #488]	@ (80057dc <HAL_DMA_IRQHandler+0xc80>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d03b      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a79      	ldr	r2, [pc, #484]	@ (80057e0 <HAL_DMA_IRQHandler+0xc84>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d036      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a77      	ldr	r2, [pc, #476]	@ (80057e4 <HAL_DMA_IRQHandler+0xc88>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d031      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a76      	ldr	r2, [pc, #472]	@ (80057e8 <HAL_DMA_IRQHandler+0xc8c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d02c      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a74      	ldr	r2, [pc, #464]	@ (80057ec <HAL_DMA_IRQHandler+0xc90>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d027      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a73      	ldr	r2, [pc, #460]	@ (80057f0 <HAL_DMA_IRQHandler+0xc94>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d022      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a71      	ldr	r2, [pc, #452]	@ (80057f4 <HAL_DMA_IRQHandler+0xc98>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01d      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a70      	ldr	r2, [pc, #448]	@ (80057f8 <HAL_DMA_IRQHandler+0xc9c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d018      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a6e      	ldr	r2, [pc, #440]	@ (80057fc <HAL_DMA_IRQHandler+0xca0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a6d      	ldr	r2, [pc, #436]	@ (8005800 <HAL_DMA_IRQHandler+0xca4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6b      	ldr	r2, [pc, #428]	@ (8005804 <HAL_DMA_IRQHandler+0xca8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d009      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6a      	ldr	r2, [pc, #424]	@ (8005808 <HAL_DMA_IRQHandler+0xcac>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_DMA_IRQHandler+0xb12>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a68      	ldr	r2, [pc, #416]	@ (800580c <HAL_DMA_IRQHandler+0xcb0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d108      	bne.n	8005680 <HAL_DMA_IRQHandler+0xb24>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0208 	bic.w	r2, r2, #8
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e007      	b.n	8005690 <HAL_DMA_IRQHandler+0xb34>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0204 	bic.w	r2, r2, #4
 800568e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8165 	beq.w	8005964 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056a2:	e15f      	b.n	8005964 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	2202      	movs	r2, #2
 80056ae:	409a      	lsls	r2, r3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80c5 	beq.w	8005844 <HAL_DMA_IRQHandler+0xce8>
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80bf 	beq.w	8005844 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2202      	movs	r2, #2
 80056d0:	409a      	lsls	r2, r3
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d018      	beq.n	8005712 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 813a 	beq.w	8005968 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056fc:	e134      	b.n	8005968 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 8130 	beq.w	8005968 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005710:	e12a      	b.n	8005968 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	f040 8089 	bne.w	8005830 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2b      	ldr	r2, [pc, #172]	@ (80057d0 <HAL_DMA_IRQHandler+0xc74>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d04a      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a29      	ldr	r2, [pc, #164]	@ (80057d4 <HAL_DMA_IRQHandler+0xc78>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d045      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a28      	ldr	r2, [pc, #160]	@ (80057d8 <HAL_DMA_IRQHandler+0xc7c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d040      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <HAL_DMA_IRQHandler+0xc80>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d03b      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a25      	ldr	r2, [pc, #148]	@ (80057e0 <HAL_DMA_IRQHandler+0xc84>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d036      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a23      	ldr	r2, [pc, #140]	@ (80057e4 <HAL_DMA_IRQHandler+0xc88>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d031      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a22      	ldr	r2, [pc, #136]	@ (80057e8 <HAL_DMA_IRQHandler+0xc8c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d02c      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a20      	ldr	r2, [pc, #128]	@ (80057ec <HAL_DMA_IRQHandler+0xc90>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d027      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1f      	ldr	r2, [pc, #124]	@ (80057f0 <HAL_DMA_IRQHandler+0xc94>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d022      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1d      	ldr	r2, [pc, #116]	@ (80057f4 <HAL_DMA_IRQHandler+0xc98>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01d      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <HAL_DMA_IRQHandler+0xc9c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d018      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1a      	ldr	r2, [pc, #104]	@ (80057fc <HAL_DMA_IRQHandler+0xca0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a19      	ldr	r2, [pc, #100]	@ (8005800 <HAL_DMA_IRQHandler+0xca4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a17      	ldr	r2, [pc, #92]	@ (8005804 <HAL_DMA_IRQHandler+0xca8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d009      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a16      	ldr	r2, [pc, #88]	@ (8005808 <HAL_DMA_IRQHandler+0xcac>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_DMA_IRQHandler+0xc62>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a14      	ldr	r2, [pc, #80]	@ (800580c <HAL_DMA_IRQHandler+0xcb0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d128      	bne.n	8005810 <HAL_DMA_IRQHandler+0xcb4>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0214 	bic.w	r2, r2, #20
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e027      	b.n	8005820 <HAL_DMA_IRQHandler+0xcc4>
 80057d0:	40020010 	.word	0x40020010
 80057d4:	40020028 	.word	0x40020028
 80057d8:	40020040 	.word	0x40020040
 80057dc:	40020058 	.word	0x40020058
 80057e0:	40020070 	.word	0x40020070
 80057e4:	40020088 	.word	0x40020088
 80057e8:	400200a0 	.word	0x400200a0
 80057ec:	400200b8 	.word	0x400200b8
 80057f0:	40020410 	.word	0x40020410
 80057f4:	40020428 	.word	0x40020428
 80057f8:	40020440 	.word	0x40020440
 80057fc:	40020458 	.word	0x40020458
 8005800:	40020470 	.word	0x40020470
 8005804:	40020488 	.word	0x40020488
 8005808:	400204a0 	.word	0x400204a0
 800580c:	400204b8 	.word	0x400204b8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 020a 	bic.w	r2, r2, #10
 800581e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8097 	beq.w	8005968 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005842:	e091      	b.n	8005968 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2208      	movs	r2, #8
 800584e:	409a      	lsls	r2, r3
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4013      	ands	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 8088 	beq.w	800596a <HAL_DMA_IRQHandler+0xe0e>
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8082 	beq.w	800596a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a41      	ldr	r2, [pc, #260]	@ (8005970 <HAL_DMA_IRQHandler+0xe14>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d04a      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a3f      	ldr	r2, [pc, #252]	@ (8005974 <HAL_DMA_IRQHandler+0xe18>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d045      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a3e      	ldr	r2, [pc, #248]	@ (8005978 <HAL_DMA_IRQHandler+0xe1c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d040      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a3c      	ldr	r2, [pc, #240]	@ (800597c <HAL_DMA_IRQHandler+0xe20>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d03b      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a3b      	ldr	r2, [pc, #236]	@ (8005980 <HAL_DMA_IRQHandler+0xe24>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d036      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a39      	ldr	r2, [pc, #228]	@ (8005984 <HAL_DMA_IRQHandler+0xe28>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d031      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a38      	ldr	r2, [pc, #224]	@ (8005988 <HAL_DMA_IRQHandler+0xe2c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d02c      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a36      	ldr	r2, [pc, #216]	@ (800598c <HAL_DMA_IRQHandler+0xe30>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d027      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a35      	ldr	r2, [pc, #212]	@ (8005990 <HAL_DMA_IRQHandler+0xe34>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d022      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a33      	ldr	r2, [pc, #204]	@ (8005994 <HAL_DMA_IRQHandler+0xe38>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01d      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a32      	ldr	r2, [pc, #200]	@ (8005998 <HAL_DMA_IRQHandler+0xe3c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a30      	ldr	r2, [pc, #192]	@ (800599c <HAL_DMA_IRQHandler+0xe40>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a2f      	ldr	r2, [pc, #188]	@ (80059a0 <HAL_DMA_IRQHandler+0xe44>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a2d      	ldr	r2, [pc, #180]	@ (80059a4 <HAL_DMA_IRQHandler+0xe48>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2c      	ldr	r2, [pc, #176]	@ (80059a8 <HAL_DMA_IRQHandler+0xe4c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_DMA_IRQHandler+0xdaa>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2a      	ldr	r2, [pc, #168]	@ (80059ac <HAL_DMA_IRQHandler+0xe50>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <HAL_DMA_IRQHandler+0xdbc>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 021c 	bic.w	r2, r2, #28
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e007      	b.n	8005928 <HAL_DMA_IRQHandler+0xdcc>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 020e 	bic.w	r2, r2, #14
 8005926:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	2201      	movs	r2, #1
 8005932:	409a      	lsls	r2, r3
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
 800595e:	e004      	b.n	800596a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005960:	bf00      	nop
 8005962:	e002      	b.n	800596a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005964:	bf00      	nop
 8005966:	e000      	b.n	800596a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005968:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800596a:	3728      	adds	r7, #40	@ 0x28
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40020010 	.word	0x40020010
 8005974:	40020028 	.word	0x40020028
 8005978:	40020040 	.word	0x40020040
 800597c:	40020058 	.word	0x40020058
 8005980:	40020070 	.word	0x40020070
 8005984:	40020088 	.word	0x40020088
 8005988:	400200a0 	.word	0x400200a0
 800598c:	400200b8 	.word	0x400200b8
 8005990:	40020410 	.word	0x40020410
 8005994:	40020428 	.word	0x40020428
 8005998:	40020440 	.word	0x40020440
 800599c:	40020458 	.word	0x40020458
 80059a0:	40020470 	.word	0x40020470
 80059a4:	40020488 	.word	0x40020488
 80059a8:	400204a0 	.word	0x400204a0
 80059ac:	400204b8 	.word	0x400204b8

080059b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a7f      	ldr	r2, [pc, #508]	@ (8005bcc <DMA_SetConfig+0x21c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d072      	beq.n	8005aba <DMA_SetConfig+0x10a>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a7d      	ldr	r2, [pc, #500]	@ (8005bd0 <DMA_SetConfig+0x220>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d06d      	beq.n	8005aba <DMA_SetConfig+0x10a>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a7c      	ldr	r2, [pc, #496]	@ (8005bd4 <DMA_SetConfig+0x224>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d068      	beq.n	8005aba <DMA_SetConfig+0x10a>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a7a      	ldr	r2, [pc, #488]	@ (8005bd8 <DMA_SetConfig+0x228>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d063      	beq.n	8005aba <DMA_SetConfig+0x10a>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a79      	ldr	r2, [pc, #484]	@ (8005bdc <DMA_SetConfig+0x22c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d05e      	beq.n	8005aba <DMA_SetConfig+0x10a>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a77      	ldr	r2, [pc, #476]	@ (8005be0 <DMA_SetConfig+0x230>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d059      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a76      	ldr	r2, [pc, #472]	@ (8005be4 <DMA_SetConfig+0x234>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d054      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a74      	ldr	r2, [pc, #464]	@ (8005be8 <DMA_SetConfig+0x238>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d04f      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a73      	ldr	r2, [pc, #460]	@ (8005bec <DMA_SetConfig+0x23c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d04a      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a71      	ldr	r2, [pc, #452]	@ (8005bf0 <DMA_SetConfig+0x240>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d045      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a70      	ldr	r2, [pc, #448]	@ (8005bf4 <DMA_SetConfig+0x244>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d040      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a6e      	ldr	r2, [pc, #440]	@ (8005bf8 <DMA_SetConfig+0x248>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d03b      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a6d      	ldr	r2, [pc, #436]	@ (8005bfc <DMA_SetConfig+0x24c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d036      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a6b      	ldr	r2, [pc, #428]	@ (8005c00 <DMA_SetConfig+0x250>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d031      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6a      	ldr	r2, [pc, #424]	@ (8005c04 <DMA_SetConfig+0x254>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d02c      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a68      	ldr	r2, [pc, #416]	@ (8005c08 <DMA_SetConfig+0x258>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d027      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a67      	ldr	r2, [pc, #412]	@ (8005c0c <DMA_SetConfig+0x25c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d022      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a65      	ldr	r2, [pc, #404]	@ (8005c10 <DMA_SetConfig+0x260>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01d      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a64      	ldr	r2, [pc, #400]	@ (8005c14 <DMA_SetConfig+0x264>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d018      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a62      	ldr	r2, [pc, #392]	@ (8005c18 <DMA_SetConfig+0x268>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d013      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a61      	ldr	r2, [pc, #388]	@ (8005c1c <DMA_SetConfig+0x26c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00e      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a5f      	ldr	r2, [pc, #380]	@ (8005c20 <DMA_SetConfig+0x270>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d009      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8005c24 <DMA_SetConfig+0x274>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <DMA_SetConfig+0x10a>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a5c      	ldr	r2, [pc, #368]	@ (8005c28 <DMA_SetConfig+0x278>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d101      	bne.n	8005abe <DMA_SetConfig+0x10e>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <DMA_SetConfig+0x110>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005acc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005ade:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a39      	ldr	r2, [pc, #228]	@ (8005bcc <DMA_SetConfig+0x21c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d04a      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a38      	ldr	r2, [pc, #224]	@ (8005bd0 <DMA_SetConfig+0x220>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d045      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a36      	ldr	r2, [pc, #216]	@ (8005bd4 <DMA_SetConfig+0x224>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d040      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a35      	ldr	r2, [pc, #212]	@ (8005bd8 <DMA_SetConfig+0x228>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d03b      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a33      	ldr	r2, [pc, #204]	@ (8005bdc <DMA_SetConfig+0x22c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d036      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a32      	ldr	r2, [pc, #200]	@ (8005be0 <DMA_SetConfig+0x230>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d031      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a30      	ldr	r2, [pc, #192]	@ (8005be4 <DMA_SetConfig+0x234>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d02c      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8005be8 <DMA_SetConfig+0x238>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d027      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2d      	ldr	r2, [pc, #180]	@ (8005bec <DMA_SetConfig+0x23c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d022      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf0 <DMA_SetConfig+0x240>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d01d      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf4 <DMA_SetConfig+0x244>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a29      	ldr	r2, [pc, #164]	@ (8005bf8 <DMA_SetConfig+0x248>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a27      	ldr	r2, [pc, #156]	@ (8005bfc <DMA_SetConfig+0x24c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a26      	ldr	r2, [pc, #152]	@ (8005c00 <DMA_SetConfig+0x250>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a24      	ldr	r2, [pc, #144]	@ (8005c04 <DMA_SetConfig+0x254>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <DMA_SetConfig+0x1d0>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a23      	ldr	r2, [pc, #140]	@ (8005c08 <DMA_SetConfig+0x258>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d101      	bne.n	8005b84 <DMA_SetConfig+0x1d4>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <DMA_SetConfig+0x1d6>
 8005b84:	2300      	movs	r3, #0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d059      	beq.n	8005c3e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	223f      	movs	r2, #63	@ 0x3f
 8005b94:	409a      	lsls	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ba8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b40      	cmp	r3, #64	@ 0x40
 8005bb8:	d138      	bne.n	8005c2c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005bca:	e086      	b.n	8005cda <DMA_SetConfig+0x32a>
 8005bcc:	40020010 	.word	0x40020010
 8005bd0:	40020028 	.word	0x40020028
 8005bd4:	40020040 	.word	0x40020040
 8005bd8:	40020058 	.word	0x40020058
 8005bdc:	40020070 	.word	0x40020070
 8005be0:	40020088 	.word	0x40020088
 8005be4:	400200a0 	.word	0x400200a0
 8005be8:	400200b8 	.word	0x400200b8
 8005bec:	40020410 	.word	0x40020410
 8005bf0:	40020428 	.word	0x40020428
 8005bf4:	40020440 	.word	0x40020440
 8005bf8:	40020458 	.word	0x40020458
 8005bfc:	40020470 	.word	0x40020470
 8005c00:	40020488 	.word	0x40020488
 8005c04:	400204a0 	.word	0x400204a0
 8005c08:	400204b8 	.word	0x400204b8
 8005c0c:	58025408 	.word	0x58025408
 8005c10:	5802541c 	.word	0x5802541c
 8005c14:	58025430 	.word	0x58025430
 8005c18:	58025444 	.word	0x58025444
 8005c1c:	58025458 	.word	0x58025458
 8005c20:	5802546c 	.word	0x5802546c
 8005c24:	58025480 	.word	0x58025480
 8005c28:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	60da      	str	r2, [r3, #12]
}
 8005c3c:	e04d      	b.n	8005cda <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a29      	ldr	r2, [pc, #164]	@ (8005ce8 <DMA_SetConfig+0x338>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d022      	beq.n	8005c8e <DMA_SetConfig+0x2de>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a27      	ldr	r2, [pc, #156]	@ (8005cec <DMA_SetConfig+0x33c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d01d      	beq.n	8005c8e <DMA_SetConfig+0x2de>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a26      	ldr	r2, [pc, #152]	@ (8005cf0 <DMA_SetConfig+0x340>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d018      	beq.n	8005c8e <DMA_SetConfig+0x2de>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a24      	ldr	r2, [pc, #144]	@ (8005cf4 <DMA_SetConfig+0x344>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <DMA_SetConfig+0x2de>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a23      	ldr	r2, [pc, #140]	@ (8005cf8 <DMA_SetConfig+0x348>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00e      	beq.n	8005c8e <DMA_SetConfig+0x2de>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a21      	ldr	r2, [pc, #132]	@ (8005cfc <DMA_SetConfig+0x34c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d009      	beq.n	8005c8e <DMA_SetConfig+0x2de>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a20      	ldr	r2, [pc, #128]	@ (8005d00 <DMA_SetConfig+0x350>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d004      	beq.n	8005c8e <DMA_SetConfig+0x2de>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1e      	ldr	r2, [pc, #120]	@ (8005d04 <DMA_SetConfig+0x354>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d101      	bne.n	8005c92 <DMA_SetConfig+0x2e2>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <DMA_SetConfig+0x2e4>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d020      	beq.n	8005cda <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b40      	cmp	r3, #64	@ 0x40
 8005cb6:	d108      	bne.n	8005cca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	60da      	str	r2, [r3, #12]
}
 8005cc8:	e007      	b.n	8005cda <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	60da      	str	r2, [r3, #12]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	58025408 	.word	0x58025408
 8005cec:	5802541c 	.word	0x5802541c
 8005cf0:	58025430 	.word	0x58025430
 8005cf4:	58025444 	.word	0x58025444
 8005cf8:	58025458 	.word	0x58025458
 8005cfc:	5802546c 	.word	0x5802546c
 8005d00:	58025480 	.word	0x58025480
 8005d04:	58025494 	.word	0x58025494

08005d08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a42      	ldr	r2, [pc, #264]	@ (8005e20 <DMA_CalcBaseAndBitshift+0x118>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04a      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a41      	ldr	r2, [pc, #260]	@ (8005e24 <DMA_CalcBaseAndBitshift+0x11c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d045      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a3f      	ldr	r2, [pc, #252]	@ (8005e28 <DMA_CalcBaseAndBitshift+0x120>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d040      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a3e      	ldr	r2, [pc, #248]	@ (8005e2c <DMA_CalcBaseAndBitshift+0x124>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d03b      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e30 <DMA_CalcBaseAndBitshift+0x128>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d036      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a3b      	ldr	r2, [pc, #236]	@ (8005e34 <DMA_CalcBaseAndBitshift+0x12c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d031      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a39      	ldr	r2, [pc, #228]	@ (8005e38 <DMA_CalcBaseAndBitshift+0x130>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d02c      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a38      	ldr	r2, [pc, #224]	@ (8005e3c <DMA_CalcBaseAndBitshift+0x134>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d027      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a36      	ldr	r2, [pc, #216]	@ (8005e40 <DMA_CalcBaseAndBitshift+0x138>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d022      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a35      	ldr	r2, [pc, #212]	@ (8005e44 <DMA_CalcBaseAndBitshift+0x13c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01d      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a33      	ldr	r2, [pc, #204]	@ (8005e48 <DMA_CalcBaseAndBitshift+0x140>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a32      	ldr	r2, [pc, #200]	@ (8005e4c <DMA_CalcBaseAndBitshift+0x144>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a30      	ldr	r2, [pc, #192]	@ (8005e50 <DMA_CalcBaseAndBitshift+0x148>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2f      	ldr	r2, [pc, #188]	@ (8005e54 <DMA_CalcBaseAndBitshift+0x14c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e58 <DMA_CalcBaseAndBitshift+0x150>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <DMA_CalcBaseAndBitshift+0xa8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2c      	ldr	r2, [pc, #176]	@ (8005e5c <DMA_CalcBaseAndBitshift+0x154>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d101      	bne.n	8005db4 <DMA_CalcBaseAndBitshift+0xac>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <DMA_CalcBaseAndBitshift+0xae>
 8005db4:	2300      	movs	r3, #0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d024      	beq.n	8005e04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	3b10      	subs	r3, #16
 8005dc2:	4a27      	ldr	r2, [pc, #156]	@ (8005e60 <DMA_CalcBaseAndBitshift+0x158>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	4a24      	ldr	r2, [pc, #144]	@ (8005e64 <DMA_CalcBaseAndBitshift+0x15c>)
 8005dd4:	5cd3      	ldrb	r3, [r2, r3]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d908      	bls.n	8005df4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e68 <DMA_CalcBaseAndBitshift+0x160>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	1d1a      	adds	r2, r3, #4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005df2:	e00d      	b.n	8005e10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8005e68 <DMA_CalcBaseAndBitshift+0x160>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e02:	e005      	b.n	8005e10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	40020010 	.word	0x40020010
 8005e24:	40020028 	.word	0x40020028
 8005e28:	40020040 	.word	0x40020040
 8005e2c:	40020058 	.word	0x40020058
 8005e30:	40020070 	.word	0x40020070
 8005e34:	40020088 	.word	0x40020088
 8005e38:	400200a0 	.word	0x400200a0
 8005e3c:	400200b8 	.word	0x400200b8
 8005e40:	40020410 	.word	0x40020410
 8005e44:	40020428 	.word	0x40020428
 8005e48:	40020440 	.word	0x40020440
 8005e4c:	40020458 	.word	0x40020458
 8005e50:	40020470 	.word	0x40020470
 8005e54:	40020488 	.word	0x40020488
 8005e58:	400204a0 	.word	0x400204a0
 8005e5c:	400204b8 	.word	0x400204b8
 8005e60:	aaaaaaab 	.word	0xaaaaaaab
 8005e64:	080135e8 	.word	0x080135e8
 8005e68:	fffffc00 	.word	0xfffffc00

08005e6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d120      	bne.n	8005ec2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d858      	bhi.n	8005f3a <DMA_CheckFifoParam+0xce>
 8005e88:	a201      	add	r2, pc, #4	@ (adr r2, 8005e90 <DMA_CheckFifoParam+0x24>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005ea1 	.word	0x08005ea1
 8005e94:	08005eb3 	.word	0x08005eb3
 8005e98:	08005ea1 	.word	0x08005ea1
 8005e9c:	08005f3b 	.word	0x08005f3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d048      	beq.n	8005f3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005eb0:	e045      	b.n	8005f3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005eba:	d142      	bne.n	8005f42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ec0:	e03f      	b.n	8005f42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eca:	d123      	bne.n	8005f14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d838      	bhi.n	8005f46 <DMA_CheckFifoParam+0xda>
 8005ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <DMA_CheckFifoParam+0x70>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005ef3 	.word	0x08005ef3
 8005ee4:	08005eed 	.word	0x08005eed
 8005ee8:	08005f05 	.word	0x08005f05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	73fb      	strb	r3, [r7, #15]
        break;
 8005ef0:	e030      	b.n	8005f54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d025      	beq.n	8005f4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f02:	e022      	b.n	8005f4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f0c:	d11f      	bne.n	8005f4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f12:	e01c      	b.n	8005f4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d902      	bls.n	8005f22 <DMA_CheckFifoParam+0xb6>
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d003      	beq.n	8005f28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005f20:	e018      	b.n	8005f54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	73fb      	strb	r3, [r7, #15]
        break;
 8005f26:	e015      	b.n	8005f54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	73fb      	strb	r3, [r7, #15]
    break;
 8005f38:	e00b      	b.n	8005f52 <DMA_CheckFifoParam+0xe6>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e00a      	b.n	8005f54 <DMA_CheckFifoParam+0xe8>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e008      	b.n	8005f54 <DMA_CheckFifoParam+0xe8>
        break;
 8005f42:	bf00      	nop
 8005f44:	e006      	b.n	8005f54 <DMA_CheckFifoParam+0xe8>
        break;
 8005f46:	bf00      	nop
 8005f48:	e004      	b.n	8005f54 <DMA_CheckFifoParam+0xe8>
        break;
 8005f4a:	bf00      	nop
 8005f4c:	e002      	b.n	8005f54 <DMA_CheckFifoParam+0xe8>
        break;
 8005f4e:	bf00      	nop
 8005f50:	e000      	b.n	8005f54 <DMA_CheckFifoParam+0xe8>
    break;
 8005f52:	bf00      	nop
    }
  }

  return status;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop

08005f64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a38      	ldr	r2, [pc, #224]	@ (8006058 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d022      	beq.n	8005fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a36      	ldr	r2, [pc, #216]	@ (800605c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d01d      	beq.n	8005fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a35      	ldr	r2, [pc, #212]	@ (8006060 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d018      	beq.n	8005fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a33      	ldr	r2, [pc, #204]	@ (8006064 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a32      	ldr	r2, [pc, #200]	@ (8006068 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00e      	beq.n	8005fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a30      	ldr	r2, [pc, #192]	@ (800606c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d009      	beq.n	8005fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8006070 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d004      	beq.n	8005fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8006074 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d101      	bne.n	8005fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01a      	beq.n	8006002 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	3b08      	subs	r3, #8
 8005fd4:	4a28      	ldr	r2, [pc, #160]	@ (8006078 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	091b      	lsrs	r3, r3, #4
 8005fdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4b26      	ldr	r3, [pc, #152]	@ (800607c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a24      	ldr	r2, [pc, #144]	@ (8006080 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ff0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	409a      	lsls	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006000:	e024      	b.n	800604c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	3b10      	subs	r3, #16
 800600a:	4a1e      	ldr	r2, [pc, #120]	@ (8006084 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a1c      	ldr	r2, [pc, #112]	@ (8006088 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d806      	bhi.n	800602a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a1b      	ldr	r2, [pc, #108]	@ (800608c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d902      	bls.n	800602a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3308      	adds	r3, #8
 8006028:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4b18      	ldr	r3, [pc, #96]	@ (8006090 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	461a      	mov	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a16      	ldr	r2, [pc, #88]	@ (8006094 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800603c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 031f 	and.w	r3, r3, #31
 8006044:	2201      	movs	r2, #1
 8006046:	409a      	lsls	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	58025408 	.word	0x58025408
 800605c:	5802541c 	.word	0x5802541c
 8006060:	58025430 	.word	0x58025430
 8006064:	58025444 	.word	0x58025444
 8006068:	58025458 	.word	0x58025458
 800606c:	5802546c 	.word	0x5802546c
 8006070:	58025480 	.word	0x58025480
 8006074:	58025494 	.word	0x58025494
 8006078:	cccccccd 	.word	0xcccccccd
 800607c:	16009600 	.word	0x16009600
 8006080:	58025880 	.word	0x58025880
 8006084:	aaaaaaab 	.word	0xaaaaaaab
 8006088:	400204b8 	.word	0x400204b8
 800608c:	4002040f 	.word	0x4002040f
 8006090:	10008200 	.word	0x10008200
 8006094:	40020880 	.word	0x40020880

08006098 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d04a      	beq.n	8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d847      	bhi.n	8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a25      	ldr	r2, [pc, #148]	@ (8006150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d022      	beq.n	8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a24      	ldr	r2, [pc, #144]	@ (8006154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d01d      	beq.n	8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a22      	ldr	r2, [pc, #136]	@ (8006158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a21      	ldr	r2, [pc, #132]	@ (800615c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1b      	ldr	r2, [pc, #108]	@ (800616c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d101      	bne.n	8006108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006108:	2300      	movs	r3, #0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4b17      	ldr	r3, [pc, #92]	@ (8006170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	461a      	mov	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a15      	ldr	r2, [pc, #84]	@ (8006174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006120:	671a      	str	r2, [r3, #112]	@ 0x70
 8006122:	e009      	b.n	8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4b14      	ldr	r3, [pc, #80]	@ (8006178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a11      	ldr	r2, [pc, #68]	@ (800617c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006136:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3b01      	subs	r3, #1
 800613c:	2201      	movs	r2, #1
 800613e:	409a      	lsls	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	58025408 	.word	0x58025408
 8006154:	5802541c 	.word	0x5802541c
 8006158:	58025430 	.word	0x58025430
 800615c:	58025444 	.word	0x58025444
 8006160:	58025458 	.word	0x58025458
 8006164:	5802546c 	.word	0x5802546c
 8006168:	58025480 	.word	0x58025480
 800616c:	58025494 	.word	0x58025494
 8006170:	1600963f 	.word	0x1600963f
 8006174:	58025940 	.word	0x58025940
 8006178:	1000823f 	.word	0x1000823f
 800617c:	40020940 	.word	0x40020940

08006180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006180:	b480      	push	{r7}
 8006182:	b089      	sub	sp, #36	@ 0x24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800618e:	4b89      	ldr	r3, [pc, #548]	@ (80063b4 <HAL_GPIO_Init+0x234>)
 8006190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006192:	e194      	b.n	80064be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	2101      	movs	r1, #1
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	4013      	ands	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8186 	beq.w	80064b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d005      	beq.n	80061c4 <HAL_GPIO_Init+0x44>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d130      	bne.n	8006226 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	2203      	movs	r2, #3
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4013      	ands	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061fa:	2201      	movs	r2, #1
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	091b      	lsrs	r3, r3, #4
 8006210:	f003 0201 	and.w	r2, r3, #1
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	4313      	orrs	r3, r2
 800621e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b03      	cmp	r3, #3
 8006230:	d017      	beq.n	8006262 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	2203      	movs	r2, #3
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4013      	ands	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	4313      	orrs	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d123      	bne.n	80062b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	08da      	lsrs	r2, r3, #3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3208      	adds	r2, #8
 8006276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	220f      	movs	r2, #15
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43db      	mvns	r3, r3
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4013      	ands	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	08da      	lsrs	r2, r3, #3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3208      	adds	r2, #8
 80062b0:	69b9      	ldr	r1, [r7, #24]
 80062b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	2203      	movs	r2, #3
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43db      	mvns	r3, r3
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	4013      	ands	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f003 0203 	and.w	r2, r3, #3
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80e0 	beq.w	80064b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062f8:	4b2f      	ldr	r3, [pc, #188]	@ (80063b8 <HAL_GPIO_Init+0x238>)
 80062fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062fe:	4a2e      	ldr	r2, [pc, #184]	@ (80063b8 <HAL_GPIO_Init+0x238>)
 8006300:	f043 0302 	orr.w	r3, r3, #2
 8006304:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006308:	4b2b      	ldr	r3, [pc, #172]	@ (80063b8 <HAL_GPIO_Init+0x238>)
 800630a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006316:	4a29      	ldr	r2, [pc, #164]	@ (80063bc <HAL_GPIO_Init+0x23c>)
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	089b      	lsrs	r3, r3, #2
 800631c:	3302      	adds	r3, #2
 800631e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	220f      	movs	r2, #15
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	43db      	mvns	r3, r3
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	4013      	ands	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a20      	ldr	r2, [pc, #128]	@ (80063c0 <HAL_GPIO_Init+0x240>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d052      	beq.n	80063e8 <HAL_GPIO_Init+0x268>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1f      	ldr	r2, [pc, #124]	@ (80063c4 <HAL_GPIO_Init+0x244>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d031      	beq.n	80063ae <HAL_GPIO_Init+0x22e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a1e      	ldr	r2, [pc, #120]	@ (80063c8 <HAL_GPIO_Init+0x248>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d02b      	beq.n	80063aa <HAL_GPIO_Init+0x22a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1d      	ldr	r2, [pc, #116]	@ (80063cc <HAL_GPIO_Init+0x24c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d025      	beq.n	80063a6 <HAL_GPIO_Init+0x226>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a1c      	ldr	r2, [pc, #112]	@ (80063d0 <HAL_GPIO_Init+0x250>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01f      	beq.n	80063a2 <HAL_GPIO_Init+0x222>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a1b      	ldr	r2, [pc, #108]	@ (80063d4 <HAL_GPIO_Init+0x254>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d019      	beq.n	800639e <HAL_GPIO_Init+0x21e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a1a      	ldr	r2, [pc, #104]	@ (80063d8 <HAL_GPIO_Init+0x258>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_GPIO_Init+0x21a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a19      	ldr	r2, [pc, #100]	@ (80063dc <HAL_GPIO_Init+0x25c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00d      	beq.n	8006396 <HAL_GPIO_Init+0x216>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a18      	ldr	r2, [pc, #96]	@ (80063e0 <HAL_GPIO_Init+0x260>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <HAL_GPIO_Init+0x212>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a17      	ldr	r2, [pc, #92]	@ (80063e4 <HAL_GPIO_Init+0x264>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d101      	bne.n	800638e <HAL_GPIO_Init+0x20e>
 800638a:	2309      	movs	r3, #9
 800638c:	e02d      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 800638e:	230a      	movs	r3, #10
 8006390:	e02b      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 8006392:	2308      	movs	r3, #8
 8006394:	e029      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 8006396:	2307      	movs	r3, #7
 8006398:	e027      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 800639a:	2306      	movs	r3, #6
 800639c:	e025      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 800639e:	2305      	movs	r3, #5
 80063a0:	e023      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 80063a2:	2304      	movs	r3, #4
 80063a4:	e021      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 80063a6:	2303      	movs	r3, #3
 80063a8:	e01f      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e01d      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e01b      	b.n	80063ea <HAL_GPIO_Init+0x26a>
 80063b2:	bf00      	nop
 80063b4:	58000080 	.word	0x58000080
 80063b8:	58024400 	.word	0x58024400
 80063bc:	58000400 	.word	0x58000400
 80063c0:	58020000 	.word	0x58020000
 80063c4:	58020400 	.word	0x58020400
 80063c8:	58020800 	.word	0x58020800
 80063cc:	58020c00 	.word	0x58020c00
 80063d0:	58021000 	.word	0x58021000
 80063d4:	58021400 	.word	0x58021400
 80063d8:	58021800 	.word	0x58021800
 80063dc:	58021c00 	.word	0x58021c00
 80063e0:	58022000 	.word	0x58022000
 80063e4:	58022400 	.word	0x58022400
 80063e8:	2300      	movs	r3, #0
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	f002 0203 	and.w	r2, r2, #3
 80063f0:	0092      	lsls	r2, r2, #2
 80063f2:	4093      	lsls	r3, r2
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063fa:	4938      	ldr	r1, [pc, #224]	@ (80064dc <HAL_GPIO_Init+0x35c>)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	089b      	lsrs	r3, r3, #2
 8006400:	3302      	adds	r3, #2
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	43db      	mvns	r3, r3
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	4013      	ands	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800642e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	43db      	mvns	r3, r3
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	4013      	ands	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800645c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	43db      	mvns	r3, r3
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	4013      	ands	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	43db      	mvns	r3, r3
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	4013      	ands	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	3301      	adds	r3, #1
 80064bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f47f ae63 	bne.w	8006194 <HAL_GPIO_Init+0x14>
  }
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	3724      	adds	r7, #36	@ 0x24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	58000400 	.word	0x58000400

080064e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	807b      	strh	r3, [r7, #2]
 80064ec:	4613      	mov	r3, r2
 80064ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064f0:	787b      	ldrb	r3, [r7, #1]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064f6:	887a      	ldrh	r2, [r7, #2]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80064fc:	e003      	b.n	8006506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064fe:	887b      	ldrh	r3, [r7, #2]
 8006500:	041a      	lsls	r2, r3, #16
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	619a      	str	r2, [r3, #24]
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	4603      	mov	r3, r0
 800651a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800651c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006520:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	4013      	ands	r3, r2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800652c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	4618      	mov	r0, r3
 800653a:	f7fa f9f5 	bl	8000928 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800653e:	bf00      	nop
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006550:	4b19      	ldr	r3, [pc, #100]	@ (80065b8 <HAL_PWREx_ConfigSupply+0x70>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b04      	cmp	r3, #4
 800655a:	d00a      	beq.n	8006572 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800655c:	4b16      	ldr	r3, [pc, #88]	@ (80065b8 <HAL_PWREx_ConfigSupply+0x70>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	429a      	cmp	r2, r3
 8006568:	d001      	beq.n	800656e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e01f      	b.n	80065ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	e01d      	b.n	80065ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006572:	4b11      	ldr	r3, [pc, #68]	@ (80065b8 <HAL_PWREx_ConfigSupply+0x70>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f023 0207 	bic.w	r2, r3, #7
 800657a:	490f      	ldr	r1, [pc, #60]	@ (80065b8 <HAL_PWREx_ConfigSupply+0x70>)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4313      	orrs	r3, r2
 8006580:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006582:	f7fb fbaf 	bl	8001ce4 <HAL_GetTick>
 8006586:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006588:	e009      	b.n	800659e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800658a:	f7fb fbab 	bl	8001ce4 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006598:	d901      	bls.n	800659e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e007      	b.n	80065ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800659e:	4b06      	ldr	r3, [pc, #24]	@ (80065b8 <HAL_PWREx_ConfigSupply+0x70>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065aa:	d1ee      	bne.n	800658a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	58024800 	.word	0x58024800

080065bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08c      	sub	sp, #48	@ 0x30
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f000 bc48 	b.w	8006e60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8088 	beq.w	80066ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065de:	4b99      	ldr	r3, [pc, #612]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065e8:	4b96      	ldr	r3, [pc, #600]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80065ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80065ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d007      	beq.n	8006604 <HAL_RCC_OscConfig+0x48>
 80065f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f6:	2b18      	cmp	r3, #24
 80065f8:	d111      	bne.n	800661e <HAL_RCC_OscConfig+0x62>
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d10c      	bne.n	800661e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006604:	4b8f      	ldr	r3, [pc, #572]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d06d      	beq.n	80066ec <HAL_RCC_OscConfig+0x130>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d169      	bne.n	80066ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f000 bc21 	b.w	8006e60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006626:	d106      	bne.n	8006636 <HAL_RCC_OscConfig+0x7a>
 8006628:	4b86      	ldr	r3, [pc, #536]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a85      	ldr	r2, [pc, #532]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800662e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e02e      	b.n	8006694 <HAL_RCC_OscConfig+0xd8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10c      	bne.n	8006658 <HAL_RCC_OscConfig+0x9c>
 800663e:	4b81      	ldr	r3, [pc, #516]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a80      	ldr	r2, [pc, #512]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	4b7e      	ldr	r3, [pc, #504]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a7d      	ldr	r2, [pc, #500]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006650:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e01d      	b.n	8006694 <HAL_RCC_OscConfig+0xd8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006660:	d10c      	bne.n	800667c <HAL_RCC_OscConfig+0xc0>
 8006662:	4b78      	ldr	r3, [pc, #480]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a77      	ldr	r2, [pc, #476]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4b75      	ldr	r3, [pc, #468]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a74      	ldr	r2, [pc, #464]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	e00b      	b.n	8006694 <HAL_RCC_OscConfig+0xd8>
 800667c:	4b71      	ldr	r3, [pc, #452]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a70      	ldr	r2, [pc, #448]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	4b6e      	ldr	r3, [pc, #440]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a6d      	ldr	r2, [pc, #436]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800668e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d013      	beq.n	80066c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669c:	f7fb fb22 	bl	8001ce4 <HAL_GetTick>
 80066a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066a4:	f7fb fb1e 	bl	8001ce4 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b64      	cmp	r3, #100	@ 0x64
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e3d4      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066b6:	4b63      	ldr	r3, [pc, #396]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f0      	beq.n	80066a4 <HAL_RCC_OscConfig+0xe8>
 80066c2:	e014      	b.n	80066ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c4:	f7fb fb0e 	bl	8001ce4 <HAL_GetTick>
 80066c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066cc:	f7fb fb0a 	bl	8001ce4 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b64      	cmp	r3, #100	@ 0x64
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e3c0      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066de:	4b59      	ldr	r3, [pc, #356]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x110>
 80066ea:	e000      	b.n	80066ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 80ca 	beq.w	8006890 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066fc:	4b51      	ldr	r3, [pc, #324]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006704:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006706:	4b4f      	ldr	r3, [pc, #316]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <HAL_RCC_OscConfig+0x166>
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	2b18      	cmp	r3, #24
 8006716:	d156      	bne.n	80067c6 <HAL_RCC_OscConfig+0x20a>
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d151      	bne.n	80067c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006722:	4b48      	ldr	r3, [pc, #288]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <HAL_RCC_OscConfig+0x17e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e392      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800673a:	4b42      	ldr	r3, [pc, #264]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f023 0219 	bic.w	r2, r3, #25
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	493f      	ldr	r1, [pc, #252]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006748:	4313      	orrs	r3, r2
 800674a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674c:	f7fb faca 	bl	8001ce4 <HAL_GetTick>
 8006750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006754:	f7fb fac6 	bl	8001ce4 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e37c      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006766:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0f0      	beq.n	8006754 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006772:	f7fb fae7 	bl	8001d44 <HAL_GetREVID>
 8006776:	4603      	mov	r3, r0
 8006778:	f241 0203 	movw	r2, #4099	@ 0x1003
 800677c:	4293      	cmp	r3, r2
 800677e:	d817      	bhi.n	80067b0 <HAL_RCC_OscConfig+0x1f4>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b40      	cmp	r3, #64	@ 0x40
 8006786:	d108      	bne.n	800679a <HAL_RCC_OscConfig+0x1de>
 8006788:	4b2e      	ldr	r3, [pc, #184]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006790:	4a2c      	ldr	r2, [pc, #176]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006796:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006798:	e07a      	b.n	8006890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800679a:	4b2a      	ldr	r3, [pc, #168]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	031b      	lsls	r3, r3, #12
 80067a8:	4926      	ldr	r1, [pc, #152]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067ae:	e06f      	b.n	8006890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b0:	4b24      	ldr	r3, [pc, #144]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	061b      	lsls	r3, r3, #24
 80067be:	4921      	ldr	r1, [pc, #132]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067c4:	e064      	b.n	8006890 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d047      	beq.n	800685e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f023 0219 	bic.w	r2, r3, #25
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	491a      	ldr	r1, [pc, #104]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e0:	f7fb fa80 	bl	8001ce4 <HAL_GetTick>
 80067e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067e8:	f7fb fa7c 	bl	8001ce4 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e332      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067fa:	4b12      	ldr	r3, [pc, #72]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0f0      	beq.n	80067e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006806:	f7fb fa9d 	bl	8001d44 <HAL_GetREVID>
 800680a:	4603      	mov	r3, r0
 800680c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006810:	4293      	cmp	r3, r2
 8006812:	d819      	bhi.n	8006848 <HAL_RCC_OscConfig+0x28c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b40      	cmp	r3, #64	@ 0x40
 800681a:	d108      	bne.n	800682e <HAL_RCC_OscConfig+0x272>
 800681c:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006824:	4a07      	ldr	r2, [pc, #28]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682a:	6053      	str	r3, [r2, #4]
 800682c:	e030      	b.n	8006890 <HAL_RCC_OscConfig+0x2d4>
 800682e:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	031b      	lsls	r3, r3, #12
 800683c:	4901      	ldr	r1, [pc, #4]	@ (8006844 <HAL_RCC_OscConfig+0x288>)
 800683e:	4313      	orrs	r3, r2
 8006840:	604b      	str	r3, [r1, #4]
 8006842:	e025      	b.n	8006890 <HAL_RCC_OscConfig+0x2d4>
 8006844:	58024400 	.word	0x58024400
 8006848:	4b9a      	ldr	r3, [pc, #616]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	061b      	lsls	r3, r3, #24
 8006856:	4997      	ldr	r1, [pc, #604]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006858:	4313      	orrs	r3, r2
 800685a:	604b      	str	r3, [r1, #4]
 800685c:	e018      	b.n	8006890 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800685e:	4b95      	ldr	r3, [pc, #596]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a94      	ldr	r2, [pc, #592]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686a:	f7fb fa3b 	bl	8001ce4 <HAL_GetTick>
 800686e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006872:	f7fb fa37 	bl	8001ce4 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e2ed      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006884:	4b8b      	ldr	r3, [pc, #556]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1f0      	bne.n	8006872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80a9 	beq.w	80069f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800689e:	4b85      	ldr	r3, [pc, #532]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068a8:	4b82      	ldr	r3, [pc, #520]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80068aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d007      	beq.n	80068c4 <HAL_RCC_OscConfig+0x308>
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b18      	cmp	r3, #24
 80068b8:	d13a      	bne.n	8006930 <HAL_RCC_OscConfig+0x374>
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f003 0303 	and.w	r3, r3, #3
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d135      	bne.n	8006930 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068c4:	4b7b      	ldr	r3, [pc, #492]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_RCC_OscConfig+0x320>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	2b80      	cmp	r3, #128	@ 0x80
 80068d6:	d001      	beq.n	80068dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e2c1      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068dc:	f7fb fa32 	bl	8001d44 <HAL_GetREVID>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d817      	bhi.n	800691a <HAL_RCC_OscConfig+0x35e>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d108      	bne.n	8006904 <HAL_RCC_OscConfig+0x348>
 80068f2:	4b70      	ldr	r3, [pc, #448]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80068fa:	4a6e      	ldr	r2, [pc, #440]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80068fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006900:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006902:	e075      	b.n	80069f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006904:	4b6b      	ldr	r3, [pc, #428]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	069b      	lsls	r3, r3, #26
 8006912:	4968      	ldr	r1, [pc, #416]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006914:	4313      	orrs	r3, r2
 8006916:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006918:	e06a      	b.n	80069f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800691a:	4b66      	ldr	r3, [pc, #408]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	061b      	lsls	r3, r3, #24
 8006928:	4962      	ldr	r1, [pc, #392]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 800692a:	4313      	orrs	r3, r2
 800692c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800692e:	e05f      	b.n	80069f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d042      	beq.n	80069be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006938:	4b5e      	ldr	r3, [pc, #376]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a5d      	ldr	r2, [pc, #372]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 800693e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fb f9ce 	bl	8001ce4 <HAL_GetTick>
 8006948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800694c:	f7fb f9ca 	bl	8001ce4 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e280      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800695e:	4b55      	ldr	r3, [pc, #340]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800696a:	f7fb f9eb 	bl	8001d44 <HAL_GetREVID>
 800696e:	4603      	mov	r3, r0
 8006970:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006974:	4293      	cmp	r3, r2
 8006976:	d817      	bhi.n	80069a8 <HAL_RCC_OscConfig+0x3ec>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	2b20      	cmp	r3, #32
 800697e:	d108      	bne.n	8006992 <HAL_RCC_OscConfig+0x3d6>
 8006980:	4b4c      	ldr	r3, [pc, #304]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006988:	4a4a      	ldr	r2, [pc, #296]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 800698a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800698e:	6053      	str	r3, [r2, #4]
 8006990:	e02e      	b.n	80069f0 <HAL_RCC_OscConfig+0x434>
 8006992:	4b48      	ldr	r3, [pc, #288]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	069b      	lsls	r3, r3, #26
 80069a0:	4944      	ldr	r1, [pc, #272]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	604b      	str	r3, [r1, #4]
 80069a6:	e023      	b.n	80069f0 <HAL_RCC_OscConfig+0x434>
 80069a8:	4b42      	ldr	r3, [pc, #264]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	061b      	lsls	r3, r3, #24
 80069b6:	493f      	ldr	r1, [pc, #252]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60cb      	str	r3, [r1, #12]
 80069bc:	e018      	b.n	80069f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80069be:	4b3d      	ldr	r3, [pc, #244]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a3c      	ldr	r2, [pc, #240]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80069c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ca:	f7fb f98b 	bl	8001ce4 <HAL_GetTick>
 80069ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069d0:	e008      	b.n	80069e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80069d2:	f7fb f987 	bl	8001ce4 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e23d      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069e4:	4b33      	ldr	r3, [pc, #204]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f0      	bne.n	80069d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d036      	beq.n	8006a6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d019      	beq.n	8006a38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a04:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a08:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a10:	f7fb f968 	bl	8001ce4 <HAL_GetTick>
 8006a14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a18:	f7fb f964 	bl	8001ce4 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e21a      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a2a:	4b22      	ldr	r3, [pc, #136]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0x45c>
 8006a36:	e018      	b.n	8006a6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a38:	4b1e      	ldr	r3, [pc, #120]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a44:	f7fb f94e 	bl	8001ce4 <HAL_GetTick>
 8006a48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a4c:	f7fb f94a 	bl	8001ce4 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e200      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a5e:	4b15      	ldr	r3, [pc, #84]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d039      	beq.n	8006aea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01c      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006a84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a8a:	f7fb f92b 	bl	8001ce4 <HAL_GetTick>
 8006a8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a92:	f7fb f927 	bl	8001ce4 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e1dd      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006aa4:	4b03      	ldr	r3, [pc, #12]	@ (8006ab4 <HAL_RCC_OscConfig+0x4f8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f0      	beq.n	8006a92 <HAL_RCC_OscConfig+0x4d6>
 8006ab0:	e01b      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
 8006ab2:	bf00      	nop
 8006ab4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ab8:	4b9b      	ldr	r3, [pc, #620]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a9a      	ldr	r2, [pc, #616]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006abe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ac2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ac4:	f7fb f90e 	bl	8001ce4 <HAL_GetTick>
 8006ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006acc:	f7fb f90a 	bl	8001ce4 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e1c0      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ade:	4b92      	ldr	r3, [pc, #584]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8081 	beq.w	8006bfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006af8:	4b8c      	ldr	r3, [pc, #560]	@ (8006d2c <HAL_RCC_OscConfig+0x770>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a8b      	ldr	r2, [pc, #556]	@ (8006d2c <HAL_RCC_OscConfig+0x770>)
 8006afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b04:	f7fb f8ee 	bl	8001ce4 <HAL_GetTick>
 8006b08:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0c:	f7fb f8ea 	bl	8001ce4 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b64      	cmp	r3, #100	@ 0x64
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e1a0      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b1e:	4b83      	ldr	r3, [pc, #524]	@ (8006d2c <HAL_RCC_OscConfig+0x770>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d106      	bne.n	8006b40 <HAL_RCC_OscConfig+0x584>
 8006b32:	4b7d      	ldr	r3, [pc, #500]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b36:	4a7c      	ldr	r2, [pc, #496]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b3e:	e02d      	b.n	8006b9c <HAL_RCC_OscConfig+0x5e0>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10c      	bne.n	8006b62 <HAL_RCC_OscConfig+0x5a6>
 8006b48:	4b77      	ldr	r3, [pc, #476]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4c:	4a76      	ldr	r2, [pc, #472]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b54:	4b74      	ldr	r3, [pc, #464]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b58:	4a73      	ldr	r2, [pc, #460]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b5a:	f023 0304 	bic.w	r3, r3, #4
 8006b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b60:	e01c      	b.n	8006b9c <HAL_RCC_OscConfig+0x5e0>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	d10c      	bne.n	8006b84 <HAL_RCC_OscConfig+0x5c8>
 8006b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b70:	f043 0304 	orr.w	r3, r3, #4
 8006b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b76:	4b6c      	ldr	r3, [pc, #432]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b82:	e00b      	b.n	8006b9c <HAL_RCC_OscConfig+0x5e0>
 8006b84:	4b68      	ldr	r3, [pc, #416]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b88:	4a67      	ldr	r2, [pc, #412]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b90:	4b65      	ldr	r3, [pc, #404]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b94:	4a64      	ldr	r2, [pc, #400]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006b96:	f023 0304 	bic.w	r3, r3, #4
 8006b9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d015      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba4:	f7fb f89e 	bl	8001ce4 <HAL_GetTick>
 8006ba8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006baa:	e00a      	b.n	8006bc2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bac:	f7fb f89a 	bl	8001ce4 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e14e      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bc2:	4b59      	ldr	r3, [pc, #356]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0ee      	beq.n	8006bac <HAL_RCC_OscConfig+0x5f0>
 8006bce:	e014      	b.n	8006bfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd0:	f7fb f888 	bl	8001ce4 <HAL_GetTick>
 8006bd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bd6:	e00a      	b.n	8006bee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd8:	f7fb f884 	bl	8001ce4 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e138      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bee:	4b4e      	ldr	r3, [pc, #312]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1ee      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 812d 	beq.w	8006e5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006c04:	4b48      	ldr	r3, [pc, #288]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c0c:	2b18      	cmp	r3, #24
 8006c0e:	f000 80bd 	beq.w	8006d8c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	f040 809e 	bne.w	8006d58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1c:	4b42      	ldr	r3, [pc, #264]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a41      	ldr	r2, [pc, #260]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c28:	f7fb f85c 	bl	8001ce4 <HAL_GetTick>
 8006c2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c30:	f7fb f858 	bl	8001ce4 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e10e      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c42:	4b39      	ldr	r3, [pc, #228]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c4e:	4b36      	ldr	r3, [pc, #216]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006c50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c52:	4b37      	ldr	r3, [pc, #220]	@ (8006d30 <HAL_RCC_OscConfig+0x774>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c5e:	0112      	lsls	r2, r2, #4
 8006c60:	430a      	orrs	r2, r1
 8006c62:	4931      	ldr	r1, [pc, #196]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c76:	3b01      	subs	r3, #1
 8006c78:	025b      	lsls	r3, r3, #9
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	3b01      	subs	r3, #1
 8006c84:	041b      	lsls	r3, r3, #16
 8006c86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c90:	3b01      	subs	r3, #1
 8006c92:	061b      	lsls	r3, r3, #24
 8006c94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c98:	4923      	ldr	r1, [pc, #140]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006c9e:	4b22      	ldr	r3, [pc, #136]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca2:	4a21      	ldr	r2, [pc, #132]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006ca4:	f023 0301 	bic.w	r3, r3, #1
 8006ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006caa:	4b1f      	ldr	r3, [pc, #124]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cae:	4b21      	ldr	r3, [pc, #132]	@ (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006cb6:	00d2      	lsls	r2, r2, #3
 8006cb8:	491b      	ldr	r1, [pc, #108]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	f023 020c 	bic.w	r2, r3, #12
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cca:	4917      	ldr	r1, [pc, #92]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006cd0:	4b15      	ldr	r3, [pc, #84]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd4:	f023 0202 	bic.w	r2, r3, #2
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cdc:	4912      	ldr	r1, [pc, #72]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ce2:	4b11      	ldr	r3, [pc, #68]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce6:	4a10      	ldr	r2, [pc, #64]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cee:	4b0e      	ldr	r3, [pc, #56]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006d06:	4b08      	ldr	r3, [pc, #32]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	4a07      	ldr	r2, [pc, #28]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d12:	4b05      	ldr	r3, [pc, #20]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a04      	ldr	r2, [pc, #16]	@ (8006d28 <HAL_RCC_OscConfig+0x76c>)
 8006d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1e:	f7fa ffe1 	bl	8001ce4 <HAL_GetTick>
 8006d22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d24:	e011      	b.n	8006d4a <HAL_RCC_OscConfig+0x78e>
 8006d26:	bf00      	nop
 8006d28:	58024400 	.word	0x58024400
 8006d2c:	58024800 	.word	0x58024800
 8006d30:	fffffc0c 	.word	0xfffffc0c
 8006d34:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d38:	f7fa ffd4 	bl	8001ce4 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e08a      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d4a:	4b47      	ldr	r3, [pc, #284]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x77c>
 8006d56:	e082      	b.n	8006e5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d58:	4b43      	ldr	r3, [pc, #268]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a42      	ldr	r2, [pc, #264]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006d5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d64:	f7fa ffbe 	bl	8001ce4 <HAL_GetTick>
 8006d68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d6c:	f7fa ffba 	bl	8001ce4 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e070      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f0      	bne.n	8006d6c <HAL_RCC_OscConfig+0x7b0>
 8006d8a:	e068      	b.n	8006e5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d8c:	4b36      	ldr	r3, [pc, #216]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d92:	4b35      	ldr	r3, [pc, #212]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d031      	beq.n	8006e04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f003 0203 	and.w	r2, r3, #3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d12a      	bne.n	8006e04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d122      	bne.n	8006e04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d11a      	bne.n	8006e04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	0a5b      	lsrs	r3, r3, #9
 8006dd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d111      	bne.n	8006e04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	0c1b      	lsrs	r3, r3, #16
 8006de4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d108      	bne.n	8006e04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	0e1b      	lsrs	r3, r3, #24
 8006df6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d001      	beq.n	8006e08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e02b      	b.n	8006e60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006e08:	4b17      	ldr	r3, [pc, #92]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0c:	08db      	lsrs	r3, r3, #3
 8006e0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d01f      	beq.n	8006e5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006e1e:	4b12      	ldr	r3, [pc, #72]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	4a11      	ldr	r2, [pc, #68]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e2a:	f7fa ff5b 	bl	8001ce4 <HAL_GetTick>
 8006e2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006e30:	bf00      	nop
 8006e32:	f7fa ff57 	bl	8001ce4 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d0f9      	beq.n	8006e32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e42:	4b0a      	ldr	r3, [pc, #40]	@ (8006e6c <HAL_RCC_OscConfig+0x8b0>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006e4a:	00d2      	lsls	r2, r2, #3
 8006e4c:	4906      	ldr	r1, [pc, #24]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006e52:	4b05      	ldr	r3, [pc, #20]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e56:	4a04      	ldr	r2, [pc, #16]	@ (8006e68 <HAL_RCC_OscConfig+0x8ac>)
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3730      	adds	r7, #48	@ 0x30
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	58024400 	.word	0x58024400
 8006e6c:	ffff0007 	.word	0xffff0007

08006e70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e19c      	b.n	80071be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e84:	4b8a      	ldr	r3, [pc, #552]	@ (80070b0 <HAL_RCC_ClockConfig+0x240>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d910      	bls.n	8006eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e92:	4b87      	ldr	r3, [pc, #540]	@ (80070b0 <HAL_RCC_ClockConfig+0x240>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f023 020f 	bic.w	r2, r3, #15
 8006e9a:	4985      	ldr	r1, [pc, #532]	@ (80070b0 <HAL_RCC_ClockConfig+0x240>)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea2:	4b83      	ldr	r3, [pc, #524]	@ (80070b0 <HAL_RCC_ClockConfig+0x240>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d001      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e184      	b.n	80071be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d010      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	4b7b      	ldr	r3, [pc, #492]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d908      	bls.n	8006ee2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ed0:	4b78      	ldr	r3, [pc, #480]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	4975      	ldr	r1, [pc, #468]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d010      	beq.n	8006f10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695a      	ldr	r2, [r3, #20]
 8006ef2:	4b70      	ldr	r3, [pc, #448]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d908      	bls.n	8006f10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006efe:	4b6d      	ldr	r3, [pc, #436]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	496a      	ldr	r1, [pc, #424]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d010      	beq.n	8006f3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699a      	ldr	r2, [r3, #24]
 8006f20:	4b64      	ldr	r3, [pc, #400]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d908      	bls.n	8006f3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f2c:	4b61      	ldr	r3, [pc, #388]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	495e      	ldr	r1, [pc, #376]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d010      	beq.n	8006f6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69da      	ldr	r2, [r3, #28]
 8006f4e:	4b59      	ldr	r3, [pc, #356]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d908      	bls.n	8006f6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f5a:	4b56      	ldr	r3, [pc, #344]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	4953      	ldr	r1, [pc, #332]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d010      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f003 030f 	and.w	r3, r3, #15
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d908      	bls.n	8006f9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f88:	4b4a      	ldr	r3, [pc, #296]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	f023 020f 	bic.w	r2, r3, #15
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4947      	ldr	r1, [pc, #284]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d055      	beq.n	8007052 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006fa6:	4b43      	ldr	r3, [pc, #268]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	4940      	ldr	r1, [pc, #256]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d107      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d121      	bne.n	8007010 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0f6      	b.n	80071be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d107      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fd8:	4b36      	ldr	r3, [pc, #216]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d115      	bne.n	8007010 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0ea      	b.n	80071be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d107      	bne.n	8007000 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ff0:	4b30      	ldr	r3, [pc, #192]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0de      	b.n	80071be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007000:	4b2c      	ldr	r3, [pc, #176]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e0d6      	b.n	80071be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007010:	4b28      	ldr	r3, [pc, #160]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f023 0207 	bic.w	r2, r3, #7
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4925      	ldr	r1, [pc, #148]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 800701e:	4313      	orrs	r3, r2
 8007020:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007022:	f7fa fe5f 	bl	8001ce4 <HAL_GetTick>
 8007026:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007028:	e00a      	b.n	8007040 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800702a:	f7fa fe5b 	bl	8001ce4 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007038:	4293      	cmp	r3, r2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e0be      	b.n	80071be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007040:	4b1c      	ldr	r3, [pc, #112]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	429a      	cmp	r2, r3
 8007050:	d1eb      	bne.n	800702a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d010      	beq.n	8007080 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	4b14      	ldr	r3, [pc, #80]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	429a      	cmp	r2, r3
 800706c:	d208      	bcs.n	8007080 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800706e:	4b11      	ldr	r3, [pc, #68]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f023 020f 	bic.w	r2, r3, #15
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	490e      	ldr	r1, [pc, #56]	@ (80070b4 <HAL_RCC_ClockConfig+0x244>)
 800707c:	4313      	orrs	r3, r2
 800707e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007080:	4b0b      	ldr	r3, [pc, #44]	@ (80070b0 <HAL_RCC_ClockConfig+0x240>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d214      	bcs.n	80070b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800708e:	4b08      	ldr	r3, [pc, #32]	@ (80070b0 <HAL_RCC_ClockConfig+0x240>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 020f 	bic.w	r2, r3, #15
 8007096:	4906      	ldr	r1, [pc, #24]	@ (80070b0 <HAL_RCC_ClockConfig+0x240>)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4313      	orrs	r3, r2
 800709c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800709e:	4b04      	ldr	r3, [pc, #16]	@ (80070b0 <HAL_RCC_ClockConfig+0x240>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d005      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e086      	b.n	80071be <HAL_RCC_ClockConfig+0x34e>
 80070b0:	52002000 	.word	0x52002000
 80070b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d010      	beq.n	80070e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	4b3f      	ldr	r3, [pc, #252]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d208      	bcs.n	80070e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070d4:	4b3c      	ldr	r3, [pc, #240]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	4939      	ldr	r1, [pc, #228]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d010      	beq.n	8007114 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695a      	ldr	r2, [r3, #20]
 80070f6:	4b34      	ldr	r3, [pc, #208]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070fe:	429a      	cmp	r2, r3
 8007100:	d208      	bcs.n	8007114 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007102:	4b31      	ldr	r3, [pc, #196]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	492e      	ldr	r1, [pc, #184]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 8007110:	4313      	orrs	r3, r2
 8007112:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0310 	and.w	r3, r3, #16
 800711c:	2b00      	cmp	r3, #0
 800711e:	d010      	beq.n	8007142 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	4b28      	ldr	r3, [pc, #160]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800712c:	429a      	cmp	r2, r3
 800712e:	d208      	bcs.n	8007142 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007130:	4b25      	ldr	r3, [pc, #148]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	4922      	ldr	r1, [pc, #136]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 800713e:	4313      	orrs	r3, r2
 8007140:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d010      	beq.n	8007170 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69da      	ldr	r2, [r3, #28]
 8007152:	4b1d      	ldr	r3, [pc, #116]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800715a:	429a      	cmp	r2, r3
 800715c:	d208      	bcs.n	8007170 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800715e:	4b1a      	ldr	r3, [pc, #104]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	4917      	ldr	r1, [pc, #92]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 800716c:	4313      	orrs	r3, r2
 800716e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007170:	f000 f834 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 8007174:	4602      	mov	r2, r0
 8007176:	4b14      	ldr	r3, [pc, #80]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	f003 030f 	and.w	r3, r3, #15
 8007180:	4912      	ldr	r1, [pc, #72]	@ (80071cc <HAL_RCC_ClockConfig+0x35c>)
 8007182:	5ccb      	ldrb	r3, [r1, r3]
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	fa22 f303 	lsr.w	r3, r2, r3
 800718c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800718e:	4b0e      	ldr	r3, [pc, #56]	@ (80071c8 <HAL_RCC_ClockConfig+0x358>)
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	4a0d      	ldr	r2, [pc, #52]	@ (80071cc <HAL_RCC_ClockConfig+0x35c>)
 8007198:	5cd3      	ldrb	r3, [r2, r3]
 800719a:	f003 031f 	and.w	r3, r3, #31
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	fa22 f303 	lsr.w	r3, r2, r3
 80071a4:	4a0a      	ldr	r2, [pc, #40]	@ (80071d0 <HAL_RCC_ClockConfig+0x360>)
 80071a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071a8:	4a0a      	ldr	r2, [pc, #40]	@ (80071d4 <HAL_RCC_ClockConfig+0x364>)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80071ae:	4b0a      	ldr	r3, [pc, #40]	@ (80071d8 <HAL_RCC_ClockConfig+0x368>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7f9 fe38 	bl	8000e28 <HAL_InitTick>
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
 80071cc:	080135d8 	.word	0x080135d8
 80071d0:	24000004 	.word	0x24000004
 80071d4:	24000000 	.word	0x24000000
 80071d8:	24000008 	.word	0x24000008

080071dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	b089      	sub	sp, #36	@ 0x24
 80071e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071e2:	4bb3      	ldr	r3, [pc, #716]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071ea:	2b18      	cmp	r3, #24
 80071ec:	f200 8155 	bhi.w	800749a <HAL_RCC_GetSysClockFreq+0x2be>
 80071f0:	a201      	add	r2, pc, #4	@ (adr r2, 80071f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80071f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f6:	bf00      	nop
 80071f8:	0800725d 	.word	0x0800725d
 80071fc:	0800749b 	.word	0x0800749b
 8007200:	0800749b 	.word	0x0800749b
 8007204:	0800749b 	.word	0x0800749b
 8007208:	0800749b 	.word	0x0800749b
 800720c:	0800749b 	.word	0x0800749b
 8007210:	0800749b 	.word	0x0800749b
 8007214:	0800749b 	.word	0x0800749b
 8007218:	08007283 	.word	0x08007283
 800721c:	0800749b 	.word	0x0800749b
 8007220:	0800749b 	.word	0x0800749b
 8007224:	0800749b 	.word	0x0800749b
 8007228:	0800749b 	.word	0x0800749b
 800722c:	0800749b 	.word	0x0800749b
 8007230:	0800749b 	.word	0x0800749b
 8007234:	0800749b 	.word	0x0800749b
 8007238:	08007289 	.word	0x08007289
 800723c:	0800749b 	.word	0x0800749b
 8007240:	0800749b 	.word	0x0800749b
 8007244:	0800749b 	.word	0x0800749b
 8007248:	0800749b 	.word	0x0800749b
 800724c:	0800749b 	.word	0x0800749b
 8007250:	0800749b 	.word	0x0800749b
 8007254:	0800749b 	.word	0x0800749b
 8007258:	0800728f 	.word	0x0800728f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800725c:	4b94      	ldr	r3, [pc, #592]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0320 	and.w	r3, r3, #32
 8007264:	2b00      	cmp	r3, #0
 8007266:	d009      	beq.n	800727c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007268:	4b91      	ldr	r3, [pc, #580]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	08db      	lsrs	r3, r3, #3
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	4a90      	ldr	r2, [pc, #576]	@ (80074b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007274:	fa22 f303 	lsr.w	r3, r2, r3
 8007278:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800727a:	e111      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800727c:	4b8d      	ldr	r3, [pc, #564]	@ (80074b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800727e:	61bb      	str	r3, [r7, #24]
      break;
 8007280:	e10e      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007282:	4b8d      	ldr	r3, [pc, #564]	@ (80074b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007284:	61bb      	str	r3, [r7, #24]
      break;
 8007286:	e10b      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007288:	4b8c      	ldr	r3, [pc, #560]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800728a:	61bb      	str	r3, [r7, #24]
      break;
 800728c:	e108      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800728e:	4b88      	ldr	r3, [pc, #544]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007298:	4b85      	ldr	r3, [pc, #532]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80072a4:	4b82      	ldr	r3, [pc, #520]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80072ae:	4b80      	ldr	r3, [pc, #512]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b2:	08db      	lsrs	r3, r3, #3
 80072b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80e1 	beq.w	8007494 <HAL_RCC_GetSysClockFreq+0x2b8>
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	f000 8083 	beq.w	80073e0 <HAL_RCC_GetSysClockFreq+0x204>
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	f200 80a1 	bhi.w	8007424 <HAL_RCC_GetSysClockFreq+0x248>
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_RCC_GetSysClockFreq+0x114>
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d056      	beq.n	800739c <HAL_RCC_GetSysClockFreq+0x1c0>
 80072ee:	e099      	b.n	8007424 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f0:	4b6f      	ldr	r3, [pc, #444]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02d      	beq.n	8007358 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072fc:	4b6c      	ldr	r3, [pc, #432]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	08db      	lsrs	r3, r3, #3
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	4a6b      	ldr	r2, [pc, #428]	@ (80074b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
 800730c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b62      	ldr	r3, [pc, #392]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007336:	ed97 6a02 	vldr	s12, [r7, #8]
 800733a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80074c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007356:	e087      	b.n	8007468 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80074c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736a:	4b51      	ldr	r3, [pc, #324]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800736c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737a:	ed97 6a02 	vldr	s12, [r7, #8]
 800737e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80074c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007396:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800739a:	e065      	b.n	8007468 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80074c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80073aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ae:	4b40      	ldr	r3, [pc, #256]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073be:	ed97 6a02 	vldr	s12, [r7, #8]
 80073c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80074c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073de:	e043      	b.n	8007468 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80074cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80073ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f2:	4b2f      	ldr	r3, [pc, #188]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007402:	ed97 6a02 	vldr	s12, [r7, #8]
 8007406:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80074c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800740a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007422:	e021      	b.n	8007468 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80074c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007436:	4b1e      	ldr	r3, [pc, #120]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007446:	ed97 6a02 	vldr	s12, [r7, #8]
 800744a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80074c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800744e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800745a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007466:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007468:	4b11      	ldr	r3, [pc, #68]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800746a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746c:	0a5b      	lsrs	r3, r3, #9
 800746e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007472:	3301      	adds	r3, #1
 8007474:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007480:	edd7 6a07 	vldr	s13, [r7, #28]
 8007484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748c:	ee17 3a90 	vmov	r3, s15
 8007490:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007492:	e005      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	61bb      	str	r3, [r7, #24]
      break;
 8007498:	e002      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800749a:	4b07      	ldr	r3, [pc, #28]	@ (80074b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800749c:	61bb      	str	r3, [r7, #24]
      break;
 800749e:	bf00      	nop
  }

  return sysclockfreq;
 80074a0:	69bb      	ldr	r3, [r7, #24]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3724      	adds	r7, #36	@ 0x24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	58024400 	.word	0x58024400
 80074b4:	03d09000 	.word	0x03d09000
 80074b8:	003d0900 	.word	0x003d0900
 80074bc:	007a1200 	.word	0x007a1200
 80074c0:	46000000 	.word	0x46000000
 80074c4:	4c742400 	.word	0x4c742400
 80074c8:	4a742400 	.word	0x4a742400
 80074cc:	4af42400 	.word	0x4af42400

080074d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074d6:	f7ff fe81 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 80074da:	4602      	mov	r2, r0
 80074dc:	4b10      	ldr	r3, [pc, #64]	@ (8007520 <HAL_RCC_GetHCLKFreq+0x50>)
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	0a1b      	lsrs	r3, r3, #8
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	490f      	ldr	r1, [pc, #60]	@ (8007524 <HAL_RCC_GetHCLKFreq+0x54>)
 80074e8:	5ccb      	ldrb	r3, [r1, r3]
 80074ea:	f003 031f 	and.w	r3, r3, #31
 80074ee:	fa22 f303 	lsr.w	r3, r2, r3
 80074f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007520 <HAL_RCC_GetHCLKFreq+0x50>)
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	4a09      	ldr	r2, [pc, #36]	@ (8007524 <HAL_RCC_GetHCLKFreq+0x54>)
 80074fe:	5cd3      	ldrb	r3, [r2, r3]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	fa22 f303 	lsr.w	r3, r2, r3
 800750a:	4a07      	ldr	r2, [pc, #28]	@ (8007528 <HAL_RCC_GetHCLKFreq+0x58>)
 800750c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800750e:	4a07      	ldr	r2, [pc, #28]	@ (800752c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007514:	4b04      	ldr	r3, [pc, #16]	@ (8007528 <HAL_RCC_GetHCLKFreq+0x58>)
 8007516:	681b      	ldr	r3, [r3, #0]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	58024400 	.word	0x58024400
 8007524:	080135d8 	.word	0x080135d8
 8007528:	24000004 	.word	0x24000004
 800752c:	24000000 	.word	0x24000000

08007530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007534:	f7ff ffcc 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 8007538:	4602      	mov	r2, r0
 800753a:	4b06      	ldr	r3, [pc, #24]	@ (8007554 <HAL_RCC_GetPCLK1Freq+0x24>)
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	091b      	lsrs	r3, r3, #4
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	4904      	ldr	r1, [pc, #16]	@ (8007558 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007546:	5ccb      	ldrb	r3, [r1, r3]
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007550:	4618      	mov	r0, r3
 8007552:	bd80      	pop	{r7, pc}
 8007554:	58024400 	.word	0x58024400
 8007558:	080135d8 	.word	0x080135d8

0800755c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007560:	f7ff ffb6 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 8007564:	4602      	mov	r2, r0
 8007566:	4b06      	ldr	r3, [pc, #24]	@ (8007580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	0a1b      	lsrs	r3, r3, #8
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	4904      	ldr	r1, [pc, #16]	@ (8007584 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007572:	5ccb      	ldrb	r3, [r1, r3]
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800757c:	4618      	mov	r0, r3
 800757e:	bd80      	pop	{r7, pc}
 8007580:	58024400 	.word	0x58024400
 8007584:	080135d8 	.word	0x080135d8

08007588 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	223f      	movs	r2, #63	@ 0x3f
 8007596:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007598:	4b1a      	ldr	r3, [pc, #104]	@ (8007604 <HAL_RCC_GetClockConfig+0x7c>)
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	f003 0207 	and.w	r2, r3, #7
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80075a4:	4b17      	ldr	r3, [pc, #92]	@ (8007604 <HAL_RCC_GetClockConfig+0x7c>)
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80075b0:	4b14      	ldr	r3, [pc, #80]	@ (8007604 <HAL_RCC_GetClockConfig+0x7c>)
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	f003 020f 	and.w	r2, r3, #15
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80075bc:	4b11      	ldr	r3, [pc, #68]	@ (8007604 <HAL_RCC_GetClockConfig+0x7c>)
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80075c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007604 <HAL_RCC_GetClockConfig+0x7c>)
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80075d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007604 <HAL_RCC_GetClockConfig+0x7c>)
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80075e0:	4b08      	ldr	r3, [pc, #32]	@ (8007604 <HAL_RCC_GetClockConfig+0x7c>)
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075ec:	4b06      	ldr	r3, [pc, #24]	@ (8007608 <HAL_RCC_GetClockConfig+0x80>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 020f 	and.w	r2, r3, #15
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	601a      	str	r2, [r3, #0]
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	58024400 	.word	0x58024400
 8007608:	52002000 	.word	0x52002000

0800760c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800760c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007610:	b0ca      	sub	sp, #296	@ 0x128
 8007612:	af00      	add	r7, sp, #0
 8007614:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007618:	2300      	movs	r3, #0
 800761a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800761e:	2300      	movs	r3, #0
 8007620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007630:	2500      	movs	r5, #0
 8007632:	ea54 0305 	orrs.w	r3, r4, r5
 8007636:	d049      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800763e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007642:	d02f      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007644:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007648:	d828      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800764a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800764e:	d01a      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007650:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007654:	d822      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800765a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800765e:	d007      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007660:	e01c      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007662:	4bb8      	ldr	r3, [pc, #736]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007666:	4ab7      	ldr	r2, [pc, #732]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800766c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800766e:	e01a      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	3308      	adds	r3, #8
 8007676:	2102      	movs	r1, #2
 8007678:	4618      	mov	r0, r3
 800767a:	f002 fb61 	bl	8009d40 <RCCEx_PLL2_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007684:	e00f      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768a:	3328      	adds	r3, #40	@ 0x28
 800768c:	2102      	movs	r1, #2
 800768e:	4618      	mov	r0, r3
 8007690:	f002 fc08 	bl	8009ea4 <RCCEx_PLL3_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800769a:	e004      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076a2:	e000      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80076a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10a      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80076ae:	4ba5      	ldr	r3, [pc, #660]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076bc:	4aa1      	ldr	r2, [pc, #644]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076be:	430b      	orrs	r3, r1
 80076c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80076c2:	e003      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	ea58 0309 	orrs.w	r3, r8, r9
 80076e0:	d047      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d82a      	bhi.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80076ec:	a201      	add	r2, pc, #4	@ (adr r2, 80076f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	08007709 	.word	0x08007709
 80076f8:	08007717 	.word	0x08007717
 80076fc:	0800772d 	.word	0x0800772d
 8007700:	0800774b 	.word	0x0800774b
 8007704:	0800774b 	.word	0x0800774b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007708:	4b8e      	ldr	r3, [pc, #568]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	4a8d      	ldr	r2, [pc, #564]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800770e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007714:	e01a      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	3308      	adds	r3, #8
 800771c:	2100      	movs	r1, #0
 800771e:	4618      	mov	r0, r3
 8007720:	f002 fb0e 	bl	8009d40 <RCCEx_PLL2_Config>
 8007724:	4603      	mov	r3, r0
 8007726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800772a:	e00f      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800772c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007730:	3328      	adds	r3, #40	@ 0x28
 8007732:	2100      	movs	r1, #0
 8007734:	4618      	mov	r0, r3
 8007736:	f002 fbb5 	bl	8009ea4 <RCCEx_PLL3_Config>
 800773a:	4603      	mov	r3, r0
 800773c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007740:	e004      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007748:	e000      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800774a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007754:	4b7b      	ldr	r3, [pc, #492]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007758:	f023 0107 	bic.w	r1, r3, #7
 800775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007762:	4a78      	ldr	r2, [pc, #480]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007764:	430b      	orrs	r3, r1
 8007766:	6513      	str	r3, [r2, #80]	@ 0x50
 8007768:	e003      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800777e:	f04f 0b00 	mov.w	fp, #0
 8007782:	ea5a 030b 	orrs.w	r3, sl, fp
 8007786:	d04c      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800778e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007792:	d030      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007798:	d829      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800779a:	2bc0      	cmp	r3, #192	@ 0xc0
 800779c:	d02d      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800779e:	2bc0      	cmp	r3, #192	@ 0xc0
 80077a0:	d825      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80077a2:	2b80      	cmp	r3, #128	@ 0x80
 80077a4:	d018      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80077a6:	2b80      	cmp	r3, #128	@ 0x80
 80077a8:	d821      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80077ae:	2b40      	cmp	r3, #64	@ 0x40
 80077b0:	d007      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80077b2:	e01c      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b4:	4b63      	ldr	r3, [pc, #396]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b8:	4a62      	ldr	r2, [pc, #392]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80077c0:	e01c      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c6:	3308      	adds	r3, #8
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f002 fab8 	bl	8009d40 <RCCEx_PLL2_Config>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80077d6:	e011      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077dc:	3328      	adds	r3, #40	@ 0x28
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f002 fb5f 	bl	8009ea4 <RCCEx_PLL3_Config>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80077ec:	e006      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077f4:	e002      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80077f6:	bf00      	nop
 80077f8:	e000      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80077fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007804:	4b4f      	ldr	r3, [pc, #316]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007808:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007812:	4a4c      	ldr	r2, [pc, #304]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007814:	430b      	orrs	r3, r1
 8007816:	6513      	str	r3, [r2, #80]	@ 0x50
 8007818:	e003      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800782e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007832:	2300      	movs	r3, #0
 8007834:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007838:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800783c:	460b      	mov	r3, r1
 800783e:	4313      	orrs	r3, r2
 8007840:	d053      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007846:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800784a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800784e:	d035      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007850:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007854:	d82e      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007856:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800785a:	d031      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800785c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007860:	d828      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007862:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007866:	d01a      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800786c:	d822      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007872:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007876:	d007      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007878:	e01c      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787a:	4b32      	ldr	r3, [pc, #200]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800787c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787e:	4a31      	ldr	r2, [pc, #196]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007884:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007886:	e01c      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788c:	3308      	adds	r3, #8
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f002 fa55 	bl	8009d40 <RCCEx_PLL2_Config>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800789c:	e011      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a2:	3328      	adds	r3, #40	@ 0x28
 80078a4:	2100      	movs	r1, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f002 fafc 	bl	8009ea4 <RCCEx_PLL3_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078b2:	e006      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ba:	e002      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80078bc:	bf00      	nop
 80078be:	e000      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80078c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80078ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80078da:	4a1a      	ldr	r2, [pc, #104]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078dc:	430b      	orrs	r3, r1
 80078de:	6593      	str	r3, [r2, #88]	@ 0x58
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80078f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007900:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007904:	460b      	mov	r3, r1
 8007906:	4313      	orrs	r3, r2
 8007908:	d056      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007912:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007916:	d038      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007918:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800791c:	d831      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800791e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007922:	d034      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007924:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007928:	d82b      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800792a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800792e:	d01d      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007934:	d825      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d006      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800793a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800793e:	d00a      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007940:	e01f      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007942:	bf00      	nop
 8007944:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007948:	4ba2      	ldr	r3, [pc, #648]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800794a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794c:	4aa1      	ldr	r2, [pc, #644]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800794e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007954:	e01c      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	3308      	adds	r3, #8
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f002 f9ee 	bl	8009d40 <RCCEx_PLL2_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800796a:	e011      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007970:	3328      	adds	r3, #40	@ 0x28
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f002 fa95 	bl	8009ea4 <RCCEx_PLL3_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007980:	e006      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007988:	e002      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800798a:	bf00      	nop
 800798c:	e000      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800798e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10b      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007998:	4b8e      	ldr	r3, [pc, #568]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800799a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80079a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079a8:	4a8a      	ldr	r2, [pc, #552]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079aa:	430b      	orrs	r3, r1
 80079ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80079ae:	e003      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80079c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80079c8:	2300      	movs	r3, #0
 80079ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80079ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80079d2:	460b      	mov	r3, r1
 80079d4:	4313      	orrs	r3, r2
 80079d6:	d03a      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079de:	2b30      	cmp	r3, #48	@ 0x30
 80079e0:	d01f      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80079e2:	2b30      	cmp	r3, #48	@ 0x30
 80079e4:	d819      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d00c      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d815      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d019      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80079f2:	2b10      	cmp	r3, #16
 80079f4:	d111      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f6:	4b77      	ldr	r3, [pc, #476]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fa:	4a76      	ldr	r2, [pc, #472]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007a02:	e011      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	3308      	adds	r3, #8
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f002 f997 	bl	8009d40 <RCCEx_PLL2_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007a18:	e006      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a20:	e002      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007a22:	bf00      	nop
 8007a24:	e000      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10a      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a30:	4b68      	ldr	r3, [pc, #416]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a34:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a3e:	4a65      	ldr	r2, [pc, #404]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a40:	430b      	orrs	r3, r1
 8007a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a44:	e003      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007a5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	d051      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a78:	d035      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007a7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a7e:	d82e      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007a80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a84:	d031      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007a86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a8a:	d828      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a90:	d01a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a96:	d822      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa0:	d007      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007aa2:	e01c      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ab0:	e01c      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	f002 f940 	bl	8009d40 <RCCEx_PLL2_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ac6:	e011      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007acc:	3328      	adds	r3, #40	@ 0x28
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f002 f9e7 	bl	8009ea4 <RCCEx_PLL3_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007adc:	e006      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ae4:	e002      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007af4:	4b37      	ldr	r3, [pc, #220]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b02:	4a34      	ldr	r2, [pc, #208]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b04:	430b      	orrs	r3, r1
 8007b06:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b08:	e003      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b22:	2300      	movs	r3, #0
 8007b24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	d056      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b3c:	d033      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007b3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b42:	d82c      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b48:	d02f      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007b4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b4e:	d826      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b54:	d02b      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007b56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b5a:	d820      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b60:	d012      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b66:	d81a      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d022      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b70:	d115      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	3308      	adds	r3, #8
 8007b78:	2101      	movs	r1, #1
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f002 f8e0 	bl	8009d40 <RCCEx_PLL2_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b86:	e015      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8c:	3328      	adds	r3, #40	@ 0x28
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f002 f987 	bl	8009ea4 <RCCEx_PLL3_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b9c:	e00a      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ba4:	e006      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ba6:	bf00      	nop
 8007ba8:	e004      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007baa:	bf00      	nop
 8007bac:	e002      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007bae:	bf00      	nop
 8007bb0:	e000      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10d      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007bbc:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bca:	4a02      	ldr	r2, [pc, #8]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bd0:	e006      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007bd2:	bf00      	nop
 8007bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bf6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	d055      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c0c:	d033      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c12:	d82c      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c18:	d02f      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1e:	d826      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c24:	d02b      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007c26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c2a:	d820      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c30:	d012      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c36:	d81a      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d022      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c40:	d115      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c46:	3308      	adds	r3, #8
 8007c48:	2101      	movs	r1, #1
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f002 f878 	bl	8009d40 <RCCEx_PLL2_Config>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c56:	e015      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5c:	3328      	adds	r3, #40	@ 0x28
 8007c5e:	2101      	movs	r1, #1
 8007c60:	4618      	mov	r0, r3
 8007c62:	f002 f91f 	bl	8009ea4 <RCCEx_PLL3_Config>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c6c:	e00a      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c74:	e006      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c76:	bf00      	nop
 8007c78:	e004      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c7a:	bf00      	nop
 8007c7c:	e002      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c7e:	bf00      	nop
 8007c80:	e000      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c8c:	4ba3      	ldr	r3, [pc, #652]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c90:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c9c:	4a9f      	ldr	r2, [pc, #636]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c9e:	430b      	orrs	r3, r1
 8007ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007cc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d037      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cdc:	d816      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d018      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007ce2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ce6:	d111      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cec:	4a8b      	ldr	r2, [pc, #556]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007cf4:	e00f      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f002 f81e 	bl	8009d40 <RCCEx_PLL2_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007d0a:	e004      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d12:	e000      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2c:	4a7b      	ldr	r2, [pc, #492]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d32:	e003      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007d48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	d039      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d81c      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007d66:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007da9 	.word	0x08007da9
 8007d70:	08007d7d 	.word	0x08007d7d
 8007d74:	08007d8b 	.word	0x08007d8b
 8007d78:	08007da9 	.word	0x08007da9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d7c:	4b67      	ldr	r3, [pc, #412]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d80:	4a66      	ldr	r2, [pc, #408]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d88:	e00f      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8e:	3308      	adds	r3, #8
 8007d90:	2102      	movs	r1, #2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 ffd4 	bl	8009d40 <RCCEx_PLL2_Config>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d9e:	e004      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007da6:	e000      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007db2:	4b5a      	ldr	r3, [pc, #360]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007db6:	f023 0103 	bic.w	r1, r3, #3
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dc0:	4a56      	ldr	r2, [pc, #344]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007dc6:	e003      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007de6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007dea:	460b      	mov	r3, r1
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f000 809f 	beq.w	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007df2:	4b4b      	ldr	r3, [pc, #300]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a4a      	ldr	r2, [pc, #296]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dfe:	f7f9 ff71 	bl	8001ce4 <HAL_GetTick>
 8007e02:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e06:	e00b      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e08:	f7f9 ff6c 	bl	8001ce4 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b64      	cmp	r3, #100	@ 0x64
 8007e16:	d903      	bls.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e1e:	e005      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e20:	4b3f      	ldr	r3, [pc, #252]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0ed      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d179      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e34:	4b39      	ldr	r3, [pc, #228]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e40:	4053      	eors	r3, r2
 8007e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d015      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e4a:	4b34      	ldr	r3, [pc, #208]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e56:	4b31      	ldr	r3, [pc, #196]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e5a:	4a30      	ldr	r2, [pc, #192]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e62:	4b2e      	ldr	r3, [pc, #184]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e66:	4a2d      	ldr	r2, [pc, #180]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007e74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e82:	d118      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e84:	f7f9 ff2e 	bl	8001ce4 <HAL_GetTick>
 8007e88:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e8c:	e00d      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e8e:	f7f9 ff29 	bl	8001ce4 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007e98:	1ad2      	subs	r2, r2, r3
 8007e9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d903      	bls.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007ea8:	e005      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0eb      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d129      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ece:	d10e      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007ed0:	4b12      	ldr	r3, [pc, #72]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ee0:	091a      	lsrs	r2, r3, #4
 8007ee2:	4b10      	ldr	r3, [pc, #64]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6113      	str	r3, [r2, #16]
 8007eec:	e005      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007eee:	4b0b      	ldr	r3, [pc, #44]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ef8:	6113      	str	r3, [r2, #16]
 8007efa:	4b08      	ldr	r3, [pc, #32]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007efc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f0a:	4a04      	ldr	r2, [pc, #16]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f10:	e00e      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007f1a:	e009      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007f1c:	58024400 	.word	0x58024400
 8007f20:	58024800 	.word	0x58024800
 8007f24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f002 0301 	and.w	r3, r2, #1
 8007f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f40:	2300      	movs	r3, #0
 8007f42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f000 8089 	beq.w	8008064 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f58:	2b28      	cmp	r3, #40	@ 0x28
 8007f5a:	d86b      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	0800803d 	.word	0x0800803d
 8007f68:	08008035 	.word	0x08008035
 8007f6c:	08008035 	.word	0x08008035
 8007f70:	08008035 	.word	0x08008035
 8007f74:	08008035 	.word	0x08008035
 8007f78:	08008035 	.word	0x08008035
 8007f7c:	08008035 	.word	0x08008035
 8007f80:	08008035 	.word	0x08008035
 8007f84:	08008009 	.word	0x08008009
 8007f88:	08008035 	.word	0x08008035
 8007f8c:	08008035 	.word	0x08008035
 8007f90:	08008035 	.word	0x08008035
 8007f94:	08008035 	.word	0x08008035
 8007f98:	08008035 	.word	0x08008035
 8007f9c:	08008035 	.word	0x08008035
 8007fa0:	08008035 	.word	0x08008035
 8007fa4:	0800801f 	.word	0x0800801f
 8007fa8:	08008035 	.word	0x08008035
 8007fac:	08008035 	.word	0x08008035
 8007fb0:	08008035 	.word	0x08008035
 8007fb4:	08008035 	.word	0x08008035
 8007fb8:	08008035 	.word	0x08008035
 8007fbc:	08008035 	.word	0x08008035
 8007fc0:	08008035 	.word	0x08008035
 8007fc4:	0800803d 	.word	0x0800803d
 8007fc8:	08008035 	.word	0x08008035
 8007fcc:	08008035 	.word	0x08008035
 8007fd0:	08008035 	.word	0x08008035
 8007fd4:	08008035 	.word	0x08008035
 8007fd8:	08008035 	.word	0x08008035
 8007fdc:	08008035 	.word	0x08008035
 8007fe0:	08008035 	.word	0x08008035
 8007fe4:	0800803d 	.word	0x0800803d
 8007fe8:	08008035 	.word	0x08008035
 8007fec:	08008035 	.word	0x08008035
 8007ff0:	08008035 	.word	0x08008035
 8007ff4:	08008035 	.word	0x08008035
 8007ff8:	08008035 	.word	0x08008035
 8007ffc:	08008035 	.word	0x08008035
 8008000:	08008035 	.word	0x08008035
 8008004:	0800803d 	.word	0x0800803d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800c:	3308      	adds	r3, #8
 800800e:	2101      	movs	r1, #1
 8008010:	4618      	mov	r0, r3
 8008012:	f001 fe95 	bl	8009d40 <RCCEx_PLL2_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800801c:	e00f      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008022:	3328      	adds	r3, #40	@ 0x28
 8008024:	2101      	movs	r1, #1
 8008026:	4618      	mov	r0, r3
 8008028:	f001 ff3c 	bl	8009ea4 <RCCEx_PLL3_Config>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008032:	e004      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800803c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008046:	4bbf      	ldr	r3, [pc, #764]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008054:	4abb      	ldr	r2, [pc, #748]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008056:	430b      	orrs	r3, r1
 8008058:	6553      	str	r3, [r2, #84]	@ 0x54
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f002 0302 	and.w	r3, r2, #2
 8008070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008074:	2300      	movs	r3, #0
 8008076:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800807a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800807e:	460b      	mov	r3, r1
 8008080:	4313      	orrs	r3, r2
 8008082:	d041      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800808a:	2b05      	cmp	r3, #5
 800808c:	d824      	bhi.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800808e:	a201      	add	r2, pc, #4	@ (adr r2, 8008094 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080e1 	.word	0x080080e1
 8008098:	080080ad 	.word	0x080080ad
 800809c:	080080c3 	.word	0x080080c3
 80080a0:	080080e1 	.word	0x080080e1
 80080a4:	080080e1 	.word	0x080080e1
 80080a8:	080080e1 	.word	0x080080e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b0:	3308      	adds	r3, #8
 80080b2:	2101      	movs	r1, #1
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 fe43 	bl	8009d40 <RCCEx_PLL2_Config>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80080c0:	e00f      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c6:	3328      	adds	r3, #40	@ 0x28
 80080c8:	2101      	movs	r1, #1
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 feea 	bl	8009ea4 <RCCEx_PLL3_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80080d6:	e004      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080de:	e000      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80080e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80080ea:	4b96      	ldr	r3, [pc, #600]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ee:	f023 0107 	bic.w	r1, r3, #7
 80080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080f8:	4a92      	ldr	r2, [pc, #584]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080fa:	430b      	orrs	r3, r1
 80080fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80080fe:	e003      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f002 0304 	and.w	r3, r2, #4
 8008114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008118:	2300      	movs	r3, #0
 800811a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800811e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008122:	460b      	mov	r3, r1
 8008124:	4313      	orrs	r3, r2
 8008126:	d044      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008130:	2b05      	cmp	r3, #5
 8008132:	d825      	bhi.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008134:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	08008189 	.word	0x08008189
 8008140:	08008155 	.word	0x08008155
 8008144:	0800816b 	.word	0x0800816b
 8008148:	08008189 	.word	0x08008189
 800814c:	08008189 	.word	0x08008189
 8008150:	08008189 	.word	0x08008189
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	3308      	adds	r3, #8
 800815a:	2101      	movs	r1, #1
 800815c:	4618      	mov	r0, r3
 800815e:	f001 fdef 	bl	8009d40 <RCCEx_PLL2_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008168:	e00f      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	3328      	adds	r3, #40	@ 0x28
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f001 fe96 	bl	8009ea4 <RCCEx_PLL3_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800817e:	e004      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008186:	e000      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10b      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008192:	4b6c      	ldr	r3, [pc, #432]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008196:	f023 0107 	bic.w	r1, r3, #7
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081a2:	4a68      	ldr	r2, [pc, #416]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081a4:	430b      	orrs	r3, r1
 80081a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80081a8:	e003      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f002 0320 	and.w	r3, r2, #32
 80081be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80081c2:	2300      	movs	r3, #0
 80081c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d055      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081de:	d033      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80081e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081e4:	d82c      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ea:	d02f      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f0:	d826      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081f6:	d02b      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80081f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081fc:	d820      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008202:	d012      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008208:	d81a      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d022      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800820e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008212:	d115      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	3308      	adds	r3, #8
 800821a:	2100      	movs	r1, #0
 800821c:	4618      	mov	r0, r3
 800821e:	f001 fd8f 	bl	8009d40 <RCCEx_PLL2_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008228:	e015      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800822a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822e:	3328      	adds	r3, #40	@ 0x28
 8008230:	2102      	movs	r1, #2
 8008232:	4618      	mov	r0, r3
 8008234:	f001 fe36 	bl	8009ea4 <RCCEx_PLL3_Config>
 8008238:	4603      	mov	r3, r0
 800823a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800823e:	e00a      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008246:	e006      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008248:	bf00      	nop
 800824a:	e004      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800824c:	bf00      	nop
 800824e:	e002      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008250:	bf00      	nop
 8008252:	e000      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800825e:	4b39      	ldr	r3, [pc, #228]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008262:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800826e:	4a35      	ldr	r2, [pc, #212]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008270:	430b      	orrs	r3, r1
 8008272:	6553      	str	r3, [r2, #84]	@ 0x54
 8008274:	e003      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800827a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800827e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800828a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800828e:	2300      	movs	r3, #0
 8008290:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008294:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008298:	460b      	mov	r3, r1
 800829a:	4313      	orrs	r3, r2
 800829c:	d058      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800829e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80082a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80082aa:	d033      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80082ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80082b0:	d82c      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b6:	d02f      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80082b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082bc:	d826      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082c2:	d02b      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80082c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082c8:	d820      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082ce:	d012      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80082d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082d4:	d81a      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d022      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80082da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082de:	d115      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e4:	3308      	adds	r3, #8
 80082e6:	2100      	movs	r1, #0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 fd29 	bl	8009d40 <RCCEx_PLL2_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80082f4:	e015      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fa:	3328      	adds	r3, #40	@ 0x28
 80082fc:	2102      	movs	r1, #2
 80082fe:	4618      	mov	r0, r3
 8008300:	f001 fdd0 	bl	8009ea4 <RCCEx_PLL3_Config>
 8008304:	4603      	mov	r3, r0
 8008306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800830a:	e00a      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008312:	e006      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008314:	bf00      	nop
 8008316:	e004      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008318:	bf00      	nop
 800831a:	e002      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800831c:	bf00      	nop
 800831e:	e000      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10e      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800832a:	4b06      	ldr	r3, [pc, #24]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800832c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800832e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008336:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800833a:	4a02      	ldr	r2, [pc, #8]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800833c:	430b      	orrs	r3, r1
 800833e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008340:	e006      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008342:	bf00      	nop
 8008344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800834c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800835c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008360:	2300      	movs	r3, #0
 8008362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008366:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800836a:	460b      	mov	r3, r1
 800836c:	4313      	orrs	r3, r2
 800836e:	d055      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008378:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800837c:	d033      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800837e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008382:	d82c      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008388:	d02f      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800838a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800838e:	d826      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008390:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008394:	d02b      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008396:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800839a:	d820      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800839c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083a0:	d012      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80083a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083a6:	d81a      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d022      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80083ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083b0:	d115      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b6:	3308      	adds	r3, #8
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 fcc0 	bl	8009d40 <RCCEx_PLL2_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80083c6:	e015      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083cc:	3328      	adds	r3, #40	@ 0x28
 80083ce:	2102      	movs	r1, #2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fd67 	bl	8009ea4 <RCCEx_PLL3_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80083dc:	e00a      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083e4:	e006      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083e6:	bf00      	nop
 80083e8:	e004      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083ea:	bf00      	nop
 80083ec:	e002      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083ee:	bf00      	nop
 80083f0:	e000      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10b      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80083fc:	4ba1      	ldr	r3, [pc, #644]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008400:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800840c:	4a9d      	ldr	r2, [pc, #628]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800840e:	430b      	orrs	r3, r1
 8008410:	6593      	str	r3, [r2, #88]	@ 0x58
 8008412:	e003      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f002 0308 	and.w	r3, r2, #8
 8008428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800842c:	2300      	movs	r3, #0
 800842e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008432:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008436:	460b      	mov	r3, r1
 8008438:	4313      	orrs	r3, r2
 800843a:	d01e      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008448:	d10c      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800844a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844e:	3328      	adds	r3, #40	@ 0x28
 8008450:	2102      	movs	r1, #2
 8008452:	4618      	mov	r0, r3
 8008454:	f001 fd26 	bl	8009ea4 <RCCEx_PLL3_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008464:	4b87      	ldr	r3, [pc, #540]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008468:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008474:	4a83      	ldr	r2, [pc, #524]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008476:	430b      	orrs	r3, r1
 8008478:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f002 0310 	and.w	r3, r2, #16
 8008486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800848a:	2300      	movs	r3, #0
 800848c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008490:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008494:	460b      	mov	r3, r1
 8008496:	4313      	orrs	r3, r2
 8008498:	d01e      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a6:	d10c      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80084a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ac:	3328      	adds	r3, #40	@ 0x28
 80084ae:	2102      	movs	r1, #2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 fcf7 	bl	8009ea4 <RCCEx_PLL3_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084c2:	4b70      	ldr	r3, [pc, #448]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084d2:	4a6c      	ldr	r2, [pc, #432]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084d4:	430b      	orrs	r3, r1
 80084d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80084e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084e8:	2300      	movs	r3, #0
 80084ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80084f2:	460b      	mov	r3, r1
 80084f4:	4313      	orrs	r3, r2
 80084f6:	d03e      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80084f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008504:	d022      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800850a:	d81b      	bhi.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008514:	d00b      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008516:	e015      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851c:	3308      	adds	r3, #8
 800851e:	2100      	movs	r1, #0
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fc0d 	bl	8009d40 <RCCEx_PLL2_Config>
 8008526:	4603      	mov	r3, r0
 8008528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800852c:	e00f      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800852e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008532:	3328      	adds	r3, #40	@ 0x28
 8008534:	2102      	movs	r1, #2
 8008536:	4618      	mov	r0, r3
 8008538:	f001 fcb4 	bl	8009ea4 <RCCEx_PLL3_Config>
 800853c:	4603      	mov	r3, r0
 800853e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008542:	e004      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800854a:	e000      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800854c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800854e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10b      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008556:	4b4b      	ldr	r3, [pc, #300]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800855a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008562:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008566:	4a47      	ldr	r2, [pc, #284]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008568:	430b      	orrs	r3, r1
 800856a:	6593      	str	r3, [r2, #88]	@ 0x58
 800856c:	e003      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008582:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008584:	2300      	movs	r3, #0
 8008586:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008588:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800858c:	460b      	mov	r3, r1
 800858e:	4313      	orrs	r3, r2
 8008590:	d03b      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800859a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800859e:	d01f      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80085a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085a4:	d818      	bhi.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80085a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085aa:	d003      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80085ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085b0:	d007      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80085b2:	e011      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b4:	4b33      	ldr	r3, [pc, #204]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	4a32      	ldr	r2, [pc, #200]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80085c0:	e00f      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c6:	3328      	adds	r3, #40	@ 0x28
 80085c8:	2101      	movs	r1, #1
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 fc6a 	bl	8009ea4 <RCCEx_PLL3_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80085d6:	e004      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085de:	e000      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80085e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085ea:	4b26      	ldr	r3, [pc, #152]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085fa:	4a22      	ldr	r2, [pc, #136]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085fc:	430b      	orrs	r3, r1
 80085fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008600:	e003      	b.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008616:	673b      	str	r3, [r7, #112]	@ 0x70
 8008618:	2300      	movs	r3, #0
 800861a:	677b      	str	r3, [r7, #116]	@ 0x74
 800861c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008620:	460b      	mov	r3, r1
 8008622:	4313      	orrs	r3, r2
 8008624:	d034      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008634:	d007      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008636:	e011      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008638:	4b12      	ldr	r3, [pc, #72]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800863a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863c:	4a11      	ldr	r2, [pc, #68]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800863e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008644:	e00e      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864a:	3308      	adds	r3, #8
 800864c:	2102      	movs	r1, #2
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fb76 	bl	8009d40 <RCCEx_PLL2_Config>
 8008654:	4603      	mov	r3, r0
 8008656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800865a:	e003      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10d      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800866c:	4b05      	ldr	r3, [pc, #20]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800866e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008670:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800867a:	4a02      	ldr	r2, [pc, #8]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800867c:	430b      	orrs	r3, r1
 800867e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008680:	e006      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008682:	bf00      	nop
 8008684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800868c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800869c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800869e:	2300      	movs	r3, #0
 80086a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80086a6:	460b      	mov	r3, r1
 80086a8:	4313      	orrs	r3, r2
 80086aa:	d00c      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b0:	3328      	adds	r3, #40	@ 0x28
 80086b2:	2102      	movs	r1, #2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 fbf5 	bl	8009ea4 <RCCEx_PLL3_Config>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80086d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80086d4:	2300      	movs	r3, #0
 80086d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80086d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80086dc:	460b      	mov	r3, r1
 80086de:	4313      	orrs	r3, r2
 80086e0:	d038      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086ee:	d018      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80086f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086f4:	d811      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80086f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086fa:	d014      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80086fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008700:	d80b      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d011      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800870a:	d106      	bne.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800870c:	4bc3      	ldr	r3, [pc, #780]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800870e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008710:	4ac2      	ldr	r2, [pc, #776]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008718:	e008      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008720:	e004      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008722:	bf00      	nop
 8008724:	e002      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008726:	bf00      	nop
 8008728:	e000      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800872a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800872c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10b      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008734:	4bb9      	ldr	r3, [pc, #740]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008738:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008744:	4ab5      	ldr	r2, [pc, #724]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008746:	430b      	orrs	r3, r1
 8008748:	6553      	str	r3, [r2, #84]	@ 0x54
 800874a:	e003      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008762:	2300      	movs	r3, #0
 8008764:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008766:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800876a:	460b      	mov	r3, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008770:	4baa      	ldr	r3, [pc, #680]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008774:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800877e:	4aa7      	ldr	r2, [pc, #668]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008780:	430b      	orrs	r3, r1
 8008782:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008790:	653b      	str	r3, [r7, #80]	@ 0x50
 8008792:	2300      	movs	r3, #0
 8008794:	657b      	str	r3, [r7, #84]	@ 0x54
 8008796:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800879a:	460b      	mov	r3, r1
 800879c:	4313      	orrs	r3, r2
 800879e:	d00a      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80087a0:	4b9e      	ldr	r3, [pc, #632]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80087a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80087b0:	4a9a      	ldr	r2, [pc, #616]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087b2:	430b      	orrs	r3, r1
 80087b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80087c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087c4:	2300      	movs	r3, #0
 80087c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80087cc:	460b      	mov	r3, r1
 80087ce:	4313      	orrs	r3, r2
 80087d0:	d009      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087d2:	4b92      	ldr	r3, [pc, #584]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80087da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087e0:	4a8e      	ldr	r2, [pc, #568]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087e2:	430b      	orrs	r3, r1
 80087e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80087f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80087f4:	2300      	movs	r3, #0
 80087f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80087f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80087fc:	460b      	mov	r3, r1
 80087fe:	4313      	orrs	r3, r2
 8008800:	d00e      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008802:	4b86      	ldr	r3, [pc, #536]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	4a85      	ldr	r2, [pc, #532]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008808:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800880c:	6113      	str	r3, [r2, #16]
 800880e:	4b83      	ldr	r3, [pc, #524]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008810:	6919      	ldr	r1, [r3, #16]
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800881a:	4a80      	ldr	r2, [pc, #512]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800881c:	430b      	orrs	r3, r1
 800881e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800882c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800882e:	2300      	movs	r3, #0
 8008830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008832:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008836:	460b      	mov	r3, r1
 8008838:	4313      	orrs	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800883c:	4b77      	ldr	r3, [pc, #476]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800883e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008840:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800884a:	4a74      	ldr	r2, [pc, #464]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800884c:	430b      	orrs	r3, r1
 800884e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800885c:	633b      	str	r3, [r7, #48]	@ 0x30
 800885e:	2300      	movs	r3, #0
 8008860:	637b      	str	r3, [r7, #52]	@ 0x34
 8008862:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008866:	460b      	mov	r3, r1
 8008868:	4313      	orrs	r3, r2
 800886a:	d00a      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800886c:	4b6b      	ldr	r3, [pc, #428]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800886e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008870:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800887c:	4a67      	ldr	r2, [pc, #412]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800887e:	430b      	orrs	r3, r1
 8008880:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	2100      	movs	r1, #0
 800888c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008894:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008898:	460b      	mov	r3, r1
 800889a:	4313      	orrs	r3, r2
 800889c:	d011      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a2:	3308      	adds	r3, #8
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 fa4a 	bl	8009d40 <RCCEx_PLL2_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	2100      	movs	r1, #0
 80088cc:	6239      	str	r1, [r7, #32]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80088d8:	460b      	mov	r3, r1
 80088da:	4313      	orrs	r3, r2
 80088dc:	d011      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e2:	3308      	adds	r3, #8
 80088e4:	2101      	movs	r1, #1
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 fa2a 	bl	8009d40 <RCCEx_PLL2_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	2100      	movs	r1, #0
 800890c:	61b9      	str	r1, [r7, #24]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	61fb      	str	r3, [r7, #28]
 8008914:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008918:	460b      	mov	r3, r1
 800891a:	4313      	orrs	r3, r2
 800891c:	d011      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008922:	3308      	adds	r3, #8
 8008924:	2102      	movs	r1, #2
 8008926:	4618      	mov	r0, r3
 8008928:	f001 fa0a 	bl	8009d40 <RCCEx_PLL2_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800893e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	2100      	movs	r1, #0
 800894c:	6139      	str	r1, [r7, #16]
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008958:	460b      	mov	r3, r1
 800895a:	4313      	orrs	r3, r2
 800895c:	d011      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800895e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008962:	3328      	adds	r3, #40	@ 0x28
 8008964:	2100      	movs	r1, #0
 8008966:	4618      	mov	r0, r3
 8008968:	f001 fa9c 	bl	8009ea4 <RCCEx_PLL3_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800897e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	2100      	movs	r1, #0
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	f003 0310 	and.w	r3, r3, #16
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008998:	460b      	mov	r3, r1
 800899a:	4313      	orrs	r3, r2
 800899c:	d011      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a2:	3328      	adds	r3, #40	@ 0x28
 80089a4:	2101      	movs	r1, #1
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 fa7c 	bl	8009ea4 <RCCEx_PLL3_Config>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80089b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	2100      	movs	r1, #0
 80089cc:	6039      	str	r1, [r7, #0]
 80089ce:	f003 0320 	and.w	r3, r3, #32
 80089d2:	607b      	str	r3, [r7, #4]
 80089d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80089d8:	460b      	mov	r3, r1
 80089da:	4313      	orrs	r3, r2
 80089dc:	d011      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e2:	3328      	adds	r3, #40	@ 0x28
 80089e4:	2102      	movs	r1, #2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 fa5c 	bl	8009ea4 <RCCEx_PLL3_Config>
 80089ec:	4603      	mov	r3, r0
 80089ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80089f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008a02:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e000      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008a16:	46bd      	mov	sp, r7
 8008a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a1c:	58024400 	.word	0x58024400

08008a20 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b090      	sub	sp, #64	@ 0x40
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008a32:	430b      	orrs	r3, r1
 8008a34:	f040 8094 	bne.w	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008a38:	4b9e      	ldr	r3, [pc, #632]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	f200 8087 	bhi.w	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008a65 	.word	0x08008a65
 8008a54:	08008a8d 	.word	0x08008a8d
 8008a58:	08008ab5 	.word	0x08008ab5
 8008a5c:	08008b51 	.word	0x08008b51
 8008a60:	08008add 	.word	0x08008add
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a64:	4b93      	ldr	r3, [pc, #588]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a70:	d108      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 f810 	bl	8009a9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a80:	f000 bd45 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a88:	f000 bd41 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a8c:	4b89      	ldr	r3, [pc, #548]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a98:	d108      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a9a:	f107 0318 	add.w	r3, r7, #24
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fd54 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa8:	f000 bd31 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab0:	f000 bd2d 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ab4:	4b7f      	ldr	r3, [pc, #508]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac0:	d108      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac2:	f107 030c 	add.w	r3, r7, #12
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fe94 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad0:	f000 bd1d 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad8:	f000 bd19 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008adc:	4b75      	ldr	r3, [pc, #468]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ae0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ae4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ae6:	4b73      	ldr	r3, [pc, #460]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0304 	and.w	r3, r3, #4
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d10c      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d109      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008af8:	4b6e      	ldr	r3, [pc, #440]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	08db      	lsrs	r3, r3, #3
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	4a6d      	ldr	r2, [pc, #436]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
 8008b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b0a:	e01f      	b.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b0c:	4b69      	ldr	r3, [pc, #420]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b18:	d106      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b20:	d102      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b22:	4b66      	ldr	r3, [pc, #408]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b26:	e011      	b.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b28:	4b62      	ldr	r3, [pc, #392]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b34:	d106      	bne.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b3c:	d102      	bne.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b3e:	4b60      	ldr	r3, [pc, #384]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b42:	e003      	b.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b48:	f000 bce1 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b4c:	f000 bcdf 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b50:	4b5c      	ldr	r3, [pc, #368]	@ (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b54:	f000 bcdb 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5c:	f000 bcd7 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b64:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008b68:	430b      	orrs	r3, r1
 8008b6a:	f040 80ad 	bne.w	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008b6e:	4b51      	ldr	r3, [pc, #324]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b72:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008b76:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b7e:	d056      	beq.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b86:	f200 8090 	bhi.w	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b8e:	f000 8088 	beq.w	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b96:	f200 8088 	bhi.w	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9c:	2b80      	cmp	r3, #128	@ 0x80
 8008b9e:	d032      	beq.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	2b80      	cmp	r3, #128	@ 0x80
 8008ba4:	f200 8081 	bhi.w	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb0:	2b40      	cmp	r3, #64	@ 0x40
 8008bb2:	d014      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008bb4:	e079      	b.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bc2:	d108      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 ff67 	bl	8009a9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd2:	f000 bc9c 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bda:	f000 bc98 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bde:	4b35      	ldr	r3, [pc, #212]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bea:	d108      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bec:	f107 0318 	add.w	r3, r7, #24
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fcab 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfa:	f000 bc88 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c02:	f000 bc84 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c06:	4b2b      	ldr	r3, [pc, #172]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c12:	d108      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c14:	f107 030c 	add.w	r3, r7, #12
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fdeb 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c22:	f000 bc74 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c2a:	f000 bc70 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c2e:	4b21      	ldr	r3, [pc, #132]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c38:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d10c      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d109      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	08db      	lsrs	r3, r3, #3
 8008c50:	f003 0303 	and.w	r3, r3, #3
 8008c54:	4a18      	ldr	r2, [pc, #96]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c56:	fa22 f303 	lsr.w	r3, r2, r3
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c5c:	e01f      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c5e:	4b15      	ldr	r3, [pc, #84]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c6a:	d106      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c72:	d102      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c74:	4b11      	ldr	r3, [pc, #68]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c78:	e011      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c86:	d106      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c8e:	d102      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c90:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c94:	e003      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c9a:	f000 bc38 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c9e:	f000 bc36 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ca2:	4b08      	ldr	r3, [pc, #32]	@ (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca6:	f000 bc32 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cae:	f000 bc2e 	b.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008cb2:	bf00      	nop
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	03d09000 	.word	0x03d09000
 8008cbc:	003d0900 	.word	0x003d0900
 8008cc0:	007a1200 	.word	0x007a1200
 8008cc4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ccc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	f040 809c 	bne.w	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008cd6:	4b9e      	ldr	r3, [pc, #632]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cda:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008cde:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ce6:	d054      	beq.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008cee:	f200 808b 	bhi.w	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008cf8:	f000 8083 	beq.w	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d02:	f200 8081 	bhi.w	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d0c:	d02f      	beq.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d14:	d878      	bhi.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d22:	d012      	beq.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008d24:	e070      	b.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d26:	4b8a      	ldr	r3, [pc, #552]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d32:	d107      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 feaf 	bl	8009a9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d42:	e3e4      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d48:	e3e1      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d4a:	4b81      	ldr	r3, [pc, #516]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d56:	d107      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d58:	f107 0318 	add.w	r3, r7, #24
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 fbf5 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d66:	e3d2      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d6c:	e3cf      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d6e:	4b78      	ldr	r3, [pc, #480]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d7a:	d107      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d7c:	f107 030c 	add.w	r3, r7, #12
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fd37 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d8a:	e3c0      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d90:	e3bd      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d92:	4b6f      	ldr	r3, [pc, #444]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d10c      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d109      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dae:	4b68      	ldr	r3, [pc, #416]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	08db      	lsrs	r3, r3, #3
 8008db4:	f003 0303 	and.w	r3, r3, #3
 8008db8:	4a66      	ldr	r2, [pc, #408]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008dba:	fa22 f303 	lsr.w	r3, r2, r3
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dc0:	e01e      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dc2:	4b63      	ldr	r3, [pc, #396]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dce:	d106      	bne.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dd6:	d102      	bne.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dd8:	4b5f      	ldr	r3, [pc, #380]	@ (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ddc:	e010      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dde:	4b5c      	ldr	r3, [pc, #368]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dea:	d106      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008df2:	d102      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008df4:	4b59      	ldr	r3, [pc, #356]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008df8:	e002      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008dfe:	e386      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e00:	e385      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e02:	4b57      	ldr	r3, [pc, #348]	@ (8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e06:	e382      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0c:	e37f      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e12:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008e16:	430b      	orrs	r3, r1
 8008e18:	f040 80a7 	bne.w	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008e1c:	4b4c      	ldr	r3, [pc, #304]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e20:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008e24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e2c:	d055      	beq.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e34:	f200 8096 	bhi.w	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e3e:	f000 8084 	beq.w	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e48:	f200 808c 	bhi.w	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e52:	d030      	beq.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e5a:	f200 8083 	bhi.w	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e6a:	d012      	beq.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008e6c:	e07a      	b.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e6e:	4b38      	ldr	r3, [pc, #224]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e7a:	d107      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fe0b 	bl	8009a9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e8a:	e340      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e90:	e33d      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e92:	4b2f      	ldr	r3, [pc, #188]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e9e:	d107      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ea0:	f107 0318 	add.w	r3, r7, #24
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fb51 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eae:	e32e      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb4:	e32b      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008eb6:	4b26      	ldr	r3, [pc, #152]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ec2:	d107      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec4:	f107 030c 	add.w	r3, r7, #12
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fc93 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ed2:	e31c      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed8:	e319      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008eda:	4b1d      	ldr	r3, [pc, #116]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ede:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d10c      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d109      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ef6:	4b16      	ldr	r3, [pc, #88]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	08db      	lsrs	r3, r3, #3
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	4a14      	ldr	r2, [pc, #80]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008f02:	fa22 f303 	lsr.w	r3, r2, r3
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f08:	e01e      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f0a:	4b11      	ldr	r3, [pc, #68]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f16:	d106      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f1e:	d102      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f20:	4b0d      	ldr	r3, [pc, #52]	@ (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f24:	e010      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f26:	4b0a      	ldr	r3, [pc, #40]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f32:	d106      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f3a:	d102      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f3c:	4b07      	ldr	r3, [pc, #28]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f40:	e002      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f46:	e2e2      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f48:	e2e1      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f4a:	4b05      	ldr	r3, [pc, #20]	@ (8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f4e:	e2de      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f50:	58024400 	.word	0x58024400
 8008f54:	03d09000 	.word	0x03d09000
 8008f58:	003d0900 	.word	0x003d0900
 8008f5c:	007a1200 	.word	0x007a1200
 8008f60:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f68:	e2d1      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f6e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008f72:	430b      	orrs	r3, r1
 8008f74:	f040 809c 	bne.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008f78:	4b93      	ldr	r3, [pc, #588]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f7c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008f80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f88:	d054      	beq.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f90:	f200 808b 	bhi.w	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f9a:	f000 8083 	beq.w	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fa4:	f200 8081 	bhi.w	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fae:	d02f      	beq.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fb6:	d878      	bhi.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d004      	beq.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fc4:	d012      	beq.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008fc6:	e070      	b.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fc8:	4b7f      	ldr	r3, [pc, #508]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fd4:	d107      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fd5e 	bl	8009a9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe4:	e293      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fea:	e290      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fec:	4b76      	ldr	r3, [pc, #472]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ff8:	d107      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ffa:	f107 0318 	add.w	r3, r7, #24
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 faa4 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009008:	e281      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900e:	e27e      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009010:	4b6d      	ldr	r3, [pc, #436]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800901c:	d107      	bne.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800901e:	f107 030c 	add.w	r3, r7, #12
 8009022:	4618      	mov	r0, r3
 8009024:	f000 fbe6 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800902c:	e26f      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009032:	e26c      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009034:	4b64      	ldr	r3, [pc, #400]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009038:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800903e:	4b62      	ldr	r3, [pc, #392]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b04      	cmp	r3, #4
 8009048:	d10c      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800904a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904c:	2b00      	cmp	r3, #0
 800904e:	d109      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009050:	4b5d      	ldr	r3, [pc, #372]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	08db      	lsrs	r3, r3, #3
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	4a5c      	ldr	r2, [pc, #368]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
 8009060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009062:	e01e      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009064:	4b58      	ldr	r3, [pc, #352]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800906c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009070:	d106      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009078:	d102      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800907a:	4b55      	ldr	r3, [pc, #340]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800907e:	e010      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009080:	4b51      	ldr	r3, [pc, #324]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009088:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800908c:	d106      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800908e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009094:	d102      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009096:	4b4f      	ldr	r3, [pc, #316]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800909a:	e002      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090a0:	e235      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090a2:	e234      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090a4:	4b4c      	ldr	r3, [pc, #304]	@ (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80090a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a8:	e231      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ae:	e22e      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80090b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80090b8:	430b      	orrs	r3, r1
 80090ba:	f040 808f 	bne.w	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80090be:	4b42      	ldr	r3, [pc, #264]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090c2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80090c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80090c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090ce:	d06b      	beq.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80090d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090d6:	d874      	bhi.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80090d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090de:	d056      	beq.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80090e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090e6:	d86c      	bhi.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80090e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090ee:	d03b      	beq.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80090f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090f6:	d864      	bhi.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80090f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090fe:	d021      	beq.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009102:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009106:	d85c      	bhi.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910a:	2b00      	cmp	r3, #0
 800910c:	d004      	beq.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800910e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009114:	d004      	beq.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009116:	e054      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009118:	f7fe fa0a 	bl	8007530 <HAL_RCC_GetPCLK1Freq>
 800911c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800911e:	e1f6      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009120:	4b29      	ldr	r3, [pc, #164]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800912c:	d107      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800912e:	f107 0318 	add.w	r3, r7, #24
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fa0a 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800913c:	e1e7      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009142:	e1e4      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009144:	4b20      	ldr	r3, [pc, #128]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800914c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009150:	d107      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009152:	f107 030c 	add.w	r3, r7, #12
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fb4c 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009160:	e1d5      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009166:	e1d2      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009168:	4b17      	ldr	r3, [pc, #92]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b04      	cmp	r3, #4
 8009172:	d109      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009174:	4b14      	ldr	r3, [pc, #80]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	08db      	lsrs	r3, r3, #3
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	4a13      	ldr	r2, [pc, #76]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009180:	fa22 f303 	lsr.w	r3, r2, r3
 8009184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009186:	e1c2      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918c:	e1bf      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800918e:	4b0e      	ldr	r3, [pc, #56]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800919a:	d102      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800919c:	4b0c      	ldr	r3, [pc, #48]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a0:	e1b5      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a6:	e1b2      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091a8:	4b07      	ldr	r3, [pc, #28]	@ (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091b4:	d102      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80091b6:	4b07      	ldr	r3, [pc, #28]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80091b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ba:	e1a8      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c0:	e1a5      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c6:	e1a2      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091c8:	58024400 	.word	0x58024400
 80091cc:	03d09000 	.word	0x03d09000
 80091d0:	003d0900 	.word	0x003d0900
 80091d4:	007a1200 	.word	0x007a1200
 80091d8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80091dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80091e4:	430b      	orrs	r3, r1
 80091e6:	d173      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80091e8:	4b9c      	ldr	r3, [pc, #624]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80091f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091f8:	d02f      	beq.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009200:	d863      	bhi.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800920e:	d012      	beq.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009210:	e05b      	b.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009212:	4b92      	ldr	r3, [pc, #584]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800921a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800921e:	d107      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009220:	f107 0318 	add.w	r3, r7, #24
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f991 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800922e:	e16e      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009234:	e16b      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009236:	4b89      	ldr	r3, [pc, #548]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800923e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009242:	d107      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009244:	f107 030c 	add.w	r3, r7, #12
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fad3 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009252:	e15c      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009258:	e159      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800925a:	4b80      	ldr	r3, [pc, #512]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800925c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800925e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009262:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009264:	4b7d      	ldr	r3, [pc, #500]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0304 	and.w	r3, r3, #4
 800926c:	2b04      	cmp	r3, #4
 800926e:	d10c      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009272:	2b00      	cmp	r3, #0
 8009274:	d109      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009276:	4b79      	ldr	r3, [pc, #484]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	08db      	lsrs	r3, r3, #3
 800927c:	f003 0303 	and.w	r3, r3, #3
 8009280:	4a77      	ldr	r2, [pc, #476]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009282:	fa22 f303 	lsr.w	r3, r2, r3
 8009286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009288:	e01e      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800928a:	4b74      	ldr	r3, [pc, #464]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009296:	d106      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800929a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800929e:	d102      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092a0:	4b70      	ldr	r3, [pc, #448]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092a4:	e010      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092a6:	4b6d      	ldr	r3, [pc, #436]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092b2:	d106      	bne.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80092b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092ba:	d102      	bne.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092bc:	4b6a      	ldr	r3, [pc, #424]	@ (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092c0:	e002      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80092c6:	e122      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092c8:	e121      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ce:	e11e      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80092d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80092d8:	430b      	orrs	r3, r1
 80092da:	d133      	bne.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80092dc:	4b5f      	ldr	r3, [pc, #380]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80092e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80092ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092f2:	d012      	beq.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80092f4:	e023      	b.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092f6:	4b59      	ldr	r3, [pc, #356]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009302:	d107      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009308:	4618      	mov	r0, r3
 800930a:	f000 fbc7 	bl	8009a9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009312:	e0fc      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009318:	e0f9      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800931a:	4b50      	ldr	r3, [pc, #320]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009326:	d107      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009328:	f107 0318 	add.w	r3, r7, #24
 800932c:	4618      	mov	r0, r3
 800932e:	f000 f90d 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009336:	e0ea      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800933c:	e0e7      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009342:	e0e4      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009348:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800934c:	430b      	orrs	r3, r1
 800934e:	f040 808d 	bne.w	800946c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009352:	4b42      	ldr	r3, [pc, #264]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009356:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800935a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009362:	d06b      	beq.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009366:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800936a:	d874      	bhi.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009372:	d056      	beq.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800937a:	d86c      	bhi.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800937c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009382:	d03b      	beq.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800938a:	d864      	bhi.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800938c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009392:	d021      	beq.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800939a:	d85c      	bhi.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800939c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80093a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093a8:	d004      	beq.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80093aa:	e054      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80093ac:	f000 f8b8 	bl	8009520 <HAL_RCCEx_GetD3PCLK1Freq>
 80093b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093b2:	e0ac      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093b4:	4b29      	ldr	r3, [pc, #164]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093c0:	d107      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093c2:	f107 0318 	add.w	r3, r7, #24
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f8c0 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093d0:	e09d      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d6:	e09a      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093d8:	4b20      	ldr	r3, [pc, #128]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093e4:	d107      	bne.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e6:	f107 030c 	add.w	r3, r7, #12
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fa02 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f4:	e08b      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fa:	e088      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093fc:	4b17      	ldr	r3, [pc, #92]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0304 	and.w	r3, r3, #4
 8009404:	2b04      	cmp	r3, #4
 8009406:	d109      	bne.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009408:	4b14      	ldr	r3, [pc, #80]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	08db      	lsrs	r3, r3, #3
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	4a13      	ldr	r2, [pc, #76]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009414:	fa22 f303 	lsr.w	r3, r2, r3
 8009418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941a:	e078      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009420:	e075      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009422:	4b0e      	ldr	r3, [pc, #56]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800942a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800942e:	d102      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009430:	4b0c      	ldr	r3, [pc, #48]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009434:	e06b      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943a:	e068      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800943c:	4b07      	ldr	r3, [pc, #28]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009444:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009448:	d102      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800944a:	4b07      	ldr	r3, [pc, #28]	@ (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800944e:	e05e      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009454:	e05b      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800945a:	e058      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800945c:	58024400 	.word	0x58024400
 8009460:	03d09000 	.word	0x03d09000
 8009464:	003d0900 	.word	0x003d0900
 8009468:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800946c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009470:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009474:	430b      	orrs	r3, r1
 8009476:	d148      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009478:	4b27      	ldr	r3, [pc, #156]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800947a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800947c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009480:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009488:	d02a      	beq.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800948a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009490:	d838      	bhi.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	d004      	beq.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800949e:	d00d      	beq.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80094a0:	e030      	b.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094ae:	d102      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80094b0:	4b1a      	ldr	r3, [pc, #104]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b4:	e02b      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ba:	e028      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094bc:	4b16      	ldr	r3, [pc, #88]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094c8:	d107      	bne.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fae4 	bl	8009a9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d8:	e019      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094de:	e016      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094ec:	d107      	bne.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ee:	f107 0318 	add.w	r3, r7, #24
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f82a 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094fc:	e007      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009502:	e004      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009508:	e001      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800950a:	2300      	movs	r3, #0
 800950c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800950e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009510:	4618      	mov	r0, r3
 8009512:	3740      	adds	r7, #64	@ 0x40
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	58024400 	.word	0x58024400
 800951c:	007a1200 	.word	0x007a1200

08009520 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009524:	f7fd ffd4 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 8009528:	4602      	mov	r2, r0
 800952a:	4b06      	ldr	r3, [pc, #24]	@ (8009544 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	091b      	lsrs	r3, r3, #4
 8009530:	f003 0307 	and.w	r3, r3, #7
 8009534:	4904      	ldr	r1, [pc, #16]	@ (8009548 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009536:	5ccb      	ldrb	r3, [r1, r3]
 8009538:	f003 031f 	and.w	r3, r3, #31
 800953c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009540:	4618      	mov	r0, r3
 8009542:	bd80      	pop	{r7, pc}
 8009544:	58024400 	.word	0x58024400
 8009548:	080135d8 	.word	0x080135d8

0800954c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800954c:	b480      	push	{r7}
 800954e:	b089      	sub	sp, #36	@ 0x24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009554:	4ba1      	ldr	r3, [pc, #644]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009558:	f003 0303 	and.w	r3, r3, #3
 800955c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800955e:	4b9f      	ldr	r3, [pc, #636]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009562:	0b1b      	lsrs	r3, r3, #12
 8009564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009568:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800956a:	4b9c      	ldr	r3, [pc, #624]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800956c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956e:	091b      	lsrs	r3, r3, #4
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009576:	4b99      	ldr	r3, [pc, #612]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957a:	08db      	lsrs	r3, r3, #3
 800957c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	fb02 f303 	mul.w	r3, r2, r3
 8009586:	ee07 3a90 	vmov	s15, r3
 800958a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 8111 	beq.w	80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	2b02      	cmp	r3, #2
 800959e:	f000 8083 	beq.w	80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	f200 80a1 	bhi.w	80096ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d056      	beq.n	8009664 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80095b6:	e099      	b.n	80096ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095b8:	4b88      	ldr	r3, [pc, #544]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d02d      	beq.n	8009620 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095c4:	4b85      	ldr	r3, [pc, #532]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	08db      	lsrs	r3, r3, #3
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	4a84      	ldr	r2, [pc, #528]	@ (80097e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80095d0:	fa22 f303 	lsr.w	r3, r2, r3
 80095d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	ee07 3a90 	vmov	s15, r3
 80095dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	ee07 3a90 	vmov	s15, r3
 80095e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ee:	4b7b      	ldr	r3, [pc, #492]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009602:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800960a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800961a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800961e:	e087      	b.n	8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800962e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009632:	4b6a      	ldr	r3, [pc, #424]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800963a:	ee07 3a90 	vmov	s15, r3
 800963e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009642:	ed97 6a03 	vldr	s12, [r7, #12]
 8009646:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800964a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800964e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800965a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009662:	e065      	b.n	8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009676:	4b59      	ldr	r3, [pc, #356]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009686:	ed97 6a03 	vldr	s12, [r7, #12]
 800968a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800968e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800969a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096a6:	e043      	b.n	8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80096b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ba:	4b48      	ldr	r3, [pc, #288]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ea:	e021      	b.n	8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fe:	4b37      	ldr	r3, [pc, #220]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009712:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800972e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009730:	4b2a      	ldr	r3, [pc, #168]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009734:	0a5b      	lsrs	r3, r3, #9
 8009736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009742:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800974a:	edd7 6a07 	vldr	s13, [r7, #28]
 800974e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009756:	ee17 2a90 	vmov	r2, s15
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800975e:	4b1f      	ldr	r3, [pc, #124]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009762:	0c1b      	lsrs	r3, r3, #16
 8009764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009768:	ee07 3a90 	vmov	s15, r3
 800976c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009770:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009778:	edd7 6a07 	vldr	s13, [r7, #28]
 800977c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009784:	ee17 2a90 	vmov	r2, s15
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800978c:	4b13      	ldr	r3, [pc, #76]	@ (80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800978e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009790:	0e1b      	lsrs	r3, r3, #24
 8009792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80097aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b2:	ee17 2a90 	vmov	r2, s15
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80097ba:	e008      	b.n	80097ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	609a      	str	r2, [r3, #8]
}
 80097ce:	bf00      	nop
 80097d0:	3724      	adds	r7, #36	@ 0x24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	58024400 	.word	0x58024400
 80097e0:	03d09000 	.word	0x03d09000
 80097e4:	46000000 	.word	0x46000000
 80097e8:	4c742400 	.word	0x4c742400
 80097ec:	4a742400 	.word	0x4a742400
 80097f0:	4af42400 	.word	0x4af42400

080097f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b089      	sub	sp, #36	@ 0x24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097fc:	4ba1      	ldr	r3, [pc, #644]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	f003 0303 	and.w	r3, r3, #3
 8009804:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009806:	4b9f      	ldr	r3, [pc, #636]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980a:	0d1b      	lsrs	r3, r3, #20
 800980c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009810:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009812:	4b9c      	ldr	r3, [pc, #624]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009816:	0a1b      	lsrs	r3, r3, #8
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800981e:	4b99      	ldr	r3, [pc, #612]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009822:	08db      	lsrs	r3, r3, #3
 8009824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	fb02 f303 	mul.w	r3, r2, r3
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 8111 	beq.w	8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b02      	cmp	r3, #2
 8009846:	f000 8083 	beq.w	8009950 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	2b02      	cmp	r3, #2
 800984e:	f200 80a1 	bhi.w	8009994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d056      	beq.n	800990c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800985e:	e099      	b.n	8009994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009860:	4b88      	ldr	r3, [pc, #544]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b00      	cmp	r3, #0
 800986a:	d02d      	beq.n	80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800986c:	4b85      	ldr	r3, [pc, #532]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	08db      	lsrs	r3, r3, #3
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	4a84      	ldr	r2, [pc, #528]	@ (8009a88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009878:	fa22 f303 	lsr.w	r3, r2, r3
 800987c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009896:	4b7b      	ldr	r3, [pc, #492]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800989a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098c6:	e087      	b.n	80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80098d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098da:	4b6a      	ldr	r3, [pc, #424]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800990a:	e065      	b.n	80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009916:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b59      	ldr	r3, [pc, #356]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009932:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800994e:	e043      	b.n	80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009a98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b48      	ldr	r3, [pc, #288]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a03 	vldr	s12, [r7, #12]
 8009976:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009992:	e021      	b.n	80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b37      	ldr	r3, [pc, #220]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80099d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099dc:	0a5b      	lsrs	r3, r3, #9
 80099de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fe:	ee17 2a90 	vmov	r2, s15
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009a06:	4b1f      	ldr	r3, [pc, #124]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a10:	ee07 3a90 	vmov	s15, r3
 8009a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2c:	ee17 2a90 	vmov	r2, s15
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009a34:	4b13      	ldr	r3, [pc, #76]	@ (8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a38:	0e1b      	lsrs	r3, r3, #24
 8009a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a5a:	ee17 2a90 	vmov	r2, s15
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a62:	e008      	b.n	8009a76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	609a      	str	r2, [r3, #8]
}
 8009a76:	bf00      	nop
 8009a78:	3724      	adds	r7, #36	@ 0x24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	58024400 	.word	0x58024400
 8009a88:	03d09000 	.word	0x03d09000
 8009a8c:	46000000 	.word	0x46000000
 8009a90:	4c742400 	.word	0x4c742400
 8009a94:	4a742400 	.word	0x4a742400
 8009a98:	4af42400 	.word	0x4af42400

08009a9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b089      	sub	sp, #36	@ 0x24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aa4:	4ba0      	ldr	r3, [pc, #640]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa8:	f003 0303 	and.w	r3, r3, #3
 8009aac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009aae:	4b9e      	ldr	r3, [pc, #632]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab2:	091b      	lsrs	r3, r3, #4
 8009ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ab8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009aba:	4b9b      	ldr	r3, [pc, #620]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ac4:	4b98      	ldr	r3, [pc, #608]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ac8:	08db      	lsrs	r3, r3, #3
 8009aca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	fb02 f303 	mul.w	r3, r2, r3
 8009ad4:	ee07 3a90 	vmov	s15, r3
 8009ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009adc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 8111 	beq.w	8009d0a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	f000 8083 	beq.w	8009bf6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	f200 80a1 	bhi.w	8009c3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d056      	beq.n	8009bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009b04:	e099      	b.n	8009c3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b06:	4b88      	ldr	r3, [pc, #544]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0320 	and.w	r3, r3, #32
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d02d      	beq.n	8009b6e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b12:	4b85      	ldr	r3, [pc, #532]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	08db      	lsrs	r3, r3, #3
 8009b18:	f003 0303 	and.w	r3, r3, #3
 8009b1c:	4a83      	ldr	r2, [pc, #524]	@ (8009d2c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b22:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	ee07 3a90 	vmov	s15, r3
 8009b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b3c:	4b7a      	ldr	r3, [pc, #488]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b44:	ee07 3a90 	vmov	s15, r3
 8009b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b50:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009d30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b68:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b6c:	e087      	b.n	8009c7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	ee07 3a90 	vmov	s15, r3
 8009b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b78:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009d34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b80:	4b69      	ldr	r3, [pc, #420]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b88:	ee07 3a90 	vmov	s15, r3
 8009b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b90:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b94:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009d30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb0:	e065      	b.n	8009c7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	ee07 3a90 	vmov	s15, r3
 8009bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009d38 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc4:	4b58      	ldr	r3, [pc, #352]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bcc:	ee07 3a90 	vmov	s15, r3
 8009bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009d30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bf4:	e043      	b.n	8009c7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	ee07 3a90 	vmov	s15, r3
 8009bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c00:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c08:	4b47      	ldr	r3, [pc, #284]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c18:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c1c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009d30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c38:	e021      	b.n	8009c7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	ee07 3a90 	vmov	s15, r3
 8009c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c44:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009d34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4c:	4b36      	ldr	r3, [pc, #216]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c54:	ee07 3a90 	vmov	s15, r3
 8009c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c60:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009d30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c7c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c82:	0a5b      	lsrs	r3, r3, #9
 8009c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c88:	ee07 3a90 	vmov	s15, r3
 8009c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca4:	ee17 2a90 	vmov	r2, s15
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009cac:	4b1e      	ldr	r3, [pc, #120]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb0:	0c1b      	lsrs	r3, r3, #16
 8009cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd2:	ee17 2a90 	vmov	r2, s15
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009cda:	4b13      	ldr	r3, [pc, #76]	@ (8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cde:	0e1b      	lsrs	r3, r3, #24
 8009ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ce4:	ee07 3a90 	vmov	s15, r3
 8009ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d00:	ee17 2a90 	vmov	r2, s15
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009d08:	e008      	b.n	8009d1c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	609a      	str	r2, [r3, #8]
}
 8009d1c:	bf00      	nop
 8009d1e:	3724      	adds	r7, #36	@ 0x24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	58024400 	.word	0x58024400
 8009d2c:	03d09000 	.word	0x03d09000
 8009d30:	46000000 	.word	0x46000000
 8009d34:	4c742400 	.word	0x4c742400
 8009d38:	4a742400 	.word	0x4a742400
 8009d3c:	4af42400 	.word	0x4af42400

08009d40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d4e:	4b53      	ldr	r3, [pc, #332]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d52:	f003 0303 	and.w	r3, r3, #3
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d101      	bne.n	8009d5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e099      	b.n	8009e92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a4e      	ldr	r2, [pc, #312]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009d64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d6a:	f7f7 ffbb 	bl	8001ce4 <HAL_GetTick>
 8009d6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d70:	e008      	b.n	8009d84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d72:	f7f7 ffb7 	bl	8001ce4 <HAL_GetTick>
 8009d76:	4602      	mov	r2, r0
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d901      	bls.n	8009d84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e086      	b.n	8009e92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d84:	4b45      	ldr	r3, [pc, #276]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1f0      	bne.n	8009d72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d90:	4b42      	ldr	r3, [pc, #264]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d94:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	031b      	lsls	r3, r3, #12
 8009d9e:	493f      	ldr	r1, [pc, #252]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	628b      	str	r3, [r1, #40]	@ 0x28
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	025b      	lsls	r3, r3, #9
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	041b      	lsls	r3, r3, #16
 8009dc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	061b      	lsls	r3, r3, #24
 8009dd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009dd4:	4931      	ldr	r1, [pc, #196]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009dda:	4b30      	ldr	r3, [pc, #192]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	492d      	ldr	r1, [pc, #180]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009dec:	4b2b      	ldr	r3, [pc, #172]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df0:	f023 0220 	bic.w	r2, r3, #32
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	4928      	ldr	r1, [pc, #160]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009dfe:	4b27      	ldr	r3, [pc, #156]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e02:	4a26      	ldr	r2, [pc, #152]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e04:	f023 0310 	bic.w	r3, r3, #16
 8009e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e0a:	4b24      	ldr	r3, [pc, #144]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e0e:	4b24      	ldr	r3, [pc, #144]	@ (8009ea0 <RCCEx_PLL2_Config+0x160>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	69d2      	ldr	r2, [r2, #28]
 8009e16:	00d2      	lsls	r2, r2, #3
 8009e18:	4920      	ldr	r1, [pc, #128]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e22:	4a1e      	ldr	r2, [pc, #120]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e24:	f043 0310 	orr.w	r3, r3, #16
 8009e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d106      	bne.n	8009e3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e30:	4b1a      	ldr	r3, [pc, #104]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e34:	4a19      	ldr	r2, [pc, #100]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e3c:	e00f      	b.n	8009e5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d106      	bne.n	8009e52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e44:	4b15      	ldr	r3, [pc, #84]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e48:	4a14      	ldr	r2, [pc, #80]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e50:	e005      	b.n	8009e5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e52:	4b12      	ldr	r3, [pc, #72]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e56:	4a11      	ldr	r2, [pc, #68]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a0e      	ldr	r2, [pc, #56]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e6a:	f7f7 ff3b 	bl	8001ce4 <HAL_GetTick>
 8009e6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e70:	e008      	b.n	8009e84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e72:	f7f7 ff37 	bl	8001ce4 <HAL_GetTick>
 8009e76:	4602      	mov	r2, r0
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d901      	bls.n	8009e84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e80:	2303      	movs	r3, #3
 8009e82:	e006      	b.n	8009e92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e84:	4b05      	ldr	r3, [pc, #20]	@ (8009e9c <RCCEx_PLL2_Config+0x15c>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d0f0      	beq.n	8009e72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	58024400 	.word	0x58024400
 8009ea0:	ffff0007 	.word	0xffff0007

08009ea4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009eb2:	4b53      	ldr	r3, [pc, #332]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb6:	f003 0303 	and.w	r3, r3, #3
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d101      	bne.n	8009ec2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e099      	b.n	8009ff6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ec2:	4b4f      	ldr	r3, [pc, #316]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a4e      	ldr	r2, [pc, #312]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ece:	f7f7 ff09 	bl	8001ce4 <HAL_GetTick>
 8009ed2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ed4:	e008      	b.n	8009ee8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ed6:	f7f7 ff05 	bl	8001ce4 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d901      	bls.n	8009ee8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e086      	b.n	8009ff6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ee8:	4b45      	ldr	r3, [pc, #276]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1f0      	bne.n	8009ed6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ef4:	4b42      	ldr	r3, [pc, #264]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	051b      	lsls	r3, r3, #20
 8009f02:	493f      	ldr	r1, [pc, #252]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	025b      	lsls	r3, r3, #9
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	431a      	orrs	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	041b      	lsls	r3, r3, #16
 8009f26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	061b      	lsls	r3, r3, #24
 8009f34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f38:	4931      	ldr	r1, [pc, #196]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f3e:	4b30      	ldr	r3, [pc, #192]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	492d      	ldr	r1, [pc, #180]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f50:	4b2b      	ldr	r3, [pc, #172]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	4928      	ldr	r1, [pc, #160]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f62:	4b27      	ldr	r3, [pc, #156]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f66:	4a26      	ldr	r2, [pc, #152]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f6e:	4b24      	ldr	r3, [pc, #144]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f72:	4b24      	ldr	r3, [pc, #144]	@ (800a004 <RCCEx_PLL3_Config+0x160>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	69d2      	ldr	r2, [r2, #28]
 8009f7a:	00d2      	lsls	r2, r2, #3
 8009f7c:	4920      	ldr	r1, [pc, #128]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f82:	4b1f      	ldr	r3, [pc, #124]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f86:	4a1e      	ldr	r2, [pc, #120]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d106      	bne.n	8009fa2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f94:	4b1a      	ldr	r3, [pc, #104]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f98:	4a19      	ldr	r2, [pc, #100]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009f9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fa0:	e00f      	b.n	8009fc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d106      	bne.n	8009fb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009fa8:	4b15      	ldr	r3, [pc, #84]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	4a14      	ldr	r2, [pc, #80]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009fae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fb4:	e005      	b.n	8009fc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009fb6:	4b12      	ldr	r3, [pc, #72]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fba:	4a11      	ldr	r2, [pc, #68]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009fbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009fc2:	4b0f      	ldr	r3, [pc, #60]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a0e      	ldr	r2, [pc, #56]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fce:	f7f7 fe89 	bl	8001ce4 <HAL_GetTick>
 8009fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fd4:	e008      	b.n	8009fe8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fd6:	f7f7 fe85 	bl	8001ce4 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d901      	bls.n	8009fe8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e006      	b.n	8009ff6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fe8:	4b05      	ldr	r3, [pc, #20]	@ (800a000 <RCCEx_PLL3_Config+0x15c>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0f0      	beq.n	8009fd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	58024400 	.word	0x58024400
 800a004:	ffff0007 	.word	0xffff0007

0800a008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e049      	b.n	800a0ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f841 	bl	800a0b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2202      	movs	r2, #2
 800a038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3304      	adds	r3, #4
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f000 f9e8 	bl	800a41c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b083      	sub	sp, #12
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
	...

0800a0cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d001      	beq.n	800a0e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e054      	b.n	800a18e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f042 0201 	orr.w	r2, r2, #1
 800a0fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a26      	ldr	r2, [pc, #152]	@ (800a19c <HAL_TIM_Base_Start_IT+0xd0>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d022      	beq.n	800a14c <HAL_TIM_Base_Start_IT+0x80>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a10e:	d01d      	beq.n	800a14c <HAL_TIM_Base_Start_IT+0x80>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a22      	ldr	r2, [pc, #136]	@ (800a1a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d018      	beq.n	800a14c <HAL_TIM_Base_Start_IT+0x80>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a21      	ldr	r2, [pc, #132]	@ (800a1a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d013      	beq.n	800a14c <HAL_TIM_Base_Start_IT+0x80>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a1f      	ldr	r2, [pc, #124]	@ (800a1a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d00e      	beq.n	800a14c <HAL_TIM_Base_Start_IT+0x80>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a1e      	ldr	r2, [pc, #120]	@ (800a1ac <HAL_TIM_Base_Start_IT+0xe0>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d009      	beq.n	800a14c <HAL_TIM_Base_Start_IT+0x80>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a1c      	ldr	r2, [pc, #112]	@ (800a1b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d004      	beq.n	800a14c <HAL_TIM_Base_Start_IT+0x80>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a1b      	ldr	r2, [pc, #108]	@ (800a1b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d115      	bne.n	800a178 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	4b19      	ldr	r3, [pc, #100]	@ (800a1b8 <HAL_TIM_Base_Start_IT+0xec>)
 800a154:	4013      	ands	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b06      	cmp	r3, #6
 800a15c:	d015      	beq.n	800a18a <HAL_TIM_Base_Start_IT+0xbe>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a164:	d011      	beq.n	800a18a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f042 0201 	orr.w	r2, r2, #1
 800a174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a176:	e008      	b.n	800a18a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 0201 	orr.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	e000      	b.n	800a18c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	40010000 	.word	0x40010000
 800a1a0:	40000400 	.word	0x40000400
 800a1a4:	40000800 	.word	0x40000800
 800a1a8:	40000c00 	.word	0x40000c00
 800a1ac:	40010400 	.word	0x40010400
 800a1b0:	40001800 	.word	0x40001800
 800a1b4:	40014000 	.word	0x40014000
 800a1b8:	00010007 	.word	0x00010007

0800a1bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f003 0302 	and.w	r3, r3, #2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d020      	beq.n	800a220 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f003 0302 	and.w	r3, r3, #2
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d01b      	beq.n	800a220 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f06f 0202 	mvn.w	r2, #2
 800a1f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	f003 0303 	and.w	r3, r3, #3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f8e9 	bl	800a3de <HAL_TIM_IC_CaptureCallback>
 800a20c:	e005      	b.n	800a21a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f8db 	bl	800a3ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f8ec 	bl	800a3f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f003 0304 	and.w	r3, r3, #4
 800a226:	2b00      	cmp	r3, #0
 800a228:	d020      	beq.n	800a26c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f003 0304 	and.w	r3, r3, #4
 800a230:	2b00      	cmp	r3, #0
 800a232:	d01b      	beq.n	800a26c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f06f 0204 	mvn.w	r2, #4
 800a23c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2202      	movs	r2, #2
 800a242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f8c3 	bl	800a3de <HAL_TIM_IC_CaptureCallback>
 800a258:	e005      	b.n	800a266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f8b5 	bl	800a3ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 f8c6 	bl	800a3f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f003 0308 	and.w	r3, r3, #8
 800a272:	2b00      	cmp	r3, #0
 800a274:	d020      	beq.n	800a2b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f003 0308 	and.w	r3, r3, #8
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d01b      	beq.n	800a2b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f06f 0208 	mvn.w	r2, #8
 800a288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2204      	movs	r2, #4
 800a28e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	f003 0303 	and.w	r3, r3, #3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f89d 	bl	800a3de <HAL_TIM_IC_CaptureCallback>
 800a2a4:	e005      	b.n	800a2b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f88f 	bl	800a3ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f8a0 	bl	800a3f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	f003 0310 	and.w	r3, r3, #16
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d020      	beq.n	800a304 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f003 0310 	and.w	r3, r3, #16
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01b      	beq.n	800a304 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f06f 0210 	mvn.w	r2, #16
 800a2d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2208      	movs	r2, #8
 800a2da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	69db      	ldr	r3, [r3, #28]
 800a2e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f877 	bl	800a3de <HAL_TIM_IC_CaptureCallback>
 800a2f0:	e005      	b.n	800a2fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f869 	bl	800a3ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f87a 	bl	800a3f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00c      	beq.n	800a328 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d007      	beq.n	800a328 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f06f 0201 	mvn.w	r2, #1
 800a320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7f6 fd4a 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d104      	bne.n	800a33c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00c      	beq.n	800a356 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a342:	2b00      	cmp	r3, #0
 800a344:	d007      	beq.n	800a356 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f913 	bl	800a57c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00c      	beq.n	800a37a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a366:	2b00      	cmp	r3, #0
 800a368:	d007      	beq.n	800a37a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f90b 	bl	800a590 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00c      	beq.n	800a39e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d007      	beq.n	800a39e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f834 	bl	800a406 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	f003 0320 	and.w	r3, r3, #32
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00c      	beq.n	800a3c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f003 0320 	and.w	r3, r3, #32
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d007      	beq.n	800a3c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f06f 0220 	mvn.w	r2, #32
 800a3ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f8d3 	bl	800a568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3c2:	bf00      	nop
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b083      	sub	sp, #12
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a406:	b480      	push	{r7}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a40e:	bf00      	nop
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
	...

0800a41c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a46      	ldr	r2, [pc, #280]	@ (800a548 <TIM_Base_SetConfig+0x12c>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d013      	beq.n	800a45c <TIM_Base_SetConfig+0x40>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a43a:	d00f      	beq.n	800a45c <TIM_Base_SetConfig+0x40>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a43      	ldr	r2, [pc, #268]	@ (800a54c <TIM_Base_SetConfig+0x130>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d00b      	beq.n	800a45c <TIM_Base_SetConfig+0x40>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a42      	ldr	r2, [pc, #264]	@ (800a550 <TIM_Base_SetConfig+0x134>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d007      	beq.n	800a45c <TIM_Base_SetConfig+0x40>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a41      	ldr	r2, [pc, #260]	@ (800a554 <TIM_Base_SetConfig+0x138>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d003      	beq.n	800a45c <TIM_Base_SetConfig+0x40>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a40      	ldr	r2, [pc, #256]	@ (800a558 <TIM_Base_SetConfig+0x13c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d108      	bne.n	800a46e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a35      	ldr	r2, [pc, #212]	@ (800a548 <TIM_Base_SetConfig+0x12c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d01f      	beq.n	800a4b6 <TIM_Base_SetConfig+0x9a>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a47c:	d01b      	beq.n	800a4b6 <TIM_Base_SetConfig+0x9a>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a32      	ldr	r2, [pc, #200]	@ (800a54c <TIM_Base_SetConfig+0x130>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d017      	beq.n	800a4b6 <TIM_Base_SetConfig+0x9a>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a31      	ldr	r2, [pc, #196]	@ (800a550 <TIM_Base_SetConfig+0x134>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d013      	beq.n	800a4b6 <TIM_Base_SetConfig+0x9a>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a30      	ldr	r2, [pc, #192]	@ (800a554 <TIM_Base_SetConfig+0x138>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d00f      	beq.n	800a4b6 <TIM_Base_SetConfig+0x9a>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a2f      	ldr	r2, [pc, #188]	@ (800a558 <TIM_Base_SetConfig+0x13c>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d00b      	beq.n	800a4b6 <TIM_Base_SetConfig+0x9a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a2e      	ldr	r2, [pc, #184]	@ (800a55c <TIM_Base_SetConfig+0x140>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d007      	beq.n	800a4b6 <TIM_Base_SetConfig+0x9a>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a2d      	ldr	r2, [pc, #180]	@ (800a560 <TIM_Base_SetConfig+0x144>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d003      	beq.n	800a4b6 <TIM_Base_SetConfig+0x9a>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a2c      	ldr	r2, [pc, #176]	@ (800a564 <TIM_Base_SetConfig+0x148>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d108      	bne.n	800a4c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	689a      	ldr	r2, [r3, #8]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a16      	ldr	r2, [pc, #88]	@ (800a548 <TIM_Base_SetConfig+0x12c>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00f      	beq.n	800a514 <TIM_Base_SetConfig+0xf8>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a18      	ldr	r2, [pc, #96]	@ (800a558 <TIM_Base_SetConfig+0x13c>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d00b      	beq.n	800a514 <TIM_Base_SetConfig+0xf8>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a17      	ldr	r2, [pc, #92]	@ (800a55c <TIM_Base_SetConfig+0x140>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d007      	beq.n	800a514 <TIM_Base_SetConfig+0xf8>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a16      	ldr	r2, [pc, #88]	@ (800a560 <TIM_Base_SetConfig+0x144>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d003      	beq.n	800a514 <TIM_Base_SetConfig+0xf8>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a15      	ldr	r2, [pc, #84]	@ (800a564 <TIM_Base_SetConfig+0x148>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d103      	bne.n	800a51c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	691a      	ldr	r2, [r3, #16]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d105      	bne.n	800a53a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	f023 0201 	bic.w	r2, r3, #1
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	611a      	str	r2, [r3, #16]
  }
}
 800a53a:	bf00      	nop
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	40010000 	.word	0x40010000
 800a54c:	40000400 	.word	0x40000400
 800a550:	40000800 	.word	0x40000800
 800a554:	40000c00 	.word	0x40000c00
 800a558:	40010400 	.word	0x40010400
 800a55c:	40014000 	.word	0x40014000
 800a560:	40014400 	.word	0x40014400
 800a564:	40014800 	.word	0x40014800

0800a568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e042      	b.n	800a63c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d106      	bne.n	800a5ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7f6 ff6d 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2224      	movs	r2, #36	@ 0x24
 800a5d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 0201 	bic.w	r2, r2, #1
 800a5e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 fb66 	bl	800bcc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fdfb 	bl	800b1f0 <UART_SetConfig>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d101      	bne.n	800a604 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e01b      	b.n	800a63c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689a      	ldr	r2, [r3, #8]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f042 0201 	orr.w	r2, r2, #1
 800a632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f001 fbe5 	bl	800be04 <UART_CheckIdleState>
 800a63a:	4603      	mov	r3, r0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08a      	sub	sp, #40	@ 0x28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4613      	mov	r3, r2
 800a650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d167      	bne.n	800a72c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d002      	beq.n	800a668 <HAL_UART_Transmit_DMA+0x24>
 800a662:	88fb      	ldrh	r3, [r7, #6]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e060      	b.n	800a72e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	88fa      	ldrh	r2, [r7, #6]
 800a676:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	88fa      	ldrh	r2, [r7, #6]
 800a67e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2221      	movs	r2, #33	@ 0x21
 800a68e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d028      	beq.n	800a6ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a69e:	4a26      	ldr	r2, [pc, #152]	@ (800a738 <HAL_UART_Transmit_DMA+0xf4>)
 800a6a0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6a6:	4a25      	ldr	r2, [pc, #148]	@ (800a73c <HAL_UART_Transmit_DMA+0xf8>)
 800a6a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6ae:	4a24      	ldr	r2, [pc, #144]	@ (800a740 <HAL_UART_Transmit_DMA+0xfc>)
 800a6b0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3328      	adds	r3, #40	@ 0x28
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	88fb      	ldrh	r3, [r7, #6]
 800a6ce:	f7f9 fa77 	bl	8003bc0 <HAL_DMA_Start_IT>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d009      	beq.n	800a6ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2210      	movs	r2, #16
 800a6dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e020      	b.n	800a72e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2240      	movs	r2, #64	@ 0x40
 800a6f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	613b      	str	r3, [r7, #16]
   return(result);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a70a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3308      	adds	r3, #8
 800a712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a714:	623a      	str	r2, [r7, #32]
 800a716:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	69f9      	ldr	r1, [r7, #28]
 800a71a:	6a3a      	ldr	r2, [r7, #32]
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	61bb      	str	r3, [r7, #24]
   return(result);
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e5      	bne.n	800a6f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	e000      	b.n	800a72e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a72c:	2302      	movs	r3, #2
  }
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3728      	adds	r7, #40	@ 0x28
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	0800c2d1 	.word	0x0800c2d1
 800a73c:	0800c367 	.word	0x0800c367
 800a740:	0800c4e9 	.word	0x0800c4e9

0800a744 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08a      	sub	sp, #40	@ 0x28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	4613      	mov	r3, r2
 800a750:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a758:	2b20      	cmp	r3, #32
 800a75a:	d137      	bne.n	800a7cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d002      	beq.n	800a768 <HAL_UART_Receive_DMA+0x24>
 800a762:	88fb      	ldrh	r3, [r7, #6]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d101      	bne.n	800a76c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e030      	b.n	800a7ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a18      	ldr	r2, [pc, #96]	@ (800a7d8 <HAL_UART_Receive_DMA+0x94>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d01f      	beq.n	800a7bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a786:	2b00      	cmp	r3, #0
 800a788:	d018      	beq.n	800a7bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	e853 3f00 	ldrex	r3, [r3]
 800a796:	613b      	str	r3, [r7, #16]
   return(result);
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a79e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a8:	623b      	str	r3, [r7, #32]
 800a7aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ac:	69f9      	ldr	r1, [r7, #28]
 800a7ae:	6a3a      	ldr	r2, [r7, #32]
 800a7b0:	e841 2300 	strex	r3, r2, [r1]
 800a7b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1e6      	bne.n	800a78a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f001 fc36 	bl	800c034 <UART_Start_Receive_DMA>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	e000      	b.n	800a7ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a7cc:	2302      	movs	r3, #2
  }
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3728      	adds	r7, #40	@ 0x28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	58000c00 	.word	0x58000c00

0800a7dc <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b09d      	sub	sp, #116	@ 0x74
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7f2:	66bb      	str	r3, [r7, #104]	@ 0x68

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7fe:	2b80      	cmp	r3, #128	@ 0x80
 800a800:	d11c      	bne.n	800a83c <HAL_UART_DMAPause+0x60>
 800a802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a804:	2b21      	cmp	r3, #33	@ 0x21
 800a806:	d119      	bne.n	800a83c <HAL_UART_DMAPause+0x60>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3308      	adds	r3, #8
 800a80e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a812:	e853 3f00 	ldrex	r3, [r3]
 800a816:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a81a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a81e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3308      	adds	r3, #8
 800a826:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a828:	657a      	str	r2, [r7, #84]	@ 0x54
 800a82a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a82e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a830:	e841 2300 	strex	r3, r2, [r1]
 800a834:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1e5      	bne.n	800a808 <HAL_UART_DMAPause+0x2c>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a846:	2b40      	cmp	r3, #64	@ 0x40
 800a848:	d14f      	bne.n	800a8ea <HAL_UART_DMAPause+0x10e>
 800a84a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a84c:	2b22      	cmp	r3, #34	@ 0x22
 800a84e:	d14c      	bne.n	800a8ea <HAL_UART_DMAPause+0x10e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a864:	663b      	str	r3, [r7, #96]	@ 0x60
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a86e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a870:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a876:	e841 2300 	strex	r3, r2, [r1]
 800a87a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1e6      	bne.n	800a850 <HAL_UART_DMAPause+0x74>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3308      	adds	r3, #8
 800a888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	61fb      	str	r3, [r7, #28]
   return(result);
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	f023 0301 	bic.w	r3, r3, #1
 800a898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a8a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e5      	bne.n	800a882 <HAL_UART_DMAPause+0xa6>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8d6:	61ba      	str	r2, [r7, #24]
 800a8d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8da:	6979      	ldr	r1, [r7, #20]
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	e841 2300 	strex	r3, r2, [r1]
 800a8e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1e5      	bne.n	800a8b6 <HAL_UART_DMAPause+0xda>
  }

  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3774      	adds	r7, #116	@ 0x74
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b09b      	sub	sp, #108	@ 0x6c
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a906:	2b21      	cmp	r3, #33	@ 0x21
 800a908:	d119      	bne.n	800a93e <HAL_UART_DMAResume+0x46>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3308      	adds	r3, #8
 800a910:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a91a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a91c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a920:	667b      	str	r3, [r7, #100]	@ 0x64
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a92a:	657a      	str	r2, [r7, #84]	@ 0x54
 800a92c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a930:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e5      	bne.n	800a90a <HAL_UART_DMAResume+0x12>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a944:	2b22      	cmp	r3, #34	@ 0x22
 800a946:	d154      	bne.n	800a9f2 <HAL_UART_DMAResume+0xfa>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2208      	movs	r2, #8
 800a94e:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d018      	beq.n	800a98a <HAL_UART_DMAResume+0x92>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a96c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a976:	643b      	str	r3, [r7, #64]	@ 0x40
 800a978:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a97c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e6      	bne.n	800a958 <HAL_UART_DMAResume+0x60>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3308      	adds	r3, #8
 800a990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	61fb      	str	r3, [r7, #28]
   return(result);
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	f043 0301 	orr.w	r3, r3, #1
 800a9a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a9aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e5      	bne.n	800a98a <HAL_UART_DMAResume+0x92>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3308      	adds	r3, #8
 800a9dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9de:	61ba      	str	r2, [r7, #24]
 800a9e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6979      	ldr	r1, [r7, #20]
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e5      	bne.n	800a9be <HAL_UART_DMAResume+0xc6>
  }

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	376c      	adds	r7, #108	@ 0x6c
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b0ba      	sub	sp, #232	@ 0xe8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa2e:	4013      	ands	r3, r2
 800aa30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d11b      	bne.n	800aa74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa40:	f003 0320 	and.w	r3, r3, #32
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d015      	beq.n	800aa74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d105      	bne.n	800aa60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d009      	beq.n	800aa74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 8377 	beq.w	800b158 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	4798      	blx	r3
      }
      return;
 800aa72:	e371      	b.n	800b158 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 8123 	beq.w	800acc4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aa82:	4b8d      	ldr	r3, [pc, #564]	@ (800acb8 <HAL_UART_IRQHandler+0x2b8>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa8e:	4b8b      	ldr	r3, [pc, #556]	@ (800acbc <HAL_UART_IRQHandler+0x2bc>)
 800aa90:	4013      	ands	r3, r2
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 8116 	beq.w	800acc4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d011      	beq.n	800aac8 <HAL_UART_IRQHandler+0xc8>
 800aaa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2201      	movs	r2, #1
 800aab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aabe:	f043 0201 	orr.w	r2, r3, #1
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aacc:	f003 0302 	and.w	r3, r3, #2
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d011      	beq.n	800aaf8 <HAL_UART_IRQHandler+0xf8>
 800aad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00b      	beq.n	800aaf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2202      	movs	r2, #2
 800aae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaee:	f043 0204 	orr.w	r2, r3, #4
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d011      	beq.n	800ab28 <HAL_UART_IRQHandler+0x128>
 800ab04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab08:	f003 0301 	and.w	r3, r3, #1
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2204      	movs	r2, #4
 800ab16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab1e:	f043 0202 	orr.w	r2, r3, #2
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab2c:	f003 0308 	and.w	r3, r3, #8
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d017      	beq.n	800ab64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab38:	f003 0320 	and.w	r3, r3, #32
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d105      	bne.n	800ab4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab44:	4b5c      	ldr	r3, [pc, #368]	@ (800acb8 <HAL_UART_IRQHandler+0x2b8>)
 800ab46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00b      	beq.n	800ab64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2208      	movs	r2, #8
 800ab52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab5a:	f043 0208 	orr.w	r2, r3, #8
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d012      	beq.n	800ab96 <HAL_UART_IRQHandler+0x196>
 800ab70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00c      	beq.n	800ab96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab8c:	f043 0220 	orr.w	r2, r3, #32
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 82dd 	beq.w	800b15c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d013      	beq.n	800abd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abb2:	f003 0320 	and.w	r3, r3, #32
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d105      	bne.n	800abc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abea:	2b40      	cmp	r3, #64	@ 0x40
 800abec:	d005      	beq.n	800abfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d054      	beq.n	800aca4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f001 fb02 	bl	800c204 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac0a:	2b40      	cmp	r3, #64	@ 0x40
 800ac0c:	d146      	bne.n	800ac9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3308      	adds	r3, #8
 800ac14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac1c:	e853 3f00 	ldrex	r3, [r3]
 800ac20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3308      	adds	r3, #8
 800ac36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ac52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1d9      	bne.n	800ac0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d017      	beq.n	800ac94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac6a:	4a15      	ldr	r2, [pc, #84]	@ (800acc0 <HAL_UART_IRQHandler+0x2c0>)
 800ac6c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7f9 fd2b 	bl	80046d0 <HAL_DMA_Abort_IT>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d019      	beq.n	800acb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac92:	e00f      	b.n	800acb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fa95 	bl	800b1c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac9a:	e00b      	b.n	800acb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fa91 	bl	800b1c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca2:	e007      	b.n	800acb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fa8d 	bl	800b1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800acb2:	e253      	b.n	800b15c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb4:	bf00      	nop
    return;
 800acb6:	e251      	b.n	800b15c <HAL_UART_IRQHandler+0x75c>
 800acb8:	10000001 	.word	0x10000001
 800acbc:	04000120 	.word	0x04000120
 800acc0:	0800c569 	.word	0x0800c569

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acc8:	2b01      	cmp	r3, #1
 800acca:	f040 81e7 	bne.w	800b09c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800acce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acd2:	f003 0310 	and.w	r3, r3, #16
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 81e0 	beq.w	800b09c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800acdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ace0:	f003 0310 	and.w	r3, r3, #16
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 81d9 	beq.w	800b09c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2210      	movs	r2, #16
 800acf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acfc:	2b40      	cmp	r3, #64	@ 0x40
 800acfe:	f040 8151 	bne.w	800afa4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a96      	ldr	r2, [pc, #600]	@ (800af64 <HAL_UART_IRQHandler+0x564>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d068      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a93      	ldr	r2, [pc, #588]	@ (800af68 <HAL_UART_IRQHandler+0x568>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d061      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a91      	ldr	r2, [pc, #580]	@ (800af6c <HAL_UART_IRQHandler+0x56c>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d05a      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a8e      	ldr	r2, [pc, #568]	@ (800af70 <HAL_UART_IRQHandler+0x570>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d053      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a8c      	ldr	r2, [pc, #560]	@ (800af74 <HAL_UART_IRQHandler+0x574>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d04c      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a89      	ldr	r2, [pc, #548]	@ (800af78 <HAL_UART_IRQHandler+0x578>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d045      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a87      	ldr	r2, [pc, #540]	@ (800af7c <HAL_UART_IRQHandler+0x57c>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d03e      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a84      	ldr	r2, [pc, #528]	@ (800af80 <HAL_UART_IRQHandler+0x580>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d037      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a82      	ldr	r2, [pc, #520]	@ (800af84 <HAL_UART_IRQHandler+0x584>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d030      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a7f      	ldr	r2, [pc, #508]	@ (800af88 <HAL_UART_IRQHandler+0x588>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d029      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a7d      	ldr	r2, [pc, #500]	@ (800af8c <HAL_UART_IRQHandler+0x58c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d022      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a7a      	ldr	r2, [pc, #488]	@ (800af90 <HAL_UART_IRQHandler+0x590>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d01b      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a78      	ldr	r2, [pc, #480]	@ (800af94 <HAL_UART_IRQHandler+0x594>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d014      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a75      	ldr	r2, [pc, #468]	@ (800af98 <HAL_UART_IRQHandler+0x598>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d00d      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a73      	ldr	r2, [pc, #460]	@ (800af9c <HAL_UART_IRQHandler+0x59c>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d006      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a70      	ldr	r2, [pc, #448]	@ (800afa0 <HAL_UART_IRQHandler+0x5a0>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d106      	bne.n	800adf0 <HAL_UART_IRQHandler+0x3f0>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	b29b      	uxth	r3, r3
 800adee:	e005      	b.n	800adfc <HAL_UART_IRQHandler+0x3fc>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 81ab 	beq.w	800b160 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae14:	429a      	cmp	r2, r3
 800ae16:	f080 81a3 	bcs.w	800b160 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae30:	f000 8087 	beq.w	800af42 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ae48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ae5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ae6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ae6e:	e841 2300 	strex	r3, r2, [r1]
 800ae72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ae76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1da      	bne.n	800ae34 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3308      	adds	r3, #8
 800ae84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae90:	f023 0301 	bic.w	r3, r3, #1
 800ae94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3308      	adds	r3, #8
 800ae9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aea2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aeaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aeae:	e841 2300 	strex	r3, r2, [r1]
 800aeb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aeb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1e1      	bne.n	800ae7e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3308      	adds	r3, #8
 800aec0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aec4:	e853 3f00 	ldrex	r3, [r3]
 800aec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aeca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	3308      	adds	r3, #8
 800aeda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aede:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aee0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aee4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aeec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e3      	bne.n	800aeba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af08:	e853 3f00 	ldrex	r3, [r3]
 800af0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af10:	f023 0310 	bic.w	r3, r3, #16
 800af14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af22:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af2a:	e841 2300 	strex	r3, r2, [r1]
 800af2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1e4      	bne.n	800af00 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7f9 f8a9 	bl	8004094 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2202      	movs	r2, #2
 800af46:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af54:	b29b      	uxth	r3, r3
 800af56:	1ad3      	subs	r3, r2, r3
 800af58:	b29b      	uxth	r3, r3
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f93b 	bl	800b1d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af62:	e0fd      	b.n	800b160 <HAL_UART_IRQHandler+0x760>
 800af64:	40020010 	.word	0x40020010
 800af68:	40020028 	.word	0x40020028
 800af6c:	40020040 	.word	0x40020040
 800af70:	40020058 	.word	0x40020058
 800af74:	40020070 	.word	0x40020070
 800af78:	40020088 	.word	0x40020088
 800af7c:	400200a0 	.word	0x400200a0
 800af80:	400200b8 	.word	0x400200b8
 800af84:	40020410 	.word	0x40020410
 800af88:	40020428 	.word	0x40020428
 800af8c:	40020440 	.word	0x40020440
 800af90:	40020458 	.word	0x40020458
 800af94:	40020470 	.word	0x40020470
 800af98:	40020488 	.word	0x40020488
 800af9c:	400204a0 	.word	0x400204a0
 800afa0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 80cf 	beq.w	800b164 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800afc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 80ca 	beq.w	800b164 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd8:	e853 3f00 	ldrex	r3, [r3]
 800afdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afe4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	461a      	mov	r2, r3
 800afee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aff2:	647b      	str	r3, [r7, #68]	@ 0x44
 800aff4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aff8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e4      	bne.n	800afd0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3308      	adds	r3, #8
 800b00c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	623b      	str	r3, [r7, #32]
   return(result);
 800b016:	6a3a      	ldr	r2, [r7, #32]
 800b018:	4b55      	ldr	r3, [pc, #340]	@ (800b170 <HAL_UART_IRQHandler+0x770>)
 800b01a:	4013      	ands	r3, r2
 800b01c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3308      	adds	r3, #8
 800b026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b02a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b032:	e841 2300 	strex	r3, r2, [r1]
 800b036:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e3      	bne.n	800b006 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2220      	movs	r2, #32
 800b042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	e853 3f00 	ldrex	r3, [r3]
 800b05e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f023 0310 	bic.w	r3, r3, #16
 800b066:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b074:	61fb      	str	r3, [r7, #28]
 800b076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b078:	69b9      	ldr	r1, [r7, #24]
 800b07a:	69fa      	ldr	r2, [r7, #28]
 800b07c:	e841 2300 	strex	r3, r2, [r1]
 800b080:	617b      	str	r3, [r7, #20]
   return(result);
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1e4      	bne.n	800b052 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b08e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f89f 	bl	800b1d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b09a:	e063      	b.n	800b164 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00e      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x6c6>
 800b0a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d008      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b0bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f001 fa93 	bl	800c5ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0c4:	e051      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d014      	beq.n	800b0fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d105      	bne.n	800b0ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b0de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d008      	beq.n	800b0fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d03a      	beq.n	800b168 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	4798      	blx	r3
    }
    return;
 800b0fa:	e035      	b.n	800b168 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	d009      	beq.n	800b11c <HAL_UART_IRQHandler+0x71c>
 800b108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b10c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b110:	2b00      	cmp	r3, #0
 800b112:	d003      	beq.n	800b11c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f001 fa3d 	bl	800c594 <UART_EndTransmit_IT>
    return;
 800b11a:	e026      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d009      	beq.n	800b13c <HAL_UART_IRQHandler+0x73c>
 800b128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b12c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f001 fa6c 	bl	800c612 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b13a:	e016      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d010      	beq.n	800b16a <HAL_UART_IRQHandler+0x76a>
 800b148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	da0c      	bge.n	800b16a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f001 fa54 	bl	800c5fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b156:	e008      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
      return;
 800b158:	bf00      	nop
 800b15a:	e006      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
    return;
 800b15c:	bf00      	nop
 800b15e:	e004      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
      return;
 800b160:	bf00      	nop
 800b162:	e002      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
      return;
 800b164:	bf00      	nop
 800b166:	e000      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
    return;
 800b168:	bf00      	nop
  }
}
 800b16a:	37e8      	adds	r7, #232	@ 0xe8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	effffffe 	.word	0xeffffffe

0800b174 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1f4:	b092      	sub	sp, #72	@ 0x48
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	689a      	ldr	r2, [r3, #8]
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	431a      	orrs	r2, r3
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	431a      	orrs	r2, r3
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	69db      	ldr	r3, [r3, #28]
 800b214:	4313      	orrs	r3, r2
 800b216:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	4bbe      	ldr	r3, [pc, #760]	@ (800b518 <UART_SetConfig+0x328>)
 800b220:	4013      	ands	r3, r2
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	6812      	ldr	r2, [r2, #0]
 800b226:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b228:	430b      	orrs	r3, r1
 800b22a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	68da      	ldr	r2, [r3, #12]
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	430a      	orrs	r2, r1
 800b240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4ab3      	ldr	r2, [pc, #716]	@ (800b51c <UART_SetConfig+0x32c>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d004      	beq.n	800b25c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b258:	4313      	orrs	r3, r2
 800b25a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689a      	ldr	r2, [r3, #8]
 800b262:	4baf      	ldr	r3, [pc, #700]	@ (800b520 <UART_SetConfig+0x330>)
 800b264:	4013      	ands	r3, r2
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	6812      	ldr	r2, [r2, #0]
 800b26a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b26c:	430b      	orrs	r3, r1
 800b26e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b276:	f023 010f 	bic.w	r1, r3, #15
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	430a      	orrs	r2, r1
 800b284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4aa6      	ldr	r2, [pc, #664]	@ (800b524 <UART_SetConfig+0x334>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d177      	bne.n	800b380 <UART_SetConfig+0x190>
 800b290:	4ba5      	ldr	r3, [pc, #660]	@ (800b528 <UART_SetConfig+0x338>)
 800b292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b298:	2b28      	cmp	r3, #40	@ 0x28
 800b29a:	d86d      	bhi.n	800b378 <UART_SetConfig+0x188>
 800b29c:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a4 <UART_SetConfig+0xb4>)
 800b29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a2:	bf00      	nop
 800b2a4:	0800b349 	.word	0x0800b349
 800b2a8:	0800b379 	.word	0x0800b379
 800b2ac:	0800b379 	.word	0x0800b379
 800b2b0:	0800b379 	.word	0x0800b379
 800b2b4:	0800b379 	.word	0x0800b379
 800b2b8:	0800b379 	.word	0x0800b379
 800b2bc:	0800b379 	.word	0x0800b379
 800b2c0:	0800b379 	.word	0x0800b379
 800b2c4:	0800b351 	.word	0x0800b351
 800b2c8:	0800b379 	.word	0x0800b379
 800b2cc:	0800b379 	.word	0x0800b379
 800b2d0:	0800b379 	.word	0x0800b379
 800b2d4:	0800b379 	.word	0x0800b379
 800b2d8:	0800b379 	.word	0x0800b379
 800b2dc:	0800b379 	.word	0x0800b379
 800b2e0:	0800b379 	.word	0x0800b379
 800b2e4:	0800b359 	.word	0x0800b359
 800b2e8:	0800b379 	.word	0x0800b379
 800b2ec:	0800b379 	.word	0x0800b379
 800b2f0:	0800b379 	.word	0x0800b379
 800b2f4:	0800b379 	.word	0x0800b379
 800b2f8:	0800b379 	.word	0x0800b379
 800b2fc:	0800b379 	.word	0x0800b379
 800b300:	0800b379 	.word	0x0800b379
 800b304:	0800b361 	.word	0x0800b361
 800b308:	0800b379 	.word	0x0800b379
 800b30c:	0800b379 	.word	0x0800b379
 800b310:	0800b379 	.word	0x0800b379
 800b314:	0800b379 	.word	0x0800b379
 800b318:	0800b379 	.word	0x0800b379
 800b31c:	0800b379 	.word	0x0800b379
 800b320:	0800b379 	.word	0x0800b379
 800b324:	0800b369 	.word	0x0800b369
 800b328:	0800b379 	.word	0x0800b379
 800b32c:	0800b379 	.word	0x0800b379
 800b330:	0800b379 	.word	0x0800b379
 800b334:	0800b379 	.word	0x0800b379
 800b338:	0800b379 	.word	0x0800b379
 800b33c:	0800b379 	.word	0x0800b379
 800b340:	0800b379 	.word	0x0800b379
 800b344:	0800b371 	.word	0x0800b371
 800b348:	2301      	movs	r3, #1
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b34e:	e222      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b350:	2304      	movs	r3, #4
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b356:	e21e      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b358:	2308      	movs	r3, #8
 800b35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b35e:	e21a      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b360:	2310      	movs	r3, #16
 800b362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b366:	e216      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b368:	2320      	movs	r3, #32
 800b36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b36e:	e212      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b370:	2340      	movs	r3, #64	@ 0x40
 800b372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b376:	e20e      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b378:	2380      	movs	r3, #128	@ 0x80
 800b37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b37e:	e20a      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a69      	ldr	r2, [pc, #420]	@ (800b52c <UART_SetConfig+0x33c>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d130      	bne.n	800b3ec <UART_SetConfig+0x1fc>
 800b38a:	4b67      	ldr	r3, [pc, #412]	@ (800b528 <UART_SetConfig+0x338>)
 800b38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b38e:	f003 0307 	and.w	r3, r3, #7
 800b392:	2b05      	cmp	r3, #5
 800b394:	d826      	bhi.n	800b3e4 <UART_SetConfig+0x1f4>
 800b396:	a201      	add	r2, pc, #4	@ (adr r2, 800b39c <UART_SetConfig+0x1ac>)
 800b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39c:	0800b3b5 	.word	0x0800b3b5
 800b3a0:	0800b3bd 	.word	0x0800b3bd
 800b3a4:	0800b3c5 	.word	0x0800b3c5
 800b3a8:	0800b3cd 	.word	0x0800b3cd
 800b3ac:	0800b3d5 	.word	0x0800b3d5
 800b3b0:	0800b3dd 	.word	0x0800b3dd
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ba:	e1ec      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b3bc:	2304      	movs	r3, #4
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c2:	e1e8      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ca:	e1e4      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b3cc:	2310      	movs	r3, #16
 800b3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3d2:	e1e0      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b3d4:	2320      	movs	r3, #32
 800b3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3da:	e1dc      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b3dc:	2340      	movs	r3, #64	@ 0x40
 800b3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3e2:	e1d8      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b3e4:	2380      	movs	r3, #128	@ 0x80
 800b3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ea:	e1d4      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a4f      	ldr	r2, [pc, #316]	@ (800b530 <UART_SetConfig+0x340>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d130      	bne.n	800b458 <UART_SetConfig+0x268>
 800b3f6:	4b4c      	ldr	r3, [pc, #304]	@ (800b528 <UART_SetConfig+0x338>)
 800b3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	2b05      	cmp	r3, #5
 800b400:	d826      	bhi.n	800b450 <UART_SetConfig+0x260>
 800b402:	a201      	add	r2, pc, #4	@ (adr r2, 800b408 <UART_SetConfig+0x218>)
 800b404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b408:	0800b421 	.word	0x0800b421
 800b40c:	0800b429 	.word	0x0800b429
 800b410:	0800b431 	.word	0x0800b431
 800b414:	0800b439 	.word	0x0800b439
 800b418:	0800b441 	.word	0x0800b441
 800b41c:	0800b449 	.word	0x0800b449
 800b420:	2300      	movs	r3, #0
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b426:	e1b6      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b428:	2304      	movs	r3, #4
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42e:	e1b2      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b430:	2308      	movs	r3, #8
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b436:	e1ae      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b438:	2310      	movs	r3, #16
 800b43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b43e:	e1aa      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b440:	2320      	movs	r3, #32
 800b442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b446:	e1a6      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b448:	2340      	movs	r3, #64	@ 0x40
 800b44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b44e:	e1a2      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b450:	2380      	movs	r3, #128	@ 0x80
 800b452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b456:	e19e      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a35      	ldr	r2, [pc, #212]	@ (800b534 <UART_SetConfig+0x344>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d130      	bne.n	800b4c4 <UART_SetConfig+0x2d4>
 800b462:	4b31      	ldr	r3, [pc, #196]	@ (800b528 <UART_SetConfig+0x338>)
 800b464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	2b05      	cmp	r3, #5
 800b46c:	d826      	bhi.n	800b4bc <UART_SetConfig+0x2cc>
 800b46e:	a201      	add	r2, pc, #4	@ (adr r2, 800b474 <UART_SetConfig+0x284>)
 800b470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b474:	0800b48d 	.word	0x0800b48d
 800b478:	0800b495 	.word	0x0800b495
 800b47c:	0800b49d 	.word	0x0800b49d
 800b480:	0800b4a5 	.word	0x0800b4a5
 800b484:	0800b4ad 	.word	0x0800b4ad
 800b488:	0800b4b5 	.word	0x0800b4b5
 800b48c:	2300      	movs	r3, #0
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b492:	e180      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b494:	2304      	movs	r3, #4
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49a:	e17c      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b49c:	2308      	movs	r3, #8
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a2:	e178      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4aa:	e174      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b4ac:	2320      	movs	r3, #32
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b2:	e170      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b4b4:	2340      	movs	r3, #64	@ 0x40
 800b4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ba:	e16c      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b4bc:	2380      	movs	r3, #128	@ 0x80
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4c2:	e168      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a1b      	ldr	r2, [pc, #108]	@ (800b538 <UART_SetConfig+0x348>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d142      	bne.n	800b554 <UART_SetConfig+0x364>
 800b4ce:	4b16      	ldr	r3, [pc, #88]	@ (800b528 <UART_SetConfig+0x338>)
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4d2:	f003 0307 	and.w	r3, r3, #7
 800b4d6:	2b05      	cmp	r3, #5
 800b4d8:	d838      	bhi.n	800b54c <UART_SetConfig+0x35c>
 800b4da:	a201      	add	r2, pc, #4	@ (adr r2, 800b4e0 <UART_SetConfig+0x2f0>)
 800b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e0:	0800b4f9 	.word	0x0800b4f9
 800b4e4:	0800b501 	.word	0x0800b501
 800b4e8:	0800b509 	.word	0x0800b509
 800b4ec:	0800b511 	.word	0x0800b511
 800b4f0:	0800b53d 	.word	0x0800b53d
 800b4f4:	0800b545 	.word	0x0800b545
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fe:	e14a      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b500:	2304      	movs	r3, #4
 800b502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b506:	e146      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b508:	2308      	movs	r3, #8
 800b50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50e:	e142      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b510:	2310      	movs	r3, #16
 800b512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b516:	e13e      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b518:	cfff69f3 	.word	0xcfff69f3
 800b51c:	58000c00 	.word	0x58000c00
 800b520:	11fff4ff 	.word	0x11fff4ff
 800b524:	40011000 	.word	0x40011000
 800b528:	58024400 	.word	0x58024400
 800b52c:	40004400 	.word	0x40004400
 800b530:	40004800 	.word	0x40004800
 800b534:	40004c00 	.word	0x40004c00
 800b538:	40005000 	.word	0x40005000
 800b53c:	2320      	movs	r3, #32
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b542:	e128      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b544:	2340      	movs	r3, #64	@ 0x40
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54a:	e124      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b54c:	2380      	movs	r3, #128	@ 0x80
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b552:	e120      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4acb      	ldr	r2, [pc, #812]	@ (800b888 <UART_SetConfig+0x698>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d176      	bne.n	800b64c <UART_SetConfig+0x45c>
 800b55e:	4bcb      	ldr	r3, [pc, #812]	@ (800b88c <UART_SetConfig+0x69c>)
 800b560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b566:	2b28      	cmp	r3, #40	@ 0x28
 800b568:	d86c      	bhi.n	800b644 <UART_SetConfig+0x454>
 800b56a:	a201      	add	r2, pc, #4	@ (adr r2, 800b570 <UART_SetConfig+0x380>)
 800b56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b570:	0800b615 	.word	0x0800b615
 800b574:	0800b645 	.word	0x0800b645
 800b578:	0800b645 	.word	0x0800b645
 800b57c:	0800b645 	.word	0x0800b645
 800b580:	0800b645 	.word	0x0800b645
 800b584:	0800b645 	.word	0x0800b645
 800b588:	0800b645 	.word	0x0800b645
 800b58c:	0800b645 	.word	0x0800b645
 800b590:	0800b61d 	.word	0x0800b61d
 800b594:	0800b645 	.word	0x0800b645
 800b598:	0800b645 	.word	0x0800b645
 800b59c:	0800b645 	.word	0x0800b645
 800b5a0:	0800b645 	.word	0x0800b645
 800b5a4:	0800b645 	.word	0x0800b645
 800b5a8:	0800b645 	.word	0x0800b645
 800b5ac:	0800b645 	.word	0x0800b645
 800b5b0:	0800b625 	.word	0x0800b625
 800b5b4:	0800b645 	.word	0x0800b645
 800b5b8:	0800b645 	.word	0x0800b645
 800b5bc:	0800b645 	.word	0x0800b645
 800b5c0:	0800b645 	.word	0x0800b645
 800b5c4:	0800b645 	.word	0x0800b645
 800b5c8:	0800b645 	.word	0x0800b645
 800b5cc:	0800b645 	.word	0x0800b645
 800b5d0:	0800b62d 	.word	0x0800b62d
 800b5d4:	0800b645 	.word	0x0800b645
 800b5d8:	0800b645 	.word	0x0800b645
 800b5dc:	0800b645 	.word	0x0800b645
 800b5e0:	0800b645 	.word	0x0800b645
 800b5e4:	0800b645 	.word	0x0800b645
 800b5e8:	0800b645 	.word	0x0800b645
 800b5ec:	0800b645 	.word	0x0800b645
 800b5f0:	0800b635 	.word	0x0800b635
 800b5f4:	0800b645 	.word	0x0800b645
 800b5f8:	0800b645 	.word	0x0800b645
 800b5fc:	0800b645 	.word	0x0800b645
 800b600:	0800b645 	.word	0x0800b645
 800b604:	0800b645 	.word	0x0800b645
 800b608:	0800b645 	.word	0x0800b645
 800b60c:	0800b645 	.word	0x0800b645
 800b610:	0800b63d 	.word	0x0800b63d
 800b614:	2301      	movs	r3, #1
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e0bc      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b61c:	2304      	movs	r3, #4
 800b61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b622:	e0b8      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b624:	2308      	movs	r3, #8
 800b626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b62a:	e0b4      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b62c:	2310      	movs	r3, #16
 800b62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b632:	e0b0      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b634:	2320      	movs	r3, #32
 800b636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63a:	e0ac      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b63c:	2340      	movs	r3, #64	@ 0x40
 800b63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b642:	e0a8      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b644:	2380      	movs	r3, #128	@ 0x80
 800b646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b64a:	e0a4      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a8f      	ldr	r2, [pc, #572]	@ (800b890 <UART_SetConfig+0x6a0>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d130      	bne.n	800b6b8 <UART_SetConfig+0x4c8>
 800b656:	4b8d      	ldr	r3, [pc, #564]	@ (800b88c <UART_SetConfig+0x69c>)
 800b658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b65a:	f003 0307 	and.w	r3, r3, #7
 800b65e:	2b05      	cmp	r3, #5
 800b660:	d826      	bhi.n	800b6b0 <UART_SetConfig+0x4c0>
 800b662:	a201      	add	r2, pc, #4	@ (adr r2, 800b668 <UART_SetConfig+0x478>)
 800b664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b668:	0800b681 	.word	0x0800b681
 800b66c:	0800b689 	.word	0x0800b689
 800b670:	0800b691 	.word	0x0800b691
 800b674:	0800b699 	.word	0x0800b699
 800b678:	0800b6a1 	.word	0x0800b6a1
 800b67c:	0800b6a9 	.word	0x0800b6a9
 800b680:	2300      	movs	r3, #0
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e086      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b688:	2304      	movs	r3, #4
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68e:	e082      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b690:	2308      	movs	r3, #8
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b696:	e07e      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b698:	2310      	movs	r3, #16
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69e:	e07a      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b6a0:	2320      	movs	r3, #32
 800b6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a6:	e076      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b6a8:	2340      	movs	r3, #64	@ 0x40
 800b6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ae:	e072      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b6b0:	2380      	movs	r3, #128	@ 0x80
 800b6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6b6:	e06e      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a75      	ldr	r2, [pc, #468]	@ (800b894 <UART_SetConfig+0x6a4>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d130      	bne.n	800b724 <UART_SetConfig+0x534>
 800b6c2:	4b72      	ldr	r3, [pc, #456]	@ (800b88c <UART_SetConfig+0x69c>)
 800b6c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	2b05      	cmp	r3, #5
 800b6cc:	d826      	bhi.n	800b71c <UART_SetConfig+0x52c>
 800b6ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d4 <UART_SetConfig+0x4e4>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b6ed 	.word	0x0800b6ed
 800b6d8:	0800b6f5 	.word	0x0800b6f5
 800b6dc:	0800b6fd 	.word	0x0800b6fd
 800b6e0:	0800b705 	.word	0x0800b705
 800b6e4:	0800b70d 	.word	0x0800b70d
 800b6e8:	0800b715 	.word	0x0800b715
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f2:	e050      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b6f4:	2304      	movs	r3, #4
 800b6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fa:	e04c      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b6fc:	2308      	movs	r3, #8
 800b6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b702:	e048      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b704:	2310      	movs	r3, #16
 800b706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70a:	e044      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b70c:	2320      	movs	r3, #32
 800b70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b712:	e040      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b714:	2340      	movs	r3, #64	@ 0x40
 800b716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71a:	e03c      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b71c:	2380      	movs	r3, #128	@ 0x80
 800b71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b722:	e038      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a5b      	ldr	r2, [pc, #364]	@ (800b898 <UART_SetConfig+0x6a8>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d130      	bne.n	800b790 <UART_SetConfig+0x5a0>
 800b72e:	4b57      	ldr	r3, [pc, #348]	@ (800b88c <UART_SetConfig+0x69c>)
 800b730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	2b05      	cmp	r3, #5
 800b738:	d826      	bhi.n	800b788 <UART_SetConfig+0x598>
 800b73a:	a201      	add	r2, pc, #4	@ (adr r2, 800b740 <UART_SetConfig+0x550>)
 800b73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b740:	0800b759 	.word	0x0800b759
 800b744:	0800b761 	.word	0x0800b761
 800b748:	0800b769 	.word	0x0800b769
 800b74c:	0800b771 	.word	0x0800b771
 800b750:	0800b779 	.word	0x0800b779
 800b754:	0800b781 	.word	0x0800b781
 800b758:	2302      	movs	r3, #2
 800b75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75e:	e01a      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b760:	2304      	movs	r3, #4
 800b762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b766:	e016      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b768:	2308      	movs	r3, #8
 800b76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76e:	e012      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b770:	2310      	movs	r3, #16
 800b772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b776:	e00e      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b778:	2320      	movs	r3, #32
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77e:	e00a      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b780:	2340      	movs	r3, #64	@ 0x40
 800b782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b786:	e006      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b788:	2380      	movs	r3, #128	@ 0x80
 800b78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78e:	e002      	b.n	800b796 <UART_SetConfig+0x5a6>
 800b790:	2380      	movs	r3, #128	@ 0x80
 800b792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a3f      	ldr	r2, [pc, #252]	@ (800b898 <UART_SetConfig+0x6a8>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	f040 80f8 	bne.w	800b992 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b7a6:	2b20      	cmp	r3, #32
 800b7a8:	dc46      	bgt.n	800b838 <UART_SetConfig+0x648>
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	f2c0 8082 	blt.w	800b8b4 <UART_SetConfig+0x6c4>
 800b7b0:	3b02      	subs	r3, #2
 800b7b2:	2b1e      	cmp	r3, #30
 800b7b4:	d87e      	bhi.n	800b8b4 <UART_SetConfig+0x6c4>
 800b7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7bc <UART_SetConfig+0x5cc>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b83f 	.word	0x0800b83f
 800b7c0:	0800b8b5 	.word	0x0800b8b5
 800b7c4:	0800b847 	.word	0x0800b847
 800b7c8:	0800b8b5 	.word	0x0800b8b5
 800b7cc:	0800b8b5 	.word	0x0800b8b5
 800b7d0:	0800b8b5 	.word	0x0800b8b5
 800b7d4:	0800b857 	.word	0x0800b857
 800b7d8:	0800b8b5 	.word	0x0800b8b5
 800b7dc:	0800b8b5 	.word	0x0800b8b5
 800b7e0:	0800b8b5 	.word	0x0800b8b5
 800b7e4:	0800b8b5 	.word	0x0800b8b5
 800b7e8:	0800b8b5 	.word	0x0800b8b5
 800b7ec:	0800b8b5 	.word	0x0800b8b5
 800b7f0:	0800b8b5 	.word	0x0800b8b5
 800b7f4:	0800b867 	.word	0x0800b867
 800b7f8:	0800b8b5 	.word	0x0800b8b5
 800b7fc:	0800b8b5 	.word	0x0800b8b5
 800b800:	0800b8b5 	.word	0x0800b8b5
 800b804:	0800b8b5 	.word	0x0800b8b5
 800b808:	0800b8b5 	.word	0x0800b8b5
 800b80c:	0800b8b5 	.word	0x0800b8b5
 800b810:	0800b8b5 	.word	0x0800b8b5
 800b814:	0800b8b5 	.word	0x0800b8b5
 800b818:	0800b8b5 	.word	0x0800b8b5
 800b81c:	0800b8b5 	.word	0x0800b8b5
 800b820:	0800b8b5 	.word	0x0800b8b5
 800b824:	0800b8b5 	.word	0x0800b8b5
 800b828:	0800b8b5 	.word	0x0800b8b5
 800b82c:	0800b8b5 	.word	0x0800b8b5
 800b830:	0800b8b5 	.word	0x0800b8b5
 800b834:	0800b8a7 	.word	0x0800b8a7
 800b838:	2b40      	cmp	r3, #64	@ 0x40
 800b83a:	d037      	beq.n	800b8ac <UART_SetConfig+0x6bc>
 800b83c:	e03a      	b.n	800b8b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b83e:	f7fd fe6f 	bl	8009520 <HAL_RCCEx_GetD3PCLK1Freq>
 800b842:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b844:	e03c      	b.n	800b8c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fd fe7e 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b854:	e034      	b.n	800b8c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b856:	f107 0318 	add.w	r3, r7, #24
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fd ffca 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b864:	e02c      	b.n	800b8c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b866:	4b09      	ldr	r3, [pc, #36]	@ (800b88c <UART_SetConfig+0x69c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0320 	and.w	r3, r3, #32
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d016      	beq.n	800b8a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b872:	4b06      	ldr	r3, [pc, #24]	@ (800b88c <UART_SetConfig+0x69c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	08db      	lsrs	r3, r3, #3
 800b878:	f003 0303 	and.w	r3, r3, #3
 800b87c:	4a07      	ldr	r2, [pc, #28]	@ (800b89c <UART_SetConfig+0x6ac>)
 800b87e:	fa22 f303 	lsr.w	r3, r2, r3
 800b882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b884:	e01c      	b.n	800b8c0 <UART_SetConfig+0x6d0>
 800b886:	bf00      	nop
 800b888:	40011400 	.word	0x40011400
 800b88c:	58024400 	.word	0x58024400
 800b890:	40007800 	.word	0x40007800
 800b894:	40007c00 	.word	0x40007c00
 800b898:	58000c00 	.word	0x58000c00
 800b89c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b8a0:	4b9d      	ldr	r3, [pc, #628]	@ (800bb18 <UART_SetConfig+0x928>)
 800b8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a4:	e00c      	b.n	800b8c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8a6:	4b9d      	ldr	r3, [pc, #628]	@ (800bb1c <UART_SetConfig+0x92c>)
 800b8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8aa:	e009      	b.n	800b8c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8b2:	e005      	b.n	800b8c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b8be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b8c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 81de 	beq.w	800bc84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8cc:	4a94      	ldr	r2, [pc, #592]	@ (800bb20 <UART_SetConfig+0x930>)
 800b8ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	005b      	lsls	r3, r3, #1
 800b8e4:	4413      	add	r3, r2
 800b8e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d305      	bcc.n	800b8f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d903      	bls.n	800b900 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b8fe:	e1c1      	b.n	800bc84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b902:	2200      	movs	r2, #0
 800b904:	60bb      	str	r3, [r7, #8]
 800b906:	60fa      	str	r2, [r7, #12]
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b90c:	4a84      	ldr	r2, [pc, #528]	@ (800bb20 <UART_SetConfig+0x930>)
 800b90e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b912:	b29b      	uxth	r3, r3
 800b914:	2200      	movs	r2, #0
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	607a      	str	r2, [r7, #4]
 800b91a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b91e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b922:	f7f4 fcef 	bl	8000304 <__aeabi_uldivmod>
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	4610      	mov	r0, r2
 800b92c:	4619      	mov	r1, r3
 800b92e:	f04f 0200 	mov.w	r2, #0
 800b932:	f04f 0300 	mov.w	r3, #0
 800b936:	020b      	lsls	r3, r1, #8
 800b938:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b93c:	0202      	lsls	r2, r0, #8
 800b93e:	6979      	ldr	r1, [r7, #20]
 800b940:	6849      	ldr	r1, [r1, #4]
 800b942:	0849      	lsrs	r1, r1, #1
 800b944:	2000      	movs	r0, #0
 800b946:	460c      	mov	r4, r1
 800b948:	4605      	mov	r5, r0
 800b94a:	eb12 0804 	adds.w	r8, r2, r4
 800b94e:	eb43 0905 	adc.w	r9, r3, r5
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	469a      	mov	sl, r3
 800b95a:	4693      	mov	fp, r2
 800b95c:	4652      	mov	r2, sl
 800b95e:	465b      	mov	r3, fp
 800b960:	4640      	mov	r0, r8
 800b962:	4649      	mov	r1, r9
 800b964:	f7f4 fcce 	bl	8000304 <__aeabi_uldivmod>
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	4613      	mov	r3, r2
 800b96e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b976:	d308      	bcc.n	800b98a <UART_SetConfig+0x79a>
 800b978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b97e:	d204      	bcs.n	800b98a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b986:	60da      	str	r2, [r3, #12]
 800b988:	e17c      	b.n	800bc84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b990:	e178      	b.n	800bc84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b99a:	f040 80c5 	bne.w	800bb28 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b99e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9a2:	2b20      	cmp	r3, #32
 800b9a4:	dc48      	bgt.n	800ba38 <UART_SetConfig+0x848>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	db7b      	blt.n	800baa2 <UART_SetConfig+0x8b2>
 800b9aa:	2b20      	cmp	r3, #32
 800b9ac:	d879      	bhi.n	800baa2 <UART_SetConfig+0x8b2>
 800b9ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b4 <UART_SetConfig+0x7c4>)
 800b9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b4:	0800ba3f 	.word	0x0800ba3f
 800b9b8:	0800ba47 	.word	0x0800ba47
 800b9bc:	0800baa3 	.word	0x0800baa3
 800b9c0:	0800baa3 	.word	0x0800baa3
 800b9c4:	0800ba4f 	.word	0x0800ba4f
 800b9c8:	0800baa3 	.word	0x0800baa3
 800b9cc:	0800baa3 	.word	0x0800baa3
 800b9d0:	0800baa3 	.word	0x0800baa3
 800b9d4:	0800ba5f 	.word	0x0800ba5f
 800b9d8:	0800baa3 	.word	0x0800baa3
 800b9dc:	0800baa3 	.word	0x0800baa3
 800b9e0:	0800baa3 	.word	0x0800baa3
 800b9e4:	0800baa3 	.word	0x0800baa3
 800b9e8:	0800baa3 	.word	0x0800baa3
 800b9ec:	0800baa3 	.word	0x0800baa3
 800b9f0:	0800baa3 	.word	0x0800baa3
 800b9f4:	0800ba6f 	.word	0x0800ba6f
 800b9f8:	0800baa3 	.word	0x0800baa3
 800b9fc:	0800baa3 	.word	0x0800baa3
 800ba00:	0800baa3 	.word	0x0800baa3
 800ba04:	0800baa3 	.word	0x0800baa3
 800ba08:	0800baa3 	.word	0x0800baa3
 800ba0c:	0800baa3 	.word	0x0800baa3
 800ba10:	0800baa3 	.word	0x0800baa3
 800ba14:	0800baa3 	.word	0x0800baa3
 800ba18:	0800baa3 	.word	0x0800baa3
 800ba1c:	0800baa3 	.word	0x0800baa3
 800ba20:	0800baa3 	.word	0x0800baa3
 800ba24:	0800baa3 	.word	0x0800baa3
 800ba28:	0800baa3 	.word	0x0800baa3
 800ba2c:	0800baa3 	.word	0x0800baa3
 800ba30:	0800baa3 	.word	0x0800baa3
 800ba34:	0800ba95 	.word	0x0800ba95
 800ba38:	2b40      	cmp	r3, #64	@ 0x40
 800ba3a:	d02e      	beq.n	800ba9a <UART_SetConfig+0x8aa>
 800ba3c:	e031      	b.n	800baa2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba3e:	f7fb fd77 	bl	8007530 <HAL_RCC_GetPCLK1Freq>
 800ba42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba44:	e033      	b.n	800baae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba46:	f7fb fd89 	bl	800755c <HAL_RCC_GetPCLK2Freq>
 800ba4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba4c:	e02f      	b.n	800baae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fd fd7a 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba5c:	e027      	b.n	800baae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba5e:	f107 0318 	add.w	r3, r7, #24
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fd fec6 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba6c:	e01f      	b.n	800baae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba6e:	4b2d      	ldr	r3, [pc, #180]	@ (800bb24 <UART_SetConfig+0x934>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f003 0320 	and.w	r3, r3, #32
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d009      	beq.n	800ba8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba7a:	4b2a      	ldr	r3, [pc, #168]	@ (800bb24 <UART_SetConfig+0x934>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	08db      	lsrs	r3, r3, #3
 800ba80:	f003 0303 	and.w	r3, r3, #3
 800ba84:	4a24      	ldr	r2, [pc, #144]	@ (800bb18 <UART_SetConfig+0x928>)
 800ba86:	fa22 f303 	lsr.w	r3, r2, r3
 800ba8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba8c:	e00f      	b.n	800baae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ba8e:	4b22      	ldr	r3, [pc, #136]	@ (800bb18 <UART_SetConfig+0x928>)
 800ba90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba92:	e00c      	b.n	800baae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba94:	4b21      	ldr	r3, [pc, #132]	@ (800bb1c <UART_SetConfig+0x92c>)
 800ba96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba98:	e009      	b.n	800baae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa0:	e005      	b.n	800baae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800baa2:	2300      	movs	r3, #0
 800baa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800baac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 80e7 	beq.w	800bc84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baba:	4a19      	ldr	r2, [pc, #100]	@ (800bb20 <UART_SetConfig+0x930>)
 800babc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bac0:	461a      	mov	r2, r3
 800bac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bac8:	005a      	lsls	r2, r3, #1
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	085b      	lsrs	r3, r3, #1
 800bad0:	441a      	add	r2, r3
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bada:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800badc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bade:	2b0f      	cmp	r3, #15
 800bae0:	d916      	bls.n	800bb10 <UART_SetConfig+0x920>
 800bae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bae8:	d212      	bcs.n	800bb10 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800baea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baec:	b29b      	uxth	r3, r3
 800baee:	f023 030f 	bic.w	r3, r3, #15
 800baf2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf6:	085b      	lsrs	r3, r3, #1
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	f003 0307 	and.w	r3, r3, #7
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb02:	4313      	orrs	r3, r2
 800bb04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bb0c:	60da      	str	r2, [r3, #12]
 800bb0e:	e0b9      	b.n	800bc84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb16:	e0b5      	b.n	800bc84 <UART_SetConfig+0xa94>
 800bb18:	03d09000 	.word	0x03d09000
 800bb1c:	003d0900 	.word	0x003d0900
 800bb20:	080135f0 	.word	0x080135f0
 800bb24:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb2c:	2b20      	cmp	r3, #32
 800bb2e:	dc49      	bgt.n	800bbc4 <UART_SetConfig+0x9d4>
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	db7c      	blt.n	800bc2e <UART_SetConfig+0xa3e>
 800bb34:	2b20      	cmp	r3, #32
 800bb36:	d87a      	bhi.n	800bc2e <UART_SetConfig+0xa3e>
 800bb38:	a201      	add	r2, pc, #4	@ (adr r2, 800bb40 <UART_SetConfig+0x950>)
 800bb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3e:	bf00      	nop
 800bb40:	0800bbcb 	.word	0x0800bbcb
 800bb44:	0800bbd3 	.word	0x0800bbd3
 800bb48:	0800bc2f 	.word	0x0800bc2f
 800bb4c:	0800bc2f 	.word	0x0800bc2f
 800bb50:	0800bbdb 	.word	0x0800bbdb
 800bb54:	0800bc2f 	.word	0x0800bc2f
 800bb58:	0800bc2f 	.word	0x0800bc2f
 800bb5c:	0800bc2f 	.word	0x0800bc2f
 800bb60:	0800bbeb 	.word	0x0800bbeb
 800bb64:	0800bc2f 	.word	0x0800bc2f
 800bb68:	0800bc2f 	.word	0x0800bc2f
 800bb6c:	0800bc2f 	.word	0x0800bc2f
 800bb70:	0800bc2f 	.word	0x0800bc2f
 800bb74:	0800bc2f 	.word	0x0800bc2f
 800bb78:	0800bc2f 	.word	0x0800bc2f
 800bb7c:	0800bc2f 	.word	0x0800bc2f
 800bb80:	0800bbfb 	.word	0x0800bbfb
 800bb84:	0800bc2f 	.word	0x0800bc2f
 800bb88:	0800bc2f 	.word	0x0800bc2f
 800bb8c:	0800bc2f 	.word	0x0800bc2f
 800bb90:	0800bc2f 	.word	0x0800bc2f
 800bb94:	0800bc2f 	.word	0x0800bc2f
 800bb98:	0800bc2f 	.word	0x0800bc2f
 800bb9c:	0800bc2f 	.word	0x0800bc2f
 800bba0:	0800bc2f 	.word	0x0800bc2f
 800bba4:	0800bc2f 	.word	0x0800bc2f
 800bba8:	0800bc2f 	.word	0x0800bc2f
 800bbac:	0800bc2f 	.word	0x0800bc2f
 800bbb0:	0800bc2f 	.word	0x0800bc2f
 800bbb4:	0800bc2f 	.word	0x0800bc2f
 800bbb8:	0800bc2f 	.word	0x0800bc2f
 800bbbc:	0800bc2f 	.word	0x0800bc2f
 800bbc0:	0800bc21 	.word	0x0800bc21
 800bbc4:	2b40      	cmp	r3, #64	@ 0x40
 800bbc6:	d02e      	beq.n	800bc26 <UART_SetConfig+0xa36>
 800bbc8:	e031      	b.n	800bc2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbca:	f7fb fcb1 	bl	8007530 <HAL_RCC_GetPCLK1Freq>
 800bbce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbd0:	e033      	b.n	800bc3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbd2:	f7fb fcc3 	bl	800755c <HAL_RCC_GetPCLK2Freq>
 800bbd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbd8:	e02f      	b.n	800bc3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fd fcb4 	bl	800954c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe8:	e027      	b.n	800bc3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbea:	f107 0318 	add.w	r3, r7, #24
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fd fe00 	bl	80097f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbf8:	e01f      	b.n	800bc3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbfa:	4b2d      	ldr	r3, [pc, #180]	@ (800bcb0 <UART_SetConfig+0xac0>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 0320 	and.w	r3, r3, #32
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d009      	beq.n	800bc1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc06:	4b2a      	ldr	r3, [pc, #168]	@ (800bcb0 <UART_SetConfig+0xac0>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	08db      	lsrs	r3, r3, #3
 800bc0c:	f003 0303 	and.w	r3, r3, #3
 800bc10:	4a28      	ldr	r2, [pc, #160]	@ (800bcb4 <UART_SetConfig+0xac4>)
 800bc12:	fa22 f303 	lsr.w	r3, r2, r3
 800bc16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc18:	e00f      	b.n	800bc3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bc1a:	4b26      	ldr	r3, [pc, #152]	@ (800bcb4 <UART_SetConfig+0xac4>)
 800bc1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc1e:	e00c      	b.n	800bc3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc20:	4b25      	ldr	r3, [pc, #148]	@ (800bcb8 <UART_SetConfig+0xac8>)
 800bc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc24:	e009      	b.n	800bc3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc2c:	e005      	b.n	800bc3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc38:	bf00      	nop
    }

    if (pclk != 0U)
 800bc3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d021      	beq.n	800bc84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc44:	4a1d      	ldr	r2, [pc, #116]	@ (800bcbc <UART_SetConfig+0xacc>)
 800bc46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	085b      	lsrs	r3, r3, #1
 800bc58:	441a      	add	r2, r3
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc66:	2b0f      	cmp	r3, #15
 800bc68:	d909      	bls.n	800bc7e <UART_SetConfig+0xa8e>
 800bc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc70:	d205      	bcs.n	800bc7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	60da      	str	r2, [r3, #12]
 800bc7c:	e002      	b.n	800bc84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	2200      	movs	r2, #0
 800bc98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bca0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3748      	adds	r7, #72	@ 0x48
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcae:	bf00      	nop
 800bcb0:	58024400 	.word	0x58024400
 800bcb4:	03d09000 	.word	0x03d09000
 800bcb8:	003d0900 	.word	0x003d0900
 800bcbc:	080135f0 	.word	0x080135f0

0800bcc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bccc:	f003 0308 	and.w	r3, r3, #8
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00a      	beq.n	800bcea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcee:	f003 0301 	and.w	r3, r3, #1
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00a      	beq.n	800bd0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00a      	beq.n	800bd2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd32:	f003 0304 	and.w	r3, r3, #4
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	430a      	orrs	r2, r1
 800bd4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd54:	f003 0310 	and.w	r3, r3, #16
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00a      	beq.n	800bd72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd76:	f003 0320 	and.w	r3, r3, #32
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d01a      	beq.n	800bdd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdbe:	d10a      	bne.n	800bdd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	430a      	orrs	r2, r1
 800bdd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00a      	beq.n	800bdf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	605a      	str	r2, [r3, #4]
  }
}
 800bdf8:	bf00      	nop
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b098      	sub	sp, #96	@ 0x60
 800be08:	af02      	add	r7, sp, #8
 800be0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be14:	f7f5 ff66 	bl	8001ce4 <HAL_GetTick>
 800be18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 0308 	and.w	r3, r3, #8
 800be24:	2b08      	cmp	r3, #8
 800be26:	d12f      	bne.n	800be88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be30:	2200      	movs	r2, #0
 800be32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f88e 	bl	800bf58 <UART_WaitOnFlagUntilTimeout>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d022      	beq.n	800be88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4a:	e853 3f00 	ldrex	r3, [r3]
 800be4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be56:	653b      	str	r3, [r7, #80]	@ 0x50
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	461a      	mov	r2, r3
 800be5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be60:	647b      	str	r3, [r7, #68]	@ 0x44
 800be62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be68:	e841 2300 	strex	r3, r2, [r1]
 800be6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e6      	bne.n	800be42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2220      	movs	r2, #32
 800be78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e063      	b.n	800bf50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 0304 	and.w	r3, r3, #4
 800be92:	2b04      	cmp	r3, #4
 800be94:	d149      	bne.n	800bf2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be9e:	2200      	movs	r2, #0
 800bea0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 f857 	bl	800bf58 <UART_WaitOnFlagUntilTimeout>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d03c      	beq.n	800bf2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb8:	e853 3f00 	ldrex	r3, [r3]
 800bebc:	623b      	str	r3, [r7, #32]
   return(result);
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bece:	633b      	str	r3, [r7, #48]	@ 0x30
 800bed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bed6:	e841 2300 	strex	r3, r2, [r1]
 800beda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1e6      	bne.n	800beb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3308      	adds	r3, #8
 800bee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	e853 3f00 	ldrex	r3, [r3]
 800bef0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f023 0301 	bic.w	r3, r3, #1
 800bef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3308      	adds	r3, #8
 800bf00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf02:	61fa      	str	r2, [r7, #28]
 800bf04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf06:	69b9      	ldr	r1, [r7, #24]
 800bf08:	69fa      	ldr	r2, [r7, #28]
 800bf0a:	e841 2300 	strex	r3, r2, [r1]
 800bf0e:	617b      	str	r3, [r7, #20]
   return(result);
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1e5      	bne.n	800bee2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2220      	movs	r2, #32
 800bf1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf26:	2303      	movs	r3, #3
 800bf28:	e012      	b.n	800bf50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2220      	movs	r2, #32
 800bf2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2220      	movs	r2, #32
 800bf36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3758      	adds	r7, #88	@ 0x58
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	603b      	str	r3, [r7, #0]
 800bf64:	4613      	mov	r3, r2
 800bf66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf68:	e04f      	b.n	800c00a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf70:	d04b      	beq.n	800c00a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf72:	f7f5 feb7 	bl	8001ce4 <HAL_GetTick>
 800bf76:	4602      	mov	r2, r0
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	69ba      	ldr	r2, [r7, #24]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d302      	bcc.n	800bf88 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	e04e      	b.n	800c02a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 0304 	and.w	r3, r3, #4
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d037      	beq.n	800c00a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	2b80      	cmp	r3, #128	@ 0x80
 800bf9e:	d034      	beq.n	800c00a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2b40      	cmp	r3, #64	@ 0x40
 800bfa4:	d031      	beq.n	800c00a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	69db      	ldr	r3, [r3, #28]
 800bfac:	f003 0308 	and.w	r3, r3, #8
 800bfb0:	2b08      	cmp	r3, #8
 800bfb2:	d110      	bne.n	800bfd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2208      	movs	r2, #8
 800bfba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f000 f921 	bl	800c204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2208      	movs	r2, #8
 800bfc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e029      	b.n	800c02a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfe4:	d111      	bne.n	800c00a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f000 f907 	bl	800c204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2220      	movs	r2, #32
 800bffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e00f      	b.n	800c02a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	69da      	ldr	r2, [r3, #28]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	4013      	ands	r3, r2
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	429a      	cmp	r2, r3
 800c018:	bf0c      	ite	eq
 800c01a:	2301      	moveq	r3, #1
 800c01c:	2300      	movne	r3, #0
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	461a      	mov	r2, r3
 800c022:	79fb      	ldrb	r3, [r7, #7]
 800c024:	429a      	cmp	r2, r3
 800c026:	d0a0      	beq.n	800bf6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b096      	sub	sp, #88	@ 0x58
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	4613      	mov	r3, r2
 800c040:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	88fa      	ldrh	r2, [r7, #6]
 800c04c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2222      	movs	r2, #34	@ 0x22
 800c05c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c066:	2b00      	cmp	r3, #0
 800c068:	d02d      	beq.n	800c0c6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c070:	4a40      	ldr	r2, [pc, #256]	@ (800c174 <UART_Start_Receive_DMA+0x140>)
 800c072:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c07a:	4a3f      	ldr	r2, [pc, #252]	@ (800c178 <UART_Start_Receive_DMA+0x144>)
 800c07c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c084:	4a3d      	ldr	r2, [pc, #244]	@ (800c17c <UART_Start_Receive_DMA+0x148>)
 800c086:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c08e:	2200      	movs	r2, #0
 800c090:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	3324      	adds	r3, #36	@ 0x24
 800c09e:	4619      	mov	r1, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	88fb      	ldrh	r3, [r7, #6]
 800c0a8:	f7f7 fd8a 	bl	8003bc0 <HAL_DMA_Start_IT>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d009      	beq.n	800c0c6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2210      	movs	r2, #16
 800c0b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2220      	movs	r2, #32
 800c0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e051      	b.n	800c16a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d018      	beq.n	800c100 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d6:	e853 3f00 	ldrex	r3, [r3]
 800c0da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0e2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0ee:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c0f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0f4:	e841 2300 	strex	r3, r2, [r1]
 800c0f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c0fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1e6      	bne.n	800c0ce <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3308      	adds	r3, #8
 800c106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10a:	e853 3f00 	ldrex	r3, [r3]
 800c10e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	f043 0301 	orr.w	r3, r3, #1
 800c116:	653b      	str	r3, [r7, #80]	@ 0x50
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	3308      	adds	r3, #8
 800c11e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c120:	637a      	str	r2, [r7, #52]	@ 0x34
 800c122:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c124:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c128:	e841 2300 	strex	r3, r2, [r1]
 800c12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1e5      	bne.n	800c100 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3308      	adds	r3, #8
 800c13a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	613b      	str	r3, [r7, #16]
   return(result);
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c14a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3308      	adds	r3, #8
 800c152:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c154:	623a      	str	r2, [r7, #32]
 800c156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	69f9      	ldr	r1, [r7, #28]
 800c15a:	6a3a      	ldr	r2, [r7, #32]
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	61bb      	str	r3, [r7, #24]
   return(result);
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e5      	bne.n	800c134 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3758      	adds	r7, #88	@ 0x58
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	0800c383 	.word	0x0800c383
 800c178:	0800c4ab 	.word	0x0800c4ab
 800c17c:	0800c4e9 	.word	0x0800c4e9

0800c180 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c180:	b480      	push	{r7}
 800c182:	b08f      	sub	sp, #60	@ 0x3c
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	e853 3f00 	ldrex	r3, [r3]
 800c194:	61fb      	str	r3, [r7, #28]
   return(result);
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c19c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1a8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1ae:	e841 2300 	strex	r3, r2, [r1]
 800c1b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1e6      	bne.n	800c188 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	3308      	adds	r3, #8
 800c1c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	e853 3f00 	ldrex	r3, [r3]
 800c1c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c1d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1da:	61ba      	str	r2, [r7, #24]
 800c1dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1de:	6979      	ldr	r1, [r7, #20]
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	e841 2300 	strex	r3, r2, [r1]
 800c1e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1e5      	bne.n	800c1ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2220      	movs	r2, #32
 800c1f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c1f6:	bf00      	nop
 800c1f8:	373c      	adds	r7, #60	@ 0x3c
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
	...

0800c204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c204:	b480      	push	{r7}
 800c206:	b095      	sub	sp, #84	@ 0x54
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c214:	e853 3f00 	ldrex	r3, [r3]
 800c218:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c21c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c22a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c22c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c230:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c232:	e841 2300 	strex	r3, r2, [r1]
 800c236:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1e6      	bne.n	800c20c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3308      	adds	r3, #8
 800c244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c24e:	69fa      	ldr	r2, [r7, #28]
 800c250:	4b1e      	ldr	r3, [pc, #120]	@ (800c2cc <UART_EndRxTransfer+0xc8>)
 800c252:	4013      	ands	r3, r2
 800c254:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3308      	adds	r3, #8
 800c25c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c25e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c260:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c262:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c266:	e841 2300 	strex	r3, r2, [r1]
 800c26a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1e5      	bne.n	800c23e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c276:	2b01      	cmp	r3, #1
 800c278:	d118      	bne.n	800c2ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	e853 3f00 	ldrex	r3, [r3]
 800c286:	60bb      	str	r3, [r7, #8]
   return(result);
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	f023 0310 	bic.w	r3, r3, #16
 800c28e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	461a      	mov	r2, r3
 800c296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c298:	61bb      	str	r3, [r7, #24]
 800c29a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c29c:	6979      	ldr	r1, [r7, #20]
 800c29e:	69ba      	ldr	r2, [r7, #24]
 800c2a0:	e841 2300 	strex	r3, r2, [r1]
 800c2a4:	613b      	str	r3, [r7, #16]
   return(result);
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1e6      	bne.n	800c27a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2220      	movs	r2, #32
 800c2b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c2c0:	bf00      	nop
 800c2c2:	3754      	adds	r7, #84	@ 0x54
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	effffffe 	.word	0xeffffffe

0800c2d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b090      	sub	sp, #64	@ 0x40
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	69db      	ldr	r3, [r3, #28]
 800c2e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2e6:	d037      	beq.n	800c358 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fa:	e853 3f00 	ldrex	r3, [r3]
 800c2fe:	623b      	str	r3, [r7, #32]
   return(result);
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c306:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3308      	adds	r3, #8
 800c30e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c310:	633a      	str	r2, [r7, #48]	@ 0x30
 800c312:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c314:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c318:	e841 2300 	strex	r3, r2, [r1]
 800c31c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1e5      	bne.n	800c2f0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	e853 3f00 	ldrex	r3, [r3]
 800c330:	60fb      	str	r3, [r7, #12]
   return(result);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c338:	637b      	str	r3, [r7, #52]	@ 0x34
 800c33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	461a      	mov	r2, r3
 800c340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c342:	61fb      	str	r3, [r7, #28]
 800c344:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c346:	69b9      	ldr	r1, [r7, #24]
 800c348:	69fa      	ldr	r2, [r7, #28]
 800c34a:	e841 2300 	strex	r3, r2, [r1]
 800c34e:	617b      	str	r3, [r7, #20]
   return(result);
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1e6      	bne.n	800c324 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c356:	e002      	b.n	800c35e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c358:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c35a:	f7fe ff0b 	bl	800b174 <HAL_UART_TxCpltCallback>
}
 800c35e:	bf00      	nop
 800c360:	3740      	adds	r7, #64	@ 0x40
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c372:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7fe ff07 	bl	800b188 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c37a:	bf00      	nop
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b09c      	sub	sp, #112	@ 0x70
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c38e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	69db      	ldr	r3, [r3, #28]
 800c394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c398:	d071      	beq.n	800c47e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c39a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c39c:	2200      	movs	r2, #0
 800c39e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3aa:	e853 3f00 	ldrex	r3, [r3]
 800c3ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c3b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c3c2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c3c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c3c8:	e841 2300 	strex	r3, r2, [r1]
 800c3cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c3ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1e6      	bne.n	800c3a2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3308      	adds	r3, #8
 800c3da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3de:	e853 3f00 	ldrex	r3, [r3]
 800c3e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3e6:	f023 0301 	bic.w	r3, r3, #1
 800c3ea:	667b      	str	r3, [r7, #100]	@ 0x64
 800c3ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c3f4:	647a      	str	r2, [r7, #68]	@ 0x44
 800c3f6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3fc:	e841 2300 	strex	r3, r2, [r1]
 800c400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e5      	bne.n	800c3d4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3308      	adds	r3, #8
 800c40e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c412:	e853 3f00 	ldrex	r3, [r3]
 800c416:	623b      	str	r3, [r7, #32]
   return(result);
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c41e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3308      	adds	r3, #8
 800c426:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c428:	633a      	str	r2, [r7, #48]	@ 0x30
 800c42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c42e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c430:	e841 2300 	strex	r3, r2, [r1]
 800c434:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1e5      	bne.n	800c408 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c43c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c43e:	2220      	movs	r2, #32
 800c440:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d118      	bne.n	800c47e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c44c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	e853 3f00 	ldrex	r3, [r3]
 800c458:	60fb      	str	r3, [r7, #12]
   return(result);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f023 0310 	bic.w	r3, r3, #16
 800c460:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c46a:	61fb      	str	r3, [r7, #28]
 800c46c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46e:	69b9      	ldr	r1, [r7, #24]
 800c470:	69fa      	ldr	r2, [r7, #28]
 800c472:	e841 2300 	strex	r3, r2, [r1]
 800c476:	617b      	str	r3, [r7, #20]
   return(result);
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1e6      	bne.n	800c44c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c47e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c480:	2200      	movs	r2, #0
 800c482:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d107      	bne.n	800c49c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c48c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c48e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c492:	4619      	mov	r1, r3
 800c494:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c496:	f7fe fe9f 	bl	800b1d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c49a:	e002      	b.n	800c4a2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c49c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c49e:	f7fe fe7d 	bl	800b19c <HAL_UART_RxCpltCallback>
}
 800c4a2:	bf00      	nop
 800c4a4:	3770      	adds	r7, #112	@ 0x70
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d109      	bne.n	800c4da <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4cc:	085b      	lsrs	r3, r3, #1
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f7fe fe80 	bl	800b1d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4d8:	e002      	b.n	800c4e0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7fe fe68 	bl	800b1b0 <HAL_UART_RxHalfCpltCallback>
}
 800c4e0:	bf00      	nop
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c504:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c510:	2b80      	cmp	r3, #128	@ 0x80
 800c512:	d109      	bne.n	800c528 <UART_DMAError+0x40>
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	2b21      	cmp	r3, #33	@ 0x21
 800c518:	d106      	bne.n	800c528 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c522:	6978      	ldr	r0, [r7, #20]
 800c524:	f7ff fe2c 	bl	800c180 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c532:	2b40      	cmp	r3, #64	@ 0x40
 800c534:	d109      	bne.n	800c54a <UART_DMAError+0x62>
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2b22      	cmp	r3, #34	@ 0x22
 800c53a:	d106      	bne.n	800c54a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	2200      	movs	r2, #0
 800c540:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c544:	6978      	ldr	r0, [r7, #20]
 800c546:	f7ff fe5d 	bl	800c204 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c550:	f043 0210 	orr.w	r2, r3, #16
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c55a:	6978      	ldr	r0, [r7, #20]
 800c55c:	f7fe fe32 	bl	800b1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c560:	bf00      	nop
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2200      	movs	r2, #0
 800c582:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7fe fe1c 	bl	800b1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c58c:	bf00      	nop
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5b0:	61fb      	str	r3, [r7, #28]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	61bb      	str	r3, [r7, #24]
 800c5bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5be:	6979      	ldr	r1, [r7, #20]
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	e841 2300 	strex	r3, r2, [r1]
 800c5c6:	613b      	str	r3, [r7, #16]
   return(result);
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1e6      	bne.n	800c59c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2220      	movs	r2, #32
 800c5d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7fe fdc9 	bl	800b174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e2:	bf00      	nop
 800c5e4:	3720      	adds	r7, #32
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c5f2:	bf00      	nop
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b083      	sub	sp, #12
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c612:	b480      	push	{r7}
 800c614:	b083      	sub	sp, #12
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c61a:	bf00      	nop
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c626:	b480      	push	{r7}
 800c628:	b085      	sub	sp, #20
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c634:	2b01      	cmp	r3, #1
 800c636:	d101      	bne.n	800c63c <HAL_UARTEx_DisableFifoMode+0x16>
 800c638:	2302      	movs	r3, #2
 800c63a:	e027      	b.n	800c68c <HAL_UARTEx_DisableFifoMode+0x66>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2224      	movs	r2, #36	@ 0x24
 800c648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f022 0201 	bic.w	r2, r2, #1
 800c662:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c66a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2220      	movs	r2, #32
 800c67e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d101      	bne.n	800c6b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	e02d      	b.n	800c70c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2224      	movs	r2, #36	@ 0x24
 800c6bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f022 0201 	bic.w	r2, r2, #1
 800c6d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	430a      	orrs	r2, r1
 800c6ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f84f 	bl	800c790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2220      	movs	r2, #32
 800c6fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c724:	2b01      	cmp	r3, #1
 800c726:	d101      	bne.n	800c72c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c728:	2302      	movs	r3, #2
 800c72a:	e02d      	b.n	800c788 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2224      	movs	r2, #36	@ 0x24
 800c738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f022 0201 	bic.w	r2, r2, #1
 800c752:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	430a      	orrs	r2, r1
 800c766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f811 	bl	800c790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2220      	movs	r2, #32
 800c77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d108      	bne.n	800c7b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c7b0:	e031      	b.n	800c816 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c7b2:	2310      	movs	r3, #16
 800c7b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c7b6:	2310      	movs	r3, #16
 800c7b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	0e5b      	lsrs	r3, r3, #25
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	f003 0307 	and.w	r3, r3, #7
 800c7c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	0f5b      	lsrs	r3, r3, #29
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	f003 0307 	and.w	r3, r3, #7
 800c7d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7da:	7bbb      	ldrb	r3, [r7, #14]
 800c7dc:	7b3a      	ldrb	r2, [r7, #12]
 800c7de:	4911      	ldr	r1, [pc, #68]	@ (800c824 <UARTEx_SetNbDataToProcess+0x94>)
 800c7e0:	5c8a      	ldrb	r2, [r1, r2]
 800c7e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c7e6:	7b3a      	ldrb	r2, [r7, #12]
 800c7e8:	490f      	ldr	r1, [pc, #60]	@ (800c828 <UARTEx_SetNbDataToProcess+0x98>)
 800c7ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	7b7a      	ldrb	r2, [r7, #13]
 800c7fc:	4909      	ldr	r1, [pc, #36]	@ (800c824 <UARTEx_SetNbDataToProcess+0x94>)
 800c7fe:	5c8a      	ldrb	r2, [r1, r2]
 800c800:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c804:	7b7a      	ldrb	r2, [r7, #13]
 800c806:	4908      	ldr	r1, [pc, #32]	@ (800c828 <UARTEx_SetNbDataToProcess+0x98>)
 800c808:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c80a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c80e:	b29a      	uxth	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c816:	bf00      	nop
 800c818:	3714      	adds	r7, #20
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	08013608 	.word	0x08013608
 800c828:	08013610 	.word	0x08013610

0800c82c <__NVIC_SetPriority>:
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	4603      	mov	r3, r0
 800c834:	6039      	str	r1, [r7, #0]
 800c836:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	db0a      	blt.n	800c856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	b2da      	uxtb	r2, r3
 800c844:	490c      	ldr	r1, [pc, #48]	@ (800c878 <__NVIC_SetPriority+0x4c>)
 800c846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c84a:	0112      	lsls	r2, r2, #4
 800c84c:	b2d2      	uxtb	r2, r2
 800c84e:	440b      	add	r3, r1
 800c850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c854:	e00a      	b.n	800c86c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	4908      	ldr	r1, [pc, #32]	@ (800c87c <__NVIC_SetPriority+0x50>)
 800c85c:	88fb      	ldrh	r3, [r7, #6]
 800c85e:	f003 030f 	and.w	r3, r3, #15
 800c862:	3b04      	subs	r3, #4
 800c864:	0112      	lsls	r2, r2, #4
 800c866:	b2d2      	uxtb	r2, r2
 800c868:	440b      	add	r3, r1
 800c86a:	761a      	strb	r2, [r3, #24]
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	e000e100 	.word	0xe000e100
 800c87c:	e000ed00 	.word	0xe000ed00

0800c880 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c884:	4b05      	ldr	r3, [pc, #20]	@ (800c89c <SysTick_Handler+0x1c>)
 800c886:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c888:	f001 fe50 	bl	800e52c <xTaskGetSchedulerState>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d001      	beq.n	800c896 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c892:	f002 fdf1 	bl	800f478 <xPortSysTickHandler>
  }
}
 800c896:	bf00      	nop
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	e000e010 	.word	0xe000e010

0800c8a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	f06f 0004 	mvn.w	r0, #4
 800c8aa:	f7ff ffbf 	bl	800c82c <__NVIC_SetPriority>
#endif
}
 800c8ae:	bf00      	nop
 800c8b0:	bd80      	pop	{r7, pc}
	...

0800c8b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8ba:	f3ef 8305 	mrs	r3, IPSR
 800c8be:	603b      	str	r3, [r7, #0]
  return(result);
 800c8c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d003      	beq.n	800c8ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c8c6:	f06f 0305 	mvn.w	r3, #5
 800c8ca:	607b      	str	r3, [r7, #4]
 800c8cc:	e00c      	b.n	800c8e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f8 <osKernelInitialize+0x44>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d105      	bne.n	800c8e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c8d6:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <osKernelInitialize+0x44>)
 800c8d8:	2201      	movs	r2, #1
 800c8da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	607b      	str	r3, [r7, #4]
 800c8e0:	e002      	b.n	800c8e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c8e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8e8:	687b      	ldr	r3, [r7, #4]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	370c      	adds	r7, #12
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	2400186c 	.word	0x2400186c

0800c8fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c902:	f3ef 8305 	mrs	r3, IPSR
 800c906:	603b      	str	r3, [r7, #0]
  return(result);
 800c908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c90e:	f06f 0305 	mvn.w	r3, #5
 800c912:	607b      	str	r3, [r7, #4]
 800c914:	e010      	b.n	800c938 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c916:	4b0b      	ldr	r3, [pc, #44]	@ (800c944 <osKernelStart+0x48>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d109      	bne.n	800c932 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c91e:	f7ff ffbf 	bl	800c8a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c922:	4b08      	ldr	r3, [pc, #32]	@ (800c944 <osKernelStart+0x48>)
 800c924:	2202      	movs	r2, #2
 800c926:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c928:	f001 f99c 	bl	800dc64 <vTaskStartScheduler>
      stat = osOK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	607b      	str	r3, [r7, #4]
 800c930:	e002      	b.n	800c938 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c936:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c938:	687b      	ldr	r3, [r7, #4]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	2400186c 	.word	0x2400186c

0800c948 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08e      	sub	sp, #56	@ 0x38
 800c94c:	af04      	add	r7, sp, #16
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c954:	2300      	movs	r3, #0
 800c956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c958:	f3ef 8305 	mrs	r3, IPSR
 800c95c:	617b      	str	r3, [r7, #20]
  return(result);
 800c95e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c960:	2b00      	cmp	r3, #0
 800c962:	d17e      	bne.n	800ca62 <osThreadNew+0x11a>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d07b      	beq.n	800ca62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c96a:	2380      	movs	r3, #128	@ 0x80
 800c96c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c96e:	2318      	movs	r3, #24
 800c970:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c972:	2300      	movs	r3, #0
 800c974:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c97a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d045      	beq.n	800ca0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d002      	beq.n	800c990 <osThreadNew+0x48>
        name = attr->name;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d008      	beq.n	800c9b6 <osThreadNew+0x6e>
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	2b38      	cmp	r3, #56	@ 0x38
 800c9a8:	d805      	bhi.n	800c9b6 <osThreadNew+0x6e>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	f003 0301 	and.w	r3, r3, #1
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <osThreadNew+0x72>
        return (NULL);
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e054      	b.n	800ca64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d003      	beq.n	800c9ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	089b      	lsrs	r3, r3, #2
 800c9c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00e      	beq.n	800c9f0 <osThreadNew+0xa8>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	2ba7      	cmp	r3, #167	@ 0xa7
 800c9d8:	d90a      	bls.n	800c9f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d006      	beq.n	800c9f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	695b      	ldr	r3, [r3, #20]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <osThreadNew+0xa8>
        mem = 1;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	61bb      	str	r3, [r7, #24]
 800c9ee:	e010      	b.n	800ca12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10c      	bne.n	800ca12 <osThreadNew+0xca>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d108      	bne.n	800ca12 <osThreadNew+0xca>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d104      	bne.n	800ca12 <osThreadNew+0xca>
          mem = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	61bb      	str	r3, [r7, #24]
 800ca0c:	e001      	b.n	800ca12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d110      	bne.n	800ca3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca20:	9202      	str	r2, [sp, #8]
 800ca22:	9301      	str	r3, [sp, #4]
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	6a3a      	ldr	r2, [r7, #32]
 800ca2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f000 ff5a 	bl	800d8e8 <xTaskCreateStatic>
 800ca34:	4603      	mov	r3, r0
 800ca36:	613b      	str	r3, [r7, #16]
 800ca38:	e013      	b.n	800ca62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d110      	bne.n	800ca62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ca40:	6a3b      	ldr	r3, [r7, #32]
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	f107 0310 	add.w	r3, r7, #16
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f000 ffa8 	bl	800d9a8 <xTaskCreate>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d001      	beq.n	800ca62 <osThreadNew+0x11a>
            hTask = NULL;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ca62:	693b      	ldr	r3, [r7, #16]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3728      	adds	r7, #40	@ 0x28
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b088      	sub	sp, #32
 800ca70:	af02      	add	r7, sp, #8
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <osThreadFlagsSet+0x1a>
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	da03      	bge.n	800ca8e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ca86:	f06f 0303 	mvn.w	r3, #3
 800ca8a:	60fb      	str	r3, [r7, #12]
 800ca8c:	e035      	b.n	800cafa <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800ca8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca94:	f3ef 8305 	mrs	r3, IPSR
 800ca98:	613b      	str	r3, [r7, #16]
  return(result);
 800ca9a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d01f      	beq.n	800cae0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800caa0:	2300      	movs	r3, #0
 800caa2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800caa4:	f107 0308 	add.w	r3, r7, #8
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	2300      	movs	r3, #0
 800caac:	2201      	movs	r2, #1
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6978      	ldr	r0, [r7, #20]
 800cab2:	f001 fe8b 	bl	800e7cc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800cab6:	f107 030c 	add.w	r3, r7, #12
 800caba:	2200      	movs	r2, #0
 800cabc:	9200      	str	r2, [sp, #0]
 800cabe:	2200      	movs	r2, #0
 800cac0:	2100      	movs	r1, #0
 800cac2:	6978      	ldr	r0, [r7, #20]
 800cac4:	f001 fe82 	bl	800e7cc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d015      	beq.n	800cafa <osThreadFlagsSet+0x8e>
 800cace:	4b0d      	ldr	r3, [pc, #52]	@ (800cb04 <osThreadFlagsSet+0x98>)
 800cad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	e00c      	b.n	800cafa <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800cae0:	2300      	movs	r3, #0
 800cae2:	2201      	movs	r2, #1
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6978      	ldr	r0, [r7, #20]
 800cae8:	f001 fdae 	bl	800e648 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800caec:	f107 030c 	add.w	r3, r7, #12
 800caf0:	2200      	movs	r2, #0
 800caf2:	2100      	movs	r1, #0
 800caf4:	6978      	ldr	r0, [r7, #20]
 800caf6:	f001 fda7 	bl	800e648 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800cafa:	68fb      	ldr	r3, [r7, #12]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3718      	adds	r7, #24
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	e000ed04 	.word	0xe000ed04

0800cb08 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b088      	sub	sp, #32
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cb10:	2300      	movs	r3, #0
 800cb12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb14:	f3ef 8305 	mrs	r3, IPSR
 800cb18:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb1a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d174      	bne.n	800cc0a <osMutexNew+0x102>
    if (attr != NULL) {
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <osMutexNew+0x26>
      type = attr->attr_bits;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	61bb      	str	r3, [r7, #24]
 800cb2c:	e001      	b.n	800cb32 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	f003 0301 	and.w	r3, r3, #1
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <osMutexNew+0x3a>
      rmtx = 1U;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	617b      	str	r3, [r7, #20]
 800cb40:	e001      	b.n	800cb46 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800cb42:	2300      	movs	r3, #0
 800cb44:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	f003 0308 	and.w	r3, r3, #8
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d15c      	bne.n	800cc0a <osMutexNew+0x102>
      mem = -1;
 800cb50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb54:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d015      	beq.n	800cb88 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d006      	beq.n	800cb72 <osMutexNew+0x6a>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	2b4f      	cmp	r3, #79	@ 0x4f
 800cb6a:	d902      	bls.n	800cb72 <osMutexNew+0x6a>
          mem = 1;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	613b      	str	r3, [r7, #16]
 800cb70:	e00c      	b.n	800cb8c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d108      	bne.n	800cb8c <osMutexNew+0x84>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d104      	bne.n	800cb8c <osMutexNew+0x84>
            mem = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	613b      	str	r3, [r7, #16]
 800cb86:	e001      	b.n	800cb8c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d112      	bne.n	800cbb8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d007      	beq.n	800cba8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	2004      	movs	r0, #4
 800cba0:	f000 fa97 	bl	800d0d2 <xQueueCreateMutexStatic>
 800cba4:	61f8      	str	r0, [r7, #28]
 800cba6:	e016      	b.n	800cbd6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	4619      	mov	r1, r3
 800cbae:	2001      	movs	r0, #1
 800cbb0:	f000 fa8f 	bl	800d0d2 <xQueueCreateMutexStatic>
 800cbb4:	61f8      	str	r0, [r7, #28]
 800cbb6:	e00e      	b.n	800cbd6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10b      	bne.n	800cbd6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d004      	beq.n	800cbce <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cbc4:	2004      	movs	r0, #4
 800cbc6:	f000 fa6c 	bl	800d0a2 <xQueueCreateMutex>
 800cbca:	61f8      	str	r0, [r7, #28]
 800cbcc:	e003      	b.n	800cbd6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cbce:	2001      	movs	r0, #1
 800cbd0:	f000 fa67 	bl	800d0a2 <xQueueCreateMutex>
 800cbd4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00c      	beq.n	800cbf6 <osMutexNew+0xee>
        if (attr != NULL) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d003      	beq.n	800cbea <osMutexNew+0xe2>
          name = attr->name;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	60fb      	str	r3, [r7, #12]
 800cbe8:	e001      	b.n	800cbee <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cbea:	2300      	movs	r3, #0
 800cbec:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cbee:	68f9      	ldr	r1, [r7, #12]
 800cbf0:	69f8      	ldr	r0, [r7, #28]
 800cbf2:	f000 fe1b 	bl	800d82c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d006      	beq.n	800cc0a <osMutexNew+0x102>
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d003      	beq.n	800cc0a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	f043 0301 	orr.w	r3, r3, #1
 800cc08:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cc0a:	69fb      	ldr	r3, [r7, #28]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3720      	adds	r7, #32
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	4a07      	ldr	r2, [pc, #28]	@ (800cc40 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	4a06      	ldr	r2, [pc, #24]	@ (800cc44 <vApplicationGetIdleTaskMemory+0x30>)
 800cc2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2280      	movs	r2, #128	@ 0x80
 800cc30:	601a      	str	r2, [r3, #0]
}
 800cc32:	bf00      	nop
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	24001870 	.word	0x24001870
 800cc44:	24001918 	.word	0x24001918

0800cc48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4a07      	ldr	r2, [pc, #28]	@ (800cc74 <vApplicationGetTimerTaskMemory+0x2c>)
 800cc58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	4a06      	ldr	r2, [pc, #24]	@ (800cc78 <vApplicationGetTimerTaskMemory+0x30>)
 800cc5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cc66:	601a      	str	r2, [r3, #0]
}
 800cc68:	bf00      	nop
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	24001b18 	.word	0x24001b18
 800cc78:	24001bc0 	.word	0x24001bc0

0800cc7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f103 0208 	add.w	r2, r3, #8
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f103 0208 	add.w	r2, r3, #8
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f103 0208 	add.w	r2, r3, #8
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ccca:	bf00      	nop
 800cccc:	370c      	adds	r7, #12
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b085      	sub	sp, #20
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	689a      	ldr	r2, [r3, #8]
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	683a      	ldr	r2, [r7, #0]
 800ccfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	1c5a      	adds	r2, r3, #1
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	601a      	str	r2, [r3, #0]
}
 800cd12:	bf00      	nop
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr

0800cd1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd1e:	b480      	push	{r7}
 800cd20:	b085      	sub	sp, #20
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd34:	d103      	bne.n	800cd3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	60fb      	str	r3, [r7, #12]
 800cd3c:	e00c      	b.n	800cd58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3308      	adds	r3, #8
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	e002      	b.n	800cd4c <vListInsert+0x2e>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d2f6      	bcs.n	800cd46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	601a      	str	r2, [r3, #0]
}
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	6892      	ldr	r2, [r2, #8]
 800cda6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	6852      	ldr	r2, [r2, #4]
 800cdb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d103      	bne.n	800cdc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	689a      	ldr	r2, [r3, #8]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	1e5a      	subs	r2, r3, #1
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3714      	adds	r7, #20
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10b      	bne.n	800ce10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce0a:	bf00      	nop
 800ce0c:	bf00      	nop
 800ce0e:	e7fd      	b.n	800ce0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce10:	f002 faa2 	bl	800f358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce1c:	68f9      	ldr	r1, [r7, #12]
 800ce1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ce20:	fb01 f303 	mul.w	r3, r1, r3
 800ce24:	441a      	add	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce40:	3b01      	subs	r3, #1
 800ce42:	68f9      	ldr	r1, [r7, #12]
 800ce44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ce46:	fb01 f303 	mul.w	r3, r1, r3
 800ce4a:	441a      	add	r2, r3
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	22ff      	movs	r2, #255	@ 0xff
 800ce54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	22ff      	movs	r2, #255	@ 0xff
 800ce5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d114      	bne.n	800ce90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d01a      	beq.n	800cea4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3310      	adds	r3, #16
 800ce72:	4618      	mov	r0, r3
 800ce74:	f001 f994 	bl	800e1a0 <xTaskRemoveFromEventList>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d012      	beq.n	800cea4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb4 <xQueueGenericReset+0xd0>)
 800ce80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	e009      	b.n	800cea4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	3310      	adds	r3, #16
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7ff fef1 	bl	800cc7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	3324      	adds	r3, #36	@ 0x24
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7ff feec 	bl	800cc7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cea4:	f002 fa8a 	bl	800f3bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cea8:	2301      	movs	r3, #1
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	e000ed04 	.word	0xe000ed04

0800ceb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08e      	sub	sp, #56	@ 0x38
 800cebc:	af02      	add	r7, sp, #8
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10b      	bne.n	800cee4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cede:	bf00      	nop
 800cee0:	bf00      	nop
 800cee2:	e7fd      	b.n	800cee0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10b      	bne.n	800cf02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ceea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cefc:	bf00      	nop
 800cefe:	bf00      	nop
 800cf00:	e7fd      	b.n	800cefe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <xQueueGenericCreateStatic+0x56>
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <xQueueGenericCreateStatic+0x5a>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e000      	b.n	800cf14 <xQueueGenericCreateStatic+0x5c>
 800cf12:	2300      	movs	r3, #0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10b      	bne.n	800cf30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	623b      	str	r3, [r7, #32]
}
 800cf2a:	bf00      	nop
 800cf2c:	bf00      	nop
 800cf2e:	e7fd      	b.n	800cf2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d102      	bne.n	800cf3c <xQueueGenericCreateStatic+0x84>
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <xQueueGenericCreateStatic+0x88>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e000      	b.n	800cf42 <xQueueGenericCreateStatic+0x8a>
 800cf40:	2300      	movs	r3, #0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10b      	bne.n	800cf5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	61fb      	str	r3, [r7, #28]
}
 800cf58:	bf00      	nop
 800cf5a:	bf00      	nop
 800cf5c:	e7fd      	b.n	800cf5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf5e:	2350      	movs	r3, #80	@ 0x50
 800cf60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	2b50      	cmp	r3, #80	@ 0x50
 800cf66:	d00b      	beq.n	800cf80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cf68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	61bb      	str	r3, [r7, #24]
}
 800cf7a:	bf00      	nop
 800cf7c:	bf00      	nop
 800cf7e:	e7fd      	b.n	800cf7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cf86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00d      	beq.n	800cfa8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cf98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	68b9      	ldr	r1, [r7, #8]
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f000 f840 	bl	800d028 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3730      	adds	r7, #48	@ 0x30
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b08a      	sub	sp, #40	@ 0x28
 800cfb6:	af02      	add	r7, sp, #8
 800cfb8:	60f8      	str	r0, [r7, #12]
 800cfba:	60b9      	str	r1, [r7, #8]
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10b      	bne.n	800cfde <xQueueGenericCreate+0x2c>
	__asm volatile
 800cfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	613b      	str	r3, [r7, #16]
}
 800cfd8:	bf00      	nop
 800cfda:	bf00      	nop
 800cfdc:	e7fd      	b.n	800cfda <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	fb02 f303 	mul.w	r3, r2, r3
 800cfe6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	3350      	adds	r3, #80	@ 0x50
 800cfec:	4618      	mov	r0, r3
 800cfee:	f002 fad5 	bl	800f59c <pvPortMalloc>
 800cff2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d011      	beq.n	800d01e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	3350      	adds	r3, #80	@ 0x50
 800d002:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	2200      	movs	r2, #0
 800d008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d00c:	79fa      	ldrb	r2, [r7, #7]
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	4613      	mov	r3, r2
 800d014:	697a      	ldr	r2, [r7, #20]
 800d016:	68b9      	ldr	r1, [r7, #8]
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f000 f805 	bl	800d028 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d01e:	69bb      	ldr	r3, [r7, #24]
	}
 800d020:	4618      	mov	r0, r3
 800d022:	3720      	adds	r7, #32
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
 800d034:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d103      	bne.n	800d044 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	69ba      	ldr	r2, [r7, #24]
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	e002      	b.n	800d04a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d056:	2101      	movs	r1, #1
 800d058:	69b8      	ldr	r0, [r7, #24]
 800d05a:	f7ff fec3 	bl	800cde4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	78fa      	ldrb	r2, [r7, #3]
 800d062:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d066:	bf00      	nop
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b082      	sub	sp, #8
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00e      	beq.n	800d09a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d08e:	2300      	movs	r3, #0
 800d090:	2200      	movs	r2, #0
 800d092:	2100      	movs	r1, #0
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f837 	bl	800d108 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d09a:	bf00      	nop
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b086      	sub	sp, #24
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	617b      	str	r3, [r7, #20]
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d0b4:	79fb      	ldrb	r3, [r7, #7]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	6939      	ldr	r1, [r7, #16]
 800d0ba:	6978      	ldr	r0, [r7, #20]
 800d0bc:	f7ff ff79 	bl	800cfb2 <xQueueGenericCreate>
 800d0c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f7ff ffd3 	bl	800d06e <prvInitialiseMutex>

		return xNewQueue;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
	}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3718      	adds	r7, #24
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b088      	sub	sp, #32
 800d0d6:	af02      	add	r7, sp, #8
 800d0d8:	4603      	mov	r3, r0
 800d0da:	6039      	str	r1, [r7, #0]
 800d0dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	617b      	str	r3, [r7, #20]
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d0e6:	79fb      	ldrb	r3, [r7, #7]
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	6939      	ldr	r1, [r7, #16]
 800d0f0:	6978      	ldr	r0, [r7, #20]
 800d0f2:	f7ff fee1 	bl	800ceb8 <xQueueGenericCreateStatic>
 800d0f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f7ff ffb8 	bl	800d06e <prvInitialiseMutex>

		return xNewQueue;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
	}
 800d100:	4618      	mov	r0, r3
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08e      	sub	sp, #56	@ 0x38
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d116:	2300      	movs	r3, #0
 800d118:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10b      	bne.n	800d13c <xQueueGenericSend+0x34>
	__asm volatile
 800d124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d128:	f383 8811 	msr	BASEPRI, r3
 800d12c:	f3bf 8f6f 	isb	sy
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d136:	bf00      	nop
 800d138:	bf00      	nop
 800d13a:	e7fd      	b.n	800d138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d103      	bne.n	800d14a <xQueueGenericSend+0x42>
 800d142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <xQueueGenericSend+0x46>
 800d14a:	2301      	movs	r3, #1
 800d14c:	e000      	b.n	800d150 <xQueueGenericSend+0x48>
 800d14e:	2300      	movs	r3, #0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10b      	bne.n	800d16c <xQueueGenericSend+0x64>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d166:	bf00      	nop
 800d168:	bf00      	nop
 800d16a:	e7fd      	b.n	800d168 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d103      	bne.n	800d17a <xQueueGenericSend+0x72>
 800d172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d176:	2b01      	cmp	r3, #1
 800d178:	d101      	bne.n	800d17e <xQueueGenericSend+0x76>
 800d17a:	2301      	movs	r3, #1
 800d17c:	e000      	b.n	800d180 <xQueueGenericSend+0x78>
 800d17e:	2300      	movs	r3, #0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10b      	bne.n	800d19c <xQueueGenericSend+0x94>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	623b      	str	r3, [r7, #32]
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	e7fd      	b.n	800d198 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d19c:	f001 f9c6 	bl	800e52c <xTaskGetSchedulerState>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d102      	bne.n	800d1ac <xQueueGenericSend+0xa4>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <xQueueGenericSend+0xa8>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e000      	b.n	800d1b2 <xQueueGenericSend+0xaa>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10b      	bne.n	800d1ce <xQueueGenericSend+0xc6>
	__asm volatile
 800d1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ba:	f383 8811 	msr	BASEPRI, r3
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	61fb      	str	r3, [r7, #28]
}
 800d1c8:	bf00      	nop
 800d1ca:	bf00      	nop
 800d1cc:	e7fd      	b.n	800d1ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ce:	f002 f8c3 	bl	800f358 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d302      	bcc.n	800d1e4 <xQueueGenericSend+0xdc>
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	d129      	bne.n	800d238 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	68b9      	ldr	r1, [r7, #8]
 800d1e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1ea:	f000 fa0f 	bl	800d60c <prvCopyDataToQueue>
 800d1ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d010      	beq.n	800d21a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fa:	3324      	adds	r3, #36	@ 0x24
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 ffcf 	bl	800e1a0 <xTaskRemoveFromEventList>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d013      	beq.n	800d230 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d208:	4b3f      	ldr	r3, [pc, #252]	@ (800d308 <xQueueGenericSend+0x200>)
 800d20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	e00a      	b.n	800d230 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d007      	beq.n	800d230 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d220:	4b39      	ldr	r3, [pc, #228]	@ (800d308 <xQueueGenericSend+0x200>)
 800d222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d226:	601a      	str	r2, [r3, #0]
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d230:	f002 f8c4 	bl	800f3bc <vPortExitCritical>
				return pdPASS;
 800d234:	2301      	movs	r3, #1
 800d236:	e063      	b.n	800d300 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d103      	bne.n	800d246 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d23e:	f002 f8bd 	bl	800f3bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d242:	2300      	movs	r3, #0
 800d244:	e05c      	b.n	800d300 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d106      	bne.n	800d25a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d24c:	f107 0314 	add.w	r3, r7, #20
 800d250:	4618      	mov	r0, r3
 800d252:	f001 f809 	bl	800e268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d256:	2301      	movs	r3, #1
 800d258:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d25a:	f002 f8af 	bl	800f3bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d25e:	f000 fd71 	bl	800dd44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d262:	f002 f879 	bl	800f358 <vPortEnterCritical>
 800d266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d26c:	b25b      	sxtb	r3, r3
 800d26e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d272:	d103      	bne.n	800d27c <xQueueGenericSend+0x174>
 800d274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d276:	2200      	movs	r2, #0
 800d278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d282:	b25b      	sxtb	r3, r3
 800d284:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d288:	d103      	bne.n	800d292 <xQueueGenericSend+0x18a>
 800d28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d292:	f002 f893 	bl	800f3bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d296:	1d3a      	adds	r2, r7, #4
 800d298:	f107 0314 	add.w	r3, r7, #20
 800d29c:	4611      	mov	r1, r2
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 fff8 	bl	800e294 <xTaskCheckForTimeOut>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d124      	bne.n	800d2f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2ac:	f000 faa6 	bl	800d7fc <prvIsQueueFull>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d018      	beq.n	800d2e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b8:	3310      	adds	r3, #16
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	4611      	mov	r1, r2
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 ff1c 	bl	800e0fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2c6:	f000 fa31 	bl	800d72c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2ca:	f000 fd49 	bl	800dd60 <xTaskResumeAll>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	f47f af7c 	bne.w	800d1ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d308 <xQueueGenericSend+0x200>)
 800d2d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2dc:	601a      	str	r2, [r3, #0]
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	e772      	b.n	800d1ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2ea:	f000 fa1f 	bl	800d72c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2ee:	f000 fd37 	bl	800dd60 <xTaskResumeAll>
 800d2f2:	e76c      	b.n	800d1ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2f6:	f000 fa19 	bl	800d72c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2fa:	f000 fd31 	bl	800dd60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d300:	4618      	mov	r0, r3
 800d302:	3738      	adds	r7, #56	@ 0x38
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	e000ed04 	.word	0xe000ed04

0800d30c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b090      	sub	sp, #64	@ 0x40
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	607a      	str	r2, [r7, #4]
 800d318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d320:	2b00      	cmp	r3, #0
 800d322:	d10b      	bne.n	800d33c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d336:	bf00      	nop
 800d338:	bf00      	nop
 800d33a:	e7fd      	b.n	800d338 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d103      	bne.n	800d34a <xQueueGenericSendFromISR+0x3e>
 800d342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <xQueueGenericSendFromISR+0x42>
 800d34a:	2301      	movs	r3, #1
 800d34c:	e000      	b.n	800d350 <xQueueGenericSendFromISR+0x44>
 800d34e:	2300      	movs	r3, #0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10b      	bne.n	800d36c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d358:	f383 8811 	msr	BASEPRI, r3
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d366:	bf00      	nop
 800d368:	bf00      	nop
 800d36a:	e7fd      	b.n	800d368 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	2b02      	cmp	r3, #2
 800d370:	d103      	bne.n	800d37a <xQueueGenericSendFromISR+0x6e>
 800d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d376:	2b01      	cmp	r3, #1
 800d378:	d101      	bne.n	800d37e <xQueueGenericSendFromISR+0x72>
 800d37a:	2301      	movs	r3, #1
 800d37c:	e000      	b.n	800d380 <xQueueGenericSendFromISR+0x74>
 800d37e:	2300      	movs	r3, #0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10b      	bne.n	800d39c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	623b      	str	r3, [r7, #32]
}
 800d396:	bf00      	nop
 800d398:	bf00      	nop
 800d39a:	e7fd      	b.n	800d398 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d39c:	f002 f8bc 	bl	800f518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3a0:	f3ef 8211 	mrs	r2, BASEPRI
 800d3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	61fa      	str	r2, [r7, #28]
 800d3b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d302      	bcc.n	800d3ce <xQueueGenericSendFromISR+0xc2>
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	2b02      	cmp	r3, #2
 800d3cc:	d12f      	bne.n	800d42e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	68b9      	ldr	r1, [r7, #8]
 800d3e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3e4:	f000 f912 	bl	800d60c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d3ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3f0:	d112      	bne.n	800d418 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d016      	beq.n	800d428 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fc:	3324      	adds	r3, #36	@ 0x24
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 fece 	bl	800e1a0 <xTaskRemoveFromEventList>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00e      	beq.n	800d428 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00b      	beq.n	800d428 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	e007      	b.n	800d428 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d418:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d41c:	3301      	adds	r3, #1
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	b25a      	sxtb	r2, r3
 800d422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d428:	2301      	movs	r3, #1
 800d42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d42c:	e001      	b.n	800d432 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d42e:	2300      	movs	r3, #0
 800d430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d434:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d43c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d43e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d440:	4618      	mov	r0, r3
 800d442:	3740      	adds	r7, #64	@ 0x40
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08c      	sub	sp, #48	@ 0x30
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d454:	2300      	movs	r3, #0
 800d456:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10b      	bne.n	800d47a <xQueueReceive+0x32>
	__asm volatile
 800d462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	623b      	str	r3, [r7, #32]
}
 800d474:	bf00      	nop
 800d476:	bf00      	nop
 800d478:	e7fd      	b.n	800d476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d103      	bne.n	800d488 <xQueueReceive+0x40>
 800d480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <xQueueReceive+0x44>
 800d488:	2301      	movs	r3, #1
 800d48a:	e000      	b.n	800d48e <xQueueReceive+0x46>
 800d48c:	2300      	movs	r3, #0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10b      	bne.n	800d4aa <xQueueReceive+0x62>
	__asm volatile
 800d492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	61fb      	str	r3, [r7, #28]
}
 800d4a4:	bf00      	nop
 800d4a6:	bf00      	nop
 800d4a8:	e7fd      	b.n	800d4a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4aa:	f001 f83f 	bl	800e52c <xTaskGetSchedulerState>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d102      	bne.n	800d4ba <xQueueReceive+0x72>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d101      	bne.n	800d4be <xQueueReceive+0x76>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e000      	b.n	800d4c0 <xQueueReceive+0x78>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10b      	bne.n	800d4dc <xQueueReceive+0x94>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	61bb      	str	r3, [r7, #24]
}
 800d4d6:	bf00      	nop
 800d4d8:	bf00      	nop
 800d4da:	e7fd      	b.n	800d4d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4dc:	f001 ff3c 	bl	800f358 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d01f      	beq.n	800d52c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4ec:	68b9      	ldr	r1, [r7, #8]
 800d4ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4f0:	f000 f8f6 	bl	800d6e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f6:	1e5a      	subs	r2, r3, #1
 800d4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fe:	691b      	ldr	r3, [r3, #16]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00f      	beq.n	800d524 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d506:	3310      	adds	r3, #16
 800d508:	4618      	mov	r0, r3
 800d50a:	f000 fe49 	bl	800e1a0 <xTaskRemoveFromEventList>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d007      	beq.n	800d524 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d514:	4b3c      	ldr	r3, [pc, #240]	@ (800d608 <xQueueReceive+0x1c0>)
 800d516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d524:	f001 ff4a 	bl	800f3bc <vPortExitCritical>
				return pdPASS;
 800d528:	2301      	movs	r3, #1
 800d52a:	e069      	b.n	800d600 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d103      	bne.n	800d53a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d532:	f001 ff43 	bl	800f3bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d536:	2300      	movs	r3, #0
 800d538:	e062      	b.n	800d600 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d106      	bne.n	800d54e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d540:	f107 0310 	add.w	r3, r7, #16
 800d544:	4618      	mov	r0, r3
 800d546:	f000 fe8f 	bl	800e268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d54a:	2301      	movs	r3, #1
 800d54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d54e:	f001 ff35 	bl	800f3bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d552:	f000 fbf7 	bl	800dd44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d556:	f001 feff 	bl	800f358 <vPortEnterCritical>
 800d55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d55c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d560:	b25b      	sxtb	r3, r3
 800d562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d566:	d103      	bne.n	800d570 <xQueueReceive+0x128>
 800d568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56a:	2200      	movs	r2, #0
 800d56c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d576:	b25b      	sxtb	r3, r3
 800d578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d57c:	d103      	bne.n	800d586 <xQueueReceive+0x13e>
 800d57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d580:	2200      	movs	r2, #0
 800d582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d586:	f001 ff19 	bl	800f3bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d58a:	1d3a      	adds	r2, r7, #4
 800d58c:	f107 0310 	add.w	r3, r7, #16
 800d590:	4611      	mov	r1, r2
 800d592:	4618      	mov	r0, r3
 800d594:	f000 fe7e 	bl	800e294 <xTaskCheckForTimeOut>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d123      	bne.n	800d5e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d59e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5a0:	f000 f916 	bl	800d7d0 <prvIsQueueEmpty>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d017      	beq.n	800d5da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ac:	3324      	adds	r3, #36	@ 0x24
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 fda2 	bl	800e0fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5ba:	f000 f8b7 	bl	800d72c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5be:	f000 fbcf 	bl	800dd60 <xTaskResumeAll>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d189      	bne.n	800d4dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d5c8:	4b0f      	ldr	r3, [pc, #60]	@ (800d608 <xQueueReceive+0x1c0>)
 800d5ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5ce:	601a      	str	r2, [r3, #0]
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	e780      	b.n	800d4dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d5da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5dc:	f000 f8a6 	bl	800d72c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5e0:	f000 fbbe 	bl	800dd60 <xTaskResumeAll>
 800d5e4:	e77a      	b.n	800d4dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d5e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5e8:	f000 f8a0 	bl	800d72c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5ec:	f000 fbb8 	bl	800dd60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5f2:	f000 f8ed 	bl	800d7d0 <prvIsQueueEmpty>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f43f af6f 	beq.w	800d4dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d600:	4618      	mov	r0, r3
 800d602:	3730      	adds	r7, #48	@ 0x30
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	e000ed04 	.word	0xe000ed04

0800d60c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d618:	2300      	movs	r3, #0
 800d61a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d620:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10d      	bne.n	800d646 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d14d      	bne.n	800d6ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	4618      	mov	r0, r3
 800d638:	f000 ff96 	bl	800e568 <xTaskPriorityDisinherit>
 800d63c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2200      	movs	r2, #0
 800d642:	609a      	str	r2, [r3, #8]
 800d644:	e043      	b.n	800d6ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d119      	bne.n	800d680 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6858      	ldr	r0, [r3, #4]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d654:	461a      	mov	r2, r3
 800d656:	68b9      	ldr	r1, [r7, #8]
 800d658:	f005 fdcf 	bl	80131fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	685a      	ldr	r2, [r3, #4]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d664:	441a      	add	r2, r3
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	429a      	cmp	r2, r3
 800d674:	d32b      	bcc.n	800d6ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	605a      	str	r2, [r3, #4]
 800d67e:	e026      	b.n	800d6ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	68d8      	ldr	r0, [r3, #12]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d688:	461a      	mov	r2, r3
 800d68a:	68b9      	ldr	r1, [r7, #8]
 800d68c:	f005 fdb5 	bl	80131fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	68da      	ldr	r2, [r3, #12]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d698:	425b      	negs	r3, r3
 800d69a:	441a      	add	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	68da      	ldr	r2, [r3, #12]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d207      	bcs.n	800d6bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	689a      	ldr	r2, [r3, #8]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b4:	425b      	negs	r3, r3
 800d6b6:	441a      	add	r2, r3
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d105      	bne.n	800d6ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d6d6:	697b      	ldr	r3, [r7, #20]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d018      	beq.n	800d724 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	68da      	ldr	r2, [r3, #12]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6fa:	441a      	add	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	68da      	ldr	r2, [r3, #12]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d303      	bcc.n	800d714 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	68d9      	ldr	r1, [r3, #12]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d71c:	461a      	mov	r2, r3
 800d71e:	6838      	ldr	r0, [r7, #0]
 800d720:	f005 fd6b 	bl	80131fa <memcpy>
	}
}
 800d724:	bf00      	nop
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d734:	f001 fe10 	bl	800f358 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d73e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d740:	e011      	b.n	800d766 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d746:	2b00      	cmp	r3, #0
 800d748:	d012      	beq.n	800d770 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	3324      	adds	r3, #36	@ 0x24
 800d74e:	4618      	mov	r0, r3
 800d750:	f000 fd26 	bl	800e1a0 <xTaskRemoveFromEventList>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d75a:	f000 fdff 	bl	800e35c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
 800d760:	3b01      	subs	r3, #1
 800d762:	b2db      	uxtb	r3, r3
 800d764:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	dce9      	bgt.n	800d742 <prvUnlockQueue+0x16>
 800d76e:	e000      	b.n	800d772 <prvUnlockQueue+0x46>
					break;
 800d770:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	22ff      	movs	r2, #255	@ 0xff
 800d776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d77a:	f001 fe1f 	bl	800f3bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d77e:	f001 fdeb 	bl	800f358 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d788:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d78a:	e011      	b.n	800d7b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	691b      	ldr	r3, [r3, #16]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d012      	beq.n	800d7ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	3310      	adds	r3, #16
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 fd01 	bl	800e1a0 <xTaskRemoveFromEventList>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d001      	beq.n	800d7a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7a4:	f000 fdda 	bl	800e35c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7a8:	7bbb      	ldrb	r3, [r7, #14]
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	dce9      	bgt.n	800d78c <prvUnlockQueue+0x60>
 800d7b8:	e000      	b.n	800d7bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	22ff      	movs	r2, #255	@ 0xff
 800d7c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d7c4:	f001 fdfa 	bl	800f3bc <vPortExitCritical>
}
 800d7c8:	bf00      	nop
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7d8:	f001 fdbe 	bl	800f358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d102      	bne.n	800d7ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	e001      	b.n	800d7ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7ee:	f001 fde5 	bl	800f3bc <vPortExitCritical>

	return xReturn;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d804:	f001 fda8 	bl	800f358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d810:	429a      	cmp	r2, r3
 800d812:	d102      	bne.n	800d81a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d814:	2301      	movs	r3, #1
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	e001      	b.n	800d81e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d81a:	2300      	movs	r3, #0
 800d81c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d81e:	f001 fdcd 	bl	800f3bc <vPortExitCritical>

	return xReturn;
 800d822:	68fb      	ldr	r3, [r7, #12]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d836:	2300      	movs	r3, #0
 800d838:	60fb      	str	r3, [r7, #12]
 800d83a:	e014      	b.n	800d866 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d83c:	4a0f      	ldr	r2, [pc, #60]	@ (800d87c <vQueueAddToRegistry+0x50>)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10b      	bne.n	800d860 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d848:	490c      	ldr	r1, [pc, #48]	@ (800d87c <vQueueAddToRegistry+0x50>)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	683a      	ldr	r2, [r7, #0]
 800d84e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d852:	4a0a      	ldr	r2, [pc, #40]	@ (800d87c <vQueueAddToRegistry+0x50>)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	00db      	lsls	r3, r3, #3
 800d858:	4413      	add	r3, r2
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d85e:	e006      	b.n	800d86e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	3301      	adds	r3, #1
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2b07      	cmp	r3, #7
 800d86a:	d9e7      	bls.n	800d83c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d86c:	bf00      	nop
 800d86e:	bf00      	nop
 800d870:	3714      	adds	r7, #20
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	24001fc0 	.word	0x24001fc0

0800d880 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d890:	f001 fd62 	bl	800f358 <vPortEnterCritical>
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d89a:	b25b      	sxtb	r3, r3
 800d89c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8a0:	d103      	bne.n	800d8aa <vQueueWaitForMessageRestricted+0x2a>
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8b0:	b25b      	sxtb	r3, r3
 800d8b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8b6:	d103      	bne.n	800d8c0 <vQueueWaitForMessageRestricted+0x40>
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8c0:	f001 fd7c 	bl	800f3bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d106      	bne.n	800d8da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	3324      	adds	r3, #36	@ 0x24
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	68b9      	ldr	r1, [r7, #8]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 fc37 	bl	800e148 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d8da:	6978      	ldr	r0, [r7, #20]
 800d8dc:	f7ff ff26 	bl	800d72c <prvUnlockQueue>
	}
 800d8e0:	bf00      	nop
 800d8e2:	3718      	adds	r7, #24
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08e      	sub	sp, #56	@ 0x38
 800d8ec:	af04      	add	r7, sp, #16
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10b      	bne.n	800d914 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	623b      	str	r3, [r7, #32]
}
 800d90e:	bf00      	nop
 800d910:	bf00      	nop
 800d912:	e7fd      	b.n	800d910 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d916:	2b00      	cmp	r3, #0
 800d918:	d10b      	bne.n	800d932 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	61fb      	str	r3, [r7, #28]
}
 800d92c:	bf00      	nop
 800d92e:	bf00      	nop
 800d930:	e7fd      	b.n	800d92e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d932:	23a8      	movs	r3, #168	@ 0xa8
 800d934:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	2ba8      	cmp	r3, #168	@ 0xa8
 800d93a:	d00b      	beq.n	800d954 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	61bb      	str	r3, [r7, #24]
}
 800d94e:	bf00      	nop
 800d950:	bf00      	nop
 800d952:	e7fd      	b.n	800d950 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d954:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d01e      	beq.n	800d99a <xTaskCreateStatic+0xb2>
 800d95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d01b      	beq.n	800d99a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d964:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d968:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d96a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d96e:	2202      	movs	r2, #2
 800d970:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d974:	2300      	movs	r3, #0
 800d976:	9303      	str	r3, [sp, #12]
 800d978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97a:	9302      	str	r3, [sp, #8]
 800d97c:	f107 0314 	add.w	r3, r7, #20
 800d980:	9301      	str	r3, [sp, #4]
 800d982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d984:	9300      	str	r3, [sp, #0]
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	68b9      	ldr	r1, [r7, #8]
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f000 f851 	bl	800da34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d992:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d994:	f000 f8f6 	bl	800db84 <prvAddNewTaskToReadyList>
 800d998:	e001      	b.n	800d99e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d99a:	2300      	movs	r3, #0
 800d99c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d99e:	697b      	ldr	r3, [r7, #20]
	}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3728      	adds	r7, #40	@ 0x28
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08c      	sub	sp, #48	@ 0x30
 800d9ac:	af04      	add	r7, sp, #16
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	603b      	str	r3, [r7, #0]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d9b8:	88fb      	ldrh	r3, [r7, #6]
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f001 fded 	bl	800f59c <pvPortMalloc>
 800d9c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00e      	beq.n	800d9e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d9ca:	20a8      	movs	r0, #168	@ 0xa8
 800d9cc:	f001 fde6 	bl	800f59c <pvPortMalloc>
 800d9d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d003      	beq.n	800d9e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800d9de:	e005      	b.n	800d9ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d9e0:	6978      	ldr	r0, [r7, #20]
 800d9e2:	f001 fea9 	bl	800f738 <vPortFree>
 800d9e6:	e001      	b.n	800d9ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d017      	beq.n	800da22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d9fa:	88fa      	ldrh	r2, [r7, #6]
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	9302      	str	r3, [sp, #8]
 800da04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da06:	9301      	str	r3, [sp, #4]
 800da08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	68b9      	ldr	r1, [r7, #8]
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f000 f80f 	bl	800da34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da16:	69f8      	ldr	r0, [r7, #28]
 800da18:	f000 f8b4 	bl	800db84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da1c:	2301      	movs	r3, #1
 800da1e:	61bb      	str	r3, [r7, #24]
 800da20:	e002      	b.n	800da28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da28:	69bb      	ldr	r3, [r7, #24]
	}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3720      	adds	r7, #32
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
	...

0800da34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b088      	sub	sp, #32
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	461a      	mov	r2, r3
 800da4c:	21a5      	movs	r1, #165	@ 0xa5
 800da4e:	f005 faf3 	bl	8013038 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da56:	6879      	ldr	r1, [r7, #4]
 800da58:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800da5c:	440b      	add	r3, r1
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	4413      	add	r3, r2
 800da62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	f023 0307 	bic.w	r3, r3, #7
 800da6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	f003 0307 	and.w	r3, r3, #7
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00b      	beq.n	800da8e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800da76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	617b      	str	r3, [r7, #20]
}
 800da88:	bf00      	nop
 800da8a:	bf00      	nop
 800da8c:	e7fd      	b.n	800da8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d01f      	beq.n	800dad4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da94:	2300      	movs	r3, #0
 800da96:	61fb      	str	r3, [r7, #28]
 800da98:	e012      	b.n	800dac0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da9a:	68ba      	ldr	r2, [r7, #8]
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	4413      	add	r3, r2
 800daa0:	7819      	ldrb	r1, [r3, #0]
 800daa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	4413      	add	r3, r2
 800daa8:	3334      	adds	r3, #52	@ 0x34
 800daaa:	460a      	mov	r2, r1
 800daac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800daae:	68ba      	ldr	r2, [r7, #8]
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	4413      	add	r3, r2
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d006      	beq.n	800dac8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	3301      	adds	r3, #1
 800dabe:	61fb      	str	r3, [r7, #28]
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	2b0f      	cmp	r3, #15
 800dac4:	d9e9      	bls.n	800da9a <prvInitialiseNewTask+0x66>
 800dac6:	e000      	b.n	800daca <prvInitialiseNewTask+0x96>
			{
				break;
 800dac8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800daca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dad2:	e003      	b.n	800dadc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dade:	2b37      	cmp	r3, #55	@ 0x37
 800dae0:	d901      	bls.n	800dae6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dae2:	2337      	movs	r3, #55	@ 0x37
 800dae4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800daea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800daec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800daf0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800daf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf4:	2200      	movs	r2, #0
 800daf6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800daf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafa:	3304      	adds	r3, #4
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7ff f8dd 	bl	800ccbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db04:	3318      	adds	r3, #24
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff f8d8 	bl	800ccbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800db18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db24:	2200      	movs	r2, #0
 800db26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db34:	3354      	adds	r3, #84	@ 0x54
 800db36:	224c      	movs	r2, #76	@ 0x4c
 800db38:	2100      	movs	r1, #0
 800db3a:	4618      	mov	r0, r3
 800db3c:	f005 fa7c 	bl	8013038 <memset>
 800db40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db42:	4a0d      	ldr	r2, [pc, #52]	@ (800db78 <prvInitialiseNewTask+0x144>)
 800db44:	659a      	str	r2, [r3, #88]	@ 0x58
 800db46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db48:	4a0c      	ldr	r2, [pc, #48]	@ (800db7c <prvInitialiseNewTask+0x148>)
 800db4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800db4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4e:	4a0c      	ldr	r2, [pc, #48]	@ (800db80 <prvInitialiseNewTask+0x14c>)
 800db50:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	68f9      	ldr	r1, [r7, #12]
 800db56:	69b8      	ldr	r0, [r7, #24]
 800db58:	f001 facc 	bl	800f0f4 <pxPortInitialiseStack>
 800db5c:	4602      	mov	r2, r0
 800db5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db6e:	bf00      	nop
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	2403339c 	.word	0x2403339c
 800db7c:	24033404 	.word	0x24033404
 800db80:	2403346c 	.word	0x2403346c

0800db84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db8c:	f001 fbe4 	bl	800f358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db90:	4b2d      	ldr	r3, [pc, #180]	@ (800dc48 <prvAddNewTaskToReadyList+0xc4>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3301      	adds	r3, #1
 800db96:	4a2c      	ldr	r2, [pc, #176]	@ (800dc48 <prvAddNewTaskToReadyList+0xc4>)
 800db98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db9a:	4b2c      	ldr	r3, [pc, #176]	@ (800dc4c <prvAddNewTaskToReadyList+0xc8>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d109      	bne.n	800dbb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dba2:	4a2a      	ldr	r2, [pc, #168]	@ (800dc4c <prvAddNewTaskToReadyList+0xc8>)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dba8:	4b27      	ldr	r3, [pc, #156]	@ (800dc48 <prvAddNewTaskToReadyList+0xc4>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d110      	bne.n	800dbd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dbb0:	f000 fbf8 	bl	800e3a4 <prvInitialiseTaskLists>
 800dbb4:	e00d      	b.n	800dbd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dbb6:	4b26      	ldr	r3, [pc, #152]	@ (800dc50 <prvAddNewTaskToReadyList+0xcc>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d109      	bne.n	800dbd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dbbe:	4b23      	ldr	r3, [pc, #140]	@ (800dc4c <prvAddNewTaskToReadyList+0xc8>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d802      	bhi.n	800dbd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dbcc:	4a1f      	ldr	r2, [pc, #124]	@ (800dc4c <prvAddNewTaskToReadyList+0xc8>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dbd2:	4b20      	ldr	r3, [pc, #128]	@ (800dc54 <prvAddNewTaskToReadyList+0xd0>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	4a1e      	ldr	r2, [pc, #120]	@ (800dc54 <prvAddNewTaskToReadyList+0xd0>)
 800dbda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dbdc:	4b1d      	ldr	r3, [pc, #116]	@ (800dc54 <prvAddNewTaskToReadyList+0xd0>)
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbe8:	4b1b      	ldr	r3, [pc, #108]	@ (800dc58 <prvAddNewTaskToReadyList+0xd4>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d903      	bls.n	800dbf8 <prvAddNewTaskToReadyList+0x74>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf4:	4a18      	ldr	r2, [pc, #96]	@ (800dc58 <prvAddNewTaskToReadyList+0xd4>)
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	4a15      	ldr	r2, [pc, #84]	@ (800dc5c <prvAddNewTaskToReadyList+0xd8>)
 800dc06:	441a      	add	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	4610      	mov	r0, r2
 800dc10:	f7ff f861 	bl	800ccd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc14:	f001 fbd2 	bl	800f3bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc18:	4b0d      	ldr	r3, [pc, #52]	@ (800dc50 <prvAddNewTaskToReadyList+0xcc>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00e      	beq.n	800dc3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc20:	4b0a      	ldr	r3, [pc, #40]	@ (800dc4c <prvAddNewTaskToReadyList+0xc8>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d207      	bcs.n	800dc3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc2e:	4b0c      	ldr	r3, [pc, #48]	@ (800dc60 <prvAddNewTaskToReadyList+0xdc>)
 800dc30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc3e:	bf00      	nop
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	240024d4 	.word	0x240024d4
 800dc4c:	24002000 	.word	0x24002000
 800dc50:	240024e0 	.word	0x240024e0
 800dc54:	240024f0 	.word	0x240024f0
 800dc58:	240024dc 	.word	0x240024dc
 800dc5c:	24002004 	.word	0x24002004
 800dc60:	e000ed04 	.word	0xe000ed04

0800dc64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08a      	sub	sp, #40	@ 0x28
 800dc68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc72:	463a      	mov	r2, r7
 800dc74:	1d39      	adds	r1, r7, #4
 800dc76:	f107 0308 	add.w	r3, r7, #8
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe ffca 	bl	800cc14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc80:	6839      	ldr	r1, [r7, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	68ba      	ldr	r2, [r7, #8]
 800dc86:	9202      	str	r2, [sp, #8]
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	460a      	mov	r2, r1
 800dc92:	4924      	ldr	r1, [pc, #144]	@ (800dd24 <vTaskStartScheduler+0xc0>)
 800dc94:	4824      	ldr	r0, [pc, #144]	@ (800dd28 <vTaskStartScheduler+0xc4>)
 800dc96:	f7ff fe27 	bl	800d8e8 <xTaskCreateStatic>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	4a23      	ldr	r2, [pc, #140]	@ (800dd2c <vTaskStartScheduler+0xc8>)
 800dc9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dca0:	4b22      	ldr	r3, [pc, #136]	@ (800dd2c <vTaskStartScheduler+0xc8>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	617b      	str	r3, [r7, #20]
 800dcac:	e001      	b.n	800dcb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d102      	bne.n	800dcbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dcb8:	f000 fec2 	bl	800ea40 <xTimerCreateTimerTask>
 800dcbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d11b      	bne.n	800dcfc <vTaskStartScheduler+0x98>
	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	613b      	str	r3, [r7, #16]
}
 800dcd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dcd8:	4b15      	ldr	r3, [pc, #84]	@ (800dd30 <vTaskStartScheduler+0xcc>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	3354      	adds	r3, #84	@ 0x54
 800dcde:	4a15      	ldr	r2, [pc, #84]	@ (800dd34 <vTaskStartScheduler+0xd0>)
 800dce0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dce2:	4b15      	ldr	r3, [pc, #84]	@ (800dd38 <vTaskStartScheduler+0xd4>)
 800dce4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dce8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dcea:	4b14      	ldr	r3, [pc, #80]	@ (800dd3c <vTaskStartScheduler+0xd8>)
 800dcec:	2201      	movs	r2, #1
 800dcee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcf0:	4b13      	ldr	r3, [pc, #76]	@ (800dd40 <vTaskStartScheduler+0xdc>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dcf6:	f001 fa8b 	bl	800f210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dcfa:	e00f      	b.n	800dd1c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd02:	d10b      	bne.n	800dd1c <vTaskStartScheduler+0xb8>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	60fb      	str	r3, [r7, #12]
}
 800dd16:	bf00      	nop
 800dd18:	bf00      	nop
 800dd1a:	e7fd      	b.n	800dd18 <vTaskStartScheduler+0xb4>
}
 800dd1c:	bf00      	nop
 800dd1e:	3718      	adds	r7, #24
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	0801357c 	.word	0x0801357c
 800dd28:	0800e375 	.word	0x0800e375
 800dd2c:	240024f8 	.word	0x240024f8
 800dd30:	24002000 	.word	0x24002000
 800dd34:	2400139c 	.word	0x2400139c
 800dd38:	240024f4 	.word	0x240024f4
 800dd3c:	240024e0 	.word	0x240024e0
 800dd40:	240024d8 	.word	0x240024d8

0800dd44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd44:	b480      	push	{r7}
 800dd46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd48:	4b04      	ldr	r3, [pc, #16]	@ (800dd5c <vTaskSuspendAll+0x18>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	4a03      	ldr	r2, [pc, #12]	@ (800dd5c <vTaskSuspendAll+0x18>)
 800dd50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd52:	bf00      	nop
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr
 800dd5c:	240024fc 	.word	0x240024fc

0800dd60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd6e:	4b42      	ldr	r3, [pc, #264]	@ (800de78 <xTaskResumeAll+0x118>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10b      	bne.n	800dd8e <xTaskResumeAll+0x2e>
	__asm volatile
 800dd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	603b      	str	r3, [r7, #0]
}
 800dd88:	bf00      	nop
 800dd8a:	bf00      	nop
 800dd8c:	e7fd      	b.n	800dd8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd8e:	f001 fae3 	bl	800f358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd92:	4b39      	ldr	r3, [pc, #228]	@ (800de78 <xTaskResumeAll+0x118>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3b01      	subs	r3, #1
 800dd98:	4a37      	ldr	r2, [pc, #220]	@ (800de78 <xTaskResumeAll+0x118>)
 800dd9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd9c:	4b36      	ldr	r3, [pc, #216]	@ (800de78 <xTaskResumeAll+0x118>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d162      	bne.n	800de6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dda4:	4b35      	ldr	r3, [pc, #212]	@ (800de7c <xTaskResumeAll+0x11c>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d05e      	beq.n	800de6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddac:	e02f      	b.n	800de0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddae:	4b34      	ldr	r3, [pc, #208]	@ (800de80 <xTaskResumeAll+0x120>)
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3318      	adds	r3, #24
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fe ffe8 	bl	800cd90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fe ffe3 	bl	800cd90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddce:	4b2d      	ldr	r3, [pc, #180]	@ (800de84 <xTaskResumeAll+0x124>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d903      	bls.n	800ddde <xTaskResumeAll+0x7e>
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddda:	4a2a      	ldr	r2, [pc, #168]	@ (800de84 <xTaskResumeAll+0x124>)
 800dddc:	6013      	str	r3, [r2, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dde2:	4613      	mov	r3, r2
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	4413      	add	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4a27      	ldr	r2, [pc, #156]	@ (800de88 <xTaskResumeAll+0x128>)
 800ddec:	441a      	add	r2, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	f7fe ff6e 	bl	800ccd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddfe:	4b23      	ldr	r3, [pc, #140]	@ (800de8c <xTaskResumeAll+0x12c>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de04:	429a      	cmp	r2, r3
 800de06:	d302      	bcc.n	800de0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800de08:	4b21      	ldr	r3, [pc, #132]	@ (800de90 <xTaskResumeAll+0x130>)
 800de0a:	2201      	movs	r2, #1
 800de0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de0e:	4b1c      	ldr	r3, [pc, #112]	@ (800de80 <xTaskResumeAll+0x120>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1cb      	bne.n	800ddae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d001      	beq.n	800de20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de1c:	f000 fb66 	bl	800e4ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de20:	4b1c      	ldr	r3, [pc, #112]	@ (800de94 <xTaskResumeAll+0x134>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d010      	beq.n	800de4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de2c:	f000 f846 	bl	800debc <xTaskIncrementTick>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800de36:	4b16      	ldr	r3, [pc, #88]	@ (800de90 <xTaskResumeAll+0x130>)
 800de38:	2201      	movs	r2, #1
 800de3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3b01      	subs	r3, #1
 800de40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1f1      	bne.n	800de2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800de48:	4b12      	ldr	r3, [pc, #72]	@ (800de94 <xTaskResumeAll+0x134>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de4e:	4b10      	ldr	r3, [pc, #64]	@ (800de90 <xTaskResumeAll+0x130>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d009      	beq.n	800de6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de56:	2301      	movs	r3, #1
 800de58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de5a:	4b0f      	ldr	r3, [pc, #60]	@ (800de98 <xTaskResumeAll+0x138>)
 800de5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de6a:	f001 faa7 	bl	800f3bc <vPortExitCritical>

	return xAlreadyYielded;
 800de6e:	68bb      	ldr	r3, [r7, #8]
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	240024fc 	.word	0x240024fc
 800de7c:	240024d4 	.word	0x240024d4
 800de80:	24002494 	.word	0x24002494
 800de84:	240024dc 	.word	0x240024dc
 800de88:	24002004 	.word	0x24002004
 800de8c:	24002000 	.word	0x24002000
 800de90:	240024e8 	.word	0x240024e8
 800de94:	240024e4 	.word	0x240024e4
 800de98:	e000ed04 	.word	0xe000ed04

0800de9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dea2:	4b05      	ldr	r3, [pc, #20]	@ (800deb8 <xTaskGetTickCount+0x1c>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dea8:	687b      	ldr	r3, [r7, #4]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	370c      	adds	r7, #12
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	240024d8 	.word	0x240024d8

0800debc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b086      	sub	sp, #24
 800dec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dec2:	2300      	movs	r3, #0
 800dec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dec6:	4b4f      	ldr	r3, [pc, #316]	@ (800e004 <xTaskIncrementTick+0x148>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	f040 8090 	bne.w	800dff0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ded0:	4b4d      	ldr	r3, [pc, #308]	@ (800e008 <xTaskIncrementTick+0x14c>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	3301      	adds	r3, #1
 800ded6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ded8:	4a4b      	ldr	r2, [pc, #300]	@ (800e008 <xTaskIncrementTick+0x14c>)
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d121      	bne.n	800df28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dee4:	4b49      	ldr	r3, [pc, #292]	@ (800e00c <xTaskIncrementTick+0x150>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d00b      	beq.n	800df06 <xTaskIncrementTick+0x4a>
	__asm volatile
 800deee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def2:	f383 8811 	msr	BASEPRI, r3
 800def6:	f3bf 8f6f 	isb	sy
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	603b      	str	r3, [r7, #0]
}
 800df00:	bf00      	nop
 800df02:	bf00      	nop
 800df04:	e7fd      	b.n	800df02 <xTaskIncrementTick+0x46>
 800df06:	4b41      	ldr	r3, [pc, #260]	@ (800e00c <xTaskIncrementTick+0x150>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	60fb      	str	r3, [r7, #12]
 800df0c:	4b40      	ldr	r3, [pc, #256]	@ (800e010 <xTaskIncrementTick+0x154>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a3e      	ldr	r2, [pc, #248]	@ (800e00c <xTaskIncrementTick+0x150>)
 800df12:	6013      	str	r3, [r2, #0]
 800df14:	4a3e      	ldr	r2, [pc, #248]	@ (800e010 <xTaskIncrementTick+0x154>)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6013      	str	r3, [r2, #0]
 800df1a:	4b3e      	ldr	r3, [pc, #248]	@ (800e014 <xTaskIncrementTick+0x158>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	3301      	adds	r3, #1
 800df20:	4a3c      	ldr	r2, [pc, #240]	@ (800e014 <xTaskIncrementTick+0x158>)
 800df22:	6013      	str	r3, [r2, #0]
 800df24:	f000 fae2 	bl	800e4ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df28:	4b3b      	ldr	r3, [pc, #236]	@ (800e018 <xTaskIncrementTick+0x15c>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	693a      	ldr	r2, [r7, #16]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d349      	bcc.n	800dfc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df32:	4b36      	ldr	r3, [pc, #216]	@ (800e00c <xTaskIncrementTick+0x150>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d104      	bne.n	800df46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df3c:	4b36      	ldr	r3, [pc, #216]	@ (800e018 <xTaskIncrementTick+0x15c>)
 800df3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df42:	601a      	str	r2, [r3, #0]
					break;
 800df44:	e03f      	b.n	800dfc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df46:	4b31      	ldr	r3, [pc, #196]	@ (800e00c <xTaskIncrementTick+0x150>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df56:	693a      	ldr	r2, [r7, #16]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d203      	bcs.n	800df66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df5e:	4a2e      	ldr	r2, [pc, #184]	@ (800e018 <xTaskIncrementTick+0x15c>)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df64:	e02f      	b.n	800dfc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	3304      	adds	r3, #4
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fe ff10 	bl	800cd90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df74:	2b00      	cmp	r3, #0
 800df76:	d004      	beq.n	800df82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	3318      	adds	r3, #24
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fe ff07 	bl	800cd90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df86:	4b25      	ldr	r3, [pc, #148]	@ (800e01c <xTaskIncrementTick+0x160>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d903      	bls.n	800df96 <xTaskIncrementTick+0xda>
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df92:	4a22      	ldr	r2, [pc, #136]	@ (800e01c <xTaskIncrementTick+0x160>)
 800df94:	6013      	str	r3, [r2, #0]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df9a:	4613      	mov	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	4a1f      	ldr	r2, [pc, #124]	@ (800e020 <xTaskIncrementTick+0x164>)
 800dfa4:	441a      	add	r2, r3
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	4619      	mov	r1, r3
 800dfac:	4610      	mov	r0, r2
 800dfae:	f7fe fe92 	bl	800ccd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfb6:	4b1b      	ldr	r3, [pc, #108]	@ (800e024 <xTaskIncrementTick+0x168>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d3b8      	bcc.n	800df32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfc4:	e7b5      	b.n	800df32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfc6:	4b17      	ldr	r3, [pc, #92]	@ (800e024 <xTaskIncrementTick+0x168>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfcc:	4914      	ldr	r1, [pc, #80]	@ (800e020 <xTaskIncrementTick+0x164>)
 800dfce:	4613      	mov	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	4413      	add	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	440b      	add	r3, r1
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d901      	bls.n	800dfe2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dfe2:	4b11      	ldr	r3, [pc, #68]	@ (800e028 <xTaskIncrementTick+0x16c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d007      	beq.n	800dffa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dfea:	2301      	movs	r3, #1
 800dfec:	617b      	str	r3, [r7, #20]
 800dfee:	e004      	b.n	800dffa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dff0:	4b0e      	ldr	r3, [pc, #56]	@ (800e02c <xTaskIncrementTick+0x170>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	4a0d      	ldr	r2, [pc, #52]	@ (800e02c <xTaskIncrementTick+0x170>)
 800dff8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dffa:	697b      	ldr	r3, [r7, #20]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	240024fc 	.word	0x240024fc
 800e008:	240024d8 	.word	0x240024d8
 800e00c:	2400248c 	.word	0x2400248c
 800e010:	24002490 	.word	0x24002490
 800e014:	240024ec 	.word	0x240024ec
 800e018:	240024f4 	.word	0x240024f4
 800e01c:	240024dc 	.word	0x240024dc
 800e020:	24002004 	.word	0x24002004
 800e024:	24002000 	.word	0x24002000
 800e028:	240024e8 	.word	0x240024e8
 800e02c:	240024e4 	.word	0x240024e4

0800e030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e036:	4b2b      	ldr	r3, [pc, #172]	@ (800e0e4 <vTaskSwitchContext+0xb4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e03e:	4b2a      	ldr	r3, [pc, #168]	@ (800e0e8 <vTaskSwitchContext+0xb8>)
 800e040:	2201      	movs	r2, #1
 800e042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e044:	e047      	b.n	800e0d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e046:	4b28      	ldr	r3, [pc, #160]	@ (800e0e8 <vTaskSwitchContext+0xb8>)
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e04c:	4b27      	ldr	r3, [pc, #156]	@ (800e0ec <vTaskSwitchContext+0xbc>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	e011      	b.n	800e078 <vTaskSwitchContext+0x48>
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10b      	bne.n	800e072 <vTaskSwitchContext+0x42>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	607b      	str	r3, [r7, #4]
}
 800e06c:	bf00      	nop
 800e06e:	bf00      	nop
 800e070:	e7fd      	b.n	800e06e <vTaskSwitchContext+0x3e>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	3b01      	subs	r3, #1
 800e076:	60fb      	str	r3, [r7, #12]
 800e078:	491d      	ldr	r1, [pc, #116]	@ (800e0f0 <vTaskSwitchContext+0xc0>)
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	4613      	mov	r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4413      	add	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	440b      	add	r3, r1
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d0e3      	beq.n	800e054 <vTaskSwitchContext+0x24>
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	4613      	mov	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4413      	add	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4a16      	ldr	r2, [pc, #88]	@ (800e0f0 <vTaskSwitchContext+0xc0>)
 800e098:	4413      	add	r3, r2
 800e09a:	60bb      	str	r3, [r7, #8]
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	685a      	ldr	r2, [r3, #4]
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	605a      	str	r2, [r3, #4]
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	685a      	ldr	r2, [r3, #4]
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d104      	bne.n	800e0bc <vTaskSwitchContext+0x8c>
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	605a      	str	r2, [r3, #4]
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	4a0c      	ldr	r2, [pc, #48]	@ (800e0f4 <vTaskSwitchContext+0xc4>)
 800e0c4:	6013      	str	r3, [r2, #0]
 800e0c6:	4a09      	ldr	r2, [pc, #36]	@ (800e0ec <vTaskSwitchContext+0xbc>)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e0cc:	4b09      	ldr	r3, [pc, #36]	@ (800e0f4 <vTaskSwitchContext+0xc4>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	3354      	adds	r3, #84	@ 0x54
 800e0d2:	4a09      	ldr	r2, [pc, #36]	@ (800e0f8 <vTaskSwitchContext+0xc8>)
 800e0d4:	6013      	str	r3, [r2, #0]
}
 800e0d6:	bf00      	nop
 800e0d8:	3714      	adds	r7, #20
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop
 800e0e4:	240024fc 	.word	0x240024fc
 800e0e8:	240024e8 	.word	0x240024e8
 800e0ec:	240024dc 	.word	0x240024dc
 800e0f0:	24002004 	.word	0x24002004
 800e0f4:	24002000 	.word	0x24002000
 800e0f8:	2400139c 	.word	0x2400139c

0800e0fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10b      	bne.n	800e124 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e110:	f383 8811 	msr	BASEPRI, r3
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	60fb      	str	r3, [r7, #12]
}
 800e11e:	bf00      	nop
 800e120:	bf00      	nop
 800e122:	e7fd      	b.n	800e120 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e124:	4b07      	ldr	r3, [pc, #28]	@ (800e144 <vTaskPlaceOnEventList+0x48>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3318      	adds	r3, #24
 800e12a:	4619      	mov	r1, r3
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7fe fdf6 	bl	800cd1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e132:	2101      	movs	r1, #1
 800e134:	6838      	ldr	r0, [r7, #0]
 800e136:	f000 fc2f 	bl	800e998 <prvAddCurrentTaskToDelayedList>
}
 800e13a:	bf00      	nop
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	24002000 	.word	0x24002000

0800e148 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b086      	sub	sp, #24
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d10b      	bne.n	800e172 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	617b      	str	r3, [r7, #20]
}
 800e16c:	bf00      	nop
 800e16e:	bf00      	nop
 800e170:	e7fd      	b.n	800e16e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e172:	4b0a      	ldr	r3, [pc, #40]	@ (800e19c <vTaskPlaceOnEventListRestricted+0x54>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	3318      	adds	r3, #24
 800e178:	4619      	mov	r1, r3
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f7fe fdab 	bl	800ccd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d002      	beq.n	800e18c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e18a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e18c:	6879      	ldr	r1, [r7, #4]
 800e18e:	68b8      	ldr	r0, [r7, #8]
 800e190:	f000 fc02 	bl	800e998 <prvAddCurrentTaskToDelayedList>
	}
 800e194:	bf00      	nop
 800e196:	3718      	adds	r7, #24
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	24002000 	.word	0x24002000

0800e1a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b086      	sub	sp, #24
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10b      	bne.n	800e1ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ba:	f383 8811 	msr	BASEPRI, r3
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	60fb      	str	r3, [r7, #12]
}
 800e1c8:	bf00      	nop
 800e1ca:	bf00      	nop
 800e1cc:	e7fd      	b.n	800e1ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	3318      	adds	r3, #24
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fe fddc 	bl	800cd90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1d8:	4b1d      	ldr	r3, [pc, #116]	@ (800e250 <xTaskRemoveFromEventList+0xb0>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d11d      	bne.n	800e21c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7fe fdd3 	bl	800cd90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ee:	4b19      	ldr	r3, [pc, #100]	@ (800e254 <xTaskRemoveFromEventList+0xb4>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d903      	bls.n	800e1fe <xTaskRemoveFromEventList+0x5e>
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1fa:	4a16      	ldr	r2, [pc, #88]	@ (800e254 <xTaskRemoveFromEventList+0xb4>)
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e202:	4613      	mov	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4413      	add	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4a13      	ldr	r2, [pc, #76]	@ (800e258 <xTaskRemoveFromEventList+0xb8>)
 800e20c:	441a      	add	r2, r3
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	3304      	adds	r3, #4
 800e212:	4619      	mov	r1, r3
 800e214:	4610      	mov	r0, r2
 800e216:	f7fe fd5e 	bl	800ccd6 <vListInsertEnd>
 800e21a:	e005      	b.n	800e228 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	3318      	adds	r3, #24
 800e220:	4619      	mov	r1, r3
 800e222:	480e      	ldr	r0, [pc, #56]	@ (800e25c <xTaskRemoveFromEventList+0xbc>)
 800e224:	f7fe fd57 	bl	800ccd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e22c:	4b0c      	ldr	r3, [pc, #48]	@ (800e260 <xTaskRemoveFromEventList+0xc0>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e232:	429a      	cmp	r2, r3
 800e234:	d905      	bls.n	800e242 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e236:	2301      	movs	r3, #1
 800e238:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e23a:	4b0a      	ldr	r3, [pc, #40]	@ (800e264 <xTaskRemoveFromEventList+0xc4>)
 800e23c:	2201      	movs	r2, #1
 800e23e:	601a      	str	r2, [r3, #0]
 800e240:	e001      	b.n	800e246 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e242:	2300      	movs	r3, #0
 800e244:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e246:	697b      	ldr	r3, [r7, #20]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3718      	adds	r7, #24
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	240024fc 	.word	0x240024fc
 800e254:	240024dc 	.word	0x240024dc
 800e258:	24002004 	.word	0x24002004
 800e25c:	24002494 	.word	0x24002494
 800e260:	24002000 	.word	0x24002000
 800e264:	240024e8 	.word	0x240024e8

0800e268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e270:	4b06      	ldr	r3, [pc, #24]	@ (800e28c <vTaskInternalSetTimeOutState+0x24>)
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e278:	4b05      	ldr	r3, [pc, #20]	@ (800e290 <vTaskInternalSetTimeOutState+0x28>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	605a      	str	r2, [r3, #4]
}
 800e280:	bf00      	nop
 800e282:	370c      	adds	r7, #12
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr
 800e28c:	240024ec 	.word	0x240024ec
 800e290:	240024d8 	.word	0x240024d8

0800e294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b088      	sub	sp, #32
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10b      	bne.n	800e2bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a8:	f383 8811 	msr	BASEPRI, r3
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	613b      	str	r3, [r7, #16]
}
 800e2b6:	bf00      	nop
 800e2b8:	bf00      	nop
 800e2ba:	e7fd      	b.n	800e2b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d10b      	bne.n	800e2da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c6:	f383 8811 	msr	BASEPRI, r3
 800e2ca:	f3bf 8f6f 	isb	sy
 800e2ce:	f3bf 8f4f 	dsb	sy
 800e2d2:	60fb      	str	r3, [r7, #12]
}
 800e2d4:	bf00      	nop
 800e2d6:	bf00      	nop
 800e2d8:	e7fd      	b.n	800e2d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e2da:	f001 f83d 	bl	800f358 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2de:	4b1d      	ldr	r3, [pc, #116]	@ (800e354 <xTaskCheckForTimeOut+0xc0>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	69ba      	ldr	r2, [r7, #24]
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e2f6:	d102      	bne.n	800e2fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	61fb      	str	r3, [r7, #28]
 800e2fc:	e023      	b.n	800e346 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	4b15      	ldr	r3, [pc, #84]	@ (800e358 <xTaskCheckForTimeOut+0xc4>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	429a      	cmp	r2, r3
 800e308:	d007      	beq.n	800e31a <xTaskCheckForTimeOut+0x86>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	69ba      	ldr	r2, [r7, #24]
 800e310:	429a      	cmp	r2, r3
 800e312:	d302      	bcc.n	800e31a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e314:	2301      	movs	r3, #1
 800e316:	61fb      	str	r3, [r7, #28]
 800e318:	e015      	b.n	800e346 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	697a      	ldr	r2, [r7, #20]
 800e320:	429a      	cmp	r2, r3
 800e322:	d20b      	bcs.n	800e33c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	1ad2      	subs	r2, r2, r3
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff ff99 	bl	800e268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e336:	2300      	movs	r3, #0
 800e338:	61fb      	str	r3, [r7, #28]
 800e33a:	e004      	b.n	800e346 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	2200      	movs	r2, #0
 800e340:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e342:	2301      	movs	r3, #1
 800e344:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e346:	f001 f839 	bl	800f3bc <vPortExitCritical>

	return xReturn;
 800e34a:	69fb      	ldr	r3, [r7, #28]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3720      	adds	r7, #32
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	240024d8 	.word	0x240024d8
 800e358:	240024ec 	.word	0x240024ec

0800e35c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e35c:	b480      	push	{r7}
 800e35e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e360:	4b03      	ldr	r3, [pc, #12]	@ (800e370 <vTaskMissedYield+0x14>)
 800e362:	2201      	movs	r2, #1
 800e364:	601a      	str	r2, [r3, #0]
}
 800e366:	bf00      	nop
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr
 800e370:	240024e8 	.word	0x240024e8

0800e374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e37c:	f000 f852 	bl	800e424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e380:	4b06      	ldr	r3, [pc, #24]	@ (800e39c <prvIdleTask+0x28>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d9f9      	bls.n	800e37c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e388:	4b05      	ldr	r3, [pc, #20]	@ (800e3a0 <prvIdleTask+0x2c>)
 800e38a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e38e:	601a      	str	r2, [r3, #0]
 800e390:	f3bf 8f4f 	dsb	sy
 800e394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e398:	e7f0      	b.n	800e37c <prvIdleTask+0x8>
 800e39a:	bf00      	nop
 800e39c:	24002004 	.word	0x24002004
 800e3a0:	e000ed04 	.word	0xe000ed04

0800e3a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	607b      	str	r3, [r7, #4]
 800e3ae:	e00c      	b.n	800e3ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4413      	add	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4a12      	ldr	r2, [pc, #72]	@ (800e404 <prvInitialiseTaskLists+0x60>)
 800e3bc:	4413      	add	r3, r2
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fe fc5c 	bl	800cc7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	607b      	str	r3, [r7, #4]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2b37      	cmp	r3, #55	@ 0x37
 800e3ce:	d9ef      	bls.n	800e3b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3d0:	480d      	ldr	r0, [pc, #52]	@ (800e408 <prvInitialiseTaskLists+0x64>)
 800e3d2:	f7fe fc53 	bl	800cc7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3d6:	480d      	ldr	r0, [pc, #52]	@ (800e40c <prvInitialiseTaskLists+0x68>)
 800e3d8:	f7fe fc50 	bl	800cc7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3dc:	480c      	ldr	r0, [pc, #48]	@ (800e410 <prvInitialiseTaskLists+0x6c>)
 800e3de:	f7fe fc4d 	bl	800cc7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e3e2:	480c      	ldr	r0, [pc, #48]	@ (800e414 <prvInitialiseTaskLists+0x70>)
 800e3e4:	f7fe fc4a 	bl	800cc7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3e8:	480b      	ldr	r0, [pc, #44]	@ (800e418 <prvInitialiseTaskLists+0x74>)
 800e3ea:	f7fe fc47 	bl	800cc7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e41c <prvInitialiseTaskLists+0x78>)
 800e3f0:	4a05      	ldr	r2, [pc, #20]	@ (800e408 <prvInitialiseTaskLists+0x64>)
 800e3f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e3f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e420 <prvInitialiseTaskLists+0x7c>)
 800e3f6:	4a05      	ldr	r2, [pc, #20]	@ (800e40c <prvInitialiseTaskLists+0x68>)
 800e3f8:	601a      	str	r2, [r3, #0]
}
 800e3fa:	bf00      	nop
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	24002004 	.word	0x24002004
 800e408:	24002464 	.word	0x24002464
 800e40c:	24002478 	.word	0x24002478
 800e410:	24002494 	.word	0x24002494
 800e414:	240024a8 	.word	0x240024a8
 800e418:	240024c0 	.word	0x240024c0
 800e41c:	2400248c 	.word	0x2400248c
 800e420:	24002490 	.word	0x24002490

0800e424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e42a:	e019      	b.n	800e460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e42c:	f000 ff94 	bl	800f358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e430:	4b10      	ldr	r3, [pc, #64]	@ (800e474 <prvCheckTasksWaitingTermination+0x50>)
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	3304      	adds	r3, #4
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fe fca7 	bl	800cd90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e442:	4b0d      	ldr	r3, [pc, #52]	@ (800e478 <prvCheckTasksWaitingTermination+0x54>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	3b01      	subs	r3, #1
 800e448:	4a0b      	ldr	r2, [pc, #44]	@ (800e478 <prvCheckTasksWaitingTermination+0x54>)
 800e44a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e44c:	4b0b      	ldr	r3, [pc, #44]	@ (800e47c <prvCheckTasksWaitingTermination+0x58>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3b01      	subs	r3, #1
 800e452:	4a0a      	ldr	r2, [pc, #40]	@ (800e47c <prvCheckTasksWaitingTermination+0x58>)
 800e454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e456:	f000 ffb1 	bl	800f3bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f810 	bl	800e480 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e460:	4b06      	ldr	r3, [pc, #24]	@ (800e47c <prvCheckTasksWaitingTermination+0x58>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1e1      	bne.n	800e42c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e468:	bf00      	nop
 800e46a:	bf00      	nop
 800e46c:	3708      	adds	r7, #8
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	240024a8 	.word	0x240024a8
 800e478:	240024d4 	.word	0x240024d4
 800e47c:	240024bc 	.word	0x240024bc

0800e480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	3354      	adds	r3, #84	@ 0x54
 800e48c:	4618      	mov	r0, r3
 800e48e:	f004 fdeb 	bl	8013068 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d108      	bne.n	800e4ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f001 f949 	bl	800f738 <vPortFree>
				vPortFree( pxTCB );
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f001 f946 	bl	800f738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4ac:	e019      	b.n	800e4e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d103      	bne.n	800e4c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f001 f93d 	bl	800f738 <vPortFree>
	}
 800e4be:	e010      	b.n	800e4e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e4c6:	2b02      	cmp	r3, #2
 800e4c8:	d00b      	beq.n	800e4e2 <prvDeleteTCB+0x62>
	__asm volatile
 800e4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	60fb      	str	r3, [r7, #12]
}
 800e4dc:	bf00      	nop
 800e4de:	bf00      	nop
 800e4e0:	e7fd      	b.n	800e4de <prvDeleteTCB+0x5e>
	}
 800e4e2:	bf00      	nop
 800e4e4:	3710      	adds	r7, #16
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
	...

0800e4ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4f2:	4b0c      	ldr	r3, [pc, #48]	@ (800e524 <prvResetNextTaskUnblockTime+0x38>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d104      	bne.n	800e506 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e528 <prvResetNextTaskUnblockTime+0x3c>)
 800e4fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e502:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e504:	e008      	b.n	800e518 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e506:	4b07      	ldr	r3, [pc, #28]	@ (800e524 <prvResetNextTaskUnblockTime+0x38>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	4a04      	ldr	r2, [pc, #16]	@ (800e528 <prvResetNextTaskUnblockTime+0x3c>)
 800e516:	6013      	str	r3, [r2, #0]
}
 800e518:	bf00      	nop
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr
 800e524:	2400248c 	.word	0x2400248c
 800e528:	240024f4 	.word	0x240024f4

0800e52c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e532:	4b0b      	ldr	r3, [pc, #44]	@ (800e560 <xTaskGetSchedulerState+0x34>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d102      	bne.n	800e540 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e53a:	2301      	movs	r3, #1
 800e53c:	607b      	str	r3, [r7, #4]
 800e53e:	e008      	b.n	800e552 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e540:	4b08      	ldr	r3, [pc, #32]	@ (800e564 <xTaskGetSchedulerState+0x38>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d102      	bne.n	800e54e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e548:	2302      	movs	r3, #2
 800e54a:	607b      	str	r3, [r7, #4]
 800e54c:	e001      	b.n	800e552 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e54e:	2300      	movs	r3, #0
 800e550:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e552:	687b      	ldr	r3, [r7, #4]
	}
 800e554:	4618      	mov	r0, r3
 800e556:	370c      	adds	r7, #12
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	240024e0 	.word	0x240024e0
 800e564:	240024fc 	.word	0x240024fc

0800e568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e574:	2300      	movs	r3, #0
 800e576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d058      	beq.n	800e630 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e57e:	4b2f      	ldr	r3, [pc, #188]	@ (800e63c <xTaskPriorityDisinherit+0xd4>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	693a      	ldr	r2, [r7, #16]
 800e584:	429a      	cmp	r2, r3
 800e586:	d00b      	beq.n	800e5a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58c:	f383 8811 	msr	BASEPRI, r3
 800e590:	f3bf 8f6f 	isb	sy
 800e594:	f3bf 8f4f 	dsb	sy
 800e598:	60fb      	str	r3, [r7, #12]
}
 800e59a:	bf00      	nop
 800e59c:	bf00      	nop
 800e59e:	e7fd      	b.n	800e59c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10b      	bne.n	800e5c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ac:	f383 8811 	msr	BASEPRI, r3
 800e5b0:	f3bf 8f6f 	isb	sy
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	60bb      	str	r3, [r7, #8]
}
 800e5ba:	bf00      	nop
 800e5bc:	bf00      	nop
 800e5be:	e7fd      	b.n	800e5bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5c4:	1e5a      	subs	r2, r3, #1
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d02c      	beq.n	800e630 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d128      	bne.n	800e630 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fe fbd4 	bl	800cd90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e600:	4b0f      	ldr	r3, [pc, #60]	@ (800e640 <xTaskPriorityDisinherit+0xd8>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	429a      	cmp	r2, r3
 800e606:	d903      	bls.n	800e610 <xTaskPriorityDisinherit+0xa8>
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60c:	4a0c      	ldr	r2, [pc, #48]	@ (800e640 <xTaskPriorityDisinherit+0xd8>)
 800e60e:	6013      	str	r3, [r2, #0]
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e614:	4613      	mov	r3, r2
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	4413      	add	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	4a09      	ldr	r2, [pc, #36]	@ (800e644 <xTaskPriorityDisinherit+0xdc>)
 800e61e:	441a      	add	r2, r3
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	3304      	adds	r3, #4
 800e624:	4619      	mov	r1, r3
 800e626:	4610      	mov	r0, r2
 800e628:	f7fe fb55 	bl	800ccd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e62c:	2301      	movs	r3, #1
 800e62e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e630:	697b      	ldr	r3, [r7, #20]
	}
 800e632:	4618      	mov	r0, r3
 800e634:	3718      	adds	r7, #24
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	24002000 	.word	0x24002000
 800e640:	240024dc 	.word	0x240024dc
 800e644:	24002004 	.word	0x24002004

0800e648 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b08a      	sub	sp, #40	@ 0x28
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	603b      	str	r3, [r7, #0]
 800e654:	4613      	mov	r3, r2
 800e656:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e658:	2301      	movs	r3, #1
 800e65a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d10b      	bne.n	800e67a <xTaskGenericNotify+0x32>
	__asm volatile
 800e662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	61bb      	str	r3, [r7, #24]
}
 800e674:	bf00      	nop
 800e676:	bf00      	nop
 800e678:	e7fd      	b.n	800e676 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e67e:	f000 fe6b 	bl	800f358 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d004      	beq.n	800e692 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e688:	6a3b      	ldr	r3, [r7, #32]
 800e68a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e692:	6a3b      	ldr	r3, [r7, #32]
 800e694:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e698:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	2202      	movs	r2, #2
 800e69e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800e6a2:	79fb      	ldrb	r3, [r7, #7]
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d82e      	bhi.n	800e706 <xTaskGenericNotify+0xbe>
 800e6a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e6b0 <xTaskGenericNotify+0x68>)
 800e6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ae:	bf00      	nop
 800e6b0:	0800e72b 	.word	0x0800e72b
 800e6b4:	0800e6c5 	.word	0x0800e6c5
 800e6b8:	0800e6d7 	.word	0x0800e6d7
 800e6bc:	0800e6e7 	.word	0x0800e6e7
 800e6c0:	0800e6f1 	.word	0x0800e6f1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	431a      	orrs	r2, r3
 800e6ce:	6a3b      	ldr	r3, [r7, #32]
 800e6d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800e6d4:	e02c      	b.n	800e730 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	6a3b      	ldr	r3, [r7, #32]
 800e6e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800e6e4:	e024      	b.n	800e730 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e6e6:	6a3b      	ldr	r3, [r7, #32]
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800e6ee:	e01f      	b.n	800e730 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e6f0:	7ffb      	ldrb	r3, [r7, #31]
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d004      	beq.n	800e700 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e6f6:	6a3b      	ldr	r3, [r7, #32]
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e6fe:	e017      	b.n	800e730 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800e700:	2300      	movs	r3, #0
 800e702:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800e704:	e014      	b.n	800e730 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e70c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e710:	d00d      	beq.n	800e72e <xTaskGenericNotify+0xe6>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	617b      	str	r3, [r7, #20]
}
 800e724:	bf00      	nop
 800e726:	bf00      	nop
 800e728:	e7fd      	b.n	800e726 <xTaskGenericNotify+0xde>
					break;
 800e72a:	bf00      	nop
 800e72c:	e000      	b.n	800e730 <xTaskGenericNotify+0xe8>

					break;
 800e72e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e730:	7ffb      	ldrb	r3, [r7, #31]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d13b      	bne.n	800e7ae <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e736:	6a3b      	ldr	r3, [r7, #32]
 800e738:	3304      	adds	r3, #4
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7fe fb28 	bl	800cd90 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e740:	6a3b      	ldr	r3, [r7, #32]
 800e742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e744:	4b1d      	ldr	r3, [pc, #116]	@ (800e7bc <xTaskGenericNotify+0x174>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d903      	bls.n	800e754 <xTaskGenericNotify+0x10c>
 800e74c:	6a3b      	ldr	r3, [r7, #32]
 800e74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e750:	4a1a      	ldr	r2, [pc, #104]	@ (800e7bc <xTaskGenericNotify+0x174>)
 800e752:	6013      	str	r3, [r2, #0]
 800e754:	6a3b      	ldr	r3, [r7, #32]
 800e756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e758:	4613      	mov	r3, r2
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	4413      	add	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4a17      	ldr	r2, [pc, #92]	@ (800e7c0 <xTaskGenericNotify+0x178>)
 800e762:	441a      	add	r2, r3
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	3304      	adds	r3, #4
 800e768:	4619      	mov	r1, r3
 800e76a:	4610      	mov	r0, r2
 800e76c:	f7fe fab3 	bl	800ccd6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e770:	6a3b      	ldr	r3, [r7, #32]
 800e772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00b      	beq.n	800e790 <xTaskGenericNotify+0x148>
	__asm volatile
 800e778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77c:	f383 8811 	msr	BASEPRI, r3
 800e780:	f3bf 8f6f 	isb	sy
 800e784:	f3bf 8f4f 	dsb	sy
 800e788:	613b      	str	r3, [r7, #16]
}
 800e78a:	bf00      	nop
 800e78c:	bf00      	nop
 800e78e:	e7fd      	b.n	800e78c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e790:	6a3b      	ldr	r3, [r7, #32]
 800e792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e794:	4b0b      	ldr	r3, [pc, #44]	@ (800e7c4 <xTaskGenericNotify+0x17c>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d907      	bls.n	800e7ae <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e79e:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c8 <xTaskGenericNotify+0x180>)
 800e7a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7a4:	601a      	str	r2, [r3, #0]
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e7ae:	f000 fe05 	bl	800f3bc <vPortExitCritical>

		return xReturn;
 800e7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3728      	adds	r7, #40	@ 0x28
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	240024dc 	.word	0x240024dc
 800e7c0:	24002004 	.word	0x24002004
 800e7c4:	24002000 	.word	0x24002000
 800e7c8:	e000ed04 	.word	0xe000ed04

0800e7cc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b08e      	sub	sp, #56	@ 0x38
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	603b      	str	r3, [r7, #0]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d10b      	bne.n	800e7fe <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800e7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e7f8:	bf00      	nop
 800e7fa:	bf00      	nop
 800e7fc:	e7fd      	b.n	800e7fa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7fe:	f000 fe8b 	bl	800f518 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800e806:	f3ef 8211 	mrs	r2, BASEPRI
 800e80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80e:	f383 8811 	msr	BASEPRI, r3
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	f3bf 8f4f 	dsb	sy
 800e81a:	623a      	str	r2, [r7, #32]
 800e81c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800e81e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e820:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d004      	beq.n	800e832 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e82a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e834:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e838:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e83e:	2202      	movs	r2, #2
 800e840:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800e844:	79fb      	ldrb	r3, [r7, #7]
 800e846:	2b04      	cmp	r3, #4
 800e848:	d82e      	bhi.n	800e8a8 <xTaskGenericNotifyFromISR+0xdc>
 800e84a:	a201      	add	r2, pc, #4	@ (adr r2, 800e850 <xTaskGenericNotifyFromISR+0x84>)
 800e84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e850:	0800e8cd 	.word	0x0800e8cd
 800e854:	0800e865 	.word	0x0800e865
 800e858:	0800e877 	.word	0x0800e877
 800e85c:	0800e887 	.word	0x0800e887
 800e860:	0800e891 	.word	0x0800e891
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e866:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	431a      	orrs	r2, r3
 800e86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e870:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800e874:	e02d      	b.n	800e8d2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e878:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e87c:	1c5a      	adds	r2, r3, #1
 800e87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e880:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800e884:	e025      	b.n	800e8d2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800e88e:	e020      	b.n	800e8d2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e890:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e894:	2b02      	cmp	r3, #2
 800e896:	d004      	beq.n	800e8a2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e8a0:	e017      	b.n	800e8d2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800e8a6:	e014      	b.n	800e8d2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e8ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e8b2:	d00d      	beq.n	800e8d0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	61bb      	str	r3, [r7, #24]
}
 800e8c6:	bf00      	nop
 800e8c8:	bf00      	nop
 800e8ca:	e7fd      	b.n	800e8c8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800e8cc:	bf00      	nop
 800e8ce:	e000      	b.n	800e8d2 <xTaskGenericNotifyFromISR+0x106>
					break;
 800e8d0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e8d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d147      	bne.n	800e96a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00b      	beq.n	800e8fa <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800e8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e6:	f383 8811 	msr	BASEPRI, r3
 800e8ea:	f3bf 8f6f 	isb	sy
 800e8ee:	f3bf 8f4f 	dsb	sy
 800e8f2:	617b      	str	r3, [r7, #20]
}
 800e8f4:	bf00      	nop
 800e8f6:	bf00      	nop
 800e8f8:	e7fd      	b.n	800e8f6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8fa:	4b21      	ldr	r3, [pc, #132]	@ (800e980 <xTaskGenericNotifyFromISR+0x1b4>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d11d      	bne.n	800e93e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e904:	3304      	adds	r3, #4
 800e906:	4618      	mov	r0, r3
 800e908:	f7fe fa42 	bl	800cd90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e910:	4b1c      	ldr	r3, [pc, #112]	@ (800e984 <xTaskGenericNotifyFromISR+0x1b8>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	429a      	cmp	r2, r3
 800e916:	d903      	bls.n	800e920 <xTaskGenericNotifyFromISR+0x154>
 800e918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e91c:	4a19      	ldr	r2, [pc, #100]	@ (800e984 <xTaskGenericNotifyFromISR+0x1b8>)
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e924:	4613      	mov	r3, r2
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4413      	add	r3, r2
 800e92a:	009b      	lsls	r3, r3, #2
 800e92c:	4a16      	ldr	r2, [pc, #88]	@ (800e988 <xTaskGenericNotifyFromISR+0x1bc>)
 800e92e:	441a      	add	r2, r3
 800e930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e932:	3304      	adds	r3, #4
 800e934:	4619      	mov	r1, r3
 800e936:	4610      	mov	r0, r2
 800e938:	f7fe f9cd 	bl	800ccd6 <vListInsertEnd>
 800e93c:	e005      	b.n	800e94a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e940:	3318      	adds	r3, #24
 800e942:	4619      	mov	r1, r3
 800e944:	4811      	ldr	r0, [pc, #68]	@ (800e98c <xTaskGenericNotifyFromISR+0x1c0>)
 800e946:	f7fe f9c6 	bl	800ccd6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e94e:	4b10      	ldr	r3, [pc, #64]	@ (800e990 <xTaskGenericNotifyFromISR+0x1c4>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e954:	429a      	cmp	r2, r3
 800e956:	d908      	bls.n	800e96a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d002      	beq.n	800e964 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e95e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e960:	2201      	movs	r2, #1
 800e962:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e964:	4b0b      	ldr	r3, [pc, #44]	@ (800e994 <xTaskGenericNotifyFromISR+0x1c8>)
 800e966:	2201      	movs	r2, #1
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e96c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	f383 8811 	msr	BASEPRI, r3
}
 800e974:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800e976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800e978:	4618      	mov	r0, r3
 800e97a:	3738      	adds	r7, #56	@ 0x38
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	240024fc 	.word	0x240024fc
 800e984:	240024dc 	.word	0x240024dc
 800e988:	24002004 	.word	0x24002004
 800e98c:	24002494 	.word	0x24002494
 800e990:	24002000 	.word	0x24002000
 800e994:	240024e8 	.word	0x240024e8

0800e998 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e9a2:	4b21      	ldr	r3, [pc, #132]	@ (800ea28 <prvAddCurrentTaskToDelayedList+0x90>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9a8:	4b20      	ldr	r3, [pc, #128]	@ (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	3304      	adds	r3, #4
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fe f9ee 	bl	800cd90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9ba:	d10a      	bne.n	800e9d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d007      	beq.n	800e9d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9c2:	4b1a      	ldr	r3, [pc, #104]	@ (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	3304      	adds	r3, #4
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	4819      	ldr	r0, [pc, #100]	@ (800ea30 <prvAddCurrentTaskToDelayedList+0x98>)
 800e9cc:	f7fe f983 	bl	800ccd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9d0:	e026      	b.n	800ea20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9da:	4b14      	ldr	r3, [pc, #80]	@ (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d209      	bcs.n	800e9fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9ea:	4b12      	ldr	r3, [pc, #72]	@ (800ea34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	4b0f      	ldr	r3, [pc, #60]	@ (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4610      	mov	r0, r2
 800e9f8:	f7fe f991 	bl	800cd1e <vListInsert>
}
 800e9fc:	e010      	b.n	800ea20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9fe:	4b0e      	ldr	r3, [pc, #56]	@ (800ea38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b0a      	ldr	r3, [pc, #40]	@ (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	3304      	adds	r3, #4
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4610      	mov	r0, r2
 800ea0c:	f7fe f987 	bl	800cd1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ea10:	4b0a      	ldr	r3, [pc, #40]	@ (800ea3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68ba      	ldr	r2, [r7, #8]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d202      	bcs.n	800ea20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ea1a:	4a08      	ldr	r2, [pc, #32]	@ (800ea3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	6013      	str	r3, [r2, #0]
}
 800ea20:	bf00      	nop
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	240024d8 	.word	0x240024d8
 800ea2c:	24002000 	.word	0x24002000
 800ea30:	240024c0 	.word	0x240024c0
 800ea34:	24002490 	.word	0x24002490
 800ea38:	2400248c 	.word	0x2400248c
 800ea3c:	240024f4 	.word	0x240024f4

0800ea40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08a      	sub	sp, #40	@ 0x28
 800ea44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea46:	2300      	movs	r3, #0
 800ea48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea4a:	f000 fb13 	bl	800f074 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea4e:	4b1d      	ldr	r3, [pc, #116]	@ (800eac4 <xTimerCreateTimerTask+0x84>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d021      	beq.n	800ea9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea56:	2300      	movs	r3, #0
 800ea58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea5e:	1d3a      	adds	r2, r7, #4
 800ea60:	f107 0108 	add.w	r1, r7, #8
 800ea64:	f107 030c 	add.w	r3, r7, #12
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe f8ed 	bl	800cc48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	68fa      	ldr	r2, [r7, #12]
 800ea74:	9202      	str	r2, [sp, #8]
 800ea76:	9301      	str	r3, [sp, #4]
 800ea78:	2302      	movs	r3, #2
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	460a      	mov	r2, r1
 800ea80:	4911      	ldr	r1, [pc, #68]	@ (800eac8 <xTimerCreateTimerTask+0x88>)
 800ea82:	4812      	ldr	r0, [pc, #72]	@ (800eacc <xTimerCreateTimerTask+0x8c>)
 800ea84:	f7fe ff30 	bl	800d8e8 <xTaskCreateStatic>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	4a11      	ldr	r2, [pc, #68]	@ (800ead0 <xTimerCreateTimerTask+0x90>)
 800ea8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea8e:	4b10      	ldr	r3, [pc, #64]	@ (800ead0 <xTimerCreateTimerTask+0x90>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d001      	beq.n	800ea9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea96:	2301      	movs	r3, #1
 800ea98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d10b      	bne.n	800eab8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800eaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	613b      	str	r3, [r7, #16]
}
 800eab2:	bf00      	nop
 800eab4:	bf00      	nop
 800eab6:	e7fd      	b.n	800eab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eab8:	697b      	ldr	r3, [r7, #20]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3718      	adds	r7, #24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	24002530 	.word	0x24002530
 800eac8:	08013584 	.word	0x08013584
 800eacc:	0800ec0d 	.word	0x0800ec0d
 800ead0:	24002534 	.word	0x24002534

0800ead4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08a      	sub	sp, #40	@ 0x28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10b      	bne.n	800eb04 <xTimerGenericCommand+0x30>
	__asm volatile
 800eaec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf0:	f383 8811 	msr	BASEPRI, r3
 800eaf4:	f3bf 8f6f 	isb	sy
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	623b      	str	r3, [r7, #32]
}
 800eafe:	bf00      	nop
 800eb00:	bf00      	nop
 800eb02:	e7fd      	b.n	800eb00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eb04:	4b19      	ldr	r3, [pc, #100]	@ (800eb6c <xTimerGenericCommand+0x98>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d02a      	beq.n	800eb62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	dc18      	bgt.n	800eb50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb1e:	f7ff fd05 	bl	800e52c <xTaskGetSchedulerState>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d109      	bne.n	800eb3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb28:	4b10      	ldr	r3, [pc, #64]	@ (800eb6c <xTimerGenericCommand+0x98>)
 800eb2a:	6818      	ldr	r0, [r3, #0]
 800eb2c:	f107 0110 	add.w	r1, r7, #16
 800eb30:	2300      	movs	r3, #0
 800eb32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb34:	f7fe fae8 	bl	800d108 <xQueueGenericSend>
 800eb38:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb3a:	e012      	b.n	800eb62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb3c:	4b0b      	ldr	r3, [pc, #44]	@ (800eb6c <xTimerGenericCommand+0x98>)
 800eb3e:	6818      	ldr	r0, [r3, #0]
 800eb40:	f107 0110 	add.w	r1, r7, #16
 800eb44:	2300      	movs	r3, #0
 800eb46:	2200      	movs	r2, #0
 800eb48:	f7fe fade 	bl	800d108 <xQueueGenericSend>
 800eb4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb4e:	e008      	b.n	800eb62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb50:	4b06      	ldr	r3, [pc, #24]	@ (800eb6c <xTimerGenericCommand+0x98>)
 800eb52:	6818      	ldr	r0, [r3, #0]
 800eb54:	f107 0110 	add.w	r1, r7, #16
 800eb58:	2300      	movs	r3, #0
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	f7fe fbd6 	bl	800d30c <xQueueGenericSendFromISR>
 800eb60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3728      	adds	r7, #40	@ 0x28
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	24002530 	.word	0x24002530

0800eb70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b088      	sub	sp, #32
 800eb74:	af02      	add	r7, sp, #8
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb7a:	4b23      	ldr	r3, [pc, #140]	@ (800ec08 <prvProcessExpiredTimer+0x98>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	3304      	adds	r3, #4
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fe f901 	bl	800cd90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb94:	f003 0304 	and.w	r3, r3, #4
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d023      	beq.n	800ebe4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	699a      	ldr	r2, [r3, #24]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	18d1      	adds	r1, r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	683a      	ldr	r2, [r7, #0]
 800eba8:	6978      	ldr	r0, [r7, #20]
 800ebaa:	f000 f8d5 	bl	800ed58 <prvInsertTimerInActiveList>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d020      	beq.n	800ebf6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	2300      	movs	r3, #0
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	6978      	ldr	r0, [r7, #20]
 800ebc0:	f7ff ff88 	bl	800ead4 <xTimerGenericCommand>
 800ebc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d114      	bne.n	800ebf6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ebcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd0:	f383 8811 	msr	BASEPRI, r3
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	60fb      	str	r3, [r7, #12]
}
 800ebde:	bf00      	nop
 800ebe0:	bf00      	nop
 800ebe2:	e7fd      	b.n	800ebe0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebea:	f023 0301 	bic.w	r3, r3, #1
 800ebee:	b2da      	uxtb	r2, r3
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	6a1b      	ldr	r3, [r3, #32]
 800ebfa:	6978      	ldr	r0, [r7, #20]
 800ebfc:	4798      	blx	r3
}
 800ebfe:	bf00      	nop
 800ec00:	3718      	adds	r7, #24
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	24002528 	.word	0x24002528

0800ec0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec14:	f107 0308 	add.w	r3, r7, #8
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 f859 	bl	800ecd0 <prvGetNextExpireTime>
 800ec1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	4619      	mov	r1, r3
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f000 f805 	bl	800ec34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec2a:	f000 f8d7 	bl	800eddc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec2e:	bf00      	nop
 800ec30:	e7f0      	b.n	800ec14 <prvTimerTask+0x8>
	...

0800ec34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b084      	sub	sp, #16
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec3e:	f7ff f881 	bl	800dd44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec42:	f107 0308 	add.w	r3, r7, #8
 800ec46:	4618      	mov	r0, r3
 800ec48:	f000 f866 	bl	800ed18 <prvSampleTimeNow>
 800ec4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d130      	bne.n	800ecb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10a      	bne.n	800ec70 <prvProcessTimerOrBlockTask+0x3c>
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d806      	bhi.n	800ec70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec62:	f7ff f87d 	bl	800dd60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec66:	68f9      	ldr	r1, [r7, #12]
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7ff ff81 	bl	800eb70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec6e:	e024      	b.n	800ecba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d008      	beq.n	800ec88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec76:	4b13      	ldr	r3, [pc, #76]	@ (800ecc4 <prvProcessTimerOrBlockTask+0x90>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d101      	bne.n	800ec84 <prvProcessTimerOrBlockTask+0x50>
 800ec80:	2301      	movs	r3, #1
 800ec82:	e000      	b.n	800ec86 <prvProcessTimerOrBlockTask+0x52>
 800ec84:	2300      	movs	r3, #0
 800ec86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec88:	4b0f      	ldr	r3, [pc, #60]	@ (800ecc8 <prvProcessTimerOrBlockTask+0x94>)
 800ec8a:	6818      	ldr	r0, [r3, #0]
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	683a      	ldr	r2, [r7, #0]
 800ec94:	4619      	mov	r1, r3
 800ec96:	f7fe fdf3 	bl	800d880 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec9a:	f7ff f861 	bl	800dd60 <xTaskResumeAll>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10a      	bne.n	800ecba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eca4:	4b09      	ldr	r3, [pc, #36]	@ (800eccc <prvProcessTimerOrBlockTask+0x98>)
 800eca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecaa:	601a      	str	r2, [r3, #0]
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	f3bf 8f6f 	isb	sy
}
 800ecb4:	e001      	b.n	800ecba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ecb6:	f7ff f853 	bl	800dd60 <xTaskResumeAll>
}
 800ecba:	bf00      	nop
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	2400252c 	.word	0x2400252c
 800ecc8:	24002530 	.word	0x24002530
 800eccc:	e000ed04 	.word	0xe000ed04

0800ecd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ecd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ed14 <prvGetNextExpireTime+0x44>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d101      	bne.n	800ece6 <prvGetNextExpireTime+0x16>
 800ece2:	2201      	movs	r2, #1
 800ece4:	e000      	b.n	800ece8 <prvGetNextExpireTime+0x18>
 800ece6:	2200      	movs	r2, #0
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d105      	bne.n	800ed00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecf4:	4b07      	ldr	r3, [pc, #28]	@ (800ed14 <prvGetNextExpireTime+0x44>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	60fb      	str	r3, [r7, #12]
 800ecfe:	e001      	b.n	800ed04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ed00:	2300      	movs	r3, #0
 800ed02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ed04:	68fb      	ldr	r3, [r7, #12]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3714      	adds	r7, #20
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	24002528 	.word	0x24002528

0800ed18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed20:	f7ff f8bc 	bl	800de9c <xTaskGetTickCount>
 800ed24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed26:	4b0b      	ldr	r3, [pc, #44]	@ (800ed54 <prvSampleTimeNow+0x3c>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	68fa      	ldr	r2, [r7, #12]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d205      	bcs.n	800ed3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed30:	f000 f93a 	bl	800efa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	e002      	b.n	800ed42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed42:	4a04      	ldr	r2, [pc, #16]	@ (800ed54 <prvSampleTimeNow+0x3c>)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed48:	68fb      	ldr	r3, [r7, #12]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	24002538 	.word	0x24002538

0800ed58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b086      	sub	sp, #24
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
 800ed64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed66:	2300      	movs	r3, #0
 800ed68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	68ba      	ldr	r2, [r7, #8]
 800ed6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d812      	bhi.n	800eda4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	1ad2      	subs	r2, r2, r3
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	699b      	ldr	r3, [r3, #24]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d302      	bcc.n	800ed92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	617b      	str	r3, [r7, #20]
 800ed90:	e01b      	b.n	800edca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed92:	4b10      	ldr	r3, [pc, #64]	@ (800edd4 <prvInsertTimerInActiveList+0x7c>)
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	f7fd ffbe 	bl	800cd1e <vListInsert>
 800eda2:	e012      	b.n	800edca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d206      	bcs.n	800edba <prvInsertTimerInActiveList+0x62>
 800edac:	68ba      	ldr	r2, [r7, #8]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d302      	bcc.n	800edba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800edb4:	2301      	movs	r3, #1
 800edb6:	617b      	str	r3, [r7, #20]
 800edb8:	e007      	b.n	800edca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edba:	4b07      	ldr	r3, [pc, #28]	@ (800edd8 <prvInsertTimerInActiveList+0x80>)
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	3304      	adds	r3, #4
 800edc2:	4619      	mov	r1, r3
 800edc4:	4610      	mov	r0, r2
 800edc6:	f7fd ffaa 	bl	800cd1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edca:	697b      	ldr	r3, [r7, #20]
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	2400252c 	.word	0x2400252c
 800edd8:	24002528 	.word	0x24002528

0800eddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b08e      	sub	sp, #56	@ 0x38
 800ede0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ede2:	e0ce      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	da19      	bge.n	800ee1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800edea:	1d3b      	adds	r3, r7, #4
 800edec:	3304      	adds	r3, #4
 800edee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800edf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d10b      	bne.n	800ee0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800edf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	61fb      	str	r3, [r7, #28]
}
 800ee08:	bf00      	nop
 800ee0a:	bf00      	nop
 800ee0c:	e7fd      	b.n	800ee0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee14:	6850      	ldr	r0, [r2, #4]
 800ee16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee18:	6892      	ldr	r2, [r2, #8]
 800ee1a:	4611      	mov	r1, r2
 800ee1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f2c0 80ae 	blt.w	800ef82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee2c:	695b      	ldr	r3, [r3, #20]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d004      	beq.n	800ee3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee34:	3304      	adds	r3, #4
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd ffaa 	bl	800cd90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee3c:	463b      	mov	r3, r7
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7ff ff6a 	bl	800ed18 <prvSampleTimeNow>
 800ee44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b09      	cmp	r3, #9
 800ee4a:	f200 8097 	bhi.w	800ef7c <prvProcessReceivedCommands+0x1a0>
 800ee4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee54 <prvProcessReceivedCommands+0x78>)
 800ee50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee54:	0800ee7d 	.word	0x0800ee7d
 800ee58:	0800ee7d 	.word	0x0800ee7d
 800ee5c:	0800ee7d 	.word	0x0800ee7d
 800ee60:	0800eef3 	.word	0x0800eef3
 800ee64:	0800ef07 	.word	0x0800ef07
 800ee68:	0800ef53 	.word	0x0800ef53
 800ee6c:	0800ee7d 	.word	0x0800ee7d
 800ee70:	0800ee7d 	.word	0x0800ee7d
 800ee74:	0800eef3 	.word	0x0800eef3
 800ee78:	0800ef07 	.word	0x0800ef07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee82:	f043 0301 	orr.w	r3, r3, #1
 800ee86:	b2da      	uxtb	r2, r3
 800ee88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee8e:	68ba      	ldr	r2, [r7, #8]
 800ee90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	18d1      	adds	r1, r2, r3
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee9c:	f7ff ff5c 	bl	800ed58 <prvInsertTimerInActiveList>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d06c      	beq.n	800ef80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eeac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eeb4:	f003 0304 	and.w	r3, r3, #4
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d061      	beq.n	800ef80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec0:	699b      	ldr	r3, [r3, #24]
 800eec2:	441a      	add	r2, r3
 800eec4:	2300      	movs	r3, #0
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	2300      	movs	r3, #0
 800eeca:	2100      	movs	r1, #0
 800eecc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eece:	f7ff fe01 	bl	800ead4 <xTimerGenericCommand>
 800eed2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eed4:	6a3b      	ldr	r3, [r7, #32]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d152      	bne.n	800ef80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eeda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	61bb      	str	r3, [r7, #24]
}
 800eeec:	bf00      	nop
 800eeee:	bf00      	nop
 800eef0:	e7fd      	b.n	800eeee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eef8:	f023 0301 	bic.w	r3, r3, #1
 800eefc:	b2da      	uxtb	r2, r3
 800eefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ef04:	e03d      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef0c:	f043 0301 	orr.w	r3, r3, #1
 800ef10:	b2da      	uxtb	r2, r3
 800ef12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef20:	699b      	ldr	r3, [r3, #24]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d10b      	bne.n	800ef3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ef26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef2a:	f383 8811 	msr	BASEPRI, r3
 800ef2e:	f3bf 8f6f 	isb	sy
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	617b      	str	r3, [r7, #20]
}
 800ef38:	bf00      	nop
 800ef3a:	bf00      	nop
 800ef3c:	e7fd      	b.n	800ef3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef40:	699a      	ldr	r2, [r3, #24]
 800ef42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef44:	18d1      	adds	r1, r2, r3
 800ef46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef4c:	f7ff ff04 	bl	800ed58 <prvInsertTimerInActiveList>
					break;
 800ef50:	e017      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef58:	f003 0302 	and.w	r3, r3, #2
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d103      	bne.n	800ef68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ef60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef62:	f000 fbe9 	bl	800f738 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef66:	e00c      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef6e:	f023 0301 	bic.w	r3, r3, #1
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ef7a:	e002      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ef7c:	bf00      	nop
 800ef7e:	e000      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>
					break;
 800ef80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef82:	4b08      	ldr	r3, [pc, #32]	@ (800efa4 <prvProcessReceivedCommands+0x1c8>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	1d39      	adds	r1, r7, #4
 800ef88:	2200      	movs	r2, #0
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe fa5c 	bl	800d448 <xQueueReceive>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f47f af26 	bne.w	800ede4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ef98:	bf00      	nop
 800ef9a:	bf00      	nop
 800ef9c:	3730      	adds	r7, #48	@ 0x30
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	24002530 	.word	0x24002530

0800efa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b088      	sub	sp, #32
 800efac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efae:	e049      	b.n	800f044 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efb0:	4b2e      	ldr	r3, [pc, #184]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efba:	4b2c      	ldr	r3, [pc, #176]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3304      	adds	r3, #4
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fd fee1 	bl	800cd90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efdc:	f003 0304 	and.w	r3, r3, #4
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d02f      	beq.n	800f044 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	693a      	ldr	r2, [r7, #16]
 800efea:	4413      	add	r3, r2
 800efec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d90e      	bls.n	800f014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f002:	4b1a      	ldr	r3, [pc, #104]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3304      	adds	r3, #4
 800f00a:	4619      	mov	r1, r3
 800f00c:	4610      	mov	r0, r2
 800f00e:	f7fd fe86 	bl	800cd1e <vListInsert>
 800f012:	e017      	b.n	800f044 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f014:	2300      	movs	r3, #0
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	2300      	movs	r3, #0
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	2100      	movs	r1, #0
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f7ff fd58 	bl	800ead4 <xTimerGenericCommand>
 800f024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d10b      	bne.n	800f044 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f030:	f383 8811 	msr	BASEPRI, r3
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	f3bf 8f4f 	dsb	sy
 800f03c:	603b      	str	r3, [r7, #0]
}
 800f03e:	bf00      	nop
 800f040:	bf00      	nop
 800f042:	e7fd      	b.n	800f040 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f044:	4b09      	ldr	r3, [pc, #36]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d1b0      	bne.n	800efb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f04e:	4b07      	ldr	r3, [pc, #28]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f054:	4b06      	ldr	r3, [pc, #24]	@ (800f070 <prvSwitchTimerLists+0xc8>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4a04      	ldr	r2, [pc, #16]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800f05a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f05c:	4a04      	ldr	r2, [pc, #16]	@ (800f070 <prvSwitchTimerLists+0xc8>)
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	6013      	str	r3, [r2, #0]
}
 800f062:	bf00      	nop
 800f064:	3718      	adds	r7, #24
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	24002528 	.word	0x24002528
 800f070:	2400252c 	.word	0x2400252c

0800f074 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f07a:	f000 f96d 	bl	800f358 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f07e:	4b15      	ldr	r3, [pc, #84]	@ (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d120      	bne.n	800f0c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f086:	4814      	ldr	r0, [pc, #80]	@ (800f0d8 <prvCheckForValidListAndQueue+0x64>)
 800f088:	f7fd fdf8 	bl	800cc7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f08c:	4813      	ldr	r0, [pc, #76]	@ (800f0dc <prvCheckForValidListAndQueue+0x68>)
 800f08e:	f7fd fdf5 	bl	800cc7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f092:	4b13      	ldr	r3, [pc, #76]	@ (800f0e0 <prvCheckForValidListAndQueue+0x6c>)
 800f094:	4a10      	ldr	r2, [pc, #64]	@ (800f0d8 <prvCheckForValidListAndQueue+0x64>)
 800f096:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f098:	4b12      	ldr	r3, [pc, #72]	@ (800f0e4 <prvCheckForValidListAndQueue+0x70>)
 800f09a:	4a10      	ldr	r2, [pc, #64]	@ (800f0dc <prvCheckForValidListAndQueue+0x68>)
 800f09c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f09e:	2300      	movs	r3, #0
 800f0a0:	9300      	str	r3, [sp, #0]
 800f0a2:	4b11      	ldr	r3, [pc, #68]	@ (800f0e8 <prvCheckForValidListAndQueue+0x74>)
 800f0a4:	4a11      	ldr	r2, [pc, #68]	@ (800f0ec <prvCheckForValidListAndQueue+0x78>)
 800f0a6:	2110      	movs	r1, #16
 800f0a8:	200a      	movs	r0, #10
 800f0aa:	f7fd ff05 	bl	800ceb8 <xQueueGenericCreateStatic>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	4a08      	ldr	r2, [pc, #32]	@ (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f0b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0b4:	4b07      	ldr	r3, [pc, #28]	@ (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d005      	beq.n	800f0c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0bc:	4b05      	ldr	r3, [pc, #20]	@ (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	490b      	ldr	r1, [pc, #44]	@ (800f0f0 <prvCheckForValidListAndQueue+0x7c>)
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fe fbb2 	bl	800d82c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0c8:	f000 f978 	bl	800f3bc <vPortExitCritical>
}
 800f0cc:	bf00      	nop
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	24002530 	.word	0x24002530
 800f0d8:	24002500 	.word	0x24002500
 800f0dc:	24002514 	.word	0x24002514
 800f0e0:	24002528 	.word	0x24002528
 800f0e4:	2400252c 	.word	0x2400252c
 800f0e8:	240025dc 	.word	0x240025dc
 800f0ec:	2400253c 	.word	0x2400253c
 800f0f0:	0801358c 	.word	0x0801358c

0800f0f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	3b04      	subs	r3, #4
 800f104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f10c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3b04      	subs	r3, #4
 800f112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	f023 0201 	bic.w	r2, r3, #1
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	3b04      	subs	r3, #4
 800f122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f124:	4a0c      	ldr	r2, [pc, #48]	@ (800f158 <pxPortInitialiseStack+0x64>)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	3b14      	subs	r3, #20
 800f12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	3b04      	subs	r3, #4
 800f13a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f06f 0202 	mvn.w	r2, #2
 800f142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	3b20      	subs	r3, #32
 800f148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f14a:	68fb      	ldr	r3, [r7, #12]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr
 800f158:	0800f15d 	.word	0x0800f15d

0800f15c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f15c:	b480      	push	{r7}
 800f15e:	b085      	sub	sp, #20
 800f160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f162:	2300      	movs	r3, #0
 800f164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f166:	4b13      	ldr	r3, [pc, #76]	@ (800f1b4 <prvTaskExitError+0x58>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f16e:	d00b      	beq.n	800f188 <prvTaskExitError+0x2c>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	60fb      	str	r3, [r7, #12]
}
 800f182:	bf00      	nop
 800f184:	bf00      	nop
 800f186:	e7fd      	b.n	800f184 <prvTaskExitError+0x28>
	__asm volatile
 800f188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
 800f198:	60bb      	str	r3, [r7, #8]
}
 800f19a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f19c:	bf00      	nop
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d0fc      	beq.n	800f19e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f1a4:	bf00      	nop
 800f1a6:	bf00      	nop
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	24000010 	.word	0x24000010
	...

0800f1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f1c0:	4b07      	ldr	r3, [pc, #28]	@ (800f1e0 <pxCurrentTCBConst2>)
 800f1c2:	6819      	ldr	r1, [r3, #0]
 800f1c4:	6808      	ldr	r0, [r1, #0]
 800f1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ca:	f380 8809 	msr	PSP, r0
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f04f 0000 	mov.w	r0, #0
 800f1d6:	f380 8811 	msr	BASEPRI, r0
 800f1da:	4770      	bx	lr
 800f1dc:	f3af 8000 	nop.w

0800f1e0 <pxCurrentTCBConst2>:
 800f1e0:	24002000 	.word	0x24002000
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f1e4:	bf00      	nop
 800f1e6:	bf00      	nop

0800f1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f1e8:	4808      	ldr	r0, [pc, #32]	@ (800f20c <prvPortStartFirstTask+0x24>)
 800f1ea:	6800      	ldr	r0, [r0, #0]
 800f1ec:	6800      	ldr	r0, [r0, #0]
 800f1ee:	f380 8808 	msr	MSP, r0
 800f1f2:	f04f 0000 	mov.w	r0, #0
 800f1f6:	f380 8814 	msr	CONTROL, r0
 800f1fa:	b662      	cpsie	i
 800f1fc:	b661      	cpsie	f
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	f3bf 8f6f 	isb	sy
 800f206:	df00      	svc	0
 800f208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f20a:	bf00      	nop
 800f20c:	e000ed08 	.word	0xe000ed08

0800f210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f216:	4b47      	ldr	r3, [pc, #284]	@ (800f334 <xPortStartScheduler+0x124>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4a47      	ldr	r2, [pc, #284]	@ (800f338 <xPortStartScheduler+0x128>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d10b      	bne.n	800f238 <xPortStartScheduler+0x28>
	__asm volatile
 800f220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f224:	f383 8811 	msr	BASEPRI, r3
 800f228:	f3bf 8f6f 	isb	sy
 800f22c:	f3bf 8f4f 	dsb	sy
 800f230:	613b      	str	r3, [r7, #16]
}
 800f232:	bf00      	nop
 800f234:	bf00      	nop
 800f236:	e7fd      	b.n	800f234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f238:	4b3e      	ldr	r3, [pc, #248]	@ (800f334 <xPortStartScheduler+0x124>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4a3f      	ldr	r2, [pc, #252]	@ (800f33c <xPortStartScheduler+0x12c>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d10b      	bne.n	800f25a <xPortStartScheduler+0x4a>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	60fb      	str	r3, [r7, #12]
}
 800f254:	bf00      	nop
 800f256:	bf00      	nop
 800f258:	e7fd      	b.n	800f256 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f25a:	4b39      	ldr	r3, [pc, #228]	@ (800f340 <xPortStartScheduler+0x130>)
 800f25c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	b2db      	uxtb	r3, r3
 800f264:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	22ff      	movs	r2, #255	@ 0xff
 800f26a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	b2db      	uxtb	r3, r3
 800f272:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f274:	78fb      	ldrb	r3, [r7, #3]
 800f276:	b2db      	uxtb	r3, r3
 800f278:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f27c:	b2da      	uxtb	r2, r3
 800f27e:	4b31      	ldr	r3, [pc, #196]	@ (800f344 <xPortStartScheduler+0x134>)
 800f280:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f282:	4b31      	ldr	r3, [pc, #196]	@ (800f348 <xPortStartScheduler+0x138>)
 800f284:	2207      	movs	r2, #7
 800f286:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f288:	e009      	b.n	800f29e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f28a:	4b2f      	ldr	r3, [pc, #188]	@ (800f348 <xPortStartScheduler+0x138>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	3b01      	subs	r3, #1
 800f290:	4a2d      	ldr	r2, [pc, #180]	@ (800f348 <xPortStartScheduler+0x138>)
 800f292:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f294:	78fb      	ldrb	r3, [r7, #3]
 800f296:	b2db      	uxtb	r3, r3
 800f298:	005b      	lsls	r3, r3, #1
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f29e:	78fb      	ldrb	r3, [r7, #3]
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2a6:	2b80      	cmp	r3, #128	@ 0x80
 800f2a8:	d0ef      	beq.n	800f28a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f2aa:	4b27      	ldr	r3, [pc, #156]	@ (800f348 <xPortStartScheduler+0x138>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f1c3 0307 	rsb	r3, r3, #7
 800f2b2:	2b04      	cmp	r3, #4
 800f2b4:	d00b      	beq.n	800f2ce <xPortStartScheduler+0xbe>
	__asm volatile
 800f2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ba:	f383 8811 	msr	BASEPRI, r3
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	60bb      	str	r3, [r7, #8]
}
 800f2c8:	bf00      	nop
 800f2ca:	bf00      	nop
 800f2cc:	e7fd      	b.n	800f2ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f2ce:	4b1e      	ldr	r3, [pc, #120]	@ (800f348 <xPortStartScheduler+0x138>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	021b      	lsls	r3, r3, #8
 800f2d4:	4a1c      	ldr	r2, [pc, #112]	@ (800f348 <xPortStartScheduler+0x138>)
 800f2d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f2d8:	4b1b      	ldr	r3, [pc, #108]	@ (800f348 <xPortStartScheduler+0x138>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f2e0:	4a19      	ldr	r2, [pc, #100]	@ (800f348 <xPortStartScheduler+0x138>)
 800f2e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	b2da      	uxtb	r2, r3
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f2ec:	4b17      	ldr	r3, [pc, #92]	@ (800f34c <xPortStartScheduler+0x13c>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a16      	ldr	r2, [pc, #88]	@ (800f34c <xPortStartScheduler+0x13c>)
 800f2f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f2f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f2f8:	4b14      	ldr	r3, [pc, #80]	@ (800f34c <xPortStartScheduler+0x13c>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a13      	ldr	r2, [pc, #76]	@ (800f34c <xPortStartScheduler+0x13c>)
 800f2fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f302:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f304:	f000 f8da 	bl	800f4bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f308:	4b11      	ldr	r3, [pc, #68]	@ (800f350 <xPortStartScheduler+0x140>)
 800f30a:	2200      	movs	r2, #0
 800f30c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f30e:	f000 f8f9 	bl	800f504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f312:	4b10      	ldr	r3, [pc, #64]	@ (800f354 <xPortStartScheduler+0x144>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4a0f      	ldr	r2, [pc, #60]	@ (800f354 <xPortStartScheduler+0x144>)
 800f318:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f31c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f31e:	f7ff ff63 	bl	800f1e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f322:	f7fe fe85 	bl	800e030 <vTaskSwitchContext>
	prvTaskExitError();
 800f326:	f7ff ff19 	bl	800f15c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f32a:	2300      	movs	r3, #0
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3718      	adds	r7, #24
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	e000ed00 	.word	0xe000ed00
 800f338:	410fc271 	.word	0x410fc271
 800f33c:	410fc270 	.word	0x410fc270
 800f340:	e000e400 	.word	0xe000e400
 800f344:	2400262c 	.word	0x2400262c
 800f348:	24002630 	.word	0x24002630
 800f34c:	e000ed20 	.word	0xe000ed20
 800f350:	24000010 	.word	0x24000010
 800f354:	e000ef34 	.word	0xe000ef34

0800f358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
	__asm volatile
 800f35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	607b      	str	r3, [r7, #4]
}
 800f370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f372:	4b10      	ldr	r3, [pc, #64]	@ (800f3b4 <vPortEnterCritical+0x5c>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3301      	adds	r3, #1
 800f378:	4a0e      	ldr	r2, [pc, #56]	@ (800f3b4 <vPortEnterCritical+0x5c>)
 800f37a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f37c:	4b0d      	ldr	r3, [pc, #52]	@ (800f3b4 <vPortEnterCritical+0x5c>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b01      	cmp	r3, #1
 800f382:	d110      	bne.n	800f3a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f384:	4b0c      	ldr	r3, [pc, #48]	@ (800f3b8 <vPortEnterCritical+0x60>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00b      	beq.n	800f3a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f392:	f383 8811 	msr	BASEPRI, r3
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	603b      	str	r3, [r7, #0]
}
 800f3a0:	bf00      	nop
 800f3a2:	bf00      	nop
 800f3a4:	e7fd      	b.n	800f3a2 <vPortEnterCritical+0x4a>
	}
}
 800f3a6:	bf00      	nop
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop
 800f3b4:	24000010 	.word	0x24000010
 800f3b8:	e000ed04 	.word	0xe000ed04

0800f3bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f3c2:	4b12      	ldr	r3, [pc, #72]	@ (800f40c <vPortExitCritical+0x50>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d10b      	bne.n	800f3e2 <vPortExitCritical+0x26>
	__asm volatile
 800f3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ce:	f383 8811 	msr	BASEPRI, r3
 800f3d2:	f3bf 8f6f 	isb	sy
 800f3d6:	f3bf 8f4f 	dsb	sy
 800f3da:	607b      	str	r3, [r7, #4]
}
 800f3dc:	bf00      	nop
 800f3de:	bf00      	nop
 800f3e0:	e7fd      	b.n	800f3de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f3e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f40c <vPortExitCritical+0x50>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	4a08      	ldr	r2, [pc, #32]	@ (800f40c <vPortExitCritical+0x50>)
 800f3ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f3ec:	4b07      	ldr	r3, [pc, #28]	@ (800f40c <vPortExitCritical+0x50>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d105      	bne.n	800f400 <vPortExitCritical+0x44>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	f383 8811 	msr	BASEPRI, r3
}
 800f3fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f400:	bf00      	nop
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr
 800f40c:	24000010 	.word	0x24000010

0800f410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f410:	f3ef 8009 	mrs	r0, PSP
 800f414:	f3bf 8f6f 	isb	sy
 800f418:	4b15      	ldr	r3, [pc, #84]	@ (800f470 <pxCurrentTCBConst>)
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	f01e 0f10 	tst.w	lr, #16
 800f420:	bf08      	it	eq
 800f422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42a:	6010      	str	r0, [r2, #0]
 800f42c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f434:	f380 8811 	msr	BASEPRI, r0
 800f438:	f3bf 8f4f 	dsb	sy
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f7fe fdf6 	bl	800e030 <vTaskSwitchContext>
 800f444:	f04f 0000 	mov.w	r0, #0
 800f448:	f380 8811 	msr	BASEPRI, r0
 800f44c:	bc09      	pop	{r0, r3}
 800f44e:	6819      	ldr	r1, [r3, #0]
 800f450:	6808      	ldr	r0, [r1, #0]
 800f452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f456:	f01e 0f10 	tst.w	lr, #16
 800f45a:	bf08      	it	eq
 800f45c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f460:	f380 8809 	msr	PSP, r0
 800f464:	f3bf 8f6f 	isb	sy
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	f3af 8000 	nop.w

0800f470 <pxCurrentTCBConst>:
 800f470:	24002000 	.word	0x24002000
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f474:	bf00      	nop
 800f476:	bf00      	nop

0800f478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	607b      	str	r3, [r7, #4]
}
 800f490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f492:	f7fe fd13 	bl	800debc <xTaskIncrementTick>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d003      	beq.n	800f4a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f49c:	4b06      	ldr	r3, [pc, #24]	@ (800f4b8 <xPortSysTickHandler+0x40>)
 800f49e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4a2:	601a      	str	r2, [r3, #0]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	f383 8811 	msr	BASEPRI, r3
}
 800f4ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f4b0:	bf00      	nop
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	e000ed04 	.word	0xe000ed04

0800f4bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f4bc:	b480      	push	{r7}
 800f4be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f4c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f0 <vPortSetupTimerInterrupt+0x34>)
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f4c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f4 <vPortSetupTimerInterrupt+0x38>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f4f8 <vPortSetupTimerInterrupt+0x3c>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a0a      	ldr	r2, [pc, #40]	@ (800f4fc <vPortSetupTimerInterrupt+0x40>)
 800f4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f4d6:	099b      	lsrs	r3, r3, #6
 800f4d8:	4a09      	ldr	r2, [pc, #36]	@ (800f500 <vPortSetupTimerInterrupt+0x44>)
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f4de:	4b04      	ldr	r3, [pc, #16]	@ (800f4f0 <vPortSetupTimerInterrupt+0x34>)
 800f4e0:	2207      	movs	r2, #7
 800f4e2:	601a      	str	r2, [r3, #0]
}
 800f4e4:	bf00      	nop
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr
 800f4ee:	bf00      	nop
 800f4f0:	e000e010 	.word	0xe000e010
 800f4f4:	e000e018 	.word	0xe000e018
 800f4f8:	24000000 	.word	0x24000000
 800f4fc:	10624dd3 	.word	0x10624dd3
 800f500:	e000e014 	.word	0xe000e014

0800f504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f504:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f514 <vPortEnableVFP+0x10>
 800f508:	6801      	ldr	r1, [r0, #0]
 800f50a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f50e:	6001      	str	r1, [r0, #0]
 800f510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f512:	bf00      	nop
 800f514:	e000ed88 	.word	0xe000ed88

0800f518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f518:	b480      	push	{r7}
 800f51a:	b085      	sub	sp, #20
 800f51c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f51e:	f3ef 8305 	mrs	r3, IPSR
 800f522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2b0f      	cmp	r3, #15
 800f528:	d915      	bls.n	800f556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f52a:	4a18      	ldr	r2, [pc, #96]	@ (800f58c <vPortValidateInterruptPriority+0x74>)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	4413      	add	r3, r2
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f534:	4b16      	ldr	r3, [pc, #88]	@ (800f590 <vPortValidateInterruptPriority+0x78>)
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	7afa      	ldrb	r2, [r7, #11]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d20b      	bcs.n	800f556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f542:	f383 8811 	msr	BASEPRI, r3
 800f546:	f3bf 8f6f 	isb	sy
 800f54a:	f3bf 8f4f 	dsb	sy
 800f54e:	607b      	str	r3, [r7, #4]
}
 800f550:	bf00      	nop
 800f552:	bf00      	nop
 800f554:	e7fd      	b.n	800f552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f556:	4b0f      	ldr	r3, [pc, #60]	@ (800f594 <vPortValidateInterruptPriority+0x7c>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f55e:	4b0e      	ldr	r3, [pc, #56]	@ (800f598 <vPortValidateInterruptPriority+0x80>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	429a      	cmp	r2, r3
 800f564:	d90b      	bls.n	800f57e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f56a:	f383 8811 	msr	BASEPRI, r3
 800f56e:	f3bf 8f6f 	isb	sy
 800f572:	f3bf 8f4f 	dsb	sy
 800f576:	603b      	str	r3, [r7, #0]
}
 800f578:	bf00      	nop
 800f57a:	bf00      	nop
 800f57c:	e7fd      	b.n	800f57a <vPortValidateInterruptPriority+0x62>
	}
 800f57e:	bf00      	nop
 800f580:	3714      	adds	r7, #20
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	e000e3f0 	.word	0xe000e3f0
 800f590:	2400262c 	.word	0x2400262c
 800f594:	e000ed0c 	.word	0xe000ed0c
 800f598:	24002630 	.word	0x24002630

0800f59c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b08a      	sub	sp, #40	@ 0x28
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f5a8:	f7fe fbcc 	bl	800dd44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f5ac:	4b5c      	ldr	r3, [pc, #368]	@ (800f720 <pvPortMalloc+0x184>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f5b4:	f000 f924 	bl	800f800 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f5b8:	4b5a      	ldr	r3, [pc, #360]	@ (800f724 <pvPortMalloc+0x188>)
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4013      	ands	r3, r2
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f040 8095 	bne.w	800f6f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d01e      	beq.n	800f60a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f5cc:	2208      	movs	r2, #8
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f003 0307 	and.w	r3, r3, #7
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d015      	beq.n	800f60a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f023 0307 	bic.w	r3, r3, #7
 800f5e4:	3308      	adds	r3, #8
 800f5e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f003 0307 	and.w	r3, r3, #7
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00b      	beq.n	800f60a <pvPortMalloc+0x6e>
	__asm volatile
 800f5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f6:	f383 8811 	msr	BASEPRI, r3
 800f5fa:	f3bf 8f6f 	isb	sy
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	617b      	str	r3, [r7, #20]
}
 800f604:	bf00      	nop
 800f606:	bf00      	nop
 800f608:	e7fd      	b.n	800f606 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d06f      	beq.n	800f6f0 <pvPortMalloc+0x154>
 800f610:	4b45      	ldr	r3, [pc, #276]	@ (800f728 <pvPortMalloc+0x18c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	429a      	cmp	r2, r3
 800f618:	d86a      	bhi.n	800f6f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f61a:	4b44      	ldr	r3, [pc, #272]	@ (800f72c <pvPortMalloc+0x190>)
 800f61c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f61e:	4b43      	ldr	r3, [pc, #268]	@ (800f72c <pvPortMalloc+0x190>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f624:	e004      	b.n	800f630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	429a      	cmp	r2, r3
 800f638:	d903      	bls.n	800f642 <pvPortMalloc+0xa6>
 800f63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d1f1      	bne.n	800f626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f642:	4b37      	ldr	r3, [pc, #220]	@ (800f720 <pvPortMalloc+0x184>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f648:	429a      	cmp	r2, r3
 800f64a:	d051      	beq.n	800f6f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f64c:	6a3b      	ldr	r3, [r7, #32]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2208      	movs	r2, #8
 800f652:	4413      	add	r3, r2
 800f654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	6a3b      	ldr	r3, [r7, #32]
 800f65c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f660:	685a      	ldr	r2, [r3, #4]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	1ad2      	subs	r2, r2, r3
 800f666:	2308      	movs	r3, #8
 800f668:	005b      	lsls	r3, r3, #1
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d920      	bls.n	800f6b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f66e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4413      	add	r3, r2
 800f674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	f003 0307 	and.w	r3, r3, #7
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00b      	beq.n	800f698 <pvPortMalloc+0xfc>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	613b      	str	r3, [r7, #16]
}
 800f692:	bf00      	nop
 800f694:	bf00      	nop
 800f696:	e7fd      	b.n	800f694 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f69a:	685a      	ldr	r2, [r3, #4]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	1ad2      	subs	r2, r2, r3
 800f6a0:	69bb      	ldr	r3, [r7, #24]
 800f6a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f6aa:	69b8      	ldr	r0, [r7, #24]
 800f6ac:	f000 f90c 	bl	800f8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f6b0:	4b1d      	ldr	r3, [pc, #116]	@ (800f728 <pvPortMalloc+0x18c>)
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	4a1b      	ldr	r2, [pc, #108]	@ (800f728 <pvPortMalloc+0x18c>)
 800f6bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f6be:	4b1a      	ldr	r3, [pc, #104]	@ (800f728 <pvPortMalloc+0x18c>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	4b1b      	ldr	r3, [pc, #108]	@ (800f730 <pvPortMalloc+0x194>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d203      	bcs.n	800f6d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f6ca:	4b17      	ldr	r3, [pc, #92]	@ (800f728 <pvPortMalloc+0x18c>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4a18      	ldr	r2, [pc, #96]	@ (800f730 <pvPortMalloc+0x194>)
 800f6d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d4:	685a      	ldr	r2, [r3, #4]
 800f6d6:	4b13      	ldr	r3, [pc, #76]	@ (800f724 <pvPortMalloc+0x188>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	431a      	orrs	r2, r3
 800f6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f6e6:	4b13      	ldr	r3, [pc, #76]	@ (800f734 <pvPortMalloc+0x198>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	4a11      	ldr	r2, [pc, #68]	@ (800f734 <pvPortMalloc+0x198>)
 800f6ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f6f0:	f7fe fb36 	bl	800dd60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	f003 0307 	and.w	r3, r3, #7
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00b      	beq.n	800f716 <pvPortMalloc+0x17a>
	__asm volatile
 800f6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	60fb      	str	r3, [r7, #12]
}
 800f710:	bf00      	nop
 800f712:	bf00      	nop
 800f714:	e7fd      	b.n	800f712 <pvPortMalloc+0x176>
	return pvReturn;
 800f716:	69fb      	ldr	r3, [r7, #28]
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3728      	adds	r7, #40	@ 0x28
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	2403337c 	.word	0x2403337c
 800f724:	24033390 	.word	0x24033390
 800f728:	24033380 	.word	0x24033380
 800f72c:	24033374 	.word	0x24033374
 800f730:	24033384 	.word	0x24033384
 800f734:	24033388 	.word	0x24033388

0800f738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d04f      	beq.n	800f7ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f74a:	2308      	movs	r3, #8
 800f74c:	425b      	negs	r3, r3
 800f74e:	697a      	ldr	r2, [r7, #20]
 800f750:	4413      	add	r3, r2
 800f752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	685a      	ldr	r2, [r3, #4]
 800f75c:	4b25      	ldr	r3, [pc, #148]	@ (800f7f4 <vPortFree+0xbc>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4013      	ands	r3, r2
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10b      	bne.n	800f77e <vPortFree+0x46>
	__asm volatile
 800f766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f76a:	f383 8811 	msr	BASEPRI, r3
 800f76e:	f3bf 8f6f 	isb	sy
 800f772:	f3bf 8f4f 	dsb	sy
 800f776:	60fb      	str	r3, [r7, #12]
}
 800f778:	bf00      	nop
 800f77a:	bf00      	nop
 800f77c:	e7fd      	b.n	800f77a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d00b      	beq.n	800f79e <vPortFree+0x66>
	__asm volatile
 800f786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f78a:	f383 8811 	msr	BASEPRI, r3
 800f78e:	f3bf 8f6f 	isb	sy
 800f792:	f3bf 8f4f 	dsb	sy
 800f796:	60bb      	str	r3, [r7, #8]
}
 800f798:	bf00      	nop
 800f79a:	bf00      	nop
 800f79c:	e7fd      	b.n	800f79a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	685a      	ldr	r2, [r3, #4]
 800f7a2:	4b14      	ldr	r3, [pc, #80]	@ (800f7f4 <vPortFree+0xbc>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4013      	ands	r3, r2
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d01e      	beq.n	800f7ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d11a      	bne.n	800f7ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	685a      	ldr	r2, [r3, #4]
 800f7b8:	4b0e      	ldr	r3, [pc, #56]	@ (800f7f4 <vPortFree+0xbc>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	43db      	mvns	r3, r3
 800f7be:	401a      	ands	r2, r3
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f7c4:	f7fe fabe 	bl	800dd44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	685a      	ldr	r2, [r3, #4]
 800f7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f7f8 <vPortFree+0xc0>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	4a09      	ldr	r2, [pc, #36]	@ (800f7f8 <vPortFree+0xc0>)
 800f7d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f7d6:	6938      	ldr	r0, [r7, #16]
 800f7d8:	f000 f876 	bl	800f8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f7dc:	4b07      	ldr	r3, [pc, #28]	@ (800f7fc <vPortFree+0xc4>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	4a06      	ldr	r2, [pc, #24]	@ (800f7fc <vPortFree+0xc4>)
 800f7e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f7e6:	f7fe fabb 	bl	800dd60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f7ea:	bf00      	nop
 800f7ec:	3718      	adds	r7, #24
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	24033390 	.word	0x24033390
 800f7f8:	24033380 	.word	0x24033380
 800f7fc:	2403338c 	.word	0x2403338c

0800f800 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f800:	b480      	push	{r7}
 800f802:	b085      	sub	sp, #20
 800f804:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f806:	4b29      	ldr	r3, [pc, #164]	@ (800f8ac <prvHeapInit+0xac>)
 800f808:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f80a:	4b29      	ldr	r3, [pc, #164]	@ (800f8b0 <prvHeapInit+0xb0>)
 800f80c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f003 0307 	and.w	r3, r3, #7
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00c      	beq.n	800f832 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	3307      	adds	r3, #7
 800f81c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f023 0307 	bic.w	r3, r3, #7
 800f824:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	1ad3      	subs	r3, r2, r3
 800f82c:	4a20      	ldr	r2, [pc, #128]	@ (800f8b0 <prvHeapInit+0xb0>)
 800f82e:	4413      	add	r3, r2
 800f830:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f836:	4a1f      	ldr	r2, [pc, #124]	@ (800f8b4 <prvHeapInit+0xb4>)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f83c:	4b1d      	ldr	r3, [pc, #116]	@ (800f8b4 <prvHeapInit+0xb4>)
 800f83e:	2200      	movs	r2, #0
 800f840:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	4413      	add	r3, r2
 800f848:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f84a:	2208      	movs	r2, #8
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	1a9b      	subs	r3, r3, r2
 800f850:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f023 0307 	bic.w	r3, r3, #7
 800f858:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	4a16      	ldr	r2, [pc, #88]	@ (800f8b8 <prvHeapInit+0xb8>)
 800f85e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f860:	4b15      	ldr	r3, [pc, #84]	@ (800f8b8 <prvHeapInit+0xb8>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2200      	movs	r2, #0
 800f866:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f868:	4b13      	ldr	r3, [pc, #76]	@ (800f8b8 <prvHeapInit+0xb8>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2200      	movs	r2, #0
 800f86e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	1ad2      	subs	r2, r2, r3
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f87e:	4b0e      	ldr	r3, [pc, #56]	@ (800f8b8 <prvHeapInit+0xb8>)
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	4a0c      	ldr	r2, [pc, #48]	@ (800f8bc <prvHeapInit+0xbc>)
 800f88c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	4a0b      	ldr	r2, [pc, #44]	@ (800f8c0 <prvHeapInit+0xc0>)
 800f894:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f896:	4b0b      	ldr	r3, [pc, #44]	@ (800f8c4 <prvHeapInit+0xc4>)
 800f898:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f89c:	601a      	str	r2, [r3, #0]
}
 800f89e:	bf00      	nop
 800f8a0:	3714      	adds	r7, #20
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	00030d40 	.word	0x00030d40
 800f8b0:	24002634 	.word	0x24002634
 800f8b4:	24033374 	.word	0x24033374
 800f8b8:	2403337c 	.word	0x2403337c
 800f8bc:	24033384 	.word	0x24033384
 800f8c0:	24033380 	.word	0x24033380
 800f8c4:	24033390 	.word	0x24033390

0800f8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f8d0:	4b28      	ldr	r3, [pc, #160]	@ (800f974 <prvInsertBlockIntoFreeList+0xac>)
 800f8d2:	60fb      	str	r3, [r7, #12]
 800f8d4:	e002      	b.n	800f8dc <prvInsertBlockIntoFreeList+0x14>
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	60fb      	str	r3, [r7, #12]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d8f7      	bhi.n	800f8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	68ba      	ldr	r2, [r7, #8]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d108      	bne.n	800f90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	441a      	add	r2, r3
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	68ba      	ldr	r2, [r7, #8]
 800f914:	441a      	add	r2, r3
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d118      	bne.n	800f950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	4b15      	ldr	r3, [pc, #84]	@ (800f978 <prvInsertBlockIntoFreeList+0xb0>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	429a      	cmp	r2, r3
 800f928:	d00d      	beq.n	800f946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	685a      	ldr	r2, [r3, #4]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	441a      	add	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	601a      	str	r2, [r3, #0]
 800f944:	e008      	b.n	800f958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f946:	4b0c      	ldr	r3, [pc, #48]	@ (800f978 <prvInsertBlockIntoFreeList+0xb0>)
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	e003      	b.n	800f958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d002      	beq.n	800f966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f966:	bf00      	nop
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	24033374 	.word	0x24033374
 800f978:	2403337c 	.word	0x2403337c

0800f97c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800f97c:	4a02      	ldr	r2, [pc, #8]	@ (800f988 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 800f97e:	4b03      	ldr	r3, [pc, #12]	@ (800f98c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 800f980:	6812      	ldr	r2, [r2, #0]
 800f982:	601a      	str	r2, [r3, #0]
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	24000e0c 	.word	0x24000e0c
 800f98c:	2400001c 	.word	0x2400001c

0800f990 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 800f990:	f002 bb96 	b.w	80120c0 <autoware_control_msgs__msg__Control__init>

0800f994 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 800f994:	f002 bbea 	b.w	801216c <autoware_control_msgs__msg__Control__fini>

0800f998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800f998:	b510      	push	{r4, lr}
 800f99a:	4c0c      	ldr	r4, [pc, #48]	@ (800f9cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 800f99c:	f001 f892 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f9a0:	60e0      	str	r0, [r4, #12]
 800f9a2:	f001 f88f 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f9a6:	64a0      	str	r0, [r4, #72]	@ 0x48
 800f9a8:	f000 f81a 	bl	800f9e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800f9ac:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f9b0:	f000 f832 	bl	800fa18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800f9b4:	4b06      	ldr	r3, [pc, #24]	@ (800f9d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800f9b6:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	b10a      	cbz	r2, 800f9c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 800f9be:	4804      	ldr	r0, [pc, #16]	@ (800f9d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800f9c0:	bd10      	pop	{r4, pc}
 800f9c2:	4a04      	ldr	r2, [pc, #16]	@ (800f9d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 800f9c4:	4802      	ldr	r0, [pc, #8]	@ (800f9d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800f9c6:	6812      	ldr	r2, [r2, #0]
 800f9c8:	601a      	str	r2, [r3, #0]
 800f9ca:	bd10      	pop	{r4, pc}
 800f9cc:	24000028 	.word	0x24000028
 800f9d0:	24000118 	.word	0x24000118
 800f9d4:	24000e10 	.word	0x24000e10

0800f9d8 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 800f9d8:	f002 bbdc 	b.w	8012194 <autoware_control_msgs__msg__Lateral__init>

0800f9dc <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 800f9dc:	f002 bbfe 	b.w	80121dc <autoware_control_msgs__msg__Lateral__fini>

0800f9e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800f9e0:	b510      	push	{r4, lr}
 800f9e2:	4c08      	ldr	r4, [pc, #32]	@ (800fa04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 800f9e4:	f001 f86e 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f9e8:	60e0      	str	r0, [r4, #12]
 800f9ea:	f001 f86b 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f9ee:	4b06      	ldr	r3, [pc, #24]	@ (800fa08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800f9f0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	b10a      	cbz	r2, 800f9fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 800f9f6:	4804      	ldr	r0, [pc, #16]	@ (800fa08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800f9f8:	bd10      	pop	{r4, pc}
 800f9fa:	4a04      	ldr	r2, [pc, #16]	@ (800fa0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 800f9fc:	4802      	ldr	r0, [pc, #8]	@ (800fa08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800f9fe:	6812      	ldr	r2, [r2, #0]
 800fa00:	601a      	str	r2, [r3, #0]
 800fa02:	bd10      	pop	{r4, pc}
 800fa04:	24000124 	.word	0x24000124
 800fa08:	24000250 	.word	0x24000250
 800fa0c:	24000e10 	.word	0x24000e10

0800fa10 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 800fa10:	f002 bbf0 	b.w	80121f4 <autoware_control_msgs__msg__Longitudinal__init>

0800fa14 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 800fa14:	f002 bc12 	b.w	801223c <autoware_control_msgs__msg__Longitudinal__fini>

0800fa18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	4c08      	ldr	r4, [pc, #32]	@ (800fa3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 800fa1c:	f001 f852 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa20:	60e0      	str	r0, [r4, #12]
 800fa22:	f001 f84f 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa26:	4b06      	ldr	r3, [pc, #24]	@ (800fa40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800fa28:	64a0      	str	r0, [r4, #72]	@ 0x48
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	b10a      	cbz	r2, 800fa32 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 800fa2e:	4804      	ldr	r0, [pc, #16]	@ (800fa40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800fa30:	bd10      	pop	{r4, pc}
 800fa32:	4a04      	ldr	r2, [pc, #16]	@ (800fa44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 800fa34:	4802      	ldr	r0, [pc, #8]	@ (800fa40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800fa36:	6812      	ldr	r2, [r2, #0]
 800fa38:	601a      	str	r2, [r3, #0]
 800fa3a:	bd10      	pop	{r4, pc}
 800fa3c:	2400025c 	.word	0x2400025c
 800fa40:	24000400 	.word	0x24000400
 800fa44:	24000e10 	.word	0x24000e10

0800fa48 <get_serialized_size_autoware_control_msgs__msg__Control>:
 800fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	b1c8      	cbz	r0, 800fa82 <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 800fa4e:	460f      	mov	r7, r1
 800fa50:	f001 f846 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fa54:	4606      	mov	r6, r0
 800fa56:	f104 0008 	add.w	r0, r4, #8
 800fa5a:	443e      	add	r6, r7
 800fa5c:	4631      	mov	r1, r6
 800fa5e:	f001 f83f 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fa62:	4605      	mov	r5, r0
 800fa64:	f104 0010 	add.w	r0, r4, #16
 800fa68:	4435      	add	r5, r6
 800fa6a:	4629      	mov	r1, r5
 800fa6c:	f000 f8a2 	bl	800fbb4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800fa70:	4601      	mov	r1, r0
 800fa72:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800fa76:	440d      	add	r5, r1
 800fa78:	4629      	mov	r1, r5
 800fa7a:	f000 f9a7 	bl	800fdcc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800fa7e:	1bc0      	subs	r0, r0, r7
 800fa80:	4428      	add	r0, r5
 800fa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa84 <_Control__cdr_deserialize>:
 800fa84:	b570      	push	{r4, r5, r6, lr}
 800fa86:	460c      	mov	r4, r1
 800fa88:	b329      	cbz	r1, 800fad6 <_Control__cdr_deserialize+0x52>
 800fa8a:	4605      	mov	r5, r0
 800fa8c:	f001 f88c 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa90:	4603      	mov	r3, r0
 800fa92:	4621      	mov	r1, r4
 800fa94:	4628      	mov	r0, r5
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	4798      	blx	r3
 800fa9c:	f001 f884 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800faa0:	4603      	mov	r3, r0
 800faa2:	f104 0108 	add.w	r1, r4, #8
 800faa6:	4628      	mov	r0, r5
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	68db      	ldr	r3, [r3, #12]
 800faac:	4798      	blx	r3
 800faae:	f000 f95b 	bl	800fd68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800fab2:	4603      	mov	r3, r0
 800fab4:	f104 0110 	add.w	r1, r4, #16
 800fab8:	4628      	mov	r0, r5
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	4798      	blx	r3
 800fac0:	f000 fa28 	bl	800ff14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800fac4:	4603      	mov	r3, r0
 800fac6:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 800faca:	4628      	mov	r0, r5
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	4718      	bx	r3
 800fad6:	4608      	mov	r0, r1
 800fad8:	bd70      	pop	{r4, r5, r6, pc}
 800fada:	bf00      	nop

0800fadc <_Control__cdr_serialize>:
 800fadc:	b338      	cbz	r0, 800fb2e <_Control__cdr_serialize+0x52>
 800fade:	b570      	push	{r4, r5, r6, lr}
 800fae0:	4604      	mov	r4, r0
 800fae2:	460d      	mov	r5, r1
 800fae4:	f001 f860 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fae8:	4603      	mov	r3, r0
 800faea:	4629      	mov	r1, r5
 800faec:	4620      	mov	r0, r4
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	689b      	ldr	r3, [r3, #8]
 800faf2:	4798      	blx	r3
 800faf4:	f001 f858 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800faf8:	4603      	mov	r3, r0
 800fafa:	4629      	mov	r1, r5
 800fafc:	f104 0008 	add.w	r0, r4, #8
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	689b      	ldr	r3, [r3, #8]
 800fb04:	4798      	blx	r3
 800fb06:	f000 f92f 	bl	800fd68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	f104 0010 	add.w	r0, r4, #16
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	689b      	ldr	r3, [r3, #8]
 800fb16:	4798      	blx	r3
 800fb18:	f000 f9fc 	bl	800ff14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	4629      	mov	r1, r5
 800fb20:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	4718      	bx	r3
 800fb2e:	4770      	bx	lr

0800fb30 <_Control__get_serialized_size>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4604      	mov	r4, r0
 800fb34:	b1b8      	cbz	r0, 800fb66 <_Control__get_serialized_size+0x36>
 800fb36:	2100      	movs	r1, #0
 800fb38:	f000 ffd2 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fb3c:	4605      	mov	r5, r0
 800fb3e:	f104 0008 	add.w	r0, r4, #8
 800fb42:	4629      	mov	r1, r5
 800fb44:	f000 ffcc 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fb48:	4601      	mov	r1, r0
 800fb4a:	f104 0010 	add.w	r0, r4, #16
 800fb4e:	440d      	add	r5, r1
 800fb50:	4629      	mov	r1, r5
 800fb52:	f000 f82f 	bl	800fbb4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800fb56:	4601      	mov	r1, r0
 800fb58:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800fb5c:	440d      	add	r5, r1
 800fb5e:	4629      	mov	r1, r5
 800fb60:	f000 f934 	bl	800fdcc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800fb64:	4428      	add	r0, r5
 800fb66:	bd38      	pop	{r3, r4, r5, pc}

0800fb68 <_Control__max_serialized_size>:
 800fb68:	b530      	push	{r4, r5, lr}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	2100      	movs	r1, #0
 800fb70:	f10d 0007 	add.w	r0, sp, #7
 800fb74:	f88d 3007 	strb.w	r3, [sp, #7]
 800fb78:	f001 f802 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	f10d 0007 	add.w	r0, sp, #7
 800fb82:	4621      	mov	r1, r4
 800fb84:	f000 fffc 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 800fb88:	4605      	mov	r5, r0
 800fb8a:	f10d 0007 	add.w	r0, sp, #7
 800fb8e:	4425      	add	r5, r4
 800fb90:	4629      	mov	r1, r5
 800fb92:	f000 f8c7 	bl	800fd24 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 800fb96:	4604      	mov	r4, r0
 800fb98:	f10d 0007 	add.w	r0, sp, #7
 800fb9c:	442c      	add	r4, r5
 800fb9e:	4621      	mov	r1, r4
 800fba0:	f000 f980 	bl	800fea4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800fba4:	4420      	add	r0, r4
 800fba6:	b003      	add	sp, #12
 800fba8:	bd30      	pop	{r4, r5, pc}
 800fbaa:	bf00      	nop

0800fbac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800fbac:	4800      	ldr	r0, [pc, #0]	@ (800fbb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 800fbae:	4770      	bx	lr
 800fbb0:	2400040c 	.word	0x2400040c

0800fbb4 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 800fbb4:	b5b0      	push	{r4, r5, r7, lr}
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	b1f0      	cbz	r0, 800fbf8 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 800fbba:	460d      	mov	r5, r1
 800fbbc:	f000 ff90 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fbc0:	4607      	mov	r7, r0
 800fbc2:	f104 0008 	add.w	r0, r4, #8
 800fbc6:	442f      	add	r7, r5
 800fbc8:	f1c5 0501 	rsb	r5, r5, #1
 800fbcc:	4639      	mov	r1, r7
 800fbce:	f000 ff87 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fbd2:	4407      	add	r7, r0
 800fbd4:	2104      	movs	r1, #4
 800fbd6:	4638      	mov	r0, r7
 800fbd8:	f001 fea8 	bl	801192c <ucdr_alignment>
 800fbdc:	2104      	movs	r1, #4
 800fbde:	1844      	adds	r4, r0, r1
 800fbe0:	443c      	add	r4, r7
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	f001 fea2 	bl	801192c <ucdr_alignment>
 800fbe8:	3004      	adds	r0, #4
 800fbea:	2101      	movs	r1, #1
 800fbec:	4404      	add	r4, r0
 800fbee:	4620      	mov	r0, r4
 800fbf0:	f001 fe9c 	bl	801192c <ucdr_alignment>
 800fbf4:	4428      	add	r0, r5
 800fbf6:	4420      	add	r0, r4
 800fbf8:	bdb0      	pop	{r4, r5, r7, pc}
 800fbfa:	bf00      	nop

0800fbfc <_Lateral__cdr_deserialize>:
 800fbfc:	b538      	push	{r3, r4, r5, lr}
 800fbfe:	460c      	mov	r4, r1
 800fc00:	b311      	cbz	r1, 800fc48 <_Lateral__cdr_deserialize+0x4c>
 800fc02:	4605      	mov	r5, r0
 800fc04:	f000 ffd0 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	4798      	blx	r3
 800fc14:	f000 ffc8 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	f104 0108 	add.w	r1, r4, #8
 800fc1e:	4628      	mov	r0, r5
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	4798      	blx	r3
 800fc26:	f104 0110 	add.w	r1, r4, #16
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f001 fc30 	bl	8011490 <ucdr_deserialize_float>
 800fc30:	f104 0114 	add.w	r1, r4, #20
 800fc34:	4628      	mov	r0, r5
 800fc36:	f001 fc2b 	bl	8011490 <ucdr_deserialize_float>
 800fc3a:	f104 0118 	add.w	r1, r4, #24
 800fc3e:	4628      	mov	r0, r5
 800fc40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc44:	f000 bfca 	b.w	8010bdc <ucdr_deserialize_bool>
 800fc48:	4608      	mov	r0, r1
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}

0800fc4c <_Lateral__cdr_serialize>:
 800fc4c:	b318      	cbz	r0, 800fc96 <_Lateral__cdr_serialize+0x4a>
 800fc4e:	b538      	push	{r3, r4, r5, lr}
 800fc50:	4604      	mov	r4, r0
 800fc52:	460d      	mov	r5, r1
 800fc54:	f000 ffa8 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	4798      	blx	r3
 800fc64:	f000 ffa0 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	4629      	mov	r1, r5
 800fc6c:	f104 0008 	add.w	r0, r4, #8
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	689b      	ldr	r3, [r3, #8]
 800fc74:	4798      	blx	r3
 800fc76:	ed94 0a04 	vldr	s0, [r4, #16]
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f001 fb70 	bl	8011360 <ucdr_serialize_float>
 800fc80:	ed94 0a05 	vldr	s0, [r4, #20]
 800fc84:	4628      	mov	r0, r5
 800fc86:	f001 fb6b 	bl	8011360 <ucdr_serialize_float>
 800fc8a:	7e21      	ldrb	r1, [r4, #24]
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc92:	f000 bf8d 	b.w	8010bb0 <ucdr_serialize_bool>
 800fc96:	4770      	bx	lr

0800fc98 <_Lateral__get_serialized_size>:
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	b1d8      	cbz	r0, 800fcd6 <_Lateral__get_serialized_size+0x3e>
 800fc9e:	2100      	movs	r1, #0
 800fca0:	f000 ff1e 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fca4:	4605      	mov	r5, r0
 800fca6:	f104 0008 	add.w	r0, r4, #8
 800fcaa:	4629      	mov	r1, r5
 800fcac:	f000 ff18 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fcb0:	4405      	add	r5, r0
 800fcb2:	2104      	movs	r1, #4
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	f001 fe39 	bl	801192c <ucdr_alignment>
 800fcba:	2104      	movs	r1, #4
 800fcbc:	4408      	add	r0, r1
 800fcbe:	1944      	adds	r4, r0, r5
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f001 fe33 	bl	801192c <ucdr_alignment>
 800fcc6:	3004      	adds	r0, #4
 800fcc8:	2101      	movs	r1, #1
 800fcca:	4404      	add	r4, r0
 800fccc:	4620      	mov	r0, r4
 800fcce:	f001 fe2d 	bl	801192c <ucdr_alignment>
 800fcd2:	3001      	adds	r0, #1
 800fcd4:	4420      	add	r0, r4
 800fcd6:	bd38      	pop	{r3, r4, r5, pc}

0800fcd8 <_Lateral__max_serialized_size>:
 800fcd8:	b530      	push	{r4, r5, lr}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	2501      	movs	r5, #1
 800fcde:	2100      	movs	r1, #0
 800fce0:	f10d 0007 	add.w	r0, sp, #7
 800fce4:	f88d 5007 	strb.w	r5, [sp, #7]
 800fce8:	f000 ff4a 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 800fcec:	4604      	mov	r4, r0
 800fcee:	f10d 0007 	add.w	r0, sp, #7
 800fcf2:	4621      	mov	r1, r4
 800fcf4:	f000 ff44 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 800fcf8:	4404      	add	r4, r0
 800fcfa:	2104      	movs	r1, #4
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f001 fe15 	bl	801192c <ucdr_alignment>
 800fd02:	2104      	movs	r1, #4
 800fd04:	4408      	add	r0, r1
 800fd06:	4404      	add	r4, r0
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f001 fe0f 	bl	801192c <ucdr_alignment>
 800fd0e:	3004      	adds	r0, #4
 800fd10:	4629      	mov	r1, r5
 800fd12:	4404      	add	r4, r0
 800fd14:	4620      	mov	r0, r4
 800fd16:	f001 fe09 	bl	801192c <ucdr_alignment>
 800fd1a:	4428      	add	r0, r5
 800fd1c:	4420      	add	r0, r4
 800fd1e:	b003      	add	sp, #12
 800fd20:	bd30      	pop	{r4, r5, pc}
 800fd22:	bf00      	nop

0800fd24 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 800fd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd26:	2701      	movs	r7, #1
 800fd28:	460c      	mov	r4, r1
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	7007      	strb	r7, [r0, #0]
 800fd2e:	f000 ff27 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 800fd32:	4605      	mov	r5, r0
 800fd34:	4630      	mov	r0, r6
 800fd36:	4425      	add	r5, r4
 800fd38:	1b3c      	subs	r4, r7, r4
 800fd3a:	4629      	mov	r1, r5
 800fd3c:	f000 ff20 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 800fd40:	4405      	add	r5, r0
 800fd42:	2104      	movs	r1, #4
 800fd44:	4628      	mov	r0, r5
 800fd46:	f001 fdf1 	bl	801192c <ucdr_alignment>
 800fd4a:	2104      	movs	r1, #4
 800fd4c:	4408      	add	r0, r1
 800fd4e:	4405      	add	r5, r0
 800fd50:	4628      	mov	r0, r5
 800fd52:	f001 fdeb 	bl	801192c <ucdr_alignment>
 800fd56:	3004      	adds	r0, #4
 800fd58:	4639      	mov	r1, r7
 800fd5a:	4405      	add	r5, r0
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	f001 fde5 	bl	801192c <ucdr_alignment>
 800fd62:	4420      	add	r0, r4
 800fd64:	4428      	add	r0, r5
 800fd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fd68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800fd68:	4800      	ldr	r0, [pc, #0]	@ (800fd6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 800fd6a:	4770      	bx	lr
 800fd6c:	24000434 	.word	0x24000434

0800fd70 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 800fd70:	b570      	push	{r4, r5, r6, lr}
 800fd72:	460c      	mov	r4, r1
 800fd74:	4606      	mov	r6, r0
 800fd76:	f000 feb3 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fd7a:	4605      	mov	r5, r0
 800fd7c:	f106 0008 	add.w	r0, r6, #8
 800fd80:	4425      	add	r5, r4
 800fd82:	f1c4 0401 	rsb	r4, r4, #1
 800fd86:	4629      	mov	r1, r5
 800fd88:	f000 feaa 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fd8c:	4405      	add	r5, r0
 800fd8e:	2104      	movs	r1, #4
 800fd90:	4628      	mov	r0, r5
 800fd92:	f001 fdcb 	bl	801192c <ucdr_alignment>
 800fd96:	2104      	movs	r1, #4
 800fd98:	4408      	add	r0, r1
 800fd9a:	4405      	add	r5, r0
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	f001 fdc5 	bl	801192c <ucdr_alignment>
 800fda2:	2104      	movs	r1, #4
 800fda4:	4408      	add	r0, r1
 800fda6:	1946      	adds	r6, r0, r5
 800fda8:	4630      	mov	r0, r6
 800fdaa:	f001 fdbf 	bl	801192c <ucdr_alignment>
 800fdae:	1d05      	adds	r5, r0, #4
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	4435      	add	r5, r6
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	f001 fdb9 	bl	801192c <ucdr_alignment>
 800fdba:	2101      	movs	r1, #1
 800fdbc:	4408      	add	r0, r1
 800fdbe:	4405      	add	r5, r0
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	f001 fdb3 	bl	801192c <ucdr_alignment>
 800fdc6:	4420      	add	r0, r4
 800fdc8:	4428      	add	r0, r5
 800fdca:	bd70      	pop	{r4, r5, r6, pc}

0800fdcc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800fdcc:	b108      	cbz	r0, 800fdd2 <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 800fdce:	f7ff bfcf 	b.w	800fd70 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800fdd2:	4770      	bx	lr

0800fdd4 <_Longitudinal__get_serialized_size>:
 800fdd4:	b110      	cbz	r0, 800fddc <_Longitudinal__get_serialized_size+0x8>
 800fdd6:	2100      	movs	r1, #0
 800fdd8:	f7ff bfca 	b.w	800fd70 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop

0800fde0 <_Longitudinal__cdr_deserialize>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	460c      	mov	r4, r1
 800fde4:	b361      	cbz	r1, 800fe40 <_Longitudinal__cdr_deserialize+0x60>
 800fde6:	4605      	mov	r5, r0
 800fde8:	f000 fede 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fdec:	4603      	mov	r3, r0
 800fdee:	4621      	mov	r1, r4
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	4798      	blx	r3
 800fdf8:	f000 fed6 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	f104 0108 	add.w	r1, r4, #8
 800fe02:	4628      	mov	r0, r5
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	4798      	blx	r3
 800fe0a:	f104 0110 	add.w	r1, r4, #16
 800fe0e:	4628      	mov	r0, r5
 800fe10:	f001 fb3e 	bl	8011490 <ucdr_deserialize_float>
 800fe14:	f104 0114 	add.w	r1, r4, #20
 800fe18:	4628      	mov	r0, r5
 800fe1a:	f001 fb39 	bl	8011490 <ucdr_deserialize_float>
 800fe1e:	f104 0118 	add.w	r1, r4, #24
 800fe22:	4628      	mov	r0, r5
 800fe24:	f001 fb34 	bl	8011490 <ucdr_deserialize_float>
 800fe28:	f104 011c 	add.w	r1, r4, #28
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f000 fed5 	bl	8010bdc <ucdr_deserialize_bool>
 800fe32:	f104 011d 	add.w	r1, r4, #29
 800fe36:	4628      	mov	r0, r5
 800fe38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe3c:	f000 bece 	b.w	8010bdc <ucdr_deserialize_bool>
 800fe40:	4608      	mov	r0, r1
 800fe42:	bd38      	pop	{r3, r4, r5, pc}

0800fe44 <_Longitudinal__cdr_serialize>:
 800fe44:	b360      	cbz	r0, 800fea0 <_Longitudinal__cdr_serialize+0x5c>
 800fe46:	b538      	push	{r3, r4, r5, lr}
 800fe48:	4604      	mov	r4, r0
 800fe4a:	460d      	mov	r5, r1
 800fe4c:	f000 feac 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fe50:	4603      	mov	r3, r0
 800fe52:	4629      	mov	r1, r5
 800fe54:	4620      	mov	r0, r4
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	4798      	blx	r3
 800fe5c:	f000 fea4 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fe60:	4603      	mov	r3, r0
 800fe62:	4629      	mov	r1, r5
 800fe64:	f104 0008 	add.w	r0, r4, #8
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	4798      	blx	r3
 800fe6e:	ed94 0a04 	vldr	s0, [r4, #16]
 800fe72:	4628      	mov	r0, r5
 800fe74:	f001 fa74 	bl	8011360 <ucdr_serialize_float>
 800fe78:	ed94 0a05 	vldr	s0, [r4, #20]
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f001 fa6f 	bl	8011360 <ucdr_serialize_float>
 800fe82:	ed94 0a06 	vldr	s0, [r4, #24]
 800fe86:	4628      	mov	r0, r5
 800fe88:	f001 fa6a 	bl	8011360 <ucdr_serialize_float>
 800fe8c:	7f21      	ldrb	r1, [r4, #28]
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f000 fe8e 	bl	8010bb0 <ucdr_serialize_bool>
 800fe94:	7f61      	ldrb	r1, [r4, #29]
 800fe96:	4628      	mov	r0, r5
 800fe98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe9c:	f000 be88 	b.w	8010bb0 <ucdr_serialize_bool>
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop

0800fea4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800fea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea6:	2701      	movs	r7, #1
 800fea8:	460c      	mov	r4, r1
 800feaa:	4606      	mov	r6, r0
 800feac:	7007      	strb	r7, [r0, #0]
 800feae:	f000 fe67 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 800feb2:	4605      	mov	r5, r0
 800feb4:	4630      	mov	r0, r6
 800feb6:	4425      	add	r5, r4
 800feb8:	1b3c      	subs	r4, r7, r4
 800feba:	4629      	mov	r1, r5
 800febc:	f000 fe60 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 800fec0:	4405      	add	r5, r0
 800fec2:	2104      	movs	r1, #4
 800fec4:	4628      	mov	r0, r5
 800fec6:	f001 fd31 	bl	801192c <ucdr_alignment>
 800feca:	2104      	movs	r1, #4
 800fecc:	4408      	add	r0, r1
 800fece:	4405      	add	r5, r0
 800fed0:	4628      	mov	r0, r5
 800fed2:	f001 fd2b 	bl	801192c <ucdr_alignment>
 800fed6:	2104      	movs	r1, #4
 800fed8:	4408      	add	r0, r1
 800feda:	1946      	adds	r6, r0, r5
 800fedc:	4630      	mov	r0, r6
 800fede:	f001 fd25 	bl	801192c <ucdr_alignment>
 800fee2:	1d05      	adds	r5, r0, #4
 800fee4:	4639      	mov	r1, r7
 800fee6:	4435      	add	r5, r6
 800fee8:	4628      	mov	r0, r5
 800feea:	f001 fd1f 	bl	801192c <ucdr_alignment>
 800feee:	4438      	add	r0, r7
 800fef0:	4639      	mov	r1, r7
 800fef2:	4405      	add	r5, r0
 800fef4:	4628      	mov	r0, r5
 800fef6:	f001 fd19 	bl	801192c <ucdr_alignment>
 800fefa:	4420      	add	r0, r4
 800fefc:	4428      	add	r0, r5
 800fefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff00 <_Longitudinal__max_serialized_size>:
 800ff00:	b500      	push	{lr}
 800ff02:	b083      	sub	sp, #12
 800ff04:	2100      	movs	r1, #0
 800ff06:	f10d 0007 	add.w	r0, sp, #7
 800ff0a:	f7ff ffcb 	bl	800fea4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800ff0e:	b003      	add	sp, #12
 800ff10:	f85d fb04 	ldr.w	pc, [sp], #4

0800ff14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800ff14:	4800      	ldr	r0, [pc, #0]	@ (800ff18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 800ff16:	4770      	bx	lr
 800ff18:	2400045c 	.word	0x2400045c

0800ff1c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800ff1c:	4b04      	ldr	r3, [pc, #16]	@ (800ff30 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 800ff1e:	4805      	ldr	r0, [pc, #20]	@ (800ff34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4905      	ldr	r1, [pc, #20]	@ (800ff38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 800ff24:	4a05      	ldr	r2, [pc, #20]	@ (800ff3c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800ff26:	6003      	str	r3, [r0, #0]
 800ff28:	600b      	str	r3, [r1, #0]
 800ff2a:	6013      	str	r3, [r2, #0]
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	24000e0c 	.word	0x24000e0c
 800ff34:	240004a8 	.word	0x240004a8
 800ff38:	240004b4 	.word	0x240004b4
 800ff3c:	2400048c 	.word	0x2400048c

0800ff40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800ff40:	4a02      	ldr	r2, [pc, #8]	@ (800ff4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 800ff42:	4b03      	ldr	r3, [pc, #12]	@ (800ff50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 800ff44:	6812      	ldr	r2, [r2, #0]
 800ff46:	601a      	str	r2, [r3, #0]
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	24000e0c 	.word	0x24000e0c
 800ff50:	240004c8 	.word	0x240004c8

0800ff54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800ff54:	4a02      	ldr	r2, [pc, #8]	@ (800ff60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 800ff56:	4b03      	ldr	r3, [pc, #12]	@ (800ff64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 800ff58:	6812      	ldr	r2, [r2, #0]
 800ff5a:	601a      	str	r2, [r3, #0]
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	24000e0c 	.word	0x24000e0c
 800ff64:	240004dc 	.word	0x240004dc

0800ff68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800ff68:	4a02      	ldr	r2, [pc, #8]	@ (800ff74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 800ff6a:	4b03      	ldr	r3, [pc, #12]	@ (800ff78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 800ff6c:	6812      	ldr	r2, [r2, #0]
 800ff6e:	601a      	str	r2, [r3, #0]
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	24000e0c 	.word	0x24000e0c
 800ff78:	240004f0 	.word	0x240004f0

0800ff7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800ff7c:	4a02      	ldr	r2, [pc, #8]	@ (800ff88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 800ff7e:	4b03      	ldr	r3, [pc, #12]	@ (800ff8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 800ff80:	6812      	ldr	r2, [r2, #0]
 800ff82:	601a      	str	r2, [r3, #0]
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop
 800ff88:	24000e0c 	.word	0x24000e0c
 800ff8c:	24000504 	.word	0x24000504

0800ff90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800ff90:	4a02      	ldr	r2, [pc, #8]	@ (800ff9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 800ff92:	4b03      	ldr	r3, [pc, #12]	@ (800ffa0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 800ff94:	6812      	ldr	r2, [r2, #0]
 800ff96:	601a      	str	r2, [r3, #0]
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	24000e0c 	.word	0x24000e0c
 800ffa0:	24000518 	.word	0x24000518

0800ffa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800ffa4:	4a02      	ldr	r2, [pc, #8]	@ (800ffb0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 800ffa6:	4b03      	ldr	r3, [pc, #12]	@ (800ffb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 800ffa8:	6812      	ldr	r2, [r2, #0]
 800ffaa:	601a      	str	r2, [r3, #0]
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	24000e0c 	.word	0x24000e0c
 800ffb4:	2400052c 	.word	0x2400052c

0800ffb8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800ffb8:	4a02      	ldr	r2, [pc, #8]	@ (800ffc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 800ffba:	4b03      	ldr	r3, [pc, #12]	@ (800ffc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 800ffbc:	6812      	ldr	r2, [r2, #0]
 800ffbe:	601a      	str	r2, [r3, #0]
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	24000e0c 	.word	0x24000e0c
 800ffc8:	24000540 	.word	0x24000540

0800ffcc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800ffcc:	4a02      	ldr	r2, [pc, #8]	@ (800ffd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 800ffce:	4b03      	ldr	r3, [pc, #12]	@ (800ffdc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 800ffd0:	6812      	ldr	r2, [r2, #0]
 800ffd2:	601a      	str	r2, [r3, #0]
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop
 800ffd8:	24000e0c 	.word	0x24000e0c
 800ffdc:	24000554 	.word	0x24000554

0800ffe0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800ffe0:	4a02      	ldr	r2, [pc, #8]	@ (800ffec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 800ffe2:	4b03      	ldr	r3, [pc, #12]	@ (800fff0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 800ffe4:	6812      	ldr	r2, [r2, #0]
 800ffe6:	601a      	str	r2, [r3, #0]
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop
 800ffec:	24000e0c 	.word	0x24000e0c
 800fff0:	24000568 	.word	0x24000568

0800fff4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 800fff4:	f002 b92e 	b.w	8012254 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

0800fff8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 800fff8:	f002 b93e 	b.w	8012278 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

0800fffc <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 800fffc:	f002 b940 	b.w	8012280 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

08010000 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8010000:	f002 b942 	b.w	8012288 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

08010004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010004:	b508      	push	{r3, lr}
 8010006:	f000 fd5d 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801000a:	4b06      	ldr	r3, [pc, #24]	@ (8010024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801000c:	4906      	ldr	r1, [pc, #24]	@ (8010028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	60c8      	str	r0, [r1, #12]
 8010012:	b10a      	cbz	r2, 8010018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8010014:	4803      	ldr	r0, [pc, #12]	@ (8010024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010016:	bd08      	pop	{r3, pc}
 8010018:	4a04      	ldr	r2, [pc, #16]	@ (801002c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 801001a:	4802      	ldr	r0, [pc, #8]	@ (8010024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801001c:	6812      	ldr	r2, [r2, #0]
 801001e:	601a      	str	r2, [r3, #0]
 8010020:	bd08      	pop	{r3, pc}
 8010022:	bf00      	nop
 8010024:	240005ec 	.word	0x240005ec
 8010028:	24000574 	.word	0x24000574
 801002c:	24000e10 	.word	0x24000e10

08010030 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010030:	4b04      	ldr	r3, [pc, #16]	@ (8010044 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	b10a      	cbz	r2, 801003a <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 8010036:	4803      	ldr	r0, [pc, #12]	@ (8010044 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010038:	4770      	bx	lr
 801003a:	4a03      	ldr	r2, [pc, #12]	@ (8010048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 801003c:	4801      	ldr	r0, [pc, #4]	@ (8010044 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 801003e:	6812      	ldr	r2, [r2, #0]
 8010040:	601a      	str	r2, [r3, #0]
 8010042:	4770      	bx	lr
 8010044:	24000634 	.word	0x24000634
 8010048:	24000e10 	.word	0x24000e10

0801004c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 801004c:	4b16      	ldr	r3, [pc, #88]	@ (80100a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	b510      	push	{r4, lr}
 8010052:	b132      	cbz	r2, 8010062 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 8010054:	685c      	ldr	r4, [r3, #4]
 8010056:	68a3      	ldr	r3, [r4, #8]
 8010058:	b153      	cbz	r3, 8010070 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 801005a:	68e3      	ldr	r3, [r4, #12]
 801005c:	b1a3      	cbz	r3, 8010088 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 801005e:	4812      	ldr	r0, [pc, #72]	@ (80100a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010060:	bd10      	pop	{r4, pc}
 8010062:	4a12      	ldr	r2, [pc, #72]	@ (80100ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010064:	685c      	ldr	r4, [r3, #4]
 8010066:	6812      	ldr	r2, [r2, #0]
 8010068:	601a      	str	r2, [r3, #0]
 801006a:	68a3      	ldr	r3, [r4, #8]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1f4      	bne.n	801005a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 8010070:	f000 fd28 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010074:	4b0e      	ldr	r3, [pc, #56]	@ (80100b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 8010076:	490f      	ldr	r1, [pc, #60]	@ (80100b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	60c8      	str	r0, [r1, #12]
 801007c:	b17a      	cbz	r2, 801009e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	60a3      	str	r3, [r4, #8]
 8010082:	68e3      	ldr	r3, [r4, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d1ea      	bne.n	801005e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 8010088:	4b0b      	ldr	r3, [pc, #44]	@ (80100b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 801008a:	681a      	ldr	r2, [r3, #0]
 801008c:	b11a      	cbz	r2, 8010096 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	4805      	ldr	r0, [pc, #20]	@ (80100a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010092:	60e3      	str	r3, [r4, #12]
 8010094:	bd10      	pop	{r4, pc}
 8010096:	4a05      	ldr	r2, [pc, #20]	@ (80100ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010098:	6812      	ldr	r2, [r2, #0]
 801009a:	601a      	str	r2, [r3, #0]
 801009c:	e7f7      	b.n	801008e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 801009e:	4a03      	ldr	r2, [pc, #12]	@ (80100ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 80100a0:	6812      	ldr	r2, [r2, #0]
 80100a2:	601a      	str	r2, [r3, #0]
 80100a4:	e7eb      	b.n	801007e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 80100a6:	bf00      	nop
 80100a8:	24000650 	.word	0x24000650
 80100ac:	24000e10 	.word	0x24000e10
 80100b0:	240005ec 	.word	0x240005ec
 80100b4:	24000574 	.word	0x24000574
 80100b8:	24000634 	.word	0x24000634

080100bc <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 80100bc:	f002 b8e6 	b.w	801228c <autoware_vehicle_msgs__msg__ControlModeReport__init>

080100c0 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 80100c0:	f002 b8f6 	b.w	80122b0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

080100c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80100c4:	b508      	push	{r3, lr}
 80100c6:	f000 fcfd 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80100ca:	4b06      	ldr	r3, [pc, #24]	@ (80100e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80100cc:	4906      	ldr	r1, [pc, #24]	@ (80100e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	60c8      	str	r0, [r1, #12]
 80100d2:	b10a      	cbz	r2, 80100d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 80100d4:	4803      	ldr	r0, [pc, #12]	@ (80100e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80100d6:	bd08      	pop	{r3, pc}
 80100d8:	4a04      	ldr	r2, [pc, #16]	@ (80100ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 80100da:	4802      	ldr	r0, [pc, #8]	@ (80100e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80100dc:	6812      	ldr	r2, [r2, #0]
 80100de:	601a      	str	r2, [r3, #0]
 80100e0:	bd08      	pop	{r3, pc}
 80100e2:	bf00      	nop
 80100e4:	240006d4 	.word	0x240006d4
 80100e8:	2400065c 	.word	0x2400065c
 80100ec:	24000e10 	.word	0x24000e10

080100f0 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 80100f0:	f002 b8e2 	b.w	80122b8 <autoware_vehicle_msgs__msg__GearCommand__init>

080100f4 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 80100f4:	f002 b8f2 	b.w	80122dc <autoware_vehicle_msgs__msg__GearCommand__fini>

080100f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 80100f8:	b508      	push	{r3, lr}
 80100fa:	f000 fce3 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80100fe:	4b06      	ldr	r3, [pc, #24]	@ (8010118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010100:	4906      	ldr	r1, [pc, #24]	@ (801011c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	60c8      	str	r0, [r1, #12]
 8010106:	b10a      	cbz	r2, 801010c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 8010108:	4803      	ldr	r0, [pc, #12]	@ (8010118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 801010a:	bd08      	pop	{r3, pc}
 801010c:	4a04      	ldr	r2, [pc, #16]	@ (8010120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 801010e:	4802      	ldr	r0, [pc, #8]	@ (8010118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010110:	6812      	ldr	r2, [r2, #0]
 8010112:	601a      	str	r2, [r3, #0]
 8010114:	bd08      	pop	{r3, pc}
 8010116:	bf00      	nop
 8010118:	24000758 	.word	0x24000758
 801011c:	240006e0 	.word	0x240006e0
 8010120:	24000e10 	.word	0x24000e10

08010124 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8010124:	f002 b8de 	b.w	80122e4 <autoware_vehicle_msgs__msg__GearReport__init>

08010128 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 8010128:	f002 b8ee 	b.w	8012308 <autoware_vehicle_msgs__msg__GearReport__fini>

0801012c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 801012c:	b508      	push	{r3, lr}
 801012e:	f000 fcc9 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010132:	4b06      	ldr	r3, [pc, #24]	@ (801014c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010134:	4906      	ldr	r1, [pc, #24]	@ (8010150 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 8010136:	681a      	ldr	r2, [r3, #0]
 8010138:	60c8      	str	r0, [r1, #12]
 801013a:	b10a      	cbz	r2, 8010140 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 801013c:	4803      	ldr	r0, [pc, #12]	@ (801014c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 801013e:	bd08      	pop	{r3, pc}
 8010140:	4a04      	ldr	r2, [pc, #16]	@ (8010154 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 8010142:	4802      	ldr	r0, [pc, #8]	@ (801014c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010144:	6812      	ldr	r2, [r2, #0]
 8010146:	601a      	str	r2, [r3, #0]
 8010148:	bd08      	pop	{r3, pc}
 801014a:	bf00      	nop
 801014c:	240007dc 	.word	0x240007dc
 8010150:	24000764 	.word	0x24000764
 8010154:	24000e10 	.word	0x24000e10

08010158 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8010158:	f002 b8da 	b.w	8012310 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

0801015c <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 801015c:	f002 b8ea 	b.w	8012334 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

08010160 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010160:	b508      	push	{r3, lr}
 8010162:	f000 fcaf 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010166:	4b06      	ldr	r3, [pc, #24]	@ (8010180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010168:	4906      	ldr	r1, [pc, #24]	@ (8010184 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	60c8      	str	r0, [r1, #12]
 801016e:	b10a      	cbz	r2, 8010174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8010170:	4803      	ldr	r0, [pc, #12]	@ (8010180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010172:	bd08      	pop	{r3, pc}
 8010174:	4a04      	ldr	r2, [pc, #16]	@ (8010188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 8010176:	4802      	ldr	r0, [pc, #8]	@ (8010180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010178:	6812      	ldr	r2, [r2, #0]
 801017a:	601a      	str	r2, [r3, #0]
 801017c:	bd08      	pop	{r3, pc}
 801017e:	bf00      	nop
 8010180:	24000860 	.word	0x24000860
 8010184:	240007e8 	.word	0x240007e8
 8010188:	24000e10 	.word	0x24000e10

0801018c <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 801018c:	f002 b8d6 	b.w	801233c <autoware_vehicle_msgs__msg__HazardLightsReport__init>

08010190 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8010190:	f002 b8e6 	b.w	8012360 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

08010194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010194:	b508      	push	{r3, lr}
 8010196:	f000 fc95 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801019a:	4b06      	ldr	r3, [pc, #24]	@ (80101b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 801019c:	4906      	ldr	r1, [pc, #24]	@ (80101b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	60c8      	str	r0, [r1, #12]
 80101a2:	b10a      	cbz	r2, 80101a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 80101a4:	4803      	ldr	r0, [pc, #12]	@ (80101b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 80101a6:	bd08      	pop	{r3, pc}
 80101a8:	4a04      	ldr	r2, [pc, #16]	@ (80101bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 80101aa:	4802      	ldr	r0, [pc, #8]	@ (80101b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 80101ac:	6812      	ldr	r2, [r2, #0]
 80101ae:	601a      	str	r2, [r3, #0]
 80101b0:	bd08      	pop	{r3, pc}
 80101b2:	bf00      	nop
 80101b4:	240008e4 	.word	0x240008e4
 80101b8:	2400086c 	.word	0x2400086c
 80101bc:	24000e10 	.word	0x24000e10

080101c0 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 80101c0:	f002 b8d2 	b.w	8012368 <autoware_vehicle_msgs__msg__SteeringReport__init>

080101c4 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 80101c4:	f002 b8e2 	b.w	801238c <autoware_vehicle_msgs__msg__SteeringReport__fini>

080101c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 80101c8:	b508      	push	{r3, lr}
 80101ca:	f000 fc7b 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80101ce:	4b06      	ldr	r3, [pc, #24]	@ (80101e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 80101d0:	4906      	ldr	r1, [pc, #24]	@ (80101ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	60c8      	str	r0, [r1, #12]
 80101d6:	b10a      	cbz	r2, 80101dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 80101d8:	4803      	ldr	r0, [pc, #12]	@ (80101e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 80101da:	bd08      	pop	{r3, pc}
 80101dc:	4a04      	ldr	r2, [pc, #16]	@ (80101f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 80101de:	4802      	ldr	r0, [pc, #8]	@ (80101e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 80101e0:	6812      	ldr	r2, [r2, #0]
 80101e2:	601a      	str	r2, [r3, #0]
 80101e4:	bd08      	pop	{r3, pc}
 80101e6:	bf00      	nop
 80101e8:	24000968 	.word	0x24000968
 80101ec:	240008f0 	.word	0x240008f0
 80101f0:	24000e10 	.word	0x24000e10

080101f4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 80101f4:	f002 b8ce 	b.w	8012394 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

080101f8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 80101f8:	f002 b8de 	b.w	80123b8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

080101fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80101fc:	b508      	push	{r3, lr}
 80101fe:	f000 fc61 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010202:	4b06      	ldr	r3, [pc, #24]	@ (801021c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010204:	4906      	ldr	r1, [pc, #24]	@ (8010220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	60c8      	str	r0, [r1, #12]
 801020a:	b10a      	cbz	r2, 8010210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 801020c:	4803      	ldr	r0, [pc, #12]	@ (801021c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 801020e:	bd08      	pop	{r3, pc}
 8010210:	4a04      	ldr	r2, [pc, #16]	@ (8010224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8010212:	4802      	ldr	r0, [pc, #8]	@ (801021c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010214:	6812      	ldr	r2, [r2, #0]
 8010216:	601a      	str	r2, [r3, #0]
 8010218:	bd08      	pop	{r3, pc}
 801021a:	bf00      	nop
 801021c:	240009ec 	.word	0x240009ec
 8010220:	24000974 	.word	0x24000974
 8010224:	24000e10 	.word	0x24000e10

08010228 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 8010228:	f002 b8ca 	b.w	80123c0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

0801022c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 801022c:	f002 b8da 	b.w	80123e4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08010230 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010230:	b508      	push	{r3, lr}
 8010232:	f000 fc47 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010236:	4b06      	ldr	r3, [pc, #24]	@ (8010250 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010238:	4906      	ldr	r1, [pc, #24]	@ (8010254 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 801023a:	681a      	ldr	r2, [r3, #0]
 801023c:	60c8      	str	r0, [r1, #12]
 801023e:	b10a      	cbz	r2, 8010244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8010240:	4803      	ldr	r0, [pc, #12]	@ (8010250 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010242:	bd08      	pop	{r3, pc}
 8010244:	4a04      	ldr	r2, [pc, #16]	@ (8010258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 8010246:	4802      	ldr	r0, [pc, #8]	@ (8010250 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010248:	6812      	ldr	r2, [r2, #0]
 801024a:	601a      	str	r2, [r3, #0]
 801024c:	bd08      	pop	{r3, pc}
 801024e:	bf00      	nop
 8010250:	24000a70 	.word	0x24000a70
 8010254:	240009f8 	.word	0x240009f8
 8010258:	24000e10 	.word	0x24000e10

0801025c <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 801025c:	f002 b8c6 	b.w	80123ec <autoware_vehicle_msgs__msg__VelocityReport__init>

08010260 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8010260:	f002 b8d6 	b.w	8012410 <autoware_vehicle_msgs__msg__VelocityReport__fini>

08010264 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8010264:	b508      	push	{r3, lr}
 8010266:	f001 fc57 	bl	8011b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801026a:	4b06      	ldr	r3, [pc, #24]	@ (8010284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 801026c:	4906      	ldr	r1, [pc, #24]	@ (8010288 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	60c8      	str	r0, [r1, #12]
 8010272:	b10a      	cbz	r2, 8010278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 8010274:	4803      	ldr	r0, [pc, #12]	@ (8010284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010276:	bd08      	pop	{r3, pc}
 8010278:	4a04      	ldr	r2, [pc, #16]	@ (801028c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 801027a:	4802      	ldr	r0, [pc, #8]	@ (8010284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 801027c:	6812      	ldr	r2, [r2, #0]
 801027e:	601a      	str	r2, [r3, #0]
 8010280:	bd08      	pop	{r3, pc}
 8010282:	bf00      	nop
 8010284:	24000b6c 	.word	0x24000b6c
 8010288:	24000a7c 	.word	0x24000a7c
 801028c:	24000e10 	.word	0x24000e10

08010290 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010290:	4800      	ldr	r0, [pc, #0]	@ (8010294 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8010292:	4770      	bx	lr
 8010294:	24000b94 	.word	0x24000b94

08010298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010298:	4800      	ldr	r0, [pc, #0]	@ (801029c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 801029a:	4770      	bx	lr
 801029c:	24000ba0 	.word	0x24000ba0

080102a0 <_ControlModeCommand_Response__max_serialized_size>:
 80102a0:	2101      	movs	r1, #1
 80102a2:	2000      	movs	r0, #0
 80102a4:	b508      	push	{r3, lr}
 80102a6:	f001 fb41 	bl	801192c <ucdr_alignment>
 80102aa:	3001      	adds	r0, #1
 80102ac:	bd08      	pop	{r3, pc}
 80102ae:	bf00      	nop

080102b0 <_ControlModeCommand_Response__cdr_deserialize>:
 80102b0:	b109      	cbz	r1, 80102b6 <_ControlModeCommand_Response__cdr_deserialize+0x6>
 80102b2:	f000 bc93 	b.w	8010bdc <ucdr_deserialize_bool>
 80102b6:	4608      	mov	r0, r1
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop

080102bc <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80102bc:	b538      	push	{r3, r4, r5, lr}
 80102be:	b158      	cbz	r0, 80102d8 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 80102c0:	460d      	mov	r5, r1
 80102c2:	f000 fc0d 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 80102c6:	2101      	movs	r1, #1
 80102c8:	182c      	adds	r4, r5, r0
 80102ca:	f1c5 0501 	rsb	r5, r5, #1
 80102ce:	4620      	mov	r0, r4
 80102d0:	f001 fb2c 	bl	801192c <ucdr_alignment>
 80102d4:	4428      	add	r0, r5
 80102d6:	4420      	add	r0, r4
 80102d8:	bd38      	pop	{r3, r4, r5, pc}
 80102da:	bf00      	nop

080102dc <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 80102dc:	b138      	cbz	r0, 80102ee <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 80102de:	b508      	push	{r3, lr}
 80102e0:	460b      	mov	r3, r1
 80102e2:	2101      	movs	r1, #1
 80102e4:	4618      	mov	r0, r3
 80102e6:	f001 fb21 	bl	801192c <ucdr_alignment>
 80102ea:	3001      	adds	r0, #1
 80102ec:	bd08      	pop	{r3, pc}
 80102ee:	4770      	bx	lr

080102f0 <_ControlModeCommand_Request__cdr_deserialize>:
 80102f0:	b538      	push	{r3, r4, r5, lr}
 80102f2:	460c      	mov	r4, r1
 80102f4:	b179      	cbz	r1, 8010316 <_ControlModeCommand_Request__cdr_deserialize+0x26>
 80102f6:	4605      	mov	r5, r0
 80102f8:	f000 fc56 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80102fc:	4603      	mov	r3, r0
 80102fe:	4621      	mov	r1, r4
 8010300:	4628      	mov	r0, r5
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	4798      	blx	r3
 8010308:	f104 0108 	add.w	r1, r4, #8
 801030c:	4628      	mov	r0, r5
 801030e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010312:	f000 bc91 	b.w	8010c38 <ucdr_deserialize_uint8_t>
 8010316:	4608      	mov	r0, r1
 8010318:	bd38      	pop	{r3, r4, r5, pc}
 801031a:	bf00      	nop

0801031c <_ControlModeCommand_Request__cdr_serialize>:
 801031c:	b180      	cbz	r0, 8010340 <_ControlModeCommand_Request__cdr_serialize+0x24>
 801031e:	b538      	push	{r3, r4, r5, lr}
 8010320:	4604      	mov	r4, r0
 8010322:	460d      	mov	r5, r1
 8010324:	f000 fc40 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010328:	4603      	mov	r3, r0
 801032a:	4629      	mov	r1, r5
 801032c:	4620      	mov	r0, r4
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	689b      	ldr	r3, [r3, #8]
 8010332:	4798      	blx	r3
 8010334:	7a21      	ldrb	r1, [r4, #8]
 8010336:	4628      	mov	r0, r5
 8010338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801033c:	f000 bc66 	b.w	8010c0c <ucdr_serialize_uint8_t>
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop

08010344 <_ControlModeCommand_Response__cdr_serialize>:
 8010344:	460a      	mov	r2, r1
 8010346:	b118      	cbz	r0, 8010350 <_ControlModeCommand_Response__cdr_serialize+0xc>
 8010348:	7801      	ldrb	r1, [r0, #0]
 801034a:	4610      	mov	r0, r2
 801034c:	f000 bc30 	b.w	8010bb0 <ucdr_serialize_bool>
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop

08010354 <_ControlModeCommand_Response__get_serialized_size>:
 8010354:	b130      	cbz	r0, 8010364 <_ControlModeCommand_Response__get_serialized_size+0x10>
 8010356:	2101      	movs	r1, #1
 8010358:	2000      	movs	r0, #0
 801035a:	b508      	push	{r3, lr}
 801035c:	f001 fae6 	bl	801192c <ucdr_alignment>
 8010360:	3001      	adds	r0, #1
 8010362:	bd08      	pop	{r3, pc}
 8010364:	4770      	bx	lr
 8010366:	bf00      	nop

08010368 <_ControlModeCommand_Request__get_serialized_size>:
 8010368:	b150      	cbz	r0, 8010380 <_ControlModeCommand_Request__get_serialized_size+0x18>
 801036a:	2100      	movs	r1, #0
 801036c:	b510      	push	{r4, lr}
 801036e:	f000 fbb7 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010372:	4604      	mov	r4, r0
 8010374:	2101      	movs	r1, #1
 8010376:	f001 fad9 	bl	801192c <ucdr_alignment>
 801037a:	4420      	add	r0, r4
 801037c:	3001      	adds	r0, #1
 801037e:	bd10      	pop	{r4, pc}
 8010380:	4770      	bx	lr
 8010382:	bf00      	nop

08010384 <_ControlModeCommand_Request__max_serialized_size>:
 8010384:	b510      	push	{r4, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	2401      	movs	r4, #1
 801038a:	2100      	movs	r1, #0
 801038c:	f10d 0007 	add.w	r0, sp, #7
 8010390:	f88d 4007 	strb.w	r4, [sp, #7]
 8010394:	f000 fbf4 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8010398:	4621      	mov	r1, r4
 801039a:	4604      	mov	r4, r0
 801039c:	f001 fac6 	bl	801192c <ucdr_alignment>
 80103a0:	4420      	add	r0, r4
 80103a2:	3001      	adds	r0, #1
 80103a4:	b002      	add	sp, #8
 80103a6:	bd10      	pop	{r4, pc}

080103a8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 80103a8:	4800      	ldr	r0, [pc, #0]	@ (80103ac <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 80103aa:	4770      	bx	lr
 80103ac:	24000b88 	.word	0x24000b88

080103b0 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 80103b0:	b538      	push	{r3, r4, r5, lr}
 80103b2:	b158      	cbz	r0, 80103cc <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 80103b4:	460d      	mov	r5, r1
 80103b6:	f000 fb93 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 80103ba:	2101      	movs	r1, #1
 80103bc:	182c      	adds	r4, r5, r0
 80103be:	f1c5 0501 	rsb	r5, r5, #1
 80103c2:	4620      	mov	r0, r4
 80103c4:	f001 fab2 	bl	801192c <ucdr_alignment>
 80103c8:	4428      	add	r0, r5
 80103ca:	4420      	add	r0, r4
 80103cc:	bd38      	pop	{r3, r4, r5, pc}
 80103ce:	bf00      	nop

080103d0 <_ControlModeReport__cdr_deserialize>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	460c      	mov	r4, r1
 80103d4:	b179      	cbz	r1, 80103f6 <_ControlModeReport__cdr_deserialize+0x26>
 80103d6:	4605      	mov	r5, r0
 80103d8:	f000 fbe6 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103dc:	4603      	mov	r3, r0
 80103de:	4621      	mov	r1, r4
 80103e0:	4628      	mov	r0, r5
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	68db      	ldr	r3, [r3, #12]
 80103e6:	4798      	blx	r3
 80103e8:	f104 0108 	add.w	r1, r4, #8
 80103ec:	4628      	mov	r0, r5
 80103ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103f2:	f000 bc21 	b.w	8010c38 <ucdr_deserialize_uint8_t>
 80103f6:	4608      	mov	r0, r1
 80103f8:	bd38      	pop	{r3, r4, r5, pc}
 80103fa:	bf00      	nop

080103fc <_ControlModeReport__cdr_serialize>:
 80103fc:	b180      	cbz	r0, 8010420 <_ControlModeReport__cdr_serialize+0x24>
 80103fe:	b538      	push	{r3, r4, r5, lr}
 8010400:	4604      	mov	r4, r0
 8010402:	460d      	mov	r5, r1
 8010404:	f000 fbd0 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010408:	4603      	mov	r3, r0
 801040a:	4629      	mov	r1, r5
 801040c:	4620      	mov	r0, r4
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	4798      	blx	r3
 8010414:	7a21      	ldrb	r1, [r4, #8]
 8010416:	4628      	mov	r0, r5
 8010418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801041c:	f000 bbf6 	b.w	8010c0c <ucdr_serialize_uint8_t>
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop

08010424 <_ControlModeReport__get_serialized_size>:
 8010424:	b150      	cbz	r0, 801043c <_ControlModeReport__get_serialized_size+0x18>
 8010426:	2100      	movs	r1, #0
 8010428:	b510      	push	{r4, lr}
 801042a:	f000 fb59 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 801042e:	4604      	mov	r4, r0
 8010430:	2101      	movs	r1, #1
 8010432:	f001 fa7b 	bl	801192c <ucdr_alignment>
 8010436:	4420      	add	r0, r4
 8010438:	3001      	adds	r0, #1
 801043a:	bd10      	pop	{r4, pc}
 801043c:	4770      	bx	lr
 801043e:	bf00      	nop

08010440 <_ControlModeReport__max_serialized_size>:
 8010440:	b510      	push	{r4, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	2401      	movs	r4, #1
 8010446:	2100      	movs	r1, #0
 8010448:	f10d 0007 	add.w	r0, sp, #7
 801044c:	f88d 4007 	strb.w	r4, [sp, #7]
 8010450:	f000 fb96 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8010454:	4621      	mov	r1, r4
 8010456:	4604      	mov	r4, r0
 8010458:	f001 fa68 	bl	801192c <ucdr_alignment>
 801045c:	4420      	add	r0, r4
 801045e:	3001      	adds	r0, #1
 8010460:	b002      	add	sp, #8
 8010462:	bd10      	pop	{r4, pc}

08010464 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010464:	4800      	ldr	r0, [pc, #0]	@ (8010468 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 8010466:	4770      	bx	lr
 8010468:	24000be4 	.word	0x24000be4

0801046c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	b158      	cbz	r0, 8010488 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 8010470:	460d      	mov	r5, r1
 8010472:	f000 fb35 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010476:	2101      	movs	r1, #1
 8010478:	182c      	adds	r4, r5, r0
 801047a:	f1c5 0501 	rsb	r5, r5, #1
 801047e:	4620      	mov	r0, r4
 8010480:	f001 fa54 	bl	801192c <ucdr_alignment>
 8010484:	4428      	add	r0, r5
 8010486:	4420      	add	r0, r4
 8010488:	bd38      	pop	{r3, r4, r5, pc}
 801048a:	bf00      	nop

0801048c <_GearCommand__cdr_deserialize>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	460c      	mov	r4, r1
 8010490:	b179      	cbz	r1, 80104b2 <_GearCommand__cdr_deserialize+0x26>
 8010492:	4605      	mov	r5, r0
 8010494:	f000 fb88 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010498:	4603      	mov	r3, r0
 801049a:	4621      	mov	r1, r4
 801049c:	4628      	mov	r0, r5
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	4798      	blx	r3
 80104a4:	f104 0108 	add.w	r1, r4, #8
 80104a8:	4628      	mov	r0, r5
 80104aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ae:	f000 bbc3 	b.w	8010c38 <ucdr_deserialize_uint8_t>
 80104b2:	4608      	mov	r0, r1
 80104b4:	bd38      	pop	{r3, r4, r5, pc}
 80104b6:	bf00      	nop

080104b8 <_GearCommand__cdr_serialize>:
 80104b8:	b180      	cbz	r0, 80104dc <_GearCommand__cdr_serialize+0x24>
 80104ba:	b538      	push	{r3, r4, r5, lr}
 80104bc:	4604      	mov	r4, r0
 80104be:	460d      	mov	r5, r1
 80104c0:	f000 fb72 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80104c4:	4603      	mov	r3, r0
 80104c6:	4629      	mov	r1, r5
 80104c8:	4620      	mov	r0, r4
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	4798      	blx	r3
 80104d0:	7a21      	ldrb	r1, [r4, #8]
 80104d2:	4628      	mov	r0, r5
 80104d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104d8:	f000 bb98 	b.w	8010c0c <ucdr_serialize_uint8_t>
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop

080104e0 <_GearCommand__get_serialized_size>:
 80104e0:	b150      	cbz	r0, 80104f8 <_GearCommand__get_serialized_size+0x18>
 80104e2:	2100      	movs	r1, #0
 80104e4:	b510      	push	{r4, lr}
 80104e6:	f000 fafb 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 80104ea:	4604      	mov	r4, r0
 80104ec:	2101      	movs	r1, #1
 80104ee:	f001 fa1d 	bl	801192c <ucdr_alignment>
 80104f2:	4420      	add	r0, r4
 80104f4:	3001      	adds	r0, #1
 80104f6:	bd10      	pop	{r4, pc}
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop

080104fc <_GearCommand__max_serialized_size>:
 80104fc:	b510      	push	{r4, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	2401      	movs	r4, #1
 8010502:	2100      	movs	r1, #0
 8010504:	f10d 0007 	add.w	r0, sp, #7
 8010508:	f88d 4007 	strb.w	r4, [sp, #7]
 801050c:	f000 fb38 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8010510:	4621      	mov	r1, r4
 8010512:	4604      	mov	r4, r0
 8010514:	f001 fa0a 	bl	801192c <ucdr_alignment>
 8010518:	4420      	add	r0, r4
 801051a:	3001      	adds	r0, #1
 801051c:	b002      	add	sp, #8
 801051e:	bd10      	pop	{r4, pc}

08010520 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010520:	4800      	ldr	r0, [pc, #0]	@ (8010524 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 8010522:	4770      	bx	lr
 8010524:	24000c0c 	.word	0x24000c0c

08010528 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	b158      	cbz	r0, 8010544 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 801052c:	460d      	mov	r5, r1
 801052e:	f000 fad7 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010532:	2101      	movs	r1, #1
 8010534:	182c      	adds	r4, r5, r0
 8010536:	f1c5 0501 	rsb	r5, r5, #1
 801053a:	4620      	mov	r0, r4
 801053c:	f001 f9f6 	bl	801192c <ucdr_alignment>
 8010540:	4428      	add	r0, r5
 8010542:	4420      	add	r0, r4
 8010544:	bd38      	pop	{r3, r4, r5, pc}
 8010546:	bf00      	nop

08010548 <_GearReport__cdr_deserialize>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	460c      	mov	r4, r1
 801054c:	b179      	cbz	r1, 801056e <_GearReport__cdr_deserialize+0x26>
 801054e:	4605      	mov	r5, r0
 8010550:	f000 fb2a 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010554:	4603      	mov	r3, r0
 8010556:	4621      	mov	r1, r4
 8010558:	4628      	mov	r0, r5
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	4798      	blx	r3
 8010560:	f104 0108 	add.w	r1, r4, #8
 8010564:	4628      	mov	r0, r5
 8010566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801056a:	f000 bb65 	b.w	8010c38 <ucdr_deserialize_uint8_t>
 801056e:	4608      	mov	r0, r1
 8010570:	bd38      	pop	{r3, r4, r5, pc}
 8010572:	bf00      	nop

08010574 <_GearReport__cdr_serialize>:
 8010574:	b180      	cbz	r0, 8010598 <_GearReport__cdr_serialize+0x24>
 8010576:	b538      	push	{r3, r4, r5, lr}
 8010578:	4604      	mov	r4, r0
 801057a:	460d      	mov	r5, r1
 801057c:	f000 fb14 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010580:	4603      	mov	r3, r0
 8010582:	4629      	mov	r1, r5
 8010584:	4620      	mov	r0, r4
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	689b      	ldr	r3, [r3, #8]
 801058a:	4798      	blx	r3
 801058c:	7a21      	ldrb	r1, [r4, #8]
 801058e:	4628      	mov	r0, r5
 8010590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010594:	f000 bb3a 	b.w	8010c0c <ucdr_serialize_uint8_t>
 8010598:	4770      	bx	lr
 801059a:	bf00      	nop

0801059c <_GearReport__get_serialized_size>:
 801059c:	b150      	cbz	r0, 80105b4 <_GearReport__get_serialized_size+0x18>
 801059e:	2100      	movs	r1, #0
 80105a0:	b510      	push	{r4, lr}
 80105a2:	f000 fa9d 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 80105a6:	4604      	mov	r4, r0
 80105a8:	2101      	movs	r1, #1
 80105aa:	f001 f9bf 	bl	801192c <ucdr_alignment>
 80105ae:	4420      	add	r0, r4
 80105b0:	3001      	adds	r0, #1
 80105b2:	bd10      	pop	{r4, pc}
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop

080105b8 <_GearReport__max_serialized_size>:
 80105b8:	b510      	push	{r4, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	2401      	movs	r4, #1
 80105be:	2100      	movs	r1, #0
 80105c0:	f10d 0007 	add.w	r0, sp, #7
 80105c4:	f88d 4007 	strb.w	r4, [sp, #7]
 80105c8:	f000 fada 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 80105cc:	4621      	mov	r1, r4
 80105ce:	4604      	mov	r4, r0
 80105d0:	f001 f9ac 	bl	801192c <ucdr_alignment>
 80105d4:	4420      	add	r0, r4
 80105d6:	3001      	adds	r0, #1
 80105d8:	b002      	add	sp, #8
 80105da:	bd10      	pop	{r4, pc}

080105dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 80105dc:	4800      	ldr	r0, [pc, #0]	@ (80105e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 80105de:	4770      	bx	lr
 80105e0:	24000c34 	.word	0x24000c34

080105e4 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80105e4:	b538      	push	{r3, r4, r5, lr}
 80105e6:	b158      	cbz	r0, 8010600 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 80105e8:	460d      	mov	r5, r1
 80105ea:	f000 fa79 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 80105ee:	2101      	movs	r1, #1
 80105f0:	182c      	adds	r4, r5, r0
 80105f2:	f1c5 0501 	rsb	r5, r5, #1
 80105f6:	4620      	mov	r0, r4
 80105f8:	f001 f998 	bl	801192c <ucdr_alignment>
 80105fc:	4428      	add	r0, r5
 80105fe:	4420      	add	r0, r4
 8010600:	bd38      	pop	{r3, r4, r5, pc}
 8010602:	bf00      	nop

08010604 <_HazardLightsCommand__cdr_deserialize>:
 8010604:	b538      	push	{r3, r4, r5, lr}
 8010606:	460c      	mov	r4, r1
 8010608:	b179      	cbz	r1, 801062a <_HazardLightsCommand__cdr_deserialize+0x26>
 801060a:	4605      	mov	r5, r0
 801060c:	f000 facc 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010610:	4603      	mov	r3, r0
 8010612:	4621      	mov	r1, r4
 8010614:	4628      	mov	r0, r5
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	4798      	blx	r3
 801061c:	f104 0108 	add.w	r1, r4, #8
 8010620:	4628      	mov	r0, r5
 8010622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010626:	f000 bb07 	b.w	8010c38 <ucdr_deserialize_uint8_t>
 801062a:	4608      	mov	r0, r1
 801062c:	bd38      	pop	{r3, r4, r5, pc}
 801062e:	bf00      	nop

08010630 <_HazardLightsCommand__cdr_serialize>:
 8010630:	b180      	cbz	r0, 8010654 <_HazardLightsCommand__cdr_serialize+0x24>
 8010632:	b538      	push	{r3, r4, r5, lr}
 8010634:	4604      	mov	r4, r0
 8010636:	460d      	mov	r5, r1
 8010638:	f000 fab6 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801063c:	4603      	mov	r3, r0
 801063e:	4629      	mov	r1, r5
 8010640:	4620      	mov	r0, r4
 8010642:	685b      	ldr	r3, [r3, #4]
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	4798      	blx	r3
 8010648:	7a21      	ldrb	r1, [r4, #8]
 801064a:	4628      	mov	r0, r5
 801064c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010650:	f000 badc 	b.w	8010c0c <ucdr_serialize_uint8_t>
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop

08010658 <_HazardLightsCommand__get_serialized_size>:
 8010658:	b150      	cbz	r0, 8010670 <_HazardLightsCommand__get_serialized_size+0x18>
 801065a:	2100      	movs	r1, #0
 801065c:	b510      	push	{r4, lr}
 801065e:	f000 fa3f 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010662:	4604      	mov	r4, r0
 8010664:	2101      	movs	r1, #1
 8010666:	f001 f961 	bl	801192c <ucdr_alignment>
 801066a:	4420      	add	r0, r4
 801066c:	3001      	adds	r0, #1
 801066e:	bd10      	pop	{r4, pc}
 8010670:	4770      	bx	lr
 8010672:	bf00      	nop

08010674 <_HazardLightsCommand__max_serialized_size>:
 8010674:	b510      	push	{r4, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	2401      	movs	r4, #1
 801067a:	2100      	movs	r1, #0
 801067c:	f10d 0007 	add.w	r0, sp, #7
 8010680:	f88d 4007 	strb.w	r4, [sp, #7]
 8010684:	f000 fa7c 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8010688:	4621      	mov	r1, r4
 801068a:	4604      	mov	r4, r0
 801068c:	f001 f94e 	bl	801192c <ucdr_alignment>
 8010690:	4420      	add	r0, r4
 8010692:	3001      	adds	r0, #1
 8010694:	b002      	add	sp, #8
 8010696:	bd10      	pop	{r4, pc}

08010698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010698:	4800      	ldr	r0, [pc, #0]	@ (801069c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 801069a:	4770      	bx	lr
 801069c:	24000c5c 	.word	0x24000c5c

080106a0 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	b158      	cbz	r0, 80106bc <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 80106a4:	460d      	mov	r5, r1
 80106a6:	f000 fa1b 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 80106aa:	2101      	movs	r1, #1
 80106ac:	182c      	adds	r4, r5, r0
 80106ae:	f1c5 0501 	rsb	r5, r5, #1
 80106b2:	4620      	mov	r0, r4
 80106b4:	f001 f93a 	bl	801192c <ucdr_alignment>
 80106b8:	4428      	add	r0, r5
 80106ba:	4420      	add	r0, r4
 80106bc:	bd38      	pop	{r3, r4, r5, pc}
 80106be:	bf00      	nop

080106c0 <_HazardLightsReport__cdr_deserialize>:
 80106c0:	b538      	push	{r3, r4, r5, lr}
 80106c2:	460c      	mov	r4, r1
 80106c4:	b179      	cbz	r1, 80106e6 <_HazardLightsReport__cdr_deserialize+0x26>
 80106c6:	4605      	mov	r5, r0
 80106c8:	f000 fa6e 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80106cc:	4603      	mov	r3, r0
 80106ce:	4621      	mov	r1, r4
 80106d0:	4628      	mov	r0, r5
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	68db      	ldr	r3, [r3, #12]
 80106d6:	4798      	blx	r3
 80106d8:	f104 0108 	add.w	r1, r4, #8
 80106dc:	4628      	mov	r0, r5
 80106de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106e2:	f000 baa9 	b.w	8010c38 <ucdr_deserialize_uint8_t>
 80106e6:	4608      	mov	r0, r1
 80106e8:	bd38      	pop	{r3, r4, r5, pc}
 80106ea:	bf00      	nop

080106ec <_HazardLightsReport__cdr_serialize>:
 80106ec:	b180      	cbz	r0, 8010710 <_HazardLightsReport__cdr_serialize+0x24>
 80106ee:	b538      	push	{r3, r4, r5, lr}
 80106f0:	4604      	mov	r4, r0
 80106f2:	460d      	mov	r5, r1
 80106f4:	f000 fa58 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80106f8:	4603      	mov	r3, r0
 80106fa:	4629      	mov	r1, r5
 80106fc:	4620      	mov	r0, r4
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	689b      	ldr	r3, [r3, #8]
 8010702:	4798      	blx	r3
 8010704:	7a21      	ldrb	r1, [r4, #8]
 8010706:	4628      	mov	r0, r5
 8010708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801070c:	f000 ba7e 	b.w	8010c0c <ucdr_serialize_uint8_t>
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop

08010714 <_HazardLightsReport__get_serialized_size>:
 8010714:	b150      	cbz	r0, 801072c <_HazardLightsReport__get_serialized_size+0x18>
 8010716:	2100      	movs	r1, #0
 8010718:	b510      	push	{r4, lr}
 801071a:	f000 f9e1 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 801071e:	4604      	mov	r4, r0
 8010720:	2101      	movs	r1, #1
 8010722:	f001 f903 	bl	801192c <ucdr_alignment>
 8010726:	4420      	add	r0, r4
 8010728:	3001      	adds	r0, #1
 801072a:	bd10      	pop	{r4, pc}
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop

08010730 <_HazardLightsReport__max_serialized_size>:
 8010730:	b510      	push	{r4, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	2401      	movs	r4, #1
 8010736:	2100      	movs	r1, #0
 8010738:	f10d 0007 	add.w	r0, sp, #7
 801073c:	f88d 4007 	strb.w	r4, [sp, #7]
 8010740:	f000 fa1e 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8010744:	4621      	mov	r1, r4
 8010746:	4604      	mov	r4, r0
 8010748:	f001 f8f0 	bl	801192c <ucdr_alignment>
 801074c:	4420      	add	r0, r4
 801074e:	3001      	adds	r0, #1
 8010750:	b002      	add	sp, #8
 8010752:	bd10      	pop	{r4, pc}

08010754 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010754:	4800      	ldr	r0, [pc, #0]	@ (8010758 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 8010756:	4770      	bx	lr
 8010758:	24000c84 	.word	0x24000c84

0801075c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	b158      	cbz	r0, 8010778 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 8010760:	460d      	mov	r5, r1
 8010762:	f000 f9bd 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010766:	2104      	movs	r1, #4
 8010768:	182c      	adds	r4, r5, r0
 801076a:	f1c5 0504 	rsb	r5, r5, #4
 801076e:	4620      	mov	r0, r4
 8010770:	f001 f8dc 	bl	801192c <ucdr_alignment>
 8010774:	4428      	add	r0, r5
 8010776:	4420      	add	r0, r4
 8010778:	bd38      	pop	{r3, r4, r5, pc}
 801077a:	bf00      	nop

0801077c <_SteeringReport__cdr_deserialize>:
 801077c:	b538      	push	{r3, r4, r5, lr}
 801077e:	460c      	mov	r4, r1
 8010780:	b179      	cbz	r1, 80107a2 <_SteeringReport__cdr_deserialize+0x26>
 8010782:	4605      	mov	r5, r0
 8010784:	f000 fa10 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010788:	4603      	mov	r3, r0
 801078a:	4621      	mov	r1, r4
 801078c:	4628      	mov	r0, r5
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	4798      	blx	r3
 8010794:	f104 0108 	add.w	r1, r4, #8
 8010798:	4628      	mov	r0, r5
 801079a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801079e:	f000 be77 	b.w	8011490 <ucdr_deserialize_float>
 80107a2:	4608      	mov	r0, r1
 80107a4:	bd38      	pop	{r3, r4, r5, pc}
 80107a6:	bf00      	nop

080107a8 <_SteeringReport__cdr_serialize>:
 80107a8:	b188      	cbz	r0, 80107ce <_SteeringReport__cdr_serialize+0x26>
 80107aa:	b538      	push	{r3, r4, r5, lr}
 80107ac:	4604      	mov	r4, r0
 80107ae:	460d      	mov	r5, r1
 80107b0:	f000 f9fa 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80107b4:	4603      	mov	r3, r0
 80107b6:	4629      	mov	r1, r5
 80107b8:	4620      	mov	r0, r4
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	4798      	blx	r3
 80107c0:	ed94 0a02 	vldr	s0, [r4, #8]
 80107c4:	4628      	mov	r0, r5
 80107c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107ca:	f000 bdc9 	b.w	8011360 <ucdr_serialize_float>
 80107ce:	4770      	bx	lr

080107d0 <_SteeringReport__get_serialized_size>:
 80107d0:	b150      	cbz	r0, 80107e8 <_SteeringReport__get_serialized_size+0x18>
 80107d2:	2100      	movs	r1, #0
 80107d4:	b510      	push	{r4, lr}
 80107d6:	f000 f983 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 80107da:	4604      	mov	r4, r0
 80107dc:	2104      	movs	r1, #4
 80107de:	f001 f8a5 	bl	801192c <ucdr_alignment>
 80107e2:	4420      	add	r0, r4
 80107e4:	3004      	adds	r0, #4
 80107e6:	bd10      	pop	{r4, pc}
 80107e8:	4770      	bx	lr
 80107ea:	bf00      	nop

080107ec <_SteeringReport__max_serialized_size>:
 80107ec:	b510      	push	{r4, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	2301      	movs	r3, #1
 80107f2:	2100      	movs	r1, #0
 80107f4:	f10d 0007 	add.w	r0, sp, #7
 80107f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80107fc:	f000 f9c0 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8010800:	4604      	mov	r4, r0
 8010802:	2104      	movs	r1, #4
 8010804:	f001 f892 	bl	801192c <ucdr_alignment>
 8010808:	4420      	add	r0, r4
 801080a:	3004      	adds	r0, #4
 801080c:	b002      	add	sp, #8
 801080e:	bd10      	pop	{r4, pc}

08010810 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8010810:	4800      	ldr	r0, [pc, #0]	@ (8010814 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 8010812:	4770      	bx	lr
 8010814:	24000cac 	.word	0x24000cac

08010818 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010818:	b538      	push	{r3, r4, r5, lr}
 801081a:	b158      	cbz	r0, 8010834 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 801081c:	460d      	mov	r5, r1
 801081e:	f000 f95f 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010822:	2101      	movs	r1, #1
 8010824:	182c      	adds	r4, r5, r0
 8010826:	f1c5 0501 	rsb	r5, r5, #1
 801082a:	4620      	mov	r0, r4
 801082c:	f001 f87e 	bl	801192c <ucdr_alignment>
 8010830:	4428      	add	r0, r5
 8010832:	4420      	add	r0, r4
 8010834:	bd38      	pop	{r3, r4, r5, pc}
 8010836:	bf00      	nop

08010838 <_TurnIndicatorsCommand__cdr_deserialize>:
 8010838:	b538      	push	{r3, r4, r5, lr}
 801083a:	460c      	mov	r4, r1
 801083c:	b179      	cbz	r1, 801085e <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 801083e:	4605      	mov	r5, r0
 8010840:	f000 f9b2 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010844:	4603      	mov	r3, r0
 8010846:	4621      	mov	r1, r4
 8010848:	4628      	mov	r0, r5
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	68db      	ldr	r3, [r3, #12]
 801084e:	4798      	blx	r3
 8010850:	f104 0108 	add.w	r1, r4, #8
 8010854:	4628      	mov	r0, r5
 8010856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801085a:	f000 b9ed 	b.w	8010c38 <ucdr_deserialize_uint8_t>
 801085e:	4608      	mov	r0, r1
 8010860:	bd38      	pop	{r3, r4, r5, pc}
 8010862:	bf00      	nop

08010864 <_TurnIndicatorsCommand__cdr_serialize>:
 8010864:	b180      	cbz	r0, 8010888 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 8010866:	b538      	push	{r3, r4, r5, lr}
 8010868:	4604      	mov	r4, r0
 801086a:	460d      	mov	r5, r1
 801086c:	f000 f99c 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010870:	4603      	mov	r3, r0
 8010872:	4629      	mov	r1, r5
 8010874:	4620      	mov	r0, r4
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	689b      	ldr	r3, [r3, #8]
 801087a:	4798      	blx	r3
 801087c:	7a21      	ldrb	r1, [r4, #8]
 801087e:	4628      	mov	r0, r5
 8010880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010884:	f000 b9c2 	b.w	8010c0c <ucdr_serialize_uint8_t>
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop

0801088c <_TurnIndicatorsCommand__get_serialized_size>:
 801088c:	b150      	cbz	r0, 80108a4 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 801088e:	2100      	movs	r1, #0
 8010890:	b510      	push	{r4, lr}
 8010892:	f000 f925 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010896:	4604      	mov	r4, r0
 8010898:	2101      	movs	r1, #1
 801089a:	f001 f847 	bl	801192c <ucdr_alignment>
 801089e:	4420      	add	r0, r4
 80108a0:	3001      	adds	r0, #1
 80108a2:	bd10      	pop	{r4, pc}
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop

080108a8 <_TurnIndicatorsCommand__max_serialized_size>:
 80108a8:	b510      	push	{r4, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	2401      	movs	r4, #1
 80108ae:	2100      	movs	r1, #0
 80108b0:	f10d 0007 	add.w	r0, sp, #7
 80108b4:	f88d 4007 	strb.w	r4, [sp, #7]
 80108b8:	f000 f962 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 80108bc:	4621      	mov	r1, r4
 80108be:	4604      	mov	r4, r0
 80108c0:	f001 f834 	bl	801192c <ucdr_alignment>
 80108c4:	4420      	add	r0, r4
 80108c6:	3001      	adds	r0, #1
 80108c8:	b002      	add	sp, #8
 80108ca:	bd10      	pop	{r4, pc}

080108cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80108cc:	4800      	ldr	r0, [pc, #0]	@ (80108d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 80108ce:	4770      	bx	lr
 80108d0:	24000cd4 	.word	0x24000cd4

080108d4 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 80108d4:	b538      	push	{r3, r4, r5, lr}
 80108d6:	b158      	cbz	r0, 80108f0 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 80108d8:	460d      	mov	r5, r1
 80108da:	f000 f901 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 80108de:	2101      	movs	r1, #1
 80108e0:	182c      	adds	r4, r5, r0
 80108e2:	f1c5 0501 	rsb	r5, r5, #1
 80108e6:	4620      	mov	r0, r4
 80108e8:	f001 f820 	bl	801192c <ucdr_alignment>
 80108ec:	4428      	add	r0, r5
 80108ee:	4420      	add	r0, r4
 80108f0:	bd38      	pop	{r3, r4, r5, pc}
 80108f2:	bf00      	nop

080108f4 <_TurnIndicatorsReport__cdr_deserialize>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	460c      	mov	r4, r1
 80108f8:	b179      	cbz	r1, 801091a <_TurnIndicatorsReport__cdr_deserialize+0x26>
 80108fa:	4605      	mov	r5, r0
 80108fc:	f000 f954 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010900:	4603      	mov	r3, r0
 8010902:	4621      	mov	r1, r4
 8010904:	4628      	mov	r0, r5
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	68db      	ldr	r3, [r3, #12]
 801090a:	4798      	blx	r3
 801090c:	f104 0108 	add.w	r1, r4, #8
 8010910:	4628      	mov	r0, r5
 8010912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010916:	f000 b98f 	b.w	8010c38 <ucdr_deserialize_uint8_t>
 801091a:	4608      	mov	r0, r1
 801091c:	bd38      	pop	{r3, r4, r5, pc}
 801091e:	bf00      	nop

08010920 <_TurnIndicatorsReport__cdr_serialize>:
 8010920:	b180      	cbz	r0, 8010944 <_TurnIndicatorsReport__cdr_serialize+0x24>
 8010922:	b538      	push	{r3, r4, r5, lr}
 8010924:	4604      	mov	r4, r0
 8010926:	460d      	mov	r5, r1
 8010928:	f000 f93e 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801092c:	4603      	mov	r3, r0
 801092e:	4629      	mov	r1, r5
 8010930:	4620      	mov	r0, r4
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	689b      	ldr	r3, [r3, #8]
 8010936:	4798      	blx	r3
 8010938:	7a21      	ldrb	r1, [r4, #8]
 801093a:	4628      	mov	r0, r5
 801093c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010940:	f000 b964 	b.w	8010c0c <ucdr_serialize_uint8_t>
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop

08010948 <_TurnIndicatorsReport__get_serialized_size>:
 8010948:	b150      	cbz	r0, 8010960 <_TurnIndicatorsReport__get_serialized_size+0x18>
 801094a:	2100      	movs	r1, #0
 801094c:	b510      	push	{r4, lr}
 801094e:	f000 f8c7 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010952:	4604      	mov	r4, r0
 8010954:	2101      	movs	r1, #1
 8010956:	f000 ffe9 	bl	801192c <ucdr_alignment>
 801095a:	4420      	add	r0, r4
 801095c:	3001      	adds	r0, #1
 801095e:	bd10      	pop	{r4, pc}
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop

08010964 <_TurnIndicatorsReport__max_serialized_size>:
 8010964:	b510      	push	{r4, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	2401      	movs	r4, #1
 801096a:	2100      	movs	r1, #0
 801096c:	f10d 0007 	add.w	r0, sp, #7
 8010970:	f88d 4007 	strb.w	r4, [sp, #7]
 8010974:	f000 f904 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8010978:	4621      	mov	r1, r4
 801097a:	4604      	mov	r4, r0
 801097c:	f000 ffd6 	bl	801192c <ucdr_alignment>
 8010980:	4420      	add	r0, r4
 8010982:	3001      	adds	r0, #1
 8010984:	b002      	add	sp, #8
 8010986:	bd10      	pop	{r4, pc}

08010988 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010988:	4800      	ldr	r0, [pc, #0]	@ (801098c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 801098a:	4770      	bx	lr
 801098c:	24000cfc 	.word	0x24000cfc

08010990 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 8010990:	b1c8      	cbz	r0, 80109c6 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 8010992:	b570      	push	{r4, r5, r6, lr}
 8010994:	460d      	mov	r5, r1
 8010996:	f001 f8e3 	bl	8011b60 <get_serialized_size_std_msgs__msg__Header>
 801099a:	2104      	movs	r1, #4
 801099c:	182e      	adds	r6, r5, r0
 801099e:	f1c5 0504 	rsb	r5, r5, #4
 80109a2:	4630      	mov	r0, r6
 80109a4:	f000 ffc2 	bl	801192c <ucdr_alignment>
 80109a8:	2104      	movs	r1, #4
 80109aa:	1844      	adds	r4, r0, r1
 80109ac:	4434      	add	r4, r6
 80109ae:	4620      	mov	r0, r4
 80109b0:	f000 ffbc 	bl	801192c <ucdr_alignment>
 80109b4:	2104      	movs	r1, #4
 80109b6:	4408      	add	r0, r1
 80109b8:	4404      	add	r4, r0
 80109ba:	4620      	mov	r0, r4
 80109bc:	f000 ffb6 	bl	801192c <ucdr_alignment>
 80109c0:	4428      	add	r0, r5
 80109c2:	4420      	add	r0, r4
 80109c4:	bd70      	pop	{r4, r5, r6, pc}
 80109c6:	4770      	bx	lr

080109c8 <_VelocityReport__cdr_deserialize>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	460c      	mov	r4, r1
 80109cc:	b1c9      	cbz	r1, 8010a02 <_VelocityReport__cdr_deserialize+0x3a>
 80109ce:	4605      	mov	r5, r0
 80109d0:	f001 f94a 	bl	8011c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80109d4:	4603      	mov	r3, r0
 80109d6:	4621      	mov	r1, r4
 80109d8:	4628      	mov	r0, r5
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	4798      	blx	r3
 80109e0:	f104 0114 	add.w	r1, r4, #20
 80109e4:	4628      	mov	r0, r5
 80109e6:	f000 fd53 	bl	8011490 <ucdr_deserialize_float>
 80109ea:	f104 0118 	add.w	r1, r4, #24
 80109ee:	4628      	mov	r0, r5
 80109f0:	f000 fd4e 	bl	8011490 <ucdr_deserialize_float>
 80109f4:	f104 011c 	add.w	r1, r4, #28
 80109f8:	4628      	mov	r0, r5
 80109fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109fe:	f000 bd47 	b.w	8011490 <ucdr_deserialize_float>
 8010a02:	4608      	mov	r0, r1
 8010a04:	bd38      	pop	{r3, r4, r5, pc}
 8010a06:	bf00      	nop

08010a08 <_VelocityReport__cdr_serialize>:
 8010a08:	b1d8      	cbz	r0, 8010a42 <_VelocityReport__cdr_serialize+0x3a>
 8010a0a:	b538      	push	{r3, r4, r5, lr}
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	460d      	mov	r5, r1
 8010a10:	f001 f92a 	bl	8011c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010a14:	4603      	mov	r3, r0
 8010a16:	4629      	mov	r1, r5
 8010a18:	4620      	mov	r0, r4
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	689b      	ldr	r3, [r3, #8]
 8010a1e:	4798      	blx	r3
 8010a20:	ed94 0a05 	vldr	s0, [r4, #20]
 8010a24:	4628      	mov	r0, r5
 8010a26:	f000 fc9b 	bl	8011360 <ucdr_serialize_float>
 8010a2a:	ed94 0a06 	vldr	s0, [r4, #24]
 8010a2e:	4628      	mov	r0, r5
 8010a30:	f000 fc96 	bl	8011360 <ucdr_serialize_float>
 8010a34:	ed94 0a07 	vldr	s0, [r4, #28]
 8010a38:	4628      	mov	r0, r5
 8010a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a3e:	f000 bc8f 	b.w	8011360 <ucdr_serialize_float>
 8010a42:	4770      	bx	lr

08010a44 <_VelocityReport__get_serialized_size>:
 8010a44:	b1b0      	cbz	r0, 8010a74 <_VelocityReport__get_serialized_size+0x30>
 8010a46:	2100      	movs	r1, #0
 8010a48:	b510      	push	{r4, lr}
 8010a4a:	f001 f889 	bl	8011b60 <get_serialized_size_std_msgs__msg__Header>
 8010a4e:	4604      	mov	r4, r0
 8010a50:	2104      	movs	r1, #4
 8010a52:	f000 ff6b 	bl	801192c <ucdr_alignment>
 8010a56:	2104      	movs	r1, #4
 8010a58:	4420      	add	r0, r4
 8010a5a:	1844      	adds	r4, r0, r1
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	f000 ff65 	bl	801192c <ucdr_alignment>
 8010a62:	2104      	movs	r1, #4
 8010a64:	4408      	add	r0, r1
 8010a66:	4404      	add	r4, r0
 8010a68:	4620      	mov	r0, r4
 8010a6a:	f000 ff5f 	bl	801192c <ucdr_alignment>
 8010a6e:	3004      	adds	r0, #4
 8010a70:	4420      	add	r0, r4
 8010a72:	bd10      	pop	{r4, pc}
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop

08010a78 <_VelocityReport__max_serialized_size>:
 8010a78:	b510      	push	{r4, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	2100      	movs	r1, #0
 8010a80:	f10d 0007 	add.w	r0, sp, #7
 8010a84:	f88d 3007 	strb.w	r3, [sp, #7]
 8010a88:	f001 f8e4 	bl	8011c54 <max_serialized_size_std_msgs__msg__Header>
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	2104      	movs	r1, #4
 8010a90:	f000 ff4c 	bl	801192c <ucdr_alignment>
 8010a94:	2104      	movs	r1, #4
 8010a96:	4420      	add	r0, r4
 8010a98:	1844      	adds	r4, r0, r1
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	f000 ff46 	bl	801192c <ucdr_alignment>
 8010aa0:	2104      	movs	r1, #4
 8010aa2:	4408      	add	r0, r1
 8010aa4:	4404      	add	r4, r0
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f000 ff40 	bl	801192c <ucdr_alignment>
 8010aac:	3004      	adds	r0, #4
 8010aae:	4420      	add	r0, r4
 8010ab0:	b002      	add	sp, #8
 8010ab2:	bd10      	pop	{r4, pc}

08010ab4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8010ab4:	4800      	ldr	r0, [pc, #0]	@ (8010ab8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 8010ab6:	4770      	bx	lr
 8010ab8:	24000d24 	.word	0x24000d24

08010abc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8010abc:	f001 bcac 	b.w	8012418 <builtin_interfaces__msg__Time__init>

08010ac0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8010ac0:	f001 bcae 	b.w	8012420 <builtin_interfaces__msg__Time__fini>

08010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010ac4:	4b04      	ldr	r3, [pc, #16]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	b10a      	cbz	r2, 8010ace <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8010aca:	4803      	ldr	r0, [pc, #12]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010acc:	4770      	bx	lr
 8010ace:	4a03      	ldr	r2, [pc, #12]	@ (8010adc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8010ad0:	4801      	ldr	r0, [pc, #4]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010ad2:	6812      	ldr	r2, [r2, #0]
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	4770      	bx	lr
 8010ad8:	24000dc4 	.word	0x24000dc4
 8010adc:	24000e10 	.word	0x24000e10

08010ae0 <get_serialized_size_builtin_interfaces__msg__Time>:
 8010ae0:	b180      	cbz	r0, 8010b04 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8010ae2:	b538      	push	{r3, r4, r5, lr}
 8010ae4:	460d      	mov	r5, r1
 8010ae6:	2104      	movs	r1, #4
 8010ae8:	4628      	mov	r0, r5
 8010aea:	f000 ff1f 	bl	801192c <ucdr_alignment>
 8010aee:	1d2b      	adds	r3, r5, #4
 8010af0:	f1c5 0504 	rsb	r5, r5, #4
 8010af4:	2104      	movs	r1, #4
 8010af6:	181c      	adds	r4, r3, r0
 8010af8:	4620      	mov	r0, r4
 8010afa:	f000 ff17 	bl	801192c <ucdr_alignment>
 8010afe:	4428      	add	r0, r5
 8010b00:	4420      	add	r0, r4
 8010b02:	bd38      	pop	{r3, r4, r5, pc}
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop

08010b08 <_Time__cdr_deserialize>:
 8010b08:	b538      	push	{r3, r4, r5, lr}
 8010b0a:	460c      	mov	r4, r1
 8010b0c:	b141      	cbz	r1, 8010b20 <_Time__cdr_deserialize+0x18>
 8010b0e:	4605      	mov	r5, r0
 8010b10:	f000 fb96 	bl	8011240 <ucdr_deserialize_int32_t>
 8010b14:	1d21      	adds	r1, r4, #4
 8010b16:	4628      	mov	r0, r5
 8010b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b1c:	f000 b9d2 	b.w	8010ec4 <ucdr_deserialize_uint32_t>
 8010b20:	4608      	mov	r0, r1
 8010b22:	bd38      	pop	{r3, r4, r5, pc}

08010b24 <_Time__cdr_serialize>:
 8010b24:	b160      	cbz	r0, 8010b40 <_Time__cdr_serialize+0x1c>
 8010b26:	b538      	push	{r3, r4, r5, lr}
 8010b28:	460d      	mov	r5, r1
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	6801      	ldr	r1, [r0, #0]
 8010b2e:	4628      	mov	r0, r5
 8010b30:	f000 faee 	bl	8011110 <ucdr_serialize_int32_t>
 8010b34:	6861      	ldr	r1, [r4, #4]
 8010b36:	4628      	mov	r0, r5
 8010b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b3c:	f000 b892 	b.w	8010c64 <ucdr_serialize_uint32_t>
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop

08010b44 <_Time__get_serialized_size>:
 8010b44:	b160      	cbz	r0, 8010b60 <_Time__get_serialized_size+0x1c>
 8010b46:	2104      	movs	r1, #4
 8010b48:	2000      	movs	r0, #0
 8010b4a:	b510      	push	{r4, lr}
 8010b4c:	f000 feee 	bl	801192c <ucdr_alignment>
 8010b50:	2104      	movs	r1, #4
 8010b52:	1844      	adds	r4, r0, r1
 8010b54:	4620      	mov	r0, r4
 8010b56:	f000 fee9 	bl	801192c <ucdr_alignment>
 8010b5a:	3004      	adds	r0, #4
 8010b5c:	4420      	add	r0, r4
 8010b5e:	bd10      	pop	{r4, pc}
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop

08010b64 <_Time__max_serialized_size>:
 8010b64:	b510      	push	{r4, lr}
 8010b66:	2104      	movs	r1, #4
 8010b68:	2000      	movs	r0, #0
 8010b6a:	f000 fedf 	bl	801192c <ucdr_alignment>
 8010b6e:	2104      	movs	r1, #4
 8010b70:	1844      	adds	r4, r0, r1
 8010b72:	4620      	mov	r0, r4
 8010b74:	f000 feda 	bl	801192c <ucdr_alignment>
 8010b78:	3004      	adds	r0, #4
 8010b7a:	4420      	add	r0, r4
 8010b7c:	bd10      	pop	{r4, pc}
 8010b7e:	bf00      	nop

08010b80 <max_serialized_size_builtin_interfaces__msg__Time>:
 8010b80:	b538      	push	{r3, r4, r5, lr}
 8010b82:	460c      	mov	r4, r1
 8010b84:	2301      	movs	r3, #1
 8010b86:	2104      	movs	r1, #4
 8010b88:	1d25      	adds	r5, r4, #4
 8010b8a:	7003      	strb	r3, [r0, #0]
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f1c4 0404 	rsb	r4, r4, #4
 8010b92:	f000 fecb 	bl	801192c <ucdr_alignment>
 8010b96:	4405      	add	r5, r0
 8010b98:	2104      	movs	r1, #4
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	f000 fec6 	bl	801192c <ucdr_alignment>
 8010ba0:	4420      	add	r0, r4
 8010ba2:	4428      	add	r0, r5
 8010ba4:	bd38      	pop	{r3, r4, r5, pc}
 8010ba6:	bf00      	nop

08010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010ba8:	4800      	ldr	r0, [pc, #0]	@ (8010bac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8010baa:	4770      	bx	lr
 8010bac:	24000dd0 	.word	0x24000dd0

08010bb0 <ucdr_serialize_bool>:
 8010bb0:	b538      	push	{r3, r4, r5, lr}
 8010bb2:	460d      	mov	r5, r1
 8010bb4:	2101      	movs	r1, #1
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	f000 fe9c 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010bbc:	b148      	cbz	r0, 8010bd2 <ucdr_serialize_bool+0x22>
 8010bbe:	68a3      	ldr	r3, [r4, #8]
 8010bc0:	2101      	movs	r1, #1
 8010bc2:	701d      	strb	r5, [r3, #0]
 8010bc4:	68a2      	ldr	r2, [r4, #8]
 8010bc6:	6923      	ldr	r3, [r4, #16]
 8010bc8:	440a      	add	r2, r1
 8010bca:	7561      	strb	r1, [r4, #21]
 8010bcc:	440b      	add	r3, r1
 8010bce:	60a2      	str	r2, [r4, #8]
 8010bd0:	6123      	str	r3, [r4, #16]
 8010bd2:	7da0      	ldrb	r0, [r4, #22]
 8010bd4:	f080 0001 	eor.w	r0, r0, #1
 8010bd8:	bd38      	pop	{r3, r4, r5, pc}
 8010bda:	bf00      	nop

08010bdc <ucdr_deserialize_bool>:
 8010bdc:	b538      	push	{r3, r4, r5, lr}
 8010bde:	460d      	mov	r5, r1
 8010be0:	2101      	movs	r1, #1
 8010be2:	4604      	mov	r4, r0
 8010be4:	f000 fe86 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010be8:	b160      	cbz	r0, 8010c04 <ucdr_deserialize_bool+0x28>
 8010bea:	68a2      	ldr	r2, [r4, #8]
 8010bec:	2101      	movs	r1, #1
 8010bee:	6923      	ldr	r3, [r4, #16]
 8010bf0:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010bf4:	440b      	add	r3, r1
 8010bf6:	3800      	subs	r0, #0
 8010bf8:	bf18      	it	ne
 8010bfa:	2001      	movne	r0, #1
 8010bfc:	7028      	strb	r0, [r5, #0]
 8010bfe:	60a2      	str	r2, [r4, #8]
 8010c00:	6123      	str	r3, [r4, #16]
 8010c02:	7561      	strb	r1, [r4, #21]
 8010c04:	7da0      	ldrb	r0, [r4, #22]
 8010c06:	f080 0001 	eor.w	r0, r0, #1
 8010c0a:	bd38      	pop	{r3, r4, r5, pc}

08010c0c <ucdr_serialize_uint8_t>:
 8010c0c:	b538      	push	{r3, r4, r5, lr}
 8010c0e:	460d      	mov	r5, r1
 8010c10:	2101      	movs	r1, #1
 8010c12:	4604      	mov	r4, r0
 8010c14:	f000 fe6e 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010c18:	b148      	cbz	r0, 8010c2e <ucdr_serialize_uint8_t+0x22>
 8010c1a:	68a3      	ldr	r3, [r4, #8]
 8010c1c:	2101      	movs	r1, #1
 8010c1e:	701d      	strb	r5, [r3, #0]
 8010c20:	68a2      	ldr	r2, [r4, #8]
 8010c22:	6923      	ldr	r3, [r4, #16]
 8010c24:	440a      	add	r2, r1
 8010c26:	7561      	strb	r1, [r4, #21]
 8010c28:	440b      	add	r3, r1
 8010c2a:	60a2      	str	r2, [r4, #8]
 8010c2c:	6123      	str	r3, [r4, #16]
 8010c2e:	7da0      	ldrb	r0, [r4, #22]
 8010c30:	f080 0001 	eor.w	r0, r0, #1
 8010c34:	bd38      	pop	{r3, r4, r5, pc}
 8010c36:	bf00      	nop

08010c38 <ucdr_deserialize_uint8_t>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	460d      	mov	r5, r1
 8010c3c:	2101      	movs	r1, #1
 8010c3e:	4604      	mov	r4, r0
 8010c40:	f000 fe58 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010c44:	b150      	cbz	r0, 8010c5c <ucdr_deserialize_uint8_t+0x24>
 8010c46:	68a3      	ldr	r3, [r4, #8]
 8010c48:	2101      	movs	r1, #1
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	702b      	strb	r3, [r5, #0]
 8010c4e:	68a2      	ldr	r2, [r4, #8]
 8010c50:	6923      	ldr	r3, [r4, #16]
 8010c52:	440a      	add	r2, r1
 8010c54:	7561      	strb	r1, [r4, #21]
 8010c56:	440b      	add	r3, r1
 8010c58:	60a2      	str	r2, [r4, #8]
 8010c5a:	6123      	str	r3, [r4, #16]
 8010c5c:	7da0      	ldrb	r0, [r4, #22]
 8010c5e:	f080 0001 	eor.w	r0, r0, #1
 8010c62:	bd38      	pop	{r3, r4, r5, pc}

08010c64 <ucdr_serialize_uint32_t>:
 8010c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c68:	b082      	sub	sp, #8
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	9101      	str	r1, [sp, #4]
 8010c6e:	2104      	movs	r1, #4
 8010c70:	f000 fe64 	bl	801193c <ucdr_buffer_alignment>
 8010c74:	4601      	mov	r1, r0
 8010c76:	4620      	mov	r0, r4
 8010c78:	7d67      	ldrb	r7, [r4, #21]
 8010c7a:	f000 fea3 	bl	80119c4 <ucdr_advance_buffer>
 8010c7e:	2104      	movs	r1, #4
 8010c80:	4620      	mov	r0, r4
 8010c82:	f000 fe2b 	bl	80118dc <ucdr_check_buffer_available_for>
 8010c86:	2800      	cmp	r0, #0
 8010c88:	d139      	bne.n	8010cfe <ucdr_serialize_uint32_t+0x9a>
 8010c8a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010c8e:	42ab      	cmp	r3, r5
 8010c90:	d930      	bls.n	8010cf4 <ucdr_serialize_uint32_t+0x90>
 8010c92:	1b5e      	subs	r6, r3, r5
 8010c94:	60a3      	str	r3, [r4, #8]
 8010c96:	6923      	ldr	r3, [r4, #16]
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f1c6 0804 	rsb	r8, r6, #4
 8010c9e:	4433      	add	r3, r6
 8010ca0:	4641      	mov	r1, r8
 8010ca2:	6123      	str	r3, [r4, #16]
 8010ca4:	f000 fe26 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	d04c      	beq.n	8010d46 <ucdr_serialize_uint32_t+0xe2>
 8010cac:	7d23      	ldrb	r3, [r4, #20]
 8010cae:	2b01      	cmp	r3, #1
 8010cb0:	d063      	beq.n	8010d7a <ucdr_serialize_uint32_t+0x116>
 8010cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010cb6:	702b      	strb	r3, [r5, #0]
 8010cb8:	2e00      	cmp	r6, #0
 8010cba:	d051      	beq.n	8010d60 <ucdr_serialize_uint32_t+0xfc>
 8010cbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010cc0:	2e01      	cmp	r6, #1
 8010cc2:	706b      	strb	r3, [r5, #1]
 8010cc4:	d050      	beq.n	8010d68 <ucdr_serialize_uint32_t+0x104>
 8010cc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010cca:	2e02      	cmp	r6, #2
 8010ccc:	70ab      	strb	r3, [r5, #2]
 8010cce:	d04f      	beq.n	8010d70 <ucdr_serialize_uint32_t+0x10c>
 8010cd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010cd4:	70eb      	strb	r3, [r5, #3]
 8010cd6:	6923      	ldr	r3, [r4, #16]
 8010cd8:	2104      	movs	r1, #4
 8010cda:	68a2      	ldr	r2, [r4, #8]
 8010cdc:	3304      	adds	r3, #4
 8010cde:	7da0      	ldrb	r0, [r4, #22]
 8010ce0:	4442      	add	r2, r8
 8010ce2:	7561      	strb	r1, [r4, #21]
 8010ce4:	1b9e      	subs	r6, r3, r6
 8010ce6:	f080 0001 	eor.w	r0, r0, #1
 8010cea:	60a2      	str	r2, [r4, #8]
 8010cec:	6126      	str	r6, [r4, #16]
 8010cee:	b002      	add	sp, #8
 8010cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cf4:	2104      	movs	r1, #4
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f000 fdfc 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010cfc:	b1d0      	cbz	r0, 8010d34 <ucdr_serialize_uint32_t+0xd0>
 8010cfe:	7d23      	ldrb	r3, [r4, #20]
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	68a3      	ldr	r3, [r4, #8]
 8010d04:	d01c      	beq.n	8010d40 <ucdr_serialize_uint32_t+0xdc>
 8010d06:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010d0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d0e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010d12:	7018      	strb	r0, [r3, #0]
 8010d14:	68a3      	ldr	r3, [r4, #8]
 8010d16:	705a      	strb	r2, [r3, #1]
 8010d18:	68a3      	ldr	r3, [r4, #8]
 8010d1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d1e:	7099      	strb	r1, [r3, #2]
 8010d20:	68a3      	ldr	r3, [r4, #8]
 8010d22:	70da      	strb	r2, [r3, #3]
 8010d24:	2104      	movs	r1, #4
 8010d26:	68a2      	ldr	r2, [r4, #8]
 8010d28:	6923      	ldr	r3, [r4, #16]
 8010d2a:	440a      	add	r2, r1
 8010d2c:	7561      	strb	r1, [r4, #21]
 8010d2e:	440b      	add	r3, r1
 8010d30:	60a2      	str	r2, [r4, #8]
 8010d32:	6123      	str	r3, [r4, #16]
 8010d34:	7da0      	ldrb	r0, [r4, #22]
 8010d36:	f080 0001 	eor.w	r0, r0, #1
 8010d3a:	b002      	add	sp, #8
 8010d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d40:	9a01      	ldr	r2, [sp, #4]
 8010d42:	601a      	str	r2, [r3, #0]
 8010d44:	e7ee      	b.n	8010d24 <ucdr_serialize_uint32_t+0xc0>
 8010d46:	68a2      	ldr	r2, [r4, #8]
 8010d48:	6923      	ldr	r3, [r4, #16]
 8010d4a:	7da0      	ldrb	r0, [r4, #22]
 8010d4c:	1b92      	subs	r2, r2, r6
 8010d4e:	1b9b      	subs	r3, r3, r6
 8010d50:	7567      	strb	r7, [r4, #21]
 8010d52:	f080 0001 	eor.w	r0, r0, #1
 8010d56:	60a2      	str	r2, [r4, #8]
 8010d58:	6123      	str	r3, [r4, #16]
 8010d5a:	b002      	add	sp, #8
 8010d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d60:	68a3      	ldr	r3, [r4, #8]
 8010d62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d66:	701a      	strb	r2, [r3, #0]
 8010d68:	68a3      	ldr	r3, [r4, #8]
 8010d6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010d6e:	701a      	strb	r2, [r3, #0]
 8010d70:	68a3      	ldr	r3, [r4, #8]
 8010d72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d76:	701a      	strb	r2, [r3, #0]
 8010d78:	e7ad      	b.n	8010cd6 <ucdr_serialize_uint32_t+0x72>
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	ad01      	add	r5, sp, #4
 8010d7e:	4632      	mov	r2, r6
 8010d80:	4629      	mov	r1, r5
 8010d82:	f002 fa3a 	bl	80131fa <memcpy>
 8010d86:	4642      	mov	r2, r8
 8010d88:	19a9      	adds	r1, r5, r6
 8010d8a:	68a0      	ldr	r0, [r4, #8]
 8010d8c:	f002 fa35 	bl	80131fa <memcpy>
 8010d90:	e7a1      	b.n	8010cd6 <ucdr_serialize_uint32_t+0x72>
 8010d92:	bf00      	nop

08010d94 <ucdr_serialize_endian_uint32_t>:
 8010d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d98:	4604      	mov	r4, r0
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	460d      	mov	r5, r1
 8010d9e:	2104      	movs	r1, #4
 8010da0:	9201      	str	r2, [sp, #4]
 8010da2:	f000 fdcb 	bl	801193c <ucdr_buffer_alignment>
 8010da6:	4601      	mov	r1, r0
 8010da8:	4620      	mov	r0, r4
 8010daa:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010dae:	f000 fe09 	bl	80119c4 <ucdr_advance_buffer>
 8010db2:	2104      	movs	r1, #4
 8010db4:	4620      	mov	r0, r4
 8010db6:	f000 fd91 	bl	80118dc <ucdr_check_buffer_available_for>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d138      	bne.n	8010e30 <ucdr_serialize_endian_uint32_t+0x9c>
 8010dbe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010dc2:	42b7      	cmp	r7, r6
 8010dc4:	d92f      	bls.n	8010e26 <ucdr_serialize_endian_uint32_t+0x92>
 8010dc6:	6923      	ldr	r3, [r4, #16]
 8010dc8:	4620      	mov	r0, r4
 8010dca:	60a7      	str	r7, [r4, #8]
 8010dcc:	1bbf      	subs	r7, r7, r6
 8010dce:	443b      	add	r3, r7
 8010dd0:	f1c7 0904 	rsb	r9, r7, #4
 8010dd4:	6123      	str	r3, [r4, #16]
 8010dd6:	4649      	mov	r1, r9
 8010dd8:	f000 fd8c 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	d04a      	beq.n	8010e76 <ucdr_serialize_endian_uint32_t+0xe2>
 8010de0:	2d01      	cmp	r5, #1
 8010de2:	d063      	beq.n	8010eac <ucdr_serialize_endian_uint32_t+0x118>
 8010de4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010de8:	7033      	strb	r3, [r6, #0]
 8010dea:	2f00      	cmp	r7, #0
 8010dec:	d051      	beq.n	8010e92 <ucdr_serialize_endian_uint32_t+0xfe>
 8010dee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010df2:	2f01      	cmp	r7, #1
 8010df4:	7073      	strb	r3, [r6, #1]
 8010df6:	d050      	beq.n	8010e9a <ucdr_serialize_endian_uint32_t+0x106>
 8010df8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010dfc:	2f02      	cmp	r7, #2
 8010dfe:	70b3      	strb	r3, [r6, #2]
 8010e00:	d04f      	beq.n	8010ea2 <ucdr_serialize_endian_uint32_t+0x10e>
 8010e02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010e06:	70f3      	strb	r3, [r6, #3]
 8010e08:	6923      	ldr	r3, [r4, #16]
 8010e0a:	2104      	movs	r1, #4
 8010e0c:	68a2      	ldr	r2, [r4, #8]
 8010e0e:	7da0      	ldrb	r0, [r4, #22]
 8010e10:	3304      	adds	r3, #4
 8010e12:	444a      	add	r2, r9
 8010e14:	7561      	strb	r1, [r4, #21]
 8010e16:	1bdb      	subs	r3, r3, r7
 8010e18:	f080 0001 	eor.w	r0, r0, #1
 8010e1c:	60a2      	str	r2, [r4, #8]
 8010e1e:	6123      	str	r3, [r4, #16]
 8010e20:	b003      	add	sp, #12
 8010e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e26:	2104      	movs	r1, #4
 8010e28:	4620      	mov	r0, r4
 8010e2a:	f000 fd63 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010e2e:	b1c8      	cbz	r0, 8010e64 <ucdr_serialize_endian_uint32_t+0xd0>
 8010e30:	2d01      	cmp	r5, #1
 8010e32:	68a3      	ldr	r3, [r4, #8]
 8010e34:	d01c      	beq.n	8010e70 <ucdr_serialize_endian_uint32_t+0xdc>
 8010e36:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010e3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e3e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010e42:	7018      	strb	r0, [r3, #0]
 8010e44:	68a3      	ldr	r3, [r4, #8]
 8010e46:	705a      	strb	r2, [r3, #1]
 8010e48:	68a3      	ldr	r3, [r4, #8]
 8010e4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010e4e:	7099      	strb	r1, [r3, #2]
 8010e50:	68a3      	ldr	r3, [r4, #8]
 8010e52:	70da      	strb	r2, [r3, #3]
 8010e54:	2104      	movs	r1, #4
 8010e56:	68a2      	ldr	r2, [r4, #8]
 8010e58:	6923      	ldr	r3, [r4, #16]
 8010e5a:	440a      	add	r2, r1
 8010e5c:	7561      	strb	r1, [r4, #21]
 8010e5e:	440b      	add	r3, r1
 8010e60:	60a2      	str	r2, [r4, #8]
 8010e62:	6123      	str	r3, [r4, #16]
 8010e64:	7da0      	ldrb	r0, [r4, #22]
 8010e66:	f080 0001 	eor.w	r0, r0, #1
 8010e6a:	b003      	add	sp, #12
 8010e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e70:	9a01      	ldr	r2, [sp, #4]
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	e7ee      	b.n	8010e54 <ucdr_serialize_endian_uint32_t+0xc0>
 8010e76:	68a2      	ldr	r2, [r4, #8]
 8010e78:	6923      	ldr	r3, [r4, #16]
 8010e7a:	7da0      	ldrb	r0, [r4, #22]
 8010e7c:	1bd2      	subs	r2, r2, r7
 8010e7e:	1bdb      	subs	r3, r3, r7
 8010e80:	f884 8015 	strb.w	r8, [r4, #21]
 8010e84:	f080 0001 	eor.w	r0, r0, #1
 8010e88:	60a2      	str	r2, [r4, #8]
 8010e8a:	6123      	str	r3, [r4, #16]
 8010e8c:	b003      	add	sp, #12
 8010e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e92:	68a3      	ldr	r3, [r4, #8]
 8010e94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e98:	701a      	strb	r2, [r3, #0]
 8010e9a:	68a3      	ldr	r3, [r4, #8]
 8010e9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010ea0:	701a      	strb	r2, [r3, #0]
 8010ea2:	68a3      	ldr	r3, [r4, #8]
 8010ea4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010ea8:	701a      	strb	r2, [r3, #0]
 8010eaa:	e7ad      	b.n	8010e08 <ucdr_serialize_endian_uint32_t+0x74>
 8010eac:	ad01      	add	r5, sp, #4
 8010eae:	463a      	mov	r2, r7
 8010eb0:	4630      	mov	r0, r6
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	f002 f9a1 	bl	80131fa <memcpy>
 8010eb8:	464a      	mov	r2, r9
 8010eba:	19e9      	adds	r1, r5, r7
 8010ebc:	68a0      	ldr	r0, [r4, #8]
 8010ebe:	f002 f99c 	bl	80131fa <memcpy>
 8010ec2:	e7a1      	b.n	8010e08 <ucdr_serialize_endian_uint32_t+0x74>

08010ec4 <ucdr_deserialize_uint32_t>:
 8010ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ec8:	4604      	mov	r4, r0
 8010eca:	460d      	mov	r5, r1
 8010ecc:	2104      	movs	r1, #4
 8010ece:	f000 fd35 	bl	801193c <ucdr_buffer_alignment>
 8010ed2:	4601      	mov	r1, r0
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010eda:	f000 fd73 	bl	80119c4 <ucdr_advance_buffer>
 8010ede:	2104      	movs	r1, #4
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f000 fcfb 	bl	80118dc <ucdr_check_buffer_available_for>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	d138      	bne.n	8010f5c <ucdr_deserialize_uint32_t+0x98>
 8010eea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010eee:	42b7      	cmp	r7, r6
 8010ef0:	d92f      	bls.n	8010f52 <ucdr_deserialize_uint32_t+0x8e>
 8010ef2:	6923      	ldr	r3, [r4, #16]
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	60a7      	str	r7, [r4, #8]
 8010ef8:	1bbf      	subs	r7, r7, r6
 8010efa:	443b      	add	r3, r7
 8010efc:	f1c7 0904 	rsb	r9, r7, #4
 8010f00:	6123      	str	r3, [r4, #16]
 8010f02:	4649      	mov	r1, r9
 8010f04:	f000 fcf6 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d046      	beq.n	8010f9a <ucdr_deserialize_uint32_t+0xd6>
 8010f0c:	7d23      	ldrb	r3, [r4, #20]
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d05c      	beq.n	8010fcc <ucdr_deserialize_uint32_t+0x108>
 8010f12:	78f3      	ldrb	r3, [r6, #3]
 8010f14:	702b      	strb	r3, [r5, #0]
 8010f16:	2f00      	cmp	r7, #0
 8010f18:	d04c      	beq.n	8010fb4 <ucdr_deserialize_uint32_t+0xf0>
 8010f1a:	78b3      	ldrb	r3, [r6, #2]
 8010f1c:	2f01      	cmp	r7, #1
 8010f1e:	706b      	strb	r3, [r5, #1]
 8010f20:	f105 0302 	add.w	r3, r5, #2
 8010f24:	d04a      	beq.n	8010fbc <ucdr_deserialize_uint32_t+0xf8>
 8010f26:	7873      	ldrb	r3, [r6, #1]
 8010f28:	2f02      	cmp	r7, #2
 8010f2a:	70ab      	strb	r3, [r5, #2]
 8010f2c:	f105 0303 	add.w	r3, r5, #3
 8010f30:	d048      	beq.n	8010fc4 <ucdr_deserialize_uint32_t+0x100>
 8010f32:	7833      	ldrb	r3, [r6, #0]
 8010f34:	70eb      	strb	r3, [r5, #3]
 8010f36:	6923      	ldr	r3, [r4, #16]
 8010f38:	2104      	movs	r1, #4
 8010f3a:	68a2      	ldr	r2, [r4, #8]
 8010f3c:	3304      	adds	r3, #4
 8010f3e:	7da0      	ldrb	r0, [r4, #22]
 8010f40:	444a      	add	r2, r9
 8010f42:	7561      	strb	r1, [r4, #21]
 8010f44:	1bdb      	subs	r3, r3, r7
 8010f46:	f080 0001 	eor.w	r0, r0, #1
 8010f4a:	60a2      	str	r2, [r4, #8]
 8010f4c:	6123      	str	r3, [r4, #16]
 8010f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f52:	2104      	movs	r1, #4
 8010f54:	4620      	mov	r0, r4
 8010f56:	f000 fccd 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8010f5a:	b1b0      	cbz	r0, 8010f8a <ucdr_deserialize_uint32_t+0xc6>
 8010f5c:	7d23      	ldrb	r3, [r4, #20]
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	68a3      	ldr	r3, [r4, #8]
 8010f62:	d017      	beq.n	8010f94 <ucdr_deserialize_uint32_t+0xd0>
 8010f64:	78db      	ldrb	r3, [r3, #3]
 8010f66:	702b      	strb	r3, [r5, #0]
 8010f68:	68a3      	ldr	r3, [r4, #8]
 8010f6a:	789b      	ldrb	r3, [r3, #2]
 8010f6c:	706b      	strb	r3, [r5, #1]
 8010f6e:	68a3      	ldr	r3, [r4, #8]
 8010f70:	785b      	ldrb	r3, [r3, #1]
 8010f72:	70ab      	strb	r3, [r5, #2]
 8010f74:	68a3      	ldr	r3, [r4, #8]
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	70eb      	strb	r3, [r5, #3]
 8010f7a:	2104      	movs	r1, #4
 8010f7c:	68a2      	ldr	r2, [r4, #8]
 8010f7e:	6923      	ldr	r3, [r4, #16]
 8010f80:	440a      	add	r2, r1
 8010f82:	7561      	strb	r1, [r4, #21]
 8010f84:	440b      	add	r3, r1
 8010f86:	60a2      	str	r2, [r4, #8]
 8010f88:	6123      	str	r3, [r4, #16]
 8010f8a:	7da0      	ldrb	r0, [r4, #22]
 8010f8c:	f080 0001 	eor.w	r0, r0, #1
 8010f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	602b      	str	r3, [r5, #0]
 8010f98:	e7ef      	b.n	8010f7a <ucdr_deserialize_uint32_t+0xb6>
 8010f9a:	68a2      	ldr	r2, [r4, #8]
 8010f9c:	6923      	ldr	r3, [r4, #16]
 8010f9e:	1bd2      	subs	r2, r2, r7
 8010fa0:	7da0      	ldrb	r0, [r4, #22]
 8010fa2:	1bdb      	subs	r3, r3, r7
 8010fa4:	f884 8015 	strb.w	r8, [r4, #21]
 8010fa8:	f080 0001 	eor.w	r0, r0, #1
 8010fac:	60a2      	str	r2, [r4, #8]
 8010fae:	6123      	str	r3, [r4, #16]
 8010fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fb4:	68a3      	ldr	r3, [r4, #8]
 8010fb6:	789b      	ldrb	r3, [r3, #2]
 8010fb8:	706b      	strb	r3, [r5, #1]
 8010fba:	1cab      	adds	r3, r5, #2
 8010fbc:	68a2      	ldr	r2, [r4, #8]
 8010fbe:	7852      	ldrb	r2, [r2, #1]
 8010fc0:	f803 2b01 	strb.w	r2, [r3], #1
 8010fc4:	68a2      	ldr	r2, [r4, #8]
 8010fc6:	7812      	ldrb	r2, [r2, #0]
 8010fc8:	701a      	strb	r2, [r3, #0]
 8010fca:	e7b4      	b.n	8010f36 <ucdr_deserialize_uint32_t+0x72>
 8010fcc:	4631      	mov	r1, r6
 8010fce:	463a      	mov	r2, r7
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	f002 f912 	bl	80131fa <memcpy>
 8010fd6:	464a      	mov	r2, r9
 8010fd8:	19e8      	adds	r0, r5, r7
 8010fda:	68a1      	ldr	r1, [r4, #8]
 8010fdc:	f002 f90d 	bl	80131fa <memcpy>
 8010fe0:	e7a9      	b.n	8010f36 <ucdr_deserialize_uint32_t+0x72>
 8010fe2:	bf00      	nop

08010fe4 <ucdr_deserialize_endian_uint32_t>:
 8010fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe8:	4604      	mov	r4, r0
 8010fea:	460e      	mov	r6, r1
 8010fec:	2104      	movs	r1, #4
 8010fee:	4615      	mov	r5, r2
 8010ff0:	f000 fca4 	bl	801193c <ucdr_buffer_alignment>
 8010ff4:	4601      	mov	r1, r0
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010ffc:	f000 fce2 	bl	80119c4 <ucdr_advance_buffer>
 8011000:	2104      	movs	r1, #4
 8011002:	4620      	mov	r0, r4
 8011004:	f000 fc6a 	bl	80118dc <ucdr_check_buffer_available_for>
 8011008:	2800      	cmp	r0, #0
 801100a:	d13c      	bne.n	8011086 <ucdr_deserialize_endian_uint32_t+0xa2>
 801100c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011010:	42bb      	cmp	r3, r7
 8011012:	d933      	bls.n	801107c <ucdr_deserialize_endian_uint32_t+0x98>
 8011014:	eba3 0907 	sub.w	r9, r3, r7
 8011018:	60a3      	str	r3, [r4, #8]
 801101a:	6923      	ldr	r3, [r4, #16]
 801101c:	4620      	mov	r0, r4
 801101e:	f1c9 0a04 	rsb	sl, r9, #4
 8011022:	444b      	add	r3, r9
 8011024:	4651      	mov	r1, sl
 8011026:	6123      	str	r3, [r4, #16]
 8011028:	f000 fc64 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 801102c:	2800      	cmp	r0, #0
 801102e:	d048      	beq.n	80110c2 <ucdr_deserialize_endian_uint32_t+0xde>
 8011030:	2e01      	cmp	r6, #1
 8011032:	d061      	beq.n	80110f8 <ucdr_deserialize_endian_uint32_t+0x114>
 8011034:	78fb      	ldrb	r3, [r7, #3]
 8011036:	702b      	strb	r3, [r5, #0]
 8011038:	f1b9 0f00 	cmp.w	r9, #0
 801103c:	d050      	beq.n	80110e0 <ucdr_deserialize_endian_uint32_t+0xfc>
 801103e:	78bb      	ldrb	r3, [r7, #2]
 8011040:	f1b9 0f01 	cmp.w	r9, #1
 8011044:	706b      	strb	r3, [r5, #1]
 8011046:	f105 0302 	add.w	r3, r5, #2
 801104a:	d04d      	beq.n	80110e8 <ucdr_deserialize_endian_uint32_t+0x104>
 801104c:	787b      	ldrb	r3, [r7, #1]
 801104e:	f1b9 0f02 	cmp.w	r9, #2
 8011052:	70ab      	strb	r3, [r5, #2]
 8011054:	f105 0303 	add.w	r3, r5, #3
 8011058:	d04a      	beq.n	80110f0 <ucdr_deserialize_endian_uint32_t+0x10c>
 801105a:	783b      	ldrb	r3, [r7, #0]
 801105c:	70eb      	strb	r3, [r5, #3]
 801105e:	6923      	ldr	r3, [r4, #16]
 8011060:	2104      	movs	r1, #4
 8011062:	68a2      	ldr	r2, [r4, #8]
 8011064:	3304      	adds	r3, #4
 8011066:	7da0      	ldrb	r0, [r4, #22]
 8011068:	4452      	add	r2, sl
 801106a:	7561      	strb	r1, [r4, #21]
 801106c:	eba3 0309 	sub.w	r3, r3, r9
 8011070:	f080 0001 	eor.w	r0, r0, #1
 8011074:	60a2      	str	r2, [r4, #8]
 8011076:	6123      	str	r3, [r4, #16]
 8011078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801107c:	2104      	movs	r1, #4
 801107e:	4620      	mov	r0, r4
 8011080:	f000 fc38 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8011084:	b1a8      	cbz	r0, 80110b2 <ucdr_deserialize_endian_uint32_t+0xce>
 8011086:	2e01      	cmp	r6, #1
 8011088:	68a3      	ldr	r3, [r4, #8]
 801108a:	d017      	beq.n	80110bc <ucdr_deserialize_endian_uint32_t+0xd8>
 801108c:	78db      	ldrb	r3, [r3, #3]
 801108e:	702b      	strb	r3, [r5, #0]
 8011090:	68a3      	ldr	r3, [r4, #8]
 8011092:	789b      	ldrb	r3, [r3, #2]
 8011094:	706b      	strb	r3, [r5, #1]
 8011096:	68a3      	ldr	r3, [r4, #8]
 8011098:	785b      	ldrb	r3, [r3, #1]
 801109a:	70ab      	strb	r3, [r5, #2]
 801109c:	68a3      	ldr	r3, [r4, #8]
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	70eb      	strb	r3, [r5, #3]
 80110a2:	2104      	movs	r1, #4
 80110a4:	68a2      	ldr	r2, [r4, #8]
 80110a6:	6923      	ldr	r3, [r4, #16]
 80110a8:	440a      	add	r2, r1
 80110aa:	7561      	strb	r1, [r4, #21]
 80110ac:	440b      	add	r3, r1
 80110ae:	60a2      	str	r2, [r4, #8]
 80110b0:	6123      	str	r3, [r4, #16]
 80110b2:	7da0      	ldrb	r0, [r4, #22]
 80110b4:	f080 0001 	eor.w	r0, r0, #1
 80110b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	602b      	str	r3, [r5, #0]
 80110c0:	e7ef      	b.n	80110a2 <ucdr_deserialize_endian_uint32_t+0xbe>
 80110c2:	68a2      	ldr	r2, [r4, #8]
 80110c4:	6923      	ldr	r3, [r4, #16]
 80110c6:	eba2 0209 	sub.w	r2, r2, r9
 80110ca:	7da0      	ldrb	r0, [r4, #22]
 80110cc:	eba3 0309 	sub.w	r3, r3, r9
 80110d0:	f884 8015 	strb.w	r8, [r4, #21]
 80110d4:	f080 0001 	eor.w	r0, r0, #1
 80110d8:	60a2      	str	r2, [r4, #8]
 80110da:	6123      	str	r3, [r4, #16]
 80110dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110e0:	68a3      	ldr	r3, [r4, #8]
 80110e2:	789b      	ldrb	r3, [r3, #2]
 80110e4:	706b      	strb	r3, [r5, #1]
 80110e6:	1cab      	adds	r3, r5, #2
 80110e8:	68a2      	ldr	r2, [r4, #8]
 80110ea:	7852      	ldrb	r2, [r2, #1]
 80110ec:	f803 2b01 	strb.w	r2, [r3], #1
 80110f0:	68a2      	ldr	r2, [r4, #8]
 80110f2:	7812      	ldrb	r2, [r2, #0]
 80110f4:	701a      	strb	r2, [r3, #0]
 80110f6:	e7b2      	b.n	801105e <ucdr_deserialize_endian_uint32_t+0x7a>
 80110f8:	4639      	mov	r1, r7
 80110fa:	464a      	mov	r2, r9
 80110fc:	4628      	mov	r0, r5
 80110fe:	f002 f87c 	bl	80131fa <memcpy>
 8011102:	4652      	mov	r2, sl
 8011104:	eb05 0009 	add.w	r0, r5, r9
 8011108:	68a1      	ldr	r1, [r4, #8]
 801110a:	f002 f876 	bl	80131fa <memcpy>
 801110e:	e7a6      	b.n	801105e <ucdr_deserialize_endian_uint32_t+0x7a>

08011110 <ucdr_serialize_int32_t>:
 8011110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011114:	b082      	sub	sp, #8
 8011116:	4604      	mov	r4, r0
 8011118:	9101      	str	r1, [sp, #4]
 801111a:	2104      	movs	r1, #4
 801111c:	f000 fc0e 	bl	801193c <ucdr_buffer_alignment>
 8011120:	4601      	mov	r1, r0
 8011122:	4620      	mov	r0, r4
 8011124:	7d67      	ldrb	r7, [r4, #21]
 8011126:	f000 fc4d 	bl	80119c4 <ucdr_advance_buffer>
 801112a:	2104      	movs	r1, #4
 801112c:	4620      	mov	r0, r4
 801112e:	f000 fbd5 	bl	80118dc <ucdr_check_buffer_available_for>
 8011132:	2800      	cmp	r0, #0
 8011134:	d139      	bne.n	80111aa <ucdr_serialize_int32_t+0x9a>
 8011136:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801113a:	42ab      	cmp	r3, r5
 801113c:	d930      	bls.n	80111a0 <ucdr_serialize_int32_t+0x90>
 801113e:	1b5e      	subs	r6, r3, r5
 8011140:	60a3      	str	r3, [r4, #8]
 8011142:	6923      	ldr	r3, [r4, #16]
 8011144:	4620      	mov	r0, r4
 8011146:	f1c6 0804 	rsb	r8, r6, #4
 801114a:	4433      	add	r3, r6
 801114c:	4641      	mov	r1, r8
 801114e:	6123      	str	r3, [r4, #16]
 8011150:	f000 fbd0 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8011154:	2800      	cmp	r0, #0
 8011156:	d04c      	beq.n	80111f2 <ucdr_serialize_int32_t+0xe2>
 8011158:	7d23      	ldrb	r3, [r4, #20]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d063      	beq.n	8011226 <ucdr_serialize_int32_t+0x116>
 801115e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011162:	702b      	strb	r3, [r5, #0]
 8011164:	2e00      	cmp	r6, #0
 8011166:	d051      	beq.n	801120c <ucdr_serialize_int32_t+0xfc>
 8011168:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801116c:	2e01      	cmp	r6, #1
 801116e:	706b      	strb	r3, [r5, #1]
 8011170:	d050      	beq.n	8011214 <ucdr_serialize_int32_t+0x104>
 8011172:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011176:	2e02      	cmp	r6, #2
 8011178:	70ab      	strb	r3, [r5, #2]
 801117a:	d04f      	beq.n	801121c <ucdr_serialize_int32_t+0x10c>
 801117c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011180:	70eb      	strb	r3, [r5, #3]
 8011182:	6923      	ldr	r3, [r4, #16]
 8011184:	2104      	movs	r1, #4
 8011186:	68a2      	ldr	r2, [r4, #8]
 8011188:	3304      	adds	r3, #4
 801118a:	7da0      	ldrb	r0, [r4, #22]
 801118c:	4442      	add	r2, r8
 801118e:	7561      	strb	r1, [r4, #21]
 8011190:	1b9e      	subs	r6, r3, r6
 8011192:	f080 0001 	eor.w	r0, r0, #1
 8011196:	60a2      	str	r2, [r4, #8]
 8011198:	6126      	str	r6, [r4, #16]
 801119a:	b002      	add	sp, #8
 801119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111a0:	2104      	movs	r1, #4
 80111a2:	4620      	mov	r0, r4
 80111a4:	f000 fba6 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 80111a8:	b1d0      	cbz	r0, 80111e0 <ucdr_serialize_int32_t+0xd0>
 80111aa:	7d23      	ldrb	r3, [r4, #20]
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	68a3      	ldr	r3, [r4, #8]
 80111b0:	d01c      	beq.n	80111ec <ucdr_serialize_int32_t+0xdc>
 80111b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80111b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80111ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80111be:	7018      	strb	r0, [r3, #0]
 80111c0:	68a3      	ldr	r3, [r4, #8]
 80111c2:	705a      	strb	r2, [r3, #1]
 80111c4:	68a3      	ldr	r3, [r4, #8]
 80111c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80111ca:	7099      	strb	r1, [r3, #2]
 80111cc:	68a3      	ldr	r3, [r4, #8]
 80111ce:	70da      	strb	r2, [r3, #3]
 80111d0:	2104      	movs	r1, #4
 80111d2:	68a2      	ldr	r2, [r4, #8]
 80111d4:	6923      	ldr	r3, [r4, #16]
 80111d6:	440a      	add	r2, r1
 80111d8:	7561      	strb	r1, [r4, #21]
 80111da:	440b      	add	r3, r1
 80111dc:	60a2      	str	r2, [r4, #8]
 80111de:	6123      	str	r3, [r4, #16]
 80111e0:	7da0      	ldrb	r0, [r4, #22]
 80111e2:	f080 0001 	eor.w	r0, r0, #1
 80111e6:	b002      	add	sp, #8
 80111e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ec:	9a01      	ldr	r2, [sp, #4]
 80111ee:	601a      	str	r2, [r3, #0]
 80111f0:	e7ee      	b.n	80111d0 <ucdr_serialize_int32_t+0xc0>
 80111f2:	68a2      	ldr	r2, [r4, #8]
 80111f4:	6923      	ldr	r3, [r4, #16]
 80111f6:	7da0      	ldrb	r0, [r4, #22]
 80111f8:	1b92      	subs	r2, r2, r6
 80111fa:	1b9b      	subs	r3, r3, r6
 80111fc:	7567      	strb	r7, [r4, #21]
 80111fe:	f080 0001 	eor.w	r0, r0, #1
 8011202:	60a2      	str	r2, [r4, #8]
 8011204:	6123      	str	r3, [r4, #16]
 8011206:	b002      	add	sp, #8
 8011208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801120c:	68a3      	ldr	r3, [r4, #8]
 801120e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011212:	701a      	strb	r2, [r3, #0]
 8011214:	68a3      	ldr	r3, [r4, #8]
 8011216:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801121a:	701a      	strb	r2, [r3, #0]
 801121c:	68a3      	ldr	r3, [r4, #8]
 801121e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011222:	701a      	strb	r2, [r3, #0]
 8011224:	e7ad      	b.n	8011182 <ucdr_serialize_int32_t+0x72>
 8011226:	4628      	mov	r0, r5
 8011228:	ad01      	add	r5, sp, #4
 801122a:	4632      	mov	r2, r6
 801122c:	4629      	mov	r1, r5
 801122e:	f001 ffe4 	bl	80131fa <memcpy>
 8011232:	4642      	mov	r2, r8
 8011234:	19a9      	adds	r1, r5, r6
 8011236:	68a0      	ldr	r0, [r4, #8]
 8011238:	f001 ffdf 	bl	80131fa <memcpy>
 801123c:	e7a1      	b.n	8011182 <ucdr_serialize_int32_t+0x72>
 801123e:	bf00      	nop

08011240 <ucdr_deserialize_int32_t>:
 8011240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011244:	4604      	mov	r4, r0
 8011246:	460d      	mov	r5, r1
 8011248:	2104      	movs	r1, #4
 801124a:	f000 fb77 	bl	801193c <ucdr_buffer_alignment>
 801124e:	4601      	mov	r1, r0
 8011250:	4620      	mov	r0, r4
 8011252:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011256:	f000 fbb5 	bl	80119c4 <ucdr_advance_buffer>
 801125a:	2104      	movs	r1, #4
 801125c:	4620      	mov	r0, r4
 801125e:	f000 fb3d 	bl	80118dc <ucdr_check_buffer_available_for>
 8011262:	2800      	cmp	r0, #0
 8011264:	d138      	bne.n	80112d8 <ucdr_deserialize_int32_t+0x98>
 8011266:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801126a:	42b7      	cmp	r7, r6
 801126c:	d92f      	bls.n	80112ce <ucdr_deserialize_int32_t+0x8e>
 801126e:	6923      	ldr	r3, [r4, #16]
 8011270:	4620      	mov	r0, r4
 8011272:	60a7      	str	r7, [r4, #8]
 8011274:	1bbf      	subs	r7, r7, r6
 8011276:	443b      	add	r3, r7
 8011278:	f1c7 0904 	rsb	r9, r7, #4
 801127c:	6123      	str	r3, [r4, #16]
 801127e:	4649      	mov	r1, r9
 8011280:	f000 fb38 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8011284:	2800      	cmp	r0, #0
 8011286:	d046      	beq.n	8011316 <ucdr_deserialize_int32_t+0xd6>
 8011288:	7d23      	ldrb	r3, [r4, #20]
 801128a:	2b01      	cmp	r3, #1
 801128c:	d05c      	beq.n	8011348 <ucdr_deserialize_int32_t+0x108>
 801128e:	78f3      	ldrb	r3, [r6, #3]
 8011290:	702b      	strb	r3, [r5, #0]
 8011292:	2f00      	cmp	r7, #0
 8011294:	d04c      	beq.n	8011330 <ucdr_deserialize_int32_t+0xf0>
 8011296:	78b3      	ldrb	r3, [r6, #2]
 8011298:	2f01      	cmp	r7, #1
 801129a:	706b      	strb	r3, [r5, #1]
 801129c:	f105 0302 	add.w	r3, r5, #2
 80112a0:	d04a      	beq.n	8011338 <ucdr_deserialize_int32_t+0xf8>
 80112a2:	7873      	ldrb	r3, [r6, #1]
 80112a4:	2f02      	cmp	r7, #2
 80112a6:	70ab      	strb	r3, [r5, #2]
 80112a8:	f105 0303 	add.w	r3, r5, #3
 80112ac:	d048      	beq.n	8011340 <ucdr_deserialize_int32_t+0x100>
 80112ae:	7833      	ldrb	r3, [r6, #0]
 80112b0:	70eb      	strb	r3, [r5, #3]
 80112b2:	6923      	ldr	r3, [r4, #16]
 80112b4:	2104      	movs	r1, #4
 80112b6:	68a2      	ldr	r2, [r4, #8]
 80112b8:	3304      	adds	r3, #4
 80112ba:	7da0      	ldrb	r0, [r4, #22]
 80112bc:	444a      	add	r2, r9
 80112be:	7561      	strb	r1, [r4, #21]
 80112c0:	1bdb      	subs	r3, r3, r7
 80112c2:	f080 0001 	eor.w	r0, r0, #1
 80112c6:	60a2      	str	r2, [r4, #8]
 80112c8:	6123      	str	r3, [r4, #16]
 80112ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ce:	2104      	movs	r1, #4
 80112d0:	4620      	mov	r0, r4
 80112d2:	f000 fb0f 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 80112d6:	b1b0      	cbz	r0, 8011306 <ucdr_deserialize_int32_t+0xc6>
 80112d8:	7d23      	ldrb	r3, [r4, #20]
 80112da:	2b01      	cmp	r3, #1
 80112dc:	68a3      	ldr	r3, [r4, #8]
 80112de:	d017      	beq.n	8011310 <ucdr_deserialize_int32_t+0xd0>
 80112e0:	78db      	ldrb	r3, [r3, #3]
 80112e2:	702b      	strb	r3, [r5, #0]
 80112e4:	68a3      	ldr	r3, [r4, #8]
 80112e6:	789b      	ldrb	r3, [r3, #2]
 80112e8:	706b      	strb	r3, [r5, #1]
 80112ea:	68a3      	ldr	r3, [r4, #8]
 80112ec:	785b      	ldrb	r3, [r3, #1]
 80112ee:	70ab      	strb	r3, [r5, #2]
 80112f0:	68a3      	ldr	r3, [r4, #8]
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	70eb      	strb	r3, [r5, #3]
 80112f6:	2104      	movs	r1, #4
 80112f8:	68a2      	ldr	r2, [r4, #8]
 80112fa:	6923      	ldr	r3, [r4, #16]
 80112fc:	440a      	add	r2, r1
 80112fe:	7561      	strb	r1, [r4, #21]
 8011300:	440b      	add	r3, r1
 8011302:	60a2      	str	r2, [r4, #8]
 8011304:	6123      	str	r3, [r4, #16]
 8011306:	7da0      	ldrb	r0, [r4, #22]
 8011308:	f080 0001 	eor.w	r0, r0, #1
 801130c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	602b      	str	r3, [r5, #0]
 8011314:	e7ef      	b.n	80112f6 <ucdr_deserialize_int32_t+0xb6>
 8011316:	68a2      	ldr	r2, [r4, #8]
 8011318:	6923      	ldr	r3, [r4, #16]
 801131a:	1bd2      	subs	r2, r2, r7
 801131c:	7da0      	ldrb	r0, [r4, #22]
 801131e:	1bdb      	subs	r3, r3, r7
 8011320:	f884 8015 	strb.w	r8, [r4, #21]
 8011324:	f080 0001 	eor.w	r0, r0, #1
 8011328:	60a2      	str	r2, [r4, #8]
 801132a:	6123      	str	r3, [r4, #16]
 801132c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011330:	68a3      	ldr	r3, [r4, #8]
 8011332:	789b      	ldrb	r3, [r3, #2]
 8011334:	706b      	strb	r3, [r5, #1]
 8011336:	1cab      	adds	r3, r5, #2
 8011338:	68a2      	ldr	r2, [r4, #8]
 801133a:	7852      	ldrb	r2, [r2, #1]
 801133c:	f803 2b01 	strb.w	r2, [r3], #1
 8011340:	68a2      	ldr	r2, [r4, #8]
 8011342:	7812      	ldrb	r2, [r2, #0]
 8011344:	701a      	strb	r2, [r3, #0]
 8011346:	e7b4      	b.n	80112b2 <ucdr_deserialize_int32_t+0x72>
 8011348:	4631      	mov	r1, r6
 801134a:	463a      	mov	r2, r7
 801134c:	4628      	mov	r0, r5
 801134e:	f001 ff54 	bl	80131fa <memcpy>
 8011352:	464a      	mov	r2, r9
 8011354:	19e8      	adds	r0, r5, r7
 8011356:	68a1      	ldr	r1, [r4, #8]
 8011358:	f001 ff4f 	bl	80131fa <memcpy>
 801135c:	e7a9      	b.n	80112b2 <ucdr_deserialize_int32_t+0x72>
 801135e:	bf00      	nop

08011360 <ucdr_serialize_float>:
 8011360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011364:	4604      	mov	r4, r0
 8011366:	b082      	sub	sp, #8
 8011368:	2104      	movs	r1, #4
 801136a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801136e:	f000 fae5 	bl	801193c <ucdr_buffer_alignment>
 8011372:	4601      	mov	r1, r0
 8011374:	4620      	mov	r0, r4
 8011376:	7d67      	ldrb	r7, [r4, #21]
 8011378:	f000 fb24 	bl	80119c4 <ucdr_advance_buffer>
 801137c:	2104      	movs	r1, #4
 801137e:	4620      	mov	r0, r4
 8011380:	f000 faac 	bl	80118dc <ucdr_check_buffer_available_for>
 8011384:	2800      	cmp	r0, #0
 8011386:	d139      	bne.n	80113fc <ucdr_serialize_float+0x9c>
 8011388:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801138c:	42ab      	cmp	r3, r5
 801138e:	d930      	bls.n	80113f2 <ucdr_serialize_float+0x92>
 8011390:	1b5e      	subs	r6, r3, r5
 8011392:	60a3      	str	r3, [r4, #8]
 8011394:	6923      	ldr	r3, [r4, #16]
 8011396:	4620      	mov	r0, r4
 8011398:	f1c6 0804 	rsb	r8, r6, #4
 801139c:	4433      	add	r3, r6
 801139e:	4641      	mov	r1, r8
 80113a0:	6123      	str	r3, [r4, #16]
 80113a2:	f000 faa7 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 80113a6:	2800      	cmp	r0, #0
 80113a8:	d04c      	beq.n	8011444 <ucdr_serialize_float+0xe4>
 80113aa:	7d23      	ldrb	r3, [r4, #20]
 80113ac:	2b01      	cmp	r3, #1
 80113ae:	d063      	beq.n	8011478 <ucdr_serialize_float+0x118>
 80113b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80113b4:	702b      	strb	r3, [r5, #0]
 80113b6:	2e00      	cmp	r6, #0
 80113b8:	d051      	beq.n	801145e <ucdr_serialize_float+0xfe>
 80113ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80113be:	2e01      	cmp	r6, #1
 80113c0:	706b      	strb	r3, [r5, #1]
 80113c2:	d050      	beq.n	8011466 <ucdr_serialize_float+0x106>
 80113c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80113c8:	2e02      	cmp	r6, #2
 80113ca:	70ab      	strb	r3, [r5, #2]
 80113cc:	d04f      	beq.n	801146e <ucdr_serialize_float+0x10e>
 80113ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80113d2:	70eb      	strb	r3, [r5, #3]
 80113d4:	6923      	ldr	r3, [r4, #16]
 80113d6:	2104      	movs	r1, #4
 80113d8:	68a2      	ldr	r2, [r4, #8]
 80113da:	3304      	adds	r3, #4
 80113dc:	7da0      	ldrb	r0, [r4, #22]
 80113de:	4442      	add	r2, r8
 80113e0:	7561      	strb	r1, [r4, #21]
 80113e2:	1b9e      	subs	r6, r3, r6
 80113e4:	f080 0001 	eor.w	r0, r0, #1
 80113e8:	60a2      	str	r2, [r4, #8]
 80113ea:	6126      	str	r6, [r4, #16]
 80113ec:	b002      	add	sp, #8
 80113ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f2:	2104      	movs	r1, #4
 80113f4:	4620      	mov	r0, r4
 80113f6:	f000 fa7d 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 80113fa:	b1d0      	cbz	r0, 8011432 <ucdr_serialize_float+0xd2>
 80113fc:	7d23      	ldrb	r3, [r4, #20]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	68a3      	ldr	r3, [r4, #8]
 8011402:	d01c      	beq.n	801143e <ucdr_serialize_float+0xde>
 8011404:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011408:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801140c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011410:	7018      	strb	r0, [r3, #0]
 8011412:	68a3      	ldr	r3, [r4, #8]
 8011414:	705a      	strb	r2, [r3, #1]
 8011416:	68a3      	ldr	r3, [r4, #8]
 8011418:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801141c:	7099      	strb	r1, [r3, #2]
 801141e:	68a3      	ldr	r3, [r4, #8]
 8011420:	70da      	strb	r2, [r3, #3]
 8011422:	2104      	movs	r1, #4
 8011424:	68a2      	ldr	r2, [r4, #8]
 8011426:	6923      	ldr	r3, [r4, #16]
 8011428:	440a      	add	r2, r1
 801142a:	7561      	strb	r1, [r4, #21]
 801142c:	440b      	add	r3, r1
 801142e:	60a2      	str	r2, [r4, #8]
 8011430:	6123      	str	r3, [r4, #16]
 8011432:	7da0      	ldrb	r0, [r4, #22]
 8011434:	f080 0001 	eor.w	r0, r0, #1
 8011438:	b002      	add	sp, #8
 801143a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801143e:	9a01      	ldr	r2, [sp, #4]
 8011440:	601a      	str	r2, [r3, #0]
 8011442:	e7ee      	b.n	8011422 <ucdr_serialize_float+0xc2>
 8011444:	68a2      	ldr	r2, [r4, #8]
 8011446:	6923      	ldr	r3, [r4, #16]
 8011448:	7da0      	ldrb	r0, [r4, #22]
 801144a:	1b92      	subs	r2, r2, r6
 801144c:	1b9b      	subs	r3, r3, r6
 801144e:	7567      	strb	r7, [r4, #21]
 8011450:	f080 0001 	eor.w	r0, r0, #1
 8011454:	60a2      	str	r2, [r4, #8]
 8011456:	6123      	str	r3, [r4, #16]
 8011458:	b002      	add	sp, #8
 801145a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801145e:	68a3      	ldr	r3, [r4, #8]
 8011460:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011464:	701a      	strb	r2, [r3, #0]
 8011466:	68a3      	ldr	r3, [r4, #8]
 8011468:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801146c:	701a      	strb	r2, [r3, #0]
 801146e:	68a3      	ldr	r3, [r4, #8]
 8011470:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011474:	701a      	strb	r2, [r3, #0]
 8011476:	e7ad      	b.n	80113d4 <ucdr_serialize_float+0x74>
 8011478:	4628      	mov	r0, r5
 801147a:	ad01      	add	r5, sp, #4
 801147c:	4632      	mov	r2, r6
 801147e:	4629      	mov	r1, r5
 8011480:	f001 febb 	bl	80131fa <memcpy>
 8011484:	4642      	mov	r2, r8
 8011486:	19a9      	adds	r1, r5, r6
 8011488:	68a0      	ldr	r0, [r4, #8]
 801148a:	f001 feb6 	bl	80131fa <memcpy>
 801148e:	e7a1      	b.n	80113d4 <ucdr_serialize_float+0x74>

08011490 <ucdr_deserialize_float>:
 8011490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011494:	4604      	mov	r4, r0
 8011496:	460d      	mov	r5, r1
 8011498:	2104      	movs	r1, #4
 801149a:	f000 fa4f 	bl	801193c <ucdr_buffer_alignment>
 801149e:	4601      	mov	r1, r0
 80114a0:	4620      	mov	r0, r4
 80114a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80114a6:	f000 fa8d 	bl	80119c4 <ucdr_advance_buffer>
 80114aa:	2104      	movs	r1, #4
 80114ac:	4620      	mov	r0, r4
 80114ae:	f000 fa15 	bl	80118dc <ucdr_check_buffer_available_for>
 80114b2:	2800      	cmp	r0, #0
 80114b4:	d138      	bne.n	8011528 <ucdr_deserialize_float+0x98>
 80114b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80114ba:	42b7      	cmp	r7, r6
 80114bc:	d92f      	bls.n	801151e <ucdr_deserialize_float+0x8e>
 80114be:	6923      	ldr	r3, [r4, #16]
 80114c0:	4620      	mov	r0, r4
 80114c2:	60a7      	str	r7, [r4, #8]
 80114c4:	1bbf      	subs	r7, r7, r6
 80114c6:	443b      	add	r3, r7
 80114c8:	f1c7 0904 	rsb	r9, r7, #4
 80114cc:	6123      	str	r3, [r4, #16]
 80114ce:	4649      	mov	r1, r9
 80114d0:	f000 fa10 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d046      	beq.n	8011566 <ucdr_deserialize_float+0xd6>
 80114d8:	7d23      	ldrb	r3, [r4, #20]
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d05c      	beq.n	8011598 <ucdr_deserialize_float+0x108>
 80114de:	78f3      	ldrb	r3, [r6, #3]
 80114e0:	702b      	strb	r3, [r5, #0]
 80114e2:	2f00      	cmp	r7, #0
 80114e4:	d04c      	beq.n	8011580 <ucdr_deserialize_float+0xf0>
 80114e6:	78b3      	ldrb	r3, [r6, #2]
 80114e8:	2f01      	cmp	r7, #1
 80114ea:	706b      	strb	r3, [r5, #1]
 80114ec:	f105 0302 	add.w	r3, r5, #2
 80114f0:	d04a      	beq.n	8011588 <ucdr_deserialize_float+0xf8>
 80114f2:	7873      	ldrb	r3, [r6, #1]
 80114f4:	2f02      	cmp	r7, #2
 80114f6:	70ab      	strb	r3, [r5, #2]
 80114f8:	f105 0303 	add.w	r3, r5, #3
 80114fc:	d048      	beq.n	8011590 <ucdr_deserialize_float+0x100>
 80114fe:	7833      	ldrb	r3, [r6, #0]
 8011500:	70eb      	strb	r3, [r5, #3]
 8011502:	6923      	ldr	r3, [r4, #16]
 8011504:	2104      	movs	r1, #4
 8011506:	68a2      	ldr	r2, [r4, #8]
 8011508:	3304      	adds	r3, #4
 801150a:	7da0      	ldrb	r0, [r4, #22]
 801150c:	444a      	add	r2, r9
 801150e:	7561      	strb	r1, [r4, #21]
 8011510:	1bdb      	subs	r3, r3, r7
 8011512:	f080 0001 	eor.w	r0, r0, #1
 8011516:	60a2      	str	r2, [r4, #8]
 8011518:	6123      	str	r3, [r4, #16]
 801151a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801151e:	2104      	movs	r1, #4
 8011520:	4620      	mov	r0, r4
 8011522:	f000 f9e7 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8011526:	b1b0      	cbz	r0, 8011556 <ucdr_deserialize_float+0xc6>
 8011528:	7d23      	ldrb	r3, [r4, #20]
 801152a:	2b01      	cmp	r3, #1
 801152c:	68a3      	ldr	r3, [r4, #8]
 801152e:	d017      	beq.n	8011560 <ucdr_deserialize_float+0xd0>
 8011530:	78db      	ldrb	r3, [r3, #3]
 8011532:	702b      	strb	r3, [r5, #0]
 8011534:	68a3      	ldr	r3, [r4, #8]
 8011536:	789b      	ldrb	r3, [r3, #2]
 8011538:	706b      	strb	r3, [r5, #1]
 801153a:	68a3      	ldr	r3, [r4, #8]
 801153c:	785b      	ldrb	r3, [r3, #1]
 801153e:	70ab      	strb	r3, [r5, #2]
 8011540:	68a3      	ldr	r3, [r4, #8]
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	70eb      	strb	r3, [r5, #3]
 8011546:	2104      	movs	r1, #4
 8011548:	68a2      	ldr	r2, [r4, #8]
 801154a:	6923      	ldr	r3, [r4, #16]
 801154c:	440a      	add	r2, r1
 801154e:	7561      	strb	r1, [r4, #21]
 8011550:	440b      	add	r3, r1
 8011552:	60a2      	str	r2, [r4, #8]
 8011554:	6123      	str	r3, [r4, #16]
 8011556:	7da0      	ldrb	r0, [r4, #22]
 8011558:	f080 0001 	eor.w	r0, r0, #1
 801155c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	602b      	str	r3, [r5, #0]
 8011564:	e7ef      	b.n	8011546 <ucdr_deserialize_float+0xb6>
 8011566:	68a2      	ldr	r2, [r4, #8]
 8011568:	6923      	ldr	r3, [r4, #16]
 801156a:	1bd2      	subs	r2, r2, r7
 801156c:	7da0      	ldrb	r0, [r4, #22]
 801156e:	1bdb      	subs	r3, r3, r7
 8011570:	f884 8015 	strb.w	r8, [r4, #21]
 8011574:	f080 0001 	eor.w	r0, r0, #1
 8011578:	60a2      	str	r2, [r4, #8]
 801157a:	6123      	str	r3, [r4, #16]
 801157c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011580:	68a3      	ldr	r3, [r4, #8]
 8011582:	789b      	ldrb	r3, [r3, #2]
 8011584:	706b      	strb	r3, [r5, #1]
 8011586:	1cab      	adds	r3, r5, #2
 8011588:	68a2      	ldr	r2, [r4, #8]
 801158a:	7852      	ldrb	r2, [r2, #1]
 801158c:	f803 2b01 	strb.w	r2, [r3], #1
 8011590:	68a2      	ldr	r2, [r4, #8]
 8011592:	7812      	ldrb	r2, [r2, #0]
 8011594:	701a      	strb	r2, [r3, #0]
 8011596:	e7b4      	b.n	8011502 <ucdr_deserialize_float+0x72>
 8011598:	4631      	mov	r1, r6
 801159a:	463a      	mov	r2, r7
 801159c:	4628      	mov	r0, r5
 801159e:	f001 fe2c 	bl	80131fa <memcpy>
 80115a2:	464a      	mov	r2, r9
 80115a4:	19e8      	adds	r0, r5, r7
 80115a6:	68a1      	ldr	r1, [r4, #8]
 80115a8:	f001 fe27 	bl	80131fa <memcpy>
 80115ac:	e7a9      	b.n	8011502 <ucdr_deserialize_float+0x72>
 80115ae:	bf00      	nop

080115b0 <ucdr_serialize_double>:
 80115b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115b4:	4604      	mov	r4, r0
 80115b6:	b082      	sub	sp, #8
 80115b8:	2108      	movs	r1, #8
 80115ba:	ed8d 0b00 	vstr	d0, [sp]
 80115be:	f000 f9bd 	bl	801193c <ucdr_buffer_alignment>
 80115c2:	4601      	mov	r1, r0
 80115c4:	4620      	mov	r0, r4
 80115c6:	7d67      	ldrb	r7, [r4, #21]
 80115c8:	f000 f9fc 	bl	80119c4 <ucdr_advance_buffer>
 80115cc:	2108      	movs	r1, #8
 80115ce:	4620      	mov	r0, r4
 80115d0:	f000 f984 	bl	80118dc <ucdr_check_buffer_available_for>
 80115d4:	2800      	cmp	r0, #0
 80115d6:	d14e      	bne.n	8011676 <ucdr_serialize_double+0xc6>
 80115d8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80115dc:	42ab      	cmp	r3, r5
 80115de:	d945      	bls.n	801166c <ucdr_serialize_double+0xbc>
 80115e0:	1b5e      	subs	r6, r3, r5
 80115e2:	60a3      	str	r3, [r4, #8]
 80115e4:	6923      	ldr	r3, [r4, #16]
 80115e6:	4620      	mov	r0, r4
 80115e8:	f1c6 0808 	rsb	r8, r6, #8
 80115ec:	4433      	add	r3, r6
 80115ee:	4641      	mov	r1, r8
 80115f0:	6123      	str	r3, [r4, #16]
 80115f2:	f000 f97f 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 80115f6:	2800      	cmp	r0, #0
 80115f8:	d074      	beq.n	80116e4 <ucdr_serialize_double+0x134>
 80115fa:	7d23      	ldrb	r3, [r4, #20]
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	f000 809b 	beq.w	8011738 <ucdr_serialize_double+0x188>
 8011602:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011606:	702b      	strb	r3, [r5, #0]
 8011608:	2e00      	cmp	r6, #0
 801160a:	d078      	beq.n	80116fe <ucdr_serialize_double+0x14e>
 801160c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011610:	2e01      	cmp	r6, #1
 8011612:	706b      	strb	r3, [r5, #1]
 8011614:	d077      	beq.n	8011706 <ucdr_serialize_double+0x156>
 8011616:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801161a:	2e02      	cmp	r6, #2
 801161c:	70ab      	strb	r3, [r5, #2]
 801161e:	d076      	beq.n	801170e <ucdr_serialize_double+0x15e>
 8011620:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011624:	2e03      	cmp	r6, #3
 8011626:	70eb      	strb	r3, [r5, #3]
 8011628:	d075      	beq.n	8011716 <ucdr_serialize_double+0x166>
 801162a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801162e:	2e04      	cmp	r6, #4
 8011630:	712b      	strb	r3, [r5, #4]
 8011632:	d074      	beq.n	801171e <ucdr_serialize_double+0x16e>
 8011634:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011638:	2e05      	cmp	r6, #5
 801163a:	716b      	strb	r3, [r5, #5]
 801163c:	d073      	beq.n	8011726 <ucdr_serialize_double+0x176>
 801163e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011642:	2e06      	cmp	r6, #6
 8011644:	71ab      	strb	r3, [r5, #6]
 8011646:	d072      	beq.n	801172e <ucdr_serialize_double+0x17e>
 8011648:	f89d 3000 	ldrb.w	r3, [sp]
 801164c:	71eb      	strb	r3, [r5, #7]
 801164e:	6923      	ldr	r3, [r4, #16]
 8011650:	2108      	movs	r1, #8
 8011652:	68a2      	ldr	r2, [r4, #8]
 8011654:	3308      	adds	r3, #8
 8011656:	7da0      	ldrb	r0, [r4, #22]
 8011658:	4442      	add	r2, r8
 801165a:	7561      	strb	r1, [r4, #21]
 801165c:	1b9e      	subs	r6, r3, r6
 801165e:	f080 0001 	eor.w	r0, r0, #1
 8011662:	60a2      	str	r2, [r4, #8]
 8011664:	6126      	str	r6, [r4, #16]
 8011666:	b002      	add	sp, #8
 8011668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801166c:	2108      	movs	r1, #8
 801166e:	4620      	mov	r0, r4
 8011670:	f000 f940 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8011674:	b350      	cbz	r0, 80116cc <ucdr_serialize_double+0x11c>
 8011676:	7d23      	ldrb	r3, [r4, #20]
 8011678:	2b01      	cmp	r3, #1
 801167a:	d02d      	beq.n	80116d8 <ucdr_serialize_double+0x128>
 801167c:	68a3      	ldr	r3, [r4, #8]
 801167e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011682:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011686:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801168a:	7018      	strb	r0, [r3, #0]
 801168c:	68a3      	ldr	r3, [r4, #8]
 801168e:	705a      	strb	r2, [r3, #1]
 8011690:	68a3      	ldr	r3, [r4, #8]
 8011692:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011696:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801169a:	7099      	strb	r1, [r3, #2]
 801169c:	68a3      	ldr	r3, [r4, #8]
 801169e:	70da      	strb	r2, [r3, #3]
 80116a0:	68a3      	ldr	r3, [r4, #8]
 80116a2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80116a6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80116aa:	7118      	strb	r0, [r3, #4]
 80116ac:	68a3      	ldr	r3, [r4, #8]
 80116ae:	715a      	strb	r2, [r3, #5]
 80116b0:	68a3      	ldr	r3, [r4, #8]
 80116b2:	f89d 2000 	ldrb.w	r2, [sp]
 80116b6:	7199      	strb	r1, [r3, #6]
 80116b8:	68a3      	ldr	r3, [r4, #8]
 80116ba:	71da      	strb	r2, [r3, #7]
 80116bc:	2108      	movs	r1, #8
 80116be:	68a2      	ldr	r2, [r4, #8]
 80116c0:	6923      	ldr	r3, [r4, #16]
 80116c2:	440a      	add	r2, r1
 80116c4:	7561      	strb	r1, [r4, #21]
 80116c6:	440b      	add	r3, r1
 80116c8:	60a2      	str	r2, [r4, #8]
 80116ca:	6123      	str	r3, [r4, #16]
 80116cc:	7da0      	ldrb	r0, [r4, #22]
 80116ce:	f080 0001 	eor.w	r0, r0, #1
 80116d2:	b002      	add	sp, #8
 80116d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d8:	466b      	mov	r3, sp
 80116da:	68a2      	ldr	r2, [r4, #8]
 80116dc:	cb03      	ldmia	r3!, {r0, r1}
 80116de:	6010      	str	r0, [r2, #0]
 80116e0:	6051      	str	r1, [r2, #4]
 80116e2:	e7eb      	b.n	80116bc <ucdr_serialize_double+0x10c>
 80116e4:	68a2      	ldr	r2, [r4, #8]
 80116e6:	6923      	ldr	r3, [r4, #16]
 80116e8:	7da0      	ldrb	r0, [r4, #22]
 80116ea:	1b92      	subs	r2, r2, r6
 80116ec:	1b9b      	subs	r3, r3, r6
 80116ee:	7567      	strb	r7, [r4, #21]
 80116f0:	f080 0001 	eor.w	r0, r0, #1
 80116f4:	60a2      	str	r2, [r4, #8]
 80116f6:	6123      	str	r3, [r4, #16]
 80116f8:	b002      	add	sp, #8
 80116fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116fe:	68a3      	ldr	r3, [r4, #8]
 8011700:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011704:	701a      	strb	r2, [r3, #0]
 8011706:	68a3      	ldr	r3, [r4, #8]
 8011708:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801170c:	701a      	strb	r2, [r3, #0]
 801170e:	68a3      	ldr	r3, [r4, #8]
 8011710:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011714:	701a      	strb	r2, [r3, #0]
 8011716:	68a3      	ldr	r3, [r4, #8]
 8011718:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801171c:	701a      	strb	r2, [r3, #0]
 801171e:	68a3      	ldr	r3, [r4, #8]
 8011720:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011724:	701a      	strb	r2, [r3, #0]
 8011726:	68a3      	ldr	r3, [r4, #8]
 8011728:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801172c:	701a      	strb	r2, [r3, #0]
 801172e:	68a3      	ldr	r3, [r4, #8]
 8011730:	f89d 2000 	ldrb.w	r2, [sp]
 8011734:	701a      	strb	r2, [r3, #0]
 8011736:	e78a      	b.n	801164e <ucdr_serialize_double+0x9e>
 8011738:	4628      	mov	r0, r5
 801173a:	466d      	mov	r5, sp
 801173c:	4632      	mov	r2, r6
 801173e:	4629      	mov	r1, r5
 8011740:	f001 fd5b 	bl	80131fa <memcpy>
 8011744:	4642      	mov	r2, r8
 8011746:	19a9      	adds	r1, r5, r6
 8011748:	68a0      	ldr	r0, [r4, #8]
 801174a:	f001 fd56 	bl	80131fa <memcpy>
 801174e:	e77e      	b.n	801164e <ucdr_serialize_double+0x9e>

08011750 <ucdr_deserialize_double>:
 8011750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011754:	4604      	mov	r4, r0
 8011756:	460d      	mov	r5, r1
 8011758:	2108      	movs	r1, #8
 801175a:	f000 f8ef 	bl	801193c <ucdr_buffer_alignment>
 801175e:	4601      	mov	r1, r0
 8011760:	4620      	mov	r0, r4
 8011762:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011766:	f000 f92d 	bl	80119c4 <ucdr_advance_buffer>
 801176a:	2108      	movs	r1, #8
 801176c:	4620      	mov	r0, r4
 801176e:	f000 f8b5 	bl	80118dc <ucdr_check_buffer_available_for>
 8011772:	2800      	cmp	r0, #0
 8011774:	d151      	bne.n	801181a <ucdr_deserialize_double+0xca>
 8011776:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801177a:	42be      	cmp	r6, r7
 801177c:	d948      	bls.n	8011810 <ucdr_deserialize_double+0xc0>
 801177e:	6923      	ldr	r3, [r4, #16]
 8011780:	4620      	mov	r0, r4
 8011782:	60a6      	str	r6, [r4, #8]
 8011784:	1bf6      	subs	r6, r6, r7
 8011786:	4433      	add	r3, r6
 8011788:	f1c6 0908 	rsb	r9, r6, #8
 801178c:	6123      	str	r3, [r4, #16]
 801178e:	4649      	mov	r1, r9
 8011790:	f000 f8b0 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8011794:	2800      	cmp	r0, #0
 8011796:	d06d      	beq.n	8011874 <ucdr_deserialize_double+0x124>
 8011798:	7d23      	ldrb	r3, [r4, #20]
 801179a:	2b01      	cmp	r3, #1
 801179c:	f000 8093 	beq.w	80118c6 <ucdr_deserialize_double+0x176>
 80117a0:	79fb      	ldrb	r3, [r7, #7]
 80117a2:	702b      	strb	r3, [r5, #0]
 80117a4:	2e00      	cmp	r6, #0
 80117a6:	d072      	beq.n	801188e <ucdr_deserialize_double+0x13e>
 80117a8:	79bb      	ldrb	r3, [r7, #6]
 80117aa:	2e01      	cmp	r6, #1
 80117ac:	706b      	strb	r3, [r5, #1]
 80117ae:	f105 0302 	add.w	r3, r5, #2
 80117b2:	d070      	beq.n	8011896 <ucdr_deserialize_double+0x146>
 80117b4:	797b      	ldrb	r3, [r7, #5]
 80117b6:	2e02      	cmp	r6, #2
 80117b8:	70ab      	strb	r3, [r5, #2]
 80117ba:	f105 0303 	add.w	r3, r5, #3
 80117be:	d06e      	beq.n	801189e <ucdr_deserialize_double+0x14e>
 80117c0:	793b      	ldrb	r3, [r7, #4]
 80117c2:	2e03      	cmp	r6, #3
 80117c4:	70eb      	strb	r3, [r5, #3]
 80117c6:	f105 0304 	add.w	r3, r5, #4
 80117ca:	d06c      	beq.n	80118a6 <ucdr_deserialize_double+0x156>
 80117cc:	78fb      	ldrb	r3, [r7, #3]
 80117ce:	2e04      	cmp	r6, #4
 80117d0:	712b      	strb	r3, [r5, #4]
 80117d2:	f105 0305 	add.w	r3, r5, #5
 80117d6:	d06a      	beq.n	80118ae <ucdr_deserialize_double+0x15e>
 80117d8:	78bb      	ldrb	r3, [r7, #2]
 80117da:	2e05      	cmp	r6, #5
 80117dc:	716b      	strb	r3, [r5, #5]
 80117de:	f105 0306 	add.w	r3, r5, #6
 80117e2:	d068      	beq.n	80118b6 <ucdr_deserialize_double+0x166>
 80117e4:	787b      	ldrb	r3, [r7, #1]
 80117e6:	2e06      	cmp	r6, #6
 80117e8:	71ab      	strb	r3, [r5, #6]
 80117ea:	f105 0307 	add.w	r3, r5, #7
 80117ee:	d066      	beq.n	80118be <ucdr_deserialize_double+0x16e>
 80117f0:	783b      	ldrb	r3, [r7, #0]
 80117f2:	71eb      	strb	r3, [r5, #7]
 80117f4:	6923      	ldr	r3, [r4, #16]
 80117f6:	2108      	movs	r1, #8
 80117f8:	68a2      	ldr	r2, [r4, #8]
 80117fa:	3308      	adds	r3, #8
 80117fc:	7da0      	ldrb	r0, [r4, #22]
 80117fe:	444a      	add	r2, r9
 8011800:	7561      	strb	r1, [r4, #21]
 8011802:	1b9e      	subs	r6, r3, r6
 8011804:	f080 0001 	eor.w	r0, r0, #1
 8011808:	60a2      	str	r2, [r4, #8]
 801180a:	6126      	str	r6, [r4, #16]
 801180c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011810:	2108      	movs	r1, #8
 8011812:	4620      	mov	r0, r4
 8011814:	f000 f86e 	bl	80118f4 <ucdr_check_final_buffer_behavior>
 8011818:	b310      	cbz	r0, 8011860 <ucdr_deserialize_double+0x110>
 801181a:	7d23      	ldrb	r3, [r4, #20]
 801181c:	2b01      	cmp	r3, #1
 801181e:	68a3      	ldr	r3, [r4, #8]
 8011820:	d023      	beq.n	801186a <ucdr_deserialize_double+0x11a>
 8011822:	79db      	ldrb	r3, [r3, #7]
 8011824:	702b      	strb	r3, [r5, #0]
 8011826:	68a3      	ldr	r3, [r4, #8]
 8011828:	799b      	ldrb	r3, [r3, #6]
 801182a:	706b      	strb	r3, [r5, #1]
 801182c:	68a3      	ldr	r3, [r4, #8]
 801182e:	795b      	ldrb	r3, [r3, #5]
 8011830:	70ab      	strb	r3, [r5, #2]
 8011832:	68a3      	ldr	r3, [r4, #8]
 8011834:	791b      	ldrb	r3, [r3, #4]
 8011836:	70eb      	strb	r3, [r5, #3]
 8011838:	68a3      	ldr	r3, [r4, #8]
 801183a:	78db      	ldrb	r3, [r3, #3]
 801183c:	712b      	strb	r3, [r5, #4]
 801183e:	68a3      	ldr	r3, [r4, #8]
 8011840:	789b      	ldrb	r3, [r3, #2]
 8011842:	716b      	strb	r3, [r5, #5]
 8011844:	68a3      	ldr	r3, [r4, #8]
 8011846:	785b      	ldrb	r3, [r3, #1]
 8011848:	71ab      	strb	r3, [r5, #6]
 801184a:	68a3      	ldr	r3, [r4, #8]
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	71eb      	strb	r3, [r5, #7]
 8011850:	2108      	movs	r1, #8
 8011852:	68a2      	ldr	r2, [r4, #8]
 8011854:	6923      	ldr	r3, [r4, #16]
 8011856:	440a      	add	r2, r1
 8011858:	7561      	strb	r1, [r4, #21]
 801185a:	440b      	add	r3, r1
 801185c:	60a2      	str	r2, [r4, #8]
 801185e:	6123      	str	r3, [r4, #16]
 8011860:	7da0      	ldrb	r0, [r4, #22]
 8011862:	f080 0001 	eor.w	r0, r0, #1
 8011866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	602a      	str	r2, [r5, #0]
 8011870:	606b      	str	r3, [r5, #4]
 8011872:	e7ed      	b.n	8011850 <ucdr_deserialize_double+0x100>
 8011874:	68a2      	ldr	r2, [r4, #8]
 8011876:	6923      	ldr	r3, [r4, #16]
 8011878:	1b92      	subs	r2, r2, r6
 801187a:	7da0      	ldrb	r0, [r4, #22]
 801187c:	1b9b      	subs	r3, r3, r6
 801187e:	f884 8015 	strb.w	r8, [r4, #21]
 8011882:	f080 0001 	eor.w	r0, r0, #1
 8011886:	60a2      	str	r2, [r4, #8]
 8011888:	6123      	str	r3, [r4, #16]
 801188a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801188e:	68a3      	ldr	r3, [r4, #8]
 8011890:	799b      	ldrb	r3, [r3, #6]
 8011892:	706b      	strb	r3, [r5, #1]
 8011894:	1cab      	adds	r3, r5, #2
 8011896:	68a2      	ldr	r2, [r4, #8]
 8011898:	7952      	ldrb	r2, [r2, #5]
 801189a:	f803 2b01 	strb.w	r2, [r3], #1
 801189e:	68a2      	ldr	r2, [r4, #8]
 80118a0:	7912      	ldrb	r2, [r2, #4]
 80118a2:	f803 2b01 	strb.w	r2, [r3], #1
 80118a6:	68a2      	ldr	r2, [r4, #8]
 80118a8:	78d2      	ldrb	r2, [r2, #3]
 80118aa:	f803 2b01 	strb.w	r2, [r3], #1
 80118ae:	68a2      	ldr	r2, [r4, #8]
 80118b0:	7892      	ldrb	r2, [r2, #2]
 80118b2:	f803 2b01 	strb.w	r2, [r3], #1
 80118b6:	68a2      	ldr	r2, [r4, #8]
 80118b8:	7852      	ldrb	r2, [r2, #1]
 80118ba:	f803 2b01 	strb.w	r2, [r3], #1
 80118be:	68a2      	ldr	r2, [r4, #8]
 80118c0:	7812      	ldrb	r2, [r2, #0]
 80118c2:	701a      	strb	r2, [r3, #0]
 80118c4:	e796      	b.n	80117f4 <ucdr_deserialize_double+0xa4>
 80118c6:	4639      	mov	r1, r7
 80118c8:	4632      	mov	r2, r6
 80118ca:	4628      	mov	r0, r5
 80118cc:	f001 fc95 	bl	80131fa <memcpy>
 80118d0:	464a      	mov	r2, r9
 80118d2:	19a8      	adds	r0, r5, r6
 80118d4:	68a1      	ldr	r1, [r4, #8]
 80118d6:	f001 fc90 	bl	80131fa <memcpy>
 80118da:	e78b      	b.n	80117f4 <ucdr_deserialize_double+0xa4>

080118dc <ucdr_check_buffer_available_for>:
 80118dc:	7d83      	ldrb	r3, [r0, #22]
 80118de:	b93b      	cbnz	r3, 80118f0 <ucdr_check_buffer_available_for+0x14>
 80118e0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80118e4:	4419      	add	r1, r3
 80118e6:	4288      	cmp	r0, r1
 80118e8:	bf34      	ite	cc
 80118ea:	2000      	movcc	r0, #0
 80118ec:	2001      	movcs	r0, #1
 80118ee:	4770      	bx	lr
 80118f0:	2000      	movs	r0, #0
 80118f2:	4770      	bx	lr

080118f4 <ucdr_check_final_buffer_behavior>:
 80118f4:	7d83      	ldrb	r3, [r0, #22]
 80118f6:	b943      	cbnz	r3, 801190a <ucdr_check_final_buffer_behavior+0x16>
 80118f8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80118fc:	b510      	push	{r4, lr}
 80118fe:	4291      	cmp	r1, r2
 8011900:	4604      	mov	r4, r0
 8011902:	d205      	bcs.n	8011910 <ucdr_check_final_buffer_behavior+0x1c>
 8011904:	2301      	movs	r3, #1
 8011906:	4618      	mov	r0, r3
 8011908:	bd10      	pop	{r4, pc}
 801190a:	2300      	movs	r3, #0
 801190c:	4618      	mov	r0, r3
 801190e:	4770      	bx	lr
 8011910:	6982      	ldr	r2, [r0, #24]
 8011912:	b13a      	cbz	r2, 8011924 <ucdr_check_final_buffer_behavior+0x30>
 8011914:	69c1      	ldr	r1, [r0, #28]
 8011916:	4790      	blx	r2
 8011918:	f080 0301 	eor.w	r3, r0, #1
 801191c:	75a0      	strb	r0, [r4, #22]
 801191e:	b2db      	uxtb	r3, r3
 8011920:	4618      	mov	r0, r3
 8011922:	bd10      	pop	{r4, pc}
 8011924:	2001      	movs	r0, #1
 8011926:	75a0      	strb	r0, [r4, #22]
 8011928:	e7fa      	b.n	8011920 <ucdr_check_final_buffer_behavior+0x2c>
 801192a:	bf00      	nop

0801192c <ucdr_alignment>:
 801192c:	fbb0 f2f1 	udiv	r2, r0, r1
 8011930:	fb02 0011 	mls	r0, r2, r1, r0
 8011934:	1e4b      	subs	r3, r1, #1
 8011936:	1a08      	subs	r0, r1, r0
 8011938:	4018      	ands	r0, r3
 801193a:	4770      	bx	lr

0801193c <ucdr_buffer_alignment>:
 801193c:	7d43      	ldrb	r3, [r0, #21]
 801193e:	428b      	cmp	r3, r1
 8011940:	d209      	bcs.n	8011956 <ucdr_buffer_alignment+0x1a>
 8011942:	6903      	ldr	r3, [r0, #16]
 8011944:	1e4a      	subs	r2, r1, #1
 8011946:	fbb3 f0f1 	udiv	r0, r3, r1
 801194a:	fb01 3010 	mls	r0, r1, r0, r3
 801194e:	1a09      	subs	r1, r1, r0
 8011950:	ea01 0002 	and.w	r0, r1, r2
 8011954:	4770      	bx	lr
 8011956:	2000      	movs	r0, #0
 8011958:	4770      	bx	lr
 801195a:	bf00      	nop

0801195c <ucdr_align_to>:
 801195c:	b538      	push	{r3, r4, r5, lr}
 801195e:	4604      	mov	r4, r0
 8011960:	460d      	mov	r5, r1
 8011962:	f7ff ffeb 	bl	801193c <ucdr_buffer_alignment>
 8011966:	68a3      	ldr	r3, [r4, #8]
 8011968:	7565      	strb	r5, [r4, #21]
 801196a:	181a      	adds	r2, r3, r0
 801196c:	6923      	ldr	r3, [r4, #16]
 801196e:	4418      	add	r0, r3
 8011970:	6863      	ldr	r3, [r4, #4]
 8011972:	4293      	cmp	r3, r2
 8011974:	6120      	str	r0, [r4, #16]
 8011976:	bf28      	it	cs
 8011978:	4613      	movcs	r3, r2
 801197a:	60a3      	str	r3, [r4, #8]
 801197c:	bd38      	pop	{r3, r4, r5, pc}
 801197e:	bf00      	nop

08011980 <ucdr_buffer_remaining>:
 8011980:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011984:	1a10      	subs	r0, r2, r0
 8011986:	4770      	bx	lr

08011988 <ucdr_check_final_buffer_behavior_array>:
 8011988:	b538      	push	{r3, r4, r5, lr}
 801198a:	7d83      	ldrb	r3, [r0, #22]
 801198c:	b9a3      	cbnz	r3, 80119b8 <ucdr_check_final_buffer_behavior_array+0x30>
 801198e:	4604      	mov	r4, r0
 8011990:	460d      	mov	r5, r1
 8011992:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011996:	429a      	cmp	r2, r3
 8011998:	d300      	bcc.n	801199c <ucdr_check_final_buffer_behavior_array+0x14>
 801199a:	b931      	cbnz	r1, 80119aa <ucdr_check_final_buffer_behavior_array+0x22>
 801199c:	4620      	mov	r0, r4
 801199e:	f7ff ffef 	bl	8011980 <ucdr_buffer_remaining>
 80119a2:	42a8      	cmp	r0, r5
 80119a4:	bf28      	it	cs
 80119a6:	4628      	movcs	r0, r5
 80119a8:	bd38      	pop	{r3, r4, r5, pc}
 80119aa:	6983      	ldr	r3, [r0, #24]
 80119ac:	b133      	cbz	r3, 80119bc <ucdr_check_final_buffer_behavior_array+0x34>
 80119ae:	69c1      	ldr	r1, [r0, #28]
 80119b0:	4798      	blx	r3
 80119b2:	75a0      	strb	r0, [r4, #22]
 80119b4:	2800      	cmp	r0, #0
 80119b6:	d0f1      	beq.n	801199c <ucdr_check_final_buffer_behavior_array+0x14>
 80119b8:	2000      	movs	r0, #0
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
 80119bc:	2301      	movs	r3, #1
 80119be:	7583      	strb	r3, [r0, #22]
 80119c0:	e7fa      	b.n	80119b8 <ucdr_check_final_buffer_behavior_array+0x30>
 80119c2:	bf00      	nop

080119c4 <ucdr_advance_buffer>:
 80119c4:	b538      	push	{r3, r4, r5, lr}
 80119c6:	4604      	mov	r4, r0
 80119c8:	460d      	mov	r5, r1
 80119ca:	f7ff ff87 	bl	80118dc <ucdr_check_buffer_available_for>
 80119ce:	b178      	cbz	r0, 80119f0 <ucdr_advance_buffer+0x2c>
 80119d0:	6923      	ldr	r3, [r4, #16]
 80119d2:	68a2      	ldr	r2, [r4, #8]
 80119d4:	442b      	add	r3, r5
 80119d6:	442a      	add	r2, r5
 80119d8:	6123      	str	r3, [r4, #16]
 80119da:	2301      	movs	r3, #1
 80119dc:	60a2      	str	r2, [r4, #8]
 80119de:	7563      	strb	r3, [r4, #21]
 80119e0:	bd38      	pop	{r3, r4, r5, pc}
 80119e2:	68a2      	ldr	r2, [r4, #8]
 80119e4:	1a2d      	subs	r5, r5, r0
 80119e6:	6923      	ldr	r3, [r4, #16]
 80119e8:	4402      	add	r2, r0
 80119ea:	4418      	add	r0, r3
 80119ec:	60a2      	str	r2, [r4, #8]
 80119ee:	6120      	str	r0, [r4, #16]
 80119f0:	4629      	mov	r1, r5
 80119f2:	2201      	movs	r2, #1
 80119f4:	4620      	mov	r0, r4
 80119f6:	f7ff ffc7 	bl	8011988 <ucdr_check_final_buffer_behavior_array>
 80119fa:	2800      	cmp	r0, #0
 80119fc:	d1f1      	bne.n	80119e2 <ucdr_advance_buffer+0x1e>
 80119fe:	2301      	movs	r3, #1
 8011a00:	7563      	strb	r3, [r4, #21]
 8011a02:	bd38      	pop	{r3, r4, r5, pc}

08011a04 <__default_zero_allocate>:
 8011a04:	f001 b802 	b.w	8012a0c <calloc>

08011a08 <__default_reallocate>:
 8011a08:	f001 b8ec 	b.w	8012be4 <realloc>

08011a0c <__default_deallocate>:
 8011a0c:	f001 b834 	b.w	8012a78 <free>

08011a10 <__default_allocate>:
 8011a10:	f001 b82a 	b.w	8012a68 <malloc>

08011a14 <rcutils_get_default_allocator>:
 8011a14:	b510      	push	{r4, lr}
 8011a16:	4c05      	ldr	r4, [pc, #20]	@ (8011a2c <rcutils_get_default_allocator+0x18>)
 8011a18:	4686      	mov	lr, r0
 8011a1a:	4684      	mov	ip, r0
 8011a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a22:	6823      	ldr	r3, [r4, #0]
 8011a24:	4670      	mov	r0, lr
 8011a26:	f8cc 3000 	str.w	r3, [ip]
 8011a2a:	bd10      	pop	{r4, pc}
 8011a2c:	24000df8 	.word	0x24000df8

08011a30 <get_message_typesupport_handle_function>:
 8011a30:	b510      	push	{r4, lr}
 8011a32:	4604      	mov	r4, r0
 8011a34:	6800      	ldr	r0, [r0, #0]
 8011a36:	f7ee fc53 	bl	80002e0 <strcmp>
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	bf0c      	ite	eq
 8011a3e:	4620      	moveq	r0, r4
 8011a40:	2000      	movne	r0, #0
 8011a42:	bd10      	pop	{r4, pc}

08011a44 <get_service_typesupport_handle_function>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	4604      	mov	r4, r0
 8011a48:	6800      	ldr	r0, [r0, #0]
 8011a4a:	f7ee fc49 	bl	80002e0 <strcmp>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	bf0c      	ite	eq
 8011a52:	4620      	moveq	r0, r4
 8011a54:	2000      	movne	r0, #0
 8011a56:	bd10      	pop	{r4, pc}

08011a58 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8011a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a5c:	6805      	ldr	r5, [r0, #0]
 8011a5e:	4604      	mov	r4, r0
 8011a60:	460e      	mov	r6, r1
 8011a62:	4628      	mov	r0, r5
 8011a64:	f7ee fc3c 	bl	80002e0 <strcmp>
 8011a68:	b1c8      	cbz	r0, 8011a9e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8011a6a:	4b11      	ldr	r3, [pc, #68]	@ (8011ab0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	429d      	cmp	r5, r3
 8011a70:	d112      	bne.n	8011a98 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011a72:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011a76:	f8d8 4000 	ldr.w	r4, [r8]
 8011a7a:	b16c      	cbz	r4, 8011a98 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011a7c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011a80:	2700      	movs	r7, #0
 8011a82:	3d04      	subs	r5, #4
 8011a84:	4631      	mov	r1, r6
 8011a86:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011a8a:	f7ee fc29 	bl	80002e0 <strcmp>
 8011a8e:	00bb      	lsls	r3, r7, #2
 8011a90:	b140      	cbz	r0, 8011aa4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8011a92:	3701      	adds	r7, #1
 8011a94:	42bc      	cmp	r4, r7
 8011a96:	d1f5      	bne.n	8011a84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8011a98:	2000      	movs	r0, #0
 8011a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aa4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aac:	58d3      	ldr	r3, [r2, r3]
 8011aae:	4718      	bx	r3
 8011ab0:	24000e0c 	.word	0x24000e0c

08011ab4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8011ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ab8:	6805      	ldr	r5, [r0, #0]
 8011aba:	4604      	mov	r4, r0
 8011abc:	460e      	mov	r6, r1
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f7ee fc0e 	bl	80002e0 <strcmp>
 8011ac4:	b1c8      	cbz	r0, 8011afa <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8011ac6:	4b11      	ldr	r3, [pc, #68]	@ (8011b0c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	429d      	cmp	r5, r3
 8011acc:	d112      	bne.n	8011af4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8011ace:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011ad2:	f8d8 4000 	ldr.w	r4, [r8]
 8011ad6:	b16c      	cbz	r4, 8011af4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8011ad8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011adc:	2700      	movs	r7, #0
 8011ade:	3d04      	subs	r5, #4
 8011ae0:	4631      	mov	r1, r6
 8011ae2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011ae6:	f7ee fbfb 	bl	80002e0 <strcmp>
 8011aea:	00bb      	lsls	r3, r7, #2
 8011aec:	b140      	cbz	r0, 8011b00 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8011aee:	3701      	adds	r7, #1
 8011af0:	42bc      	cmp	r4, r7
 8011af2:	d1f5      	bne.n	8011ae0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8011af4:	2000      	movs	r0, #0
 8011af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011afa:	4620      	mov	r0, r4
 8011afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b00:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b08:	58d3      	ldr	r3, [r2, r3]
 8011b0a:	4718      	bx	r3
 8011b0c:	24000e0c 	.word	0x24000e0c

08011b10 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8011b10:	f000 bcb4 	b.w	801247c <std_msgs__msg__Header__init>

08011b14 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8011b14:	f000 bcd6 	b.w	80124c4 <std_msgs__msg__Header__fini>

08011b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011b18:	b508      	push	{r3, lr}
 8011b1a:	f7fe ffd3 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b1e:	4b06      	ldr	r3, [pc, #24]	@ (8011b38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011b20:	4906      	ldr	r1, [pc, #24]	@ (8011b3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8011b22:	681a      	ldr	r2, [r3, #0]
 8011b24:	60c8      	str	r0, [r1, #12]
 8011b26:	b10a      	cbz	r2, 8011b2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8011b28:	4803      	ldr	r0, [pc, #12]	@ (8011b38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011b2a:	bd08      	pop	{r3, pc}
 8011b2c:	4a04      	ldr	r2, [pc, #16]	@ (8011b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8011b2e:	4802      	ldr	r0, [pc, #8]	@ (8011b38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011b30:	6812      	ldr	r2, [r2, #0]
 8011b32:	601a      	str	r2, [r3, #0]
 8011b34:	bd08      	pop	{r3, pc}
 8011b36:	bf00      	nop
 8011b38:	24000e8c 	.word	0x24000e8c
 8011b3c:	24000e14 	.word	0x24000e14
 8011b40:	24000e10 	.word	0x24000e10

08011b44 <_Header__max_serialized_size>:
 8011b44:	b500      	push	{lr}
 8011b46:	b083      	sub	sp, #12
 8011b48:	2301      	movs	r3, #1
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	f10d 0007 	add.w	r0, sp, #7
 8011b50:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b54:	f7ff f814 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8011b58:	b003      	add	sp, #12
 8011b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b5e:	bf00      	nop

08011b60 <get_serialized_size_std_msgs__msg__Header>:
 8011b60:	b570      	push	{r4, r5, r6, lr}
 8011b62:	4605      	mov	r5, r0
 8011b64:	b168      	cbz	r0, 8011b82 <get_serialized_size_std_msgs__msg__Header+0x22>
 8011b66:	460c      	mov	r4, r1
 8011b68:	f7fe ffba 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b6c:	2104      	movs	r1, #4
 8011b6e:	1826      	adds	r6, r4, r0
 8011b70:	f1c4 0405 	rsb	r4, r4, #5
 8011b74:	4630      	mov	r0, r6
 8011b76:	f7ff fed9 	bl	801192c <ucdr_alignment>
 8011b7a:	68e9      	ldr	r1, [r5, #12]
 8011b7c:	440c      	add	r4, r1
 8011b7e:	4404      	add	r4, r0
 8011b80:	19a0      	adds	r0, r4, r6
 8011b82:	bd70      	pop	{r4, r5, r6, pc}

08011b84 <_Header__cdr_deserialize>:
 8011b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b86:	460c      	mov	r4, r1
 8011b88:	b083      	sub	sp, #12
 8011b8a:	b1e9      	cbz	r1, 8011bc8 <_Header__cdr_deserialize+0x44>
 8011b8c:	4606      	mov	r6, r0
 8011b8e:	f7ff f80b 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b92:	4603      	mov	r3, r0
 8011b94:	4621      	mov	r1, r4
 8011b96:	4630      	mov	r0, r6
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	4798      	blx	r3
 8011b9e:	6927      	ldr	r7, [r4, #16]
 8011ba0:	ab01      	add	r3, sp, #4
 8011ba2:	68a1      	ldr	r1, [r4, #8]
 8011ba4:	463a      	mov	r2, r7
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	f000 fc4e 	bl	8012448 <ucdr_deserialize_sequence_char>
 8011bac:	9b01      	ldr	r3, [sp, #4]
 8011bae:	4605      	mov	r5, r0
 8011bb0:	b920      	cbnz	r0, 8011bbc <_Header__cdr_deserialize+0x38>
 8011bb2:	429f      	cmp	r7, r3
 8011bb4:	d30c      	bcc.n	8011bd0 <_Header__cdr_deserialize+0x4c>
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	b003      	add	sp, #12
 8011bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bbc:	b103      	cbz	r3, 8011bc0 <_Header__cdr_deserialize+0x3c>
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	60e3      	str	r3, [r4, #12]
 8011bc4:	b003      	add	sp, #12
 8011bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc8:	460d      	mov	r5, r1
 8011bca:	4628      	mov	r0, r5
 8011bcc:	b003      	add	sp, #12
 8011bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bd0:	2101      	movs	r1, #1
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	75b5      	strb	r5, [r6, #22]
 8011bd6:	7571      	strb	r1, [r6, #21]
 8011bd8:	60e5      	str	r5, [r4, #12]
 8011bda:	f7ff febf 	bl	801195c <ucdr_align_to>
 8011bde:	4630      	mov	r0, r6
 8011be0:	9901      	ldr	r1, [sp, #4]
 8011be2:	f7ff feef 	bl	80119c4 <ucdr_advance_buffer>
 8011be6:	4628      	mov	r0, r5
 8011be8:	b003      	add	sp, #12
 8011bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011bec <_Header__cdr_serialize>:
 8011bec:	b308      	cbz	r0, 8011c32 <_Header__cdr_serialize+0x46>
 8011bee:	b570      	push	{r4, r5, r6, lr}
 8011bf0:	4604      	mov	r4, r0
 8011bf2:	460d      	mov	r5, r1
 8011bf4:	f7fe ffd8 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	4629      	mov	r1, r5
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	689b      	ldr	r3, [r3, #8]
 8011c02:	4798      	blx	r3
 8011c04:	68a6      	ldr	r6, [r4, #8]
 8011c06:	b15e      	cbz	r6, 8011c20 <_Header__cdr_serialize+0x34>
 8011c08:	4630      	mov	r0, r6
 8011c0a:	f7ee fb73 	bl	80002f4 <strlen>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	1c42      	adds	r2, r0, #1
 8011c12:	4631      	mov	r1, r6
 8011c14:	4628      	mov	r0, r5
 8011c16:	60e3      	str	r3, [r4, #12]
 8011c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c1c:	f000 bc02 	b.w	8012424 <ucdr_serialize_sequence_char>
 8011c20:	4633      	mov	r3, r6
 8011c22:	4632      	mov	r2, r6
 8011c24:	4631      	mov	r1, r6
 8011c26:	4628      	mov	r0, r5
 8011c28:	60e3      	str	r3, [r4, #12]
 8011c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c2e:	f000 bbf9 	b.w	8012424 <ucdr_serialize_sequence_char>
 8011c32:	4770      	bx	lr

08011c34 <_Header__get_serialized_size>:
 8011c34:	b538      	push	{r3, r4, r5, lr}
 8011c36:	4604      	mov	r4, r0
 8011c38:	b150      	cbz	r0, 8011c50 <_Header__get_serialized_size+0x1c>
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	f7fe ff50 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c40:	2104      	movs	r1, #4
 8011c42:	4605      	mov	r5, r0
 8011c44:	f7ff fe72 	bl	801192c <ucdr_alignment>
 8011c48:	68e2      	ldr	r2, [r4, #12]
 8011c4a:	3205      	adds	r2, #5
 8011c4c:	1953      	adds	r3, r2, r5
 8011c4e:	4418      	add	r0, r3
 8011c50:	bd38      	pop	{r3, r4, r5, pc}
 8011c52:	bf00      	nop

08011c54 <max_serialized_size_std_msgs__msg__Header>:
 8011c54:	2301      	movs	r3, #1
 8011c56:	b510      	push	{r4, lr}
 8011c58:	7003      	strb	r3, [r0, #0]
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	f7fe ff90 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8011c60:	2300      	movs	r3, #0
 8011c62:	7023      	strb	r3, [r4, #0]
 8011c64:	bd10      	pop	{r4, pc}
 8011c66:	bf00      	nop

08011c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011c68:	4800      	ldr	r0, [pc, #0]	@ (8011c6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011c6a:	4770      	bx	lr
 8011c6c:	24000e98 	.word	0x24000e98

08011c70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011c70:	4a02      	ldr	r2, [pc, #8]	@ (8011c7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8011c72:	4b03      	ldr	r3, [pc, #12]	@ (8011c80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8011c74:	6812      	ldr	r2, [r2, #0]
 8011c76:	601a      	str	r2, [r3, #0]
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	24000e0c 	.word	0x24000e0c
 8011c80:	24000ec8 	.word	0x24000ec8

08011c84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011c84:	4a02      	ldr	r2, [pc, #8]	@ (8011c90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 8011c86:	4b03      	ldr	r3, [pc, #12]	@ (8011c94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 8011c88:	6812      	ldr	r2, [r2, #0]
 8011c8a:	601a      	str	r2, [r3, #0]
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop
 8011c90:	24000e0c 	.word	0x24000e0c
 8011c94:	24000edc 	.word	0x24000edc

08011c98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011c98:	4a02      	ldr	r2, [pc, #8]	@ (8011ca4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8011c9a:	4b03      	ldr	r3, [pc, #12]	@ (8011ca8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8011c9c:	6812      	ldr	r2, [r2, #0]
 8011c9e:	601a      	str	r2, [r3, #0]
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop
 8011ca4:	24000e0c 	.word	0x24000e0c
 8011ca8:	24000ef0 	.word	0x24000ef0

08011cac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8011cac:	4a02      	ldr	r2, [pc, #8]	@ (8011cb8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8011cae:	4b03      	ldr	r3, [pc, #12]	@ (8011cbc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8011cb0:	6812      	ldr	r2, [r2, #0]
 8011cb2:	601a      	str	r2, [r3, #0]
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	24000e0c 	.word	0x24000e0c
 8011cbc:	24000f04 	.word	0x24000f04

08011cc0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8011cc0:	f000 bc0c 	b.w	80124dc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08011cc4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8011cc4:	f000 bc2e 	b.w	8012524 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08011cc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011cc8:	b510      	push	{r4, lr}
 8011cca:	4c08      	ldr	r4, [pc, #32]	@ (8011cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8011ccc:	f7ff ff24 	bl	8011b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011cd0:	60e0      	str	r0, [r4, #12]
 8011cd2:	f000 fc93 	bl	80125fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8011cd6:	4b06      	ldr	r3, [pc, #24]	@ (8011cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8011cd8:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	b10a      	cbz	r2, 8011ce2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8011cde:	4804      	ldr	r0, [pc, #16]	@ (8011cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8011ce0:	bd10      	pop	{r4, pc}
 8011ce2:	4a04      	ldr	r2, [pc, #16]	@ (8011cf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8011ce4:	4802      	ldr	r0, [pc, #8]	@ (8011cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8011ce6:	6812      	ldr	r2, [r2, #0]
 8011ce8:	601a      	str	r2, [r3, #0]
 8011cea:	bd10      	pop	{r4, pc}
 8011cec:	24000f10 	.word	0x24000f10
 8011cf0:	24000f88 	.word	0x24000f88
 8011cf4:	24000e10 	.word	0x24000e10

08011cf8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8011cf8:	f000 bc20 	b.w	801253c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08011cfc <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8011cfc:	f000 bc42 	b.w	8012584 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08011d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011d00:	b510      	push	{r4, lr}
 8011d02:	4c08      	ldr	r4, [pc, #32]	@ (8011d24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8011d04:	f7ff ff08 	bl	8011b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011d08:	60e0      	str	r0, [r4, #12]
 8011d0a:	f000 fc89 	bl	8012620 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8011d0e:	4b06      	ldr	r3, [pc, #24]	@ (8011d28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8011d10:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	b10a      	cbz	r2, 8011d1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8011d16:	4804      	ldr	r0, [pc, #16]	@ (8011d28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8011d18:	bd10      	pop	{r4, pc}
 8011d1a:	4a04      	ldr	r2, [pc, #16]	@ (8011d2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 8011d1c:	4802      	ldr	r0, [pc, #8]	@ (8011d28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8011d1e:	6812      	ldr	r2, [r2, #0]
 8011d20:	601a      	str	r2, [r3, #0]
 8011d22:	bd10      	pop	{r4, pc}
 8011d24:	24000f94 	.word	0x24000f94
 8011d28:	2400100c 	.word	0x2400100c
 8011d2c:	24000e10 	.word	0x24000e10

08011d30 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8011d30:	f000 bc34 	b.w	801259c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08011d34 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8011d34:	f000 bc44 	b.w	80125c0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08011d38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011d38:	b508      	push	{r3, lr}
 8011d3a:	f7fe fec3 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d3e:	4b06      	ldr	r3, [pc, #24]	@ (8011d58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8011d40:	4906      	ldr	r1, [pc, #24]	@ (8011d5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8011d42:	681a      	ldr	r2, [r3, #0]
 8011d44:	60c8      	str	r0, [r1, #12]
 8011d46:	b10a      	cbz	r2, 8011d4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8011d48:	4803      	ldr	r0, [pc, #12]	@ (8011d58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8011d4a:	bd08      	pop	{r3, pc}
 8011d4c:	4a04      	ldr	r2, [pc, #16]	@ (8011d60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 8011d4e:	4802      	ldr	r0, [pc, #8]	@ (8011d58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8011d50:	6812      	ldr	r2, [r2, #0]
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	bd08      	pop	{r3, pc}
 8011d56:	bf00      	nop
 8011d58:	24001090 	.word	0x24001090
 8011d5c:	24001018 	.word	0x24001018
 8011d60:	24000e10 	.word	0x24000e10

08011d64 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8011d64:	f000 bc30 	b.w	80125c8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08011d68 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8011d68:	f000 bc40 	b.w	80125ec <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08011d6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8011d6c:	b508      	push	{r3, lr}
 8011d6e:	f7fe fea9 	bl	8010ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d72:	4b06      	ldr	r3, [pc, #24]	@ (8011d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8011d74:	4906      	ldr	r1, [pc, #24]	@ (8011d90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	60c8      	str	r0, [r1, #12]
 8011d7a:	b10a      	cbz	r2, 8011d80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8011d7c:	4803      	ldr	r0, [pc, #12]	@ (8011d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8011d7e:	bd08      	pop	{r3, pc}
 8011d80:	4a04      	ldr	r2, [pc, #16]	@ (8011d94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8011d82:	4802      	ldr	r0, [pc, #8]	@ (8011d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8011d84:	6812      	ldr	r2, [r2, #0]
 8011d86:	601a      	str	r2, [r3, #0]
 8011d88:	bd08      	pop	{r3, pc}
 8011d8a:	bf00      	nop
 8011d8c:	24001114 	.word	0x24001114
 8011d90:	2400109c 	.word	0x2400109c
 8011d94:	24000e10 	.word	0x24000e10

08011d98 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011d98:	b538      	push	{r3, r4, r5, lr}
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	b150      	cbz	r0, 8011db4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8011d9e:	460d      	mov	r5, r1
 8011da0:	f7ff fede 	bl	8011b60 <get_serialized_size_std_msgs__msg__Header>
 8011da4:	4603      	mov	r3, r0
 8011da6:	f104 0018 	add.w	r0, r4, #24
 8011daa:	461c      	mov	r4, r3
 8011dac:	18e9      	adds	r1, r5, r3
 8011dae:	f000 fc45 	bl	801263c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8011db2:	4420      	add	r0, r4
 8011db4:	bd38      	pop	{r3, r4, r5, pc}
 8011db6:	bf00      	nop

08011db8 <_ActuationCommandStamped__cdr_deserialize>:
 8011db8:	b570      	push	{r4, r5, r6, lr}
 8011dba:	460c      	mov	r4, r1
 8011dbc:	b199      	cbz	r1, 8011de6 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8011dbe:	4605      	mov	r5, r0
 8011dc0:	f7ff ff52 	bl	8011c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	4621      	mov	r1, r4
 8011dc8:	4628      	mov	r0, r5
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	4798      	blx	r3
 8011dd0:	f000 fcbc 	bl	801274c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	f104 0118 	add.w	r1, r4, #24
 8011dda:	4628      	mov	r0, r5
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	4718      	bx	r3
 8011de6:	4608      	mov	r0, r1
 8011de8:	bd70      	pop	{r4, r5, r6, pc}
 8011dea:	bf00      	nop

08011dec <_ActuationCommandStamped__cdr_serialize>:
 8011dec:	b510      	push	{r4, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	9101      	str	r1, [sp, #4]
 8011df2:	b1a0      	cbz	r0, 8011e1e <_ActuationCommandStamped__cdr_serialize+0x32>
 8011df4:	4604      	mov	r4, r0
 8011df6:	f7ff ff37 	bl	8011c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	9901      	ldr	r1, [sp, #4]
 8011dfe:	4620      	mov	r0, r4
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	4798      	blx	r3
 8011e06:	f000 fca1 	bl	801274c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	9901      	ldr	r1, [sp, #4]
 8011e0e:	f104 0018 	add.w	r0, r4, #24
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	689b      	ldr	r3, [r3, #8]
 8011e16:	b002      	add	sp, #8
 8011e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e1c:	4718      	bx	r3
 8011e1e:	b002      	add	sp, #8
 8011e20:	bd10      	pop	{r4, pc}
 8011e22:	bf00      	nop

08011e24 <_ActuationCommandStamped__get_serialized_size>:
 8011e24:	b510      	push	{r4, lr}
 8011e26:	4604      	mov	r4, r0
 8011e28:	b148      	cbz	r0, 8011e3e <_ActuationCommandStamped__get_serialized_size+0x1a>
 8011e2a:	2100      	movs	r1, #0
 8011e2c:	f7ff fe98 	bl	8011b60 <get_serialized_size_std_msgs__msg__Header>
 8011e30:	4601      	mov	r1, r0
 8011e32:	f104 0018 	add.w	r0, r4, #24
 8011e36:	460c      	mov	r4, r1
 8011e38:	f000 fc00 	bl	801263c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8011e3c:	4420      	add	r0, r4
 8011e3e:	bd10      	pop	{r4, pc}

08011e40 <_ActuationCommandStamped__max_serialized_size>:
 8011e40:	b510      	push	{r4, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	2301      	movs	r3, #1
 8011e46:	2100      	movs	r1, #0
 8011e48:	f10d 0007 	add.w	r0, sp, #7
 8011e4c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011e50:	f7ff ff00 	bl	8011c54 <max_serialized_size_std_msgs__msg__Header>
 8011e54:	4604      	mov	r4, r0
 8011e56:	f10d 0007 	add.w	r0, sp, #7
 8011e5a:	4621      	mov	r1, r4
 8011e5c:	f000 fc5c 	bl	8012718 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8011e60:	4420      	add	r0, r4
 8011e62:	b002      	add	sp, #8
 8011e64:	bd10      	pop	{r4, pc}
 8011e66:	bf00      	nop

08011e68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011e68:	4800      	ldr	r0, [pc, #0]	@ (8011e6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8011e6a:	4770      	bx	lr
 8011e6c:	24001120 	.word	0x24001120

08011e70 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011e70:	b538      	push	{r3, r4, r5, lr}
 8011e72:	4604      	mov	r4, r0
 8011e74:	b150      	cbz	r0, 8011e8c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8011e76:	460d      	mov	r5, r1
 8011e78:	f7ff fe72 	bl	8011b60 <get_serialized_size_std_msgs__msg__Header>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	f104 0018 	add.w	r0, r4, #24
 8011e82:	461c      	mov	r4, r3
 8011e84:	18e9      	adds	r1, r5, r3
 8011e86:	f000 fc65 	bl	8012754 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011e8a:	4420      	add	r0, r4
 8011e8c:	bd38      	pop	{r3, r4, r5, pc}
 8011e8e:	bf00      	nop

08011e90 <_ActuationStatusStamped__cdr_deserialize>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	460c      	mov	r4, r1
 8011e94:	b199      	cbz	r1, 8011ebe <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8011e96:	4605      	mov	r5, r0
 8011e98:	f7ff fee6 	bl	8011c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	4621      	mov	r1, r4
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	4798      	blx	r3
 8011ea8:	f000 fcdc 	bl	8012864 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8011eac:	4603      	mov	r3, r0
 8011eae:	f104 0118 	add.w	r1, r4, #24
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	4718      	bx	r3
 8011ebe:	4608      	mov	r0, r1
 8011ec0:	bd70      	pop	{r4, r5, r6, pc}
 8011ec2:	bf00      	nop

08011ec4 <_ActuationStatusStamped__cdr_serialize>:
 8011ec4:	b510      	push	{r4, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	9101      	str	r1, [sp, #4]
 8011eca:	b1a0      	cbz	r0, 8011ef6 <_ActuationStatusStamped__cdr_serialize+0x32>
 8011ecc:	4604      	mov	r4, r0
 8011ece:	f7ff fecb 	bl	8011c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	9901      	ldr	r1, [sp, #4]
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	685b      	ldr	r3, [r3, #4]
 8011eda:	689b      	ldr	r3, [r3, #8]
 8011edc:	4798      	blx	r3
 8011ede:	f000 fcc1 	bl	8012864 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	9901      	ldr	r1, [sp, #4]
 8011ee6:	f104 0018 	add.w	r0, r4, #24
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	b002      	add	sp, #8
 8011ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ef4:	4718      	bx	r3
 8011ef6:	b002      	add	sp, #8
 8011ef8:	bd10      	pop	{r4, pc}
 8011efa:	bf00      	nop

08011efc <_ActuationStatusStamped__get_serialized_size>:
 8011efc:	b510      	push	{r4, lr}
 8011efe:	4604      	mov	r4, r0
 8011f00:	b148      	cbz	r0, 8011f16 <_ActuationStatusStamped__get_serialized_size+0x1a>
 8011f02:	2100      	movs	r1, #0
 8011f04:	f7ff fe2c 	bl	8011b60 <get_serialized_size_std_msgs__msg__Header>
 8011f08:	4601      	mov	r1, r0
 8011f0a:	f104 0018 	add.w	r0, r4, #24
 8011f0e:	460c      	mov	r4, r1
 8011f10:	f000 fc20 	bl	8012754 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011f14:	4420      	add	r0, r4
 8011f16:	bd10      	pop	{r4, pc}

08011f18 <_ActuationStatusStamped__max_serialized_size>:
 8011f18:	b510      	push	{r4, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	2100      	movs	r1, #0
 8011f20:	f10d 0007 	add.w	r0, sp, #7
 8011f24:	f88d 3007 	strb.w	r3, [sp, #7]
 8011f28:	f7ff fe94 	bl	8011c54 <max_serialized_size_std_msgs__msg__Header>
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	f10d 0007 	add.w	r0, sp, #7
 8011f32:	4621      	mov	r1, r4
 8011f34:	f000 fc7c 	bl	8012830 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011f38:	4420      	add	r0, r4
 8011f3a:	b002      	add	sp, #8
 8011f3c:	bd10      	pop	{r4, pc}
 8011f3e:	bf00      	nop

08011f40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011f40:	4800      	ldr	r0, [pc, #0]	@ (8011f44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8011f42:	4770      	bx	lr
 8011f44:	24001148 	.word	0x24001148

08011f48 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011f48:	b538      	push	{r3, r4, r5, lr}
 8011f4a:	b158      	cbz	r0, 8011f64 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8011f4c:	460d      	mov	r5, r1
 8011f4e:	f7fe fdc7 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011f52:	2104      	movs	r1, #4
 8011f54:	182c      	adds	r4, r5, r0
 8011f56:	f1c5 0504 	rsb	r5, r5, #4
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	f7ff fce6 	bl	801192c <ucdr_alignment>
 8011f60:	4428      	add	r0, r5
 8011f62:	4420      	add	r0, r4
 8011f64:	bd38      	pop	{r3, r4, r5, pc}
 8011f66:	bf00      	nop

08011f68 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8011f68:	b538      	push	{r3, r4, r5, lr}
 8011f6a:	460c      	mov	r4, r1
 8011f6c:	b179      	cbz	r1, 8011f8e <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8011f6e:	4605      	mov	r5, r0
 8011f70:	f7fe fe1a 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011f74:	4603      	mov	r3, r0
 8011f76:	4621      	mov	r1, r4
 8011f78:	4628      	mov	r0, r5
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	4798      	blx	r3
 8011f80:	f104 0108 	add.w	r1, r4, #8
 8011f84:	4628      	mov	r0, r5
 8011f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f8a:	f7ff ba81 	b.w	8011490 <ucdr_deserialize_float>
 8011f8e:	4608      	mov	r0, r1
 8011f90:	bd38      	pop	{r3, r4, r5, pc}
 8011f92:	bf00      	nop

08011f94 <_SteeringWheelStatusStamped__cdr_serialize>:
 8011f94:	b188      	cbz	r0, 8011fba <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8011f96:	b538      	push	{r3, r4, r5, lr}
 8011f98:	4604      	mov	r4, r0
 8011f9a:	460d      	mov	r5, r1
 8011f9c:	f7fe fe04 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	685b      	ldr	r3, [r3, #4]
 8011fa8:	689b      	ldr	r3, [r3, #8]
 8011faa:	4798      	blx	r3
 8011fac:	ed94 0a02 	vldr	s0, [r4, #8]
 8011fb0:	4628      	mov	r0, r5
 8011fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fb6:	f7ff b9d3 	b.w	8011360 <ucdr_serialize_float>
 8011fba:	4770      	bx	lr

08011fbc <_SteeringWheelStatusStamped__get_serialized_size>:
 8011fbc:	b150      	cbz	r0, 8011fd4 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8011fbe:	2100      	movs	r1, #0
 8011fc0:	b510      	push	{r4, lr}
 8011fc2:	f7fe fd8d 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	2104      	movs	r1, #4
 8011fca:	f7ff fcaf 	bl	801192c <ucdr_alignment>
 8011fce:	4420      	add	r0, r4
 8011fd0:	3004      	adds	r0, #4
 8011fd2:	bd10      	pop	{r4, pc}
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop

08011fd8 <_SteeringWheelStatusStamped__max_serialized_size>:
 8011fd8:	b510      	push	{r4, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	2301      	movs	r3, #1
 8011fde:	2100      	movs	r1, #0
 8011fe0:	f10d 0007 	add.w	r0, sp, #7
 8011fe4:	f88d 3007 	strb.w	r3, [sp, #7]
 8011fe8:	f7fe fdca 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 8011fec:	4604      	mov	r4, r0
 8011fee:	2104      	movs	r1, #4
 8011ff0:	f7ff fc9c 	bl	801192c <ucdr_alignment>
 8011ff4:	4420      	add	r0, r4
 8011ff6:	3004      	adds	r0, #4
 8011ff8:	b002      	add	sp, #8
 8011ffa:	bd10      	pop	{r4, pc}

08011ffc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011ffc:	4800      	ldr	r0, [pc, #0]	@ (8012000 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8011ffe:	4770      	bx	lr
 8012000:	24001170 	.word	0x24001170

08012004 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012004:	b538      	push	{r3, r4, r5, lr}
 8012006:	b158      	cbz	r0, 8012020 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8012008:	460d      	mov	r5, r1
 801200a:	f7fe fd69 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 801200e:	2101      	movs	r1, #1
 8012010:	182c      	adds	r4, r5, r0
 8012012:	f1c5 0501 	rsb	r5, r5, #1
 8012016:	4620      	mov	r0, r4
 8012018:	f7ff fc88 	bl	801192c <ucdr_alignment>
 801201c:	4428      	add	r0, r5
 801201e:	4420      	add	r0, r4
 8012020:	bd38      	pop	{r3, r4, r5, pc}
 8012022:	bf00      	nop

08012024 <_VehicleEmergencyStamped__cdr_deserialize>:
 8012024:	b538      	push	{r3, r4, r5, lr}
 8012026:	460c      	mov	r4, r1
 8012028:	b179      	cbz	r1, 801204a <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 801202a:	4605      	mov	r5, r0
 801202c:	f7fe fdbc 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012030:	4603      	mov	r3, r0
 8012032:	4621      	mov	r1, r4
 8012034:	4628      	mov	r0, r5
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	4798      	blx	r3
 801203c:	f104 0108 	add.w	r1, r4, #8
 8012040:	4628      	mov	r0, r5
 8012042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012046:	f7fe bdc9 	b.w	8010bdc <ucdr_deserialize_bool>
 801204a:	4608      	mov	r0, r1
 801204c:	bd38      	pop	{r3, r4, r5, pc}
 801204e:	bf00      	nop

08012050 <_VehicleEmergencyStamped__cdr_serialize>:
 8012050:	b180      	cbz	r0, 8012074 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8012052:	b538      	push	{r3, r4, r5, lr}
 8012054:	4604      	mov	r4, r0
 8012056:	460d      	mov	r5, r1
 8012058:	f7fe fda6 	bl	8010ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801205c:	4603      	mov	r3, r0
 801205e:	4629      	mov	r1, r5
 8012060:	4620      	mov	r0, r4
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	689b      	ldr	r3, [r3, #8]
 8012066:	4798      	blx	r3
 8012068:	7a21      	ldrb	r1, [r4, #8]
 801206a:	4628      	mov	r0, r5
 801206c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012070:	f7fe bd9e 	b.w	8010bb0 <ucdr_serialize_bool>
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop

08012078 <_VehicleEmergencyStamped__get_serialized_size>:
 8012078:	b150      	cbz	r0, 8012090 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 801207a:	2100      	movs	r1, #0
 801207c:	b510      	push	{r4, lr}
 801207e:	f7fe fd2f 	bl	8010ae0 <get_serialized_size_builtin_interfaces__msg__Time>
 8012082:	4604      	mov	r4, r0
 8012084:	2101      	movs	r1, #1
 8012086:	f7ff fc51 	bl	801192c <ucdr_alignment>
 801208a:	4420      	add	r0, r4
 801208c:	3001      	adds	r0, #1
 801208e:	bd10      	pop	{r4, pc}
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop

08012094 <_VehicleEmergencyStamped__max_serialized_size>:
 8012094:	b510      	push	{r4, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	2401      	movs	r4, #1
 801209a:	2100      	movs	r1, #0
 801209c:	f10d 0007 	add.w	r0, sp, #7
 80120a0:	f88d 4007 	strb.w	r4, [sp, #7]
 80120a4:	f7fe fd6c 	bl	8010b80 <max_serialized_size_builtin_interfaces__msg__Time>
 80120a8:	4621      	mov	r1, r4
 80120aa:	4604      	mov	r4, r0
 80120ac:	f7ff fc3e 	bl	801192c <ucdr_alignment>
 80120b0:	4420      	add	r0, r4
 80120b2:	3001      	adds	r0, #1
 80120b4:	b002      	add	sp, #8
 80120b6:	bd10      	pop	{r4, pc}

080120b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80120b8:	4800      	ldr	r0, [pc, #0]	@ (80120bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 80120ba:	4770      	bx	lr
 80120bc:	24001198 	.word	0x24001198

080120c0 <autoware_control_msgs__msg__Control__init>:
 80120c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c4:	4605      	mov	r5, r0
 80120c6:	b3c0      	cbz	r0, 801213a <autoware_control_msgs__msg__Control__init+0x7a>
 80120c8:	f000 f9a6 	bl	8012418 <builtin_interfaces__msg__Time__init>
 80120cc:	4604      	mov	r4, r0
 80120ce:	b310      	cbz	r0, 8012116 <autoware_control_msgs__msg__Control__init+0x56>
 80120d0:	f105 0608 	add.w	r6, r5, #8
 80120d4:	4630      	mov	r0, r6
 80120d6:	f000 f99f 	bl	8012418 <builtin_interfaces__msg__Time__init>
 80120da:	4604      	mov	r4, r0
 80120dc:	2800      	cmp	r0, #0
 80120de:	d040      	beq.n	8012162 <autoware_control_msgs__msg__Control__init+0xa2>
 80120e0:	f105 0710 	add.w	r7, r5, #16
 80120e4:	4638      	mov	r0, r7
 80120e6:	f000 f855 	bl	8012194 <autoware_control_msgs__msg__Lateral__init>
 80120ea:	4604      	mov	r4, r0
 80120ec:	b348      	cbz	r0, 8012142 <autoware_control_msgs__msg__Control__init+0x82>
 80120ee:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 80120f2:	4640      	mov	r0, r8
 80120f4:	f000 f87e 	bl	80121f4 <autoware_control_msgs__msg__Longitudinal__init>
 80120f8:	4604      	mov	r4, r0
 80120fa:	b9d8      	cbnz	r0, 8012134 <autoware_control_msgs__msg__Control__init+0x74>
 80120fc:	4628      	mov	r0, r5
 80120fe:	f000 f98f 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012102:	4630      	mov	r0, r6
 8012104:	f000 f98c 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012108:	4638      	mov	r0, r7
 801210a:	f000 f867 	bl	80121dc <autoware_control_msgs__msg__Lateral__fini>
 801210e:	4640      	mov	r0, r8
 8012110:	f000 f894 	bl	801223c <autoware_control_msgs__msg__Longitudinal__fini>
 8012114:	e00e      	b.n	8012134 <autoware_control_msgs__msg__Control__init+0x74>
 8012116:	4628      	mov	r0, r5
 8012118:	f000 f982 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 801211c:	f105 0008 	add.w	r0, r5, #8
 8012120:	f000 f97e 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012124:	f105 0010 	add.w	r0, r5, #16
 8012128:	f000 f858 	bl	80121dc <autoware_control_msgs__msg__Lateral__fini>
 801212c:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012130:	f000 f884 	bl	801223c <autoware_control_msgs__msg__Longitudinal__fini>
 8012134:	4620      	mov	r0, r4
 8012136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801213a:	4604      	mov	r4, r0
 801213c:	4620      	mov	r0, r4
 801213e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012142:	4628      	mov	r0, r5
 8012144:	f000 f96c 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012148:	4630      	mov	r0, r6
 801214a:	f000 f969 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 801214e:	4638      	mov	r0, r7
 8012150:	f000 f844 	bl	80121dc <autoware_control_msgs__msg__Lateral__fini>
 8012154:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012158:	f000 f870 	bl	801223c <autoware_control_msgs__msg__Longitudinal__fini>
 801215c:	4620      	mov	r0, r4
 801215e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012162:	4628      	mov	r0, r5
 8012164:	f000 f95c 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012168:	4630      	mov	r0, r6
 801216a:	e7d9      	b.n	8012120 <autoware_control_msgs__msg__Control__init+0x60>

0801216c <autoware_control_msgs__msg__Control__fini>:
 801216c:	b188      	cbz	r0, 8012192 <autoware_control_msgs__msg__Control__fini+0x26>
 801216e:	b510      	push	{r4, lr}
 8012170:	4604      	mov	r4, r0
 8012172:	f000 f955 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012176:	f104 0008 	add.w	r0, r4, #8
 801217a:	f000 f951 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 801217e:	f104 0010 	add.w	r0, r4, #16
 8012182:	f000 f82b 	bl	80121dc <autoware_control_msgs__msg__Lateral__fini>
 8012186:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801218a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801218e:	f000 b855 	b.w	801223c <autoware_control_msgs__msg__Longitudinal__fini>
 8012192:	4770      	bx	lr

08012194 <autoware_control_msgs__msg__Lateral__init>:
 8012194:	b570      	push	{r4, r5, r6, lr}
 8012196:	4605      	mov	r5, r0
 8012198:	b1a8      	cbz	r0, 80121c6 <autoware_control_msgs__msg__Lateral__init+0x32>
 801219a:	f000 f93d 	bl	8012418 <builtin_interfaces__msg__Time__init>
 801219e:	4604      	mov	r4, r0
 80121a0:	b140      	cbz	r0, 80121b4 <autoware_control_msgs__msg__Lateral__init+0x20>
 80121a2:	f105 0608 	add.w	r6, r5, #8
 80121a6:	4630      	mov	r0, r6
 80121a8:	f000 f936 	bl	8012418 <builtin_interfaces__msg__Time__init>
 80121ac:	4604      	mov	r4, r0
 80121ae:	b168      	cbz	r0, 80121cc <autoware_control_msgs__msg__Lateral__init+0x38>
 80121b0:	4620      	mov	r0, r4
 80121b2:	bd70      	pop	{r4, r5, r6, pc}
 80121b4:	4628      	mov	r0, r5
 80121b6:	f000 f933 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80121ba:	f105 0008 	add.w	r0, r5, #8
 80121be:	f000 f92f 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80121c2:	4620      	mov	r0, r4
 80121c4:	bd70      	pop	{r4, r5, r6, pc}
 80121c6:	4604      	mov	r4, r0
 80121c8:	4620      	mov	r0, r4
 80121ca:	bd70      	pop	{r4, r5, r6, pc}
 80121cc:	4628      	mov	r0, r5
 80121ce:	f000 f927 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80121d2:	4630      	mov	r0, r6
 80121d4:	f000 f924 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80121d8:	e7ea      	b.n	80121b0 <autoware_control_msgs__msg__Lateral__init+0x1c>
 80121da:	bf00      	nop

080121dc <autoware_control_msgs__msg__Lateral__fini>:
 80121dc:	b148      	cbz	r0, 80121f2 <autoware_control_msgs__msg__Lateral__fini+0x16>
 80121de:	b510      	push	{r4, lr}
 80121e0:	4604      	mov	r4, r0
 80121e2:	f000 f91d 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80121e6:	f104 0008 	add.w	r0, r4, #8
 80121ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121ee:	f000 b917 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 80121f2:	4770      	bx	lr

080121f4 <autoware_control_msgs__msg__Longitudinal__init>:
 80121f4:	b570      	push	{r4, r5, r6, lr}
 80121f6:	4605      	mov	r5, r0
 80121f8:	b1a8      	cbz	r0, 8012226 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 80121fa:	f000 f90d 	bl	8012418 <builtin_interfaces__msg__Time__init>
 80121fe:	4604      	mov	r4, r0
 8012200:	b140      	cbz	r0, 8012214 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8012202:	f105 0608 	add.w	r6, r5, #8
 8012206:	4630      	mov	r0, r6
 8012208:	f000 f906 	bl	8012418 <builtin_interfaces__msg__Time__init>
 801220c:	4604      	mov	r4, r0
 801220e:	b168      	cbz	r0, 801222c <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8012210:	4620      	mov	r0, r4
 8012212:	bd70      	pop	{r4, r5, r6, pc}
 8012214:	4628      	mov	r0, r5
 8012216:	f000 f903 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 801221a:	f105 0008 	add.w	r0, r5, #8
 801221e:	f000 f8ff 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012222:	4620      	mov	r0, r4
 8012224:	bd70      	pop	{r4, r5, r6, pc}
 8012226:	4604      	mov	r4, r0
 8012228:	4620      	mov	r0, r4
 801222a:	bd70      	pop	{r4, r5, r6, pc}
 801222c:	4628      	mov	r0, r5
 801222e:	f000 f8f7 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012232:	4630      	mov	r0, r6
 8012234:	f000 f8f4 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012238:	e7ea      	b.n	8012210 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 801223a:	bf00      	nop

0801223c <autoware_control_msgs__msg__Longitudinal__fini>:
 801223c:	b148      	cbz	r0, 8012252 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 801223e:	b510      	push	{r4, lr}
 8012240:	4604      	mov	r4, r0
 8012242:	f000 f8ed 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012246:	f104 0008 	add.w	r0, r4, #8
 801224a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801224e:	f000 b8e7 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 8012252:	4770      	bx	lr

08012254 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8012254:	b538      	push	{r3, r4, r5, lr}
 8012256:	4604      	mov	r4, r0
 8012258:	b128      	cbz	r0, 8012266 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 801225a:	f000 f8dd 	bl	8012418 <builtin_interfaces__msg__Time__init>
 801225e:	4605      	mov	r5, r0
 8012260:	b120      	cbz	r0, 801226c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8012262:	4628      	mov	r0, r5
 8012264:	bd38      	pop	{r3, r4, r5, pc}
 8012266:	4605      	mov	r5, r0
 8012268:	4628      	mov	r0, r5
 801226a:	bd38      	pop	{r3, r4, r5, pc}
 801226c:	4620      	mov	r0, r4
 801226e:	f000 f8d7 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012272:	4628      	mov	r0, r5
 8012274:	bd38      	pop	{r3, r4, r5, pc}
 8012276:	bf00      	nop

08012278 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8012278:	b108      	cbz	r0, 801227e <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 801227a:	f000 b8d1 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 801227e:	4770      	bx	lr

08012280 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8012280:	3800      	subs	r0, #0
 8012282:	bf18      	it	ne
 8012284:	2001      	movne	r0, #1
 8012286:	4770      	bx	lr

08012288 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop

0801228c <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 801228c:	b538      	push	{r3, r4, r5, lr}
 801228e:	4604      	mov	r4, r0
 8012290:	b128      	cbz	r0, 801229e <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8012292:	f000 f8c1 	bl	8012418 <builtin_interfaces__msg__Time__init>
 8012296:	4605      	mov	r5, r0
 8012298:	b120      	cbz	r0, 80122a4 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 801229a:	4628      	mov	r0, r5
 801229c:	bd38      	pop	{r3, r4, r5, pc}
 801229e:	4605      	mov	r5, r0
 80122a0:	4628      	mov	r0, r5
 80122a2:	bd38      	pop	{r3, r4, r5, pc}
 80122a4:	4620      	mov	r0, r4
 80122a6:	f000 f8bb 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80122aa:	4628      	mov	r0, r5
 80122ac:	bd38      	pop	{r3, r4, r5, pc}
 80122ae:	bf00      	nop

080122b0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 80122b0:	b108      	cbz	r0, 80122b6 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 80122b2:	f000 b8b5 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 80122b6:	4770      	bx	lr

080122b8 <autoware_vehicle_msgs__msg__GearCommand__init>:
 80122b8:	b538      	push	{r3, r4, r5, lr}
 80122ba:	4604      	mov	r4, r0
 80122bc:	b128      	cbz	r0, 80122ca <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 80122be:	f000 f8ab 	bl	8012418 <builtin_interfaces__msg__Time__init>
 80122c2:	4605      	mov	r5, r0
 80122c4:	b120      	cbz	r0, 80122d0 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 80122c6:	4628      	mov	r0, r5
 80122c8:	bd38      	pop	{r3, r4, r5, pc}
 80122ca:	4605      	mov	r5, r0
 80122cc:	4628      	mov	r0, r5
 80122ce:	bd38      	pop	{r3, r4, r5, pc}
 80122d0:	4620      	mov	r0, r4
 80122d2:	f000 f8a5 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80122d6:	4628      	mov	r0, r5
 80122d8:	bd38      	pop	{r3, r4, r5, pc}
 80122da:	bf00      	nop

080122dc <autoware_vehicle_msgs__msg__GearCommand__fini>:
 80122dc:	b108      	cbz	r0, 80122e2 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 80122de:	f000 b89f 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 80122e2:	4770      	bx	lr

080122e4 <autoware_vehicle_msgs__msg__GearReport__init>:
 80122e4:	b538      	push	{r3, r4, r5, lr}
 80122e6:	4604      	mov	r4, r0
 80122e8:	b128      	cbz	r0, 80122f6 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 80122ea:	f000 f895 	bl	8012418 <builtin_interfaces__msg__Time__init>
 80122ee:	4605      	mov	r5, r0
 80122f0:	b120      	cbz	r0, 80122fc <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 80122f2:	4628      	mov	r0, r5
 80122f4:	bd38      	pop	{r3, r4, r5, pc}
 80122f6:	4605      	mov	r5, r0
 80122f8:	4628      	mov	r0, r5
 80122fa:	bd38      	pop	{r3, r4, r5, pc}
 80122fc:	4620      	mov	r0, r4
 80122fe:	f000 f88f 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012302:	4628      	mov	r0, r5
 8012304:	bd38      	pop	{r3, r4, r5, pc}
 8012306:	bf00      	nop

08012308 <autoware_vehicle_msgs__msg__GearReport__fini>:
 8012308:	b108      	cbz	r0, 801230e <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 801230a:	f000 b889 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 801230e:	4770      	bx	lr

08012310 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8012310:	b538      	push	{r3, r4, r5, lr}
 8012312:	4604      	mov	r4, r0
 8012314:	b128      	cbz	r0, 8012322 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8012316:	f000 f87f 	bl	8012418 <builtin_interfaces__msg__Time__init>
 801231a:	4605      	mov	r5, r0
 801231c:	b120      	cbz	r0, 8012328 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 801231e:	4628      	mov	r0, r5
 8012320:	bd38      	pop	{r3, r4, r5, pc}
 8012322:	4605      	mov	r5, r0
 8012324:	4628      	mov	r0, r5
 8012326:	bd38      	pop	{r3, r4, r5, pc}
 8012328:	4620      	mov	r0, r4
 801232a:	f000 f879 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 801232e:	4628      	mov	r0, r5
 8012330:	bd38      	pop	{r3, r4, r5, pc}
 8012332:	bf00      	nop

08012334 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8012334:	b108      	cbz	r0, 801233a <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8012336:	f000 b873 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 801233a:	4770      	bx	lr

0801233c <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 801233c:	b538      	push	{r3, r4, r5, lr}
 801233e:	4604      	mov	r4, r0
 8012340:	b128      	cbz	r0, 801234e <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8012342:	f000 f869 	bl	8012418 <builtin_interfaces__msg__Time__init>
 8012346:	4605      	mov	r5, r0
 8012348:	b120      	cbz	r0, 8012354 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 801234a:	4628      	mov	r0, r5
 801234c:	bd38      	pop	{r3, r4, r5, pc}
 801234e:	4605      	mov	r5, r0
 8012350:	4628      	mov	r0, r5
 8012352:	bd38      	pop	{r3, r4, r5, pc}
 8012354:	4620      	mov	r0, r4
 8012356:	f000 f863 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 801235a:	4628      	mov	r0, r5
 801235c:	bd38      	pop	{r3, r4, r5, pc}
 801235e:	bf00      	nop

08012360 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8012360:	b108      	cbz	r0, 8012366 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8012362:	f000 b85d 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 8012366:	4770      	bx	lr

08012368 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8012368:	b538      	push	{r3, r4, r5, lr}
 801236a:	4604      	mov	r4, r0
 801236c:	b128      	cbz	r0, 801237a <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 801236e:	f000 f853 	bl	8012418 <builtin_interfaces__msg__Time__init>
 8012372:	4605      	mov	r5, r0
 8012374:	b120      	cbz	r0, 8012380 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8012376:	4628      	mov	r0, r5
 8012378:	bd38      	pop	{r3, r4, r5, pc}
 801237a:	4605      	mov	r5, r0
 801237c:	4628      	mov	r0, r5
 801237e:	bd38      	pop	{r3, r4, r5, pc}
 8012380:	4620      	mov	r0, r4
 8012382:	f000 f84d 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 8012386:	4628      	mov	r0, r5
 8012388:	bd38      	pop	{r3, r4, r5, pc}
 801238a:	bf00      	nop

0801238c <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 801238c:	b108      	cbz	r0, 8012392 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 801238e:	f000 b847 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 8012392:	4770      	bx	lr

08012394 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8012394:	b538      	push	{r3, r4, r5, lr}
 8012396:	4604      	mov	r4, r0
 8012398:	b128      	cbz	r0, 80123a6 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 801239a:	f000 f83d 	bl	8012418 <builtin_interfaces__msg__Time__init>
 801239e:	4605      	mov	r5, r0
 80123a0:	b120      	cbz	r0, 80123ac <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 80123a2:	4628      	mov	r0, r5
 80123a4:	bd38      	pop	{r3, r4, r5, pc}
 80123a6:	4605      	mov	r5, r0
 80123a8:	4628      	mov	r0, r5
 80123aa:	bd38      	pop	{r3, r4, r5, pc}
 80123ac:	4620      	mov	r0, r4
 80123ae:	f000 f837 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80123b2:	4628      	mov	r0, r5
 80123b4:	bd38      	pop	{r3, r4, r5, pc}
 80123b6:	bf00      	nop

080123b8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 80123b8:	b108      	cbz	r0, 80123be <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 80123ba:	f000 b831 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 80123be:	4770      	bx	lr

080123c0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 80123c0:	b538      	push	{r3, r4, r5, lr}
 80123c2:	4604      	mov	r4, r0
 80123c4:	b128      	cbz	r0, 80123d2 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 80123c6:	f000 f827 	bl	8012418 <builtin_interfaces__msg__Time__init>
 80123ca:	4605      	mov	r5, r0
 80123cc:	b120      	cbz	r0, 80123d8 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 80123ce:	4628      	mov	r0, r5
 80123d0:	bd38      	pop	{r3, r4, r5, pc}
 80123d2:	4605      	mov	r5, r0
 80123d4:	4628      	mov	r0, r5
 80123d6:	bd38      	pop	{r3, r4, r5, pc}
 80123d8:	4620      	mov	r0, r4
 80123da:	f000 f821 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80123de:	4628      	mov	r0, r5
 80123e0:	bd38      	pop	{r3, r4, r5, pc}
 80123e2:	bf00      	nop

080123e4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 80123e4:	b108      	cbz	r0, 80123ea <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 80123e6:	f000 b81b 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 80123ea:	4770      	bx	lr

080123ec <autoware_vehicle_msgs__msg__VelocityReport__init>:
 80123ec:	b538      	push	{r3, r4, r5, lr}
 80123ee:	4604      	mov	r4, r0
 80123f0:	b128      	cbz	r0, 80123fe <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 80123f2:	f000 f843 	bl	801247c <std_msgs__msg__Header__init>
 80123f6:	4605      	mov	r5, r0
 80123f8:	b120      	cbz	r0, 8012404 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 80123fa:	4628      	mov	r0, r5
 80123fc:	bd38      	pop	{r3, r4, r5, pc}
 80123fe:	4605      	mov	r5, r0
 8012400:	4628      	mov	r0, r5
 8012402:	bd38      	pop	{r3, r4, r5, pc}
 8012404:	4620      	mov	r0, r4
 8012406:	f000 f85d 	bl	80124c4 <std_msgs__msg__Header__fini>
 801240a:	4628      	mov	r0, r5
 801240c:	bd38      	pop	{r3, r4, r5, pc}
 801240e:	bf00      	nop

08012410 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8012410:	b108      	cbz	r0, 8012416 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8012412:	f000 b857 	b.w	80124c4 <std_msgs__msg__Header__fini>
 8012416:	4770      	bx	lr

08012418 <builtin_interfaces__msg__Time__init>:
 8012418:	3800      	subs	r0, #0
 801241a:	bf18      	it	ne
 801241c:	2001      	movne	r0, #1
 801241e:	4770      	bx	lr

08012420 <builtin_interfaces__msg__Time__fini>:
 8012420:	4770      	bx	lr
 8012422:	bf00      	nop

08012424 <ucdr_serialize_sequence_char>:
 8012424:	b570      	push	{r4, r5, r6, lr}
 8012426:	4615      	mov	r5, r2
 8012428:	460e      	mov	r6, r1
 801242a:	7d01      	ldrb	r1, [r0, #20]
 801242c:	4604      	mov	r4, r0
 801242e:	f7fe fcb1 	bl	8010d94 <ucdr_serialize_endian_uint32_t>
 8012432:	b90d      	cbnz	r5, 8012438 <ucdr_serialize_sequence_char+0x14>
 8012434:	2001      	movs	r0, #1
 8012436:	bd70      	pop	{r4, r5, r6, pc}
 8012438:	462b      	mov	r3, r5
 801243a:	4632      	mov	r2, r6
 801243c:	7d21      	ldrb	r1, [r4, #20]
 801243e:	4620      	mov	r0, r4
 8012440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012444:	f000 ba12 	b.w	801286c <ucdr_serialize_endian_array_char>

08012448 <ucdr_deserialize_sequence_char>:
 8012448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801244c:	461d      	mov	r5, r3
 801244e:	4616      	mov	r6, r2
 8012450:	460f      	mov	r7, r1
 8012452:	461a      	mov	r2, r3
 8012454:	7d01      	ldrb	r1, [r0, #20]
 8012456:	4604      	mov	r4, r0
 8012458:	f7fe fdc4 	bl	8010fe4 <ucdr_deserialize_endian_uint32_t>
 801245c:	682b      	ldr	r3, [r5, #0]
 801245e:	429e      	cmp	r6, r3
 8012460:	d201      	bcs.n	8012466 <ucdr_deserialize_sequence_char+0x1e>
 8012462:	2201      	movs	r2, #1
 8012464:	75a2      	strb	r2, [r4, #22]
 8012466:	b913      	cbnz	r3, 801246e <ucdr_deserialize_sequence_char+0x26>
 8012468:	2001      	movs	r0, #1
 801246a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801246e:	463a      	mov	r2, r7
 8012470:	7d21      	ldrb	r1, [r4, #20]
 8012472:	4620      	mov	r0, r4
 8012474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012478:	f000 ba2a 	b.w	80128d0 <ucdr_deserialize_endian_array_char>

0801247c <std_msgs__msg__Header__init>:
 801247c:	b570      	push	{r4, r5, r6, lr}
 801247e:	4605      	mov	r5, r0
 8012480:	b1a8      	cbz	r0, 80124ae <std_msgs__msg__Header__init+0x32>
 8012482:	f7ff ffc9 	bl	8012418 <builtin_interfaces__msg__Time__init>
 8012486:	4604      	mov	r4, r0
 8012488:	b140      	cbz	r0, 801249c <std_msgs__msg__Header__init+0x20>
 801248a:	f105 0608 	add.w	r6, r5, #8
 801248e:	4630      	mov	r0, r6
 8012490:	f000 fa52 	bl	8012938 <rosidl_runtime_c__String__init>
 8012494:	4604      	mov	r4, r0
 8012496:	b168      	cbz	r0, 80124b4 <std_msgs__msg__Header__init+0x38>
 8012498:	4620      	mov	r0, r4
 801249a:	bd70      	pop	{r4, r5, r6, pc}
 801249c:	4628      	mov	r0, r5
 801249e:	f7ff ffbf 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80124a2:	f105 0008 	add.w	r0, r5, #8
 80124a6:	f000 fa5d 	bl	8012964 <rosidl_runtime_c__String__fini>
 80124aa:	4620      	mov	r0, r4
 80124ac:	bd70      	pop	{r4, r5, r6, pc}
 80124ae:	4604      	mov	r4, r0
 80124b0:	4620      	mov	r0, r4
 80124b2:	bd70      	pop	{r4, r5, r6, pc}
 80124b4:	4628      	mov	r0, r5
 80124b6:	f7ff ffb3 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80124ba:	4630      	mov	r0, r6
 80124bc:	f000 fa52 	bl	8012964 <rosidl_runtime_c__String__fini>
 80124c0:	e7ea      	b.n	8012498 <std_msgs__msg__Header__init+0x1c>
 80124c2:	bf00      	nop

080124c4 <std_msgs__msg__Header__fini>:
 80124c4:	b148      	cbz	r0, 80124da <std_msgs__msg__Header__fini+0x16>
 80124c6:	b510      	push	{r4, lr}
 80124c8:	4604      	mov	r4, r0
 80124ca:	f7ff ffa9 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80124ce:	f104 0008 	add.w	r0, r4, #8
 80124d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124d6:	f000 ba45 	b.w	8012964 <rosidl_runtime_c__String__fini>
 80124da:	4770      	bx	lr

080124dc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 80124dc:	b570      	push	{r4, r5, r6, lr}
 80124de:	4605      	mov	r5, r0
 80124e0:	b1a8      	cbz	r0, 801250e <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 80124e2:	f7ff ffcb 	bl	801247c <std_msgs__msg__Header__init>
 80124e6:	4604      	mov	r4, r0
 80124e8:	b140      	cbz	r0, 80124fc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 80124ea:	f105 0618 	add.w	r6, r5, #24
 80124ee:	4630      	mov	r0, r6
 80124f0:	f000 fa80 	bl	80129f4 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 80124f4:	4604      	mov	r4, r0
 80124f6:	b168      	cbz	r0, 8012514 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 80124f8:	4620      	mov	r0, r4
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	4628      	mov	r0, r5
 80124fe:	f7ff ffe1 	bl	80124c4 <std_msgs__msg__Header__fini>
 8012502:	f105 0018 	add.w	r0, r5, #24
 8012506:	f000 fa79 	bl	80129fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801250a:	4620      	mov	r0, r4
 801250c:	bd70      	pop	{r4, r5, r6, pc}
 801250e:	4604      	mov	r4, r0
 8012510:	4620      	mov	r0, r4
 8012512:	bd70      	pop	{r4, r5, r6, pc}
 8012514:	4628      	mov	r0, r5
 8012516:	f7ff ffd5 	bl	80124c4 <std_msgs__msg__Header__fini>
 801251a:	4630      	mov	r0, r6
 801251c:	f000 fa6e 	bl	80129fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012520:	e7ea      	b.n	80124f8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8012522:	bf00      	nop

08012524 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8012524:	b148      	cbz	r0, 801253a <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8012526:	b510      	push	{r4, lr}
 8012528:	4604      	mov	r4, r0
 801252a:	f7ff ffcb 	bl	80124c4 <std_msgs__msg__Header__fini>
 801252e:	f104 0018 	add.w	r0, r4, #24
 8012532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012536:	f000 ba61 	b.w	80129fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801253a:	4770      	bx	lr

0801253c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801253c:	b570      	push	{r4, r5, r6, lr}
 801253e:	4605      	mov	r5, r0
 8012540:	b1a8      	cbz	r0, 801256e <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8012542:	f7ff ff9b 	bl	801247c <std_msgs__msg__Header__init>
 8012546:	4604      	mov	r4, r0
 8012548:	b140      	cbz	r0, 801255c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801254a:	f105 0618 	add.w	r6, r5, #24
 801254e:	4630      	mov	r0, r6
 8012550:	f000 fa56 	bl	8012a00 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8012554:	4604      	mov	r4, r0
 8012556:	b168      	cbz	r0, 8012574 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8012558:	4620      	mov	r0, r4
 801255a:	bd70      	pop	{r4, r5, r6, pc}
 801255c:	4628      	mov	r0, r5
 801255e:	f7ff ffb1 	bl	80124c4 <std_msgs__msg__Header__fini>
 8012562:	f105 0018 	add.w	r0, r5, #24
 8012566:	f000 fa4f 	bl	8012a08 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801256a:	4620      	mov	r0, r4
 801256c:	bd70      	pop	{r4, r5, r6, pc}
 801256e:	4604      	mov	r4, r0
 8012570:	4620      	mov	r0, r4
 8012572:	bd70      	pop	{r4, r5, r6, pc}
 8012574:	4628      	mov	r0, r5
 8012576:	f7ff ffa5 	bl	80124c4 <std_msgs__msg__Header__fini>
 801257a:	4630      	mov	r0, r6
 801257c:	f000 fa44 	bl	8012a08 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012580:	e7ea      	b.n	8012558 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8012582:	bf00      	nop

08012584 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8012584:	b148      	cbz	r0, 801259a <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 8012586:	b510      	push	{r4, lr}
 8012588:	4604      	mov	r4, r0
 801258a:	f7ff ff9b 	bl	80124c4 <std_msgs__msg__Header__fini>
 801258e:	f104 0018 	add.w	r0, r4, #24
 8012592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012596:	f000 ba37 	b.w	8012a08 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801259a:	4770      	bx	lr

0801259c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801259c:	b538      	push	{r3, r4, r5, lr}
 801259e:	4604      	mov	r4, r0
 80125a0:	b128      	cbz	r0, 80125ae <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 80125a2:	f7ff ff39 	bl	8012418 <builtin_interfaces__msg__Time__init>
 80125a6:	4605      	mov	r5, r0
 80125a8:	b120      	cbz	r0, 80125b4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 80125aa:	4628      	mov	r0, r5
 80125ac:	bd38      	pop	{r3, r4, r5, pc}
 80125ae:	4605      	mov	r5, r0
 80125b0:	4628      	mov	r0, r5
 80125b2:	bd38      	pop	{r3, r4, r5, pc}
 80125b4:	4620      	mov	r0, r4
 80125b6:	f7ff ff33 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80125ba:	4628      	mov	r0, r5
 80125bc:	bd38      	pop	{r3, r4, r5, pc}
 80125be:	bf00      	nop

080125c0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 80125c0:	b108      	cbz	r0, 80125c6 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 80125c2:	f7ff bf2d 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 80125c6:	4770      	bx	lr

080125c8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 80125c8:	b538      	push	{r3, r4, r5, lr}
 80125ca:	4604      	mov	r4, r0
 80125cc:	b128      	cbz	r0, 80125da <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 80125ce:	f7ff ff23 	bl	8012418 <builtin_interfaces__msg__Time__init>
 80125d2:	4605      	mov	r5, r0
 80125d4:	b120      	cbz	r0, 80125e0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 80125d6:	4628      	mov	r0, r5
 80125d8:	bd38      	pop	{r3, r4, r5, pc}
 80125da:	4605      	mov	r5, r0
 80125dc:	4628      	mov	r0, r5
 80125de:	bd38      	pop	{r3, r4, r5, pc}
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7ff ff1d 	bl	8012420 <builtin_interfaces__msg__Time__fini>
 80125e6:	4628      	mov	r0, r5
 80125e8:	bd38      	pop	{r3, r4, r5, pc}
 80125ea:	bf00      	nop

080125ec <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 80125ec:	b108      	cbz	r0, 80125f2 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 80125ee:	f7ff bf17 	b.w	8012420 <builtin_interfaces__msg__Time__fini>
 80125f2:	4770      	bx	lr

080125f4 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 80125f4:	f000 b9fe 	b.w	80129f4 <tier4_vehicle_msgs__msg__ActuationCommand__init>

080125f8 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 80125f8:	f000 ba00 	b.w	80129fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>

080125fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 80125fc:	4b04      	ldr	r3, [pc, #16]	@ (8012610 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 80125fe:	681a      	ldr	r2, [r3, #0]
 8012600:	b10a      	cbz	r2, 8012606 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8012602:	4803      	ldr	r0, [pc, #12]	@ (8012610 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8012604:	4770      	bx	lr
 8012606:	4a03      	ldr	r2, [pc, #12]	@ (8012614 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 8012608:	4801      	ldr	r0, [pc, #4]	@ (8012610 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801260a:	6812      	ldr	r2, [r2, #0]
 801260c:	601a      	str	r2, [r3, #0]
 801260e:	4770      	bx	lr
 8012610:	24001274 	.word	0x24001274
 8012614:	24000e10 	.word	0x24000e10

08012618 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 8012618:	f000 b9f2 	b.w	8012a00 <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801261c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801261c:	f000 b9f4 	b.w	8012a08 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08012620 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8012620:	4b04      	ldr	r3, [pc, #16]	@ (8012634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	b10a      	cbz	r2, 801262a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 8012626:	4803      	ldr	r0, [pc, #12]	@ (8012634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8012628:	4770      	bx	lr
 801262a:	4a03      	ldr	r2, [pc, #12]	@ (8012638 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801262c:	4801      	ldr	r0, [pc, #4]	@ (8012634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801262e:	6812      	ldr	r2, [r2, #0]
 8012630:	601a      	str	r2, [r3, #0]
 8012632:	4770      	bx	lr
 8012634:	24001334 	.word	0x24001334
 8012638:	24000e10 	.word	0x24000e10

0801263c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801263c:	b1b8      	cbz	r0, 801266e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801263e:	b538      	push	{r3, r4, r5, lr}
 8012640:	460d      	mov	r5, r1
 8012642:	2108      	movs	r1, #8
 8012644:	4628      	mov	r0, r5
 8012646:	f7ff f971 	bl	801192c <ucdr_alignment>
 801264a:	f105 0308 	add.w	r3, r5, #8
 801264e:	2108      	movs	r1, #8
 8012650:	f1c5 0508 	rsb	r5, r5, #8
 8012654:	181c      	adds	r4, r3, r0
 8012656:	4620      	mov	r0, r4
 8012658:	f7ff f968 	bl	801192c <ucdr_alignment>
 801265c:	2108      	movs	r1, #8
 801265e:	4408      	add	r0, r1
 8012660:	4404      	add	r4, r0
 8012662:	4620      	mov	r0, r4
 8012664:	f7ff f962 	bl	801192c <ucdr_alignment>
 8012668:	4428      	add	r0, r5
 801266a:	4420      	add	r0, r4
 801266c:	bd38      	pop	{r3, r4, r5, pc}
 801266e:	4770      	bx	lr

08012670 <_ActuationCommand__cdr_deserialize>:
 8012670:	b538      	push	{r3, r4, r5, lr}
 8012672:	460c      	mov	r4, r1
 8012674:	b171      	cbz	r1, 8012694 <_ActuationCommand__cdr_deserialize+0x24>
 8012676:	4605      	mov	r5, r0
 8012678:	f7ff f86a 	bl	8011750 <ucdr_deserialize_double>
 801267c:	f104 0108 	add.w	r1, r4, #8
 8012680:	4628      	mov	r0, r5
 8012682:	f7ff f865 	bl	8011750 <ucdr_deserialize_double>
 8012686:	f104 0110 	add.w	r1, r4, #16
 801268a:	4628      	mov	r0, r5
 801268c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012690:	f7ff b85e 	b.w	8011750 <ucdr_deserialize_double>
 8012694:	4608      	mov	r0, r1
 8012696:	bd38      	pop	{r3, r4, r5, pc}

08012698 <_ActuationCommand__cdr_serialize>:
 8012698:	b198      	cbz	r0, 80126c2 <_ActuationCommand__cdr_serialize+0x2a>
 801269a:	b538      	push	{r3, r4, r5, lr}
 801269c:	460d      	mov	r5, r1
 801269e:	4604      	mov	r4, r0
 80126a0:	ed90 0b00 	vldr	d0, [r0]
 80126a4:	4608      	mov	r0, r1
 80126a6:	f7fe ff83 	bl	80115b0 <ucdr_serialize_double>
 80126aa:	4628      	mov	r0, r5
 80126ac:	ed94 0b02 	vldr	d0, [r4, #8]
 80126b0:	f7fe ff7e 	bl	80115b0 <ucdr_serialize_double>
 80126b4:	4628      	mov	r0, r5
 80126b6:	ed94 0b04 	vldr	d0, [r4, #16]
 80126ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126be:	f7fe bf77 	b.w	80115b0 <ucdr_serialize_double>
 80126c2:	4770      	bx	lr

080126c4 <_ActuationCommand__get_serialized_size>:
 80126c4:	b190      	cbz	r0, 80126ec <_ActuationCommand__get_serialized_size+0x28>
 80126c6:	2108      	movs	r1, #8
 80126c8:	2000      	movs	r0, #0
 80126ca:	b510      	push	{r4, lr}
 80126cc:	f7ff f92e 	bl	801192c <ucdr_alignment>
 80126d0:	2108      	movs	r1, #8
 80126d2:	1844      	adds	r4, r0, r1
 80126d4:	4620      	mov	r0, r4
 80126d6:	f7ff f929 	bl	801192c <ucdr_alignment>
 80126da:	2108      	movs	r1, #8
 80126dc:	4408      	add	r0, r1
 80126de:	4404      	add	r4, r0
 80126e0:	4620      	mov	r0, r4
 80126e2:	f7ff f923 	bl	801192c <ucdr_alignment>
 80126e6:	3008      	adds	r0, #8
 80126e8:	4420      	add	r0, r4
 80126ea:	bd10      	pop	{r4, pc}
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop

080126f0 <_ActuationCommand__max_serialized_size>:
 80126f0:	b538      	push	{r3, r4, r5, lr}
 80126f2:	2108      	movs	r1, #8
 80126f4:	2000      	movs	r0, #0
 80126f6:	f7ff f919 	bl	801192c <ucdr_alignment>
 80126fa:	2108      	movs	r1, #8
 80126fc:	1845      	adds	r5, r0, r1
 80126fe:	4628      	mov	r0, r5
 8012700:	f7ff f914 	bl	801192c <ucdr_alignment>
 8012704:	2108      	movs	r1, #8
 8012706:	1844      	adds	r4, r0, r1
 8012708:	442c      	add	r4, r5
 801270a:	4620      	mov	r0, r4
 801270c:	f7ff f90e 	bl	801192c <ucdr_alignment>
 8012710:	3008      	adds	r0, #8
 8012712:	4420      	add	r0, r4
 8012714:	bd38      	pop	{r3, r4, r5, pc}
 8012716:	bf00      	nop

08012718 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8012718:	b570      	push	{r4, r5, r6, lr}
 801271a:	460c      	mov	r4, r1
 801271c:	2301      	movs	r3, #1
 801271e:	2108      	movs	r1, #8
 8012720:	f104 0508 	add.w	r5, r4, #8
 8012724:	7003      	strb	r3, [r0, #0]
 8012726:	4620      	mov	r0, r4
 8012728:	f1c4 0408 	rsb	r4, r4, #8
 801272c:	f7ff f8fe 	bl	801192c <ucdr_alignment>
 8012730:	1946      	adds	r6, r0, r5
 8012732:	2108      	movs	r1, #8
 8012734:	4630      	mov	r0, r6
 8012736:	f7ff f8f9 	bl	801192c <ucdr_alignment>
 801273a:	2108      	movs	r1, #8
 801273c:	1845      	adds	r5, r0, r1
 801273e:	4435      	add	r5, r6
 8012740:	4628      	mov	r0, r5
 8012742:	f7ff f8f3 	bl	801192c <ucdr_alignment>
 8012746:	4420      	add	r0, r4
 8012748:	4428      	add	r0, r5
 801274a:	bd70      	pop	{r4, r5, r6, pc}

0801274c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801274c:	4800      	ldr	r0, [pc, #0]	@ (8012750 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801274e:	4770      	bx	lr
 8012750:	24001340 	.word	0x24001340

08012754 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8012754:	b1b8      	cbz	r0, 8012786 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 8012756:	b538      	push	{r3, r4, r5, lr}
 8012758:	460d      	mov	r5, r1
 801275a:	2108      	movs	r1, #8
 801275c:	4628      	mov	r0, r5
 801275e:	f7ff f8e5 	bl	801192c <ucdr_alignment>
 8012762:	f105 0308 	add.w	r3, r5, #8
 8012766:	2108      	movs	r1, #8
 8012768:	f1c5 0508 	rsb	r5, r5, #8
 801276c:	181c      	adds	r4, r3, r0
 801276e:	4620      	mov	r0, r4
 8012770:	f7ff f8dc 	bl	801192c <ucdr_alignment>
 8012774:	2108      	movs	r1, #8
 8012776:	4408      	add	r0, r1
 8012778:	4404      	add	r4, r0
 801277a:	4620      	mov	r0, r4
 801277c:	f7ff f8d6 	bl	801192c <ucdr_alignment>
 8012780:	4428      	add	r0, r5
 8012782:	4420      	add	r0, r4
 8012784:	bd38      	pop	{r3, r4, r5, pc}
 8012786:	4770      	bx	lr

08012788 <_ActuationStatus__cdr_deserialize>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	460c      	mov	r4, r1
 801278c:	b171      	cbz	r1, 80127ac <_ActuationStatus__cdr_deserialize+0x24>
 801278e:	4605      	mov	r5, r0
 8012790:	f7fe ffde 	bl	8011750 <ucdr_deserialize_double>
 8012794:	f104 0108 	add.w	r1, r4, #8
 8012798:	4628      	mov	r0, r5
 801279a:	f7fe ffd9 	bl	8011750 <ucdr_deserialize_double>
 801279e:	f104 0110 	add.w	r1, r4, #16
 80127a2:	4628      	mov	r0, r5
 80127a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127a8:	f7fe bfd2 	b.w	8011750 <ucdr_deserialize_double>
 80127ac:	4608      	mov	r0, r1
 80127ae:	bd38      	pop	{r3, r4, r5, pc}

080127b0 <_ActuationStatus__cdr_serialize>:
 80127b0:	b198      	cbz	r0, 80127da <_ActuationStatus__cdr_serialize+0x2a>
 80127b2:	b538      	push	{r3, r4, r5, lr}
 80127b4:	460d      	mov	r5, r1
 80127b6:	4604      	mov	r4, r0
 80127b8:	ed90 0b00 	vldr	d0, [r0]
 80127bc:	4608      	mov	r0, r1
 80127be:	f7fe fef7 	bl	80115b0 <ucdr_serialize_double>
 80127c2:	4628      	mov	r0, r5
 80127c4:	ed94 0b02 	vldr	d0, [r4, #8]
 80127c8:	f7fe fef2 	bl	80115b0 <ucdr_serialize_double>
 80127cc:	4628      	mov	r0, r5
 80127ce:	ed94 0b04 	vldr	d0, [r4, #16]
 80127d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127d6:	f7fe beeb 	b.w	80115b0 <ucdr_serialize_double>
 80127da:	4770      	bx	lr

080127dc <_ActuationStatus__get_serialized_size>:
 80127dc:	b190      	cbz	r0, 8012804 <_ActuationStatus__get_serialized_size+0x28>
 80127de:	2108      	movs	r1, #8
 80127e0:	2000      	movs	r0, #0
 80127e2:	b510      	push	{r4, lr}
 80127e4:	f7ff f8a2 	bl	801192c <ucdr_alignment>
 80127e8:	2108      	movs	r1, #8
 80127ea:	1844      	adds	r4, r0, r1
 80127ec:	4620      	mov	r0, r4
 80127ee:	f7ff f89d 	bl	801192c <ucdr_alignment>
 80127f2:	2108      	movs	r1, #8
 80127f4:	4408      	add	r0, r1
 80127f6:	4404      	add	r4, r0
 80127f8:	4620      	mov	r0, r4
 80127fa:	f7ff f897 	bl	801192c <ucdr_alignment>
 80127fe:	3008      	adds	r0, #8
 8012800:	4420      	add	r0, r4
 8012802:	bd10      	pop	{r4, pc}
 8012804:	4770      	bx	lr
 8012806:	bf00      	nop

08012808 <_ActuationStatus__max_serialized_size>:
 8012808:	b538      	push	{r3, r4, r5, lr}
 801280a:	2108      	movs	r1, #8
 801280c:	2000      	movs	r0, #0
 801280e:	f7ff f88d 	bl	801192c <ucdr_alignment>
 8012812:	2108      	movs	r1, #8
 8012814:	1845      	adds	r5, r0, r1
 8012816:	4628      	mov	r0, r5
 8012818:	f7ff f888 	bl	801192c <ucdr_alignment>
 801281c:	2108      	movs	r1, #8
 801281e:	1844      	adds	r4, r0, r1
 8012820:	442c      	add	r4, r5
 8012822:	4620      	mov	r0, r4
 8012824:	f7ff f882 	bl	801192c <ucdr_alignment>
 8012828:	3008      	adds	r0, #8
 801282a:	4420      	add	r0, r4
 801282c:	bd38      	pop	{r3, r4, r5, pc}
 801282e:	bf00      	nop

08012830 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8012830:	b570      	push	{r4, r5, r6, lr}
 8012832:	460c      	mov	r4, r1
 8012834:	2301      	movs	r3, #1
 8012836:	2108      	movs	r1, #8
 8012838:	f104 0508 	add.w	r5, r4, #8
 801283c:	7003      	strb	r3, [r0, #0]
 801283e:	4620      	mov	r0, r4
 8012840:	f1c4 0408 	rsb	r4, r4, #8
 8012844:	f7ff f872 	bl	801192c <ucdr_alignment>
 8012848:	1946      	adds	r6, r0, r5
 801284a:	2108      	movs	r1, #8
 801284c:	4630      	mov	r0, r6
 801284e:	f7ff f86d 	bl	801192c <ucdr_alignment>
 8012852:	2108      	movs	r1, #8
 8012854:	1845      	adds	r5, r0, r1
 8012856:	4435      	add	r5, r6
 8012858:	4628      	mov	r0, r5
 801285a:	f7ff f867 	bl	801192c <ucdr_alignment>
 801285e:	4420      	add	r0, r4
 8012860:	4428      	add	r0, r5
 8012862:	bd70      	pop	{r4, r5, r6, pc}

08012864 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8012864:	4800      	ldr	r0, [pc, #0]	@ (8012868 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 8012866:	4770      	bx	lr
 8012868:	24001368 	.word	0x24001368

0801286c <ucdr_serialize_endian_array_char>:
 801286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012870:	4619      	mov	r1, r3
 8012872:	461f      	mov	r7, r3
 8012874:	4605      	mov	r5, r0
 8012876:	4690      	mov	r8, r2
 8012878:	f7ff f830 	bl	80118dc <ucdr_check_buffer_available_for>
 801287c:	b9e0      	cbnz	r0, 80128b8 <ucdr_serialize_endian_array_char+0x4c>
 801287e:	463e      	mov	r6, r7
 8012880:	e00b      	b.n	801289a <ucdr_serialize_endian_array_char+0x2e>
 8012882:	4441      	add	r1, r8
 8012884:	68a8      	ldr	r0, [r5, #8]
 8012886:	4622      	mov	r2, r4
 8012888:	1b36      	subs	r6, r6, r4
 801288a:	f000 fcb6 	bl	80131fa <memcpy>
 801288e:	68ab      	ldr	r3, [r5, #8]
 8012890:	6928      	ldr	r0, [r5, #16]
 8012892:	4423      	add	r3, r4
 8012894:	4420      	add	r0, r4
 8012896:	60ab      	str	r3, [r5, #8]
 8012898:	6128      	str	r0, [r5, #16]
 801289a:	4631      	mov	r1, r6
 801289c:	2201      	movs	r2, #1
 801289e:	4628      	mov	r0, r5
 80128a0:	f7ff f872 	bl	8011988 <ucdr_check_final_buffer_behavior_array>
 80128a4:	1bb9      	subs	r1, r7, r6
 80128a6:	4604      	mov	r4, r0
 80128a8:	2800      	cmp	r0, #0
 80128aa:	d1ea      	bne.n	8012882 <ucdr_serialize_endian_array_char+0x16>
 80128ac:	2301      	movs	r3, #1
 80128ae:	7da8      	ldrb	r0, [r5, #22]
 80128b0:	756b      	strb	r3, [r5, #21]
 80128b2:	4058      	eors	r0, r3
 80128b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b8:	463a      	mov	r2, r7
 80128ba:	4641      	mov	r1, r8
 80128bc:	68a8      	ldr	r0, [r5, #8]
 80128be:	f000 fc9c 	bl	80131fa <memcpy>
 80128c2:	68aa      	ldr	r2, [r5, #8]
 80128c4:	692b      	ldr	r3, [r5, #16]
 80128c6:	443a      	add	r2, r7
 80128c8:	443b      	add	r3, r7
 80128ca:	60aa      	str	r2, [r5, #8]
 80128cc:	612b      	str	r3, [r5, #16]
 80128ce:	e7ed      	b.n	80128ac <ucdr_serialize_endian_array_char+0x40>

080128d0 <ucdr_deserialize_endian_array_char>:
 80128d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128d4:	4619      	mov	r1, r3
 80128d6:	461f      	mov	r7, r3
 80128d8:	4605      	mov	r5, r0
 80128da:	4690      	mov	r8, r2
 80128dc:	f7fe fffe 	bl	80118dc <ucdr_check_buffer_available_for>
 80128e0:	b9e8      	cbnz	r0, 801291e <ucdr_deserialize_endian_array_char+0x4e>
 80128e2:	463e      	mov	r6, r7
 80128e4:	e00c      	b.n	8012900 <ucdr_deserialize_endian_array_char+0x30>
 80128e6:	eb08 0003 	add.w	r0, r8, r3
 80128ea:	68a9      	ldr	r1, [r5, #8]
 80128ec:	4622      	mov	r2, r4
 80128ee:	1b36      	subs	r6, r6, r4
 80128f0:	f000 fc83 	bl	80131fa <memcpy>
 80128f4:	68ab      	ldr	r3, [r5, #8]
 80128f6:	6928      	ldr	r0, [r5, #16]
 80128f8:	4423      	add	r3, r4
 80128fa:	4420      	add	r0, r4
 80128fc:	60ab      	str	r3, [r5, #8]
 80128fe:	6128      	str	r0, [r5, #16]
 8012900:	4631      	mov	r1, r6
 8012902:	2201      	movs	r2, #1
 8012904:	4628      	mov	r0, r5
 8012906:	f7ff f83f 	bl	8011988 <ucdr_check_final_buffer_behavior_array>
 801290a:	1bbb      	subs	r3, r7, r6
 801290c:	4604      	mov	r4, r0
 801290e:	2800      	cmp	r0, #0
 8012910:	d1e9      	bne.n	80128e6 <ucdr_deserialize_endian_array_char+0x16>
 8012912:	2301      	movs	r3, #1
 8012914:	7da8      	ldrb	r0, [r5, #22]
 8012916:	756b      	strb	r3, [r5, #21]
 8012918:	4058      	eors	r0, r3
 801291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801291e:	463a      	mov	r2, r7
 8012920:	68a9      	ldr	r1, [r5, #8]
 8012922:	4640      	mov	r0, r8
 8012924:	f000 fc69 	bl	80131fa <memcpy>
 8012928:	68aa      	ldr	r2, [r5, #8]
 801292a:	692b      	ldr	r3, [r5, #16]
 801292c:	443a      	add	r2, r7
 801292e:	443b      	add	r3, r7
 8012930:	60aa      	str	r2, [r5, #8]
 8012932:	612b      	str	r3, [r5, #16]
 8012934:	e7ed      	b.n	8012912 <ucdr_deserialize_endian_array_char+0x42>
 8012936:	bf00      	nop

08012938 <rosidl_runtime_c__String__init>:
 8012938:	b510      	push	{r4, lr}
 801293a:	4604      	mov	r4, r0
 801293c:	b086      	sub	sp, #24
 801293e:	b170      	cbz	r0, 801295e <rosidl_runtime_c__String__init+0x26>
 8012940:	a801      	add	r0, sp, #4
 8012942:	f7ff f867 	bl	8011a14 <rcutils_get_default_allocator>
 8012946:	9b01      	ldr	r3, [sp, #4]
 8012948:	9905      	ldr	r1, [sp, #20]
 801294a:	2001      	movs	r0, #1
 801294c:	4798      	blx	r3
 801294e:	6020      	str	r0, [r4, #0]
 8012950:	b128      	cbz	r0, 801295e <rosidl_runtime_c__String__init+0x26>
 8012952:	2100      	movs	r1, #0
 8012954:	2201      	movs	r2, #1
 8012956:	7001      	strb	r1, [r0, #0]
 8012958:	4610      	mov	r0, r2
 801295a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801295e:	b006      	add	sp, #24
 8012960:	bd10      	pop	{r4, pc}
 8012962:	bf00      	nop

08012964 <rosidl_runtime_c__String__fini>:
 8012964:	b320      	cbz	r0, 80129b0 <rosidl_runtime_c__String__fini+0x4c>
 8012966:	6803      	ldr	r3, [r0, #0]
 8012968:	b510      	push	{r4, lr}
 801296a:	4604      	mov	r4, r0
 801296c:	b086      	sub	sp, #24
 801296e:	b173      	cbz	r3, 801298e <rosidl_runtime_c__String__fini+0x2a>
 8012970:	6883      	ldr	r3, [r0, #8]
 8012972:	b1f3      	cbz	r3, 80129b2 <rosidl_runtime_c__String__fini+0x4e>
 8012974:	a801      	add	r0, sp, #4
 8012976:	f7ff f84d 	bl	8011a14 <rcutils_get_default_allocator>
 801297a:	9b02      	ldr	r3, [sp, #8]
 801297c:	9905      	ldr	r1, [sp, #20]
 801297e:	6820      	ldr	r0, [r4, #0]
 8012980:	4798      	blx	r3
 8012982:	2300      	movs	r3, #0
 8012984:	e9c4 3300 	strd	r3, r3, [r4]
 8012988:	60a3      	str	r3, [r4, #8]
 801298a:	b006      	add	sp, #24
 801298c:	bd10      	pop	{r4, pc}
 801298e:	6843      	ldr	r3, [r0, #4]
 8012990:	b9db      	cbnz	r3, 80129ca <rosidl_runtime_c__String__fini+0x66>
 8012992:	6883      	ldr	r3, [r0, #8]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d0f8      	beq.n	801298a <rosidl_runtime_c__String__fini+0x26>
 8012998:	4b12      	ldr	r3, [pc, #72]	@ (80129e4 <rosidl_runtime_c__String__fini+0x80>)
 801299a:	2251      	movs	r2, #81	@ 0x51
 801299c:	2101      	movs	r1, #1
 801299e:	4812      	ldr	r0, [pc, #72]	@ (80129e8 <rosidl_runtime_c__String__fini+0x84>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	68db      	ldr	r3, [r3, #12]
 80129a4:	f000 fa62 	bl	8012e6c <fwrite>
 80129a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129ac:	f000 f84a 	bl	8012a44 <exit>
 80129b0:	4770      	bx	lr
 80129b2:	4b0c      	ldr	r3, [pc, #48]	@ (80129e4 <rosidl_runtime_c__String__fini+0x80>)
 80129b4:	224c      	movs	r2, #76	@ 0x4c
 80129b6:	2101      	movs	r1, #1
 80129b8:	480c      	ldr	r0, [pc, #48]	@ (80129ec <rosidl_runtime_c__String__fini+0x88>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	68db      	ldr	r3, [r3, #12]
 80129be:	f000 fa55 	bl	8012e6c <fwrite>
 80129c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129c6:	f000 f83d 	bl	8012a44 <exit>
 80129ca:	4b06      	ldr	r3, [pc, #24]	@ (80129e4 <rosidl_runtime_c__String__fini+0x80>)
 80129cc:	224e      	movs	r2, #78	@ 0x4e
 80129ce:	2101      	movs	r1, #1
 80129d0:	4807      	ldr	r0, [pc, #28]	@ (80129f0 <rosidl_runtime_c__String__fini+0x8c>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	f000 fa49 	bl	8012e6c <fwrite>
 80129da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129de:	f000 f831 	bl	8012a44 <exit>
 80129e2:	bf00      	nop
 80129e4:	2400139c 	.word	0x2400139c
 80129e8:	08014f3c 	.word	0x08014f3c
 80129ec:	08014e9c 	.word	0x08014e9c
 80129f0:	08014eec 	.word	0x08014eec

080129f4 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 80129f4:	3800      	subs	r0, #0
 80129f6:	bf18      	it	ne
 80129f8:	2001      	movne	r0, #1
 80129fa:	4770      	bx	lr

080129fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 80129fc:	4770      	bx	lr
 80129fe:	bf00      	nop

08012a00 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8012a00:	3800      	subs	r0, #0
 8012a02:	bf18      	it	ne
 8012a04:	2001      	movne	r0, #1
 8012a06:	4770      	bx	lr

08012a08 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop

08012a0c <calloc>:
 8012a0c:	4b02      	ldr	r3, [pc, #8]	@ (8012a18 <calloc+0xc>)
 8012a0e:	460a      	mov	r2, r1
 8012a10:	4601      	mov	r1, r0
 8012a12:	6818      	ldr	r0, [r3, #0]
 8012a14:	f000 b802 	b.w	8012a1c <_calloc_r>
 8012a18:	2400139c 	.word	0x2400139c

08012a1c <_calloc_r>:
 8012a1c:	b570      	push	{r4, r5, r6, lr}
 8012a1e:	fba1 5402 	umull	r5, r4, r1, r2
 8012a22:	b93c      	cbnz	r4, 8012a34 <_calloc_r+0x18>
 8012a24:	4629      	mov	r1, r5
 8012a26:	f000 f851 	bl	8012acc <_malloc_r>
 8012a2a:	4606      	mov	r6, r0
 8012a2c:	b928      	cbnz	r0, 8012a3a <_calloc_r+0x1e>
 8012a2e:	2600      	movs	r6, #0
 8012a30:	4630      	mov	r0, r6
 8012a32:	bd70      	pop	{r4, r5, r6, pc}
 8012a34:	220c      	movs	r2, #12
 8012a36:	6002      	str	r2, [r0, #0]
 8012a38:	e7f9      	b.n	8012a2e <_calloc_r+0x12>
 8012a3a:	462a      	mov	r2, r5
 8012a3c:	4621      	mov	r1, r4
 8012a3e:	f000 fafb 	bl	8013038 <memset>
 8012a42:	e7f5      	b.n	8012a30 <_calloc_r+0x14>

08012a44 <exit>:
 8012a44:	b508      	push	{r3, lr}
 8012a46:	4b06      	ldr	r3, [pc, #24]	@ (8012a60 <exit+0x1c>)
 8012a48:	4604      	mov	r4, r0
 8012a4a:	b113      	cbz	r3, 8012a52 <exit+0xe>
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	f3af 8000 	nop.w
 8012a52:	4b04      	ldr	r3, [pc, #16]	@ (8012a64 <exit+0x20>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	b103      	cbz	r3, 8012a5a <exit+0x16>
 8012a58:	4798      	blx	r3
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f7ee fac0 	bl	8000fe0 <_exit>
 8012a60:	00000000 	.word	0x00000000
 8012a64:	240334d4 	.word	0x240334d4

08012a68 <malloc>:
 8012a68:	4b02      	ldr	r3, [pc, #8]	@ (8012a74 <malloc+0xc>)
 8012a6a:	4601      	mov	r1, r0
 8012a6c:	6818      	ldr	r0, [r3, #0]
 8012a6e:	f000 b82d 	b.w	8012acc <_malloc_r>
 8012a72:	bf00      	nop
 8012a74:	2400139c 	.word	0x2400139c

08012a78 <free>:
 8012a78:	4b02      	ldr	r3, [pc, #8]	@ (8012a84 <free+0xc>)
 8012a7a:	4601      	mov	r1, r0
 8012a7c:	6818      	ldr	r0, [r3, #0]
 8012a7e:	f000 bbcb 	b.w	8013218 <_free_r>
 8012a82:	bf00      	nop
 8012a84:	2400139c 	.word	0x2400139c

08012a88 <sbrk_aligned>:
 8012a88:	b570      	push	{r4, r5, r6, lr}
 8012a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8012ac8 <sbrk_aligned+0x40>)
 8012a8c:	460c      	mov	r4, r1
 8012a8e:	6831      	ldr	r1, [r6, #0]
 8012a90:	4605      	mov	r5, r0
 8012a92:	b911      	cbnz	r1, 8012a9a <sbrk_aligned+0x12>
 8012a94:	f000 fb62 	bl	801315c <_sbrk_r>
 8012a98:	6030      	str	r0, [r6, #0]
 8012a9a:	4621      	mov	r1, r4
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	f000 fb5d 	bl	801315c <_sbrk_r>
 8012aa2:	1c43      	adds	r3, r0, #1
 8012aa4:	d103      	bne.n	8012aae <sbrk_aligned+0x26>
 8012aa6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012aaa:	4620      	mov	r0, r4
 8012aac:	bd70      	pop	{r4, r5, r6, pc}
 8012aae:	1cc4      	adds	r4, r0, #3
 8012ab0:	f024 0403 	bic.w	r4, r4, #3
 8012ab4:	42a0      	cmp	r0, r4
 8012ab6:	d0f8      	beq.n	8012aaa <sbrk_aligned+0x22>
 8012ab8:	1a21      	subs	r1, r4, r0
 8012aba:	4628      	mov	r0, r5
 8012abc:	f000 fb4e 	bl	801315c <_sbrk_r>
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	d1f2      	bne.n	8012aaa <sbrk_aligned+0x22>
 8012ac4:	e7ef      	b.n	8012aa6 <sbrk_aligned+0x1e>
 8012ac6:	bf00      	nop
 8012ac8:	24033394 	.word	0x24033394

08012acc <_malloc_r>:
 8012acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ad0:	1ccd      	adds	r5, r1, #3
 8012ad2:	f025 0503 	bic.w	r5, r5, #3
 8012ad6:	3508      	adds	r5, #8
 8012ad8:	2d0c      	cmp	r5, #12
 8012ada:	bf38      	it	cc
 8012adc:	250c      	movcc	r5, #12
 8012ade:	2d00      	cmp	r5, #0
 8012ae0:	4606      	mov	r6, r0
 8012ae2:	db01      	blt.n	8012ae8 <_malloc_r+0x1c>
 8012ae4:	42a9      	cmp	r1, r5
 8012ae6:	d904      	bls.n	8012af2 <_malloc_r+0x26>
 8012ae8:	230c      	movs	r3, #12
 8012aea:	6033      	str	r3, [r6, #0]
 8012aec:	2000      	movs	r0, #0
 8012aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012af2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012bc8 <_malloc_r+0xfc>
 8012af6:	f000 f869 	bl	8012bcc <__malloc_lock>
 8012afa:	f8d8 3000 	ldr.w	r3, [r8]
 8012afe:	461c      	mov	r4, r3
 8012b00:	bb44      	cbnz	r4, 8012b54 <_malloc_r+0x88>
 8012b02:	4629      	mov	r1, r5
 8012b04:	4630      	mov	r0, r6
 8012b06:	f7ff ffbf 	bl	8012a88 <sbrk_aligned>
 8012b0a:	1c43      	adds	r3, r0, #1
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	d158      	bne.n	8012bc2 <_malloc_r+0xf6>
 8012b10:	f8d8 4000 	ldr.w	r4, [r8]
 8012b14:	4627      	mov	r7, r4
 8012b16:	2f00      	cmp	r7, #0
 8012b18:	d143      	bne.n	8012ba2 <_malloc_r+0xd6>
 8012b1a:	2c00      	cmp	r4, #0
 8012b1c:	d04b      	beq.n	8012bb6 <_malloc_r+0xea>
 8012b1e:	6823      	ldr	r3, [r4, #0]
 8012b20:	4639      	mov	r1, r7
 8012b22:	4630      	mov	r0, r6
 8012b24:	eb04 0903 	add.w	r9, r4, r3
 8012b28:	f000 fb18 	bl	801315c <_sbrk_r>
 8012b2c:	4581      	cmp	r9, r0
 8012b2e:	d142      	bne.n	8012bb6 <_malloc_r+0xea>
 8012b30:	6821      	ldr	r1, [r4, #0]
 8012b32:	1a6d      	subs	r5, r5, r1
 8012b34:	4629      	mov	r1, r5
 8012b36:	4630      	mov	r0, r6
 8012b38:	f7ff ffa6 	bl	8012a88 <sbrk_aligned>
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	d03a      	beq.n	8012bb6 <_malloc_r+0xea>
 8012b40:	6823      	ldr	r3, [r4, #0]
 8012b42:	442b      	add	r3, r5
 8012b44:	6023      	str	r3, [r4, #0]
 8012b46:	f8d8 3000 	ldr.w	r3, [r8]
 8012b4a:	685a      	ldr	r2, [r3, #4]
 8012b4c:	bb62      	cbnz	r2, 8012ba8 <_malloc_r+0xdc>
 8012b4e:	f8c8 7000 	str.w	r7, [r8]
 8012b52:	e00f      	b.n	8012b74 <_malloc_r+0xa8>
 8012b54:	6822      	ldr	r2, [r4, #0]
 8012b56:	1b52      	subs	r2, r2, r5
 8012b58:	d420      	bmi.n	8012b9c <_malloc_r+0xd0>
 8012b5a:	2a0b      	cmp	r2, #11
 8012b5c:	d917      	bls.n	8012b8e <_malloc_r+0xc2>
 8012b5e:	1961      	adds	r1, r4, r5
 8012b60:	42a3      	cmp	r3, r4
 8012b62:	6025      	str	r5, [r4, #0]
 8012b64:	bf18      	it	ne
 8012b66:	6059      	strne	r1, [r3, #4]
 8012b68:	6863      	ldr	r3, [r4, #4]
 8012b6a:	bf08      	it	eq
 8012b6c:	f8c8 1000 	streq.w	r1, [r8]
 8012b70:	5162      	str	r2, [r4, r5]
 8012b72:	604b      	str	r3, [r1, #4]
 8012b74:	4630      	mov	r0, r6
 8012b76:	f000 f82f 	bl	8012bd8 <__malloc_unlock>
 8012b7a:	f104 000b 	add.w	r0, r4, #11
 8012b7e:	1d23      	adds	r3, r4, #4
 8012b80:	f020 0007 	bic.w	r0, r0, #7
 8012b84:	1ac2      	subs	r2, r0, r3
 8012b86:	bf1c      	itt	ne
 8012b88:	1a1b      	subne	r3, r3, r0
 8012b8a:	50a3      	strne	r3, [r4, r2]
 8012b8c:	e7af      	b.n	8012aee <_malloc_r+0x22>
 8012b8e:	6862      	ldr	r2, [r4, #4]
 8012b90:	42a3      	cmp	r3, r4
 8012b92:	bf0c      	ite	eq
 8012b94:	f8c8 2000 	streq.w	r2, [r8]
 8012b98:	605a      	strne	r2, [r3, #4]
 8012b9a:	e7eb      	b.n	8012b74 <_malloc_r+0xa8>
 8012b9c:	4623      	mov	r3, r4
 8012b9e:	6864      	ldr	r4, [r4, #4]
 8012ba0:	e7ae      	b.n	8012b00 <_malloc_r+0x34>
 8012ba2:	463c      	mov	r4, r7
 8012ba4:	687f      	ldr	r7, [r7, #4]
 8012ba6:	e7b6      	b.n	8012b16 <_malloc_r+0x4a>
 8012ba8:	461a      	mov	r2, r3
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	42a3      	cmp	r3, r4
 8012bae:	d1fb      	bne.n	8012ba8 <_malloc_r+0xdc>
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	6053      	str	r3, [r2, #4]
 8012bb4:	e7de      	b.n	8012b74 <_malloc_r+0xa8>
 8012bb6:	230c      	movs	r3, #12
 8012bb8:	6033      	str	r3, [r6, #0]
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f000 f80c 	bl	8012bd8 <__malloc_unlock>
 8012bc0:	e794      	b.n	8012aec <_malloc_r+0x20>
 8012bc2:	6005      	str	r5, [r0, #0]
 8012bc4:	e7d6      	b.n	8012b74 <_malloc_r+0xa8>
 8012bc6:	bf00      	nop
 8012bc8:	24033398 	.word	0x24033398

08012bcc <__malloc_lock>:
 8012bcc:	4801      	ldr	r0, [pc, #4]	@ (8012bd4 <__malloc_lock+0x8>)
 8012bce:	f000 bb12 	b.w	80131f6 <__retarget_lock_acquire_recursive>
 8012bd2:	bf00      	nop
 8012bd4:	240334dc 	.word	0x240334dc

08012bd8 <__malloc_unlock>:
 8012bd8:	4801      	ldr	r0, [pc, #4]	@ (8012be0 <__malloc_unlock+0x8>)
 8012bda:	f000 bb0d 	b.w	80131f8 <__retarget_lock_release_recursive>
 8012bde:	bf00      	nop
 8012be0:	240334dc 	.word	0x240334dc

08012be4 <realloc>:
 8012be4:	4b02      	ldr	r3, [pc, #8]	@ (8012bf0 <realloc+0xc>)
 8012be6:	460a      	mov	r2, r1
 8012be8:	4601      	mov	r1, r0
 8012bea:	6818      	ldr	r0, [r3, #0]
 8012bec:	f000 b802 	b.w	8012bf4 <_realloc_r>
 8012bf0:	2400139c 	.word	0x2400139c

08012bf4 <_realloc_r>:
 8012bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf8:	4680      	mov	r8, r0
 8012bfa:	4615      	mov	r5, r2
 8012bfc:	460c      	mov	r4, r1
 8012bfe:	b921      	cbnz	r1, 8012c0a <_realloc_r+0x16>
 8012c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c04:	4611      	mov	r1, r2
 8012c06:	f7ff bf61 	b.w	8012acc <_malloc_r>
 8012c0a:	b92a      	cbnz	r2, 8012c18 <_realloc_r+0x24>
 8012c0c:	f000 fb04 	bl	8013218 <_free_r>
 8012c10:	2400      	movs	r4, #0
 8012c12:	4620      	mov	r0, r4
 8012c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c18:	f000 fb48 	bl	80132ac <_malloc_usable_size_r>
 8012c1c:	4285      	cmp	r5, r0
 8012c1e:	4606      	mov	r6, r0
 8012c20:	d802      	bhi.n	8012c28 <_realloc_r+0x34>
 8012c22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012c26:	d8f4      	bhi.n	8012c12 <_realloc_r+0x1e>
 8012c28:	4629      	mov	r1, r5
 8012c2a:	4640      	mov	r0, r8
 8012c2c:	f7ff ff4e 	bl	8012acc <_malloc_r>
 8012c30:	4607      	mov	r7, r0
 8012c32:	2800      	cmp	r0, #0
 8012c34:	d0ec      	beq.n	8012c10 <_realloc_r+0x1c>
 8012c36:	42b5      	cmp	r5, r6
 8012c38:	462a      	mov	r2, r5
 8012c3a:	4621      	mov	r1, r4
 8012c3c:	bf28      	it	cs
 8012c3e:	4632      	movcs	r2, r6
 8012c40:	f000 fadb 	bl	80131fa <memcpy>
 8012c44:	4621      	mov	r1, r4
 8012c46:	4640      	mov	r0, r8
 8012c48:	f000 fae6 	bl	8013218 <_free_r>
 8012c4c:	463c      	mov	r4, r7
 8012c4e:	e7e0      	b.n	8012c12 <_realloc_r+0x1e>

08012c50 <std>:
 8012c50:	2300      	movs	r3, #0
 8012c52:	b510      	push	{r4, lr}
 8012c54:	4604      	mov	r4, r0
 8012c56:	e9c0 3300 	strd	r3, r3, [r0]
 8012c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c5e:	6083      	str	r3, [r0, #8]
 8012c60:	8181      	strh	r1, [r0, #12]
 8012c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8012c64:	81c2      	strh	r2, [r0, #14]
 8012c66:	6183      	str	r3, [r0, #24]
 8012c68:	4619      	mov	r1, r3
 8012c6a:	2208      	movs	r2, #8
 8012c6c:	305c      	adds	r0, #92	@ 0x5c
 8012c6e:	f000 f9e3 	bl	8013038 <memset>
 8012c72:	4b0d      	ldr	r3, [pc, #52]	@ (8012ca8 <std+0x58>)
 8012c74:	6263      	str	r3, [r4, #36]	@ 0x24
 8012c76:	4b0d      	ldr	r3, [pc, #52]	@ (8012cac <std+0x5c>)
 8012c78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8012cb0 <std+0x60>)
 8012c7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8012cb4 <std+0x64>)
 8012c80:	6323      	str	r3, [r4, #48]	@ 0x30
 8012c82:	4b0d      	ldr	r3, [pc, #52]	@ (8012cb8 <std+0x68>)
 8012c84:	6224      	str	r4, [r4, #32]
 8012c86:	429c      	cmp	r4, r3
 8012c88:	d006      	beq.n	8012c98 <std+0x48>
 8012c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012c8e:	4294      	cmp	r4, r2
 8012c90:	d002      	beq.n	8012c98 <std+0x48>
 8012c92:	33d0      	adds	r3, #208	@ 0xd0
 8012c94:	429c      	cmp	r4, r3
 8012c96:	d105      	bne.n	8012ca4 <std+0x54>
 8012c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ca0:	f000 baa8 	b.w	80131f4 <__retarget_lock_init_recursive>
 8012ca4:	bd10      	pop	{r4, pc}
 8012ca6:	bf00      	nop
 8012ca8:	08012e89 	.word	0x08012e89
 8012cac:	08012eab 	.word	0x08012eab
 8012cb0:	08012ee3 	.word	0x08012ee3
 8012cb4:	08012f07 	.word	0x08012f07
 8012cb8:	2403339c 	.word	0x2403339c

08012cbc <stdio_exit_handler>:
 8012cbc:	4a02      	ldr	r2, [pc, #8]	@ (8012cc8 <stdio_exit_handler+0xc>)
 8012cbe:	4903      	ldr	r1, [pc, #12]	@ (8012ccc <stdio_exit_handler+0x10>)
 8012cc0:	4803      	ldr	r0, [pc, #12]	@ (8012cd0 <stdio_exit_handler+0x14>)
 8012cc2:	f000 b869 	b.w	8012d98 <_fwalk_sglue>
 8012cc6:	bf00      	nop
 8012cc8:	24001390 	.word	0x24001390
 8012ccc:	080133c5 	.word	0x080133c5
 8012cd0:	240013a0 	.word	0x240013a0

08012cd4 <cleanup_stdio>:
 8012cd4:	6841      	ldr	r1, [r0, #4]
 8012cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8012d08 <cleanup_stdio+0x34>)
 8012cd8:	4299      	cmp	r1, r3
 8012cda:	b510      	push	{r4, lr}
 8012cdc:	4604      	mov	r4, r0
 8012cde:	d001      	beq.n	8012ce4 <cleanup_stdio+0x10>
 8012ce0:	f000 fb70 	bl	80133c4 <_fflush_r>
 8012ce4:	68a1      	ldr	r1, [r4, #8]
 8012ce6:	4b09      	ldr	r3, [pc, #36]	@ (8012d0c <cleanup_stdio+0x38>)
 8012ce8:	4299      	cmp	r1, r3
 8012cea:	d002      	beq.n	8012cf2 <cleanup_stdio+0x1e>
 8012cec:	4620      	mov	r0, r4
 8012cee:	f000 fb69 	bl	80133c4 <_fflush_r>
 8012cf2:	68e1      	ldr	r1, [r4, #12]
 8012cf4:	4b06      	ldr	r3, [pc, #24]	@ (8012d10 <cleanup_stdio+0x3c>)
 8012cf6:	4299      	cmp	r1, r3
 8012cf8:	d004      	beq.n	8012d04 <cleanup_stdio+0x30>
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d00:	f000 bb60 	b.w	80133c4 <_fflush_r>
 8012d04:	bd10      	pop	{r4, pc}
 8012d06:	bf00      	nop
 8012d08:	2403339c 	.word	0x2403339c
 8012d0c:	24033404 	.word	0x24033404
 8012d10:	2403346c 	.word	0x2403346c

08012d14 <global_stdio_init.part.0>:
 8012d14:	b510      	push	{r4, lr}
 8012d16:	4b0b      	ldr	r3, [pc, #44]	@ (8012d44 <global_stdio_init.part.0+0x30>)
 8012d18:	4c0b      	ldr	r4, [pc, #44]	@ (8012d48 <global_stdio_init.part.0+0x34>)
 8012d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8012d4c <global_stdio_init.part.0+0x38>)
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	4620      	mov	r0, r4
 8012d20:	2200      	movs	r2, #0
 8012d22:	2104      	movs	r1, #4
 8012d24:	f7ff ff94 	bl	8012c50 <std>
 8012d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	2109      	movs	r1, #9
 8012d30:	f7ff ff8e 	bl	8012c50 <std>
 8012d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012d38:	2202      	movs	r2, #2
 8012d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d3e:	2112      	movs	r1, #18
 8012d40:	f7ff bf86 	b.w	8012c50 <std>
 8012d44:	240334d4 	.word	0x240334d4
 8012d48:	2403339c 	.word	0x2403339c
 8012d4c:	08012cbd 	.word	0x08012cbd

08012d50 <__sfp_lock_acquire>:
 8012d50:	4801      	ldr	r0, [pc, #4]	@ (8012d58 <__sfp_lock_acquire+0x8>)
 8012d52:	f000 ba50 	b.w	80131f6 <__retarget_lock_acquire_recursive>
 8012d56:	bf00      	nop
 8012d58:	240334dd 	.word	0x240334dd

08012d5c <__sfp_lock_release>:
 8012d5c:	4801      	ldr	r0, [pc, #4]	@ (8012d64 <__sfp_lock_release+0x8>)
 8012d5e:	f000 ba4b 	b.w	80131f8 <__retarget_lock_release_recursive>
 8012d62:	bf00      	nop
 8012d64:	240334dd 	.word	0x240334dd

08012d68 <__sinit>:
 8012d68:	b510      	push	{r4, lr}
 8012d6a:	4604      	mov	r4, r0
 8012d6c:	f7ff fff0 	bl	8012d50 <__sfp_lock_acquire>
 8012d70:	6a23      	ldr	r3, [r4, #32]
 8012d72:	b11b      	cbz	r3, 8012d7c <__sinit+0x14>
 8012d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d78:	f7ff bff0 	b.w	8012d5c <__sfp_lock_release>
 8012d7c:	4b04      	ldr	r3, [pc, #16]	@ (8012d90 <__sinit+0x28>)
 8012d7e:	6223      	str	r3, [r4, #32]
 8012d80:	4b04      	ldr	r3, [pc, #16]	@ (8012d94 <__sinit+0x2c>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d1f5      	bne.n	8012d74 <__sinit+0xc>
 8012d88:	f7ff ffc4 	bl	8012d14 <global_stdio_init.part.0>
 8012d8c:	e7f2      	b.n	8012d74 <__sinit+0xc>
 8012d8e:	bf00      	nop
 8012d90:	08012cd5 	.word	0x08012cd5
 8012d94:	240334d4 	.word	0x240334d4

08012d98 <_fwalk_sglue>:
 8012d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d9c:	4607      	mov	r7, r0
 8012d9e:	4688      	mov	r8, r1
 8012da0:	4614      	mov	r4, r2
 8012da2:	2600      	movs	r6, #0
 8012da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012da8:	f1b9 0901 	subs.w	r9, r9, #1
 8012dac:	d505      	bpl.n	8012dba <_fwalk_sglue+0x22>
 8012dae:	6824      	ldr	r4, [r4, #0]
 8012db0:	2c00      	cmp	r4, #0
 8012db2:	d1f7      	bne.n	8012da4 <_fwalk_sglue+0xc>
 8012db4:	4630      	mov	r0, r6
 8012db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dba:	89ab      	ldrh	r3, [r5, #12]
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	d907      	bls.n	8012dd0 <_fwalk_sglue+0x38>
 8012dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	d003      	beq.n	8012dd0 <_fwalk_sglue+0x38>
 8012dc8:	4629      	mov	r1, r5
 8012dca:	4638      	mov	r0, r7
 8012dcc:	47c0      	blx	r8
 8012dce:	4306      	orrs	r6, r0
 8012dd0:	3568      	adds	r5, #104	@ 0x68
 8012dd2:	e7e9      	b.n	8012da8 <_fwalk_sglue+0x10>

08012dd4 <_fwrite_r>:
 8012dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dd8:	9c08      	ldr	r4, [sp, #32]
 8012dda:	468a      	mov	sl, r1
 8012ddc:	4690      	mov	r8, r2
 8012dde:	fb02 f903 	mul.w	r9, r2, r3
 8012de2:	4606      	mov	r6, r0
 8012de4:	b118      	cbz	r0, 8012dee <_fwrite_r+0x1a>
 8012de6:	6a03      	ldr	r3, [r0, #32]
 8012de8:	b90b      	cbnz	r3, 8012dee <_fwrite_r+0x1a>
 8012dea:	f7ff ffbd 	bl	8012d68 <__sinit>
 8012dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012df0:	07dd      	lsls	r5, r3, #31
 8012df2:	d405      	bmi.n	8012e00 <_fwrite_r+0x2c>
 8012df4:	89a3      	ldrh	r3, [r4, #12]
 8012df6:	0598      	lsls	r0, r3, #22
 8012df8:	d402      	bmi.n	8012e00 <_fwrite_r+0x2c>
 8012dfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012dfc:	f000 f9fb 	bl	80131f6 <__retarget_lock_acquire_recursive>
 8012e00:	89a3      	ldrh	r3, [r4, #12]
 8012e02:	0719      	lsls	r1, r3, #28
 8012e04:	d516      	bpl.n	8012e34 <_fwrite_r+0x60>
 8012e06:	6923      	ldr	r3, [r4, #16]
 8012e08:	b1a3      	cbz	r3, 8012e34 <_fwrite_r+0x60>
 8012e0a:	2500      	movs	r5, #0
 8012e0c:	454d      	cmp	r5, r9
 8012e0e:	d01f      	beq.n	8012e50 <_fwrite_r+0x7c>
 8012e10:	68a7      	ldr	r7, [r4, #8]
 8012e12:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8012e16:	3f01      	subs	r7, #1
 8012e18:	2f00      	cmp	r7, #0
 8012e1a:	60a7      	str	r7, [r4, #8]
 8012e1c:	da04      	bge.n	8012e28 <_fwrite_r+0x54>
 8012e1e:	69a3      	ldr	r3, [r4, #24]
 8012e20:	429f      	cmp	r7, r3
 8012e22:	db0f      	blt.n	8012e44 <_fwrite_r+0x70>
 8012e24:	290a      	cmp	r1, #10
 8012e26:	d00d      	beq.n	8012e44 <_fwrite_r+0x70>
 8012e28:	6823      	ldr	r3, [r4, #0]
 8012e2a:	1c5a      	adds	r2, r3, #1
 8012e2c:	6022      	str	r2, [r4, #0]
 8012e2e:	7019      	strb	r1, [r3, #0]
 8012e30:	3501      	adds	r5, #1
 8012e32:	e7eb      	b.n	8012e0c <_fwrite_r+0x38>
 8012e34:	4621      	mov	r1, r4
 8012e36:	4630      	mov	r0, r6
 8012e38:	f000 f8a8 	bl	8012f8c <__swsetup_r>
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	d0e4      	beq.n	8012e0a <_fwrite_r+0x36>
 8012e40:	2500      	movs	r5, #0
 8012e42:	e005      	b.n	8012e50 <_fwrite_r+0x7c>
 8012e44:	4622      	mov	r2, r4
 8012e46:	4630      	mov	r0, r6
 8012e48:	f000 f861 	bl	8012f0e <__swbuf_r>
 8012e4c:	3001      	adds	r0, #1
 8012e4e:	d1ef      	bne.n	8012e30 <_fwrite_r+0x5c>
 8012e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012e52:	07da      	lsls	r2, r3, #31
 8012e54:	d405      	bmi.n	8012e62 <_fwrite_r+0x8e>
 8012e56:	89a3      	ldrh	r3, [r4, #12]
 8012e58:	059b      	lsls	r3, r3, #22
 8012e5a:	d402      	bmi.n	8012e62 <_fwrite_r+0x8e>
 8012e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e5e:	f000 f9cb 	bl	80131f8 <__retarget_lock_release_recursive>
 8012e62:	fbb5 f0f8 	udiv	r0, r5, r8
 8012e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012e6c <fwrite>:
 8012e6c:	b507      	push	{r0, r1, r2, lr}
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	4613      	mov	r3, r2
 8012e72:	460a      	mov	r2, r1
 8012e74:	4601      	mov	r1, r0
 8012e76:	4803      	ldr	r0, [pc, #12]	@ (8012e84 <fwrite+0x18>)
 8012e78:	6800      	ldr	r0, [r0, #0]
 8012e7a:	f7ff ffab 	bl	8012dd4 <_fwrite_r>
 8012e7e:	b003      	add	sp, #12
 8012e80:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e84:	2400139c 	.word	0x2400139c

08012e88 <__sread>:
 8012e88:	b510      	push	{r4, lr}
 8012e8a:	460c      	mov	r4, r1
 8012e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e90:	f000 f952 	bl	8013138 <_read_r>
 8012e94:	2800      	cmp	r0, #0
 8012e96:	bfab      	itete	ge
 8012e98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8012e9c:	181b      	addge	r3, r3, r0
 8012e9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012ea2:	bfac      	ite	ge
 8012ea4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012ea6:	81a3      	strhlt	r3, [r4, #12]
 8012ea8:	bd10      	pop	{r4, pc}

08012eaa <__swrite>:
 8012eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eae:	461f      	mov	r7, r3
 8012eb0:	898b      	ldrh	r3, [r1, #12]
 8012eb2:	05db      	lsls	r3, r3, #23
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	460c      	mov	r4, r1
 8012eb8:	4616      	mov	r6, r2
 8012eba:	d505      	bpl.n	8012ec8 <__swrite+0x1e>
 8012ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ec0:	2302      	movs	r3, #2
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	f000 f926 	bl	8013114 <_lseek_r>
 8012ec8:	89a3      	ldrh	r3, [r4, #12]
 8012eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ece:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012ed2:	81a3      	strh	r3, [r4, #12]
 8012ed4:	4632      	mov	r2, r6
 8012ed6:	463b      	mov	r3, r7
 8012ed8:	4628      	mov	r0, r5
 8012eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ede:	f000 b94d 	b.w	801317c <_write_r>

08012ee2 <__sseek>:
 8012ee2:	b510      	push	{r4, lr}
 8012ee4:	460c      	mov	r4, r1
 8012ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eea:	f000 f913 	bl	8013114 <_lseek_r>
 8012eee:	1c43      	adds	r3, r0, #1
 8012ef0:	89a3      	ldrh	r3, [r4, #12]
 8012ef2:	bf15      	itete	ne
 8012ef4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012ef6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012efa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012efe:	81a3      	strheq	r3, [r4, #12]
 8012f00:	bf18      	it	ne
 8012f02:	81a3      	strhne	r3, [r4, #12]
 8012f04:	bd10      	pop	{r4, pc}

08012f06 <__sclose>:
 8012f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f0a:	f000 b89d 	b.w	8013048 <_close_r>

08012f0e <__swbuf_r>:
 8012f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f10:	460e      	mov	r6, r1
 8012f12:	4614      	mov	r4, r2
 8012f14:	4605      	mov	r5, r0
 8012f16:	b118      	cbz	r0, 8012f20 <__swbuf_r+0x12>
 8012f18:	6a03      	ldr	r3, [r0, #32]
 8012f1a:	b90b      	cbnz	r3, 8012f20 <__swbuf_r+0x12>
 8012f1c:	f7ff ff24 	bl	8012d68 <__sinit>
 8012f20:	69a3      	ldr	r3, [r4, #24]
 8012f22:	60a3      	str	r3, [r4, #8]
 8012f24:	89a3      	ldrh	r3, [r4, #12]
 8012f26:	071a      	lsls	r2, r3, #28
 8012f28:	d501      	bpl.n	8012f2e <__swbuf_r+0x20>
 8012f2a:	6923      	ldr	r3, [r4, #16]
 8012f2c:	b943      	cbnz	r3, 8012f40 <__swbuf_r+0x32>
 8012f2e:	4621      	mov	r1, r4
 8012f30:	4628      	mov	r0, r5
 8012f32:	f000 f82b 	bl	8012f8c <__swsetup_r>
 8012f36:	b118      	cbz	r0, 8012f40 <__swbuf_r+0x32>
 8012f38:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012f3c:	4638      	mov	r0, r7
 8012f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f40:	6823      	ldr	r3, [r4, #0]
 8012f42:	6922      	ldr	r2, [r4, #16]
 8012f44:	1a98      	subs	r0, r3, r2
 8012f46:	6963      	ldr	r3, [r4, #20]
 8012f48:	b2f6      	uxtb	r6, r6
 8012f4a:	4283      	cmp	r3, r0
 8012f4c:	4637      	mov	r7, r6
 8012f4e:	dc05      	bgt.n	8012f5c <__swbuf_r+0x4e>
 8012f50:	4621      	mov	r1, r4
 8012f52:	4628      	mov	r0, r5
 8012f54:	f000 fa36 	bl	80133c4 <_fflush_r>
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	d1ed      	bne.n	8012f38 <__swbuf_r+0x2a>
 8012f5c:	68a3      	ldr	r3, [r4, #8]
 8012f5e:	3b01      	subs	r3, #1
 8012f60:	60a3      	str	r3, [r4, #8]
 8012f62:	6823      	ldr	r3, [r4, #0]
 8012f64:	1c5a      	adds	r2, r3, #1
 8012f66:	6022      	str	r2, [r4, #0]
 8012f68:	701e      	strb	r6, [r3, #0]
 8012f6a:	6962      	ldr	r2, [r4, #20]
 8012f6c:	1c43      	adds	r3, r0, #1
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d004      	beq.n	8012f7c <__swbuf_r+0x6e>
 8012f72:	89a3      	ldrh	r3, [r4, #12]
 8012f74:	07db      	lsls	r3, r3, #31
 8012f76:	d5e1      	bpl.n	8012f3c <__swbuf_r+0x2e>
 8012f78:	2e0a      	cmp	r6, #10
 8012f7a:	d1df      	bne.n	8012f3c <__swbuf_r+0x2e>
 8012f7c:	4621      	mov	r1, r4
 8012f7e:	4628      	mov	r0, r5
 8012f80:	f000 fa20 	bl	80133c4 <_fflush_r>
 8012f84:	2800      	cmp	r0, #0
 8012f86:	d0d9      	beq.n	8012f3c <__swbuf_r+0x2e>
 8012f88:	e7d6      	b.n	8012f38 <__swbuf_r+0x2a>
	...

08012f8c <__swsetup_r>:
 8012f8c:	b538      	push	{r3, r4, r5, lr}
 8012f8e:	4b29      	ldr	r3, [pc, #164]	@ (8013034 <__swsetup_r+0xa8>)
 8012f90:	4605      	mov	r5, r0
 8012f92:	6818      	ldr	r0, [r3, #0]
 8012f94:	460c      	mov	r4, r1
 8012f96:	b118      	cbz	r0, 8012fa0 <__swsetup_r+0x14>
 8012f98:	6a03      	ldr	r3, [r0, #32]
 8012f9a:	b90b      	cbnz	r3, 8012fa0 <__swsetup_r+0x14>
 8012f9c:	f7ff fee4 	bl	8012d68 <__sinit>
 8012fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fa4:	0719      	lsls	r1, r3, #28
 8012fa6:	d422      	bmi.n	8012fee <__swsetup_r+0x62>
 8012fa8:	06da      	lsls	r2, r3, #27
 8012faa:	d407      	bmi.n	8012fbc <__swsetup_r+0x30>
 8012fac:	2209      	movs	r2, #9
 8012fae:	602a      	str	r2, [r5, #0]
 8012fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fb4:	81a3      	strh	r3, [r4, #12]
 8012fb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012fba:	e033      	b.n	8013024 <__swsetup_r+0x98>
 8012fbc:	0758      	lsls	r0, r3, #29
 8012fbe:	d512      	bpl.n	8012fe6 <__swsetup_r+0x5a>
 8012fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012fc2:	b141      	cbz	r1, 8012fd6 <__swsetup_r+0x4a>
 8012fc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012fc8:	4299      	cmp	r1, r3
 8012fca:	d002      	beq.n	8012fd2 <__swsetup_r+0x46>
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f000 f923 	bl	8013218 <_free_r>
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8012fd6:	89a3      	ldrh	r3, [r4, #12]
 8012fd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012fdc:	81a3      	strh	r3, [r4, #12]
 8012fde:	2300      	movs	r3, #0
 8012fe0:	6063      	str	r3, [r4, #4]
 8012fe2:	6923      	ldr	r3, [r4, #16]
 8012fe4:	6023      	str	r3, [r4, #0]
 8012fe6:	89a3      	ldrh	r3, [r4, #12]
 8012fe8:	f043 0308 	orr.w	r3, r3, #8
 8012fec:	81a3      	strh	r3, [r4, #12]
 8012fee:	6923      	ldr	r3, [r4, #16]
 8012ff0:	b94b      	cbnz	r3, 8013006 <__swsetup_r+0x7a>
 8012ff2:	89a3      	ldrh	r3, [r4, #12]
 8012ff4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ffc:	d003      	beq.n	8013006 <__swsetup_r+0x7a>
 8012ffe:	4621      	mov	r1, r4
 8013000:	4628      	mov	r0, r5
 8013002:	f000 fa2d 	bl	8013460 <__smakebuf_r>
 8013006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801300a:	f013 0201 	ands.w	r2, r3, #1
 801300e:	d00a      	beq.n	8013026 <__swsetup_r+0x9a>
 8013010:	2200      	movs	r2, #0
 8013012:	60a2      	str	r2, [r4, #8]
 8013014:	6962      	ldr	r2, [r4, #20]
 8013016:	4252      	negs	r2, r2
 8013018:	61a2      	str	r2, [r4, #24]
 801301a:	6922      	ldr	r2, [r4, #16]
 801301c:	b942      	cbnz	r2, 8013030 <__swsetup_r+0xa4>
 801301e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013022:	d1c5      	bne.n	8012fb0 <__swsetup_r+0x24>
 8013024:	bd38      	pop	{r3, r4, r5, pc}
 8013026:	0799      	lsls	r1, r3, #30
 8013028:	bf58      	it	pl
 801302a:	6962      	ldrpl	r2, [r4, #20]
 801302c:	60a2      	str	r2, [r4, #8]
 801302e:	e7f4      	b.n	801301a <__swsetup_r+0x8e>
 8013030:	2000      	movs	r0, #0
 8013032:	e7f7      	b.n	8013024 <__swsetup_r+0x98>
 8013034:	2400139c 	.word	0x2400139c

08013038 <memset>:
 8013038:	4402      	add	r2, r0
 801303a:	4603      	mov	r3, r0
 801303c:	4293      	cmp	r3, r2
 801303e:	d100      	bne.n	8013042 <memset+0xa>
 8013040:	4770      	bx	lr
 8013042:	f803 1b01 	strb.w	r1, [r3], #1
 8013046:	e7f9      	b.n	801303c <memset+0x4>

08013048 <_close_r>:
 8013048:	b538      	push	{r3, r4, r5, lr}
 801304a:	4d06      	ldr	r5, [pc, #24]	@ (8013064 <_close_r+0x1c>)
 801304c:	2300      	movs	r3, #0
 801304e:	4604      	mov	r4, r0
 8013050:	4608      	mov	r0, r1
 8013052:	602b      	str	r3, [r5, #0]
 8013054:	f7ee f808 	bl	8001068 <_close>
 8013058:	1c43      	adds	r3, r0, #1
 801305a:	d102      	bne.n	8013062 <_close_r+0x1a>
 801305c:	682b      	ldr	r3, [r5, #0]
 801305e:	b103      	cbz	r3, 8013062 <_close_r+0x1a>
 8013060:	6023      	str	r3, [r4, #0]
 8013062:	bd38      	pop	{r3, r4, r5, pc}
 8013064:	240334d8 	.word	0x240334d8

08013068 <_reclaim_reent>:
 8013068:	4b29      	ldr	r3, [pc, #164]	@ (8013110 <_reclaim_reent+0xa8>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	4283      	cmp	r3, r0
 801306e:	b570      	push	{r4, r5, r6, lr}
 8013070:	4604      	mov	r4, r0
 8013072:	d04b      	beq.n	801310c <_reclaim_reent+0xa4>
 8013074:	69c3      	ldr	r3, [r0, #28]
 8013076:	b1ab      	cbz	r3, 80130a4 <_reclaim_reent+0x3c>
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	b16b      	cbz	r3, 8013098 <_reclaim_reent+0x30>
 801307c:	2500      	movs	r5, #0
 801307e:	69e3      	ldr	r3, [r4, #28]
 8013080:	68db      	ldr	r3, [r3, #12]
 8013082:	5959      	ldr	r1, [r3, r5]
 8013084:	2900      	cmp	r1, #0
 8013086:	d13b      	bne.n	8013100 <_reclaim_reent+0x98>
 8013088:	3504      	adds	r5, #4
 801308a:	2d80      	cmp	r5, #128	@ 0x80
 801308c:	d1f7      	bne.n	801307e <_reclaim_reent+0x16>
 801308e:	69e3      	ldr	r3, [r4, #28]
 8013090:	4620      	mov	r0, r4
 8013092:	68d9      	ldr	r1, [r3, #12]
 8013094:	f000 f8c0 	bl	8013218 <_free_r>
 8013098:	69e3      	ldr	r3, [r4, #28]
 801309a:	6819      	ldr	r1, [r3, #0]
 801309c:	b111      	cbz	r1, 80130a4 <_reclaim_reent+0x3c>
 801309e:	4620      	mov	r0, r4
 80130a0:	f000 f8ba 	bl	8013218 <_free_r>
 80130a4:	6961      	ldr	r1, [r4, #20]
 80130a6:	b111      	cbz	r1, 80130ae <_reclaim_reent+0x46>
 80130a8:	4620      	mov	r0, r4
 80130aa:	f000 f8b5 	bl	8013218 <_free_r>
 80130ae:	69e1      	ldr	r1, [r4, #28]
 80130b0:	b111      	cbz	r1, 80130b8 <_reclaim_reent+0x50>
 80130b2:	4620      	mov	r0, r4
 80130b4:	f000 f8b0 	bl	8013218 <_free_r>
 80130b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80130ba:	b111      	cbz	r1, 80130c2 <_reclaim_reent+0x5a>
 80130bc:	4620      	mov	r0, r4
 80130be:	f000 f8ab 	bl	8013218 <_free_r>
 80130c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130c4:	b111      	cbz	r1, 80130cc <_reclaim_reent+0x64>
 80130c6:	4620      	mov	r0, r4
 80130c8:	f000 f8a6 	bl	8013218 <_free_r>
 80130cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80130ce:	b111      	cbz	r1, 80130d6 <_reclaim_reent+0x6e>
 80130d0:	4620      	mov	r0, r4
 80130d2:	f000 f8a1 	bl	8013218 <_free_r>
 80130d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80130d8:	b111      	cbz	r1, 80130e0 <_reclaim_reent+0x78>
 80130da:	4620      	mov	r0, r4
 80130dc:	f000 f89c 	bl	8013218 <_free_r>
 80130e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80130e2:	b111      	cbz	r1, 80130ea <_reclaim_reent+0x82>
 80130e4:	4620      	mov	r0, r4
 80130e6:	f000 f897 	bl	8013218 <_free_r>
 80130ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80130ec:	b111      	cbz	r1, 80130f4 <_reclaim_reent+0x8c>
 80130ee:	4620      	mov	r0, r4
 80130f0:	f000 f892 	bl	8013218 <_free_r>
 80130f4:	6a23      	ldr	r3, [r4, #32]
 80130f6:	b14b      	cbz	r3, 801310c <_reclaim_reent+0xa4>
 80130f8:	4620      	mov	r0, r4
 80130fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130fe:	4718      	bx	r3
 8013100:	680e      	ldr	r6, [r1, #0]
 8013102:	4620      	mov	r0, r4
 8013104:	f000 f888 	bl	8013218 <_free_r>
 8013108:	4631      	mov	r1, r6
 801310a:	e7bb      	b.n	8013084 <_reclaim_reent+0x1c>
 801310c:	bd70      	pop	{r4, r5, r6, pc}
 801310e:	bf00      	nop
 8013110:	2400139c 	.word	0x2400139c

08013114 <_lseek_r>:
 8013114:	b538      	push	{r3, r4, r5, lr}
 8013116:	4d07      	ldr	r5, [pc, #28]	@ (8013134 <_lseek_r+0x20>)
 8013118:	4604      	mov	r4, r0
 801311a:	4608      	mov	r0, r1
 801311c:	4611      	mov	r1, r2
 801311e:	2200      	movs	r2, #0
 8013120:	602a      	str	r2, [r5, #0]
 8013122:	461a      	mov	r2, r3
 8013124:	f7ed ffc7 	bl	80010b6 <_lseek>
 8013128:	1c43      	adds	r3, r0, #1
 801312a:	d102      	bne.n	8013132 <_lseek_r+0x1e>
 801312c:	682b      	ldr	r3, [r5, #0]
 801312e:	b103      	cbz	r3, 8013132 <_lseek_r+0x1e>
 8013130:	6023      	str	r3, [r4, #0]
 8013132:	bd38      	pop	{r3, r4, r5, pc}
 8013134:	240334d8 	.word	0x240334d8

08013138 <_read_r>:
 8013138:	b538      	push	{r3, r4, r5, lr}
 801313a:	4d07      	ldr	r5, [pc, #28]	@ (8013158 <_read_r+0x20>)
 801313c:	4604      	mov	r4, r0
 801313e:	4608      	mov	r0, r1
 8013140:	4611      	mov	r1, r2
 8013142:	2200      	movs	r2, #0
 8013144:	602a      	str	r2, [r5, #0]
 8013146:	461a      	mov	r2, r3
 8013148:	f7ed ff55 	bl	8000ff6 <_read>
 801314c:	1c43      	adds	r3, r0, #1
 801314e:	d102      	bne.n	8013156 <_read_r+0x1e>
 8013150:	682b      	ldr	r3, [r5, #0]
 8013152:	b103      	cbz	r3, 8013156 <_read_r+0x1e>
 8013154:	6023      	str	r3, [r4, #0]
 8013156:	bd38      	pop	{r3, r4, r5, pc}
 8013158:	240334d8 	.word	0x240334d8

0801315c <_sbrk_r>:
 801315c:	b538      	push	{r3, r4, r5, lr}
 801315e:	4d06      	ldr	r5, [pc, #24]	@ (8013178 <_sbrk_r+0x1c>)
 8013160:	2300      	movs	r3, #0
 8013162:	4604      	mov	r4, r0
 8013164:	4608      	mov	r0, r1
 8013166:	602b      	str	r3, [r5, #0]
 8013168:	f7ed ffb2 	bl	80010d0 <_sbrk>
 801316c:	1c43      	adds	r3, r0, #1
 801316e:	d102      	bne.n	8013176 <_sbrk_r+0x1a>
 8013170:	682b      	ldr	r3, [r5, #0]
 8013172:	b103      	cbz	r3, 8013176 <_sbrk_r+0x1a>
 8013174:	6023      	str	r3, [r4, #0]
 8013176:	bd38      	pop	{r3, r4, r5, pc}
 8013178:	240334d8 	.word	0x240334d8

0801317c <_write_r>:
 801317c:	b538      	push	{r3, r4, r5, lr}
 801317e:	4d07      	ldr	r5, [pc, #28]	@ (801319c <_write_r+0x20>)
 8013180:	4604      	mov	r4, r0
 8013182:	4608      	mov	r0, r1
 8013184:	4611      	mov	r1, r2
 8013186:	2200      	movs	r2, #0
 8013188:	602a      	str	r2, [r5, #0]
 801318a:	461a      	mov	r2, r3
 801318c:	f7ed ff50 	bl	8001030 <_write>
 8013190:	1c43      	adds	r3, r0, #1
 8013192:	d102      	bne.n	801319a <_write_r+0x1e>
 8013194:	682b      	ldr	r3, [r5, #0]
 8013196:	b103      	cbz	r3, 801319a <_write_r+0x1e>
 8013198:	6023      	str	r3, [r4, #0]
 801319a:	bd38      	pop	{r3, r4, r5, pc}
 801319c:	240334d8 	.word	0x240334d8

080131a0 <__errno>:
 80131a0:	4b01      	ldr	r3, [pc, #4]	@ (80131a8 <__errno+0x8>)
 80131a2:	6818      	ldr	r0, [r3, #0]
 80131a4:	4770      	bx	lr
 80131a6:	bf00      	nop
 80131a8:	2400139c 	.word	0x2400139c

080131ac <__libc_init_array>:
 80131ac:	b570      	push	{r4, r5, r6, lr}
 80131ae:	4d0d      	ldr	r5, [pc, #52]	@ (80131e4 <__libc_init_array+0x38>)
 80131b0:	4c0d      	ldr	r4, [pc, #52]	@ (80131e8 <__libc_init_array+0x3c>)
 80131b2:	1b64      	subs	r4, r4, r5
 80131b4:	10a4      	asrs	r4, r4, #2
 80131b6:	2600      	movs	r6, #0
 80131b8:	42a6      	cmp	r6, r4
 80131ba:	d109      	bne.n	80131d0 <__libc_init_array+0x24>
 80131bc:	4d0b      	ldr	r5, [pc, #44]	@ (80131ec <__libc_init_array+0x40>)
 80131be:	4c0c      	ldr	r4, [pc, #48]	@ (80131f0 <__libc_init_array+0x44>)
 80131c0:	f000 f9ac 	bl	801351c <_init>
 80131c4:	1b64      	subs	r4, r4, r5
 80131c6:	10a4      	asrs	r4, r4, #2
 80131c8:	2600      	movs	r6, #0
 80131ca:	42a6      	cmp	r6, r4
 80131cc:	d105      	bne.n	80131da <__libc_init_array+0x2e>
 80131ce:	bd70      	pop	{r4, r5, r6, pc}
 80131d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80131d4:	4798      	blx	r3
 80131d6:	3601      	adds	r6, #1
 80131d8:	e7ee      	b.n	80131b8 <__libc_init_array+0xc>
 80131da:	f855 3b04 	ldr.w	r3, [r5], #4
 80131de:	4798      	blx	r3
 80131e0:	3601      	adds	r6, #1
 80131e2:	e7f2      	b.n	80131ca <__libc_init_array+0x1e>
 80131e4:	08014f98 	.word	0x08014f98
 80131e8:	08014f98 	.word	0x08014f98
 80131ec:	08014f98 	.word	0x08014f98
 80131f0:	08014fd8 	.word	0x08014fd8

080131f4 <__retarget_lock_init_recursive>:
 80131f4:	4770      	bx	lr

080131f6 <__retarget_lock_acquire_recursive>:
 80131f6:	4770      	bx	lr

080131f8 <__retarget_lock_release_recursive>:
 80131f8:	4770      	bx	lr

080131fa <memcpy>:
 80131fa:	440a      	add	r2, r1
 80131fc:	4291      	cmp	r1, r2
 80131fe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013202:	d100      	bne.n	8013206 <memcpy+0xc>
 8013204:	4770      	bx	lr
 8013206:	b510      	push	{r4, lr}
 8013208:	f811 4b01 	ldrb.w	r4, [r1], #1
 801320c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013210:	4291      	cmp	r1, r2
 8013212:	d1f9      	bne.n	8013208 <memcpy+0xe>
 8013214:	bd10      	pop	{r4, pc}
	...

08013218 <_free_r>:
 8013218:	b538      	push	{r3, r4, r5, lr}
 801321a:	4605      	mov	r5, r0
 801321c:	2900      	cmp	r1, #0
 801321e:	d041      	beq.n	80132a4 <_free_r+0x8c>
 8013220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013224:	1f0c      	subs	r4, r1, #4
 8013226:	2b00      	cmp	r3, #0
 8013228:	bfb8      	it	lt
 801322a:	18e4      	addlt	r4, r4, r3
 801322c:	f7ff fcce 	bl	8012bcc <__malloc_lock>
 8013230:	4a1d      	ldr	r2, [pc, #116]	@ (80132a8 <_free_r+0x90>)
 8013232:	6813      	ldr	r3, [r2, #0]
 8013234:	b933      	cbnz	r3, 8013244 <_free_r+0x2c>
 8013236:	6063      	str	r3, [r4, #4]
 8013238:	6014      	str	r4, [r2, #0]
 801323a:	4628      	mov	r0, r5
 801323c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013240:	f7ff bcca 	b.w	8012bd8 <__malloc_unlock>
 8013244:	42a3      	cmp	r3, r4
 8013246:	d908      	bls.n	801325a <_free_r+0x42>
 8013248:	6820      	ldr	r0, [r4, #0]
 801324a:	1821      	adds	r1, r4, r0
 801324c:	428b      	cmp	r3, r1
 801324e:	bf01      	itttt	eq
 8013250:	6819      	ldreq	r1, [r3, #0]
 8013252:	685b      	ldreq	r3, [r3, #4]
 8013254:	1809      	addeq	r1, r1, r0
 8013256:	6021      	streq	r1, [r4, #0]
 8013258:	e7ed      	b.n	8013236 <_free_r+0x1e>
 801325a:	461a      	mov	r2, r3
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	b10b      	cbz	r3, 8013264 <_free_r+0x4c>
 8013260:	42a3      	cmp	r3, r4
 8013262:	d9fa      	bls.n	801325a <_free_r+0x42>
 8013264:	6811      	ldr	r1, [r2, #0]
 8013266:	1850      	adds	r0, r2, r1
 8013268:	42a0      	cmp	r0, r4
 801326a:	d10b      	bne.n	8013284 <_free_r+0x6c>
 801326c:	6820      	ldr	r0, [r4, #0]
 801326e:	4401      	add	r1, r0
 8013270:	1850      	adds	r0, r2, r1
 8013272:	4283      	cmp	r3, r0
 8013274:	6011      	str	r1, [r2, #0]
 8013276:	d1e0      	bne.n	801323a <_free_r+0x22>
 8013278:	6818      	ldr	r0, [r3, #0]
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	6053      	str	r3, [r2, #4]
 801327e:	4408      	add	r0, r1
 8013280:	6010      	str	r0, [r2, #0]
 8013282:	e7da      	b.n	801323a <_free_r+0x22>
 8013284:	d902      	bls.n	801328c <_free_r+0x74>
 8013286:	230c      	movs	r3, #12
 8013288:	602b      	str	r3, [r5, #0]
 801328a:	e7d6      	b.n	801323a <_free_r+0x22>
 801328c:	6820      	ldr	r0, [r4, #0]
 801328e:	1821      	adds	r1, r4, r0
 8013290:	428b      	cmp	r3, r1
 8013292:	bf04      	itt	eq
 8013294:	6819      	ldreq	r1, [r3, #0]
 8013296:	685b      	ldreq	r3, [r3, #4]
 8013298:	6063      	str	r3, [r4, #4]
 801329a:	bf04      	itt	eq
 801329c:	1809      	addeq	r1, r1, r0
 801329e:	6021      	streq	r1, [r4, #0]
 80132a0:	6054      	str	r4, [r2, #4]
 80132a2:	e7ca      	b.n	801323a <_free_r+0x22>
 80132a4:	bd38      	pop	{r3, r4, r5, pc}
 80132a6:	bf00      	nop
 80132a8:	24033398 	.word	0x24033398

080132ac <_malloc_usable_size_r>:
 80132ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132b0:	1f18      	subs	r0, r3, #4
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	bfbc      	itt	lt
 80132b6:	580b      	ldrlt	r3, [r1, r0]
 80132b8:	18c0      	addlt	r0, r0, r3
 80132ba:	4770      	bx	lr

080132bc <__sflush_r>:
 80132bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80132c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132c4:	0716      	lsls	r6, r2, #28
 80132c6:	4605      	mov	r5, r0
 80132c8:	460c      	mov	r4, r1
 80132ca:	d454      	bmi.n	8013376 <__sflush_r+0xba>
 80132cc:	684b      	ldr	r3, [r1, #4]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	dc02      	bgt.n	80132d8 <__sflush_r+0x1c>
 80132d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	dd48      	ble.n	801336a <__sflush_r+0xae>
 80132d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80132da:	2e00      	cmp	r6, #0
 80132dc:	d045      	beq.n	801336a <__sflush_r+0xae>
 80132de:	2300      	movs	r3, #0
 80132e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80132e4:	682f      	ldr	r7, [r5, #0]
 80132e6:	6a21      	ldr	r1, [r4, #32]
 80132e8:	602b      	str	r3, [r5, #0]
 80132ea:	d030      	beq.n	801334e <__sflush_r+0x92>
 80132ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80132ee:	89a3      	ldrh	r3, [r4, #12]
 80132f0:	0759      	lsls	r1, r3, #29
 80132f2:	d505      	bpl.n	8013300 <__sflush_r+0x44>
 80132f4:	6863      	ldr	r3, [r4, #4]
 80132f6:	1ad2      	subs	r2, r2, r3
 80132f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80132fa:	b10b      	cbz	r3, 8013300 <__sflush_r+0x44>
 80132fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80132fe:	1ad2      	subs	r2, r2, r3
 8013300:	2300      	movs	r3, #0
 8013302:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013304:	6a21      	ldr	r1, [r4, #32]
 8013306:	4628      	mov	r0, r5
 8013308:	47b0      	blx	r6
 801330a:	1c43      	adds	r3, r0, #1
 801330c:	89a3      	ldrh	r3, [r4, #12]
 801330e:	d106      	bne.n	801331e <__sflush_r+0x62>
 8013310:	6829      	ldr	r1, [r5, #0]
 8013312:	291d      	cmp	r1, #29
 8013314:	d82b      	bhi.n	801336e <__sflush_r+0xb2>
 8013316:	4a2a      	ldr	r2, [pc, #168]	@ (80133c0 <__sflush_r+0x104>)
 8013318:	410a      	asrs	r2, r1
 801331a:	07d6      	lsls	r6, r2, #31
 801331c:	d427      	bmi.n	801336e <__sflush_r+0xb2>
 801331e:	2200      	movs	r2, #0
 8013320:	6062      	str	r2, [r4, #4]
 8013322:	04d9      	lsls	r1, r3, #19
 8013324:	6922      	ldr	r2, [r4, #16]
 8013326:	6022      	str	r2, [r4, #0]
 8013328:	d504      	bpl.n	8013334 <__sflush_r+0x78>
 801332a:	1c42      	adds	r2, r0, #1
 801332c:	d101      	bne.n	8013332 <__sflush_r+0x76>
 801332e:	682b      	ldr	r3, [r5, #0]
 8013330:	b903      	cbnz	r3, 8013334 <__sflush_r+0x78>
 8013332:	6560      	str	r0, [r4, #84]	@ 0x54
 8013334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013336:	602f      	str	r7, [r5, #0]
 8013338:	b1b9      	cbz	r1, 801336a <__sflush_r+0xae>
 801333a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801333e:	4299      	cmp	r1, r3
 8013340:	d002      	beq.n	8013348 <__sflush_r+0x8c>
 8013342:	4628      	mov	r0, r5
 8013344:	f7ff ff68 	bl	8013218 <_free_r>
 8013348:	2300      	movs	r3, #0
 801334a:	6363      	str	r3, [r4, #52]	@ 0x34
 801334c:	e00d      	b.n	801336a <__sflush_r+0xae>
 801334e:	2301      	movs	r3, #1
 8013350:	4628      	mov	r0, r5
 8013352:	47b0      	blx	r6
 8013354:	4602      	mov	r2, r0
 8013356:	1c50      	adds	r0, r2, #1
 8013358:	d1c9      	bne.n	80132ee <__sflush_r+0x32>
 801335a:	682b      	ldr	r3, [r5, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d0c6      	beq.n	80132ee <__sflush_r+0x32>
 8013360:	2b1d      	cmp	r3, #29
 8013362:	d001      	beq.n	8013368 <__sflush_r+0xac>
 8013364:	2b16      	cmp	r3, #22
 8013366:	d11e      	bne.n	80133a6 <__sflush_r+0xea>
 8013368:	602f      	str	r7, [r5, #0]
 801336a:	2000      	movs	r0, #0
 801336c:	e022      	b.n	80133b4 <__sflush_r+0xf8>
 801336e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013372:	b21b      	sxth	r3, r3
 8013374:	e01b      	b.n	80133ae <__sflush_r+0xf2>
 8013376:	690f      	ldr	r7, [r1, #16]
 8013378:	2f00      	cmp	r7, #0
 801337a:	d0f6      	beq.n	801336a <__sflush_r+0xae>
 801337c:	0793      	lsls	r3, r2, #30
 801337e:	680e      	ldr	r6, [r1, #0]
 8013380:	bf08      	it	eq
 8013382:	694b      	ldreq	r3, [r1, #20]
 8013384:	600f      	str	r7, [r1, #0]
 8013386:	bf18      	it	ne
 8013388:	2300      	movne	r3, #0
 801338a:	eba6 0807 	sub.w	r8, r6, r7
 801338e:	608b      	str	r3, [r1, #8]
 8013390:	f1b8 0f00 	cmp.w	r8, #0
 8013394:	dde9      	ble.n	801336a <__sflush_r+0xae>
 8013396:	6a21      	ldr	r1, [r4, #32]
 8013398:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801339a:	4643      	mov	r3, r8
 801339c:	463a      	mov	r2, r7
 801339e:	4628      	mov	r0, r5
 80133a0:	47b0      	blx	r6
 80133a2:	2800      	cmp	r0, #0
 80133a4:	dc08      	bgt.n	80133b8 <__sflush_r+0xfc>
 80133a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80133ae:	81a3      	strh	r3, [r4, #12]
 80133b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80133b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b8:	4407      	add	r7, r0
 80133ba:	eba8 0800 	sub.w	r8, r8, r0
 80133be:	e7e7      	b.n	8013390 <__sflush_r+0xd4>
 80133c0:	dfbffffe 	.word	0xdfbffffe

080133c4 <_fflush_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	690b      	ldr	r3, [r1, #16]
 80133c8:	4605      	mov	r5, r0
 80133ca:	460c      	mov	r4, r1
 80133cc:	b913      	cbnz	r3, 80133d4 <_fflush_r+0x10>
 80133ce:	2500      	movs	r5, #0
 80133d0:	4628      	mov	r0, r5
 80133d2:	bd38      	pop	{r3, r4, r5, pc}
 80133d4:	b118      	cbz	r0, 80133de <_fflush_r+0x1a>
 80133d6:	6a03      	ldr	r3, [r0, #32]
 80133d8:	b90b      	cbnz	r3, 80133de <_fflush_r+0x1a>
 80133da:	f7ff fcc5 	bl	8012d68 <__sinit>
 80133de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d0f3      	beq.n	80133ce <_fflush_r+0xa>
 80133e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80133e8:	07d0      	lsls	r0, r2, #31
 80133ea:	d404      	bmi.n	80133f6 <_fflush_r+0x32>
 80133ec:	0599      	lsls	r1, r3, #22
 80133ee:	d402      	bmi.n	80133f6 <_fflush_r+0x32>
 80133f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80133f2:	f7ff ff00 	bl	80131f6 <__retarget_lock_acquire_recursive>
 80133f6:	4628      	mov	r0, r5
 80133f8:	4621      	mov	r1, r4
 80133fa:	f7ff ff5f 	bl	80132bc <__sflush_r>
 80133fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013400:	07da      	lsls	r2, r3, #31
 8013402:	4605      	mov	r5, r0
 8013404:	d4e4      	bmi.n	80133d0 <_fflush_r+0xc>
 8013406:	89a3      	ldrh	r3, [r4, #12]
 8013408:	059b      	lsls	r3, r3, #22
 801340a:	d4e1      	bmi.n	80133d0 <_fflush_r+0xc>
 801340c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801340e:	f7ff fef3 	bl	80131f8 <__retarget_lock_release_recursive>
 8013412:	e7dd      	b.n	80133d0 <_fflush_r+0xc>

08013414 <__swhatbuf_r>:
 8013414:	b570      	push	{r4, r5, r6, lr}
 8013416:	460c      	mov	r4, r1
 8013418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801341c:	2900      	cmp	r1, #0
 801341e:	b096      	sub	sp, #88	@ 0x58
 8013420:	4615      	mov	r5, r2
 8013422:	461e      	mov	r6, r3
 8013424:	da0d      	bge.n	8013442 <__swhatbuf_r+0x2e>
 8013426:	89a3      	ldrh	r3, [r4, #12]
 8013428:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801342c:	f04f 0100 	mov.w	r1, #0
 8013430:	bf14      	ite	ne
 8013432:	2340      	movne	r3, #64	@ 0x40
 8013434:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013438:	2000      	movs	r0, #0
 801343a:	6031      	str	r1, [r6, #0]
 801343c:	602b      	str	r3, [r5, #0]
 801343e:	b016      	add	sp, #88	@ 0x58
 8013440:	bd70      	pop	{r4, r5, r6, pc}
 8013442:	466a      	mov	r2, sp
 8013444:	f000 f848 	bl	80134d8 <_fstat_r>
 8013448:	2800      	cmp	r0, #0
 801344a:	dbec      	blt.n	8013426 <__swhatbuf_r+0x12>
 801344c:	9901      	ldr	r1, [sp, #4]
 801344e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013452:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013456:	4259      	negs	r1, r3
 8013458:	4159      	adcs	r1, r3
 801345a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801345e:	e7eb      	b.n	8013438 <__swhatbuf_r+0x24>

08013460 <__smakebuf_r>:
 8013460:	898b      	ldrh	r3, [r1, #12]
 8013462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013464:	079d      	lsls	r5, r3, #30
 8013466:	4606      	mov	r6, r0
 8013468:	460c      	mov	r4, r1
 801346a:	d507      	bpl.n	801347c <__smakebuf_r+0x1c>
 801346c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013470:	6023      	str	r3, [r4, #0]
 8013472:	6123      	str	r3, [r4, #16]
 8013474:	2301      	movs	r3, #1
 8013476:	6163      	str	r3, [r4, #20]
 8013478:	b003      	add	sp, #12
 801347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801347c:	ab01      	add	r3, sp, #4
 801347e:	466a      	mov	r2, sp
 8013480:	f7ff ffc8 	bl	8013414 <__swhatbuf_r>
 8013484:	9f00      	ldr	r7, [sp, #0]
 8013486:	4605      	mov	r5, r0
 8013488:	4639      	mov	r1, r7
 801348a:	4630      	mov	r0, r6
 801348c:	f7ff fb1e 	bl	8012acc <_malloc_r>
 8013490:	b948      	cbnz	r0, 80134a6 <__smakebuf_r+0x46>
 8013492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013496:	059a      	lsls	r2, r3, #22
 8013498:	d4ee      	bmi.n	8013478 <__smakebuf_r+0x18>
 801349a:	f023 0303 	bic.w	r3, r3, #3
 801349e:	f043 0302 	orr.w	r3, r3, #2
 80134a2:	81a3      	strh	r3, [r4, #12]
 80134a4:	e7e2      	b.n	801346c <__smakebuf_r+0xc>
 80134a6:	89a3      	ldrh	r3, [r4, #12]
 80134a8:	6020      	str	r0, [r4, #0]
 80134aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134ae:	81a3      	strh	r3, [r4, #12]
 80134b0:	9b01      	ldr	r3, [sp, #4]
 80134b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80134b6:	b15b      	cbz	r3, 80134d0 <__smakebuf_r+0x70>
 80134b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134bc:	4630      	mov	r0, r6
 80134be:	f000 f81d 	bl	80134fc <_isatty_r>
 80134c2:	b128      	cbz	r0, 80134d0 <__smakebuf_r+0x70>
 80134c4:	89a3      	ldrh	r3, [r4, #12]
 80134c6:	f023 0303 	bic.w	r3, r3, #3
 80134ca:	f043 0301 	orr.w	r3, r3, #1
 80134ce:	81a3      	strh	r3, [r4, #12]
 80134d0:	89a3      	ldrh	r3, [r4, #12]
 80134d2:	431d      	orrs	r5, r3
 80134d4:	81a5      	strh	r5, [r4, #12]
 80134d6:	e7cf      	b.n	8013478 <__smakebuf_r+0x18>

080134d8 <_fstat_r>:
 80134d8:	b538      	push	{r3, r4, r5, lr}
 80134da:	4d07      	ldr	r5, [pc, #28]	@ (80134f8 <_fstat_r+0x20>)
 80134dc:	2300      	movs	r3, #0
 80134de:	4604      	mov	r4, r0
 80134e0:	4608      	mov	r0, r1
 80134e2:	4611      	mov	r1, r2
 80134e4:	602b      	str	r3, [r5, #0]
 80134e6:	f7ed fdcb 	bl	8001080 <_fstat>
 80134ea:	1c43      	adds	r3, r0, #1
 80134ec:	d102      	bne.n	80134f4 <_fstat_r+0x1c>
 80134ee:	682b      	ldr	r3, [r5, #0]
 80134f0:	b103      	cbz	r3, 80134f4 <_fstat_r+0x1c>
 80134f2:	6023      	str	r3, [r4, #0]
 80134f4:	bd38      	pop	{r3, r4, r5, pc}
 80134f6:	bf00      	nop
 80134f8:	240334d8 	.word	0x240334d8

080134fc <_isatty_r>:
 80134fc:	b538      	push	{r3, r4, r5, lr}
 80134fe:	4d06      	ldr	r5, [pc, #24]	@ (8013518 <_isatty_r+0x1c>)
 8013500:	2300      	movs	r3, #0
 8013502:	4604      	mov	r4, r0
 8013504:	4608      	mov	r0, r1
 8013506:	602b      	str	r3, [r5, #0]
 8013508:	f7ed fdca 	bl	80010a0 <_isatty>
 801350c:	1c43      	adds	r3, r0, #1
 801350e:	d102      	bne.n	8013516 <_isatty_r+0x1a>
 8013510:	682b      	ldr	r3, [r5, #0]
 8013512:	b103      	cbz	r3, 8013516 <_isatty_r+0x1a>
 8013514:	6023      	str	r3, [r4, #0]
 8013516:	bd38      	pop	{r3, r4, r5, pc}
 8013518:	240334d8 	.word	0x240334d8

0801351c <_init>:
 801351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801351e:	bf00      	nop
 8013520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013522:	bc08      	pop	{r3}
 8013524:	469e      	mov	lr, r3
 8013526:	4770      	bx	lr

08013528 <_fini>:
 8013528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801352a:	bf00      	nop
 801352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801352e:	bc08      	pop	{r3}
 8013530:	469e      	mov	lr, r3
 8013532:	4770      	bx	lr
