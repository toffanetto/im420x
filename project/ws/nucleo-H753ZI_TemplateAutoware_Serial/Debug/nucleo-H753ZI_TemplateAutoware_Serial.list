
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d58  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  08018ff8  08018ff8  00019ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019bf4  08019bf4  0001abf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08019bfc  08019bfc  0001abfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019c04  08019c04  0001ac04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000114  24000000  08019c08  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000114  08019d1c  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000174  08019d7c  0001b174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000684b4  240001d8  08019ddc  0001b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2406868c  08019ddc  0001b68c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ec9d  00000000  00000000  0001b202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e1d  00000000  00000000  00049e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002070  00000000  00000000  0004fcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001903  00000000  00000000  00051d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040768  00000000  00000000  00053633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d633  00000000  00000000  00093d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182e40  00000000  00000000  000c13ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0024420e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095f0  00000000  00000000  00244284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0024d874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018fe0 	.word	0x08018fe0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08018fe0 	.word	0x08018fe0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800074c:	f00c fcb0 	bl	800d0b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000750:	4b5a      	ldr	r3, [pc, #360]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000758:	f000 f986 	bl	8000a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800075c:	4b58      	ldr	r3, [pc, #352]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4013      	ands	r3, r2
 8000764:	2b00      	cmp	r3, #0
 8000766:	f040 8090 	bne.w	800088a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01e      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000770:	2208      	movs	r2, #8
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2b00      	cmp	r3, #0
 8000780:	d015      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f023 0307 	bic.w	r3, r3, #7
 8000788:	3308      	adds	r3, #8
 800078a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00b      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079a:	f383 8811 	msr	BASEPRI, r3
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	f3bf 8f4f 	dsb	sy
 80007a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d06a      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
 80007b4:	4b43      	ldr	r3, [pc, #268]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d865      	bhi.n	800088a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007be:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007c2:	4b41      	ldr	r3, [pc, #260]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007c8:	e004      	b.n	80007d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80007ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d903      	bls.n	80007e6 <pvPortMallocMicroROS+0xa6>
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f1      	bne.n	80007ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80007e6:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d04c      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2208      	movs	r2, #8
 80007f6:	4413      	add	r3, r2
 80007f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80007fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1ad2      	subs	r2, r2, r3
 800080a:	2308      	movs	r3, #8
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	429a      	cmp	r2, r3
 8000810:	d920      	bls.n	8000854 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00b      	beq.n	800083c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f3bf 8f4f 	dsb	sy
 8000834:	613b      	str	r3, [r7, #16]
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800083c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800084e:	69b8      	ldr	r0, [r7, #24]
 8000850:	f000 f96e 	bl	8000b30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000860:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	d203      	bcs.n	8000876 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000874:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	431a      	orrs	r2, r3
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800088a:	f00c fc1f 	bl	800d0cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	60fb      	str	r3, [r7, #12]
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80008b0:	69fb      	ldr	r3, [r7, #28]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3728      	adds	r7, #40	@ 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	24030f3c 	.word	0x24030f3c
 80008c0:	24030f48 	.word	0x24030f48
 80008c4:	24030f40 	.word	0x24030f40
 80008c8:	24030f34 	.word	0x24030f34
 80008cc:	24030f44 	.word	0x24030f44

080008d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d04a      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008e2:	2308      	movs	r3, #8
 80008e4:	425b      	negs	r3, r3
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10b      	bne.n	8000916 <vPortFreeMicroROS+0x46>
	__asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	60fb      	str	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	e7fd      	b.n	8000912 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00b      	beq.n	8000936 <vPortFreeMicroROS+0x66>
	__asm volatile
 800091e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	60bb      	str	r3, [r7, #8]
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	e7fd      	b.n	8000932 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d019      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d115      	bne.n	8000978 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800095c:	f00c fba8 	bl	800d0b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4413      	add	r3, r2
 800096a:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 800096c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800096e:	6938      	ldr	r0, [r7, #16]
 8000970:	f000 f8de 	bl	8000b30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000974:	f00c fbaa 	bl	800d0cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	24030f48 	.word	0x24030f48
 8000984:	24030f40 	.word	0x24030f40

08000988 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000994:	2308      	movs	r3, #8
 8000996:	425b      	negs	r3, r3
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	4413      	add	r3, r2
 800099c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <getBlockSize+0x38>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	return count;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	24030f48 	.word	0x24030f48

080009c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009ce:	f00c fb6f 	bl	800d0b0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009d2:	6838      	ldr	r0, [r7, #0]
 80009d4:	f7ff feb4 	bl	8000740 <pvPortMallocMicroROS>
 80009d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d017      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d014      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffce 	bl	8000988 <getBlockSize>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2208      	movs	r2, #8
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d201      	bcs.n	8000a00 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f017 fbfe 	bl	8018206 <memcpy>

		vPortFreeMicroROS(pv);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff60 	bl	80008d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a10:	f00c fb5c 	bl	800d0cc <xTaskResumeAll>

	return newmem;
 8000a14:	68bb      	ldr	r3, [r7, #8]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a28:	f00c fb42 	bl	800d0b0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff fe82 	bl	8000740 <pvPortMallocMicroROS>
 8000a3c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a42:	e004      	b.n	8000a4e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	613a      	str	r2, [r7, #16]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	617a      	str	r2, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f5      	bne.n	8000a44 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a58:	f00c fb38 	bl	800d0cc <xTaskResumeAll>
  	return mem;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <prvHeapInit+0xac>)
 8000a70:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a74:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00c      	beq.n	8000a9a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3307      	adds	r3, #7
 8000a84:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f023 0307 	bic.w	r3, r3, #7
 8000a8c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a96:	4413      	add	r3, r2
 8000a98:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4a16      	ldr	r2, [pc, #88]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ac6:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <prvHeapInit+0xb8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	1ad2      	subs	r2, r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <prvHeapInit+0xbc>)
 8000af4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <prvHeapInit+0xc0>)
 8000afc:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <prvHeapInit+0xc4>)
 8000b00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	00030d40 	.word	0x00030d40
 8000b18:	240001f4 	.word	0x240001f4
 8000b1c:	24030f34 	.word	0x24030f34
 8000b20:	24030f3c 	.word	0x24030f3c
 8000b24:	24030f44 	.word	0x24030f44
 8000b28:	24030f40 	.word	0x24030f40
 8000b2c:	24030f48 	.word	0x24030f48

08000b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <prvInsertBlockIntoFreeList+0xac>)
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e002      	b.n	8000b44 <prvInsertBlockIntoFreeList+0x14>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d8f7      	bhi.n	8000b3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	4413      	add	r3, r2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d108      	bne.n	8000b72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	441a      	add	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d118      	bne.n	8000bb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d00d      	beq.n	8000bae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e008      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e003      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d002      	beq.n	8000bce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	24030f34 	.word	0x24030f34
 8000be0:	24030f3c 	.word	0x24030f3c

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	200b      	movs	r0, #11
 8000c0e:	f001 fd4b 	bl	80026a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c12:	200b      	movs	r0, #11
 8000c14:	f001 fd62 	bl	80026dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	200c      	movs	r0, #12
 8000c1e:	f001 fd43 	bl	80026a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c22:	200c      	movs	r0, #12
 8000c24:	f001 fd5a 	bl	80026dc <HAL_NVIC_EnableIRQ>

}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024400 	.word	0x58024400

08000c34 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c42:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000c44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c48:	4904      	ldr	r1, [pc, #16]	@ (8000c5c <cubemx_transport_open+0x28>)
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f008 fdae 	bl	80097ac <HAL_UART_Receive_DMA>
    return true;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24030f4c 	.word	0x24030f4c

08000c60 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c6e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f008 fde7 	bl	8009844 <HAL_UART_DMAStop>
    return true;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c94:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d11b      	bne.n	8000cd8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	6978      	ldr	r0, [r7, #20]
 8000caa:	f008 fcff 	bl	80096ac <HAL_UART_Transmit_DMA>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cb2:	e002      	b.n	8000cba <cubemx_transport_write+0x3a>
            osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f00b f999 	bl	800bfec <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d104      	bne.n	8000cca <cubemx_transport_write+0x4a>
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc6:	2b20      	cmp	r3, #32
 8000cc8:	d1f4      	bne.n	8000cb4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <cubemx_transport_write+0x54>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	e002      	b.n	8000cda <cubemx_transport_write+0x5a>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e000      	b.n	8000cda <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000cd8:	2300      	movs	r3, #0
    }
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cf8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfe:	b672      	cpsid	i
}
 8000d00:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8000e74 <cubemx_transport_read+0x190>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d068      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a57      	ldr	r2, [pc, #348]	@ (8000e78 <cubemx_transport_read+0x194>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d061      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a55      	ldr	r2, [pc, #340]	@ (8000e7c <cubemx_transport_read+0x198>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05a      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a52      	ldr	r2, [pc, #328]	@ (8000e80 <cubemx_transport_read+0x19c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d053      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a50      	ldr	r2, [pc, #320]	@ (8000e84 <cubemx_transport_read+0x1a0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d04c      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a4d      	ldr	r2, [pc, #308]	@ (8000e88 <cubemx_transport_read+0x1a4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d045      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000e8c <cubemx_transport_read+0x1a8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d03e      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <cubemx_transport_read+0x1ac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d037      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a46      	ldr	r2, [pc, #280]	@ (8000e94 <cubemx_transport_read+0x1b0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d030      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a43      	ldr	r2, [pc, #268]	@ (8000e98 <cubemx_transport_read+0x1b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d029      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a41      	ldr	r2, [pc, #260]	@ (8000e9c <cubemx_transport_read+0x1b8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d022      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ea0 <cubemx_transport_read+0x1bc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01b      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea4 <cubemx_transport_read+0x1c0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d014      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a39      	ldr	r2, [pc, #228]	@ (8000ea8 <cubemx_transport_read+0x1c4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a37      	ldr	r2, [pc, #220]	@ (8000eac <cubemx_transport_read+0x1c8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d006      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a34      	ldr	r2, [pc, #208]	@ (8000eb0 <cubemx_transport_read+0x1cc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d107      	bne.n	8000df2 <cubemx_transport_read+0x10e>
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000df0:	e006      	b.n	8000e00 <cubemx_transport_read+0x11c>
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e00:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e02:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e04:	b662      	cpsie	i
}
 8000e06:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f00b f8ec 	bl	800bfec <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e14:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d104      	bne.n	8000e2a <cubemx_transport_read+0x146>
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f6ff af6a 	blt.w	8000cfe <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e2e:	e011      	b.n	8000e54 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	440b      	add	r3, r1
 8000e3a:	4920      	ldr	r1, [pc, #128]	@ (8000ebc <cubemx_transport_read+0x1d8>)
 8000e3c:	5c8a      	ldrb	r2, [r1, r2]
 8000e3e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e4c:	6013      	str	r3, [r2, #0]
        wrote++;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	3301      	adds	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d003      	beq.n	8000e68 <cubemx_transport_read+0x184>
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d3e3      	bcc.n	8000e30 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000e68:	69bb      	ldr	r3, [r7, #24]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020010 	.word	0x40020010
 8000e78:	40020028 	.word	0x40020028
 8000e7c:	40020040 	.word	0x40020040
 8000e80:	40020058 	.word	0x40020058
 8000e84:	40020070 	.word	0x40020070
 8000e88:	40020088 	.word	0x40020088
 8000e8c:	400200a0 	.word	0x400200a0
 8000e90:	400200b8 	.word	0x400200b8
 8000e94:	40020410 	.word	0x40020410
 8000e98:	40020428 	.word	0x40020428
 8000e9c:	40020440 	.word	0x40020440
 8000ea0:	40020458 	.word	0x40020458
 8000ea4:	40020470 	.word	0x40020470
 8000ea8:	40020488 	.word	0x40020488
 8000eac:	400204a0 	.word	0x400204a0
 8000eb0:	400204b8 	.word	0x400204b8
 8000eb4:	24031750 	.word	0x24031750
 8000eb8:	2403174c 	.word	0x2403174c
 8000ebc:	24030f4c 	.word	0x24030f4c

08000ec0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <MX_ETH_Init+0x84>)
 8000ec8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ed2:	2280      	movs	r2, #128	@ 0x80
 8000ed4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ed8:	22e1      	movs	r2, #225	@ 0xe1
 8000eda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000ef0:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ef2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000efc:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <MX_ETH_Init+0x8c>)
 8000efe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <MX_ETH_Init+0x90>)
 8000f04:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000f08:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f0c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f0e:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000f10:	f004 fa3a 	bl	8005388 <HAL_ETH_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f1a:	f000 fce9 	bl	80018f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f1e:	2238      	movs	r2, #56	@ 0x38
 8000f20:	2100      	movs	r1, #0
 8000f22:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f24:	f017 f850 	bl	8017fc8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f2a:	2221      	movs	r2, #33	@ 0x21
 8000f2c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f30:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f34:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2403178c 	.word	0x2403178c
 8000f44:	40028000 	.word	0x40028000
 8000f48:	2403183c 	.word	0x2403183c
 8000f4c:	24000174 	.word	0x24000174
 8000f50:	24000114 	.word	0x24000114
 8000f54:	24031754 	.word	0x24031754

08000f58 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08e      	sub	sp, #56	@ 0x38
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a59      	ldr	r2, [pc, #356]	@ (80010dc <HAL_ETH_MspInit+0x184>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	f040 80ab 	bne.w	80010d2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f7c:	4b58      	ldr	r3, [pc, #352]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f82:	4a57      	ldr	r2, [pc, #348]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f8c:	4b54      	ldr	r3, [pc, #336]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f96:	623b      	str	r3, [r7, #32]
 8000f98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f9a:	4b51      	ldr	r3, [pc, #324]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000faa:	4b4d      	ldr	r3, [pc, #308]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fb8:	4b49      	ldr	r3, [pc, #292]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fbe:	4a48      	ldr	r2, [pc, #288]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fc8:	4b45      	ldr	r3, [pc, #276]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	61bb      	str	r3, [r7, #24]
 8000fd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b42      	ldr	r3, [pc, #264]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	4a40      	ldr	r2, [pc, #256]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	4a39      	ldr	r2, [pc, #228]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001004:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a31      	ldr	r2, [pc, #196]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b2f      	ldr	r3, [pc, #188]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001030:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a2a      	ldr	r2, [pc, #168]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800104e:	2332      	movs	r3, #50	@ 0x32
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105e:	230b      	movs	r3, #11
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	481e      	ldr	r0, [pc, #120]	@ (80010e4 <HAL_ETH_MspInit+0x18c>)
 800106a:	f004 fdc1 	bl	8005bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800106e:	2386      	movs	r3, #134	@ 0x86
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107e:	230b      	movs	r3, #11
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <HAL_ETH_MspInit+0x190>)
 800108a:	f004 fdb1 	bl	8005bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800108e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a0:	230b      	movs	r3, #11
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4810      	ldr	r0, [pc, #64]	@ (80010ec <HAL_ETH_MspInit+0x194>)
 80010ac:	f004 fda0 	bl	8005bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010b0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c2:	230b      	movs	r3, #11
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	4808      	ldr	r0, [pc, #32]	@ (80010f0 <HAL_ETH_MspInit+0x198>)
 80010ce:	f004 fd8f 	bl	8005bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3738      	adds	r7, #56	@ 0x38
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40028000 	.word	0x40028000
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58020800 	.word	0x58020800
 80010e8:	58020000 	.word	0x58020000
 80010ec:	58020400 	.word	0x58020400
 80010f0:	58021800 	.word	0x58021800

080010f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskMicroROS */
  TaskMicroROSHandle = osThreadNew(StartTaskMicroROS, NULL, &TaskMicroROS_attributes);
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <MX_FREERTOS_Init+0x18>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_FREERTOS_Init+0x1c>)
 80010fe:	f00a fee3 	bl	800bec8 <osThreadNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a03      	ldr	r2, [pc, #12]	@ (8001114 <MX_FREERTOS_Init+0x20>)
 8001106:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	08019080 	.word	0x08019080
 8001110:	08001119 	.word	0x08001119
 8001114:	24031844 	.word	0x24031844

08001118 <StartTaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskMicroROS */
void StartTaskMicroROS(void *argument)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b0a6      	sub	sp, #152	@ 0x98
 800111c:	af02      	add	r7, sp, #8
 800111e:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartTaskMicroROS */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8001120:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <StartTaskMicroROS+0xdc>)
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <StartTaskMicroROS+0xe0>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4b34      	ldr	r3, [pc, #208]	@ (80011fc <StartTaskMicroROS+0xe4>)
 800112a:	4a35      	ldr	r2, [pc, #212]	@ (8001200 <StartTaskMicroROS+0xe8>)
 800112c:	4935      	ldr	r1, [pc, #212]	@ (8001204 <StartTaskMicroROS+0xec>)
 800112e:	2001      	movs	r0, #1
 8001130:	f00d fe9a 	bl	800ee68 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001134:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001138:	4618      	mov	r0, r3
 800113a:	f00d fe17 	bl	800ed6c <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800113e:	4b32      	ldr	r3, [pc, #200]	@ (8001208 <StartTaskMicroROS+0xf0>)
 8001140:	67bb      	str	r3, [r7, #120]	@ 0x78
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001142:	4b32      	ldr	r3, [pc, #200]	@ (800120c <StartTaskMicroROS+0xf4>)
 8001144:	67fb      	str	r3, [r7, #124]	@ 0x7c
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001146:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <StartTaskMicroROS+0xf8>)
 8001148:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800114c:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <StartTaskMicroROS+0xfc>)
 800114e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001152:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001156:	4618      	mov	r0, r3
 8001158:	f00d fe16 	bl	800ed88 <rcutils_set_default_allocator>
 800115c:	4603      	mov	r3, r0
 800115e:	f083 0301 	eor.w	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <StartTaskMicroROS+0x58>
	  printf_("Error on default allocators (line %d)\n", __LINE__);
 8001168:	21b1      	movs	r1, #177	@ 0xb1
 800116a:	482b      	ldr	r0, [pc, #172]	@ (8001218 <StartTaskMicroROS+0x100>)
 800116c:	f000 fb02 	bl	8001774 <printf_>
  std_msgs__msg__Int32 msg;
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 8001170:	463b      	mov	r3, r7
 8001172:	4618      	mov	r0, r3
 8001174:	f00d fe26 	bl	800edc4 <rcutils_get_default_allocator>
 8001178:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800117c:	463d      	mov	r5, r7
 800117e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800118a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	f00d fd1d 	bl	800ebd0 <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001196:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800119a:	f107 0020 	add.w	r0, r7, #32
 800119e:	4a1f      	ldr	r2, [pc, #124]	@ (800121c <StartTaskMicroROS+0x104>)
 80011a0:	491f      	ldr	r1, [pc, #124]	@ (8001220 <StartTaskMicroROS+0x108>)
 80011a2:	f00d fd5f 	bl	800ec64 <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 80011a6:	f00e fb15 	bl	800f7d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80011aa:	4602      	mov	r2, r0
 80011ac:	f107 0120 	add.w	r1, r7, #32
 80011b0:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <StartTaskMicroROS+0x10c>)
 80011b6:	f00d fd97 	bl	800ece8 <rclc_publisher_init_default>
	&publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	"cubemx_publisher");

  msg.data = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	673b      	str	r3, [r7, #112]	@ 0x70

  for(;;)
  {

	rmw_uros_sync_session(1000);
 80011be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011c2:	f00e f825 	bl	800f210 <rmw_uros_sync_session>
	rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 80011c6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80011ca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011ce:	2200      	movs	r2, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00d fcd9 	bl	800eb88 <rcl_publish>
 80011d6:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	if (ret != RCL_RET_OK)
	{
	  //printf_("Error publishing (line %d)\n", __LINE__);
	}

	msg.data++;
 80011da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011dc:	3301      	adds	r3, #1
 80011de:	673b      	str	r3, [r7, #112]	@ 0x70

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011e0:	2102      	movs	r1, #2
 80011e2:	4811      	ldr	r0, [pc, #68]	@ (8001228 <StartTaskMicroROS+0x110>)
 80011e4:	f004 fecd 	bl	8005f82 <HAL_GPIO_TogglePin>

	osDelay(500);
 80011e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ec:	f00a fefe 	bl	800bfec <osDelay>
  {
 80011f0:	e7e5      	b.n	80011be <StartTaskMicroROS+0xa6>
 80011f2:	bf00      	nop
 80011f4:	08000ce5 	.word	0x08000ce5
 80011f8:	08000c81 	.word	0x08000c81
 80011fc:	08000c61 	.word	0x08000c61
 8001200:	08000c35 	.word	0x08000c35
 8001204:	240318a4 	.word	0x240318a4
 8001208:	080018fd 	.word	0x080018fd
 800120c:	08001941 	.word	0x08001941
 8001210:	08001979 	.word	0x08001979
 8001214:	080019e5 	.word	0x080019e5
 8001218:	08019008 	.word	0x08019008
 800121c:	08019030 	.word	0x08019030
 8001220:	08019034 	.word	0x08019034
 8001224:	08019040 	.word	0x08019040
 8001228:	58021000 	.word	0x58021000

0800122c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	@ 0x30
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	4b62      	ldr	r3, [pc, #392]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	4a60      	ldr	r2, [pc, #384]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001252:	4b5e      	ldr	r3, [pc, #376]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001260:	4b5a      	ldr	r3, [pc, #360]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001266:	4a59      	ldr	r2, [pc, #356]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800126c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001270:	4b56      	ldr	r3, [pc, #344]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b53      	ldr	r3, [pc, #332]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	4a51      	ldr	r2, [pc, #324]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128e:	4b4f      	ldr	r3, [pc, #316]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	4a4a      	ldr	r2, [pc, #296]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ac:	4b47      	ldr	r3, [pc, #284]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ba:	4b44      	ldr	r3, [pc, #272]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	4a42      	ldr	r2, [pc, #264]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ca:	4b40      	ldr	r3, [pc, #256]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d8:	4b3c      	ldr	r3, [pc, #240]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	4a3b      	ldr	r2, [pc, #236]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e8:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f6:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	4a33      	ldr	r2, [pc, #204]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001306:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <MX_GPIO_Init+0x1a0>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f244 0101 	movw	r1, #16385	@ 0x4001
 800131a:	482d      	ldr	r0, [pc, #180]	@ (80013d0 <MX_GPIO_Init+0x1a4>)
 800131c:	f004 fe18 	bl	8005f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001326:	482b      	ldr	r0, [pc, #172]	@ (80013d4 <MX_GPIO_Init+0x1a8>)
 8001328:	f004 fe12 	bl	8005f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2102      	movs	r1, #2
 8001330:	4829      	ldr	r0, [pc, #164]	@ (80013d8 <MX_GPIO_Init+0x1ac>)
 8001332:	f004 fe0d 	bl	8005f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001336:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4824      	ldr	r0, [pc, #144]	@ (80013dc <MX_GPIO_Init+0x1b0>)
 800134c:	f004 fc50 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001350:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4819      	ldr	r0, [pc, #100]	@ (80013d0 <MX_GPIO_Init+0x1a4>)
 800136a:	f004 fc41 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800136e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4813      	ldr	r0, [pc, #76]	@ (80013d4 <MX_GPIO_Init+0x1a8>)
 8001388:	f004 fc32 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001390:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <MX_GPIO_Init+0x1b4>)
 80013a2:	f004 fc25 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <MX_GPIO_Init+0x1ac>)
 80013be:	f004 fc17 	bl	8005bf0 <HAL_GPIO_Init>

}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58020400 	.word	0x58020400
 80013d4:	58020c00 	.word	0x58020c00
 80013d8:	58021000 	.word	0x58021000
 80013dc:	58020800 	.word	0x58020800
 80013e0:	58021800 	.word	0x58021800

080013e4 <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	if (str) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00a      	beq.n	800140a <printchar_+0x26>
		**str = (char)c;
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]
		++(*str);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8001408:	e005      	b.n	8001416 <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 800140a:	4639      	mov	r1, r7
 800140c:	230a      	movs	r3, #10
 800140e:	2201      	movs	r2, #1
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <printchar_+0x3c>)
 8001412:	f008 f8bd 	bl	8009590 <HAL_UART_Transmit>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	240318a4 	.word	0x240318a4

08001424 <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8001424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8001434:	2400      	movs	r4, #0
 8001436:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	dd17      	ble.n	8001470 <prints_+0x4c>
		register int len = 0;
 8001440:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8001442:	68be      	ldr	r6, [r7, #8]
 8001444:	e001      	b.n	800144a <prints_+0x26>
 8001446:	3501      	adds	r5, #1
 8001448:	3601      	adds	r6, #1
 800144a:	7833      	ldrb	r3, [r6, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1fa      	bne.n	8001446 <prints_+0x22>
		if (len >= width) width = 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	429d      	cmp	r5, r3
 8001454:	db02      	blt.n	800145c <prints_+0x38>
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	e002      	b.n	8001462 <prints_+0x3e>
		else width -= len;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	1b5b      	subs	r3, r3, r5
 8001460:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <prints_+0x4c>
 800146c:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d116      	bne.n	80014a8 <prints_+0x84>
		for ( ; width > 0; --width) {
 800147a:	e007      	b.n	800148c <prints_+0x68>
			printchar_(out, padchar);
 800147c:	4641      	mov	r1, r8
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff ffb0 	bl	80013e4 <printchar_>
			++pc;
 8001484:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3b01      	subs	r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	dcf4      	bgt.n	800147c <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8001492:	e009      	b.n	80014a8 <prints_+0x84>
		printchar_(out, *string);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff ffa2 	bl	80013e4 <printchar_>
		++pc;
 80014a0:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f1      	bne.n	8001494 <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 80014b0:	e007      	b.n	80014c2 <prints_+0x9e>
		printchar_(out, padchar);
 80014b2:	4641      	mov	r1, r8
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff ff95 	bl	80013e4 <printchar_>
		++pc;
 80014ba:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dcf4      	bgt.n	80014b2 <prints_+0x8e>
	}

	return pc;
 80014c8:	4623      	mov	r3, r4
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080014d4 <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80014d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014d8:	b089      	sub	sp, #36	@ 0x24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80014e4:	f04f 0900 	mov.w	r9, #0
 80014e8:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 80014ea:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10c      	bne.n	800150c <printi_+0x38>
		print_buf[0] = '0';
 80014f2:	2330      	movs	r3, #48	@ 0x30
 80014f4:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 80014f6:	2300      	movs	r3, #0
 80014f8:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 80014fa:	f107 0114 	add.w	r1, r7, #20
 80014fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001500:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff ff8e 	bl	8001424 <prints_>
 8001508:	4603      	mov	r3, r0
 800150a:	e04a      	b.n	80015a2 <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00a      	beq.n	8001528 <printi_+0x54>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0a      	cmp	r3, #10
 8001516:	d107      	bne.n	8001528 <printi_+0x54>
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da04      	bge.n	8001528 <printi_+0x54>
		neg = 1;
 800151e:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	425b      	negs	r3, r3
 8001526:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8001528:	f107 0414 	add.w	r4, r7, #20
 800152c:	340b      	adds	r4, #11
	*s = '\0';
 800152e:	2300      	movs	r3, #0
 8001530:	7023      	strb	r3, [r4, #0]

	while (u) {
 8001532:	e015      	b.n	8001560 <printi_+0x8c>
		t = (unsigned int)u % b;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	fbb5 f2f3 	udiv	r2, r5, r3
 800153a:	fb02 f303 	mul.w	r3, r2, r3
 800153e:	1aeb      	subs	r3, r5, r3
 8001540:	4698      	mov	r8, r3
		if( t >= 10 )
 8001542:	f1b8 0f09 	cmp.w	r8, #9
 8001546:	dd02      	ble.n	800154e <printi_+0x7a>
			t += letbase - '0' - 10;
 8001548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800154a:	3b3a      	subs	r3, #58	@ 0x3a
 800154c:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 800154e:	fa5f f388 	uxtb.w	r3, r8
 8001552:	3c01      	subs	r4, #1
 8001554:	3330      	adds	r3, #48	@ 0x30
 8001556:	b2db      	uxtb	r3, r3
 8001558:	7023      	strb	r3, [r4, #0]
		u /= b;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8001560:	2d00      	cmp	r5, #0
 8001562:	d1e7      	bne.n	8001534 <printi_+0x60>
	}

	if (neg) {
 8001564:	f1b9 0f00 	cmp.w	r9, #0
 8001568:	d013      	beq.n	8001592 <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 800156a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00d      	beq.n	800158c <printi_+0xb8>
 8001570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <printi_+0xb8>
			printchar_(out, '-');
 800157a:	212d      	movs	r1, #45	@ 0x2d
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff ff31 	bl	80013e4 <printchar_>
			++pc;
 8001582:	3601      	adds	r6, #1
			--width;
 8001584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001586:	3b01      	subs	r3, #1
 8001588:	643b      	str	r3, [r7, #64]	@ 0x40
 800158a:	e002      	b.n	8001592 <printi_+0xbe>
		}
		else {
			*--s = '-';
 800158c:	3c01      	subs	r4, #1
 800158e:	232d      	movs	r3, #45	@ 0x2d
 8001590:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8001592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001596:	4621      	mov	r1, r4
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff ff43 	bl	8001424 <prints_>
 800159e:	4603      	mov	r3, r0
 80015a0:	4433      	add	r3, r6
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015ac <print_>:

static int print_( char **out, const char *format, va_list args )
{
 80015ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b0:	b08a      	sub	sp, #40	@ 0x28
 80015b2:	af04      	add	r7, sp, #16
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80015ba:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80015bc:	e0c4      	b.n	8001748 <print_+0x19c>
		if (*format == '%') {
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b25      	cmp	r3, #37	@ 0x25
 80015c4:	f040 80b3 	bne.w	800172e <print_+0x182>
			++format;
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3301      	adds	r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80015ce:	2600      	movs	r6, #0
 80015d0:	4635      	mov	r5, r6
			if (*format == '\0') break;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80bc 	beq.w	8001754 <print_+0x1a8>
			if (*format == '%') goto out;
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b25      	cmp	r3, #37	@ 0x25
 80015e2:	f000 80a6 	beq.w	8001732 <print_+0x186>
			if (*format == '-') {
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80015ec:	d109      	bne.n	8001602 <print_+0x56>
				++format;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80015f4:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80015f6:	e004      	b.n	8001602 <print_+0x56>
				++format;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	3301      	adds	r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80015fe:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b30      	cmp	r3, #48	@ 0x30
 8001608:	d0f6      	beq.n	80015f8 <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800160a:	e00b      	b.n	8001624 <print_+0x78>
				width *= 10;
 800160c:	462b      	mov	r3, r5
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	442b      	add	r3, r5
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	461d      	mov	r5, r3
				width += *format - '0';
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3b30      	subs	r3, #48	@ 0x30
 800161c:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3301      	adds	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b2f      	cmp	r3, #47	@ 0x2f
 800162a:	d903      	bls.n	8001634 <print_+0x88>
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b39      	cmp	r3, #57	@ 0x39
 8001632:	d9eb      	bls.n	800160c <print_+0x60>
			}
			if( *format == 's' ) {
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b73      	cmp	r3, #115	@ 0x73
 800163a:	d112      	bne.n	8001662 <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	1d1a      	adds	r2, r3, #4
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8001646:	f1b8 0f00 	cmp.w	r8, #0
 800164a:	d001      	beq.n	8001650 <print_+0xa4>
 800164c:	4641      	mov	r1, r8
 800164e:	e000      	b.n	8001652 <print_+0xa6>
 8001650:	4947      	ldr	r1, [pc, #284]	@ (8001770 <print_+0x1c4>)
 8001652:	4633      	mov	r3, r6
 8001654:	462a      	mov	r2, r5
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff fee4 	bl	8001424 <prints_>
 800165c:	4603      	mov	r3, r0
 800165e:	441c      	add	r4, r3
				continue;
 8001660:	e06f      	b.n	8001742 <print_+0x196>
			}
			if( *format == 'd' ) {
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b64      	cmp	r3, #100	@ 0x64
 8001668:	d10f      	bne.n	800168a <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	1d1a      	adds	r2, r3, #4
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	2361      	movs	r3, #97	@ 0x61
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	9601      	str	r6, [sp, #4]
 8001678:	9500      	str	r5, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	220a      	movs	r2, #10
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff ff28 	bl	80014d4 <printi_>
 8001684:	4603      	mov	r3, r0
 8001686:	441c      	add	r4, r3
				continue;
 8001688:	e05b      	b.n	8001742 <print_+0x196>
			}
			if( *format == 'x' ) {
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b78      	cmp	r3, #120	@ 0x78
 8001690:	d10f      	bne.n	80016b2 <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	1d1a      	adds	r2, r3, #4
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	6819      	ldr	r1, [r3, #0]
 800169a:	2361      	movs	r3, #97	@ 0x61
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	9601      	str	r6, [sp, #4]
 80016a0:	9500      	str	r5, [sp, #0]
 80016a2:	2300      	movs	r3, #0
 80016a4:	2210      	movs	r2, #16
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f7ff ff14 	bl	80014d4 <printi_>
 80016ac:	4603      	mov	r3, r0
 80016ae:	441c      	add	r4, r3
				continue;
 80016b0:	e047      	b.n	8001742 <print_+0x196>
			}
			if( *format == 'X' ) {
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b58      	cmp	r3, #88	@ 0x58
 80016b8:	d10f      	bne.n	80016da <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	1d1a      	adds	r2, r3, #4
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	2341      	movs	r3, #65	@ 0x41
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	9601      	str	r6, [sp, #4]
 80016c8:	9500      	str	r5, [sp, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	2210      	movs	r2, #16
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff ff00 	bl	80014d4 <printi_>
 80016d4:	4603      	mov	r3, r0
 80016d6:	441c      	add	r4, r3
				continue;
 80016d8:	e033      	b.n	8001742 <print_+0x196>
			}
			if( *format == 'u' ) {
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b75      	cmp	r3, #117	@ 0x75
 80016e0:	d10f      	bne.n	8001702 <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	1d1a      	adds	r2, r3, #4
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	6819      	ldr	r1, [r3, #0]
 80016ea:	2361      	movs	r3, #97	@ 0x61
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	9601      	str	r6, [sp, #4]
 80016f0:	9500      	str	r5, [sp, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	220a      	movs	r2, #10
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff feec 	bl	80014d4 <printi_>
 80016fc:	4603      	mov	r3, r0
 80016fe:	441c      	add	r4, r3
				continue;
 8001700:	e01f      	b.n	8001742 <print_+0x196>
			}
			if( *format == 'c' ) {
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b63      	cmp	r3, #99	@ 0x63
 8001708:	d11b      	bne.n	8001742 <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	1d1a      	adds	r2, r3, #4
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8001716:	2300      	movs	r3, #0
 8001718:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 800171a:	f107 0114 	add.w	r1, r7, #20
 800171e:	4633      	mov	r3, r6
 8001720:	462a      	mov	r2, r5
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f7ff fe7e 	bl	8001424 <prints_>
 8001728:	4603      	mov	r3, r0
 800172a:	441c      	add	r4, r3
				continue;
 800172c:	e009      	b.n	8001742 <print_+0x196>
			}
		}
		else {
		out:
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <print_+0x188>
			if (*format == '%') goto out;
 8001732:	bf00      	nop
			printchar_(out, *format);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f7ff fe52 	bl	80013e4 <printchar_>
			++pc;
 8001740:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	3301      	adds	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f47f af36 	bne.w	80015be <print_+0x12>
 8001752:	e000      	b.n	8001756 <print_+0x1aa>
			if (*format == '\0') break;
 8001754:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <print_+0x1b8>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8001764:	4623      	mov	r3, r4
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001770:	08019054 	.word	0x08019054

08001774 <printf_>:

int printf_(const char *format, ...)
{
 8001774:	b40f      	push	{r0, r1, r2, r3}
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6939      	ldr	r1, [r7, #16]
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff ff10 	bl	80015ac <print_>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001798:	b004      	add	sp, #16
 800179a:	4770      	bx	lr

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f000 fe2a 	bl	80023f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f812 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f7ff fd40 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 80017ac:	f7ff fa1a 	bl	8000be4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80017b0:	f000 fc26 	bl	8002000 <MX_USART3_UART_Init>
  MX_ETH_Init();
 80017b4:	f7ff fb84 	bl	8000ec0 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80017b8:	f000 fd46 	bl	8002248 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017bc:	f00a fb3a 	bl	800be34 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80017c0:	f7ff fc98 	bl	80010f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80017c4:	f00a fb5a 	bl	800be7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <main+0x2c>

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09c      	sub	sp, #112	@ 0x70
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d6:	224c      	movs	r2, #76	@ 0x4c
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f016 fbf4 	bl	8017fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2220      	movs	r2, #32
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f016 fbee 	bl	8017fc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017ec:	2002      	movs	r0, #2
 80017ee:	f004 fd13 	bl	8006218 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <SystemClock_Config+0xf8>)
 80017f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fa:	4a32      	ldr	r2, [pc, #200]	@ (80018c4 <SystemClock_Config+0xf8>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001802:	4b30      	ldr	r3, [pc, #192]	@ (80018c4 <SystemClock_Config+0xf8>)
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <SystemClock_Config+0xfc>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001814:	4a2c      	ldr	r2, [pc, #176]	@ (80018c8 <SystemClock_Config+0xfc>)
 8001816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <SystemClock_Config+0xfc>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001828:	bf00      	nop
 800182a:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <SystemClock_Config+0xfc>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001836:	d1f8      	bne.n	800182a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001838:	2303      	movs	r3, #3
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800183c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001842:	2301      	movs	r3, #1
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001846:	2340      	movs	r3, #64	@ 0x40
 8001848:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184a:	2302      	movs	r3, #2
 800184c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184e:	2302      	movs	r3, #2
 8001850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001852:	2301      	movs	r3, #1
 8001854:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001856:	2318      	movs	r3, #24
 8001858:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800185a:	2302      	movs	r3, #2
 800185c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800185e:	2304      	movs	r3, #4
 8001860:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001862:	2302      	movs	r3, #2
 8001864:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001866:	230c      	movs	r3, #12
 8001868:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800186a:	2300      	movs	r3, #0
 800186c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001876:	4618      	mov	r0, r3
 8001878:	f004 fd18 	bl	80062ac <HAL_RCC_OscConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001882:	f000 f835 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001886:	233f      	movs	r3, #63	@ 0x3f
 8001888:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f005 f958 	bl	8006b60 <HAL_RCC_ClockConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <SystemClock_Config+0xee>
  {
    Error_Handler();
 80018b6:	f000 f81b 	bl	80018f0 <Error_Handler>
  }
}
 80018ba:	bf00      	nop
 80018bc:	3770      	adds	r7, #112	@ 0x70
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	58000400 	.word	0x58000400
 80018c8:	58024800 	.word	0x58024800

080018cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018de:	f000 fdc7 	bl	8002470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40001000 	.word	0x40001000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <Error_Handler+0x8>

080018fc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <microros_allocate+0x3c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <microros_allocate+0x3c>)
 8001914:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <microros_allocate+0x40>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <microros_allocate+0x40>)
 8001924:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7fe ff0a 	bl	8000740 <pvPortMallocMicroROS>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	24031848 	.word	0x24031848
 800193c:	2403184c 	.word	0x2403184c

08001940 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00c      	beq.n	800196a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff f819 	bl	8000988 <getBlockSize>
 8001956:	4603      	mov	r3, r0
 8001958:	4a06      	ldr	r2, [pc, #24]	@ (8001974 <microros_deallocate+0x34>)
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	461a      	mov	r2, r3
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <microros_deallocate+0x34>)
 8001962:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7fe ffb3 	bl	80008d0 <vPortFreeMicroROS>
  }
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2403184c 	.word	0x2403184c

08001978 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <microros_reallocate+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	461a      	mov	r2, r3
 8001990:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <microros_reallocate+0x64>)
 8001992:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <microros_reallocate+0x68>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	4413      	add	r3, r2
 800199e:	461a      	mov	r2, r3
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <microros_reallocate+0x68>)
 80019a2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f7fe fec8 	bl	8000740 <pvPortMallocMicroROS>
 80019b0:	4603      	mov	r3, r0
 80019b2:	e00e      	b.n	80019d2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7fe ffe7 	bl	8000988 <getBlockSize>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a08      	ldr	r2, [pc, #32]	@ (80019e0 <microros_reallocate+0x68>)
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <microros_reallocate+0x68>)
 80019c6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7fe fffa 	bl	80009c4 <pvPortReallocMicroROS>
 80019d0:	4603      	mov	r3, r0
  }
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	24031848 	.word	0x24031848
 80019e0:	2403184c 	.word	0x2403184c

080019e4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a2c <microros_zero_allocate+0x48>)
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <microros_zero_allocate+0x48>)
 8001a02:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <microros_zero_allocate+0x4c>)
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <microros_zero_allocate+0x4c>)
 8001a16:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f7fe ffff 	bl	8000a1e <pvPortCallocMicroROS>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24031848 	.word	0x24031848
 8001a30:	2403184c 	.word	0x2403184c
 8001a34:	00000000 	.word	0x00000000

08001a38 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a4e:	a320      	add	r3, pc, #128	@ (adr r3, 8001ad0 <UTILS_NanosecondsToTimespec+0x98>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fcac 	bl	80003b0 <__aeabi_ldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001a62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a66:	a31a      	add	r3, pc, #104	@ (adr r3, 8001ad0 <UTILS_NanosecondsToTimespec+0x98>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fca0 	bl	80003b0 <__aeabi_ldivmod>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da20      	bge.n	8001abe <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a11      	ldr	r2, [pc, #68]	@ (8001ac8 <UTILS_NanosecondsToTimespec+0x90>)
 8001a82:	fb82 1203 	smull	r1, r2, r2, r3
 8001a86:	1712      	asrs	r2, r2, #28
 8001a88:	17db      	asrs	r3, r3, #31
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	6979      	ldr	r1, [r7, #20]
 8001a98:	17c8      	asrs	r0, r1, #31
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	4605      	mov	r5, r0
 8001a9e:	ebb2 0804 	subs.w	r8, r2, r4
 8001aa2:	eb63 0905 	sbc.w	r9, r3, r5
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4906      	ldr	r1, [pc, #24]	@ (8001acc <UTILS_NanosecondsToTimespec+0x94>)
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	441a      	add	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]
    }
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ac8:	44b82fa1 	.word	0x44b82fa1
 8001acc:	3b9aca00 	.word	0x3b9aca00
 8001ad0:	3b9aca00 	.word	0x3b9aca00
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001adc:	b08e      	sub	sp, #56	@ 0x38
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ae2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001ae4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001afa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00b fd68 	bl	800d5d4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b06:	17da      	asrs	r2, r3, #31
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	61fa      	str	r2, [r7, #28]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	000b      	movs	r3, r1
 8001b18:	2200      	movs	r2, #0
 8001b1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b20:	2200      	movs	r2, #0
 8001b22:	461c      	mov	r4, r3
 8001b24:	4615      	mov	r5, r2
 8001b26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b2a:	1911      	adds	r1, r2, r4
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	416b      	adcs	r3, r5
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b36:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001b3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	f04f 0400 	mov.w	r4, #0
 8001b46:	f04f 0500 	mov.w	r5, #0
 8001b4a:	015d      	lsls	r5, r3, #5
 8001b4c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001b50:	0154      	lsls	r4, r2, #5
 8001b52:	4622      	mov	r2, r4
 8001b54:	462b      	mov	r3, r5
 8001b56:	ebb2 0800 	subs.w	r8, r2, r0
 8001b5a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001b6a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001b6e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001b72:	4690      	mov	r8, r2
 8001b74:	4699      	mov	r9, r3
 8001b76:	eb18 0a00 	adds.w	sl, r8, r0
 8001b7a:	eb49 0b01 	adc.w	fp, r9, r1
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b8a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b8e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b92:	ebb2 040a 	subs.w	r4, r2, sl
 8001b96:	603c      	str	r4, [r7, #0]
 8001b98:	eb63 030b 	sbc.w	r3, r3, fp
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	181b      	adds	r3, r3, r0
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	462b      	mov	r3, r5
 8001baa:	eb41 0303 	adc.w	r3, r1, r3
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bb6:	f7ff ff3f 	bl	8001a38 <UTILS_NanosecondsToTimespec>

    return 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3738      	adds	r7, #56	@ 0x38
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <HAL_MspInit+0x38>)
 8001bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <HAL_MspInit+0x38>)
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_MspInit+0x38>)
 8001be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f06f 0001 	mvn.w	r0, #1
 8001bf4:	f000 fd58 	bl	80026a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	58024400 	.word	0x58024400

08001c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b090      	sub	sp, #64	@ 0x40
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b0f      	cmp	r3, #15
 8001c10:	d827      	bhi.n	8001c62 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001c12:	2200      	movs	r2, #0
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	2036      	movs	r0, #54	@ 0x36
 8001c18:	f000 fd46 	bl	80026a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c1c:	2036      	movs	r0, #54	@ 0x36
 8001c1e:	f000 fd5d 	bl	80026dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001c22:	4a29      	ldr	r2, [pc, #164]	@ (8001cc8 <HAL_InitTick+0xc4>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c28:	4b28      	ldr	r3, [pc, #160]	@ (8001ccc <HAL_InitTick+0xc8>)
 8001c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c2e:	4a27      	ldr	r2, [pc, #156]	@ (8001ccc <HAL_InitTick+0xc8>)
 8001c30:	f043 0310 	orr.w	r3, r3, #16
 8001c34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c38:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <HAL_InitTick+0xc8>)
 8001c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c46:	f107 0210 	add.w	r2, r7, #16
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f005 fb11 	bl	8007278 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c58:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d106      	bne.n	8001c6e <HAL_InitTick+0x6a>
 8001c60:	e001      	b.n	8001c66 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e02b      	b.n	8001cbe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c66:	f005 fadb 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8001c6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001c6c:	e004      	b.n	8001c78 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c6e:	f005 fad7 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8001c72:	4603      	mov	r3, r0
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c7a:	4a15      	ldr	r2, [pc, #84]	@ (8001cd0 <HAL_InitTick+0xcc>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	0c9b      	lsrs	r3, r3, #18
 8001c82:	3b01      	subs	r3, #1
 8001c84:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <HAL_InitTick+0xd0>)
 8001c88:	4a13      	ldr	r2, [pc, #76]	@ (8001cd8 <HAL_InitTick+0xd4>)
 8001c8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <HAL_InitTick+0xd0>)
 8001c8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c92:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c94:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <HAL_InitTick+0xd0>)
 8001c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c98:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <HAL_InitTick+0xd0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_InitTick+0xd0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ca6:	480b      	ldr	r0, [pc, #44]	@ (8001cd4 <HAL_InitTick+0xd0>)
 8001ca8:	f007 f954 	bl	8008f54 <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001cb2:	4808      	ldr	r0, [pc, #32]	@ (8001cd4 <HAL_InitTick+0xd0>)
 8001cb4:	f007 f9b0 	bl	8009018 <HAL_TIM_Base_Start_IT>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	e000      	b.n	8001cbe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3740      	adds	r7, #64	@ 0x40
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2400000c 	.word	0x2400000c
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	24031850 	.word	0x24031850
 8001cd8:	40001000 	.word	0x40001000

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <DMA1_Stream0_IRQHandler+0x10>)
 8001d1a:	f002 f817 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	24031938 	.word	0x24031938

08001d28 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <DMA1_Stream1_IRQHandler+0x10>)
 8001d2e:	f002 f80d 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	240319b0 	.word	0x240319b0

08001d3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <USART3_IRQHandler+0x10>)
 8001d42:	f007 fe15 	bl	8009970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	240318a4 	.word	0x240318a4

08001d50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <TIM6_DAC_IRQHandler+0x10>)
 8001d56:	f007 f9d7 	bl	8009108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	24031850 	.word	0x24031850

08001d64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_kill>:

int _kill(int pid, int sig)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d7e:	f016 fa0d 	bl	801819c <__errno>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2216      	movs	r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
  return -1;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_exit>:

void _exit (int status)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ffe7 	bl	8001d74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001da6:	bf00      	nop
 8001da8:	e7fd      	b.n	8001da6 <_exit+0x12>

08001daa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e00a      	b.n	8001dd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	4601      	mov	r1, r0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	60ba      	str	r2, [r7, #8]
 8001dc8:	b2ca      	uxtb	r2, r1
 8001dca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbf0      	blt.n	8001dbc <_read+0x12>
  }

  return len;
 8001dda:	687b      	ldr	r3, [r7, #4]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e009      	b.n	8001e0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	60ba      	str	r2, [r7, #8]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dbf1      	blt.n	8001df6 <_write+0x12>
  }
  return len;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_close>:

int _close(int file)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e44:	605a      	str	r2, [r3, #4]
  return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_isatty>:

int _isatty(int file)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <_sbrk+0x5c>)
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <_sbrk+0x60>)
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e98:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <_sbrk+0x64>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <_sbrk+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d207      	bcs.n	8001ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb4:	f016 f972 	bl	801819c <__errno>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	220c      	movs	r2, #12
 8001ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ec2:	e009      	b.n	8001ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <_sbrk+0x64>)
 8001ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	24080000 	.word	0x24080000
 8001ee4:	00000400 	.word	0x00000400
 8001ee8:	240318a0 	.word	0x240318a0
 8001eec:	24068690 	.word	0x24068690

08001ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b37      	ldr	r3, [pc, #220]	@ (8001fd4 <SystemInit+0xe4>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efa:	4a36      	ldr	r2, [pc, #216]	@ (8001fd4 <SystemInit+0xe4>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f04:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <SystemInit+0xe8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	2b06      	cmp	r3, #6
 8001f0e:	d807      	bhi.n	8001f20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f10:	4b31      	ldr	r3, [pc, #196]	@ (8001fd8 <SystemInit+0xe8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 030f 	bic.w	r3, r3, #15
 8001f18:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd8 <SystemInit+0xe8>)
 8001f1a:	f043 0307 	orr.w	r3, r3, #7
 8001f1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f20:	4b2e      	ldr	r3, [pc, #184]	@ (8001fdc <SystemInit+0xec>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2d      	ldr	r2, [pc, #180]	@ (8001fdc <SystemInit+0xec>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <SystemInit+0xec>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f32:	4b2a      	ldr	r3, [pc, #168]	@ (8001fdc <SystemInit+0xec>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4929      	ldr	r1, [pc, #164]	@ (8001fdc <SystemInit+0xec>)
 8001f38:	4b29      	ldr	r3, [pc, #164]	@ (8001fe0 <SystemInit+0xf0>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f3e:	4b26      	ldr	r3, [pc, #152]	@ (8001fd8 <SystemInit+0xe8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f4a:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <SystemInit+0xe8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 030f 	bic.w	r3, r3, #15
 8001f52:	4a21      	ldr	r2, [pc, #132]	@ (8001fd8 <SystemInit+0xe8>)
 8001f54:	f043 0307 	orr.w	r3, r3, #7
 8001f58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f5a:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <SystemInit+0xec>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <SystemInit+0xec>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <SystemInit+0xec>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <SystemInit+0xec>)
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <SystemInit+0xf4>)
 8001f70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <SystemInit+0xec>)
 8001f74:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe8 <SystemInit+0xf8>)
 8001f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <SystemInit+0xec>)
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fec <SystemInit+0xfc>)
 8001f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <SystemInit+0xec>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <SystemInit+0xec>)
 8001f86:	4a19      	ldr	r2, [pc, #100]	@ (8001fec <SystemInit+0xfc>)
 8001f88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <SystemInit+0xec>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <SystemInit+0xec>)
 8001f92:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <SystemInit+0xfc>)
 8001f94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <SystemInit+0xec>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <SystemInit+0xec>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8001fdc <SystemInit+0xec>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <SystemInit+0xec>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <SystemInit+0x100>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <SystemInit+0x104>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fba:	d202      	bcs.n	8001fc2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <SystemInit+0x108>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <SystemInit+0x10c>)
 8001fc4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001fc8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	52002000 	.word	0x52002000
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fe4:	02020200 	.word	0x02020200
 8001fe8:	01ff0000 	.word	0x01ff0000
 8001fec:	01010280 	.word	0x01010280
 8001ff0:	5c001000 	.word	0x5c001000
 8001ff4:	ffff0000 	.word	0xffff0000
 8001ff8:	51008108 	.word	0x51008108
 8001ffc:	52004000 	.word	0x52004000

08002000 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002004:	4b22      	ldr	r3, [pc, #136]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 8002006:	4a23      	ldr	r2, [pc, #140]	@ (8002094 <MX_USART3_UART_Init+0x94>)
 8002008:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800200a:	4b21      	ldr	r3, [pc, #132]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 800200c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002010:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b1f      	ldr	r3, [pc, #124]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b1d      	ldr	r3, [pc, #116]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800201e:	4b1c      	ldr	r3, [pc, #112]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 800203e:	2200      	movs	r2, #0
 8002040:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 8002044:	2200      	movs	r2, #0
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002048:	4811      	ldr	r0, [pc, #68]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 800204a:	f007 fa51 	bl	80094f0 <HAL_UART_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002054:	f7ff fc4c 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002058:	2100      	movs	r1, #0
 800205a:	480d      	ldr	r0, [pc, #52]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 800205c:	f009 fad4 	bl	800b608 <HAL_UARTEx_SetTxFifoThreshold>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002066:	f7ff fc43 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	4808      	ldr	r0, [pc, #32]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 800206e:	f009 fb09 	bl	800b684 <HAL_UARTEx_SetRxFifoThreshold>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002078:	f7ff fc3a 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800207c:	4804      	ldr	r0, [pc, #16]	@ (8002090 <MX_USART3_UART_Init+0x90>)
 800207e:	f009 fa8a 	bl	800b596 <HAL_UARTEx_DisableFifoMode>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002088:	f7ff fc32 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	240318a4 	.word	0x240318a4
 8002094:	40004800 	.word	0x40004800

08002098 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0ba      	sub	sp, #232	@ 0xe8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	22c0      	movs	r2, #192	@ 0xc0
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f015 ff85 	bl	8017fc8 <memset>
  if(uartHandle->Instance==USART3)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a5a      	ldr	r2, [pc, #360]	@ (800222c <HAL_UART_MspInit+0x194>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	f040 80ad 	bne.w	8002224 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020ca:	f04f 0202 	mov.w	r2, #2
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	4618      	mov	r0, r3
 80020e2:	f005 f90b 	bl	80072fc <HAL_RCCEx_PeriphCLKConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80020ec:	f7ff fc00 	bl	80018f0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002230 <HAL_UART_MspInit+0x198>)
 80020f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002230 <HAL_UART_MspInit+0x198>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002100:	4b4b      	ldr	r3, [pc, #300]	@ (8002230 <HAL_UART_MspInit+0x198>)
 8002102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800210e:	4b48      	ldr	r3, [pc, #288]	@ (8002230 <HAL_UART_MspInit+0x198>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002114:	4a46      	ldr	r2, [pc, #280]	@ (8002230 <HAL_UART_MspInit+0x198>)
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800211e:	4b44      	ldr	r3, [pc, #272]	@ (8002230 <HAL_UART_MspInit+0x198>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800212c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002130:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002146:	2307      	movs	r3, #7
 8002148:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002150:	4619      	mov	r1, r3
 8002152:	4838      	ldr	r0, [pc, #224]	@ (8002234 <HAL_UART_MspInit+0x19c>)
 8002154:	f003 fd4c 	bl	8005bf0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002158:	4b37      	ldr	r3, [pc, #220]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 800215a:	4a38      	ldr	r2, [pc, #224]	@ (800223c <HAL_UART_MspInit+0x1a4>)
 800215c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800215e:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 8002160:	222d      	movs	r2, #45	@ 0x2d
 8002162:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002164:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216a:	4b33      	ldr	r3, [pc, #204]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002170:	4b31      	ldr	r3, [pc, #196]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 8002172:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002176:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002178:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800217e:	4b2e      	ldr	r3, [pc, #184]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002184:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 8002186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800218a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800218c:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 800218e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002192:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002194:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800219a:	4827      	ldr	r0, [pc, #156]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 800219c:	f000 faac 	bl	80026f8 <HAL_DMA_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80021a6:	f7ff fba3 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a22      	ldr	r2, [pc, #136]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 80021ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80021b2:	4a21      	ldr	r2, [pc, #132]	@ (8002238 <HAL_UART_MspInit+0x1a0>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80021b8:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021ba:	4a22      	ldr	r2, [pc, #136]	@ (8002244 <HAL_UART_MspInit+0x1ac>)
 80021bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80021be:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021c0:	222e      	movs	r2, #46	@ 0x2e
 80021c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021c6:	2240      	movs	r2, #64	@ 0x40
 80021c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80021e4:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021f0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f2:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80021f8:	4811      	ldr	r0, [pc, #68]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 80021fa:	f000 fa7d 	bl	80026f8 <HAL_DMA_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8002204:	f7ff fb74 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 800220c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800220e:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <HAL_UART_MspInit+0x1a8>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2105      	movs	r1, #5
 8002218:	2027      	movs	r0, #39	@ 0x27
 800221a:	f000 fa45 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800221e:	2027      	movs	r0, #39	@ 0x27
 8002220:	f000 fa5c 	bl	80026dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002224:	bf00      	nop
 8002226:	37e8      	adds	r7, #232	@ 0xe8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40004800 	.word	0x40004800
 8002230:	58024400 	.word	0x58024400
 8002234:	58020c00 	.word	0x58020c00
 8002238:	24031938 	.word	0x24031938
 800223c:	40020010 	.word	0x40020010
 8002240:	240319b0 	.word	0x240319b0
 8002244:	40020028 	.word	0x40020028

08002248 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800224c:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800224e:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002250:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002252:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002254:	2209      	movs	r2, #9
 8002256:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800225a:	2202      	movs	r2, #2
 800225c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002260:	2200      	movs	r2, #0
 8002262:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002264:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002266:	2202      	movs	r2, #2
 8002268:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800226a:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800226c:	2201      	movs	r2, #1
 800226e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002272:	2200      	movs	r2, #0
 8002274:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002278:	2200      	movs	r2, #0
 800227a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800227e:	2201      	movs	r2, #1
 8002280:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002284:	2201      	movs	r2, #1
 8002286:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800228a:	2200      	movs	r2, #0
 800228c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002290:	f003 fe91 	bl	8005fb6 <HAL_PCD_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800229a:	f7ff fb29 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	24031a28 	.word	0x24031a28
 80022a8:	40080000 	.word	0x40080000

080022ac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0ba      	sub	sp, #232	@ 0xe8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	22c0      	movs	r2, #192	@ 0xc0
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f015 fe7b 	bl	8017fc8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a30      	ldr	r2, [pc, #192]	@ (8002398 <HAL_PCD_MspInit+0xec>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d159      	bne.n	8002390 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80022dc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80022e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80022ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	4618      	mov	r0, r3
 80022f6:	f005 f801 	bl	80072fc <HAL_RCCEx_PeriphCLKConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002300:	f7ff faf6 	bl	80018f0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002304:	f003 ffc2 	bl	800628c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	4b24      	ldr	r3, [pc, #144]	@ (800239c <HAL_PCD_MspInit+0xf0>)
 800230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230e:	4a23      	ldr	r2, [pc, #140]	@ (800239c <HAL_PCD_MspInit+0xf0>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002318:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_PCD_MspInit+0xf0>)
 800231a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002326:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800232a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002340:	230a      	movs	r3, #10
 8002342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800234a:	4619      	mov	r1, r3
 800234c:	4814      	ldr	r0, [pc, #80]	@ (80023a0 <HAL_PCD_MspInit+0xf4>)
 800234e:	f003 fc4f 	bl	8005bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002356:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800236a:	4619      	mov	r1, r3
 800236c:	480c      	ldr	r0, [pc, #48]	@ (80023a0 <HAL_PCD_MspInit+0xf4>)
 800236e:	f003 fc3f 	bl	8005bf0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_PCD_MspInit+0xf0>)
 8002374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002378:	4a08      	ldr	r2, [pc, #32]	@ (800239c <HAL_PCD_MspInit+0xf0>)
 800237a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800237e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_PCD_MspInit+0xf0>)
 8002384:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002390:	bf00      	nop
 8002392:	37e8      	adds	r7, #232	@ 0xe8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40080000 	.word	0x40080000
 800239c:	58024400 	.word	0x58024400
 80023a0:	58020000 	.word	0x58020000

080023a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023a8:	f7ff fda2 	bl	8001ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023ac:	480c      	ldr	r0, [pc, #48]	@ (80023e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ae:	490d      	ldr	r1, [pc, #52]	@ (80023e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023b0:	4a0d      	ldr	r2, [pc, #52]	@ (80023e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b4:	e002      	b.n	80023bc <LoopCopyDataInit>

080023b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ba:	3304      	adds	r3, #4

080023bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c0:	d3f9      	bcc.n	80023b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023c4:	4c0a      	ldr	r4, [pc, #40]	@ (80023f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c8:	e001      	b.n	80023ce <LoopFillZerobss>

080023ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023cc:	3204      	adds	r2, #4

080023ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d0:	d3fb      	bcc.n	80023ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d2:	f015 fee9 	bl	80181a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023d6:	f7ff f9e1 	bl	800179c <main>
  bx  lr
 80023da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023e4:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 80023e8:	08019c08 	.word	0x08019c08
  ldr r2, =_sbss
 80023ec:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80023f0:	2406868c 	.word	0x2406868c

080023f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC3_IRQHandler>
	...

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fe:	2003      	movs	r0, #3
 8002400:	f000 f947 	bl	8002692 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002404:	f004 fd62 	bl	8006ecc <HAL_RCC_GetSysClockFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <HAL_Init+0x68>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	4913      	ldr	r1, [pc, #76]	@ (8002464 <HAL_Init+0x6c>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
 8002420:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_Init+0x68>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	4a0e      	ldr	r2, [pc, #56]	@ (8002464 <HAL_Init+0x6c>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
 8002438:	4a0b      	ldr	r2, [pc, #44]	@ (8002468 <HAL_Init+0x70>)
 800243a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800243c:	4a0b      	ldr	r2, [pc, #44]	@ (800246c <HAL_Init+0x74>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002442:	200f      	movs	r0, #15
 8002444:	f7ff fbde 	bl	8001c04 <HAL_InitTick>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e002      	b.n	8002458 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002452:	f7ff fbb9 	bl	8001bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	58024400 	.word	0x58024400
 8002464:	080190a4 	.word	0x080190a4
 8002468:	24000008 	.word	0x24000008
 800246c:	24000004 	.word	0x24000004

08002470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_IncTick+0x20>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_IncTick+0x24>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4413      	add	r3, r2
 8002480:	4a04      	ldr	r2, [pc, #16]	@ (8002494 <HAL_IncTick+0x24>)
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	24000010 	.word	0x24000010
 8002494:	24031f0c 	.word	0x24031f0c

08002498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b03      	ldr	r3, [pc, #12]	@ (80024ac <HAL_GetTick+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	24031f0c 	.word	0x24031f0c

080024b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b8:	f7ff ffee 	bl	8002498 <HAL_GetTick>
 80024bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024c8:	d005      	beq.n	80024d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_Delay+0x44>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d6:	bf00      	nop
 80024d8:	f7ff ffde 	bl	8002498 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d8f7      	bhi.n	80024d8 <HAL_Delay+0x28>
  {
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	24000010 	.word	0x24000010

080024f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <HAL_GetREVID+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0c1b      	lsrs	r3, r3, #16
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	5c001000 	.word	0x5c001000

08002510 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002520:	4904      	ldr	r1, [pc, #16]	@ (8002534 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	58000400 	.word	0x58000400

08002538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <__NVIC_SetPriorityGrouping+0x40>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	4313      	orrs	r3, r2
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <__NVIC_SetPriorityGrouping+0x40>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00
 800257c:	05fa0000 	.word	0x05fa0000

08002580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <__NVIC_GetPriorityGrouping+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0307 	and.w	r3, r3, #7
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0b      	blt.n	80025c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4907      	ldr	r1, [pc, #28]	@ (80025d4 <__NVIC_EnableIRQ+0x38>)
 80025b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	@ (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	@ (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	@ 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	@ 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ff4c 	bl	8002538 <__NVIC_SetPriorityGrouping>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b6:	f7ff ff63 	bl	8002580 <__NVIC_GetPriorityGrouping>
 80026ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	6978      	ldr	r0, [r7, #20]
 80026c2:	f7ff ffb3 	bl	800262c <NVIC_EncodePriority>
 80026c6:	4602      	mov	r2, r0
 80026c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ff82 	bl	80025d8 <__NVIC_SetPriority>
}
 80026d4:	bf00      	nop
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff56 	bl	800259c <__NVIC_EnableIRQ>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7ff feca 	bl	8002498 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e316      	b.n	8002d3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a66      	ldr	r2, [pc, #408]	@ (80028b0 <HAL_DMA_Init+0x1b8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d04a      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a65      	ldr	r2, [pc, #404]	@ (80028b4 <HAL_DMA_Init+0x1bc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d045      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a63      	ldr	r2, [pc, #396]	@ (80028b8 <HAL_DMA_Init+0x1c0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d040      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a62      	ldr	r2, [pc, #392]	@ (80028bc <HAL_DMA_Init+0x1c4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d03b      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a60      	ldr	r2, [pc, #384]	@ (80028c0 <HAL_DMA_Init+0x1c8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d036      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a5f      	ldr	r2, [pc, #380]	@ (80028c4 <HAL_DMA_Init+0x1cc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d031      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a5d      	ldr	r2, [pc, #372]	@ (80028c8 <HAL_DMA_Init+0x1d0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02c      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5c      	ldr	r2, [pc, #368]	@ (80028cc <HAL_DMA_Init+0x1d4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d027      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a5a      	ldr	r2, [pc, #360]	@ (80028d0 <HAL_DMA_Init+0x1d8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d022      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a59      	ldr	r2, [pc, #356]	@ (80028d4 <HAL_DMA_Init+0x1dc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d01d      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a57      	ldr	r2, [pc, #348]	@ (80028d8 <HAL_DMA_Init+0x1e0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a56      	ldr	r2, [pc, #344]	@ (80028dc <HAL_DMA_Init+0x1e4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a54      	ldr	r2, [pc, #336]	@ (80028e0 <HAL_DMA_Init+0x1e8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a53      	ldr	r2, [pc, #332]	@ (80028e4 <HAL_DMA_Init+0x1ec>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a51      	ldr	r2, [pc, #324]	@ (80028e8 <HAL_DMA_Init+0x1f0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a50      	ldr	r2, [pc, #320]	@ (80028ec <HAL_DMA_Init+0x1f4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_Init+0xbc>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_Init+0xbe>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 813b 	beq.w	8002a32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a37      	ldr	r2, [pc, #220]	@ (80028b0 <HAL_DMA_Init+0x1b8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04a      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a36      	ldr	r2, [pc, #216]	@ (80028b4 <HAL_DMA_Init+0x1bc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d045      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a34      	ldr	r2, [pc, #208]	@ (80028b8 <HAL_DMA_Init+0x1c0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d040      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a33      	ldr	r2, [pc, #204]	@ (80028bc <HAL_DMA_Init+0x1c4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d03b      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a31      	ldr	r2, [pc, #196]	@ (80028c0 <HAL_DMA_Init+0x1c8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d036      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a30      	ldr	r2, [pc, #192]	@ (80028c4 <HAL_DMA_Init+0x1cc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d031      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2e      	ldr	r2, [pc, #184]	@ (80028c8 <HAL_DMA_Init+0x1d0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02c      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2d      	ldr	r2, [pc, #180]	@ (80028cc <HAL_DMA_Init+0x1d4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d027      	beq.n	800286c <HAL_DMA_Init+0x174>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2b      	ldr	r2, [pc, #172]	@ (80028d0 <HAL_DMA_Init+0x1d8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d022      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2a      	ldr	r2, [pc, #168]	@ (80028d4 <HAL_DMA_Init+0x1dc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d01d      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a28      	ldr	r2, [pc, #160]	@ (80028d8 <HAL_DMA_Init+0x1e0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d018      	beq.n	800286c <HAL_DMA_Init+0x174>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a27      	ldr	r2, [pc, #156]	@ (80028dc <HAL_DMA_Init+0x1e4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a25      	ldr	r2, [pc, #148]	@ (80028e0 <HAL_DMA_Init+0x1e8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_DMA_Init+0x174>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <HAL_DMA_Init+0x1ec>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a22      	ldr	r2, [pc, #136]	@ (80028e8 <HAL_DMA_Init+0x1f0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a21      	ldr	r2, [pc, #132]	@ (80028ec <HAL_DMA_Init+0x1f4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d108      	bne.n	800287e <HAL_DMA_Init+0x186>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e007      	b.n	800288e <HAL_DMA_Init+0x196>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800288e:	e02f      	b.n	80028f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002890:	f7ff fe02 	bl	8002498 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b05      	cmp	r3, #5
 800289c:	d928      	bls.n	80028f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2203      	movs	r2, #3
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e246      	b.n	8002d3e <HAL_DMA_Init+0x646>
 80028b0:	40020010 	.word	0x40020010
 80028b4:	40020028 	.word	0x40020028
 80028b8:	40020040 	.word	0x40020040
 80028bc:	40020058 	.word	0x40020058
 80028c0:	40020070 	.word	0x40020070
 80028c4:	40020088 	.word	0x40020088
 80028c8:	400200a0 	.word	0x400200a0
 80028cc:	400200b8 	.word	0x400200b8
 80028d0:	40020410 	.word	0x40020410
 80028d4:	40020428 	.word	0x40020428
 80028d8:	40020440 	.word	0x40020440
 80028dc:	40020458 	.word	0x40020458
 80028e0:	40020470 	.word	0x40020470
 80028e4:	40020488 	.word	0x40020488
 80028e8:	400204a0 	.word	0x400204a0
 80028ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1c8      	bne.n	8002890 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4b83      	ldr	r3, [pc, #524]	@ (8002b18 <HAL_DMA_Init+0x420>)
 800290a:	4013      	ands	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002916:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002922:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	2b04      	cmp	r3, #4
 8002942:	d107      	bne.n	8002954 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	4313      	orrs	r3, r2
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002954:	4b71      	ldr	r3, [pc, #452]	@ (8002b1c <HAL_DMA_Init+0x424>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b71      	ldr	r3, [pc, #452]	@ (8002b20 <HAL_DMA_Init+0x428>)
 800295a:	4013      	ands	r3, r2
 800295c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002960:	d328      	bcc.n	80029b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b28      	cmp	r3, #40	@ 0x28
 8002968:	d903      	bls.n	8002972 <HAL_DMA_Init+0x27a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002970:	d917      	bls.n	80029a2 <HAL_DMA_Init+0x2aa>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b3e      	cmp	r3, #62	@ 0x3e
 8002978:	d903      	bls.n	8002982 <HAL_DMA_Init+0x28a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b42      	cmp	r3, #66	@ 0x42
 8002980:	d90f      	bls.n	80029a2 <HAL_DMA_Init+0x2aa>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b46      	cmp	r3, #70	@ 0x46
 8002988:	d903      	bls.n	8002992 <HAL_DMA_Init+0x29a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b48      	cmp	r3, #72	@ 0x48
 8002990:	d907      	bls.n	80029a2 <HAL_DMA_Init+0x2aa>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b4e      	cmp	r3, #78	@ 0x4e
 8002998:	d905      	bls.n	80029a6 <HAL_DMA_Init+0x2ae>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b52      	cmp	r3, #82	@ 0x52
 80029a0:	d801      	bhi.n	80029a6 <HAL_DMA_Init+0x2ae>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_DMA_Init+0x2b0>
 80029a6:	2300      	movs	r3, #0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0307 	bic.w	r3, r3, #7
 80029ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d117      	bne.n	8002a0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00e      	beq.n	8002a0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f002 fb3f 	bl	8005074 <DMA_CheckFifoParam>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2240      	movs	r2, #64	@ 0x40
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e197      	b.n	8002d3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f002 fa7a 	bl	8004f10 <DMA_CalcBaseAndBitshift>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	223f      	movs	r2, #63	@ 0x3f
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	e0cd      	b.n	8002bce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a3b      	ldr	r2, [pc, #236]	@ (8002b24 <HAL_DMA_Init+0x42c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d022      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a39      	ldr	r2, [pc, #228]	@ (8002b28 <HAL_DMA_Init+0x430>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a38      	ldr	r2, [pc, #224]	@ (8002b2c <HAL_DMA_Init+0x434>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d018      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a36      	ldr	r2, [pc, #216]	@ (8002b30 <HAL_DMA_Init+0x438>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a35      	ldr	r2, [pc, #212]	@ (8002b34 <HAL_DMA_Init+0x43c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00e      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a33      	ldr	r2, [pc, #204]	@ (8002b38 <HAL_DMA_Init+0x440>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a32      	ldr	r2, [pc, #200]	@ (8002b3c <HAL_DMA_Init+0x444>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a30      	ldr	r2, [pc, #192]	@ (8002b40 <HAL_DMA_Init+0x448>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_DMA_Init+0x38e>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_Init+0x390>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8097 	beq.w	8002bbc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a24      	ldr	r2, [pc, #144]	@ (8002b24 <HAL_DMA_Init+0x42c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d021      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a22      	ldr	r2, [pc, #136]	@ (8002b28 <HAL_DMA_Init+0x430>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01c      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a21      	ldr	r2, [pc, #132]	@ (8002b2c <HAL_DMA_Init+0x434>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d017      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <HAL_DMA_Init+0x438>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d012      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1e      	ldr	r2, [pc, #120]	@ (8002b34 <HAL_DMA_Init+0x43c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00d      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b38 <HAL_DMA_Init+0x440>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d008      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1b      	ldr	r2, [pc, #108]	@ (8002b3c <HAL_DMA_Init+0x444>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a19      	ldr	r2, [pc, #100]	@ (8002b40 <HAL_DMA_Init+0x448>)
 8002ada:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <HAL_DMA_Init+0x44c>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b40      	cmp	r3, #64	@ 0x40
 8002b02:	d021      	beq.n	8002b48 <HAL_DMA_Init+0x450>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b80      	cmp	r3, #128	@ 0x80
 8002b0a:	d102      	bne.n	8002b12 <HAL_DMA_Init+0x41a>
 8002b0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b10:	e01b      	b.n	8002b4a <HAL_DMA_Init+0x452>
 8002b12:	2300      	movs	r3, #0
 8002b14:	e019      	b.n	8002b4a <HAL_DMA_Init+0x452>
 8002b16:	bf00      	nop
 8002b18:	fe10803f 	.word	0xfe10803f
 8002b1c:	5c001000 	.word	0x5c001000
 8002b20:	ffff0000 	.word	0xffff0000
 8002b24:	58025408 	.word	0x58025408
 8002b28:	5802541c 	.word	0x5802541c
 8002b2c:	58025430 	.word	0x58025430
 8002b30:	58025444 	.word	0x58025444
 8002b34:	58025458 	.word	0x58025458
 8002b38:	5802546c 	.word	0x5802546c
 8002b3c:	58025480 	.word	0x58025480
 8002b40:	58025494 	.word	0x58025494
 8002b44:	fffe000f 	.word	0xfffe000f
 8002b48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68d2      	ldr	r2, [r2, #12]
 8002b4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002d48 <HAL_DMA_Init+0x650>)
 8002b90:	4413      	add	r3, r2
 8002b92:	4a6e      	ldr	r2, [pc, #440]	@ (8002d4c <HAL_DMA_Init+0x654>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	009a      	lsls	r2, r3, #2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f002 f9b5 	bl	8004f10 <DMA_CalcBaseAndBitshift>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e008      	b.n	8002bce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2240      	movs	r2, #64	@ 0x40
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0b7      	b.n	8002d3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d50 <HAL_DMA_Init+0x658>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d072      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8002d54 <HAL_DMA_Init+0x65c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d06d      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d58 <HAL_DMA_Init+0x660>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d068      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8002d5c <HAL_DMA_Init+0x664>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d063      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a59      	ldr	r2, [pc, #356]	@ (8002d60 <HAL_DMA_Init+0x668>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d05e      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a57      	ldr	r2, [pc, #348]	@ (8002d64 <HAL_DMA_Init+0x66c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d059      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a56      	ldr	r2, [pc, #344]	@ (8002d68 <HAL_DMA_Init+0x670>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d054      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a54      	ldr	r2, [pc, #336]	@ (8002d6c <HAL_DMA_Init+0x674>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d04f      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a53      	ldr	r2, [pc, #332]	@ (8002d70 <HAL_DMA_Init+0x678>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d04a      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a51      	ldr	r2, [pc, #324]	@ (8002d74 <HAL_DMA_Init+0x67c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d045      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a50      	ldr	r2, [pc, #320]	@ (8002d78 <HAL_DMA_Init+0x680>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d040      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a4e      	ldr	r2, [pc, #312]	@ (8002d7c <HAL_DMA_Init+0x684>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d03b      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002d80 <HAL_DMA_Init+0x688>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	@ (8002d84 <HAL_DMA_Init+0x68c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d88 <HAL_DMA_Init+0x690>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d02c      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a48      	ldr	r2, [pc, #288]	@ (8002d8c <HAL_DMA_Init+0x694>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a47      	ldr	r2, [pc, #284]	@ (8002d90 <HAL_DMA_Init+0x698>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a45      	ldr	r2, [pc, #276]	@ (8002d94 <HAL_DMA_Init+0x69c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a44      	ldr	r2, [pc, #272]	@ (8002d98 <HAL_DMA_Init+0x6a0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a42      	ldr	r2, [pc, #264]	@ (8002d9c <HAL_DMA_Init+0x6a4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a41      	ldr	r2, [pc, #260]	@ (8002da0 <HAL_DMA_Init+0x6a8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8002da4 <HAL_DMA_Init+0x6ac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3e      	ldr	r2, [pc, #248]	@ (8002da8 <HAL_DMA_Init+0x6b0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dac <HAL_DMA_Init+0x6b4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Init+0x5ca>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_Init+0x5cc>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d032      	beq.n	8002d2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f002 fa4f 	bl	800516c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b80      	cmp	r3, #128	@ 0x80
 8002cd4:	d102      	bne.n	8002cdc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cf0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_DMA_Init+0x624>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d80c      	bhi.n	8002d1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f002 facc 	bl	80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	e008      	b.n	8002d2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	a7fdabf8 	.word	0xa7fdabf8
 8002d4c:	cccccccd 	.word	0xcccccccd
 8002d50:	40020010 	.word	0x40020010
 8002d54:	40020028 	.word	0x40020028
 8002d58:	40020040 	.word	0x40020040
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	40020070 	.word	0x40020070
 8002d64:	40020088 	.word	0x40020088
 8002d68:	400200a0 	.word	0x400200a0
 8002d6c:	400200b8 	.word	0x400200b8
 8002d70:	40020410 	.word	0x40020410
 8002d74:	40020428 	.word	0x40020428
 8002d78:	40020440 	.word	0x40020440
 8002d7c:	40020458 	.word	0x40020458
 8002d80:	40020470 	.word	0x40020470
 8002d84:	40020488 	.word	0x40020488
 8002d88:	400204a0 	.word	0x400204a0
 8002d8c:	400204b8 	.word	0x400204b8
 8002d90:	58025408 	.word	0x58025408
 8002d94:	5802541c 	.word	0x5802541c
 8002d98:	58025430 	.word	0x58025430
 8002d9c:	58025444 	.word	0x58025444
 8002da0:	58025458 	.word	0x58025458
 8002da4:	5802546c 	.word	0x5802546c
 8002da8:	58025480 	.word	0x58025480
 8002dac:	58025494 	.word	0x58025494

08002db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e226      	b.n	800321a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_DMA_Start_IT+0x2a>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e21f      	b.n	800321a <HAL_DMA_Start_IT+0x46a>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	f040 820a 	bne.w	8003204 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a68      	ldr	r2, [pc, #416]	@ (8002fa4 <HAL_DMA_Start_IT+0x1f4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04a      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a66      	ldr	r2, [pc, #408]	@ (8002fa8 <HAL_DMA_Start_IT+0x1f8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d045      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a65      	ldr	r2, [pc, #404]	@ (8002fac <HAL_DMA_Start_IT+0x1fc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a63      	ldr	r2, [pc, #396]	@ (8002fb0 <HAL_DMA_Start_IT+0x200>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d03b      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a62      	ldr	r2, [pc, #392]	@ (8002fb4 <HAL_DMA_Start_IT+0x204>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d036      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a60      	ldr	r2, [pc, #384]	@ (8002fb8 <HAL_DMA_Start_IT+0x208>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8002fbc <HAL_DMA_Start_IT+0x20c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d02c      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a5d      	ldr	r2, [pc, #372]	@ (8002fc0 <HAL_DMA_Start_IT+0x210>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d027      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc4 <HAL_DMA_Start_IT+0x214>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc8 <HAL_DMA_Start_IT+0x218>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a59      	ldr	r2, [pc, #356]	@ (8002fcc <HAL_DMA_Start_IT+0x21c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a57      	ldr	r2, [pc, #348]	@ (8002fd0 <HAL_DMA_Start_IT+0x220>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a56      	ldr	r2, [pc, #344]	@ (8002fd4 <HAL_DMA_Start_IT+0x224>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a54      	ldr	r2, [pc, #336]	@ (8002fd8 <HAL_DMA_Start_IT+0x228>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a53      	ldr	r2, [pc, #332]	@ (8002fdc <HAL_DMA_Start_IT+0x22c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a51      	ldr	r2, [pc, #324]	@ (8002fe0 <HAL_DMA_Start_IT+0x230>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d108      	bne.n	8002eb0 <HAL_DMA_Start_IT+0x100>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e007      	b.n	8002ec0 <HAL_DMA_Start_IT+0x110>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f001 fe76 	bl	8004bb8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a34      	ldr	r2, [pc, #208]	@ (8002fa4 <HAL_DMA_Start_IT+0x1f4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d04a      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a33      	ldr	r2, [pc, #204]	@ (8002fa8 <HAL_DMA_Start_IT+0x1f8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d045      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a31      	ldr	r2, [pc, #196]	@ (8002fac <HAL_DMA_Start_IT+0x1fc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d040      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a30      	ldr	r2, [pc, #192]	@ (8002fb0 <HAL_DMA_Start_IT+0x200>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d03b      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb4 <HAL_DMA_Start_IT+0x204>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d036      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb8 <HAL_DMA_Start_IT+0x208>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d031      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fbc <HAL_DMA_Start_IT+0x20c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d02c      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc0 <HAL_DMA_Start_IT+0x210>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d027      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a28      	ldr	r2, [pc, #160]	@ (8002fc4 <HAL_DMA_Start_IT+0x214>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d022      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a27      	ldr	r2, [pc, #156]	@ (8002fc8 <HAL_DMA_Start_IT+0x218>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d01d      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a25      	ldr	r2, [pc, #148]	@ (8002fcc <HAL_DMA_Start_IT+0x21c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d018      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	@ (8002fd0 <HAL_DMA_Start_IT+0x220>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a22      	ldr	r2, [pc, #136]	@ (8002fd4 <HAL_DMA_Start_IT+0x224>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00e      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a21      	ldr	r2, [pc, #132]	@ (8002fd8 <HAL_DMA_Start_IT+0x228>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <HAL_DMA_Start_IT+0x22c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_DMA_Start_IT+0x230>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_DMA_Start_IT+0x1c0>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_DMA_Start_IT+0x1c2>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d036      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 021e 	bic.w	r2, r3, #30
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0216 	orr.w	r2, r2, #22
 8002f88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d03e      	beq.n	8003010 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0208 	orr.w	r2, r2, #8
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e035      	b.n	8003010 <HAL_DMA_Start_IT+0x260>
 8002fa4:	40020010 	.word	0x40020010
 8002fa8:	40020028 	.word	0x40020028
 8002fac:	40020040 	.word	0x40020040
 8002fb0:	40020058 	.word	0x40020058
 8002fb4:	40020070 	.word	0x40020070
 8002fb8:	40020088 	.word	0x40020088
 8002fbc:	400200a0 	.word	0x400200a0
 8002fc0:	400200b8 	.word	0x400200b8
 8002fc4:	40020410 	.word	0x40020410
 8002fc8:	40020428 	.word	0x40020428
 8002fcc:	40020440 	.word	0x40020440
 8002fd0:	40020458 	.word	0x40020458
 8002fd4:	40020470 	.word	0x40020470
 8002fd8:	40020488 	.word	0x40020488
 8002fdc:	400204a0 	.word	0x400204a0
 8002fe0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 020e 	bic.w	r2, r3, #14
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 020a 	orr.w	r2, r2, #10
 8002ff6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0204 	orr.w	r2, r2, #4
 800300e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a83      	ldr	r2, [pc, #524]	@ (8003224 <HAL_DMA_Start_IT+0x474>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d072      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a82      	ldr	r2, [pc, #520]	@ (8003228 <HAL_DMA_Start_IT+0x478>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d06d      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a80      	ldr	r2, [pc, #512]	@ (800322c <HAL_DMA_Start_IT+0x47c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d068      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a7f      	ldr	r2, [pc, #508]	@ (8003230 <HAL_DMA_Start_IT+0x480>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d063      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a7d      	ldr	r2, [pc, #500]	@ (8003234 <HAL_DMA_Start_IT+0x484>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d05e      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7c      	ldr	r2, [pc, #496]	@ (8003238 <HAL_DMA_Start_IT+0x488>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d059      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a7a      	ldr	r2, [pc, #488]	@ (800323c <HAL_DMA_Start_IT+0x48c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d054      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a79      	ldr	r2, [pc, #484]	@ (8003240 <HAL_DMA_Start_IT+0x490>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04f      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a77      	ldr	r2, [pc, #476]	@ (8003244 <HAL_DMA_Start_IT+0x494>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d04a      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a76      	ldr	r2, [pc, #472]	@ (8003248 <HAL_DMA_Start_IT+0x498>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d045      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a74      	ldr	r2, [pc, #464]	@ (800324c <HAL_DMA_Start_IT+0x49c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d040      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a73      	ldr	r2, [pc, #460]	@ (8003250 <HAL_DMA_Start_IT+0x4a0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d03b      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a71      	ldr	r2, [pc, #452]	@ (8003254 <HAL_DMA_Start_IT+0x4a4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d036      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a70      	ldr	r2, [pc, #448]	@ (8003258 <HAL_DMA_Start_IT+0x4a8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d031      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a6e      	ldr	r2, [pc, #440]	@ (800325c <HAL_DMA_Start_IT+0x4ac>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d02c      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6d      	ldr	r2, [pc, #436]	@ (8003260 <HAL_DMA_Start_IT+0x4b0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d027      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003264 <HAL_DMA_Start_IT+0x4b4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d022      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6a      	ldr	r2, [pc, #424]	@ (8003268 <HAL_DMA_Start_IT+0x4b8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d01d      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a68      	ldr	r2, [pc, #416]	@ (800326c <HAL_DMA_Start_IT+0x4bc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d018      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a67      	ldr	r2, [pc, #412]	@ (8003270 <HAL_DMA_Start_IT+0x4c0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_DMA_Start_IT+0x4c4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00e      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a64      	ldr	r2, [pc, #400]	@ (8003278 <HAL_DMA_Start_IT+0x4c8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a62      	ldr	r2, [pc, #392]	@ (800327c <HAL_DMA_Start_IT+0x4cc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a61      	ldr	r2, [pc, #388]	@ (8003280 <HAL_DMA_Start_IT+0x4d0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d101      	bne.n	8003104 <HAL_DMA_Start_IT+0x354>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_DMA_Start_IT+0x356>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01a      	beq.n	8003140 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003126:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800313a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800313e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a37      	ldr	r2, [pc, #220]	@ (8003224 <HAL_DMA_Start_IT+0x474>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d04a      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a36      	ldr	r2, [pc, #216]	@ (8003228 <HAL_DMA_Start_IT+0x478>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d045      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a34      	ldr	r2, [pc, #208]	@ (800322c <HAL_DMA_Start_IT+0x47c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d040      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a33      	ldr	r2, [pc, #204]	@ (8003230 <HAL_DMA_Start_IT+0x480>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d03b      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a31      	ldr	r2, [pc, #196]	@ (8003234 <HAL_DMA_Start_IT+0x484>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d036      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a30      	ldr	r2, [pc, #192]	@ (8003238 <HAL_DMA_Start_IT+0x488>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d031      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2e      	ldr	r2, [pc, #184]	@ (800323c <HAL_DMA_Start_IT+0x48c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02c      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2d      	ldr	r2, [pc, #180]	@ (8003240 <HAL_DMA_Start_IT+0x490>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d027      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2b      	ldr	r2, [pc, #172]	@ (8003244 <HAL_DMA_Start_IT+0x494>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d022      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <HAL_DMA_Start_IT+0x498>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d01d      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a28      	ldr	r2, [pc, #160]	@ (800324c <HAL_DMA_Start_IT+0x49c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d018      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a27      	ldr	r2, [pc, #156]	@ (8003250 <HAL_DMA_Start_IT+0x4a0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a25      	ldr	r2, [pc, #148]	@ (8003254 <HAL_DMA_Start_IT+0x4a4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <HAL_DMA_Start_IT+0x4a8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a22      	ldr	r2, [pc, #136]	@ (800325c <HAL_DMA_Start_IT+0x4ac>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a21      	ldr	r2, [pc, #132]	@ (8003260 <HAL_DMA_Start_IT+0x4b0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d108      	bne.n	80031f2 <HAL_DMA_Start_IT+0x442>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e012      	b.n	8003218 <HAL_DMA_Start_IT+0x468>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e009      	b.n	8003218 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003218:	7dfb      	ldrb	r3, [r7, #23]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40020010 	.word	0x40020010
 8003228:	40020028 	.word	0x40020028
 800322c:	40020040 	.word	0x40020040
 8003230:	40020058 	.word	0x40020058
 8003234:	40020070 	.word	0x40020070
 8003238:	40020088 	.word	0x40020088
 800323c:	400200a0 	.word	0x400200a0
 8003240:	400200b8 	.word	0x400200b8
 8003244:	40020410 	.word	0x40020410
 8003248:	40020428 	.word	0x40020428
 800324c:	40020440 	.word	0x40020440
 8003250:	40020458 	.word	0x40020458
 8003254:	40020470 	.word	0x40020470
 8003258:	40020488 	.word	0x40020488
 800325c:	400204a0 	.word	0x400204a0
 8003260:	400204b8 	.word	0x400204b8
 8003264:	58025408 	.word	0x58025408
 8003268:	5802541c 	.word	0x5802541c
 800326c:	58025430 	.word	0x58025430
 8003270:	58025444 	.word	0x58025444
 8003274:	58025458 	.word	0x58025458
 8003278:	5802546c 	.word	0x5802546c
 800327c:	58025480 	.word	0x58025480
 8003280:	58025494 	.word	0x58025494

08003284 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff f904 	bl	8002498 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e2dc      	b.n	8003856 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d008      	beq.n	80032ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2280      	movs	r2, #128	@ 0x80
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e2cd      	b.n	8003856 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a76      	ldr	r2, [pc, #472]	@ (8003498 <HAL_DMA_Abort+0x214>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d04a      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a74      	ldr	r2, [pc, #464]	@ (800349c <HAL_DMA_Abort+0x218>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d045      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a73      	ldr	r2, [pc, #460]	@ (80034a0 <HAL_DMA_Abort+0x21c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d040      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a71      	ldr	r2, [pc, #452]	@ (80034a4 <HAL_DMA_Abort+0x220>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a70      	ldr	r2, [pc, #448]	@ (80034a8 <HAL_DMA_Abort+0x224>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d036      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6e      	ldr	r2, [pc, #440]	@ (80034ac <HAL_DMA_Abort+0x228>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d031      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6d      	ldr	r2, [pc, #436]	@ (80034b0 <HAL_DMA_Abort+0x22c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02c      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6b      	ldr	r2, [pc, #428]	@ (80034b4 <HAL_DMA_Abort+0x230>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6a      	ldr	r2, [pc, #424]	@ (80034b8 <HAL_DMA_Abort+0x234>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a68      	ldr	r2, [pc, #416]	@ (80034bc <HAL_DMA_Abort+0x238>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a67      	ldr	r2, [pc, #412]	@ (80034c0 <HAL_DMA_Abort+0x23c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a65      	ldr	r2, [pc, #404]	@ (80034c4 <HAL_DMA_Abort+0x240>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a64      	ldr	r2, [pc, #400]	@ (80034c8 <HAL_DMA_Abort+0x244>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a62      	ldr	r2, [pc, #392]	@ (80034cc <HAL_DMA_Abort+0x248>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a61      	ldr	r2, [pc, #388]	@ (80034d0 <HAL_DMA_Abort+0x24c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_DMA_Abort+0xd6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a5f      	ldr	r2, [pc, #380]	@ (80034d4 <HAL_DMA_Abort+0x250>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_DMA_Abort+0xda>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_DMA_Abort+0xdc>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 021e 	bic.w	r2, r2, #30
 8003372:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003382:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e00a      	b.n	80033a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 020e 	bic.w	r2, r2, #14
 800339a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003498 <HAL_DMA_Abort+0x214>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d072      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a3a      	ldr	r2, [pc, #232]	@ (800349c <HAL_DMA_Abort+0x218>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d06d      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a39      	ldr	r2, [pc, #228]	@ (80034a0 <HAL_DMA_Abort+0x21c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d068      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a37      	ldr	r2, [pc, #220]	@ (80034a4 <HAL_DMA_Abort+0x220>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d063      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a36      	ldr	r2, [pc, #216]	@ (80034a8 <HAL_DMA_Abort+0x224>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d05e      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a34      	ldr	r2, [pc, #208]	@ (80034ac <HAL_DMA_Abort+0x228>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d059      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a33      	ldr	r2, [pc, #204]	@ (80034b0 <HAL_DMA_Abort+0x22c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d054      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a31      	ldr	r2, [pc, #196]	@ (80034b4 <HAL_DMA_Abort+0x230>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d04f      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a30      	ldr	r2, [pc, #192]	@ (80034b8 <HAL_DMA_Abort+0x234>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d04a      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2e      	ldr	r2, [pc, #184]	@ (80034bc <HAL_DMA_Abort+0x238>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d045      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2d      	ldr	r2, [pc, #180]	@ (80034c0 <HAL_DMA_Abort+0x23c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d040      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2b      	ldr	r2, [pc, #172]	@ (80034c4 <HAL_DMA_Abort+0x240>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d03b      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2a      	ldr	r2, [pc, #168]	@ (80034c8 <HAL_DMA_Abort+0x244>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d036      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a28      	ldr	r2, [pc, #160]	@ (80034cc <HAL_DMA_Abort+0x248>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d031      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a27      	ldr	r2, [pc, #156]	@ (80034d0 <HAL_DMA_Abort+0x24c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d02c      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a25      	ldr	r2, [pc, #148]	@ (80034d4 <HAL_DMA_Abort+0x250>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d027      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a24      	ldr	r2, [pc, #144]	@ (80034d8 <HAL_DMA_Abort+0x254>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d022      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a22      	ldr	r2, [pc, #136]	@ (80034dc <HAL_DMA_Abort+0x258>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01d      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	@ (80034e0 <HAL_DMA_Abort+0x25c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d018      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1f      	ldr	r2, [pc, #124]	@ (80034e4 <HAL_DMA_Abort+0x260>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1e      	ldr	r2, [pc, #120]	@ (80034e8 <HAL_DMA_Abort+0x264>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00e      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1c      	ldr	r2, [pc, #112]	@ (80034ec <HAL_DMA_Abort+0x268>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1b      	ldr	r2, [pc, #108]	@ (80034f0 <HAL_DMA_Abort+0x26c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_DMA_Abort+0x20e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a19      	ldr	r2, [pc, #100]	@ (80034f4 <HAL_DMA_Abort+0x270>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d132      	bne.n	80034f8 <HAL_DMA_Abort+0x274>
 8003492:	2301      	movs	r3, #1
 8003494:	e031      	b.n	80034fa <HAL_DMA_Abort+0x276>
 8003496:	bf00      	nop
 8003498:	40020010 	.word	0x40020010
 800349c:	40020028 	.word	0x40020028
 80034a0:	40020040 	.word	0x40020040
 80034a4:	40020058 	.word	0x40020058
 80034a8:	40020070 	.word	0x40020070
 80034ac:	40020088 	.word	0x40020088
 80034b0:	400200a0 	.word	0x400200a0
 80034b4:	400200b8 	.word	0x400200b8
 80034b8:	40020410 	.word	0x40020410
 80034bc:	40020428 	.word	0x40020428
 80034c0:	40020440 	.word	0x40020440
 80034c4:	40020458 	.word	0x40020458
 80034c8:	40020470 	.word	0x40020470
 80034cc:	40020488 	.word	0x40020488
 80034d0:	400204a0 	.word	0x400204a0
 80034d4:	400204b8 	.word	0x400204b8
 80034d8:	58025408 	.word	0x58025408
 80034dc:	5802541c 	.word	0x5802541c
 80034e0:	58025430 	.word	0x58025430
 80034e4:	58025444 	.word	0x58025444
 80034e8:	58025458 	.word	0x58025458
 80034ec:	5802546c 	.word	0x5802546c
 80034f0:	58025480 	.word	0x58025480
 80034f4:	58025494 	.word	0x58025494
 80034f8:	2300      	movs	r3, #0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800350c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6d      	ldr	r2, [pc, #436]	@ (80036c8 <HAL_DMA_Abort+0x444>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d04a      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6b      	ldr	r2, [pc, #428]	@ (80036cc <HAL_DMA_Abort+0x448>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d045      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6a      	ldr	r2, [pc, #424]	@ (80036d0 <HAL_DMA_Abort+0x44c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d040      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a68      	ldr	r2, [pc, #416]	@ (80036d4 <HAL_DMA_Abort+0x450>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d03b      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a67      	ldr	r2, [pc, #412]	@ (80036d8 <HAL_DMA_Abort+0x454>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d036      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a65      	ldr	r2, [pc, #404]	@ (80036dc <HAL_DMA_Abort+0x458>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a64      	ldr	r2, [pc, #400]	@ (80036e0 <HAL_DMA_Abort+0x45c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d02c      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a62      	ldr	r2, [pc, #392]	@ (80036e4 <HAL_DMA_Abort+0x460>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d027      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a61      	ldr	r2, [pc, #388]	@ (80036e8 <HAL_DMA_Abort+0x464>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d022      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5f      	ldr	r2, [pc, #380]	@ (80036ec <HAL_DMA_Abort+0x468>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01d      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a5e      	ldr	r2, [pc, #376]	@ (80036f0 <HAL_DMA_Abort+0x46c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d018      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a5c      	ldr	r2, [pc, #368]	@ (80036f4 <HAL_DMA_Abort+0x470>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a5b      	ldr	r2, [pc, #364]	@ (80036f8 <HAL_DMA_Abort+0x474>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a59      	ldr	r2, [pc, #356]	@ (80036fc <HAL_DMA_Abort+0x478>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a58      	ldr	r2, [pc, #352]	@ (8003700 <HAL_DMA_Abort+0x47c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_DMA_Abort+0x32a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a56      	ldr	r2, [pc, #344]	@ (8003704 <HAL_DMA_Abort+0x480>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d108      	bne.n	80035c0 <HAL_DMA_Abort+0x33c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e007      	b.n	80035d0 <HAL_DMA_Abort+0x34c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80035d0:	e013      	b.n	80035fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d2:	f7fe ff61 	bl	8002498 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d90c      	bls.n	80035fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e12d      	b.n	8003856 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e5      	bne.n	80035d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2f      	ldr	r2, [pc, #188]	@ (80036c8 <HAL_DMA_Abort+0x444>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d04a      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2d      	ldr	r2, [pc, #180]	@ (80036cc <HAL_DMA_Abort+0x448>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d045      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2c      	ldr	r2, [pc, #176]	@ (80036d0 <HAL_DMA_Abort+0x44c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d040      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2a      	ldr	r2, [pc, #168]	@ (80036d4 <HAL_DMA_Abort+0x450>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d03b      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a29      	ldr	r2, [pc, #164]	@ (80036d8 <HAL_DMA_Abort+0x454>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d036      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a27      	ldr	r2, [pc, #156]	@ (80036dc <HAL_DMA_Abort+0x458>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d031      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a26      	ldr	r2, [pc, #152]	@ (80036e0 <HAL_DMA_Abort+0x45c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d02c      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <HAL_DMA_Abort+0x460>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d027      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a23      	ldr	r2, [pc, #140]	@ (80036e8 <HAL_DMA_Abort+0x464>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d022      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a21      	ldr	r2, [pc, #132]	@ (80036ec <HAL_DMA_Abort+0x468>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a20      	ldr	r2, [pc, #128]	@ (80036f0 <HAL_DMA_Abort+0x46c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d018      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1e      	ldr	r2, [pc, #120]	@ (80036f4 <HAL_DMA_Abort+0x470>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1d      	ldr	r2, [pc, #116]	@ (80036f8 <HAL_DMA_Abort+0x474>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1b      	ldr	r2, [pc, #108]	@ (80036fc <HAL_DMA_Abort+0x478>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <HAL_DMA_Abort+0x47c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_DMA_Abort+0x422>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a18      	ldr	r2, [pc, #96]	@ (8003704 <HAL_DMA_Abort+0x480>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_DMA_Abort+0x426>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_DMA_Abort+0x428>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d02b      	beq.n	8003708 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	223f      	movs	r2, #63	@ 0x3f
 80036c0:	409a      	lsls	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	e02a      	b.n	800371e <HAL_DMA_Abort+0x49a>
 80036c8:	40020010 	.word	0x40020010
 80036cc:	40020028 	.word	0x40020028
 80036d0:	40020040 	.word	0x40020040
 80036d4:	40020058 	.word	0x40020058
 80036d8:	40020070 	.word	0x40020070
 80036dc:	40020088 	.word	0x40020088
 80036e0:	400200a0 	.word	0x400200a0
 80036e4:	400200b8 	.word	0x400200b8
 80036e8:	40020410 	.word	0x40020410
 80036ec:	40020428 	.word	0x40020428
 80036f0:	40020440 	.word	0x40020440
 80036f4:	40020458 	.word	0x40020458
 80036f8:	40020470 	.word	0x40020470
 80036fc:	40020488 	.word	0x40020488
 8003700:	400204a0 	.word	0x400204a0
 8003704:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2201      	movs	r2, #1
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a4f      	ldr	r2, [pc, #316]	@ (8003860 <HAL_DMA_Abort+0x5dc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d072      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a4d      	ldr	r2, [pc, #308]	@ (8003864 <HAL_DMA_Abort+0x5e0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d06d      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a4c      	ldr	r2, [pc, #304]	@ (8003868 <HAL_DMA_Abort+0x5e4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d068      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a4a      	ldr	r2, [pc, #296]	@ (800386c <HAL_DMA_Abort+0x5e8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d063      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a49      	ldr	r2, [pc, #292]	@ (8003870 <HAL_DMA_Abort+0x5ec>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d05e      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a47      	ldr	r2, [pc, #284]	@ (8003874 <HAL_DMA_Abort+0x5f0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d059      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a46      	ldr	r2, [pc, #280]	@ (8003878 <HAL_DMA_Abort+0x5f4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d054      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a44      	ldr	r2, [pc, #272]	@ (800387c <HAL_DMA_Abort+0x5f8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d04f      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a43      	ldr	r2, [pc, #268]	@ (8003880 <HAL_DMA_Abort+0x5fc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d04a      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a41      	ldr	r2, [pc, #260]	@ (8003884 <HAL_DMA_Abort+0x600>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d045      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a40      	ldr	r2, [pc, #256]	@ (8003888 <HAL_DMA_Abort+0x604>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d040      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3e      	ldr	r2, [pc, #248]	@ (800388c <HAL_DMA_Abort+0x608>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d03b      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3d      	ldr	r2, [pc, #244]	@ (8003890 <HAL_DMA_Abort+0x60c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d036      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003894 <HAL_DMA_Abort+0x610>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d031      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003898 <HAL_DMA_Abort+0x614>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d02c      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a38      	ldr	r2, [pc, #224]	@ (800389c <HAL_DMA_Abort+0x618>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d027      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a37      	ldr	r2, [pc, #220]	@ (80038a0 <HAL_DMA_Abort+0x61c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d022      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a35      	ldr	r2, [pc, #212]	@ (80038a4 <HAL_DMA_Abort+0x620>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01d      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a34      	ldr	r2, [pc, #208]	@ (80038a8 <HAL_DMA_Abort+0x624>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a32      	ldr	r2, [pc, #200]	@ (80038ac <HAL_DMA_Abort+0x628>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a31      	ldr	r2, [pc, #196]	@ (80038b0 <HAL_DMA_Abort+0x62c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2f      	ldr	r2, [pc, #188]	@ (80038b4 <HAL_DMA_Abort+0x630>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2e      	ldr	r2, [pc, #184]	@ (80038b8 <HAL_DMA_Abort+0x634>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_DMA_Abort+0x58a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2c      	ldr	r2, [pc, #176]	@ (80038bc <HAL_DMA_Abort+0x638>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_DMA_Abort+0x58e>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_DMA_Abort+0x590>
 8003812:	2300      	movs	r3, #0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003820:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003838:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003842:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40020010 	.word	0x40020010
 8003864:	40020028 	.word	0x40020028
 8003868:	40020040 	.word	0x40020040
 800386c:	40020058 	.word	0x40020058
 8003870:	40020070 	.word	0x40020070
 8003874:	40020088 	.word	0x40020088
 8003878:	400200a0 	.word	0x400200a0
 800387c:	400200b8 	.word	0x400200b8
 8003880:	40020410 	.word	0x40020410
 8003884:	40020428 	.word	0x40020428
 8003888:	40020440 	.word	0x40020440
 800388c:	40020458 	.word	0x40020458
 8003890:	40020470 	.word	0x40020470
 8003894:	40020488 	.word	0x40020488
 8003898:	400204a0 	.word	0x400204a0
 800389c:	400204b8 	.word	0x400204b8
 80038a0:	58025408 	.word	0x58025408
 80038a4:	5802541c 	.word	0x5802541c
 80038a8:	58025430 	.word	0x58025430
 80038ac:	58025444 	.word	0x58025444
 80038b0:	58025458 	.word	0x58025458
 80038b4:	5802546c 	.word	0x5802546c
 80038b8:	58025480 	.word	0x58025480
 80038bc:	58025494 	.word	0x58025494

080038c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e237      	b.n	8003d42 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d004      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2280      	movs	r2, #128	@ 0x80
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e22c      	b.n	8003d42 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003a60 <HAL_DMA_Abort_IT+0x1a0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d04a      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003a64 <HAL_DMA_Abort_IT+0x1a4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d045      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a59      	ldr	r2, [pc, #356]	@ (8003a68 <HAL_DMA_Abort_IT+0x1a8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d040      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a58      	ldr	r2, [pc, #352]	@ (8003a6c <HAL_DMA_Abort_IT+0x1ac>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d03b      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a56      	ldr	r2, [pc, #344]	@ (8003a70 <HAL_DMA_Abort_IT+0x1b0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d036      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a55      	ldr	r2, [pc, #340]	@ (8003a74 <HAL_DMA_Abort_IT+0x1b4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d031      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a53      	ldr	r2, [pc, #332]	@ (8003a78 <HAL_DMA_Abort_IT+0x1b8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02c      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a52      	ldr	r2, [pc, #328]	@ (8003a7c <HAL_DMA_Abort_IT+0x1bc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d027      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a50      	ldr	r2, [pc, #320]	@ (8003a80 <HAL_DMA_Abort_IT+0x1c0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d022      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a4f      	ldr	r2, [pc, #316]	@ (8003a84 <HAL_DMA_Abort_IT+0x1c4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d01d      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a4d      	ldr	r2, [pc, #308]	@ (8003a88 <HAL_DMA_Abort_IT+0x1c8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a4c      	ldr	r2, [pc, #304]	@ (8003a8c <HAL_DMA_Abort_IT+0x1cc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a4a      	ldr	r2, [pc, #296]	@ (8003a90 <HAL_DMA_Abort_IT+0x1d0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a49      	ldr	r2, [pc, #292]	@ (8003a94 <HAL_DMA_Abort_IT+0x1d4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a47      	ldr	r2, [pc, #284]	@ (8003a98 <HAL_DMA_Abort_IT+0x1d8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc8>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a46      	ldr	r2, [pc, #280]	@ (8003a9c <HAL_DMA_Abort_IT+0x1dc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <HAL_DMA_Abort_IT+0xcc>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_DMA_Abort_IT+0xce>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8086 	beq.w	8003aa0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2204      	movs	r2, #4
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003a60 <HAL_DMA_Abort_IT+0x1a0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d04a      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003a64 <HAL_DMA_Abort_IT+0x1a4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d045      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a68 <HAL_DMA_Abort_IT+0x1a8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d040      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2b      	ldr	r2, [pc, #172]	@ (8003a6c <HAL_DMA_Abort_IT+0x1ac>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d03b      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a29      	ldr	r2, [pc, #164]	@ (8003a70 <HAL_DMA_Abort_IT+0x1b0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d036      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a28      	ldr	r2, [pc, #160]	@ (8003a74 <HAL_DMA_Abort_IT+0x1b4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d031      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a26      	ldr	r2, [pc, #152]	@ (8003a78 <HAL_DMA_Abort_IT+0x1b8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02c      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a25      	ldr	r2, [pc, #148]	@ (8003a7c <HAL_DMA_Abort_IT+0x1bc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d027      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a23      	ldr	r2, [pc, #140]	@ (8003a80 <HAL_DMA_Abort_IT+0x1c0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a22      	ldr	r2, [pc, #136]	@ (8003a84 <HAL_DMA_Abort_IT+0x1c4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01d      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a20      	ldr	r2, [pc, #128]	@ (8003a88 <HAL_DMA_Abort_IT+0x1c8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a8c <HAL_DMA_Abort_IT+0x1cc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1d      	ldr	r2, [pc, #116]	@ (8003a90 <HAL_DMA_Abort_IT+0x1d0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1c      	ldr	r2, [pc, #112]	@ (8003a94 <HAL_DMA_Abort_IT+0x1d4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003a98 <HAL_DMA_Abort_IT+0x1d8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x17c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a19      	ldr	r2, [pc, #100]	@ (8003a9c <HAL_DMA_Abort_IT+0x1dc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d108      	bne.n	8003a4e <HAL_DMA_Abort_IT+0x18e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e178      	b.n	8003d40 <HAL_DMA_Abort_IT+0x480>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	e16f      	b.n	8003d40 <HAL_DMA_Abort_IT+0x480>
 8003a60:	40020010 	.word	0x40020010
 8003a64:	40020028 	.word	0x40020028
 8003a68:	40020040 	.word	0x40020040
 8003a6c:	40020058 	.word	0x40020058
 8003a70:	40020070 	.word	0x40020070
 8003a74:	40020088 	.word	0x40020088
 8003a78:	400200a0 	.word	0x400200a0
 8003a7c:	400200b8 	.word	0x400200b8
 8003a80:	40020410 	.word	0x40020410
 8003a84:	40020428 	.word	0x40020428
 8003a88:	40020440 	.word	0x40020440
 8003a8c:	40020458 	.word	0x40020458
 8003a90:	40020470 	.word	0x40020470
 8003a94:	40020488 	.word	0x40020488
 8003a98:	400204a0 	.word	0x400204a0
 8003a9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 020e 	bic.w	r2, r2, #14
 8003aae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6c      	ldr	r2, [pc, #432]	@ (8003c68 <HAL_DMA_Abort_IT+0x3a8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d04a      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6b      	ldr	r2, [pc, #428]	@ (8003c6c <HAL_DMA_Abort_IT+0x3ac>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d045      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a69      	ldr	r2, [pc, #420]	@ (8003c70 <HAL_DMA_Abort_IT+0x3b0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d040      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a68      	ldr	r2, [pc, #416]	@ (8003c74 <HAL_DMA_Abort_IT+0x3b4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d03b      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a66      	ldr	r2, [pc, #408]	@ (8003c78 <HAL_DMA_Abort_IT+0x3b8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d036      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a65      	ldr	r2, [pc, #404]	@ (8003c7c <HAL_DMA_Abort_IT+0x3bc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d031      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a63      	ldr	r2, [pc, #396]	@ (8003c80 <HAL_DMA_Abort_IT+0x3c0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02c      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a62      	ldr	r2, [pc, #392]	@ (8003c84 <HAL_DMA_Abort_IT+0x3c4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d027      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a60      	ldr	r2, [pc, #384]	@ (8003c88 <HAL_DMA_Abort_IT+0x3c8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8003c8c <HAL_DMA_Abort_IT+0x3cc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01d      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a5d      	ldr	r2, [pc, #372]	@ (8003c90 <HAL_DMA_Abort_IT+0x3d0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a5c      	ldr	r2, [pc, #368]	@ (8003c94 <HAL_DMA_Abort_IT+0x3d4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a5a      	ldr	r2, [pc, #360]	@ (8003c98 <HAL_DMA_Abort_IT+0x3d8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a59      	ldr	r2, [pc, #356]	@ (8003c9c <HAL_DMA_Abort_IT+0x3dc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a57      	ldr	r2, [pc, #348]	@ (8003ca0 <HAL_DMA_Abort_IT+0x3e0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x290>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a56      	ldr	r2, [pc, #344]	@ (8003ca4 <HAL_DMA_Abort_IT+0x3e4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d108      	bne.n	8003b62 <HAL_DMA_Abort_IT+0x2a2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e007      	b.n	8003b72 <HAL_DMA_Abort_IT+0x2b2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a3c      	ldr	r2, [pc, #240]	@ (8003c68 <HAL_DMA_Abort_IT+0x3a8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d072      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a3a      	ldr	r2, [pc, #232]	@ (8003c6c <HAL_DMA_Abort_IT+0x3ac>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d06d      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a39      	ldr	r2, [pc, #228]	@ (8003c70 <HAL_DMA_Abort_IT+0x3b0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d068      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a37      	ldr	r2, [pc, #220]	@ (8003c74 <HAL_DMA_Abort_IT+0x3b4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d063      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a36      	ldr	r2, [pc, #216]	@ (8003c78 <HAL_DMA_Abort_IT+0x3b8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d05e      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a34      	ldr	r2, [pc, #208]	@ (8003c7c <HAL_DMA_Abort_IT+0x3bc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d059      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a33      	ldr	r2, [pc, #204]	@ (8003c80 <HAL_DMA_Abort_IT+0x3c0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d054      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a31      	ldr	r2, [pc, #196]	@ (8003c84 <HAL_DMA_Abort_IT+0x3c4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d04f      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a30      	ldr	r2, [pc, #192]	@ (8003c88 <HAL_DMA_Abort_IT+0x3c8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d04a      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c8c <HAL_DMA_Abort_IT+0x3cc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d045      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2d      	ldr	r2, [pc, #180]	@ (8003c90 <HAL_DMA_Abort_IT+0x3d0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d040      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c94 <HAL_DMA_Abort_IT+0x3d4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d03b      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2a      	ldr	r2, [pc, #168]	@ (8003c98 <HAL_DMA_Abort_IT+0x3d8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d036      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a28      	ldr	r2, [pc, #160]	@ (8003c9c <HAL_DMA_Abort_IT+0x3dc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a27      	ldr	r2, [pc, #156]	@ (8003ca0 <HAL_DMA_Abort_IT+0x3e0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d02c      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a25      	ldr	r2, [pc, #148]	@ (8003ca4 <HAL_DMA_Abort_IT+0x3e4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d027      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a24      	ldr	r2, [pc, #144]	@ (8003ca8 <HAL_DMA_Abort_IT+0x3e8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a22      	ldr	r2, [pc, #136]	@ (8003cac <HAL_DMA_Abort_IT+0x3ec>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a21      	ldr	r2, [pc, #132]	@ (8003cb0 <HAL_DMA_Abort_IT+0x3f0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <HAL_DMA_Abort_IT+0x3f4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb8 <HAL_DMA_Abort_IT+0x3f8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <HAL_DMA_Abort_IT+0x3fc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc0 <HAL_DMA_Abort_IT+0x400>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x3a2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	@ (8003cc4 <HAL_DMA_Abort_IT+0x404>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d132      	bne.n	8003cc8 <HAL_DMA_Abort_IT+0x408>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e031      	b.n	8003cca <HAL_DMA_Abort_IT+0x40a>
 8003c66:	bf00      	nop
 8003c68:	40020010 	.word	0x40020010
 8003c6c:	40020028 	.word	0x40020028
 8003c70:	40020040 	.word	0x40020040
 8003c74:	40020058 	.word	0x40020058
 8003c78:	40020070 	.word	0x40020070
 8003c7c:	40020088 	.word	0x40020088
 8003c80:	400200a0 	.word	0x400200a0
 8003c84:	400200b8 	.word	0x400200b8
 8003c88:	40020410 	.word	0x40020410
 8003c8c:	40020428 	.word	0x40020428
 8003c90:	40020440 	.word	0x40020440
 8003c94:	40020458 	.word	0x40020458
 8003c98:	40020470 	.word	0x40020470
 8003c9c:	40020488 	.word	0x40020488
 8003ca0:	400204a0 	.word	0x400204a0
 8003ca4:	400204b8 	.word	0x400204b8
 8003ca8:	58025408 	.word	0x58025408
 8003cac:	5802541c 	.word	0x5802541c
 8003cb0:	58025430 	.word	0x58025430
 8003cb4:	58025444 	.word	0x58025444
 8003cb8:	58025458 	.word	0x58025458
 8003cbc:	5802546c 	.word	0x5802546c
 8003cc0:	58025480 	.word	0x58025480
 8003cc4:	58025494 	.word	0x58025494
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d028      	beq.n	8003d20 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2201      	movs	r2, #1
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cfc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00c      	beq.n	8003d20 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop

08003d4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	@ 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d58:	4b67      	ldr	r3, [pc, #412]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1ac>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a67      	ldr	r2, [pc, #412]	@ (8003efc <HAL_DMA_IRQHandler+0x1b0>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a5f      	ldr	r2, [pc, #380]	@ (8003f00 <HAL_DMA_IRQHandler+0x1b4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d04a      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003f04 <HAL_DMA_IRQHandler+0x1b8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d045      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5c      	ldr	r2, [pc, #368]	@ (8003f08 <HAL_DMA_IRQHandler+0x1bc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d040      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a5a      	ldr	r2, [pc, #360]	@ (8003f0c <HAL_DMA_IRQHandler+0x1c0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d03b      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a59      	ldr	r2, [pc, #356]	@ (8003f10 <HAL_DMA_IRQHandler+0x1c4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d036      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a57      	ldr	r2, [pc, #348]	@ (8003f14 <HAL_DMA_IRQHandler+0x1c8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d031      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a56      	ldr	r2, [pc, #344]	@ (8003f18 <HAL_DMA_IRQHandler+0x1cc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d02c      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a54      	ldr	r2, [pc, #336]	@ (8003f1c <HAL_DMA_IRQHandler+0x1d0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d027      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a53      	ldr	r2, [pc, #332]	@ (8003f20 <HAL_DMA_IRQHandler+0x1d4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d022      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a51      	ldr	r2, [pc, #324]	@ (8003f24 <HAL_DMA_IRQHandler+0x1d8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01d      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a50      	ldr	r2, [pc, #320]	@ (8003f28 <HAL_DMA_IRQHandler+0x1dc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d018      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4e      	ldr	r2, [pc, #312]	@ (8003f2c <HAL_DMA_IRQHandler+0x1e0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a4d      	ldr	r2, [pc, #308]	@ (8003f30 <HAL_DMA_IRQHandler+0x1e4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a4b      	ldr	r2, [pc, #300]	@ (8003f34 <HAL_DMA_IRQHandler+0x1e8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f38 <HAL_DMA_IRQHandler+0x1ec>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xd2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a48      	ldr	r2, [pc, #288]	@ (8003f3c <HAL_DMA_IRQHandler+0x1f0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <HAL_DMA_IRQHandler+0xd6>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 842b 	beq.w	8004680 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	2208      	movs	r2, #8
 8003e34:	409a      	lsls	r2, r3
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80a2 	beq.w	8003f84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2e      	ldr	r2, [pc, #184]	@ (8003f00 <HAL_DMA_IRQHandler+0x1b4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d04a      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f04 <HAL_DMA_IRQHandler+0x1b8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d045      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2b      	ldr	r2, [pc, #172]	@ (8003f08 <HAL_DMA_IRQHandler+0x1bc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d040      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2a      	ldr	r2, [pc, #168]	@ (8003f0c <HAL_DMA_IRQHandler+0x1c0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d03b      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <HAL_DMA_IRQHandler+0x1c4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d036      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a27      	ldr	r2, [pc, #156]	@ (8003f14 <HAL_DMA_IRQHandler+0x1c8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d031      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a25      	ldr	r2, [pc, #148]	@ (8003f18 <HAL_DMA_IRQHandler+0x1cc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d02c      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a24      	ldr	r2, [pc, #144]	@ (8003f1c <HAL_DMA_IRQHandler+0x1d0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d027      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <HAL_DMA_IRQHandler+0x1d4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d022      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <HAL_DMA_IRQHandler+0x1d8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d01d      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <HAL_DMA_IRQHandler+0x1dc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d018      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <HAL_DMA_IRQHandler+0x1e0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <HAL_DMA_IRQHandler+0x1e4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <HAL_DMA_IRQHandler+0x1e8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d009      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <HAL_DMA_IRQHandler+0x1ec>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x194>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a18      	ldr	r2, [pc, #96]	@ (8003f3c <HAL_DMA_IRQHandler+0x1f0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d12f      	bne.n	8003f40 <HAL_DMA_IRQHandler+0x1f4>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf14      	ite	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	e02e      	b.n	8003f54 <HAL_DMA_IRQHandler+0x208>
 8003ef6:	bf00      	nop
 8003ef8:	24000004 	.word	0x24000004
 8003efc:	1b4e81b5 	.word	0x1b4e81b5
 8003f00:	40020010 	.word	0x40020010
 8003f04:	40020028 	.word	0x40020028
 8003f08:	40020040 	.word	0x40020040
 8003f0c:	40020058 	.word	0x40020058
 8003f10:	40020070 	.word	0x40020070
 8003f14:	40020088 	.word	0x40020088
 8003f18:	400200a0 	.word	0x400200a0
 8003f1c:	400200b8 	.word	0x400200b8
 8003f20:	40020410 	.word	0x40020410
 8003f24:	40020428 	.word	0x40020428
 8003f28:	40020440 	.word	0x40020440
 8003f2c:	40020458 	.word	0x40020458
 8003f30:	40020470 	.word	0x40020470
 8003f34:	40020488 	.word	0x40020488
 8003f38:	400204a0 	.word	0x400204a0
 8003f3c:	400204b8 	.word	0x400204b8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0204 	bic.w	r2, r2, #4
 8003f66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2208      	movs	r2, #8
 8003f72:	409a      	lsls	r2, r3
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	f043 0201 	orr.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d06e      	beq.n	8004078 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a69      	ldr	r2, [pc, #420]	@ (8004144 <HAL_DMA_IRQHandler+0x3f8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d04a      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a67      	ldr	r2, [pc, #412]	@ (8004148 <HAL_DMA_IRQHandler+0x3fc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d045      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a66      	ldr	r2, [pc, #408]	@ (800414c <HAL_DMA_IRQHandler+0x400>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d040      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a64      	ldr	r2, [pc, #400]	@ (8004150 <HAL_DMA_IRQHandler+0x404>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d03b      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a63      	ldr	r2, [pc, #396]	@ (8004154 <HAL_DMA_IRQHandler+0x408>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d036      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a61      	ldr	r2, [pc, #388]	@ (8004158 <HAL_DMA_IRQHandler+0x40c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d031      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a60      	ldr	r2, [pc, #384]	@ (800415c <HAL_DMA_IRQHandler+0x410>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d02c      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5e      	ldr	r2, [pc, #376]	@ (8004160 <HAL_DMA_IRQHandler+0x414>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d027      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a5d      	ldr	r2, [pc, #372]	@ (8004164 <HAL_DMA_IRQHandler+0x418>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5b      	ldr	r2, [pc, #364]	@ (8004168 <HAL_DMA_IRQHandler+0x41c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01d      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a5a      	ldr	r2, [pc, #360]	@ (800416c <HAL_DMA_IRQHandler+0x420>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a58      	ldr	r2, [pc, #352]	@ (8004170 <HAL_DMA_IRQHandler+0x424>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a57      	ldr	r2, [pc, #348]	@ (8004174 <HAL_DMA_IRQHandler+0x428>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a55      	ldr	r2, [pc, #340]	@ (8004178 <HAL_DMA_IRQHandler+0x42c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a54      	ldr	r2, [pc, #336]	@ (800417c <HAL_DMA_IRQHandler+0x430>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_DMA_IRQHandler+0x2ee>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a52      	ldr	r2, [pc, #328]	@ (8004180 <HAL_DMA_IRQHandler+0x434>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10a      	bne.n	8004050 <HAL_DMA_IRQHandler+0x304>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e003      	b.n	8004058 <HAL_DMA_IRQHandler+0x30c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2300      	movs	r3, #0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	2201      	movs	r2, #1
 8004066:	409a      	lsls	r2, r3
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004070:	f043 0202 	orr.w	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2204      	movs	r2, #4
 8004082:	409a      	lsls	r2, r3
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 808f 	beq.w	80041ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2c      	ldr	r2, [pc, #176]	@ (8004144 <HAL_DMA_IRQHandler+0x3f8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d04a      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2a      	ldr	r2, [pc, #168]	@ (8004148 <HAL_DMA_IRQHandler+0x3fc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d045      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a29      	ldr	r2, [pc, #164]	@ (800414c <HAL_DMA_IRQHandler+0x400>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d040      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a27      	ldr	r2, [pc, #156]	@ (8004150 <HAL_DMA_IRQHandler+0x404>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d03b      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a26      	ldr	r2, [pc, #152]	@ (8004154 <HAL_DMA_IRQHandler+0x408>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d036      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a24      	ldr	r2, [pc, #144]	@ (8004158 <HAL_DMA_IRQHandler+0x40c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d031      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a23      	ldr	r2, [pc, #140]	@ (800415c <HAL_DMA_IRQHandler+0x410>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d02c      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a21      	ldr	r2, [pc, #132]	@ (8004160 <HAL_DMA_IRQHandler+0x414>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d027      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a20      	ldr	r2, [pc, #128]	@ (8004164 <HAL_DMA_IRQHandler+0x418>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004168 <HAL_DMA_IRQHandler+0x41c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01d      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1d      	ldr	r2, [pc, #116]	@ (800416c <HAL_DMA_IRQHandler+0x420>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1b      	ldr	r2, [pc, #108]	@ (8004170 <HAL_DMA_IRQHandler+0x424>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1a      	ldr	r2, [pc, #104]	@ (8004174 <HAL_DMA_IRQHandler+0x428>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a18      	ldr	r2, [pc, #96]	@ (8004178 <HAL_DMA_IRQHandler+0x42c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a17      	ldr	r2, [pc, #92]	@ (800417c <HAL_DMA_IRQHandler+0x430>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_DMA_IRQHandler+0x3e2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <HAL_DMA_IRQHandler+0x434>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d12a      	bne.n	8004184 <HAL_DMA_IRQHandler+0x438>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e023      	b.n	800418c <HAL_DMA_IRQHandler+0x440>
 8004144:	40020010 	.word	0x40020010
 8004148:	40020028 	.word	0x40020028
 800414c:	40020040 	.word	0x40020040
 8004150:	40020058 	.word	0x40020058
 8004154:	40020070 	.word	0x40020070
 8004158:	40020088 	.word	0x40020088
 800415c:	400200a0 	.word	0x400200a0
 8004160:	400200b8 	.word	0x400200b8
 8004164:	40020410 	.word	0x40020410
 8004168:	40020428 	.word	0x40020428
 800416c:	40020440 	.word	0x40020440
 8004170:	40020458 	.word	0x40020458
 8004174:	40020470 	.word	0x40020470
 8004178:	40020488 	.word	0x40020488
 800417c:	400204a0 	.word	0x400204a0
 8004180:	400204b8 	.word	0x400204b8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2204      	movs	r2, #4
 800419a:	409a      	lsls	r2, r3
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a4:	f043 0204 	orr.w	r2, r3, #4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	2210      	movs	r2, #16
 80041b6:	409a      	lsls	r2, r3
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80a6 	beq.w	800430e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a85      	ldr	r2, [pc, #532]	@ (80043dc <HAL_DMA_IRQHandler+0x690>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d04a      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a83      	ldr	r2, [pc, #524]	@ (80043e0 <HAL_DMA_IRQHandler+0x694>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d045      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a82      	ldr	r2, [pc, #520]	@ (80043e4 <HAL_DMA_IRQHandler+0x698>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d040      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a80      	ldr	r2, [pc, #512]	@ (80043e8 <HAL_DMA_IRQHandler+0x69c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d03b      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7f      	ldr	r2, [pc, #508]	@ (80043ec <HAL_DMA_IRQHandler+0x6a0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d036      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a7d      	ldr	r2, [pc, #500]	@ (80043f0 <HAL_DMA_IRQHandler+0x6a4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d031      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a7c      	ldr	r2, [pc, #496]	@ (80043f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d02c      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a7a      	ldr	r2, [pc, #488]	@ (80043f8 <HAL_DMA_IRQHandler+0x6ac>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d027      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a79      	ldr	r2, [pc, #484]	@ (80043fc <HAL_DMA_IRQHandler+0x6b0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d022      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a77      	ldr	r2, [pc, #476]	@ (8004400 <HAL_DMA_IRQHandler+0x6b4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01d      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a76      	ldr	r2, [pc, #472]	@ (8004404 <HAL_DMA_IRQHandler+0x6b8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d018      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a74      	ldr	r2, [pc, #464]	@ (8004408 <HAL_DMA_IRQHandler+0x6bc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a73      	ldr	r2, [pc, #460]	@ (800440c <HAL_DMA_IRQHandler+0x6c0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00e      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a71      	ldr	r2, [pc, #452]	@ (8004410 <HAL_DMA_IRQHandler+0x6c4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d009      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a70      	ldr	r2, [pc, #448]	@ (8004414 <HAL_DMA_IRQHandler+0x6c8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <HAL_DMA_IRQHandler+0x516>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6e      	ldr	r2, [pc, #440]	@ (8004418 <HAL_DMA_IRQHandler+0x6cc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d10a      	bne.n	8004278 <HAL_DMA_IRQHandler+0x52c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e009      	b.n	800428c <HAL_DMA_IRQHandler+0x540>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf14      	ite	ne
 8004286:	2301      	movne	r3, #1
 8004288:	2300      	moveq	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03e      	beq.n	800430e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	2210      	movs	r2, #16
 800429a:	409a      	lsls	r2, r3
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d018      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d108      	bne.n	80042ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d024      	beq.n	800430e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
 80042cc:	e01f      	b.n	800430e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01b      	beq.n	800430e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	4798      	blx	r3
 80042de:	e016      	b.n	800430e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0208 	bic.w	r2, r2, #8
 80042fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2220      	movs	r2, #32
 8004318:	409a      	lsls	r2, r3
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8110 	beq.w	8004544 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2c      	ldr	r2, [pc, #176]	@ (80043dc <HAL_DMA_IRQHandler+0x690>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d04a      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2b      	ldr	r2, [pc, #172]	@ (80043e0 <HAL_DMA_IRQHandler+0x694>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d045      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a29      	ldr	r2, [pc, #164]	@ (80043e4 <HAL_DMA_IRQHandler+0x698>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d040      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a28      	ldr	r2, [pc, #160]	@ (80043e8 <HAL_DMA_IRQHandler+0x69c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d03b      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a26      	ldr	r2, [pc, #152]	@ (80043ec <HAL_DMA_IRQHandler+0x6a0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d036      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a25      	ldr	r2, [pc, #148]	@ (80043f0 <HAL_DMA_IRQHandler+0x6a4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d031      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a23      	ldr	r2, [pc, #140]	@ (80043f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02c      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a22      	ldr	r2, [pc, #136]	@ (80043f8 <HAL_DMA_IRQHandler+0x6ac>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d027      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a20      	ldr	r2, [pc, #128]	@ (80043fc <HAL_DMA_IRQHandler+0x6b0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d022      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1f      	ldr	r2, [pc, #124]	@ (8004400 <HAL_DMA_IRQHandler+0x6b4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d01d      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1d      	ldr	r2, [pc, #116]	@ (8004404 <HAL_DMA_IRQHandler+0x6b8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d018      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1c      	ldr	r2, [pc, #112]	@ (8004408 <HAL_DMA_IRQHandler+0x6bc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1a      	ldr	r2, [pc, #104]	@ (800440c <HAL_DMA_IRQHandler+0x6c0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a19      	ldr	r2, [pc, #100]	@ (8004410 <HAL_DMA_IRQHandler+0x6c4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d009      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a17      	ldr	r2, [pc, #92]	@ (8004414 <HAL_DMA_IRQHandler+0x6c8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x678>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a16      	ldr	r2, [pc, #88]	@ (8004418 <HAL_DMA_IRQHandler+0x6cc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d12b      	bne.n	800441c <HAL_DMA_IRQHandler+0x6d0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	e02a      	b.n	8004430 <HAL_DMA_IRQHandler+0x6e4>
 80043da:	bf00      	nop
 80043dc:	40020010 	.word	0x40020010
 80043e0:	40020028 	.word	0x40020028
 80043e4:	40020040 	.word	0x40020040
 80043e8:	40020058 	.word	0x40020058
 80043ec:	40020070 	.word	0x40020070
 80043f0:	40020088 	.word	0x40020088
 80043f4:	400200a0 	.word	0x400200a0
 80043f8:	400200b8 	.word	0x400200b8
 80043fc:	40020410 	.word	0x40020410
 8004400:	40020428 	.word	0x40020428
 8004404:	40020440 	.word	0x40020440
 8004408:	40020458 	.word	0x40020458
 800440c:	40020470 	.word	0x40020470
 8004410:	40020488 	.word	0x40020488
 8004414:	400204a0 	.word	0x400204a0
 8004418:	400204b8 	.word	0x400204b8
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf14      	ite	ne
 800442a:	2301      	movne	r3, #1
 800442c:	2300      	moveq	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8087 	beq.w	8004544 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2220      	movs	r2, #32
 8004440:	409a      	lsls	r2, r3
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b04      	cmp	r3, #4
 8004450:	d139      	bne.n	80044c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0216 	bic.w	r2, r2, #22
 8004460:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004470:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <HAL_DMA_IRQHandler+0x736>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0208 	bic.w	r2, r2, #8
 8004490:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	223f      	movs	r2, #63	@ 0x3f
 800449c:	409a      	lsls	r2, r3
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 834a 	beq.w	8004b50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
          }
          return;
 80044c4:	e344      	b.n	8004b50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d018      	beq.n	8004506 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d02c      	beq.n	8004544 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
 80044f2:	e027      	b.n	8004544 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d023      	beq.n	8004544 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
 8004504:	e01e      	b.n	8004544 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10f      	bne.n	8004534 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0210 	bic.w	r2, r2, #16
 8004522:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8306 	beq.w	8004b5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8088 	beq.w	800466c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2204      	movs	r2, #4
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a7a      	ldr	r2, [pc, #488]	@ (8004754 <HAL_DMA_IRQHandler+0xa08>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d04a      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a79      	ldr	r2, [pc, #484]	@ (8004758 <HAL_DMA_IRQHandler+0xa0c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d045      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a77      	ldr	r2, [pc, #476]	@ (800475c <HAL_DMA_IRQHandler+0xa10>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d040      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a76      	ldr	r2, [pc, #472]	@ (8004760 <HAL_DMA_IRQHandler+0xa14>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d03b      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a74      	ldr	r2, [pc, #464]	@ (8004764 <HAL_DMA_IRQHandler+0xa18>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d036      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a73      	ldr	r2, [pc, #460]	@ (8004768 <HAL_DMA_IRQHandler+0xa1c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d031      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a71      	ldr	r2, [pc, #452]	@ (800476c <HAL_DMA_IRQHandler+0xa20>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d02c      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a70      	ldr	r2, [pc, #448]	@ (8004770 <HAL_DMA_IRQHandler+0xa24>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d027      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004774 <HAL_DMA_IRQHandler+0xa28>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d022      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004778 <HAL_DMA_IRQHandler+0xa2c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d01d      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a6b      	ldr	r2, [pc, #428]	@ (800477c <HAL_DMA_IRQHandler+0xa30>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d018      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004780 <HAL_DMA_IRQHandler+0xa34>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d013      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a68      	ldr	r2, [pc, #416]	@ (8004784 <HAL_DMA_IRQHandler+0xa38>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00e      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a67      	ldr	r2, [pc, #412]	@ (8004788 <HAL_DMA_IRQHandler+0xa3c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a65      	ldr	r2, [pc, #404]	@ (800478c <HAL_DMA_IRQHandler+0xa40>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_DMA_IRQHandler+0x8b8>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a64      	ldr	r2, [pc, #400]	@ (8004790 <HAL_DMA_IRQHandler+0xa44>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d108      	bne.n	8004616 <HAL_DMA_IRQHandler+0x8ca>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e007      	b.n	8004626 <HAL_DMA_IRQHandler+0x8da>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462e:	429a      	cmp	r2, r3
 8004630:	d307      	bcc.n	8004642 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f2      	bne.n	8004626 <HAL_DMA_IRQHandler+0x8da>
 8004640:	e000      	b.n	8004644 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004642:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d004      	beq.n	800465c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2203      	movs	r2, #3
 8004656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800465a:	e003      	b.n	8004664 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8272 	beq.w	8004b5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
 800467e:	e26c      	b.n	8004b5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a43      	ldr	r2, [pc, #268]	@ (8004794 <HAL_DMA_IRQHandler+0xa48>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d022      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x984>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a42      	ldr	r2, [pc, #264]	@ (8004798 <HAL_DMA_IRQHandler+0xa4c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d01d      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x984>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a40      	ldr	r2, [pc, #256]	@ (800479c <HAL_DMA_IRQHandler+0xa50>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d018      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x984>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a3f      	ldr	r2, [pc, #252]	@ (80047a0 <HAL_DMA_IRQHandler+0xa54>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x984>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3d      	ldr	r2, [pc, #244]	@ (80047a4 <HAL_DMA_IRQHandler+0xa58>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x984>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a3c      	ldr	r2, [pc, #240]	@ (80047a8 <HAL_DMA_IRQHandler+0xa5c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x984>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a3a      	ldr	r2, [pc, #232]	@ (80047ac <HAL_DMA_IRQHandler+0xa60>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x984>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a39      	ldr	r2, [pc, #228]	@ (80047b0 <HAL_DMA_IRQHandler+0xa64>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d101      	bne.n	80046d4 <HAL_DMA_IRQHandler+0x988>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <HAL_DMA_IRQHandler+0x98a>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 823f 	beq.w	8004b5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	2204      	movs	r2, #4
 80046ee:	409a      	lsls	r2, r3
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80cd 	beq.w	8004894 <HAL_DMA_IRQHandler+0xb48>
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80c7 	beq.w	8004894 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2204      	movs	r2, #4
 8004710:	409a      	lsls	r2, r3
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d049      	beq.n	80047b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8210 	beq.w	8004b54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800473c:	e20a      	b.n	8004b54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8206 	beq.w	8004b54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004750:	e200      	b.n	8004b54 <HAL_DMA_IRQHandler+0xe08>
 8004752:	bf00      	nop
 8004754:	40020010 	.word	0x40020010
 8004758:	40020028 	.word	0x40020028
 800475c:	40020040 	.word	0x40020040
 8004760:	40020058 	.word	0x40020058
 8004764:	40020070 	.word	0x40020070
 8004768:	40020088 	.word	0x40020088
 800476c:	400200a0 	.word	0x400200a0
 8004770:	400200b8 	.word	0x400200b8
 8004774:	40020410 	.word	0x40020410
 8004778:	40020428 	.word	0x40020428
 800477c:	40020440 	.word	0x40020440
 8004780:	40020458 	.word	0x40020458
 8004784:	40020470 	.word	0x40020470
 8004788:	40020488 	.word	0x40020488
 800478c:	400204a0 	.word	0x400204a0
 8004790:	400204b8 	.word	0x400204b8
 8004794:	58025408 	.word	0x58025408
 8004798:	5802541c 	.word	0x5802541c
 800479c:	58025430 	.word	0x58025430
 80047a0:	58025444 	.word	0x58025444
 80047a4:	58025458 	.word	0x58025458
 80047a8:	5802546c 	.word	0x5802546c
 80047ac:	58025480 	.word	0x58025480
 80047b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d160      	bne.n	8004880 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7f      	ldr	r2, [pc, #508]	@ (80049c0 <HAL_DMA_IRQHandler+0xc74>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d04a      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a7d      	ldr	r2, [pc, #500]	@ (80049c4 <HAL_DMA_IRQHandler+0xc78>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d045      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a7c      	ldr	r2, [pc, #496]	@ (80049c8 <HAL_DMA_IRQHandler+0xc7c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d040      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a7a      	ldr	r2, [pc, #488]	@ (80049cc <HAL_DMA_IRQHandler+0xc80>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d03b      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a79      	ldr	r2, [pc, #484]	@ (80049d0 <HAL_DMA_IRQHandler+0xc84>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d036      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a77      	ldr	r2, [pc, #476]	@ (80049d4 <HAL_DMA_IRQHandler+0xc88>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a76      	ldr	r2, [pc, #472]	@ (80049d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d02c      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a74      	ldr	r2, [pc, #464]	@ (80049dc <HAL_DMA_IRQHandler+0xc90>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d027      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a73      	ldr	r2, [pc, #460]	@ (80049e0 <HAL_DMA_IRQHandler+0xc94>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a71      	ldr	r2, [pc, #452]	@ (80049e4 <HAL_DMA_IRQHandler+0xc98>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01d      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a70      	ldr	r2, [pc, #448]	@ (80049e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a6e      	ldr	r2, [pc, #440]	@ (80049ec <HAL_DMA_IRQHandler+0xca0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a6d      	ldr	r2, [pc, #436]	@ (80049f0 <HAL_DMA_IRQHandler+0xca4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a6b      	ldr	r2, [pc, #428]	@ (80049f4 <HAL_DMA_IRQHandler+0xca8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a6a      	ldr	r2, [pc, #424]	@ (80049f8 <HAL_DMA_IRQHandler+0xcac>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_DMA_IRQHandler+0xb12>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a68      	ldr	r2, [pc, #416]	@ (80049fc <HAL_DMA_IRQHandler+0xcb0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d108      	bne.n	8004870 <HAL_DMA_IRQHandler+0xb24>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0208 	bic.w	r2, r2, #8
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e007      	b.n	8004880 <HAL_DMA_IRQHandler+0xb34>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8165 	beq.w	8004b54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004892:	e15f      	b.n	8004b54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	2202      	movs	r2, #2
 800489e:	409a      	lsls	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80c5 	beq.w	8004a34 <HAL_DMA_IRQHandler+0xce8>
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80bf 	beq.w	8004a34 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ba:	f003 031f 	and.w	r3, r3, #31
 80048be:	2202      	movs	r2, #2
 80048c0:	409a      	lsls	r2, r3
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d018      	beq.n	8004902 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 813a 	beq.w	8004b58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ec:	e134      	b.n	8004b58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 8130 	beq.w	8004b58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004900:	e12a      	b.n	8004b58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	f040 8089 	bne.w	8004a20 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a2b      	ldr	r2, [pc, #172]	@ (80049c0 <HAL_DMA_IRQHandler+0xc74>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d04a      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a29      	ldr	r2, [pc, #164]	@ (80049c4 <HAL_DMA_IRQHandler+0xc78>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d045      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a28      	ldr	r2, [pc, #160]	@ (80049c8 <HAL_DMA_IRQHandler+0xc7c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d040      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a26      	ldr	r2, [pc, #152]	@ (80049cc <HAL_DMA_IRQHandler+0xc80>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d03b      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a25      	ldr	r2, [pc, #148]	@ (80049d0 <HAL_DMA_IRQHandler+0xc84>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d036      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a23      	ldr	r2, [pc, #140]	@ (80049d4 <HAL_DMA_IRQHandler+0xc88>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d031      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a22      	ldr	r2, [pc, #136]	@ (80049d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d02c      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a20      	ldr	r2, [pc, #128]	@ (80049dc <HAL_DMA_IRQHandler+0xc90>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d027      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1f      	ldr	r2, [pc, #124]	@ (80049e0 <HAL_DMA_IRQHandler+0xc94>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d022      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1d      	ldr	r2, [pc, #116]	@ (80049e4 <HAL_DMA_IRQHandler+0xc98>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01d      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1c      	ldr	r2, [pc, #112]	@ (80049e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d018      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <HAL_DMA_IRQHandler+0xca0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a19      	ldr	r2, [pc, #100]	@ (80049f0 <HAL_DMA_IRQHandler+0xca4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a17      	ldr	r2, [pc, #92]	@ (80049f4 <HAL_DMA_IRQHandler+0xca8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a16      	ldr	r2, [pc, #88]	@ (80049f8 <HAL_DMA_IRQHandler+0xcac>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc62>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a14      	ldr	r2, [pc, #80]	@ (80049fc <HAL_DMA_IRQHandler+0xcb0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d128      	bne.n	8004a00 <HAL_DMA_IRQHandler+0xcb4>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0214 	bic.w	r2, r2, #20
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e027      	b.n	8004a10 <HAL_DMA_IRQHandler+0xcc4>
 80049c0:	40020010 	.word	0x40020010
 80049c4:	40020028 	.word	0x40020028
 80049c8:	40020040 	.word	0x40020040
 80049cc:	40020058 	.word	0x40020058
 80049d0:	40020070 	.word	0x40020070
 80049d4:	40020088 	.word	0x40020088
 80049d8:	400200a0 	.word	0x400200a0
 80049dc:	400200b8 	.word	0x400200b8
 80049e0:	40020410 	.word	0x40020410
 80049e4:	40020428 	.word	0x40020428
 80049e8:	40020440 	.word	0x40020440
 80049ec:	40020458 	.word	0x40020458
 80049f0:	40020470 	.word	0x40020470
 80049f4:	40020488 	.word	0x40020488
 80049f8:	400204a0 	.word	0x400204a0
 80049fc:	400204b8 	.word	0x400204b8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 020a 	bic.w	r2, r2, #10
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8097 	beq.w	8004b58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a32:	e091      	b.n	8004b58 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	409a      	lsls	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8088 	beq.w	8004b5a <HAL_DMA_IRQHandler+0xe0e>
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8082 	beq.w	8004b5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a41      	ldr	r2, [pc, #260]	@ (8004b60 <HAL_DMA_IRQHandler+0xe14>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d04a      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a3f      	ldr	r2, [pc, #252]	@ (8004b64 <HAL_DMA_IRQHandler+0xe18>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d045      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b68 <HAL_DMA_IRQHandler+0xe1c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d040      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a3c      	ldr	r2, [pc, #240]	@ (8004b6c <HAL_DMA_IRQHandler+0xe20>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d03b      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a3b      	ldr	r2, [pc, #236]	@ (8004b70 <HAL_DMA_IRQHandler+0xe24>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d036      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a39      	ldr	r2, [pc, #228]	@ (8004b74 <HAL_DMA_IRQHandler+0xe28>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d031      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a38      	ldr	r2, [pc, #224]	@ (8004b78 <HAL_DMA_IRQHandler+0xe2c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d02c      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a36      	ldr	r2, [pc, #216]	@ (8004b7c <HAL_DMA_IRQHandler+0xe30>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d027      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a35      	ldr	r2, [pc, #212]	@ (8004b80 <HAL_DMA_IRQHandler+0xe34>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d022      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a33      	ldr	r2, [pc, #204]	@ (8004b84 <HAL_DMA_IRQHandler+0xe38>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01d      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a32      	ldr	r2, [pc, #200]	@ (8004b88 <HAL_DMA_IRQHandler+0xe3c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d018      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	@ (8004b8c <HAL_DMA_IRQHandler+0xe40>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8004b90 <HAL_DMA_IRQHandler+0xe44>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2d      	ldr	r2, [pc, #180]	@ (8004b94 <HAL_DMA_IRQHandler+0xe48>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b98 <HAL_DMA_IRQHandler+0xe4c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xdaa>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2a      	ldr	r2, [pc, #168]	@ (8004b9c <HAL_DMA_IRQHandler+0xe50>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <HAL_DMA_IRQHandler+0xdbc>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 021c 	bic.w	r2, r2, #28
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e007      	b.n	8004b18 <HAL_DMA_IRQHandler+0xdcc>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 020e 	bic.w	r2, r2, #14
 8004b16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	2201      	movs	r2, #1
 8004b22:	409a      	lsls	r2, r3
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
 8004b4e:	e004      	b.n	8004b5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b50:	bf00      	nop
 8004b52:	e002      	b.n	8004b5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b54:	bf00      	nop
 8004b56:	e000      	b.n	8004b5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b5a:	3728      	adds	r7, #40	@ 0x28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40020010 	.word	0x40020010
 8004b64:	40020028 	.word	0x40020028
 8004b68:	40020040 	.word	0x40020040
 8004b6c:	40020058 	.word	0x40020058
 8004b70:	40020070 	.word	0x40020070
 8004b74:	40020088 	.word	0x40020088
 8004b78:	400200a0 	.word	0x400200a0
 8004b7c:	400200b8 	.word	0x400200b8
 8004b80:	40020410 	.word	0x40020410
 8004b84:	40020428 	.word	0x40020428
 8004b88:	40020440 	.word	0x40020440
 8004b8c:	40020458 	.word	0x40020458
 8004b90:	40020470 	.word	0x40020470
 8004b94:	40020488 	.word	0x40020488
 8004b98:	400204a0 	.word	0x400204a0
 8004b9c:	400204b8 	.word	0x400204b8

08004ba0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7f      	ldr	r2, [pc, #508]	@ (8004dd4 <DMA_SetConfig+0x21c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d072      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a7d      	ldr	r2, [pc, #500]	@ (8004dd8 <DMA_SetConfig+0x220>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d06d      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a7c      	ldr	r2, [pc, #496]	@ (8004ddc <DMA_SetConfig+0x224>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d068      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a7a      	ldr	r2, [pc, #488]	@ (8004de0 <DMA_SetConfig+0x228>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d063      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a79      	ldr	r2, [pc, #484]	@ (8004de4 <DMA_SetConfig+0x22c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d05e      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a77      	ldr	r2, [pc, #476]	@ (8004de8 <DMA_SetConfig+0x230>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d059      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a76      	ldr	r2, [pc, #472]	@ (8004dec <DMA_SetConfig+0x234>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d054      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a74      	ldr	r2, [pc, #464]	@ (8004df0 <DMA_SetConfig+0x238>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d04f      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a73      	ldr	r2, [pc, #460]	@ (8004df4 <DMA_SetConfig+0x23c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d04a      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a71      	ldr	r2, [pc, #452]	@ (8004df8 <DMA_SetConfig+0x240>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d045      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a70      	ldr	r2, [pc, #448]	@ (8004dfc <DMA_SetConfig+0x244>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d040      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6e      	ldr	r2, [pc, #440]	@ (8004e00 <DMA_SetConfig+0x248>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d03b      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6d      	ldr	r2, [pc, #436]	@ (8004e04 <DMA_SetConfig+0x24c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d036      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a6b      	ldr	r2, [pc, #428]	@ (8004e08 <DMA_SetConfig+0x250>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d031      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a6a      	ldr	r2, [pc, #424]	@ (8004e0c <DMA_SetConfig+0x254>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d02c      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a68      	ldr	r2, [pc, #416]	@ (8004e10 <DMA_SetConfig+0x258>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d027      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a67      	ldr	r2, [pc, #412]	@ (8004e14 <DMA_SetConfig+0x25c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a65      	ldr	r2, [pc, #404]	@ (8004e18 <DMA_SetConfig+0x260>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01d      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a64      	ldr	r2, [pc, #400]	@ (8004e1c <DMA_SetConfig+0x264>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a62      	ldr	r2, [pc, #392]	@ (8004e20 <DMA_SetConfig+0x268>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a61      	ldr	r2, [pc, #388]	@ (8004e24 <DMA_SetConfig+0x26c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5f      	ldr	r2, [pc, #380]	@ (8004e28 <DMA_SetConfig+0x270>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8004e2c <DMA_SetConfig+0x274>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <DMA_SetConfig+0x10a>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a5c      	ldr	r2, [pc, #368]	@ (8004e30 <DMA_SetConfig+0x278>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d101      	bne.n	8004cc6 <DMA_SetConfig+0x10e>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <DMA_SetConfig+0x110>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00d      	beq.n	8004ce8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cd4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ce6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a39      	ldr	r2, [pc, #228]	@ (8004dd4 <DMA_SetConfig+0x21c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d04a      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a38      	ldr	r2, [pc, #224]	@ (8004dd8 <DMA_SetConfig+0x220>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d045      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a36      	ldr	r2, [pc, #216]	@ (8004ddc <DMA_SetConfig+0x224>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d040      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a35      	ldr	r2, [pc, #212]	@ (8004de0 <DMA_SetConfig+0x228>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d03b      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a33      	ldr	r2, [pc, #204]	@ (8004de4 <DMA_SetConfig+0x22c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d036      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a32      	ldr	r2, [pc, #200]	@ (8004de8 <DMA_SetConfig+0x230>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d031      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a30      	ldr	r2, [pc, #192]	@ (8004dec <DMA_SetConfig+0x234>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d02c      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2f      	ldr	r2, [pc, #188]	@ (8004df0 <DMA_SetConfig+0x238>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d027      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004df4 <DMA_SetConfig+0x23c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d022      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2c      	ldr	r2, [pc, #176]	@ (8004df8 <DMA_SetConfig+0x240>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d01d      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a2a      	ldr	r2, [pc, #168]	@ (8004dfc <DMA_SetConfig+0x244>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d018      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a29      	ldr	r2, [pc, #164]	@ (8004e00 <DMA_SetConfig+0x248>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a27      	ldr	r2, [pc, #156]	@ (8004e04 <DMA_SetConfig+0x24c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00e      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a26      	ldr	r2, [pc, #152]	@ (8004e08 <DMA_SetConfig+0x250>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d009      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a24      	ldr	r2, [pc, #144]	@ (8004e0c <DMA_SetConfig+0x254>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <DMA_SetConfig+0x1d0>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a23      	ldr	r2, [pc, #140]	@ (8004e10 <DMA_SetConfig+0x258>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d101      	bne.n	8004d8c <DMA_SetConfig+0x1d4>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <DMA_SetConfig+0x1d6>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d059      	beq.n	8004e46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	223f      	movs	r2, #63	@ 0x3f
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004db0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b40      	cmp	r3, #64	@ 0x40
 8004dc0:	d138      	bne.n	8004e34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dd2:	e086      	b.n	8004ee2 <DMA_SetConfig+0x32a>
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8
 8004e14:	58025408 	.word	0x58025408
 8004e18:	5802541c 	.word	0x5802541c
 8004e1c:	58025430 	.word	0x58025430
 8004e20:	58025444 	.word	0x58025444
 8004e24:	58025458 	.word	0x58025458
 8004e28:	5802546c 	.word	0x5802546c
 8004e2c:	58025480 	.word	0x58025480
 8004e30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]
}
 8004e44:	e04d      	b.n	8004ee2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a29      	ldr	r2, [pc, #164]	@ (8004ef0 <DMA_SetConfig+0x338>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d022      	beq.n	8004e96 <DMA_SetConfig+0x2de>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a27      	ldr	r2, [pc, #156]	@ (8004ef4 <DMA_SetConfig+0x33c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01d      	beq.n	8004e96 <DMA_SetConfig+0x2de>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a26      	ldr	r2, [pc, #152]	@ (8004ef8 <DMA_SetConfig+0x340>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d018      	beq.n	8004e96 <DMA_SetConfig+0x2de>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a24      	ldr	r2, [pc, #144]	@ (8004efc <DMA_SetConfig+0x344>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <DMA_SetConfig+0x2de>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a23      	ldr	r2, [pc, #140]	@ (8004f00 <DMA_SetConfig+0x348>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <DMA_SetConfig+0x2de>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a21      	ldr	r2, [pc, #132]	@ (8004f04 <DMA_SetConfig+0x34c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <DMA_SetConfig+0x2de>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a20      	ldr	r2, [pc, #128]	@ (8004f08 <DMA_SetConfig+0x350>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <DMA_SetConfig+0x2de>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1e      	ldr	r2, [pc, #120]	@ (8004f0c <DMA_SetConfig+0x354>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d101      	bne.n	8004e9a <DMA_SetConfig+0x2e2>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <DMA_SetConfig+0x2e4>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d020      	beq.n	8004ee2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b40      	cmp	r3, #64	@ 0x40
 8004ebe:	d108      	bne.n	8004ed2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	60da      	str	r2, [r3, #12]
}
 8004ed0:	e007      	b.n	8004ee2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	60da      	str	r2, [r3, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	58025408 	.word	0x58025408
 8004ef4:	5802541c 	.word	0x5802541c
 8004ef8:	58025430 	.word	0x58025430
 8004efc:	58025444 	.word	0x58025444
 8004f00:	58025458 	.word	0x58025458
 8004f04:	5802546c 	.word	0x5802546c
 8004f08:	58025480 	.word	0x58025480
 8004f0c:	58025494 	.word	0x58025494

08004f10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a42      	ldr	r2, [pc, #264]	@ (8005028 <DMA_CalcBaseAndBitshift+0x118>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d04a      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a41      	ldr	r2, [pc, #260]	@ (800502c <DMA_CalcBaseAndBitshift+0x11c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d045      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a3f      	ldr	r2, [pc, #252]	@ (8005030 <DMA_CalcBaseAndBitshift+0x120>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d040      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a3e      	ldr	r2, [pc, #248]	@ (8005034 <DMA_CalcBaseAndBitshift+0x124>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d03b      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a3c      	ldr	r2, [pc, #240]	@ (8005038 <DMA_CalcBaseAndBitshift+0x128>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d036      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a3b      	ldr	r2, [pc, #236]	@ (800503c <DMA_CalcBaseAndBitshift+0x12c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d031      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a39      	ldr	r2, [pc, #228]	@ (8005040 <DMA_CalcBaseAndBitshift+0x130>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02c      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a38      	ldr	r2, [pc, #224]	@ (8005044 <DMA_CalcBaseAndBitshift+0x134>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d027      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a36      	ldr	r2, [pc, #216]	@ (8005048 <DMA_CalcBaseAndBitshift+0x138>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a35      	ldr	r2, [pc, #212]	@ (800504c <DMA_CalcBaseAndBitshift+0x13c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d01d      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a33      	ldr	r2, [pc, #204]	@ (8005050 <DMA_CalcBaseAndBitshift+0x140>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a32      	ldr	r2, [pc, #200]	@ (8005054 <DMA_CalcBaseAndBitshift+0x144>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a30      	ldr	r2, [pc, #192]	@ (8005058 <DMA_CalcBaseAndBitshift+0x148>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800505c <DMA_CalcBaseAndBitshift+0x14c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8005060 <DMA_CalcBaseAndBitshift+0x150>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005064 <DMA_CalcBaseAndBitshift+0x154>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <DMA_CalcBaseAndBitshift+0xac>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <DMA_CalcBaseAndBitshift+0xae>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d024      	beq.n	800500c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3b10      	subs	r3, #16
 8004fca:	4a27      	ldr	r2, [pc, #156]	@ (8005068 <DMA_CalcBaseAndBitshift+0x158>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	4a24      	ldr	r2, [pc, #144]	@ (800506c <DMA_CalcBaseAndBitshift+0x15c>)
 8004fdc:	5cd3      	ldrb	r3, [r2, r3]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d908      	bls.n	8004ffc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8005070 <DMA_CalcBaseAndBitshift+0x160>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	1d1a      	adds	r2, r3, #4
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ffa:	e00d      	b.n	8005018 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <DMA_CalcBaseAndBitshift+0x160>)
 8005004:	4013      	ands	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6593      	str	r3, [r2, #88]	@ 0x58
 800500a:	e005      	b.n	8005018 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40020010 	.word	0x40020010
 800502c:	40020028 	.word	0x40020028
 8005030:	40020040 	.word	0x40020040
 8005034:	40020058 	.word	0x40020058
 8005038:	40020070 	.word	0x40020070
 800503c:	40020088 	.word	0x40020088
 8005040:	400200a0 	.word	0x400200a0
 8005044:	400200b8 	.word	0x400200b8
 8005048:	40020410 	.word	0x40020410
 800504c:	40020428 	.word	0x40020428
 8005050:	40020440 	.word	0x40020440
 8005054:	40020458 	.word	0x40020458
 8005058:	40020470 	.word	0x40020470
 800505c:	40020488 	.word	0x40020488
 8005060:	400204a0 	.word	0x400204a0
 8005064:	400204b8 	.word	0x400204b8
 8005068:	aaaaaaab 	.word	0xaaaaaaab
 800506c:	080190b4 	.word	0x080190b4
 8005070:	fffffc00 	.word	0xfffffc00

08005074 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d120      	bne.n	80050ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	2b03      	cmp	r3, #3
 800508e:	d858      	bhi.n	8005142 <DMA_CheckFifoParam+0xce>
 8005090:	a201      	add	r2, pc, #4	@ (adr r2, 8005098 <DMA_CheckFifoParam+0x24>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050bb 	.word	0x080050bb
 80050a0:	080050a9 	.word	0x080050a9
 80050a4:	08005143 	.word	0x08005143
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d048      	beq.n	8005146 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050b8:	e045      	b.n	8005146 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050c2:	d142      	bne.n	800514a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050c8:	e03f      	b.n	800514a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050d2:	d123      	bne.n	800511c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d838      	bhi.n	800514e <DMA_CheckFifoParam+0xda>
 80050dc:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <DMA_CheckFifoParam+0x70>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	080050f5 	.word	0x080050f5
 80050e8:	080050fb 	.word	0x080050fb
 80050ec:	080050f5 	.word	0x080050f5
 80050f0:	0800510d 	.word	0x0800510d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
        break;
 80050f8:	e030      	b.n	800515c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d025      	beq.n	8005152 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800510a:	e022      	b.n	8005152 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005110:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005114:	d11f      	bne.n	8005156 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800511a:	e01c      	b.n	8005156 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	2b02      	cmp	r3, #2
 8005122:	d902      	bls.n	800512a <DMA_CheckFifoParam+0xb6>
 8005124:	2b03      	cmp	r3, #3
 8005126:	d003      	beq.n	8005130 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005128:	e018      	b.n	800515c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	73fb      	strb	r3, [r7, #15]
        break;
 800512e:	e015      	b.n	800515c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00e      	beq.n	800515a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
    break;
 8005140:	e00b      	b.n	800515a <DMA_CheckFifoParam+0xe6>
        break;
 8005142:	bf00      	nop
 8005144:	e00a      	b.n	800515c <DMA_CheckFifoParam+0xe8>
        break;
 8005146:	bf00      	nop
 8005148:	e008      	b.n	800515c <DMA_CheckFifoParam+0xe8>
        break;
 800514a:	bf00      	nop
 800514c:	e006      	b.n	800515c <DMA_CheckFifoParam+0xe8>
        break;
 800514e:	bf00      	nop
 8005150:	e004      	b.n	800515c <DMA_CheckFifoParam+0xe8>
        break;
 8005152:	bf00      	nop
 8005154:	e002      	b.n	800515c <DMA_CheckFifoParam+0xe8>
        break;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <DMA_CheckFifoParam+0xe8>
    break;
 800515a:	bf00      	nop
    }
  }

  return status;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop

0800516c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a38      	ldr	r2, [pc, #224]	@ (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d022      	beq.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a36      	ldr	r2, [pc, #216]	@ (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01d      	beq.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a35      	ldr	r2, [pc, #212]	@ (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d018      	beq.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a33      	ldr	r2, [pc, #204]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a32      	ldr	r2, [pc, #200]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a30      	ldr	r2, [pc, #192]	@ (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2d      	ldr	r2, [pc, #180]	@ (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d101      	bne.n	80051ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01a      	beq.n	800520a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	3b08      	subs	r3, #8
 80051dc:	4a28      	ldr	r2, [pc, #160]	@ (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	091b      	lsrs	r3, r3, #4
 80051e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4b26      	ldr	r3, [pc, #152]	@ (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	461a      	mov	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a24      	ldr	r2, [pc, #144]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2201      	movs	r2, #1
 8005202:	409a      	lsls	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005208:	e024      	b.n	8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	3b10      	subs	r3, #16
 8005212:	4a1e      	ldr	r2, [pc, #120]	@ (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005214:	fba2 2303 	umull	r2, r3, r2, r3
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a1c      	ldr	r2, [pc, #112]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d806      	bhi.n	8005232 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4a1b      	ldr	r2, [pc, #108]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d902      	bls.n	8005232 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3308      	adds	r3, #8
 8005230:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4b18      	ldr	r3, [pc, #96]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	461a      	mov	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a16      	ldr	r2, [pc, #88]	@ (800529c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005244:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2201      	movs	r2, #1
 800524e:	409a      	lsls	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	58025408 	.word	0x58025408
 8005264:	5802541c 	.word	0x5802541c
 8005268:	58025430 	.word	0x58025430
 800526c:	58025444 	.word	0x58025444
 8005270:	58025458 	.word	0x58025458
 8005274:	5802546c 	.word	0x5802546c
 8005278:	58025480 	.word	0x58025480
 800527c:	58025494 	.word	0x58025494
 8005280:	cccccccd 	.word	0xcccccccd
 8005284:	16009600 	.word	0x16009600
 8005288:	58025880 	.word	0x58025880
 800528c:	aaaaaaab 	.word	0xaaaaaaab
 8005290:	400204b8 	.word	0x400204b8
 8005294:	4002040f 	.word	0x4002040f
 8005298:	10008200 	.word	0x10008200
 800529c:	40020880 	.word	0x40020880

080052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d04a      	beq.n	800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d847      	bhi.n	800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a25      	ldr	r2, [pc, #148]	@ (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d022      	beq.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a24      	ldr	r2, [pc, #144]	@ (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d01d      	beq.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a22      	ldr	r2, [pc, #136]	@ (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d018      	beq.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a21      	ldr	r2, [pc, #132]	@ (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d013      	beq.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00e      	beq.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1e      	ldr	r2, [pc, #120]	@ (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d009      	beq.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1b      	ldr	r2, [pc, #108]	@ (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d101      	bne.n	8005310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005310:	2300      	movs	r3, #0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4b17      	ldr	r3, [pc, #92]	@ (8005378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	461a      	mov	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a15      	ldr	r2, [pc, #84]	@ (800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005328:	671a      	str	r2, [r3, #112]	@ 0x70
 800532a:	e009      	b.n	8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4b14      	ldr	r3, [pc, #80]	@ (8005380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	461a      	mov	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a11      	ldr	r2, [pc, #68]	@ (8005384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800533e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3b01      	subs	r3, #1
 8005344:	2201      	movs	r2, #1
 8005346:	409a      	lsls	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	58025408 	.word	0x58025408
 800535c:	5802541c 	.word	0x5802541c
 8005360:	58025430 	.word	0x58025430
 8005364:	58025444 	.word	0x58025444
 8005368:	58025458 	.word	0x58025458
 800536c:	5802546c 	.word	0x5802546c
 8005370:	58025480 	.word	0x58025480
 8005374:	58025494 	.word	0x58025494
 8005378:	1600963f 	.word	0x1600963f
 800537c:	58025940 	.word	0x58025940
 8005380:	1000823f 	.word	0x1000823f
 8005384:	40020940 	.word	0x40020940

08005388 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e0e3      	b.n	8005562 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2223      	movs	r2, #35	@ 0x23
 80053a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fb fdd3 	bl	8000f58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053b2:	4b6e      	ldr	r3, [pc, #440]	@ (800556c <HAL_ETH_Init+0x1e4>)
 80053b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053b8:	4a6c      	ldr	r2, [pc, #432]	@ (800556c <HAL_ETH_Init+0x1e4>)
 80053ba:	f043 0302 	orr.w	r3, r3, #2
 80053be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80053c2:	4b6a      	ldr	r3, [pc, #424]	@ (800556c <HAL_ETH_Init+0x1e4>)
 80053c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	7a1b      	ldrb	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d103      	bne.n	80053e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80053d8:	2000      	movs	r0, #0
 80053da:	f7fd f899 	bl	8002510 <HAL_SYSCFG_ETHInterfaceSelect>
 80053de:	e003      	b.n	80053e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80053e0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80053e4:	f7fd f894 	bl	8002510 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80053e8:	4b61      	ldr	r3, [pc, #388]	@ (8005570 <HAL_ETH_Init+0x1e8>)
 80053ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005402:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005404:	f7fd f848 	bl	8002498 <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800540a:	e011      	b.n	8005430 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800540c:	f7fd f844 	bl	8002498 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800541a:	d909      	bls.n	8005430 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2204      	movs	r2, #4
 8005420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	22e0      	movs	r2, #224	@ 0xe0
 8005428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e098      	b.n	8005562 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e4      	bne.n	800540c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f89e 	bl	8005584 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005448:	f001 feba 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 800544c:	4603      	mov	r3, r0
 800544e:	4a49      	ldr	r2, [pc, #292]	@ (8005574 <HAL_ETH_Init+0x1ec>)
 8005450:	fba2 2303 	umull	r2, r3, r2, r3
 8005454:	0c9a      	lsrs	r2, r3, #18
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3a01      	subs	r2, #1
 800545c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fa81 	bl	8005968 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800546e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005472:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800547e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005482:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	22e0      	movs	r2, #224	@ 0xe0
 800549e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e05d      	b.n	8005562 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80054b2:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <HAL_ETH_Init+0x1f0>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6952      	ldr	r2, [r2, #20]
 80054ba:	0051      	lsls	r1, r2, #1
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	430b      	orrs	r3, r1
 80054c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054c6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fae9 	bl	8005aa2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fb2f 	bl	8005b34 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	3305      	adds	r3, #5
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	3304      	adds	r3, #4
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	3303      	adds	r3, #3
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	061a      	lsls	r2, r3, #24
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	3302      	adds	r3, #2
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	041b      	lsls	r3, r3, #16
 8005508:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	3301      	adds	r3, #1
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005514:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005522:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005524:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b11      	ldr	r3, [pc, #68]	@ (800557c <HAL_ETH_Init+0x1f4>)
 8005536:	430b      	orrs	r3, r1
 8005538:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <HAL_ETH_Init+0x1f8>)
 800554a:	430b      	orrs	r3, r1
 800554c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2210      	movs	r2, #16
 800555c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	58024400 	.word	0x58024400
 8005570:	58000400 	.word	0x58000400
 8005574:	431bde83 	.word	0x431bde83
 8005578:	ffff8001 	.word	0xffff8001
 800557c:	0c020060 	.word	0x0c020060
 8005580:	0c20c000 	.word	0x0c20c000

08005584 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005594:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800559c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800559e:	f001 fe0f 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 80055a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005610 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d804      	bhi.n	80055b6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e022      	b.n	80055fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4a16      	ldr	r2, [pc, #88]	@ (8005614 <HAL_ETH_SetMDIOClockRange+0x90>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d204      	bcs.n	80055c8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e019      	b.n	80055fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4a13      	ldr	r2, [pc, #76]	@ (8005618 <HAL_ETH_SetMDIOClockRange+0x94>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d915      	bls.n	80055fc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a12      	ldr	r2, [pc, #72]	@ (800561c <HAL_ETH_SetMDIOClockRange+0x98>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d804      	bhi.n	80055e2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e00c      	b.n	80055fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4a0e      	ldr	r2, [pc, #56]	@ (8005620 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d804      	bhi.n	80055f4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e003      	b.n	80055fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80055fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	02160ebf 	.word	0x02160ebf
 8005614:	03938700 	.word	0x03938700
 8005618:	05f5e0ff 	.word	0x05f5e0ff
 800561c:	08f0d17f 	.word	0x08f0d17f
 8005620:	0ee6b27f 	.word	0x0ee6b27f

08005624 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	791b      	ldrb	r3, [r3, #4]
 800563c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800563e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	7b1b      	ldrb	r3, [r3, #12]
 8005644:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	7b5b      	ldrb	r3, [r3, #13]
 800564c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800564e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	7b9b      	ldrb	r3, [r3, #14]
 8005654:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	7bdb      	ldrb	r3, [r3, #15]
 800565c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800565e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	7c12      	ldrb	r2, [r2, #16]
 8005664:	2a00      	cmp	r2, #0
 8005666:	d102      	bne.n	800566e <ETH_SetMACConfig+0x4a>
 8005668:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800566c:	e000      	b.n	8005670 <ETH_SetMACConfig+0x4c>
 800566e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005670:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	7c52      	ldrb	r2, [r2, #17]
 8005676:	2a00      	cmp	r2, #0
 8005678:	d102      	bne.n	8005680 <ETH_SetMACConfig+0x5c>
 800567a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800567e:	e000      	b.n	8005682 <ETH_SetMACConfig+0x5e>
 8005680:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	7c9b      	ldrb	r3, [r3, #18]
 8005688:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800568a:	431a      	orrs	r2, r3
               macconf->Speed |
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005690:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005696:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	7f1b      	ldrb	r3, [r3, #28]
 800569c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800569e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	7f5b      	ldrb	r3, [r3, #29]
 80056a4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80056a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	7f92      	ldrb	r2, [r2, #30]
 80056ac:	2a00      	cmp	r2, #0
 80056ae:	d102      	bne.n	80056b6 <ETH_SetMACConfig+0x92>
 80056b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056b4:	e000      	b.n	80056b8 <ETH_SetMACConfig+0x94>
 80056b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	7fdb      	ldrb	r3, [r3, #31]
 80056be:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80056c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80056c8:	2a00      	cmp	r2, #0
 80056ca:	d102      	bne.n	80056d2 <ETH_SetMACConfig+0xae>
 80056cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056d0:	e000      	b.n	80056d4 <ETH_SetMACConfig+0xb0>
 80056d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80056d4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80056da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056e2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80056e4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b56      	ldr	r3, [pc, #344]	@ (8005850 <ETH_SetMACConfig+0x22c>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	68f9      	ldr	r1, [r7, #12]
 80056fe:	430b      	orrs	r3, r1
 8005700:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005706:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800570e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005710:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005718:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800571a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005722:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005724:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800572c:	2a00      	cmp	r2, #0
 800572e:	d102      	bne.n	8005736 <ETH_SetMACConfig+0x112>
 8005730:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005734:	e000      	b.n	8005738 <ETH_SetMACConfig+0x114>
 8005736:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005738:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	4b42      	ldr	r3, [pc, #264]	@ (8005854 <ETH_SetMACConfig+0x230>)
 800574a:	4013      	ands	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	430b      	orrs	r3, r1
 8005754:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800575c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	4b3a      	ldr	r3, [pc, #232]	@ (8005858 <ETH_SetMACConfig+0x234>)
 800576e:	4013      	ands	r3, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	430b      	orrs	r3, r1
 8005778:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005780:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005786:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800578e:	2a00      	cmp	r2, #0
 8005790:	d101      	bne.n	8005796 <ETH_SetMACConfig+0x172>
 8005792:	2280      	movs	r2, #128	@ 0x80
 8005794:	e000      	b.n	8005798 <ETH_SetMACConfig+0x174>
 8005796:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005798:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800579e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057aa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80057ae:	4013      	ands	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	68f9      	ldr	r1, [r7, #12]
 80057b6:	430b      	orrs	r3, r1
 80057b8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80057c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80057c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d6:	f023 0103 	bic.w	r1, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80057ee:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800580a:	2a00      	cmp	r2, #0
 800580c:	d101      	bne.n	8005812 <ETH_SetMACConfig+0x1ee>
 800580e:	2240      	movs	r2, #64	@ 0x40
 8005810:	e000      	b.n	8005814 <ETH_SetMACConfig+0x1f0>
 8005812:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005814:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800581c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800581e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005826:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005834:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	430a      	orrs	r2, r1
 8005840:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	00048083 	.word	0x00048083
 8005854:	c0f88000 	.word	0xc0f88000
 8005858:	fffffef0 	.word	0xfffffef0

0800585c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b38      	ldr	r3, [pc, #224]	@ (8005954 <ETH_SetDMAConfig+0xf8>)
 8005872:	4013      	ands	r3, r2
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	6811      	ldr	r1, [r2, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	430b      	orrs	r3, r1
 800587e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005882:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	791b      	ldrb	r3, [r3, #4]
 8005888:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800588e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	7b1b      	ldrb	r3, [r3, #12]
 8005894:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005958 <ETH_SetDMAConfig+0xfc>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	430b      	orrs	r3, r1
 80058b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058b4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	7b5b      	ldrb	r3, [r3, #13]
 80058ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80058d0:	4b22      	ldr	r3, [pc, #136]	@ (800595c <ETH_SetDMAConfig+0x100>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	68f9      	ldr	r1, [r7, #12]
 80058da:	430b      	orrs	r3, r1
 80058dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058e0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	7d1b      	ldrb	r3, [r3, #20]
 80058ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80058ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	7f5b      	ldrb	r3, [r3, #29]
 80058f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005902:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005906:	4b16      	ldr	r3, [pc, #88]	@ (8005960 <ETH_SetDMAConfig+0x104>)
 8005908:	4013      	ands	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	430b      	orrs	r3, r1
 8005912:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005916:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	7f1b      	ldrb	r3, [r3, #28]
 800591e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005930:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005934:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <ETH_SetDMAConfig+0x108>)
 8005936:	4013      	ands	r3, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	430b      	orrs	r3, r1
 8005940:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005944:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	ffff87fd 	.word	0xffff87fd
 8005958:	ffff2ffe 	.word	0xffff2ffe
 800595c:	fffec000 	.word	0xfffec000
 8005960:	ffc0efef 	.word	0xffc0efef
 8005964:	7fc0ffff 	.word	0x7fc0ffff

08005968 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b0a4      	sub	sp, #144	@ 0x90
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005976:	2300      	movs	r3, #0
 8005978:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800597a:	2300      	movs	r3, #0
 800597c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005980:	2300      	movs	r3, #0
 8005982:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800598c:	2301      	movs	r3, #1
 800598e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005998:	2300      	movs	r3, #0
 800599a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80059a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059a8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80059c0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80059c4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80059cc:	2300      	movs	r3, #0
 80059ce:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80059e2:	2300      	movs	r3, #0
 80059e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80059ea:	2300      	movs	r3, #0
 80059ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005a00:	2320      	movs	r3, #32
 8005a02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005a12:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005a18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005a24:	2302      	movs	r3, #2
 8005a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005a42:	2300      	movs	r3, #0
 8005a44:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005a4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff fde6 	bl	8005624 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005a72:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005a7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005a88:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005a8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005a8e:	f107 0308 	add.w	r3, r7, #8
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff fee1 	bl	800585c <ETH_SetDMAConfig>
}
 8005a9a:	bf00      	nop
 8005a9c:	3790      	adds	r7, #144	@ 0x90
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e01d      	b.n	8005aec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68d9      	ldr	r1, [r3, #12]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	440b      	add	r3, r1
 8005ac0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	3206      	adds	r2, #6
 8005ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d9de      	bls.n	8005ab0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b00:	461a      	mov	r2, r3
 8005b02:	2303      	movs	r3, #3
 8005b04:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b14:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b24:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e023      	b.n	8005b8a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6919      	ldr	r1, [r3, #16]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	440b      	add	r3, r1
 8005b52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2200      	movs	r2, #0
 8005b64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2200      	movs	r2, #0
 8005b76:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	3212      	adds	r2, #18
 8005b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d9d8      	bls.n	8005b42 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2303      	movs	r3, #3
 8005bba:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bca:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bde:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b089      	sub	sp, #36	@ 0x24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005bfe:	4b89      	ldr	r3, [pc, #548]	@ (8005e24 <HAL_GPIO_Init+0x234>)
 8005c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c02:	e194      	b.n	8005f2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	2101      	movs	r1, #1
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c10:	4013      	ands	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8186 	beq.w	8005f28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d005      	beq.n	8005c34 <HAL_GPIO_Init+0x44>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d130      	bne.n	8005c96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	2203      	movs	r2, #3
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	43db      	mvns	r3, r3
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	091b      	lsrs	r3, r3, #4
 8005c80:	f003 0201 	and.w	r2, r3, #1
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d017      	beq.n	8005cd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	2203      	movs	r2, #3
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d123      	bne.n	8005d26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	08da      	lsrs	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3208      	adds	r2, #8
 8005ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	220f      	movs	r2, #15
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	08da      	lsrs	r2, r3, #3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3208      	adds	r2, #8
 8005d20:	69b9      	ldr	r1, [r7, #24]
 8005d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	2203      	movs	r2, #3
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 0203 	and.w	r2, r3, #3
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80e0 	beq.w	8005f28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d68:	4b2f      	ldr	r3, [pc, #188]	@ (8005e28 <HAL_GPIO_Init+0x238>)
 8005d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e28 <HAL_GPIO_Init+0x238>)
 8005d70:	f043 0302 	orr.w	r3, r3, #2
 8005d74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d78:	4b2b      	ldr	r3, [pc, #172]	@ (8005e28 <HAL_GPIO_Init+0x238>)
 8005d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d86:	4a29      	ldr	r2, [pc, #164]	@ (8005e2c <HAL_GPIO_Init+0x23c>)
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	089b      	lsrs	r3, r3, #2
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	220f      	movs	r2, #15
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4013      	ands	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a20      	ldr	r2, [pc, #128]	@ (8005e30 <HAL_GPIO_Init+0x240>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d052      	beq.n	8005e58 <HAL_GPIO_Init+0x268>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e34 <HAL_GPIO_Init+0x244>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d031      	beq.n	8005e1e <HAL_GPIO_Init+0x22e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8005e38 <HAL_GPIO_Init+0x248>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d02b      	beq.n	8005e1a <HAL_GPIO_Init+0x22a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e3c <HAL_GPIO_Init+0x24c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d025      	beq.n	8005e16 <HAL_GPIO_Init+0x226>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e40 <HAL_GPIO_Init+0x250>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01f      	beq.n	8005e12 <HAL_GPIO_Init+0x222>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e44 <HAL_GPIO_Init+0x254>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d019      	beq.n	8005e0e <HAL_GPIO_Init+0x21e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e48 <HAL_GPIO_Init+0x258>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_GPIO_Init+0x21a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a19      	ldr	r2, [pc, #100]	@ (8005e4c <HAL_GPIO_Init+0x25c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00d      	beq.n	8005e06 <HAL_GPIO_Init+0x216>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a18      	ldr	r2, [pc, #96]	@ (8005e50 <HAL_GPIO_Init+0x260>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <HAL_GPIO_Init+0x212>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a17      	ldr	r2, [pc, #92]	@ (8005e54 <HAL_GPIO_Init+0x264>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d101      	bne.n	8005dfe <HAL_GPIO_Init+0x20e>
 8005dfa:	2309      	movs	r3, #9
 8005dfc:	e02d      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005dfe:	230a      	movs	r3, #10
 8005e00:	e02b      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005e02:	2308      	movs	r3, #8
 8005e04:	e029      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005e06:	2307      	movs	r3, #7
 8005e08:	e027      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005e0a:	2306      	movs	r3, #6
 8005e0c:	e025      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005e0e:	2305      	movs	r3, #5
 8005e10:	e023      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005e12:	2304      	movs	r3, #4
 8005e14:	e021      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005e16:	2303      	movs	r3, #3
 8005e18:	e01f      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e01d      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e01b      	b.n	8005e5a <HAL_GPIO_Init+0x26a>
 8005e22:	bf00      	nop
 8005e24:	58000080 	.word	0x58000080
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	58000400 	.word	0x58000400
 8005e30:	58020000 	.word	0x58020000
 8005e34:	58020400 	.word	0x58020400
 8005e38:	58020800 	.word	0x58020800
 8005e3c:	58020c00 	.word	0x58020c00
 8005e40:	58021000 	.word	0x58021000
 8005e44:	58021400 	.word	0x58021400
 8005e48:	58021800 	.word	0x58021800
 8005e4c:	58021c00 	.word	0x58021c00
 8005e50:	58022000 	.word	0x58022000
 8005e54:	58022400 	.word	0x58022400
 8005e58:	2300      	movs	r3, #0
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	f002 0203 	and.w	r2, r2, #3
 8005e60:	0092      	lsls	r2, r2, #2
 8005e62:	4093      	lsls	r3, r2
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e6a:	4938      	ldr	r1, [pc, #224]	@ (8005f4c <HAL_GPIO_Init+0x35c>)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	089b      	lsrs	r3, r3, #2
 8005e70:	3302      	adds	r3, #2
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4013      	ands	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ecc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f47f ae63 	bne.w	8005c04 <HAL_GPIO_Init+0x14>
  }
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	3724      	adds	r7, #36	@ 0x24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	58000400 	.word	0x58000400

08005f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	807b      	strh	r3, [r7, #2]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f60:	787b      	ldrb	r3, [r7, #1]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f66:	887a      	ldrh	r2, [r7, #2]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f6c:	e003      	b.n	8005f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f6e:	887b      	ldrh	r3, [r7, #2]
 8005f70:	041a      	lsls	r2, r3, #16
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	619a      	str	r2, [r3, #24]
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f94:	887a      	ldrh	r2, [r7, #2]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	041a      	lsls	r2, r3, #16
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	43d9      	mvns	r1, r3
 8005fa0:	887b      	ldrh	r3, [r7, #2]
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	619a      	str	r2, [r3, #24]
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af02      	add	r7, sp, #8
 8005fbc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0fe      	b.n	80061c6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fc f965 	bl	80022ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f005 fc46 	bl	800b880 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	7c1a      	ldrb	r2, [r3, #16]
 8005ffc:	f88d 2000 	strb.w	r2, [sp]
 8006000:	3304      	adds	r3, #4
 8006002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006004:	f005 fbca 	bl	800b79c <USB_CoreInit>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0d5      	b.n	80061c6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f005 fc3e 	bl	800b8a2 <USB_SetCurrentMode>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0c6      	b.n	80061c6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]
 800603c:	e04a      	b.n	80060d4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800603e:	7bfa      	ldrb	r2, [r7, #15]
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	3315      	adds	r3, #21
 800604e:	2201      	movs	r2, #1
 8006050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006052:	7bfa      	ldrb	r2, [r7, #15]
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	440b      	add	r3, r1
 8006060:	3314      	adds	r3, #20
 8006062:	7bfa      	ldrb	r2, [r7, #15]
 8006064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006066:	7bfa      	ldrb	r2, [r7, #15]
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	b298      	uxth	r0, r3
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	332e      	adds	r3, #46	@ 0x2e
 800607a:	4602      	mov	r2, r0
 800607c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	3318      	adds	r3, #24
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006092:	7bfa      	ldrb	r2, [r7, #15]
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	331c      	adds	r3, #28
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	3320      	adds	r3, #32
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060ba:	7bfa      	ldrb	r2, [r7, #15]
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	4613      	mov	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	3324      	adds	r3, #36	@ 0x24
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	3301      	adds	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	791b      	ldrb	r3, [r3, #4]
 80060d8:	7bfa      	ldrb	r2, [r7, #15]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d3af      	bcc.n	800603e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]
 80060e2:	e044      	b.n	800616e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060e4:	7bfa      	ldrb	r2, [r7, #15]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	4413      	add	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80060f6:	2200      	movs	r2, #0
 80060f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060fa:	7bfa      	ldrb	r2, [r7, #15]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800610c:	7bfa      	ldrb	r2, [r7, #15]
 800610e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006110:	7bfa      	ldrb	r2, [r7, #15]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006122:	2200      	movs	r2, #0
 8006124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006126:	7bfa      	ldrb	r2, [r7, #15]
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800613c:	7bfa      	ldrb	r2, [r7, #15]
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006152:	7bfa      	ldrb	r2, [r7, #15]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	3301      	adds	r3, #1
 800616c:	73fb      	strb	r3, [r7, #15]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	791b      	ldrb	r3, [r3, #4]
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	429a      	cmp	r2, r3
 8006176:	d3b5      	bcc.n	80060e4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	7c1a      	ldrb	r2, [r3, #16]
 8006180:	f88d 2000 	strb.w	r2, [sp]
 8006184:	3304      	adds	r3, #4
 8006186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006188:	f005 fbd8 	bl	800b93c <USB_DevInit>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e013      	b.n	80061c6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7b1b      	ldrb	r3, [r3, #12]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d102      	bne.n	80061ba <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f80b 	bl	80061d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4618      	mov	r0, r3
 80061c0:	f005 fd93 	bl	800bcea <USB_DevDisconnect>

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061fe:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_PCDEx_ActivateLPM+0x44>)
 8006200:	4313      	orrs	r3, r2
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	10000003 	.word	0x10000003

08006218 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006220:	4b19      	ldr	r3, [pc, #100]	@ (8006288 <HAL_PWREx_ConfigSupply+0x70>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b04      	cmp	r3, #4
 800622a:	d00a      	beq.n	8006242 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800622c:	4b16      	ldr	r3, [pc, #88]	@ (8006288 <HAL_PWREx_ConfigSupply+0x70>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	429a      	cmp	r2, r3
 8006238:	d001      	beq.n	800623e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e01f      	b.n	800627e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	e01d      	b.n	800627e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006242:	4b11      	ldr	r3, [pc, #68]	@ (8006288 <HAL_PWREx_ConfigSupply+0x70>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f023 0207 	bic.w	r2, r3, #7
 800624a:	490f      	ldr	r1, [pc, #60]	@ (8006288 <HAL_PWREx_ConfigSupply+0x70>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4313      	orrs	r3, r2
 8006250:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006252:	f7fc f921 	bl	8002498 <HAL_GetTick>
 8006256:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006258:	e009      	b.n	800626e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800625a:	f7fc f91d 	bl	8002498 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006268:	d901      	bls.n	800626e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e007      	b.n	800627e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800626e:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <HAL_PWREx_ConfigSupply+0x70>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627a:	d1ee      	bne.n	800625a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	58024800 	.word	0x58024800

0800628c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006290:	4b05      	ldr	r3, [pc, #20]	@ (80062a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	4a04      	ldr	r2, [pc, #16]	@ (80062a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800629a:	60d3      	str	r3, [r2, #12]
}
 800629c:	bf00      	nop
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	58024800 	.word	0x58024800

080062ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08c      	sub	sp, #48	@ 0x30
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f000 bc48 	b.w	8006b50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8088 	beq.w	80063de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ce:	4b99      	ldr	r3, [pc, #612]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062d8:	4b96      	ldr	r3, [pc, #600]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80062de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d007      	beq.n	80062f4 <HAL_RCC_OscConfig+0x48>
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	2b18      	cmp	r3, #24
 80062e8:	d111      	bne.n	800630e <HAL_RCC_OscConfig+0x62>
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d10c      	bne.n	800630e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f4:	4b8f      	ldr	r3, [pc, #572]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d06d      	beq.n	80063dc <HAL_RCC_OscConfig+0x130>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d169      	bne.n	80063dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f000 bc21 	b.w	8006b50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006316:	d106      	bne.n	8006326 <HAL_RCC_OscConfig+0x7a>
 8006318:	4b86      	ldr	r3, [pc, #536]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a85      	ldr	r2, [pc, #532]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800631e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e02e      	b.n	8006384 <HAL_RCC_OscConfig+0xd8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10c      	bne.n	8006348 <HAL_RCC_OscConfig+0x9c>
 800632e:	4b81      	ldr	r3, [pc, #516]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a80      	ldr	r2, [pc, #512]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	4b7e      	ldr	r3, [pc, #504]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7d      	ldr	r2, [pc, #500]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	e01d      	b.n	8006384 <HAL_RCC_OscConfig+0xd8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006350:	d10c      	bne.n	800636c <HAL_RCC_OscConfig+0xc0>
 8006352:	4b78      	ldr	r3, [pc, #480]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a77      	ldr	r2, [pc, #476]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	4b75      	ldr	r3, [pc, #468]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a74      	ldr	r2, [pc, #464]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e00b      	b.n	8006384 <HAL_RCC_OscConfig+0xd8>
 800636c:	4b71      	ldr	r3, [pc, #452]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a70      	ldr	r2, [pc, #448]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	4b6e      	ldr	r3, [pc, #440]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a6d      	ldr	r2, [pc, #436]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800637e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d013      	beq.n	80063b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fc f884 	bl	8002498 <HAL_GetTick>
 8006390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006394:	f7fc f880 	bl	8002498 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b64      	cmp	r3, #100	@ 0x64
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e3d4      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063a6:	4b63      	ldr	r3, [pc, #396]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0xe8>
 80063b2:	e014      	b.n	80063de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b4:	f7fc f870 	bl	8002498 <HAL_GetTick>
 80063b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063bc:	f7fc f86c 	bl	8002498 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b64      	cmp	r3, #100	@ 0x64
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e3c0      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063ce:	4b59      	ldr	r3, [pc, #356]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f0      	bne.n	80063bc <HAL_RCC_OscConfig+0x110>
 80063da:	e000      	b.n	80063de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80ca 	beq.w	8006580 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ec:	4b51      	ldr	r3, [pc, #324]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80063f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <HAL_RCC_OscConfig+0x166>
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	2b18      	cmp	r3, #24
 8006406:	d156      	bne.n	80064b6 <HAL_RCC_OscConfig+0x20a>
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d151      	bne.n	80064b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006412:	4b48      	ldr	r3, [pc, #288]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_RCC_OscConfig+0x17e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e392      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800642a:	4b42      	ldr	r3, [pc, #264]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f023 0219 	bic.w	r2, r3, #25
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	493f      	ldr	r1, [pc, #252]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006438:	4313      	orrs	r3, r2
 800643a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fc f82c 	bl	8002498 <HAL_GetTick>
 8006440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006444:	f7fc f828 	bl	8002498 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e37c      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006456:	4b37      	ldr	r3, [pc, #220]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0f0      	beq.n	8006444 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	f7fc f849 	bl	80024f8 <HAL_GetREVID>
 8006466:	4603      	mov	r3, r0
 8006468:	f241 0203 	movw	r2, #4099	@ 0x1003
 800646c:	4293      	cmp	r3, r2
 800646e:	d817      	bhi.n	80064a0 <HAL_RCC_OscConfig+0x1f4>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b40      	cmp	r3, #64	@ 0x40
 8006476:	d108      	bne.n	800648a <HAL_RCC_OscConfig+0x1de>
 8006478:	4b2e      	ldr	r3, [pc, #184]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006480:	4a2c      	ldr	r2, [pc, #176]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006486:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006488:	e07a      	b.n	8006580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800648a:	4b2a      	ldr	r3, [pc, #168]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	031b      	lsls	r3, r3, #12
 8006498:	4926      	ldr	r1, [pc, #152]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800649a:	4313      	orrs	r3, r2
 800649c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800649e:	e06f      	b.n	8006580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a0:	4b24      	ldr	r3, [pc, #144]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	061b      	lsls	r3, r3, #24
 80064ae:	4921      	ldr	r1, [pc, #132]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064b4:	e064      	b.n	8006580 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d047      	beq.n	800654e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064be:	4b1d      	ldr	r3, [pc, #116]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f023 0219 	bic.w	r2, r3, #25
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	491a      	ldr	r1, [pc, #104]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fb ffe2 	bl	8002498 <HAL_GetTick>
 80064d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d8:	f7fb ffde 	bl	8002498 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e332      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ea:	4b12      	ldr	r3, [pc, #72]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f6:	f7fb ffff 	bl	80024f8 <HAL_GetREVID>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006500:	4293      	cmp	r3, r2
 8006502:	d819      	bhi.n	8006538 <HAL_RCC_OscConfig+0x28c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b40      	cmp	r3, #64	@ 0x40
 800650a:	d108      	bne.n	800651e <HAL_RCC_OscConfig+0x272>
 800650c:	4b09      	ldr	r3, [pc, #36]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006514:	4a07      	ldr	r2, [pc, #28]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800651a:	6053      	str	r3, [r2, #4]
 800651c:	e030      	b.n	8006580 <HAL_RCC_OscConfig+0x2d4>
 800651e:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	031b      	lsls	r3, r3, #12
 800652c:	4901      	ldr	r1, [pc, #4]	@ (8006534 <HAL_RCC_OscConfig+0x288>)
 800652e:	4313      	orrs	r3, r2
 8006530:	604b      	str	r3, [r1, #4]
 8006532:	e025      	b.n	8006580 <HAL_RCC_OscConfig+0x2d4>
 8006534:	58024400 	.word	0x58024400
 8006538:	4b9a      	ldr	r3, [pc, #616]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	061b      	lsls	r3, r3, #24
 8006546:	4997      	ldr	r1, [pc, #604]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006548:	4313      	orrs	r3, r2
 800654a:	604b      	str	r3, [r1, #4]
 800654c:	e018      	b.n	8006580 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800654e:	4b95      	ldr	r3, [pc, #596]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a94      	ldr	r2, [pc, #592]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006554:	f023 0301 	bic.w	r3, r3, #1
 8006558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655a:	f7fb ff9d 	bl	8002498 <HAL_GetTick>
 800655e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006562:	f7fb ff99 	bl	8002498 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e2ed      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006574:	4b8b      	ldr	r3, [pc, #556]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1f0      	bne.n	8006562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80a9 	beq.w	80066e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800658e:	4b85      	ldr	r3, [pc, #532]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006596:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006598:	4b82      	ldr	r3, [pc, #520]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800659a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d007      	beq.n	80065b4 <HAL_RCC_OscConfig+0x308>
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b18      	cmp	r3, #24
 80065a8:	d13a      	bne.n	8006620 <HAL_RCC_OscConfig+0x374>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d135      	bne.n	8006620 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065b4:	4b7b      	ldr	r3, [pc, #492]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_RCC_OscConfig+0x320>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	2b80      	cmp	r3, #128	@ 0x80
 80065c6:	d001      	beq.n	80065cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e2c1      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065cc:	f7fb ff94 	bl	80024f8 <HAL_GetREVID>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d817      	bhi.n	800660a <HAL_RCC_OscConfig+0x35e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d108      	bne.n	80065f4 <HAL_RCC_OscConfig+0x348>
 80065e2:	4b70      	ldr	r3, [pc, #448]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80065ea:	4a6e      	ldr	r2, [pc, #440]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80065ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065f2:	e075      	b.n	80066e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065f4:	4b6b      	ldr	r3, [pc, #428]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	069b      	lsls	r3, r3, #26
 8006602:	4968      	ldr	r1, [pc, #416]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006608:	e06a      	b.n	80066e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800660a:	4b66      	ldr	r3, [pc, #408]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	061b      	lsls	r3, r3, #24
 8006618:	4962      	ldr	r1, [pc, #392]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800661a:	4313      	orrs	r3, r2
 800661c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800661e:	e05f      	b.n	80066e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d042      	beq.n	80066ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006628:	4b5e      	ldr	r3, [pc, #376]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a5d      	ldr	r2, [pc, #372]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800662e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7fb ff30 	bl	8002498 <HAL_GetTick>
 8006638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800663c:	f7fb ff2c 	bl	8002498 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e280      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800664e:	4b55      	ldr	r3, [pc, #340]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800665a:	f7fb ff4d 	bl	80024f8 <HAL_GetREVID>
 800665e:	4603      	mov	r3, r0
 8006660:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006664:	4293      	cmp	r3, r2
 8006666:	d817      	bhi.n	8006698 <HAL_RCC_OscConfig+0x3ec>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	2b20      	cmp	r3, #32
 800666e:	d108      	bne.n	8006682 <HAL_RCC_OscConfig+0x3d6>
 8006670:	4b4c      	ldr	r3, [pc, #304]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006678:	4a4a      	ldr	r2, [pc, #296]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800667a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800667e:	6053      	str	r3, [r2, #4]
 8006680:	e02e      	b.n	80066e0 <HAL_RCC_OscConfig+0x434>
 8006682:	4b48      	ldr	r3, [pc, #288]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	069b      	lsls	r3, r3, #26
 8006690:	4944      	ldr	r1, [pc, #272]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006692:	4313      	orrs	r3, r2
 8006694:	604b      	str	r3, [r1, #4]
 8006696:	e023      	b.n	80066e0 <HAL_RCC_OscConfig+0x434>
 8006698:	4b42      	ldr	r3, [pc, #264]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	061b      	lsls	r3, r3, #24
 80066a6:	493f      	ldr	r1, [pc, #252]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60cb      	str	r3, [r1, #12]
 80066ac:	e018      	b.n	80066e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80066ae:	4b3d      	ldr	r3, [pc, #244]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a3c      	ldr	r2, [pc, #240]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ba:	f7fb feed 	bl	8002498 <HAL_GetTick>
 80066be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066c2:	f7fb fee9 	bl	8002498 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e23d      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066d4:	4b33      	ldr	r3, [pc, #204]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f0      	bne.n	80066c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d036      	beq.n	800675a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d019      	beq.n	8006728 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f4:	4b2b      	ldr	r3, [pc, #172]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80066f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f8:	4a2a      	ldr	r2, [pc, #168]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006700:	f7fb feca 	bl	8002498 <HAL_GetTick>
 8006704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006708:	f7fb fec6 	bl	8002498 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e21a      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800671a:	4b22      	ldr	r3, [pc, #136]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800671c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x45c>
 8006726:	e018      	b.n	800675a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006728:	4b1e      	ldr	r3, [pc, #120]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800672a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800672c:	4a1d      	ldr	r2, [pc, #116]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fb feb0 	bl	8002498 <HAL_GetTick>
 8006738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800673c:	f7fb feac 	bl	8002498 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e200      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800674e:	4b15      	ldr	r3, [pc, #84]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d039      	beq.n	80067da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01c      	beq.n	80067a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800676e:	4b0d      	ldr	r3, [pc, #52]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a0c      	ldr	r2, [pc, #48]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800677a:	f7fb fe8d 	bl	8002498 <HAL_GetTick>
 800677e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006782:	f7fb fe89 	bl	8002498 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e1dd      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006794:	4b03      	ldr	r3, [pc, #12]	@ (80067a4 <HAL_RCC_OscConfig+0x4f8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f0      	beq.n	8006782 <HAL_RCC_OscConfig+0x4d6>
 80067a0:	e01b      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
 80067a2:	bf00      	nop
 80067a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067a8:	4b9b      	ldr	r3, [pc, #620]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a9a      	ldr	r2, [pc, #616]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80067ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067b4:	f7fb fe70 	bl	8002498 <HAL_GetTick>
 80067b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067bc:	f7fb fe6c 	bl	8002498 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e1c0      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067ce:	4b92      	ldr	r3, [pc, #584]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8081 	beq.w	80068ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067e8:	4b8c      	ldr	r3, [pc, #560]	@ (8006a1c <HAL_RCC_OscConfig+0x770>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a8b      	ldr	r2, [pc, #556]	@ (8006a1c <HAL_RCC_OscConfig+0x770>)
 80067ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067f4:	f7fb fe50 	bl	8002498 <HAL_GetTick>
 80067f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067fc:	f7fb fe4c 	bl	8002498 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b64      	cmp	r3, #100	@ 0x64
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e1a0      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800680e:	4b83      	ldr	r3, [pc, #524]	@ (8006a1c <HAL_RCC_OscConfig+0x770>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0f0      	beq.n	80067fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d106      	bne.n	8006830 <HAL_RCC_OscConfig+0x584>
 8006822:	4b7d      	ldr	r3, [pc, #500]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	4a7c      	ldr	r2, [pc, #496]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006828:	f043 0301 	orr.w	r3, r3, #1
 800682c:	6713      	str	r3, [r2, #112]	@ 0x70
 800682e:	e02d      	b.n	800688c <HAL_RCC_OscConfig+0x5e0>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10c      	bne.n	8006852 <HAL_RCC_OscConfig+0x5a6>
 8006838:	4b77      	ldr	r3, [pc, #476]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683c:	4a76      	ldr	r2, [pc, #472]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	6713      	str	r3, [r2, #112]	@ 0x70
 8006844:	4b74      	ldr	r3, [pc, #464]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006848:	4a73      	ldr	r2, [pc, #460]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 800684a:	f023 0304 	bic.w	r3, r3, #4
 800684e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006850:	e01c      	b.n	800688c <HAL_RCC_OscConfig+0x5e0>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2b05      	cmp	r3, #5
 8006858:	d10c      	bne.n	8006874 <HAL_RCC_OscConfig+0x5c8>
 800685a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 800685c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685e:	4a6e      	ldr	r2, [pc, #440]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006860:	f043 0304 	orr.w	r3, r3, #4
 8006864:	6713      	str	r3, [r2, #112]	@ 0x70
 8006866:	4b6c      	ldr	r3, [pc, #432]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686a:	4a6b      	ldr	r2, [pc, #428]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6713      	str	r3, [r2, #112]	@ 0x70
 8006872:	e00b      	b.n	800688c <HAL_RCC_OscConfig+0x5e0>
 8006874:	4b68      	ldr	r3, [pc, #416]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006878:	4a67      	ldr	r2, [pc, #412]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 800687a:	f023 0301 	bic.w	r3, r3, #1
 800687e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006880:	4b65      	ldr	r3, [pc, #404]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006884:	4a64      	ldr	r2, [pc, #400]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006886:	f023 0304 	bic.w	r3, r3, #4
 800688a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d015      	beq.n	80068c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006894:	f7fb fe00 	bl	8002498 <HAL_GetTick>
 8006898:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800689a:	e00a      	b.n	80068b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800689c:	f7fb fdfc 	bl	8002498 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e14e      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b2:	4b59      	ldr	r3, [pc, #356]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0ee      	beq.n	800689c <HAL_RCC_OscConfig+0x5f0>
 80068be:	e014      	b.n	80068ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fb fdea 	bl	8002498 <HAL_GetTick>
 80068c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068c6:	e00a      	b.n	80068de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c8:	f7fb fde6 	bl	8002498 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e138      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068de:	4b4e      	ldr	r3, [pc, #312]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1ee      	bne.n	80068c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 812d 	beq.w	8006b4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068f4:	4b48      	ldr	r3, [pc, #288]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068fc:	2b18      	cmp	r3, #24
 80068fe:	f000 80bd 	beq.w	8006a7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	2b02      	cmp	r3, #2
 8006908:	f040 809e 	bne.w	8006a48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800690c:	4b42      	ldr	r3, [pc, #264]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a41      	ldr	r2, [pc, #260]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006918:	f7fb fdbe 	bl	8002498 <HAL_GetTick>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006920:	f7fb fdba 	bl	8002498 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e10e      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006932:	4b39      	ldr	r3, [pc, #228]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f0      	bne.n	8006920 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800693e:	4b36      	ldr	r3, [pc, #216]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006942:	4b37      	ldr	r3, [pc, #220]	@ (8006a20 <HAL_RCC_OscConfig+0x774>)
 8006944:	4013      	ands	r3, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800694e:	0112      	lsls	r2, r2, #4
 8006950:	430a      	orrs	r2, r1
 8006952:	4931      	ldr	r1, [pc, #196]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006954:	4313      	orrs	r3, r2
 8006956:	628b      	str	r3, [r1, #40]	@ 0x28
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695c:	3b01      	subs	r3, #1
 800695e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006966:	3b01      	subs	r3, #1
 8006968:	025b      	lsls	r3, r3, #9
 800696a:	b29b      	uxth	r3, r3
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006972:	3b01      	subs	r3, #1
 8006974:	041b      	lsls	r3, r3, #16
 8006976:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006980:	3b01      	subs	r3, #1
 8006982:	061b      	lsls	r3, r3, #24
 8006984:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006988:	4923      	ldr	r1, [pc, #140]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 800698a:	4313      	orrs	r3, r2
 800698c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800698e:	4b22      	ldr	r3, [pc, #136]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	4a21      	ldr	r2, [pc, #132]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800699a:	4b1f      	ldr	r3, [pc, #124]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 800699c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800699e:	4b21      	ldr	r3, [pc, #132]	@ (8006a24 <HAL_RCC_OscConfig+0x778>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069a6:	00d2      	lsls	r2, r2, #3
 80069a8:	491b      	ldr	r1, [pc, #108]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b2:	f023 020c 	bic.w	r2, r3, #12
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	4917      	ldr	r1, [pc, #92]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069c0:	4b15      	ldr	r3, [pc, #84]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	f023 0202 	bic.w	r2, r3, #2
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069cc:	4912      	ldr	r1, [pc, #72]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069d2:	4b11      	ldr	r3, [pc, #68]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d6:	4a10      	ldr	r2, [pc, #64]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069de:	4b0e      	ldr	r3, [pc, #56]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80069f6:	4b08      	ldr	r3, [pc, #32]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	4a07      	ldr	r2, [pc, #28]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 80069fc:	f043 0301 	orr.w	r3, r3, #1
 8006a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a02:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a04      	ldr	r2, [pc, #16]	@ (8006a18 <HAL_RCC_OscConfig+0x76c>)
 8006a08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0e:	f7fb fd43 	bl	8002498 <HAL_GetTick>
 8006a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a14:	e011      	b.n	8006a3a <HAL_RCC_OscConfig+0x78e>
 8006a16:	bf00      	nop
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	58024800 	.word	0x58024800
 8006a20:	fffffc0c 	.word	0xfffffc0c
 8006a24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a28:	f7fb fd36 	bl	8002498 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e08a      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a3a:	4b47      	ldr	r3, [pc, #284]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f0      	beq.n	8006a28 <HAL_RCC_OscConfig+0x77c>
 8006a46:	e082      	b.n	8006b4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a48:	4b43      	ldr	r3, [pc, #268]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a42      	ldr	r2, [pc, #264]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a54:	f7fb fd20 	bl	8002498 <HAL_GetTick>
 8006a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a5c:	f7fb fd1c 	bl	8002498 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e070      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f0      	bne.n	8006a5c <HAL_RCC_OscConfig+0x7b0>
 8006a7a:	e068      	b.n	8006b4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a7c:	4b36      	ldr	r3, [pc, #216]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a82:	4b35      	ldr	r3, [pc, #212]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d031      	beq.n	8006af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f003 0203 	and.w	r2, r3, #3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d12a      	bne.n	8006af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	091b      	lsrs	r3, r3, #4
 8006aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d122      	bne.n	8006af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d11a      	bne.n	8006af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	0a5b      	lsrs	r3, r3, #9
 8006ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d111      	bne.n	8006af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	0c1b      	lsrs	r3, r3, #16
 8006ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d108      	bne.n	8006af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	0e1b      	lsrs	r3, r3, #24
 8006ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d001      	beq.n	8006af8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e02b      	b.n	8006b50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006af8:	4b17      	ldr	r3, [pc, #92]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afc:	08db      	lsrs	r3, r3, #3
 8006afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d01f      	beq.n	8006b4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b0e:	4b12      	ldr	r3, [pc, #72]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b12:	4a11      	ldr	r2, [pc, #68]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006b14:	f023 0301 	bic.w	r3, r3, #1
 8006b18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b1a:	f7fb fcbd 	bl	8002498 <HAL_GetTick>
 8006b1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b20:	bf00      	nop
 8006b22:	f7fb fcb9 	bl	8002498 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d0f9      	beq.n	8006b22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b32:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <HAL_RCC_OscConfig+0x8b0>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b3a:	00d2      	lsls	r2, r2, #3
 8006b3c:	4906      	ldr	r1, [pc, #24]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006b42:	4b05      	ldr	r3, [pc, #20]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b46:	4a04      	ldr	r2, [pc, #16]	@ (8006b58 <HAL_RCC_OscConfig+0x8ac>)
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3730      	adds	r7, #48	@ 0x30
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	ffff0007 	.word	0xffff0007

08006b60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e19c      	b.n	8006eae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b74:	4b8a      	ldr	r3, [pc, #552]	@ (8006da0 <HAL_RCC_ClockConfig+0x240>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d910      	bls.n	8006ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b82:	4b87      	ldr	r3, [pc, #540]	@ (8006da0 <HAL_RCC_ClockConfig+0x240>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f023 020f 	bic.w	r2, r3, #15
 8006b8a:	4985      	ldr	r1, [pc, #532]	@ (8006da0 <HAL_RCC_ClockConfig+0x240>)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b92:	4b83      	ldr	r3, [pc, #524]	@ (8006da0 <HAL_RCC_ClockConfig+0x240>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e184      	b.n	8006eae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d010      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d908      	bls.n	8006bd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bc0:	4b78      	ldr	r3, [pc, #480]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	4975      	ldr	r1, [pc, #468]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d010      	beq.n	8006c00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695a      	ldr	r2, [r3, #20]
 8006be2:	4b70      	ldr	r3, [pc, #448]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d908      	bls.n	8006c00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bee:	4b6d      	ldr	r3, [pc, #436]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	496a      	ldr	r1, [pc, #424]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d010      	beq.n	8006c2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	4b64      	ldr	r3, [pc, #400]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d908      	bls.n	8006c2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c1c:	4b61      	ldr	r3, [pc, #388]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	495e      	ldr	r1, [pc, #376]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d010      	beq.n	8006c5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69da      	ldr	r2, [r3, #28]
 8006c3e:	4b59      	ldr	r3, [pc, #356]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d908      	bls.n	8006c5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c4a:	4b56      	ldr	r3, [pc, #344]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	4953      	ldr	r1, [pc, #332]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d010      	beq.n	8006c8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d908      	bls.n	8006c8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c78:	4b4a      	ldr	r3, [pc, #296]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	f023 020f 	bic.w	r2, r3, #15
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	4947      	ldr	r1, [pc, #284]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d055      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c96:	4b43      	ldr	r3, [pc, #268]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	4940      	ldr	r1, [pc, #256]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d121      	bne.n	8006d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0f6      	b.n	8006eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d107      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cc8:	4b36      	ldr	r3, [pc, #216]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d115      	bne.n	8006d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0ea      	b.n	8006eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ce0:	4b30      	ldr	r3, [pc, #192]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0de      	b.n	8006eae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0d6      	b.n	8006eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d00:	4b28      	ldr	r3, [pc, #160]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f023 0207 	bic.w	r2, r3, #7
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	4925      	ldr	r1, [pc, #148]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d12:	f7fb fbc1 	bl	8002498 <HAL_GetTick>
 8006d16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d18:	e00a      	b.n	8006d30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d1a:	f7fb fbbd 	bl	8002498 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e0be      	b.n	8006eae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d30:	4b1c      	ldr	r3, [pc, #112]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d1eb      	bne.n	8006d1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	4b14      	ldr	r3, [pc, #80]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d208      	bcs.n	8006d70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d5e:	4b11      	ldr	r3, [pc, #68]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f023 020f 	bic.w	r2, r3, #15
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	490e      	ldr	r1, [pc, #56]	@ (8006da4 <HAL_RCC_ClockConfig+0x244>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d70:	4b0b      	ldr	r3, [pc, #44]	@ (8006da0 <HAL_RCC_ClockConfig+0x240>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d214      	bcs.n	8006da8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7e:	4b08      	ldr	r3, [pc, #32]	@ (8006da0 <HAL_RCC_ClockConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f023 020f 	bic.w	r2, r3, #15
 8006d86:	4906      	ldr	r1, [pc, #24]	@ (8006da0 <HAL_RCC_ClockConfig+0x240>)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d8e:	4b04      	ldr	r3, [pc, #16]	@ (8006da0 <HAL_RCC_ClockConfig+0x240>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d005      	beq.n	8006da8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e086      	b.n	8006eae <HAL_RCC_ClockConfig+0x34e>
 8006da0:	52002000 	.word	0x52002000
 8006da4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d010      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d208      	bcs.n	8006dd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	4939      	ldr	r1, [pc, #228]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d010      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	4b34      	ldr	r3, [pc, #208]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d208      	bcs.n	8006e04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006df2:	4b31      	ldr	r3, [pc, #196]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	492e      	ldr	r1, [pc, #184]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0310 	and.w	r3, r3, #16
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d010      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699a      	ldr	r2, [r3, #24]
 8006e14:	4b28      	ldr	r3, [pc, #160]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d208      	bcs.n	8006e32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e20:	4b25      	ldr	r3, [pc, #148]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	4922      	ldr	r1, [pc, #136]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d010      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69da      	ldr	r2, [r3, #28]
 8006e42:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d208      	bcs.n	8006e60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	4917      	ldr	r1, [pc, #92]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e60:	f000 f834 	bl	8006ecc <HAL_RCC_GetSysClockFreq>
 8006e64:	4602      	mov	r2, r0
 8006e66:	4b14      	ldr	r3, [pc, #80]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	0a1b      	lsrs	r3, r3, #8
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	4912      	ldr	r1, [pc, #72]	@ (8006ebc <HAL_RCC_ClockConfig+0x35c>)
 8006e72:	5ccb      	ldrb	r3, [r1, r3]
 8006e74:	f003 031f 	and.w	r3, r3, #31
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <HAL_RCC_ClockConfig+0x358>)
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	4a0d      	ldr	r2, [pc, #52]	@ (8006ebc <HAL_RCC_ClockConfig+0x35c>)
 8006e88:	5cd3      	ldrb	r3, [r2, r3]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
 8006e94:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec0 <HAL_RCC_ClockConfig+0x360>)
 8006e96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e98:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec4 <HAL_RCC_ClockConfig+0x364>)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec8 <HAL_RCC_ClockConfig+0x368>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fa feae 	bl	8001c04 <HAL_InitTick>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	080190a4 	.word	0x080190a4
 8006ec0:	24000008 	.word	0x24000008
 8006ec4:	24000004 	.word	0x24000004
 8006ec8:	2400000c 	.word	0x2400000c

08006ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	@ 0x24
 8006ed0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ed2:	4bb3      	ldr	r3, [pc, #716]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eda:	2b18      	cmp	r3, #24
 8006edc:	f200 8155 	bhi.w	800718a <HAL_RCC_GetSysClockFreq+0x2be>
 8006ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006f4d 	.word	0x08006f4d
 8006eec:	0800718b 	.word	0x0800718b
 8006ef0:	0800718b 	.word	0x0800718b
 8006ef4:	0800718b 	.word	0x0800718b
 8006ef8:	0800718b 	.word	0x0800718b
 8006efc:	0800718b 	.word	0x0800718b
 8006f00:	0800718b 	.word	0x0800718b
 8006f04:	0800718b 	.word	0x0800718b
 8006f08:	08006f73 	.word	0x08006f73
 8006f0c:	0800718b 	.word	0x0800718b
 8006f10:	0800718b 	.word	0x0800718b
 8006f14:	0800718b 	.word	0x0800718b
 8006f18:	0800718b 	.word	0x0800718b
 8006f1c:	0800718b 	.word	0x0800718b
 8006f20:	0800718b 	.word	0x0800718b
 8006f24:	0800718b 	.word	0x0800718b
 8006f28:	08006f79 	.word	0x08006f79
 8006f2c:	0800718b 	.word	0x0800718b
 8006f30:	0800718b 	.word	0x0800718b
 8006f34:	0800718b 	.word	0x0800718b
 8006f38:	0800718b 	.word	0x0800718b
 8006f3c:	0800718b 	.word	0x0800718b
 8006f40:	0800718b 	.word	0x0800718b
 8006f44:	0800718b 	.word	0x0800718b
 8006f48:	08006f7f 	.word	0x08006f7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f4c:	4b94      	ldr	r3, [pc, #592]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f58:	4b91      	ldr	r3, [pc, #580]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	4a90      	ldr	r2, [pc, #576]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f6a:	e111      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f6c:	4b8d      	ldr	r3, [pc, #564]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f6e:	61bb      	str	r3, [r7, #24]
      break;
 8006f70:	e10e      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006f72:	4b8d      	ldr	r3, [pc, #564]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f74:	61bb      	str	r3, [r7, #24]
      break;
 8006f76:	e10b      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f78:	4b8c      	ldr	r3, [pc, #560]	@ (80071ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f7a:	61bb      	str	r3, [r7, #24]
      break;
 8006f7c:	e108      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f7e:	4b88      	ldr	r3, [pc, #544]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f82:	f003 0303 	and.w	r3, r3, #3
 8006f86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f88:	4b85      	ldr	r3, [pc, #532]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8c:	091b      	lsrs	r3, r3, #4
 8006f8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f94:	4b82      	ldr	r3, [pc, #520]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f9e:	4b80      	ldr	r3, [pc, #512]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa2:	08db      	lsrs	r3, r3, #3
 8006fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80e1 	beq.w	8007184 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	f000 8083 	beq.w	80070d0 <HAL_RCC_GetSysClockFreq+0x204>
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	f200 80a1 	bhi.w	8007114 <HAL_RCC_GetSysClockFreq+0x248>
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x114>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d056      	beq.n	800708c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006fde:	e099      	b.n	8007114 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d02d      	beq.n	8007048 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fec:	4b6c      	ldr	r3, [pc, #432]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	08db      	lsrs	r3, r3, #3
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	4a6b      	ldr	r2, [pc, #428]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007016:	4b62      	ldr	r3, [pc, #392]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007026:	ed97 6a02 	vldr	s12, [r7, #8]
 800702a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80071b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800702e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800703a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007042:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007046:	e087      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80071b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b51      	ldr	r3, [pc, #324]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a02 	vldr	s12, [r7, #8]
 800706e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80071b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800708a:	e065      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80071b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800709a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709e:	4b40      	ldr	r3, [pc, #256]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80070b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80071b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070ce:	e043      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80071bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80070de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e2:	4b2f      	ldr	r3, [pc, #188]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80071b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007112:	e021      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80071b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007126:	4b1e      	ldr	r3, [pc, #120]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007136:	ed97 6a02 	vldr	s12, [r7, #8]
 800713a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80071b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800713e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007156:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007158:	4b11      	ldr	r3, [pc, #68]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800715a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715c:	0a5b      	lsrs	r3, r3, #9
 800715e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007162:	3301      	adds	r3, #1
 8007164:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007170:	edd7 6a07 	vldr	s13, [r7, #28]
 8007174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717c:	ee17 3a90 	vmov	r3, s15
 8007180:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007182:	e005      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	61bb      	str	r3, [r7, #24]
      break;
 8007188:	e002      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800718a:	4b07      	ldr	r3, [pc, #28]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800718c:	61bb      	str	r3, [r7, #24]
      break;
 800718e:	bf00      	nop
  }

  return sysclockfreq;
 8007190:	69bb      	ldr	r3, [r7, #24]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3724      	adds	r7, #36	@ 0x24
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	58024400 	.word	0x58024400
 80071a4:	03d09000 	.word	0x03d09000
 80071a8:	003d0900 	.word	0x003d0900
 80071ac:	007a1200 	.word	0x007a1200
 80071b0:	46000000 	.word	0x46000000
 80071b4:	4c742400 	.word	0x4c742400
 80071b8:	4a742400 	.word	0x4a742400
 80071bc:	4af42400 	.word	0x4af42400

080071c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071c6:	f7ff fe81 	bl	8006ecc <HAL_RCC_GetSysClockFreq>
 80071ca:	4602      	mov	r2, r0
 80071cc:	4b10      	ldr	r3, [pc, #64]	@ (8007210 <HAL_RCC_GetHCLKFreq+0x50>)
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	0a1b      	lsrs	r3, r3, #8
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	490f      	ldr	r1, [pc, #60]	@ (8007214 <HAL_RCC_GetHCLKFreq+0x54>)
 80071d8:	5ccb      	ldrb	r3, [r1, r3]
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	fa22 f303 	lsr.w	r3, r2, r3
 80071e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007210 <HAL_RCC_GetHCLKFreq+0x50>)
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	4a09      	ldr	r2, [pc, #36]	@ (8007214 <HAL_RCC_GetHCLKFreq+0x54>)
 80071ee:	5cd3      	ldrb	r3, [r2, r3]
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	fa22 f303 	lsr.w	r3, r2, r3
 80071fa:	4a07      	ldr	r2, [pc, #28]	@ (8007218 <HAL_RCC_GetHCLKFreq+0x58>)
 80071fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071fe:	4a07      	ldr	r2, [pc, #28]	@ (800721c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007204:	4b04      	ldr	r3, [pc, #16]	@ (8007218 <HAL_RCC_GetHCLKFreq+0x58>)
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	58024400 	.word	0x58024400
 8007214:	080190a4 	.word	0x080190a4
 8007218:	24000008 	.word	0x24000008
 800721c:	24000004 	.word	0x24000004

08007220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007224:	f7ff ffcc 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 8007228:	4602      	mov	r2, r0
 800722a:	4b06      	ldr	r3, [pc, #24]	@ (8007244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	091b      	lsrs	r3, r3, #4
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	4904      	ldr	r1, [pc, #16]	@ (8007248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007236:	5ccb      	ldrb	r3, [r1, r3]
 8007238:	f003 031f 	and.w	r3, r3, #31
 800723c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007240:	4618      	mov	r0, r3
 8007242:	bd80      	pop	{r7, pc}
 8007244:	58024400 	.word	0x58024400
 8007248:	080190a4 	.word	0x080190a4

0800724c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007250:	f7ff ffb6 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 8007254:	4602      	mov	r2, r0
 8007256:	4b06      	ldr	r3, [pc, #24]	@ (8007270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	0a1b      	lsrs	r3, r3, #8
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	4904      	ldr	r1, [pc, #16]	@ (8007274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007262:	5ccb      	ldrb	r3, [r1, r3]
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800726c:	4618      	mov	r0, r3
 800726e:	bd80      	pop	{r7, pc}
 8007270:	58024400 	.word	0x58024400
 8007274:	080190a4 	.word	0x080190a4

08007278 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	223f      	movs	r2, #63	@ 0x3f
 8007286:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007288:	4b1a      	ldr	r3, [pc, #104]	@ (80072f4 <HAL_RCC_GetClockConfig+0x7c>)
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0207 	and.w	r2, r3, #7
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007294:	4b17      	ldr	r3, [pc, #92]	@ (80072f4 <HAL_RCC_GetClockConfig+0x7c>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80072a0:	4b14      	ldr	r3, [pc, #80]	@ (80072f4 <HAL_RCC_GetClockConfig+0x7c>)
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f003 020f 	and.w	r2, r3, #15
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80072ac:	4b11      	ldr	r3, [pc, #68]	@ (80072f4 <HAL_RCC_GetClockConfig+0x7c>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80072b8:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <HAL_RCC_GetClockConfig+0x7c>)
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80072c4:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <HAL_RCC_GetClockConfig+0x7c>)
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80072d0:	4b08      	ldr	r3, [pc, #32]	@ (80072f4 <HAL_RCC_GetClockConfig+0x7c>)
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072dc:	4b06      	ldr	r3, [pc, #24]	@ (80072f8 <HAL_RCC_GetClockConfig+0x80>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	601a      	str	r2, [r3, #0]
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	58024400 	.word	0x58024400
 80072f8:	52002000 	.word	0x52002000

080072fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007300:	b0ca      	sub	sp, #296	@ 0x128
 8007302:	af00      	add	r7, sp, #0
 8007304:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007308:	2300      	movs	r3, #0
 800730a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800730e:	2300      	movs	r3, #0
 8007310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007320:	2500      	movs	r5, #0
 8007322:	ea54 0305 	orrs.w	r3, r4, r5
 8007326:	d049      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800732e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007332:	d02f      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007334:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007338:	d828      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800733a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800733e:	d01a      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007340:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007344:	d822      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800734a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800734e:	d007      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007350:	e01c      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007352:	4bb8      	ldr	r3, [pc, #736]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007356:	4ab7      	ldr	r2, [pc, #732]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800735c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800735e:	e01a      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007364:	3308      	adds	r3, #8
 8007366:	2102      	movs	r1, #2
 8007368:	4618      	mov	r0, r3
 800736a:	f001 fc8f 	bl	8008c8c <RCCEx_PLL2_Config>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007374:	e00f      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737a:	3328      	adds	r3, #40	@ 0x28
 800737c:	2102      	movs	r1, #2
 800737e:	4618      	mov	r0, r3
 8007380:	f001 fd36 	bl	8008df0 <RCCEx_PLL3_Config>
 8007384:	4603      	mov	r3, r0
 8007386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800738a:	e004      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007392:	e000      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800739e:	4ba5      	ldr	r3, [pc, #660]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073ac:	4aa1      	ldr	r2, [pc, #644]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ae:	430b      	orrs	r3, r1
 80073b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80073b2:	e003      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80073c8:	f04f 0900 	mov.w	r9, #0
 80073cc:	ea58 0309 	orrs.w	r3, r8, r9
 80073d0:	d047      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d82a      	bhi.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80073dc:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	080073f9 	.word	0x080073f9
 80073e8:	08007407 	.word	0x08007407
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	0800743b 	.word	0x0800743b
 80073f4:	0800743b 	.word	0x0800743b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f8:	4b8e      	ldr	r3, [pc, #568]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	4a8d      	ldr	r2, [pc, #564]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007404:	e01a      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740a:	3308      	adds	r3, #8
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f001 fc3c 	bl	8008c8c <RCCEx_PLL2_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800741a:	e00f      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007420:	3328      	adds	r3, #40	@ 0x28
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f001 fce3 	bl	8008df0 <RCCEx_PLL3_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007430:	e004      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007438:	e000      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800743a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007444:	4b7b      	ldr	r3, [pc, #492]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007448:	f023 0107 	bic.w	r1, r3, #7
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007452:	4a78      	ldr	r2, [pc, #480]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007454:	430b      	orrs	r3, r1
 8007456:	6513      	str	r3, [r2, #80]	@ 0x50
 8007458:	e003      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800746e:	f04f 0b00 	mov.w	fp, #0
 8007472:	ea5a 030b 	orrs.w	r3, sl, fp
 8007476:	d04c      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800747e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007482:	d030      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007488:	d829      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800748a:	2bc0      	cmp	r3, #192	@ 0xc0
 800748c:	d02d      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800748e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007490:	d825      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007492:	2b80      	cmp	r3, #128	@ 0x80
 8007494:	d018      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007496:	2b80      	cmp	r3, #128	@ 0x80
 8007498:	d821      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800749e:	2b40      	cmp	r3, #64	@ 0x40
 80074a0:	d007      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80074a2:	e01c      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a4:	4b63      	ldr	r3, [pc, #396]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	4a62      	ldr	r2, [pc, #392]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074b0:	e01c      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b6:	3308      	adds	r3, #8
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 fbe6 	bl	8008c8c <RCCEx_PLL2_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074c6:	e011      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	3328      	adds	r3, #40	@ 0x28
 80074ce:	2100      	movs	r1, #0
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 fc8d 	bl	8008df0 <RCCEx_PLL3_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074dc:	e006      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074e4:	e002      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80074fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007502:	4a4c      	ldr	r2, [pc, #304]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007504:	430b      	orrs	r3, r1
 8007506:	6513      	str	r3, [r2, #80]	@ 0x50
 8007508:	e003      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800750e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800751e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007522:	2300      	movs	r3, #0
 8007524:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007528:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800752c:	460b      	mov	r3, r1
 800752e:	4313      	orrs	r3, r2
 8007530:	d053      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800753a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800753e:	d035      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007540:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007544:	d82e      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007546:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800754a:	d031      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800754c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007550:	d828      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007556:	d01a      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800755c:	d822      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007562:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007566:	d007      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007568:	e01c      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800756a:	4b32      	ldr	r3, [pc, #200]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800756c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756e:	4a31      	ldr	r2, [pc, #196]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007576:	e01c      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757c:	3308      	adds	r3, #8
 800757e:	2100      	movs	r1, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f001 fb83 	bl	8008c8c <RCCEx_PLL2_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800758c:	e011      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007592:	3328      	adds	r3, #40	@ 0x28
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f001 fc2a 	bl	8008df0 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075a2:	e006      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075aa:	e002      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075ac:	bf00      	nop
 80075ae:	e000      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80075d0:	e003      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80075e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80075f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80075f4:	460b      	mov	r3, r1
 80075f6:	4313      	orrs	r3, r2
 80075f8:	d056      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007606:	d038      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007608:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800760c:	d831      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800760e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007612:	d034      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007614:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007618:	d82b      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800761a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800761e:	d01d      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007620:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007624:	d825      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800762a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800762e:	d00a      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007630:	e01f      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007632:	bf00      	nop
 8007634:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007638:	4ba2      	ldr	r3, [pc, #648]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800763a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763c:	4aa1      	ldr	r2, [pc, #644]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800763e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007644:	e01c      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764a:	3308      	adds	r3, #8
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f001 fb1c 	bl	8008c8c <RCCEx_PLL2_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800765a:	e011      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007660:	3328      	adds	r3, #40	@ 0x28
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f001 fbc3 	bl	8008df0 <RCCEx_PLL3_Config>
 800766a:	4603      	mov	r3, r0
 800766c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007670:	e006      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007678:	e002      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800767e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007688:	4b8e      	ldr	r3, [pc, #568]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800768a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007698:	4a8a      	ldr	r2, [pc, #552]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800769a:	430b      	orrs	r3, r1
 800769c:	6593      	str	r3, [r2, #88]	@ 0x58
 800769e:	e003      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80076b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076b8:	2300      	movs	r3, #0
 80076ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80076c2:	460b      	mov	r3, r1
 80076c4:	4313      	orrs	r3, r2
 80076c6:	d03a      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80076c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ce:	2b30      	cmp	r3, #48	@ 0x30
 80076d0:	d01f      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80076d2:	2b30      	cmp	r3, #48	@ 0x30
 80076d4:	d819      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d00c      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80076da:	2b20      	cmp	r3, #32
 80076dc:	d815      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d019      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d111      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e6:	4b77      	ldr	r3, [pc, #476]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ea:	4a76      	ldr	r2, [pc, #472]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80076f2:	e011      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f8:	3308      	adds	r3, #8
 80076fa:	2102      	movs	r1, #2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fac5 	bl	8008c8c <RCCEx_PLL2_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007708:	e006      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007710:	e002      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007712:	bf00      	nop
 8007714:	e000      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007720:	4b68      	ldr	r3, [pc, #416]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007724:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800772e:	4a65      	ldr	r2, [pc, #404]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007730:	430b      	orrs	r3, r1
 8007732:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007734:	e003      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800773a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800773e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800774a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007754:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007758:	460b      	mov	r3, r1
 800775a:	4313      	orrs	r3, r2
 800775c:	d051      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007768:	d035      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800776a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800776e:	d82e      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007770:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007774:	d031      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007776:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800777a:	d828      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800777c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007780:	d01a      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007786:	d822      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800778c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007790:	d007      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007792:	e01c      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007794:	4b4b      	ldr	r3, [pc, #300]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007798:	4a4a      	ldr	r2, [pc, #296]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800779a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800779e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077a0:	e01c      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a6:	3308      	adds	r3, #8
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 fa6e 	bl	8008c8c <RCCEx_PLL2_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077b6:	e011      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077bc:	3328      	adds	r3, #40	@ 0x28
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f001 fb15 	bl	8008df0 <RCCEx_PLL3_Config>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077cc:	e006      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077d4:	e002      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077e4:	4b37      	ldr	r3, [pc, #220]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077f2:	4a34      	ldr	r2, [pc, #208]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80077f8:	e003      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800780e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007812:	2300      	movs	r3, #0
 8007814:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007818:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800781c:	460b      	mov	r3, r1
 800781e:	4313      	orrs	r3, r2
 8007820:	d056      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800782c:	d033      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800782e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007832:	d82c      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007838:	d02f      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800783a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800783e:	d826      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007840:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007844:	d02b      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007846:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800784a:	d820      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800784c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007850:	d012      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007856:	d81a      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d022      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800785c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007860:	d115      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	3308      	adds	r3, #8
 8007868:	2101      	movs	r1, #1
 800786a:	4618      	mov	r0, r3
 800786c:	f001 fa0e 	bl	8008c8c <RCCEx_PLL2_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007876:	e015      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787c:	3328      	adds	r3, #40	@ 0x28
 800787e:	2101      	movs	r1, #1
 8007880:	4618      	mov	r0, r3
 8007882:	f001 fab5 	bl	8008df0 <RCCEx_PLL3_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800788c:	e00a      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007894:	e006      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007896:	bf00      	nop
 8007898:	e004      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10d      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078ac:	4b05      	ldr	r3, [pc, #20]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ba:	4a02      	ldr	r2, [pc, #8]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078bc:	430b      	orrs	r3, r1
 80078be:	6513      	str	r3, [r2, #80]	@ 0x50
 80078c0:	e006      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078c2:	bf00      	nop
 80078c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80078dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078e0:	2300      	movs	r3, #0
 80078e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80078e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4313      	orrs	r3, r2
 80078ee:	d055      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078fc:	d033      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80078fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007902:	d82c      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007908:	d02f      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800790e:	d826      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007910:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007914:	d02b      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007916:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800791a:	d820      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800791c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007920:	d012      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007926:	d81a      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d022      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800792c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007930:	d115      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007936:	3308      	adds	r3, #8
 8007938:	2101      	movs	r1, #1
 800793a:	4618      	mov	r0, r3
 800793c:	f001 f9a6 	bl	8008c8c <RCCEx_PLL2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007946:	e015      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794c:	3328      	adds	r3, #40	@ 0x28
 800794e:	2101      	movs	r1, #1
 8007950:	4618      	mov	r0, r3
 8007952:	f001 fa4d 	bl	8008df0 <RCCEx_PLL3_Config>
 8007956:	4603      	mov	r3, r0
 8007958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800795c:	e00a      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007964:	e006      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007966:	bf00      	nop
 8007968:	e004      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800797c:	4ba3      	ldr	r3, [pc, #652]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800797e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007980:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800798c:	4a9f      	ldr	r2, [pc, #636]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800798e:	430b      	orrs	r3, r1
 8007990:	6593      	str	r3, [r2, #88]	@ 0x58
 8007992:	e003      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80079a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079ac:	2300      	movs	r3, #0
 80079ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079b6:	460b      	mov	r3, r1
 80079b8:	4313      	orrs	r3, r2
 80079ba:	d037      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079c6:	d00e      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80079c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079cc:	d816      	bhi.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d018      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80079d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079d6:	d111      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d8:	4b8c      	ldr	r3, [pc, #560]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079dc:	4a8b      	ldr	r2, [pc, #556]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079e4:	e00f      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ea:	3308      	adds	r3, #8
 80079ec:	2101      	movs	r1, #1
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 f94c 	bl	8008c8c <RCCEx_PLL2_Config>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079fa:	e004      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a02:	e000      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a1c:	4a7b      	ldr	r2, [pc, #492]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a22:	e003      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	d039      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d81c      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a56:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a99 	.word	0x08007a99
 8007a60:	08007a6d 	.word	0x08007a6d
 8007a64:	08007a7b 	.word	0x08007a7b
 8007a68:	08007a99 	.word	0x08007a99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a6c:	4b67      	ldr	r3, [pc, #412]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a70:	4a66      	ldr	r2, [pc, #408]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a78:	e00f      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	3308      	adds	r3, #8
 8007a80:	2102      	movs	r1, #2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 f902 	bl	8008c8c <RCCEx_PLL2_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a8e:	e004      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a96:	e000      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aa6:	f023 0103 	bic.w	r1, r3, #3
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ab0:	4a56      	ldr	r2, [pc, #344]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ab6:	e003      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007acc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ad6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ada:	460b      	mov	r3, r1
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f000 809f 	beq.w	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aee:	f7fa fcd3 	bl	8002498 <HAL_GetTick>
 8007af2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007af6:	e00b      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af8:	f7fa fcce 	bl	8002498 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b64      	cmp	r3, #100	@ 0x64
 8007b06:	d903      	bls.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b0e:	e005      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b10:	4b3f      	ldr	r3, [pc, #252]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0ed      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d179      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b24:	4b39      	ldr	r3, [pc, #228]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b30:	4053      	eors	r3, r2
 8007b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d015      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b3a:	4b34      	ldr	r3, [pc, #208]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b46:	4b31      	ldr	r3, [pc, #196]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4a:	4a30      	ldr	r2, [pc, #192]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b52:	4b2e      	ldr	r3, [pc, #184]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b56:	4a2d      	ldr	r2, [pc, #180]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007b64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b72:	d118      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fa fc90 	bl	8002498 <HAL_GetTick>
 8007b78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b7c:	e00d      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b7e:	f7fa fc8b 	bl	8002498 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d903      	bls.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007b98:	e005      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0eb      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d129      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bbe:	d10e      	bne.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007bc0:	4b12      	ldr	r3, [pc, #72]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bd0:	091a      	lsrs	r2, r3, #4
 8007bd2:	4b10      	ldr	r3, [pc, #64]	@ (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6113      	str	r3, [r2, #16]
 8007bdc:	e005      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007bde:	4b0b      	ldr	r3, [pc, #44]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	4a0a      	ldr	r2, [pc, #40]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007be8:	6113      	str	r3, [r2, #16]
 8007bea:	4b08      	ldr	r3, [pc, #32]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bfa:	4a04      	ldr	r2, [pc, #16]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c00:	e00e      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007c0a:	e009      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	58024800 	.word	0x58024800
 8007c14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f002 0301 	and.w	r3, r2, #1
 8007c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f000 8089 	beq.w	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c48:	2b28      	cmp	r3, #40	@ 0x28
 8007c4a:	d86b      	bhi.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007d2d 	.word	0x08007d2d
 8007c58:	08007d25 	.word	0x08007d25
 8007c5c:	08007d25 	.word	0x08007d25
 8007c60:	08007d25 	.word	0x08007d25
 8007c64:	08007d25 	.word	0x08007d25
 8007c68:	08007d25 	.word	0x08007d25
 8007c6c:	08007d25 	.word	0x08007d25
 8007c70:	08007d25 	.word	0x08007d25
 8007c74:	08007cf9 	.word	0x08007cf9
 8007c78:	08007d25 	.word	0x08007d25
 8007c7c:	08007d25 	.word	0x08007d25
 8007c80:	08007d25 	.word	0x08007d25
 8007c84:	08007d25 	.word	0x08007d25
 8007c88:	08007d25 	.word	0x08007d25
 8007c8c:	08007d25 	.word	0x08007d25
 8007c90:	08007d25 	.word	0x08007d25
 8007c94:	08007d0f 	.word	0x08007d0f
 8007c98:	08007d25 	.word	0x08007d25
 8007c9c:	08007d25 	.word	0x08007d25
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007d25 	.word	0x08007d25
 8007ca8:	08007d25 	.word	0x08007d25
 8007cac:	08007d25 	.word	0x08007d25
 8007cb0:	08007d25 	.word	0x08007d25
 8007cb4:	08007d2d 	.word	0x08007d2d
 8007cb8:	08007d25 	.word	0x08007d25
 8007cbc:	08007d25 	.word	0x08007d25
 8007cc0:	08007d25 	.word	0x08007d25
 8007cc4:	08007d25 	.word	0x08007d25
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007d25 	.word	0x08007d25
 8007cd0:	08007d25 	.word	0x08007d25
 8007cd4:	08007d2d 	.word	0x08007d2d
 8007cd8:	08007d25 	.word	0x08007d25
 8007cdc:	08007d25 	.word	0x08007d25
 8007ce0:	08007d25 	.word	0x08007d25
 8007ce4:	08007d25 	.word	0x08007d25
 8007ce8:	08007d25 	.word	0x08007d25
 8007cec:	08007d25 	.word	0x08007d25
 8007cf0:	08007d25 	.word	0x08007d25
 8007cf4:	08007d2d 	.word	0x08007d2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 ffc3 	bl	8008c8c <RCCEx_PLL2_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d0c:	e00f      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d12:	3328      	adds	r3, #40	@ 0x28
 8007d14:	2101      	movs	r1, #1
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 f86a 	bl	8008df0 <RCCEx_PLL3_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d22:	e004      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d2a:	e000      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d36:	4bbf      	ldr	r3, [pc, #764]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d44:	4abb      	ldr	r2, [pc, #748]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d46:	430b      	orrs	r3, r1
 8007d48:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d4a:	e003      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	f002 0302 	and.w	r3, r2, #2
 8007d60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d64:	2300      	movs	r3, #0
 8007d66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4313      	orrs	r3, r2
 8007d72:	d041      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d824      	bhi.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007dd1 	.word	0x08007dd1
 8007d88:	08007d9d 	.word	0x08007d9d
 8007d8c:	08007db3 	.word	0x08007db3
 8007d90:	08007dd1 	.word	0x08007dd1
 8007d94:	08007dd1 	.word	0x08007dd1
 8007d98:	08007dd1 	.word	0x08007dd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da0:	3308      	adds	r3, #8
 8007da2:	2101      	movs	r1, #1
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 ff71 	bl	8008c8c <RCCEx_PLL2_Config>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007db0:	e00f      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db6:	3328      	adds	r3, #40	@ 0x28
 8007db8:	2101      	movs	r1, #1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 f818 	bl	8008df0 <RCCEx_PLL3_Config>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dc6:	e004      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dce:	e000      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10a      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007dda:	4b96      	ldr	r3, [pc, #600]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dde:	f023 0107 	bic.w	r1, r3, #7
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007de8:	4a92      	ldr	r2, [pc, #584]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dea:	430b      	orrs	r3, r1
 8007dec:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dee:	e003      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f002 0304 	and.w	r3, r2, #4
 8007e04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4313      	orrs	r3, r2
 8007e16:	d044      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e20:	2b05      	cmp	r3, #5
 8007e22:	d825      	bhi.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e24:	a201      	add	r2, pc, #4	@ (adr r2, 8007e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007e79 	.word	0x08007e79
 8007e30:	08007e45 	.word	0x08007e45
 8007e34:	08007e5b 	.word	0x08007e5b
 8007e38:	08007e79 	.word	0x08007e79
 8007e3c:	08007e79 	.word	0x08007e79
 8007e40:	08007e79 	.word	0x08007e79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e48:	3308      	adds	r3, #8
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 ff1d 	bl	8008c8c <RCCEx_PLL2_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e58:	e00f      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5e:	3328      	adds	r3, #40	@ 0x28
 8007e60:	2101      	movs	r1, #1
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 ffc4 	bl	8008df0 <RCCEx_PLL3_Config>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e6e:	e004      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e76:	e000      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e82:	4b6c      	ldr	r3, [pc, #432]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e86:	f023 0107 	bic.w	r1, r3, #7
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e92:	4a68      	ldr	r2, [pc, #416]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e94:	430b      	orrs	r3, r1
 8007e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e98:	e003      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f002 0320 	and.w	r3, r2, #32
 8007eae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007eb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	d055      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ece:	d033      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ed4:	d82c      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eda:	d02f      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ee0:	d826      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ee2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ee6:	d02b      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007ee8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007eec:	d820      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ef2:	d012      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ef8:	d81a      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d022      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f02:	d115      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f08:	3308      	adds	r3, #8
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 febd 	bl	8008c8c <RCCEx_PLL2_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f18:	e015      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1e:	3328      	adds	r3, #40	@ 0x28
 8007f20:	2102      	movs	r1, #2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 ff64 	bl	8008df0 <RCCEx_PLL3_Config>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f2e:	e00a      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f36:	e006      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f38:	bf00      	nop
 8007f3a:	e004      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f3c:	bf00      	nop
 8007f3e:	e002      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f40:	bf00      	nop
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10b      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f4e:	4b39      	ldr	r3, [pc, #228]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f5e:	4a35      	ldr	r2, [pc, #212]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f64:	e003      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	d058      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f9a:	d033      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007f9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fa0:	d82c      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fa6:	d02f      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fac:	d826      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fb2:	d02b      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007fb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fb8:	d820      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fbe:	d012      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fc4:	d81a      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d022      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fce:	d115      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fe57 	bl	8008c8c <RCCEx_PLL2_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fe4:	e015      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	3328      	adds	r3, #40	@ 0x28
 8007fec:	2102      	movs	r1, #2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fefe 	bl	8008df0 <RCCEx_PLL3_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ffa:	e00a      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008002:	e006      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008004:	bf00      	nop
 8008006:	e004      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008008:	bf00      	nop
 800800a:	e002      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800800c:	bf00      	nop
 800800e:	e000      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10e      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800801a:	4b06      	ldr	r3, [pc, #24]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800801c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800801e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800802a:	4a02      	ldr	r2, [pc, #8]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800802c:	430b      	orrs	r3, r1
 800802e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008030:	e006      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008032:	bf00      	nop
 8008034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800803c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800804c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008050:	2300      	movs	r3, #0
 8008052:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008056:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800805a:	460b      	mov	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	d055      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008064:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008068:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800806c:	d033      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800806e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008072:	d82c      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008078:	d02f      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800807a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800807e:	d826      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008080:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008084:	d02b      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008086:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800808a:	d820      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800808c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008090:	d012      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008092:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008096:	d81a      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d022      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800809c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080a0:	d115      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a6:	3308      	adds	r3, #8
 80080a8:	2100      	movs	r1, #0
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fdee 	bl	8008c8c <RCCEx_PLL2_Config>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080b6:	e015      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080bc:	3328      	adds	r3, #40	@ 0x28
 80080be:	2102      	movs	r1, #2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fe95 	bl	8008df0 <RCCEx_PLL3_Config>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080cc:	e00a      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080d4:	e006      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080d6:	bf00      	nop
 80080d8:	e004      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080da:	bf00      	nop
 80080dc:	e002      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080de:	bf00      	nop
 80080e0:	e000      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10b      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080fc:	4a9d      	ldr	r2, [pc, #628]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080fe:	430b      	orrs	r3, r1
 8008100:	6593      	str	r3, [r2, #88]	@ 0x58
 8008102:	e003      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f002 0308 	and.w	r3, r2, #8
 8008118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800811c:	2300      	movs	r3, #0
 800811e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008122:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008126:	460b      	mov	r3, r1
 8008128:	4313      	orrs	r3, r2
 800812a:	d01e      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008138:	d10c      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813e:	3328      	adds	r3, #40	@ 0x28
 8008140:	2102      	movs	r1, #2
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fe54 	bl	8008df0 <RCCEx_PLL3_Config>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008154:	4b87      	ldr	r3, [pc, #540]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008158:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800815c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008164:	4a83      	ldr	r2, [pc, #524]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008166:	430b      	orrs	r3, r1
 8008168:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f002 0310 	and.w	r3, r2, #16
 8008176:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800817a:	2300      	movs	r3, #0
 800817c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008180:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008184:	460b      	mov	r3, r1
 8008186:	4313      	orrs	r3, r2
 8008188:	d01e      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008196:	d10c      	bne.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819c:	3328      	adds	r3, #40	@ 0x28
 800819e:	2102      	movs	r1, #2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fe25 	bl	8008df0 <RCCEx_PLL3_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081b2:	4b70      	ldr	r3, [pc, #448]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081c2:	4a6c      	ldr	r2, [pc, #432]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80081d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081d8:	2300      	movs	r3, #0
 80081da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80081e2:	460b      	mov	r3, r1
 80081e4:	4313      	orrs	r3, r2
 80081e6:	d03e      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80081e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081f4:	d022      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80081f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081fa:	d81b      	bhi.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008204:	d00b      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008206:	e015      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820c:	3308      	adds	r3, #8
 800820e:	2100      	movs	r1, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fd3b 	bl	8008c8c <RCCEx_PLL2_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800821c:	e00f      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800821e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008222:	3328      	adds	r3, #40	@ 0x28
 8008224:	2102      	movs	r1, #2
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fde2 	bl	8008df0 <RCCEx_PLL3_Config>
 800822c:	4603      	mov	r3, r0
 800822e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008232:	e004      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800823a:	e000      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800823c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800823e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008246:	4b4b      	ldr	r3, [pc, #300]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800824a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008256:	4a47      	ldr	r2, [pc, #284]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008258:	430b      	orrs	r3, r1
 800825a:	6593      	str	r3, [r2, #88]	@ 0x58
 800825c:	e003      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008272:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008274:	2300      	movs	r3, #0
 8008276:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008278:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800827c:	460b      	mov	r3, r1
 800827e:	4313      	orrs	r3, r2
 8008280:	d03b      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800828a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800828e:	d01f      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008290:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008294:	d818      	bhi.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800829a:	d003      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800829c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082a0:	d007      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80082a2:	e011      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a4:	4b33      	ldr	r3, [pc, #204]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a8:	4a32      	ldr	r2, [pc, #200]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082b0:	e00f      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b6:	3328      	adds	r3, #40	@ 0x28
 80082b8:	2101      	movs	r1, #1
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fd98 	bl	8008df0 <RCCEx_PLL3_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80082c6:	e004      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ce:	e000      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80082d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082da:	4b26      	ldr	r3, [pc, #152]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ea:	4a22      	ldr	r2, [pc, #136]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ec:	430b      	orrs	r3, r1
 80082ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80082f0:	e003      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008306:	673b      	str	r3, [r7, #112]	@ 0x70
 8008308:	2300      	movs	r3, #0
 800830a:	677b      	str	r3, [r7, #116]	@ 0x74
 800830c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008310:	460b      	mov	r3, r1
 8008312:	4313      	orrs	r3, r2
 8008314:	d034      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008324:	d007      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008326:	e011      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008328:	4b12      	ldr	r3, [pc, #72]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800832a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832c:	4a11      	ldr	r2, [pc, #68]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800832e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008332:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008334:	e00e      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833a:	3308      	adds	r3, #8
 800833c:	2102      	movs	r1, #2
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fca4 	bl	8008c8c <RCCEx_PLL2_Config>
 8008344:	4603      	mov	r3, r0
 8008346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800834a:	e003      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10d      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800835e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008360:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800836a:	4a02      	ldr	r2, [pc, #8]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836c:	430b      	orrs	r3, r1
 800836e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008370:	e006      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008372:	bf00      	nop
 8008374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800837c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800838c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800838e:	2300      	movs	r3, #0
 8008390:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008392:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008396:	460b      	mov	r3, r1
 8008398:	4313      	orrs	r3, r2
 800839a:	d00c      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800839c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a0:	3328      	adds	r3, #40	@ 0x28
 80083a2:	2102      	movs	r1, #2
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 fd23 	bl	8008df0 <RCCEx_PLL3_Config>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80083c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80083c4:	2300      	movs	r3, #0
 80083c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80083c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80083cc:	460b      	mov	r3, r1
 80083ce:	4313      	orrs	r3, r2
 80083d0:	d038      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083de:	d018      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80083e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083e4:	d811      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083ea:	d014      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80083ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083f0:	d80b      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d011      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80083f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083fa:	d106      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083fc:	4bc3      	ldr	r3, [pc, #780]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008400:	4ac2      	ldr	r2, [pc, #776]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008408:	e008      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008410:	e004      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008412:	bf00      	nop
 8008414:	e002      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008416:	bf00      	nop
 8008418:	e000      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800841a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800841c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008424:	4bb9      	ldr	r3, [pc, #740]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008428:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800842c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008434:	4ab5      	ldr	r2, [pc, #724]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008436:	430b      	orrs	r3, r1
 8008438:	6553      	str	r3, [r2, #84]	@ 0x54
 800843a:	e003      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008450:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008452:	2300      	movs	r3, #0
 8008454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008456:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800845a:	460b      	mov	r3, r1
 800845c:	4313      	orrs	r3, r2
 800845e:	d009      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008460:	4baa      	ldr	r3, [pc, #680]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008464:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800846e:	4aa7      	ldr	r2, [pc, #668]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008470:	430b      	orrs	r3, r1
 8008472:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008480:	653b      	str	r3, [r7, #80]	@ 0x50
 8008482:	2300      	movs	r3, #0
 8008484:	657b      	str	r3, [r7, #84]	@ 0x54
 8008486:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800848a:	460b      	mov	r3, r1
 800848c:	4313      	orrs	r3, r2
 800848e:	d00a      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008490:	4b9e      	ldr	r3, [pc, #632]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084a0:	4a9a      	ldr	r2, [pc, #616]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084a2:	430b      	orrs	r3, r1
 80084a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80084b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084b4:	2300      	movs	r3, #0
 80084b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80084bc:	460b      	mov	r3, r1
 80084be:	4313      	orrs	r3, r2
 80084c0:	d009      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084c2:	4b92      	ldr	r3, [pc, #584]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80084ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084d0:	4a8e      	ldr	r2, [pc, #568]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084d2:	430b      	orrs	r3, r1
 80084d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80084e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80084e4:	2300      	movs	r3, #0
 80084e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80084e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80084ec:	460b      	mov	r3, r1
 80084ee:	4313      	orrs	r3, r2
 80084f0:	d00e      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084f2:	4b86      	ldr	r3, [pc, #536]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	4a85      	ldr	r2, [pc, #532]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084fc:	6113      	str	r3, [r2, #16]
 80084fe:	4b83      	ldr	r3, [pc, #524]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008500:	6919      	ldr	r1, [r3, #16]
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800850a:	4a80      	ldr	r2, [pc, #512]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800850c:	430b      	orrs	r3, r1
 800850e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800851c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800851e:	2300      	movs	r3, #0
 8008520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008522:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008526:	460b      	mov	r3, r1
 8008528:	4313      	orrs	r3, r2
 800852a:	d009      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800852c:	4b77      	ldr	r3, [pc, #476]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800852e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008530:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853a:	4a74      	ldr	r2, [pc, #464]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800853c:	430b      	orrs	r3, r1
 800853e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800854c:	633b      	str	r3, [r7, #48]	@ 0x30
 800854e:	2300      	movs	r3, #0
 8008550:	637b      	str	r3, [r7, #52]	@ 0x34
 8008552:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008556:	460b      	mov	r3, r1
 8008558:	4313      	orrs	r3, r2
 800855a:	d00a      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800855c:	4b6b      	ldr	r3, [pc, #428]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800855e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008560:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800856c:	4a67      	ldr	r2, [pc, #412]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800856e:	430b      	orrs	r3, r1
 8008570:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857a:	2100      	movs	r1, #0
 800857c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008584:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008588:	460b      	mov	r3, r1
 800858a:	4313      	orrs	r3, r2
 800858c:	d011      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800858e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008592:	3308      	adds	r3, #8
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fb78 	bl	8008c8c <RCCEx_PLL2_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	2100      	movs	r1, #0
 80085bc:	6239      	str	r1, [r7, #32]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085c8:	460b      	mov	r3, r1
 80085ca:	4313      	orrs	r3, r2
 80085cc:	d011      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d2:	3308      	adds	r3, #8
 80085d4:	2101      	movs	r1, #1
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 fb58 	bl	8008c8c <RCCEx_PLL2_Config>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	2100      	movs	r1, #0
 80085fc:	61b9      	str	r1, [r7, #24]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	61fb      	str	r3, [r7, #28]
 8008604:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008608:	460b      	mov	r3, r1
 800860a:	4313      	orrs	r3, r2
 800860c:	d011      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800860e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008612:	3308      	adds	r3, #8
 8008614:	2102      	movs	r1, #2
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fb38 	bl	8008c8c <RCCEx_PLL2_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	2100      	movs	r1, #0
 800863c:	6139      	str	r1, [r7, #16]
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008648:	460b      	mov	r3, r1
 800864a:	4313      	orrs	r3, r2
 800864c:	d011      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008652:	3328      	adds	r3, #40	@ 0x28
 8008654:	2100      	movs	r1, #0
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fbca 	bl	8008df0 <RCCEx_PLL3_Config>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800866e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	2100      	movs	r1, #0
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	f003 0310 	and.w	r3, r3, #16
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008688:	460b      	mov	r3, r1
 800868a:	4313      	orrs	r3, r2
 800868c:	d011      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008692:	3328      	adds	r3, #40	@ 0x28
 8008694:	2101      	movs	r1, #1
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fbaa 	bl	8008df0 <RCCEx_PLL3_Config>
 800869c:	4603      	mov	r3, r0
 800869e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	2100      	movs	r1, #0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	607b      	str	r3, [r7, #4]
 80086c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086c8:	460b      	mov	r3, r1
 80086ca:	4313      	orrs	r3, r2
 80086cc:	d011      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d2:	3328      	adds	r3, #40	@ 0x28
 80086d4:	2102      	movs	r1, #2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fb8a 	bl	8008df0 <RCCEx_PLL3_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80086f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e000      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
}
 8008700:	4618      	mov	r0, r3
 8008702:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008706:	46bd      	mov	sp, r7
 8008708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800870c:	58024400 	.word	0x58024400

08008710 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008714:	f7fe fd54 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 8008718:	4602      	mov	r2, r0
 800871a:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	091b      	lsrs	r3, r3, #4
 8008720:	f003 0307 	and.w	r3, r3, #7
 8008724:	4904      	ldr	r1, [pc, #16]	@ (8008738 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008726:	5ccb      	ldrb	r3, [r1, r3]
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008730:	4618      	mov	r0, r3
 8008732:	bd80      	pop	{r7, pc}
 8008734:	58024400 	.word	0x58024400
 8008738:	080190a4 	.word	0x080190a4

0800873c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800873c:	b480      	push	{r7}
 800873e:	b089      	sub	sp, #36	@ 0x24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008744:	4ba1      	ldr	r3, [pc, #644]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800874e:	4b9f      	ldr	r3, [pc, #636]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008752:	0b1b      	lsrs	r3, r3, #12
 8008754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008758:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800875a:	4b9c      	ldr	r3, [pc, #624]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800875c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875e:	091b      	lsrs	r3, r3, #4
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008766:	4b99      	ldr	r3, [pc, #612]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800876a:	08db      	lsrs	r3, r3, #3
 800876c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	fb02 f303 	mul.w	r3, r2, r3
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 8111 	beq.w	80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b02      	cmp	r3, #2
 800878e:	f000 8083 	beq.w	8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b02      	cmp	r3, #2
 8008796:	f200 80a1 	bhi.w	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d056      	beq.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80087a6:	e099      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a8:	4b88      	ldr	r3, [pc, #544]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d02d      	beq.n	8008810 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087b4:	4b85      	ldr	r3, [pc, #532]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	08db      	lsrs	r3, r3, #3
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	4a84      	ldr	r2, [pc, #528]	@ (80089d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80087c0:	fa22 f303 	lsr.w	r3, r2, r3
 80087c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	ee07 3a90 	vmov	s15, r3
 80087cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087de:	4b7b      	ldr	r3, [pc, #492]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800880e:	e087      	b.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80089d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800881e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008822:	4b6a      	ldr	r3, [pc, #424]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008832:	ed97 6a03 	vldr	s12, [r7, #12]
 8008836:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800883a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008852:	e065      	b.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008866:	4b59      	ldr	r3, [pc, #356]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008876:	ed97 6a03 	vldr	s12, [r7, #12]
 800887a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800887e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800888a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008896:	e043      	b.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80088a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088aa:	4b48      	ldr	r3, [pc, #288]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80088be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088da:	e021      	b.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ee:	4b37      	ldr	r3, [pc, #220]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008902:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800891e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008920:	4b2a      	ldr	r3, [pc, #168]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008924:	0a5b      	lsrs	r3, r3, #9
 8008926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800893a:	edd7 6a07 	vldr	s13, [r7, #28]
 800893e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008946:	ee17 2a90 	vmov	r2, s15
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800894e:	4b1f      	ldr	r3, [pc, #124]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008952:	0c1b      	lsrs	r3, r3, #16
 8008954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008958:	ee07 3a90 	vmov	s15, r3
 800895c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008960:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008964:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008968:	edd7 6a07 	vldr	s13, [r7, #28]
 800896c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008974:	ee17 2a90 	vmov	r2, s15
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800897c:	4b13      	ldr	r3, [pc, #76]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008980:	0e1b      	lsrs	r3, r3, #24
 8008982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008996:	edd7 6a07 	vldr	s13, [r7, #28]
 800899a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800899e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a2:	ee17 2a90 	vmov	r2, s15
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80089aa:	e008      	b.n	80089be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	609a      	str	r2, [r3, #8]
}
 80089be:	bf00      	nop
 80089c0:	3724      	adds	r7, #36	@ 0x24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	58024400 	.word	0x58024400
 80089d0:	03d09000 	.word	0x03d09000
 80089d4:	46000000 	.word	0x46000000
 80089d8:	4c742400 	.word	0x4c742400
 80089dc:	4a742400 	.word	0x4a742400
 80089e0:	4af42400 	.word	0x4af42400

080089e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b089      	sub	sp, #36	@ 0x24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f0:	f003 0303 	and.w	r3, r3, #3
 80089f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80089f6:	4b9f      	ldr	r3, [pc, #636]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	0d1b      	lsrs	r3, r3, #20
 80089fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a02:	4b9c      	ldr	r3, [pc, #624]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a0e:	4b99      	ldr	r3, [pc, #612]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a12:	08db      	lsrs	r3, r3, #3
 8008a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8111 	beq.w	8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	f000 8083 	beq.w	8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	f200 80a1 	bhi.w	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d056      	beq.n	8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a4e:	e099      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a50:	4b88      	ldr	r3, [pc, #544]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d02d      	beq.n	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a5c:	4b85      	ldr	r3, [pc, #532]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	08db      	lsrs	r3, r3, #3
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	4a84      	ldr	r2, [pc, #528]	@ (8008c78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a68:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	ee07 3a90 	vmov	s15, r3
 8008a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b7b      	ldr	r3, [pc, #492]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ab6:	e087      	b.n	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b6a      	ldr	r3, [pc, #424]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008afa:	e065      	b.n	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b59      	ldr	r3, [pc, #356]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b3e:	e043      	b.n	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b48      	ldr	r3, [pc, #288]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b82:	e021      	b.n	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	4b37      	ldr	r3, [pc, #220]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008baa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bcc:	0a5b      	lsrs	r3, r3, #9
 8008bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bee:	ee17 2a90 	vmov	r2, s15
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfa:	0c1b      	lsrs	r3, r3, #16
 8008bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c00:	ee07 3a90 	vmov	s15, r3
 8008c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c1c:	ee17 2a90 	vmov	r2, s15
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c24:	4b13      	ldr	r3, [pc, #76]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c28:	0e1b      	lsrs	r3, r3, #24
 8008c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c4a:	ee17 2a90 	vmov	r2, s15
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c52:	e008      	b.n	8008c66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	609a      	str	r2, [r3, #8]
}
 8008c66:	bf00      	nop
 8008c68:	3724      	adds	r7, #36	@ 0x24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	58024400 	.word	0x58024400
 8008c78:	03d09000 	.word	0x03d09000
 8008c7c:	46000000 	.word	0x46000000
 8008c80:	4c742400 	.word	0x4c742400
 8008c84:	4a742400 	.word	0x4a742400
 8008c88:	4af42400 	.word	0x4af42400

08008c8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c9a:	4b53      	ldr	r3, [pc, #332]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d101      	bne.n	8008caa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e099      	b.n	8008dde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008caa:	4b4f      	ldr	r3, [pc, #316]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a4e      	ldr	r2, [pc, #312]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008cb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cb6:	f7f9 fbef 	bl	8002498 <HAL_GetTick>
 8008cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cbc:	e008      	b.n	8008cd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008cbe:	f7f9 fbeb 	bl	8002498 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d901      	bls.n	8008cd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e086      	b.n	8008dde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cd0:	4b45      	ldr	r3, [pc, #276]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1f0      	bne.n	8008cbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008cdc:	4b42      	ldr	r3, [pc, #264]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	031b      	lsls	r3, r3, #12
 8008cea:	493f      	ldr	r1, [pc, #252]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	628b      	str	r3, [r1, #40]	@ 0x28
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	025b      	lsls	r3, r3, #9
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	431a      	orrs	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	041b      	lsls	r3, r3, #16
 8008d0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d12:	431a      	orrs	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	061b      	lsls	r3, r3, #24
 8008d1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d20:	4931      	ldr	r1, [pc, #196]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d26:	4b30      	ldr	r3, [pc, #192]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	492d      	ldr	r1, [pc, #180]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d38:	4b2b      	ldr	r3, [pc, #172]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3c:	f023 0220 	bic.w	r2, r3, #32
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	4928      	ldr	r1, [pc, #160]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008d4a:	4b27      	ldr	r3, [pc, #156]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	4a26      	ldr	r2, [pc, #152]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d50:	f023 0310 	bic.w	r3, r3, #16
 8008d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d56:	4b24      	ldr	r3, [pc, #144]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d5a:	4b24      	ldr	r3, [pc, #144]	@ (8008dec <RCCEx_PLL2_Config+0x160>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	69d2      	ldr	r2, [r2, #28]
 8008d62:	00d2      	lsls	r2, r2, #3
 8008d64:	4920      	ldr	r1, [pc, #128]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d70:	f043 0310 	orr.w	r3, r3, #16
 8008d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d106      	bne.n	8008d8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d80:	4a19      	ldr	r2, [pc, #100]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d88:	e00f      	b.n	8008daa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d106      	bne.n	8008d9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d90:	4b15      	ldr	r3, [pc, #84]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d94:	4a14      	ldr	r2, [pc, #80]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d9c:	e005      	b.n	8008daa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d9e:	4b12      	ldr	r3, [pc, #72]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da2:	4a11      	ldr	r2, [pc, #68]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008da4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008da8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008daa:	4b0f      	ldr	r3, [pc, #60]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a0e      	ldr	r2, [pc, #56]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008db0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008db6:	f7f9 fb6f 	bl	8002498 <HAL_GetTick>
 8008dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dbc:	e008      	b.n	8008dd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008dbe:	f7f9 fb6b 	bl	8002498 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d901      	bls.n	8008dd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e006      	b.n	8008dde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dd0:	4b05      	ldr	r3, [pc, #20]	@ (8008de8 <RCCEx_PLL2_Config+0x15c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0f0      	beq.n	8008dbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	58024400 	.word	0x58024400
 8008dec:	ffff0007 	.word	0xffff0007

08008df0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dfe:	4b53      	ldr	r3, [pc, #332]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d101      	bne.n	8008e0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e099      	b.n	8008f42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e0e:	4b4f      	ldr	r3, [pc, #316]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a4e      	ldr	r2, [pc, #312]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e1a:	f7f9 fb3d 	bl	8002498 <HAL_GetTick>
 8008e1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e20:	e008      	b.n	8008e34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e22:	f7f9 fb39 	bl	8002498 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d901      	bls.n	8008e34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e086      	b.n	8008f42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e34:	4b45      	ldr	r3, [pc, #276]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1f0      	bne.n	8008e22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e40:	4b42      	ldr	r3, [pc, #264]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	051b      	lsls	r3, r3, #20
 8008e4e:	493f      	ldr	r1, [pc, #252]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	025b      	lsls	r3, r3, #9
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	041b      	lsls	r3, r3, #16
 8008e72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	061b      	lsls	r3, r3, #24
 8008e80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008e84:	4931      	ldr	r1, [pc, #196]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e8a:	4b30      	ldr	r3, [pc, #192]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	492d      	ldr	r1, [pc, #180]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	4928      	ldr	r1, [pc, #160]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008eae:	4b27      	ldr	r3, [pc, #156]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb2:	4a26      	ldr	r2, [pc, #152]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008eba:	4b24      	ldr	r3, [pc, #144]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ebe:	4b24      	ldr	r3, [pc, #144]	@ (8008f50 <RCCEx_PLL3_Config+0x160>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	69d2      	ldr	r2, [r2, #28]
 8008ec6:	00d2      	lsls	r2, r2, #3
 8008ec8:	4920      	ldr	r1, [pc, #128]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ece:	4b1f      	ldr	r3, [pc, #124]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d106      	bne.n	8008eee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	4a19      	ldr	r2, [pc, #100]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008ee6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008eea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008eec:	e00f      	b.n	8008f0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d106      	bne.n	8008f02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ef4:	4b15      	ldr	r3, [pc, #84]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef8:	4a14      	ldr	r2, [pc, #80]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008efa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008efe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f00:	e005      	b.n	8008f0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f02:	4b12      	ldr	r3, [pc, #72]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f06:	4a11      	ldr	r2, [pc, #68]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008f08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a0e      	ldr	r2, [pc, #56]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f1a:	f7f9 fabd 	bl	8002498 <HAL_GetTick>
 8008f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f20:	e008      	b.n	8008f34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f22:	f7f9 fab9 	bl	8002498 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d901      	bls.n	8008f34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e006      	b.n	8008f42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f34:	4b05      	ldr	r3, [pc, #20]	@ (8008f4c <RCCEx_PLL3_Config+0x15c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0f0      	beq.n	8008f22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	ffff0007 	.word	0xffff0007

08008f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e049      	b.n	8008ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d106      	bne.n	8008f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f841 	bl	8009002 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2202      	movs	r2, #2
 8008f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f000 f9e8 	bl	8009368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
	...

08009018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b01      	cmp	r3, #1
 800902a:	d001      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e054      	b.n	80090da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0201 	orr.w	r2, r2, #1
 8009046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a26      	ldr	r2, [pc, #152]	@ (80090e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d022      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800905a:	d01d      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a22      	ldr	r2, [pc, #136]	@ (80090ec <HAL_TIM_Base_Start_IT+0xd4>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d018      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a21      	ldr	r2, [pc, #132]	@ (80090f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d013      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a1f      	ldr	r2, [pc, #124]	@ (80090f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d00e      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a1e      	ldr	r2, [pc, #120]	@ (80090f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d009      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a1c      	ldr	r2, [pc, #112]	@ (80090fc <HAL_TIM_Base_Start_IT+0xe4>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d004      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a1b      	ldr	r2, [pc, #108]	@ (8009100 <HAL_TIM_Base_Start_IT+0xe8>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d115      	bne.n	80090c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	4b19      	ldr	r3, [pc, #100]	@ (8009104 <HAL_TIM_Base_Start_IT+0xec>)
 80090a0:	4013      	ands	r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b06      	cmp	r3, #6
 80090a8:	d015      	beq.n	80090d6 <HAL_TIM_Base_Start_IT+0xbe>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090b0:	d011      	beq.n	80090d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f042 0201 	orr.w	r2, r2, #1
 80090c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c2:	e008      	b.n	80090d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0201 	orr.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	e000      	b.n	80090d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	40010000 	.word	0x40010000
 80090ec:	40000400 	.word	0x40000400
 80090f0:	40000800 	.word	0x40000800
 80090f4:	40000c00 	.word	0x40000c00
 80090f8:	40010400 	.word	0x40010400
 80090fc:	40001800 	.word	0x40001800
 8009100:	40014000 	.word	0x40014000
 8009104:	00010007 	.word	0x00010007

08009108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d020      	beq.n	800916c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01b      	beq.n	800916c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f06f 0202 	mvn.w	r2, #2
 800913c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f8e9 	bl	800932a <HAL_TIM_IC_CaptureCallback>
 8009158:	e005      	b.n	8009166 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f8db 	bl	8009316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f8ec 	bl	800933e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f003 0304 	and.w	r3, r3, #4
 8009172:	2b00      	cmp	r3, #0
 8009174:	d020      	beq.n	80091b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01b      	beq.n	80091b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f06f 0204 	mvn.w	r2, #4
 8009188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2202      	movs	r2, #2
 800918e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f8c3 	bl	800932a <HAL_TIM_IC_CaptureCallback>
 80091a4:	e005      	b.n	80091b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f8b5 	bl	8009316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f8c6 	bl	800933e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 0308 	and.w	r3, r3, #8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d020      	beq.n	8009204 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f003 0308 	and.w	r3, r3, #8
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01b      	beq.n	8009204 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0208 	mvn.w	r2, #8
 80091d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2204      	movs	r2, #4
 80091da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f89d 	bl	800932a <HAL_TIM_IC_CaptureCallback>
 80091f0:	e005      	b.n	80091fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f88f 	bl	8009316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f8a0 	bl	800933e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f003 0310 	and.w	r3, r3, #16
 800920a:	2b00      	cmp	r3, #0
 800920c:	d020      	beq.n	8009250 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f003 0310 	and.w	r3, r3, #16
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01b      	beq.n	8009250 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f06f 0210 	mvn.w	r2, #16
 8009220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2208      	movs	r2, #8
 8009226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f877 	bl	800932a <HAL_TIM_IC_CaptureCallback>
 800923c:	e005      	b.n	800924a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f869 	bl	8009316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f87a 	bl	800933e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00c      	beq.n	8009274 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	d007      	beq.n	8009274 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f06f 0201 	mvn.w	r2, #1
 800926c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7f8 fb2c 	bl	80018cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800927a:	2b00      	cmp	r3, #0
 800927c:	d104      	bne.n	8009288 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00c      	beq.n	80092a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800928e:	2b00      	cmp	r3, #0
 8009290:	d007      	beq.n	80092a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800929a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f913 	bl	80094c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00c      	beq.n	80092c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d007      	beq.n	80092c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80092be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f90b 	bl	80094dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00c      	beq.n	80092ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f834 	bl	8009352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	f003 0320 	and.w	r3, r3, #32
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00c      	beq.n	800930e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d007      	beq.n	800930e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f06f 0220 	mvn.w	r2, #32
 8009306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f8d3 	bl	80094b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009332:	bf00      	nop
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800935a:	bf00      	nop
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
	...

08009368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a46      	ldr	r2, [pc, #280]	@ (8009494 <TIM_Base_SetConfig+0x12c>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d013      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009386:	d00f      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a43      	ldr	r2, [pc, #268]	@ (8009498 <TIM_Base_SetConfig+0x130>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d00b      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a42      	ldr	r2, [pc, #264]	@ (800949c <TIM_Base_SetConfig+0x134>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d007      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a41      	ldr	r2, [pc, #260]	@ (80094a0 <TIM_Base_SetConfig+0x138>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d003      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a40      	ldr	r2, [pc, #256]	@ (80094a4 <TIM_Base_SetConfig+0x13c>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d108      	bne.n	80093ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a35      	ldr	r2, [pc, #212]	@ (8009494 <TIM_Base_SetConfig+0x12c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d01f      	beq.n	8009402 <TIM_Base_SetConfig+0x9a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c8:	d01b      	beq.n	8009402 <TIM_Base_SetConfig+0x9a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a32      	ldr	r2, [pc, #200]	@ (8009498 <TIM_Base_SetConfig+0x130>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d017      	beq.n	8009402 <TIM_Base_SetConfig+0x9a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a31      	ldr	r2, [pc, #196]	@ (800949c <TIM_Base_SetConfig+0x134>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d013      	beq.n	8009402 <TIM_Base_SetConfig+0x9a>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a30      	ldr	r2, [pc, #192]	@ (80094a0 <TIM_Base_SetConfig+0x138>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d00f      	beq.n	8009402 <TIM_Base_SetConfig+0x9a>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a2f      	ldr	r2, [pc, #188]	@ (80094a4 <TIM_Base_SetConfig+0x13c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d00b      	beq.n	8009402 <TIM_Base_SetConfig+0x9a>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a2e      	ldr	r2, [pc, #184]	@ (80094a8 <TIM_Base_SetConfig+0x140>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d007      	beq.n	8009402 <TIM_Base_SetConfig+0x9a>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a2d      	ldr	r2, [pc, #180]	@ (80094ac <TIM_Base_SetConfig+0x144>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d003      	beq.n	8009402 <TIM_Base_SetConfig+0x9a>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a2c      	ldr	r2, [pc, #176]	@ (80094b0 <TIM_Base_SetConfig+0x148>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d108      	bne.n	8009414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a16      	ldr	r2, [pc, #88]	@ (8009494 <TIM_Base_SetConfig+0x12c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00f      	beq.n	8009460 <TIM_Base_SetConfig+0xf8>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a18      	ldr	r2, [pc, #96]	@ (80094a4 <TIM_Base_SetConfig+0x13c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00b      	beq.n	8009460 <TIM_Base_SetConfig+0xf8>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a17      	ldr	r2, [pc, #92]	@ (80094a8 <TIM_Base_SetConfig+0x140>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d007      	beq.n	8009460 <TIM_Base_SetConfig+0xf8>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a16      	ldr	r2, [pc, #88]	@ (80094ac <TIM_Base_SetConfig+0x144>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d003      	beq.n	8009460 <TIM_Base_SetConfig+0xf8>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a15      	ldr	r2, [pc, #84]	@ (80094b0 <TIM_Base_SetConfig+0x148>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d103      	bne.n	8009468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	691a      	ldr	r2, [r3, #16]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b01      	cmp	r3, #1
 8009478:	d105      	bne.n	8009486 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f023 0201 	bic.w	r2, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	611a      	str	r2, [r3, #16]
  }
}
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	40010000 	.word	0x40010000
 8009498:	40000400 	.word	0x40000400
 800949c:	40000800 	.word	0x40000800
 80094a0:	40000c00 	.word	0x40000c00
 80094a4:	40010400 	.word	0x40010400
 80094a8:	40014000 	.word	0x40014000
 80094ac:	40014400 	.word	0x40014400
 80094b0:	40014800 	.word	0x40014800

080094b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e042      	b.n	8009588 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009508:	2b00      	cmp	r3, #0
 800950a:	d106      	bne.n	800951a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7f8 fdbf 	bl	8002098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2224      	movs	r2, #36	@ 0x24
 800951e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 0201 	bic.w	r2, r2, #1
 8009530:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 fb78 	bl	800ac30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fe0d 	bl	800a160 <UART_SetConfig>
 8009546:	4603      	mov	r3, r0
 8009548:	2b01      	cmp	r3, #1
 800954a:	d101      	bne.n	8009550 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e01b      	b.n	8009588 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800955e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689a      	ldr	r2, [r3, #8]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800956e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f042 0201 	orr.w	r2, r2, #1
 800957e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f001 fbf7 	bl	800ad74 <UART_CheckIdleState>
 8009586:	4603      	mov	r3, r0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08a      	sub	sp, #40	@ 0x28
 8009594:	af02      	add	r7, sp, #8
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	603b      	str	r3, [r7, #0]
 800959c:	4613      	mov	r3, r2
 800959e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d17b      	bne.n	80096a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <HAL_UART_Transmit+0x26>
 80095b0:	88fb      	ldrh	r3, [r7, #6]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e074      	b.n	80096a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2221      	movs	r2, #33	@ 0x21
 80095c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095ca:	f7f8 ff65 	bl	8002498 <HAL_GetTick>
 80095ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	88fa      	ldrh	r2, [r7, #6]
 80095d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	88fa      	ldrh	r2, [r7, #6]
 80095dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095e8:	d108      	bne.n	80095fc <HAL_UART_Transmit+0x6c>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d104      	bne.n	80095fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	61bb      	str	r3, [r7, #24]
 80095fa:	e003      	b.n	8009604 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009600:	2300      	movs	r3, #0
 8009602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009604:	e030      	b.n	8009668 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2200      	movs	r2, #0
 800960e:	2180      	movs	r1, #128	@ 0x80
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f001 fc59 	bl	800aec8 <UART_WaitOnFlagUntilTimeout>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d005      	beq.n	8009628 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2220      	movs	r2, #32
 8009620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e03d      	b.n	80096a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10b      	bne.n	8009646 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800963c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	3302      	adds	r3, #2
 8009642:	61bb      	str	r3, [r7, #24]
 8009644:	e007      	b.n	8009656 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	781a      	ldrb	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	3301      	adds	r3, #1
 8009654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800965c:	b29b      	uxth	r3, r3
 800965e:	3b01      	subs	r3, #1
 8009660:	b29a      	uxth	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800966e:	b29b      	uxth	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1c8      	bne.n	8009606 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2200      	movs	r2, #0
 800967c:	2140      	movs	r1, #64	@ 0x40
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f001 fc22 	bl	800aec8 <UART_WaitOnFlagUntilTimeout>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2220      	movs	r2, #32
 800968e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e006      	b.n	80096a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	e000      	b.n	80096a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80096a2:	2302      	movs	r3, #2
  }
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3720      	adds	r7, #32
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08a      	sub	sp, #40	@ 0x28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	4613      	mov	r3, r2
 80096b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096c0:	2b20      	cmp	r3, #32
 80096c2:	d167      	bne.n	8009794 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <HAL_UART_Transmit_DMA+0x24>
 80096ca:	88fb      	ldrh	r3, [r7, #6]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e060      	b.n	8009796 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	88fa      	ldrh	r2, [r7, #6]
 80096de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	88fa      	ldrh	r2, [r7, #6]
 80096e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2221      	movs	r2, #33	@ 0x21
 80096f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d028      	beq.n	8009754 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009706:	4a26      	ldr	r2, [pc, #152]	@ (80097a0 <HAL_UART_Transmit_DMA+0xf4>)
 8009708:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800970e:	4a25      	ldr	r2, [pc, #148]	@ (80097a4 <HAL_UART_Transmit_DMA+0xf8>)
 8009710:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009716:	4a24      	ldr	r2, [pc, #144]	@ (80097a8 <HAL_UART_Transmit_DMA+0xfc>)
 8009718:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800971e:	2200      	movs	r2, #0
 8009720:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800972a:	4619      	mov	r1, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3328      	adds	r3, #40	@ 0x28
 8009732:	461a      	mov	r2, r3
 8009734:	88fb      	ldrh	r3, [r7, #6]
 8009736:	f7f9 fb3b 	bl	8002db0 <HAL_DMA_Start_IT>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d009      	beq.n	8009754 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2210      	movs	r2, #16
 8009744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2220      	movs	r2, #32
 800974c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e020      	b.n	8009796 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2240      	movs	r2, #64	@ 0x40
 800975a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3308      	adds	r3, #8
 8009762:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	613b      	str	r3, [r7, #16]
   return(result);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009772:	627b      	str	r3, [r7, #36]	@ 0x24
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3308      	adds	r3, #8
 800977a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800977c:	623a      	str	r2, [r7, #32]
 800977e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	69f9      	ldr	r1, [r7, #28]
 8009782:	6a3a      	ldr	r2, [r7, #32]
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	61bb      	str	r3, [r7, #24]
   return(result);
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e5      	bne.n	800975c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	e000      	b.n	8009796 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009794:	2302      	movs	r3, #2
  }
}
 8009796:	4618      	mov	r0, r3
 8009798:	3728      	adds	r7, #40	@ 0x28
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	0800b241 	.word	0x0800b241
 80097a4:	0800b2d7 	.word	0x0800b2d7
 80097a8:	0800b459 	.word	0x0800b459

080097ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08a      	sub	sp, #40	@ 0x28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	4613      	mov	r3, r2
 80097b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097c0:	2b20      	cmp	r3, #32
 80097c2:	d137      	bne.n	8009834 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <HAL_UART_Receive_DMA+0x24>
 80097ca:	88fb      	ldrh	r3, [r7, #6]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e030      	b.n	8009836 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a18      	ldr	r2, [pc, #96]	@ (8009840 <HAL_UART_Receive_DMA+0x94>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d01f      	beq.n	8009824 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d018      	beq.n	8009824 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009806:	627b      	str	r3, [r7, #36]	@ 0x24
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009810:	623b      	str	r3, [r7, #32]
 8009812:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	69f9      	ldr	r1, [r7, #28]
 8009816:	6a3a      	ldr	r2, [r7, #32]
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	61bb      	str	r3, [r7, #24]
   return(result);
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009824:	88fb      	ldrh	r3, [r7, #6]
 8009826:	461a      	mov	r2, r3
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f001 fbba 	bl	800afa4 <UART_Start_Receive_DMA>
 8009830:	4603      	mov	r3, r0
 8009832:	e000      	b.n	8009836 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009834:	2302      	movs	r3, #2
  }
}
 8009836:	4618      	mov	r0, r3
 8009838:	3728      	adds	r7, #40	@ 0x28
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	58000c00 	.word	0x58000c00

08009844 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b090      	sub	sp, #64	@ 0x40
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800985a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009866:	2b80      	cmp	r3, #128	@ 0x80
 8009868:	d139      	bne.n	80098de <HAL_UART_DMAStop+0x9a>
 800986a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800986c:	2b21      	cmp	r3, #33	@ 0x21
 800986e:	d136      	bne.n	80098de <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3308      	adds	r3, #8
 8009876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009886:	637b      	str	r3, [r7, #52]	@ 0x34
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3308      	adds	r3, #8
 800988e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009890:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e5      	bne.n	8009870 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d015      	beq.n	80098d8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f9 fce7 	bl	8003284 <HAL_DMA_Abort>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00d      	beq.n	80098d8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fb f96d 	bl	8004ba0 <HAL_DMA_GetError>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	d105      	bne.n	80098d8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2210      	movs	r2, #16
 80098d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e047      	b.n	8009968 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 fc09 	bl	800b0f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098e8:	2b40      	cmp	r3, #64	@ 0x40
 80098ea:	d13c      	bne.n	8009966 <HAL_UART_DMAStop+0x122>
 80098ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ee:	2b22      	cmp	r3, #34	@ 0x22
 80098f0:	d139      	bne.n	8009966 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3308      	adds	r3, #8
 80098f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	e853 3f00 	ldrex	r3, [r3]
 8009900:	60bb      	str	r3, [r7, #8]
   return(result);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009908:	633b      	str	r3, [r7, #48]	@ 0x30
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3308      	adds	r3, #8
 8009910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009912:	61ba      	str	r2, [r7, #24]
 8009914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	6979      	ldr	r1, [r7, #20]
 8009918:	69ba      	ldr	r2, [r7, #24]
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	613b      	str	r3, [r7, #16]
   return(result);
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e5      	bne.n	80098f2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800992c:	2b00      	cmp	r3, #0
 800992e:	d017      	beq.n	8009960 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009936:	4618      	mov	r0, r3
 8009938:	f7f9 fca4 	bl	8003284 <HAL_DMA_Abort>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00e      	beq.n	8009960 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009948:	4618      	mov	r0, r3
 800994a:	f7fb f929 	bl	8004ba0 <HAL_DMA_GetError>
 800994e:	4603      	mov	r3, r0
 8009950:	2b20      	cmp	r3, #32
 8009952:	d105      	bne.n	8009960 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2210      	movs	r2, #16
 8009958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e003      	b.n	8009968 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 fc07 	bl	800b174 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3740      	adds	r7, #64	@ 0x40
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b0ba      	sub	sp, #232	@ 0xe8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009996:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800999a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800999e:	4013      	ands	r3, r2
 80099a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80099a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11b      	bne.n	80099e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099b0:	f003 0320 	and.w	r3, r3, #32
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d015      	beq.n	80099e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099bc:	f003 0320 	and.w	r3, r3, #32
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d105      	bne.n	80099d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d009      	beq.n	80099e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 8377 	beq.w	800a0c8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	4798      	blx	r3
      }
      return;
 80099e2:	e371      	b.n	800a0c8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80099e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 8123 	beq.w	8009c34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80099ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80099f2:	4b8d      	ldr	r3, [pc, #564]	@ (8009c28 <HAL_UART_IRQHandler+0x2b8>)
 80099f4:	4013      	ands	r3, r2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80099fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80099fe:	4b8b      	ldr	r3, [pc, #556]	@ (8009c2c <HAL_UART_IRQHandler+0x2bc>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 8116 	beq.w	8009c34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d011      	beq.n	8009a38 <HAL_UART_IRQHandler+0xc8>
 8009a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2201      	movs	r2, #1
 8009a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a2e:	f043 0201 	orr.w	r2, r3, #1
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d011      	beq.n	8009a68 <HAL_UART_IRQHandler+0xf8>
 8009a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00b      	beq.n	8009a68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2202      	movs	r2, #2
 8009a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a5e:	f043 0204 	orr.w	r2, r3, #4
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a6c:	f003 0304 	and.w	r3, r3, #4
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d011      	beq.n	8009a98 <HAL_UART_IRQHandler+0x128>
 8009a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2204      	movs	r2, #4
 8009a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a8e:	f043 0202 	orr.w	r2, r3, #2
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a9c:	f003 0308 	and.w	r3, r3, #8
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d017      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa8:	f003 0320 	and.w	r3, r3, #32
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d105      	bne.n	8009abc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009ab0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8009c28 <HAL_UART_IRQHandler+0x2b8>)
 8009ab6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00b      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aca:	f043 0208 	orr.w	r2, r3, #8
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d012      	beq.n	8009b06 <HAL_UART_IRQHandler+0x196>
 8009ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ae4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00c      	beq.n	8009b06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009afc:	f043 0220 	orr.w	r2, r3, #32
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 82dd 	beq.w	800a0cc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b16:	f003 0320 	and.w	r3, r3, #32
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d013      	beq.n	8009b46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b5a:	2b40      	cmp	r3, #64	@ 0x40
 8009b5c:	d005      	beq.n	8009b6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d054      	beq.n	8009c14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 fb02 	bl	800b174 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b7a:	2b40      	cmp	r3, #64	@ 0x40
 8009b7c:	d146      	bne.n	8009c0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3308      	adds	r3, #8
 8009b84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009baa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1d9      	bne.n	8009b7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d017      	beq.n	8009c04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bda:	4a15      	ldr	r2, [pc, #84]	@ (8009c30 <HAL_UART_IRQHandler+0x2c0>)
 8009bdc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7f9 fe6b 	bl	80038c0 <HAL_DMA_Abort_IT>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d019      	beq.n	8009c24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009bfe:	4610      	mov	r0, r2
 8009c00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c02:	e00f      	b.n	8009c24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fa95 	bl	800a134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c0a:	e00b      	b.n	8009c24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fa91 	bl	800a134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c12:	e007      	b.n	8009c24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fa8d 	bl	800a134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009c22:	e253      	b.n	800a0cc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c24:	bf00      	nop
    return;
 8009c26:	e251      	b.n	800a0cc <HAL_UART_IRQHandler+0x75c>
 8009c28:	10000001 	.word	0x10000001
 8009c2c:	04000120 	.word	0x04000120
 8009c30:	0800b4d9 	.word	0x0800b4d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	f040 81e7 	bne.w	800a00c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c42:	f003 0310 	and.w	r3, r3, #16
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 81e0 	beq.w	800a00c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 81d9 	beq.w	800a00c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2210      	movs	r2, #16
 8009c60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c6c:	2b40      	cmp	r3, #64	@ 0x40
 8009c6e:	f040 8151 	bne.w	8009f14 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a96      	ldr	r2, [pc, #600]	@ (8009ed4 <HAL_UART_IRQHandler+0x564>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d068      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a93      	ldr	r2, [pc, #588]	@ (8009ed8 <HAL_UART_IRQHandler+0x568>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d061      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a91      	ldr	r2, [pc, #580]	@ (8009edc <HAL_UART_IRQHandler+0x56c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d05a      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a8e      	ldr	r2, [pc, #568]	@ (8009ee0 <HAL_UART_IRQHandler+0x570>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d053      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a8c      	ldr	r2, [pc, #560]	@ (8009ee4 <HAL_UART_IRQHandler+0x574>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d04c      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a89      	ldr	r2, [pc, #548]	@ (8009ee8 <HAL_UART_IRQHandler+0x578>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d045      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a87      	ldr	r2, [pc, #540]	@ (8009eec <HAL_UART_IRQHandler+0x57c>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d03e      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a84      	ldr	r2, [pc, #528]	@ (8009ef0 <HAL_UART_IRQHandler+0x580>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d037      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a82      	ldr	r2, [pc, #520]	@ (8009ef4 <HAL_UART_IRQHandler+0x584>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d030      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8009ef8 <HAL_UART_IRQHandler+0x588>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d029      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a7d      	ldr	r2, [pc, #500]	@ (8009efc <HAL_UART_IRQHandler+0x58c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d022      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a7a      	ldr	r2, [pc, #488]	@ (8009f00 <HAL_UART_IRQHandler+0x590>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d01b      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a78      	ldr	r2, [pc, #480]	@ (8009f04 <HAL_UART_IRQHandler+0x594>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d014      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a75      	ldr	r2, [pc, #468]	@ (8009f08 <HAL_UART_IRQHandler+0x598>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00d      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a73      	ldr	r2, [pc, #460]	@ (8009f0c <HAL_UART_IRQHandler+0x59c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d006      	beq.n	8009d52 <HAL_UART_IRQHandler+0x3e2>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a70      	ldr	r2, [pc, #448]	@ (8009f10 <HAL_UART_IRQHandler+0x5a0>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d106      	bne.n	8009d60 <HAL_UART_IRQHandler+0x3f0>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	e005      	b.n	8009d6c <HAL_UART_IRQHandler+0x3fc>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 81ab 	beq.w	800a0d0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d84:	429a      	cmp	r2, r3
 8009d86:	f080 81a3 	bcs.w	800a0d0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d9a:	69db      	ldr	r3, [r3, #28]
 8009d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da0:	f000 8087 	beq.w	8009eb2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009db0:	e853 3f00 	ldrex	r3, [r3]
 8009db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dd2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1da      	bne.n	8009da4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3308      	adds	r3, #8
 8009df4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e00:	f023 0301 	bic.w	r3, r3, #1
 8009e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e1      	bne.n	8009dee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3308      	adds	r3, #8
 8009e30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3308      	adds	r3, #8
 8009e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e56:	e841 2300 	strex	r3, r2, [r1]
 8009e5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1e3      	bne.n	8009e2a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e80:	f023 0310 	bic.w	r3, r3, #16
 8009e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e4      	bne.n	8009e70 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7f9 f9e9 	bl	8003284 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f93b 	bl	800a148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ed2:	e0fd      	b.n	800a0d0 <HAL_UART_IRQHandler+0x760>
 8009ed4:	40020010 	.word	0x40020010
 8009ed8:	40020028 	.word	0x40020028
 8009edc:	40020040 	.word	0x40020040
 8009ee0:	40020058 	.word	0x40020058
 8009ee4:	40020070 	.word	0x40020070
 8009ee8:	40020088 	.word	0x40020088
 8009eec:	400200a0 	.word	0x400200a0
 8009ef0:	400200b8 	.word	0x400200b8
 8009ef4:	40020410 	.word	0x40020410
 8009ef8:	40020428 	.word	0x40020428
 8009efc:	40020440 	.word	0x40020440
 8009f00:	40020458 	.word	0x40020458
 8009f04:	40020470 	.word	0x40020470
 8009f08:	40020488 	.word	0x40020488
 8009f0c:	400204a0 	.word	0x400204a0
 8009f10:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 80cf 	beq.w	800a0d4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009f36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 80ca 	beq.w	800a0d4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f64:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e4      	bne.n	8009f40 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	623b      	str	r3, [r7, #32]
   return(result);
 8009f86:	6a3a      	ldr	r2, [r7, #32]
 8009f88:	4b55      	ldr	r3, [pc, #340]	@ (800a0e0 <HAL_UART_IRQHandler+0x770>)
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3308      	adds	r3, #8
 8009f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e3      	bne.n	8009f76 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f023 0310 	bic.w	r3, r3, #16
 8009fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009fe4:	61fb      	str	r3, [r7, #28]
 8009fe6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	69b9      	ldr	r1, [r7, #24]
 8009fea:	69fa      	ldr	r2, [r7, #28]
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e4      	bne.n	8009fc2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a002:	4619      	mov	r1, r3
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f89f 	bl	800a148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a00a:	e063      	b.n	800a0d4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00e      	beq.n	800a036 <HAL_UART_IRQHandler+0x6c6>
 800a018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a01c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d008      	beq.n	800a036 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a02c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f001 fa93 	bl	800b55a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a034:	e051      	b.n	800a0da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a03a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d014      	beq.n	800a06c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d105      	bne.n	800a05a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a04e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d008      	beq.n	800a06c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d03a      	beq.n	800a0d8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
    }
    return;
 800a06a:	e035      	b.n	800a0d8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	d009      	beq.n	800a08c <HAL_UART_IRQHandler+0x71c>
 800a078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a07c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 fa3d 	bl	800b504 <UART_EndTransmit_IT>
    return;
 800a08a:	e026      	b.n	800a0da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d009      	beq.n	800a0ac <HAL_UART_IRQHandler+0x73c>
 800a098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a09c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 fa6c 	bl	800b582 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0aa:	e016      	b.n	800a0da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d010      	beq.n	800a0da <HAL_UART_IRQHandler+0x76a>
 800a0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	da0c      	bge.n	800a0da <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f001 fa54 	bl	800b56e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0c6:	e008      	b.n	800a0da <HAL_UART_IRQHandler+0x76a>
      return;
 800a0c8:	bf00      	nop
 800a0ca:	e006      	b.n	800a0da <HAL_UART_IRQHandler+0x76a>
    return;
 800a0cc:	bf00      	nop
 800a0ce:	e004      	b.n	800a0da <HAL_UART_IRQHandler+0x76a>
      return;
 800a0d0:	bf00      	nop
 800a0d2:	e002      	b.n	800a0da <HAL_UART_IRQHandler+0x76a>
      return;
 800a0d4:	bf00      	nop
 800a0d6:	e000      	b.n	800a0da <HAL_UART_IRQHandler+0x76a>
    return;
 800a0d8:	bf00      	nop
  }
}
 800a0da:	37e8      	adds	r7, #232	@ 0xe8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	effffffe 	.word	0xeffffffe

0800a0e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a164:	b092      	sub	sp, #72	@ 0x48
 800a166:	af00      	add	r7, sp, #0
 800a168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	689a      	ldr	r2, [r3, #8]
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	431a      	orrs	r2, r3
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	431a      	orrs	r2, r3
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	4313      	orrs	r3, r2
 800a186:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4bbe      	ldr	r3, [pc, #760]	@ (800a488 <UART_SetConfig+0x328>)
 800a190:	4013      	ands	r3, r2
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a198:	430b      	orrs	r3, r1
 800a19a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	68da      	ldr	r2, [r3, #12]
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4ab3      	ldr	r2, [pc, #716]	@ (800a48c <UART_SetConfig+0x32c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d004      	beq.n	800a1cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689a      	ldr	r2, [r3, #8]
 800a1d2:	4baf      	ldr	r3, [pc, #700]	@ (800a490 <UART_SetConfig+0x330>)
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	6812      	ldr	r2, [r2, #0]
 800a1da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1dc:	430b      	orrs	r3, r1
 800a1de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e6:	f023 010f 	bic.w	r1, r3, #15
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4aa6      	ldr	r2, [pc, #664]	@ (800a494 <UART_SetConfig+0x334>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d177      	bne.n	800a2f0 <UART_SetConfig+0x190>
 800a200:	4ba5      	ldr	r3, [pc, #660]	@ (800a498 <UART_SetConfig+0x338>)
 800a202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a208:	2b28      	cmp	r3, #40	@ 0x28
 800a20a:	d86d      	bhi.n	800a2e8 <UART_SetConfig+0x188>
 800a20c:	a201      	add	r2, pc, #4	@ (adr r2, 800a214 <UART_SetConfig+0xb4>)
 800a20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a212:	bf00      	nop
 800a214:	0800a2b9 	.word	0x0800a2b9
 800a218:	0800a2e9 	.word	0x0800a2e9
 800a21c:	0800a2e9 	.word	0x0800a2e9
 800a220:	0800a2e9 	.word	0x0800a2e9
 800a224:	0800a2e9 	.word	0x0800a2e9
 800a228:	0800a2e9 	.word	0x0800a2e9
 800a22c:	0800a2e9 	.word	0x0800a2e9
 800a230:	0800a2e9 	.word	0x0800a2e9
 800a234:	0800a2c1 	.word	0x0800a2c1
 800a238:	0800a2e9 	.word	0x0800a2e9
 800a23c:	0800a2e9 	.word	0x0800a2e9
 800a240:	0800a2e9 	.word	0x0800a2e9
 800a244:	0800a2e9 	.word	0x0800a2e9
 800a248:	0800a2e9 	.word	0x0800a2e9
 800a24c:	0800a2e9 	.word	0x0800a2e9
 800a250:	0800a2e9 	.word	0x0800a2e9
 800a254:	0800a2c9 	.word	0x0800a2c9
 800a258:	0800a2e9 	.word	0x0800a2e9
 800a25c:	0800a2e9 	.word	0x0800a2e9
 800a260:	0800a2e9 	.word	0x0800a2e9
 800a264:	0800a2e9 	.word	0x0800a2e9
 800a268:	0800a2e9 	.word	0x0800a2e9
 800a26c:	0800a2e9 	.word	0x0800a2e9
 800a270:	0800a2e9 	.word	0x0800a2e9
 800a274:	0800a2d1 	.word	0x0800a2d1
 800a278:	0800a2e9 	.word	0x0800a2e9
 800a27c:	0800a2e9 	.word	0x0800a2e9
 800a280:	0800a2e9 	.word	0x0800a2e9
 800a284:	0800a2e9 	.word	0x0800a2e9
 800a288:	0800a2e9 	.word	0x0800a2e9
 800a28c:	0800a2e9 	.word	0x0800a2e9
 800a290:	0800a2e9 	.word	0x0800a2e9
 800a294:	0800a2d9 	.word	0x0800a2d9
 800a298:	0800a2e9 	.word	0x0800a2e9
 800a29c:	0800a2e9 	.word	0x0800a2e9
 800a2a0:	0800a2e9 	.word	0x0800a2e9
 800a2a4:	0800a2e9 	.word	0x0800a2e9
 800a2a8:	0800a2e9 	.word	0x0800a2e9
 800a2ac:	0800a2e9 	.word	0x0800a2e9
 800a2b0:	0800a2e9 	.word	0x0800a2e9
 800a2b4:	0800a2e1 	.word	0x0800a2e1
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2be:	e222      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a2c0:	2304      	movs	r3, #4
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c6:	e21e      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ce:	e21a      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d6:	e216      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a2d8:	2320      	movs	r3, #32
 800a2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2de:	e212      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a2e0:	2340      	movs	r3, #64	@ 0x40
 800a2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e6:	e20e      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a2e8:	2380      	movs	r3, #128	@ 0x80
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ee:	e20a      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a69      	ldr	r2, [pc, #420]	@ (800a49c <UART_SetConfig+0x33c>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d130      	bne.n	800a35c <UART_SetConfig+0x1fc>
 800a2fa:	4b67      	ldr	r3, [pc, #412]	@ (800a498 <UART_SetConfig+0x338>)
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fe:	f003 0307 	and.w	r3, r3, #7
 800a302:	2b05      	cmp	r3, #5
 800a304:	d826      	bhi.n	800a354 <UART_SetConfig+0x1f4>
 800a306:	a201      	add	r2, pc, #4	@ (adr r2, 800a30c <UART_SetConfig+0x1ac>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a325 	.word	0x0800a325
 800a310:	0800a32d 	.word	0x0800a32d
 800a314:	0800a335 	.word	0x0800a335
 800a318:	0800a33d 	.word	0x0800a33d
 800a31c:	0800a345 	.word	0x0800a345
 800a320:	0800a34d 	.word	0x0800a34d
 800a324:	2300      	movs	r3, #0
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32a:	e1ec      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a32c:	2304      	movs	r3, #4
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a332:	e1e8      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a334:	2308      	movs	r3, #8
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33a:	e1e4      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a33c:	2310      	movs	r3, #16
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a342:	e1e0      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a344:	2320      	movs	r3, #32
 800a346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34a:	e1dc      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a34c:	2340      	movs	r3, #64	@ 0x40
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e1d8      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a354:	2380      	movs	r3, #128	@ 0x80
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e1d4      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a4f      	ldr	r2, [pc, #316]	@ (800a4a0 <UART_SetConfig+0x340>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d130      	bne.n	800a3c8 <UART_SetConfig+0x268>
 800a366:	4b4c      	ldr	r3, [pc, #304]	@ (800a498 <UART_SetConfig+0x338>)
 800a368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a36a:	f003 0307 	and.w	r3, r3, #7
 800a36e:	2b05      	cmp	r3, #5
 800a370:	d826      	bhi.n	800a3c0 <UART_SetConfig+0x260>
 800a372:	a201      	add	r2, pc, #4	@ (adr r2, 800a378 <UART_SetConfig+0x218>)
 800a374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a378:	0800a391 	.word	0x0800a391
 800a37c:	0800a399 	.word	0x0800a399
 800a380:	0800a3a1 	.word	0x0800a3a1
 800a384:	0800a3a9 	.word	0x0800a3a9
 800a388:	0800a3b1 	.word	0x0800a3b1
 800a38c:	0800a3b9 	.word	0x0800a3b9
 800a390:	2300      	movs	r3, #0
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e1b6      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a398:	2304      	movs	r3, #4
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e1b2      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a3a0:	2308      	movs	r3, #8
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a6:	e1ae      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ae:	e1aa      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b6:	e1a6      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a3b8:	2340      	movs	r3, #64	@ 0x40
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e1a2      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a3c0:	2380      	movs	r3, #128	@ 0x80
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e19e      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a35      	ldr	r2, [pc, #212]	@ (800a4a4 <UART_SetConfig+0x344>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d130      	bne.n	800a434 <UART_SetConfig+0x2d4>
 800a3d2:	4b31      	ldr	r3, [pc, #196]	@ (800a498 <UART_SetConfig+0x338>)
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	2b05      	cmp	r3, #5
 800a3dc:	d826      	bhi.n	800a42c <UART_SetConfig+0x2cc>
 800a3de:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e4 <UART_SetConfig+0x284>)
 800a3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e4:	0800a3fd 	.word	0x0800a3fd
 800a3e8:	0800a405 	.word	0x0800a405
 800a3ec:	0800a40d 	.word	0x0800a40d
 800a3f0:	0800a415 	.word	0x0800a415
 800a3f4:	0800a41d 	.word	0x0800a41d
 800a3f8:	0800a425 	.word	0x0800a425
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e180      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a404:	2304      	movs	r3, #4
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e17c      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a40c:	2308      	movs	r3, #8
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e178      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a414:	2310      	movs	r3, #16
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41a:	e174      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a41c:	2320      	movs	r3, #32
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a422:	e170      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a424:	2340      	movs	r3, #64	@ 0x40
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e16c      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a42c:	2380      	movs	r3, #128	@ 0x80
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e168      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a1b      	ldr	r2, [pc, #108]	@ (800a4a8 <UART_SetConfig+0x348>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d142      	bne.n	800a4c4 <UART_SetConfig+0x364>
 800a43e:	4b16      	ldr	r3, [pc, #88]	@ (800a498 <UART_SetConfig+0x338>)
 800a440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a442:	f003 0307 	and.w	r3, r3, #7
 800a446:	2b05      	cmp	r3, #5
 800a448:	d838      	bhi.n	800a4bc <UART_SetConfig+0x35c>
 800a44a:	a201      	add	r2, pc, #4	@ (adr r2, 800a450 <UART_SetConfig+0x2f0>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a469 	.word	0x0800a469
 800a454:	0800a471 	.word	0x0800a471
 800a458:	0800a479 	.word	0x0800a479
 800a45c:	0800a481 	.word	0x0800a481
 800a460:	0800a4ad 	.word	0x0800a4ad
 800a464:	0800a4b5 	.word	0x0800a4b5
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e14a      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a470:	2304      	movs	r3, #4
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e146      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a478:	2308      	movs	r3, #8
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47e:	e142      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a480:	2310      	movs	r3, #16
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a486:	e13e      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a488:	cfff69f3 	.word	0xcfff69f3
 800a48c:	58000c00 	.word	0x58000c00
 800a490:	11fff4ff 	.word	0x11fff4ff
 800a494:	40011000 	.word	0x40011000
 800a498:	58024400 	.word	0x58024400
 800a49c:	40004400 	.word	0x40004400
 800a4a0:	40004800 	.word	0x40004800
 800a4a4:	40004c00 	.word	0x40004c00
 800a4a8:	40005000 	.word	0x40005000
 800a4ac:	2320      	movs	r3, #32
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b2:	e128      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a4b4:	2340      	movs	r3, #64	@ 0x40
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e124      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a4bc:	2380      	movs	r3, #128	@ 0x80
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e120      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4acb      	ldr	r2, [pc, #812]	@ (800a7f8 <UART_SetConfig+0x698>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d176      	bne.n	800a5bc <UART_SetConfig+0x45c>
 800a4ce:	4bcb      	ldr	r3, [pc, #812]	@ (800a7fc <UART_SetConfig+0x69c>)
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4d6:	2b28      	cmp	r3, #40	@ 0x28
 800a4d8:	d86c      	bhi.n	800a5b4 <UART_SetConfig+0x454>
 800a4da:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e0 <UART_SetConfig+0x380>)
 800a4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e0:	0800a585 	.word	0x0800a585
 800a4e4:	0800a5b5 	.word	0x0800a5b5
 800a4e8:	0800a5b5 	.word	0x0800a5b5
 800a4ec:	0800a5b5 	.word	0x0800a5b5
 800a4f0:	0800a5b5 	.word	0x0800a5b5
 800a4f4:	0800a5b5 	.word	0x0800a5b5
 800a4f8:	0800a5b5 	.word	0x0800a5b5
 800a4fc:	0800a5b5 	.word	0x0800a5b5
 800a500:	0800a58d 	.word	0x0800a58d
 800a504:	0800a5b5 	.word	0x0800a5b5
 800a508:	0800a5b5 	.word	0x0800a5b5
 800a50c:	0800a5b5 	.word	0x0800a5b5
 800a510:	0800a5b5 	.word	0x0800a5b5
 800a514:	0800a5b5 	.word	0x0800a5b5
 800a518:	0800a5b5 	.word	0x0800a5b5
 800a51c:	0800a5b5 	.word	0x0800a5b5
 800a520:	0800a595 	.word	0x0800a595
 800a524:	0800a5b5 	.word	0x0800a5b5
 800a528:	0800a5b5 	.word	0x0800a5b5
 800a52c:	0800a5b5 	.word	0x0800a5b5
 800a530:	0800a5b5 	.word	0x0800a5b5
 800a534:	0800a5b5 	.word	0x0800a5b5
 800a538:	0800a5b5 	.word	0x0800a5b5
 800a53c:	0800a5b5 	.word	0x0800a5b5
 800a540:	0800a59d 	.word	0x0800a59d
 800a544:	0800a5b5 	.word	0x0800a5b5
 800a548:	0800a5b5 	.word	0x0800a5b5
 800a54c:	0800a5b5 	.word	0x0800a5b5
 800a550:	0800a5b5 	.word	0x0800a5b5
 800a554:	0800a5b5 	.word	0x0800a5b5
 800a558:	0800a5b5 	.word	0x0800a5b5
 800a55c:	0800a5b5 	.word	0x0800a5b5
 800a560:	0800a5a5 	.word	0x0800a5a5
 800a564:	0800a5b5 	.word	0x0800a5b5
 800a568:	0800a5b5 	.word	0x0800a5b5
 800a56c:	0800a5b5 	.word	0x0800a5b5
 800a570:	0800a5b5 	.word	0x0800a5b5
 800a574:	0800a5b5 	.word	0x0800a5b5
 800a578:	0800a5b5 	.word	0x0800a5b5
 800a57c:	0800a5b5 	.word	0x0800a5b5
 800a580:	0800a5ad 	.word	0x0800a5ad
 800a584:	2301      	movs	r3, #1
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58a:	e0bc      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a58c:	2304      	movs	r3, #4
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a592:	e0b8      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a594:	2308      	movs	r3, #8
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59a:	e0b4      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a59c:	2310      	movs	r3, #16
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a2:	e0b0      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a5a4:	2320      	movs	r3, #32
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5aa:	e0ac      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a5ac:	2340      	movs	r3, #64	@ 0x40
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b2:	e0a8      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a5b4:	2380      	movs	r3, #128	@ 0x80
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e0a4      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a8f      	ldr	r2, [pc, #572]	@ (800a800 <UART_SetConfig+0x6a0>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d130      	bne.n	800a628 <UART_SetConfig+0x4c8>
 800a5c6:	4b8d      	ldr	r3, [pc, #564]	@ (800a7fc <UART_SetConfig+0x69c>)
 800a5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ca:	f003 0307 	and.w	r3, r3, #7
 800a5ce:	2b05      	cmp	r3, #5
 800a5d0:	d826      	bhi.n	800a620 <UART_SetConfig+0x4c0>
 800a5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d8 <UART_SetConfig+0x478>)
 800a5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d8:	0800a5f1 	.word	0x0800a5f1
 800a5dc:	0800a5f9 	.word	0x0800a5f9
 800a5e0:	0800a601 	.word	0x0800a601
 800a5e4:	0800a609 	.word	0x0800a609
 800a5e8:	0800a611 	.word	0x0800a611
 800a5ec:	0800a619 	.word	0x0800a619
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f6:	e086      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a5f8:	2304      	movs	r3, #4
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fe:	e082      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a600:	2308      	movs	r3, #8
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a606:	e07e      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a608:	2310      	movs	r3, #16
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60e:	e07a      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a610:	2320      	movs	r3, #32
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a616:	e076      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a618:	2340      	movs	r3, #64	@ 0x40
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61e:	e072      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a620:	2380      	movs	r3, #128	@ 0x80
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e06e      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a75      	ldr	r2, [pc, #468]	@ (800a804 <UART_SetConfig+0x6a4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d130      	bne.n	800a694 <UART_SetConfig+0x534>
 800a632:	4b72      	ldr	r3, [pc, #456]	@ (800a7fc <UART_SetConfig+0x69c>)
 800a634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a636:	f003 0307 	and.w	r3, r3, #7
 800a63a:	2b05      	cmp	r3, #5
 800a63c:	d826      	bhi.n	800a68c <UART_SetConfig+0x52c>
 800a63e:	a201      	add	r2, pc, #4	@ (adr r2, 800a644 <UART_SetConfig+0x4e4>)
 800a640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a644:	0800a65d 	.word	0x0800a65d
 800a648:	0800a665 	.word	0x0800a665
 800a64c:	0800a66d 	.word	0x0800a66d
 800a650:	0800a675 	.word	0x0800a675
 800a654:	0800a67d 	.word	0x0800a67d
 800a658:	0800a685 	.word	0x0800a685
 800a65c:	2300      	movs	r3, #0
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e050      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a664:	2304      	movs	r3, #4
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e04c      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a66c:	2308      	movs	r3, #8
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e048      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a674:	2310      	movs	r3, #16
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a67a:	e044      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a67c:	2320      	movs	r3, #32
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a682:	e040      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a684:	2340      	movs	r3, #64	@ 0x40
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e03c      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a68c:	2380      	movs	r3, #128	@ 0x80
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e038      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a5b      	ldr	r2, [pc, #364]	@ (800a808 <UART_SetConfig+0x6a8>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d130      	bne.n	800a700 <UART_SetConfig+0x5a0>
 800a69e:	4b57      	ldr	r3, [pc, #348]	@ (800a7fc <UART_SetConfig+0x69c>)
 800a6a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6a2:	f003 0307 	and.w	r3, r3, #7
 800a6a6:	2b05      	cmp	r3, #5
 800a6a8:	d826      	bhi.n	800a6f8 <UART_SetConfig+0x598>
 800a6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b0 <UART_SetConfig+0x550>)
 800a6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b0:	0800a6c9 	.word	0x0800a6c9
 800a6b4:	0800a6d1 	.word	0x0800a6d1
 800a6b8:	0800a6d9 	.word	0x0800a6d9
 800a6bc:	0800a6e1 	.word	0x0800a6e1
 800a6c0:	0800a6e9 	.word	0x0800a6e9
 800a6c4:	0800a6f1 	.word	0x0800a6f1
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e01a      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a6d0:	2304      	movs	r3, #4
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e016      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a6d8:	2308      	movs	r3, #8
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e012      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a6e0:	2310      	movs	r3, #16
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e6:	e00e      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a6e8:	2320      	movs	r3, #32
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ee:	e00a      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a6f0:	2340      	movs	r3, #64	@ 0x40
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e006      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a6f8:	2380      	movs	r3, #128	@ 0x80
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e002      	b.n	800a706 <UART_SetConfig+0x5a6>
 800a700:	2380      	movs	r3, #128	@ 0x80
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a3f      	ldr	r2, [pc, #252]	@ (800a808 <UART_SetConfig+0x6a8>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	f040 80f8 	bne.w	800a902 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a712:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a716:	2b20      	cmp	r3, #32
 800a718:	dc46      	bgt.n	800a7a8 <UART_SetConfig+0x648>
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	f2c0 8082 	blt.w	800a824 <UART_SetConfig+0x6c4>
 800a720:	3b02      	subs	r3, #2
 800a722:	2b1e      	cmp	r3, #30
 800a724:	d87e      	bhi.n	800a824 <UART_SetConfig+0x6c4>
 800a726:	a201      	add	r2, pc, #4	@ (adr r2, 800a72c <UART_SetConfig+0x5cc>)
 800a728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72c:	0800a7af 	.word	0x0800a7af
 800a730:	0800a825 	.word	0x0800a825
 800a734:	0800a7b7 	.word	0x0800a7b7
 800a738:	0800a825 	.word	0x0800a825
 800a73c:	0800a825 	.word	0x0800a825
 800a740:	0800a825 	.word	0x0800a825
 800a744:	0800a7c7 	.word	0x0800a7c7
 800a748:	0800a825 	.word	0x0800a825
 800a74c:	0800a825 	.word	0x0800a825
 800a750:	0800a825 	.word	0x0800a825
 800a754:	0800a825 	.word	0x0800a825
 800a758:	0800a825 	.word	0x0800a825
 800a75c:	0800a825 	.word	0x0800a825
 800a760:	0800a825 	.word	0x0800a825
 800a764:	0800a7d7 	.word	0x0800a7d7
 800a768:	0800a825 	.word	0x0800a825
 800a76c:	0800a825 	.word	0x0800a825
 800a770:	0800a825 	.word	0x0800a825
 800a774:	0800a825 	.word	0x0800a825
 800a778:	0800a825 	.word	0x0800a825
 800a77c:	0800a825 	.word	0x0800a825
 800a780:	0800a825 	.word	0x0800a825
 800a784:	0800a825 	.word	0x0800a825
 800a788:	0800a825 	.word	0x0800a825
 800a78c:	0800a825 	.word	0x0800a825
 800a790:	0800a825 	.word	0x0800a825
 800a794:	0800a825 	.word	0x0800a825
 800a798:	0800a825 	.word	0x0800a825
 800a79c:	0800a825 	.word	0x0800a825
 800a7a0:	0800a825 	.word	0x0800a825
 800a7a4:	0800a817 	.word	0x0800a817
 800a7a8:	2b40      	cmp	r3, #64	@ 0x40
 800a7aa:	d037      	beq.n	800a81c <UART_SetConfig+0x6bc>
 800a7ac:	e03a      	b.n	800a824 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a7ae:	f7fd ffaf 	bl	8008710 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7b4:	e03c      	b.n	800a830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fd ffbe 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c4:	e034      	b.n	800a830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7c6:	f107 0318 	add.w	r3, r7, #24
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe f90a 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7d4:	e02c      	b.n	800a830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7d6:	4b09      	ldr	r3, [pc, #36]	@ (800a7fc <UART_SetConfig+0x69c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0320 	and.w	r3, r3, #32
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d016      	beq.n	800a810 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7e2:	4b06      	ldr	r3, [pc, #24]	@ (800a7fc <UART_SetConfig+0x69c>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	08db      	lsrs	r3, r3, #3
 800a7e8:	f003 0303 	and.w	r3, r3, #3
 800a7ec:	4a07      	ldr	r2, [pc, #28]	@ (800a80c <UART_SetConfig+0x6ac>)
 800a7ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7f4:	e01c      	b.n	800a830 <UART_SetConfig+0x6d0>
 800a7f6:	bf00      	nop
 800a7f8:	40011400 	.word	0x40011400
 800a7fc:	58024400 	.word	0x58024400
 800a800:	40007800 	.word	0x40007800
 800a804:	40007c00 	.word	0x40007c00
 800a808:	58000c00 	.word	0x58000c00
 800a80c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a810:	4b9d      	ldr	r3, [pc, #628]	@ (800aa88 <UART_SetConfig+0x928>)
 800a812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a814:	e00c      	b.n	800a830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a816:	4b9d      	ldr	r3, [pc, #628]	@ (800aa8c <UART_SetConfig+0x92c>)
 800a818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a81a:	e009      	b.n	800a830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a81c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a822:	e005      	b.n	800a830 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a824:	2300      	movs	r3, #0
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a82e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 81de 	beq.w	800abf4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83c:	4a94      	ldr	r2, [pc, #592]	@ (800aa90 <UART_SetConfig+0x930>)
 800a83e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a842:	461a      	mov	r2, r3
 800a844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a846:	fbb3 f3f2 	udiv	r3, r3, r2
 800a84a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	4613      	mov	r3, r2
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	4413      	add	r3, r2
 800a856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a858:	429a      	cmp	r2, r3
 800a85a:	d305      	bcc.n	800a868 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a864:	429a      	cmp	r2, r3
 800a866:	d903      	bls.n	800a870 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a86e:	e1c1      	b.n	800abf4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a872:	2200      	movs	r2, #0
 800a874:	60bb      	str	r3, [r7, #8]
 800a876:	60fa      	str	r2, [r7, #12]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87c:	4a84      	ldr	r2, [pc, #528]	@ (800aa90 <UART_SetConfig+0x930>)
 800a87e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a882:	b29b      	uxth	r3, r3
 800a884:	2200      	movs	r2, #0
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a88e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a892:	f7f5 fddd 	bl	8000450 <__aeabi_uldivmod>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4610      	mov	r0, r2
 800a89c:	4619      	mov	r1, r3
 800a89e:	f04f 0200 	mov.w	r2, #0
 800a8a2:	f04f 0300 	mov.w	r3, #0
 800a8a6:	020b      	lsls	r3, r1, #8
 800a8a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8ac:	0202      	lsls	r2, r0, #8
 800a8ae:	6979      	ldr	r1, [r7, #20]
 800a8b0:	6849      	ldr	r1, [r1, #4]
 800a8b2:	0849      	lsrs	r1, r1, #1
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	eb12 0804 	adds.w	r8, r2, r4
 800a8be:	eb43 0905 	adc.w	r9, r3, r5
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	469a      	mov	sl, r3
 800a8ca:	4693      	mov	fp, r2
 800a8cc:	4652      	mov	r2, sl
 800a8ce:	465b      	mov	r3, fp
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	f7f5 fdbc 	bl	8000450 <__aeabi_uldivmod>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4613      	mov	r3, r2
 800a8de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8e6:	d308      	bcc.n	800a8fa <UART_SetConfig+0x79a>
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8ee:	d204      	bcs.n	800a8fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8f6:	60da      	str	r2, [r3, #12]
 800a8f8:	e17c      	b.n	800abf4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a900:	e178      	b.n	800abf4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a90a:	f040 80c5 	bne.w	800aa98 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a90e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a912:	2b20      	cmp	r3, #32
 800a914:	dc48      	bgt.n	800a9a8 <UART_SetConfig+0x848>
 800a916:	2b00      	cmp	r3, #0
 800a918:	db7b      	blt.n	800aa12 <UART_SetConfig+0x8b2>
 800a91a:	2b20      	cmp	r3, #32
 800a91c:	d879      	bhi.n	800aa12 <UART_SetConfig+0x8b2>
 800a91e:	a201      	add	r2, pc, #4	@ (adr r2, 800a924 <UART_SetConfig+0x7c4>)
 800a920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a924:	0800a9af 	.word	0x0800a9af
 800a928:	0800a9b7 	.word	0x0800a9b7
 800a92c:	0800aa13 	.word	0x0800aa13
 800a930:	0800aa13 	.word	0x0800aa13
 800a934:	0800a9bf 	.word	0x0800a9bf
 800a938:	0800aa13 	.word	0x0800aa13
 800a93c:	0800aa13 	.word	0x0800aa13
 800a940:	0800aa13 	.word	0x0800aa13
 800a944:	0800a9cf 	.word	0x0800a9cf
 800a948:	0800aa13 	.word	0x0800aa13
 800a94c:	0800aa13 	.word	0x0800aa13
 800a950:	0800aa13 	.word	0x0800aa13
 800a954:	0800aa13 	.word	0x0800aa13
 800a958:	0800aa13 	.word	0x0800aa13
 800a95c:	0800aa13 	.word	0x0800aa13
 800a960:	0800aa13 	.word	0x0800aa13
 800a964:	0800a9df 	.word	0x0800a9df
 800a968:	0800aa13 	.word	0x0800aa13
 800a96c:	0800aa13 	.word	0x0800aa13
 800a970:	0800aa13 	.word	0x0800aa13
 800a974:	0800aa13 	.word	0x0800aa13
 800a978:	0800aa13 	.word	0x0800aa13
 800a97c:	0800aa13 	.word	0x0800aa13
 800a980:	0800aa13 	.word	0x0800aa13
 800a984:	0800aa13 	.word	0x0800aa13
 800a988:	0800aa13 	.word	0x0800aa13
 800a98c:	0800aa13 	.word	0x0800aa13
 800a990:	0800aa13 	.word	0x0800aa13
 800a994:	0800aa13 	.word	0x0800aa13
 800a998:	0800aa13 	.word	0x0800aa13
 800a99c:	0800aa13 	.word	0x0800aa13
 800a9a0:	0800aa13 	.word	0x0800aa13
 800a9a4:	0800aa05 	.word	0x0800aa05
 800a9a8:	2b40      	cmp	r3, #64	@ 0x40
 800a9aa:	d02e      	beq.n	800aa0a <UART_SetConfig+0x8aa>
 800a9ac:	e031      	b.n	800aa12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9ae:	f7fc fc37 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 800a9b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9b4:	e033      	b.n	800aa1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9b6:	f7fc fc49 	bl	800724c <HAL_RCC_GetPCLK2Freq>
 800a9ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9bc:	e02f      	b.n	800aa1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fd feba 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9cc:	e027      	b.n	800aa1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ce:	f107 0318 	add.w	r3, r7, #24
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe f806 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9dc:	e01f      	b.n	800aa1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9de:	4b2d      	ldr	r3, [pc, #180]	@ (800aa94 <UART_SetConfig+0x934>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0320 	and.w	r3, r3, #32
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d009      	beq.n	800a9fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9ea:	4b2a      	ldr	r3, [pc, #168]	@ (800aa94 <UART_SetConfig+0x934>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	08db      	lsrs	r3, r3, #3
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	4a24      	ldr	r2, [pc, #144]	@ (800aa88 <UART_SetConfig+0x928>)
 800a9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9fc:	e00f      	b.n	800aa1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a9fe:	4b22      	ldr	r3, [pc, #136]	@ (800aa88 <UART_SetConfig+0x928>)
 800aa00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa02:	e00c      	b.n	800aa1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa04:	4b21      	ldr	r3, [pc, #132]	@ (800aa8c <UART_SetConfig+0x92c>)
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa08:	e009      	b.n	800aa1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa10:	e005      	b.n	800aa1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 80e7 	beq.w	800abf4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa2a:	4a19      	ldr	r2, [pc, #100]	@ (800aa90 <UART_SetConfig+0x930>)
 800aa2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa30:	461a      	mov	r2, r3
 800aa32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa34:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa38:	005a      	lsls	r2, r3, #1
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	085b      	lsrs	r3, r3, #1
 800aa40:	441a      	add	r2, r3
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4e:	2b0f      	cmp	r3, #15
 800aa50:	d916      	bls.n	800aa80 <UART_SetConfig+0x920>
 800aa52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa58:	d212      	bcs.n	800aa80 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	f023 030f 	bic.w	r3, r3, #15
 800aa62:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa66:	085b      	lsrs	r3, r3, #1
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa72:	4313      	orrs	r3, r2
 800aa74:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aa7c:	60da      	str	r2, [r3, #12]
 800aa7e:	e0b9      	b.n	800abf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa86:	e0b5      	b.n	800abf4 <UART_SetConfig+0xa94>
 800aa88:	03d09000 	.word	0x03d09000
 800aa8c:	003d0900 	.word	0x003d0900
 800aa90:	080190bc 	.word	0x080190bc
 800aa94:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa9c:	2b20      	cmp	r3, #32
 800aa9e:	dc49      	bgt.n	800ab34 <UART_SetConfig+0x9d4>
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	db7c      	blt.n	800ab9e <UART_SetConfig+0xa3e>
 800aaa4:	2b20      	cmp	r3, #32
 800aaa6:	d87a      	bhi.n	800ab9e <UART_SetConfig+0xa3e>
 800aaa8:	a201      	add	r2, pc, #4	@ (adr r2, 800aab0 <UART_SetConfig+0x950>)
 800aaaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaae:	bf00      	nop
 800aab0:	0800ab3b 	.word	0x0800ab3b
 800aab4:	0800ab43 	.word	0x0800ab43
 800aab8:	0800ab9f 	.word	0x0800ab9f
 800aabc:	0800ab9f 	.word	0x0800ab9f
 800aac0:	0800ab4b 	.word	0x0800ab4b
 800aac4:	0800ab9f 	.word	0x0800ab9f
 800aac8:	0800ab9f 	.word	0x0800ab9f
 800aacc:	0800ab9f 	.word	0x0800ab9f
 800aad0:	0800ab5b 	.word	0x0800ab5b
 800aad4:	0800ab9f 	.word	0x0800ab9f
 800aad8:	0800ab9f 	.word	0x0800ab9f
 800aadc:	0800ab9f 	.word	0x0800ab9f
 800aae0:	0800ab9f 	.word	0x0800ab9f
 800aae4:	0800ab9f 	.word	0x0800ab9f
 800aae8:	0800ab9f 	.word	0x0800ab9f
 800aaec:	0800ab9f 	.word	0x0800ab9f
 800aaf0:	0800ab6b 	.word	0x0800ab6b
 800aaf4:	0800ab9f 	.word	0x0800ab9f
 800aaf8:	0800ab9f 	.word	0x0800ab9f
 800aafc:	0800ab9f 	.word	0x0800ab9f
 800ab00:	0800ab9f 	.word	0x0800ab9f
 800ab04:	0800ab9f 	.word	0x0800ab9f
 800ab08:	0800ab9f 	.word	0x0800ab9f
 800ab0c:	0800ab9f 	.word	0x0800ab9f
 800ab10:	0800ab9f 	.word	0x0800ab9f
 800ab14:	0800ab9f 	.word	0x0800ab9f
 800ab18:	0800ab9f 	.word	0x0800ab9f
 800ab1c:	0800ab9f 	.word	0x0800ab9f
 800ab20:	0800ab9f 	.word	0x0800ab9f
 800ab24:	0800ab9f 	.word	0x0800ab9f
 800ab28:	0800ab9f 	.word	0x0800ab9f
 800ab2c:	0800ab9f 	.word	0x0800ab9f
 800ab30:	0800ab91 	.word	0x0800ab91
 800ab34:	2b40      	cmp	r3, #64	@ 0x40
 800ab36:	d02e      	beq.n	800ab96 <UART_SetConfig+0xa36>
 800ab38:	e031      	b.n	800ab9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab3a:	f7fc fb71 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 800ab3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab40:	e033      	b.n	800abaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab42:	f7fc fb83 	bl	800724c <HAL_RCC_GetPCLK2Freq>
 800ab46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab48:	e02f      	b.n	800abaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fd fdf4 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab58:	e027      	b.n	800abaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab5a:	f107 0318 	add.w	r3, r7, #24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fd ff40 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab68:	e01f      	b.n	800abaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab6a:	4b2d      	ldr	r3, [pc, #180]	@ (800ac20 <UART_SetConfig+0xac0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 0320 	and.w	r3, r3, #32
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d009      	beq.n	800ab8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab76:	4b2a      	ldr	r3, [pc, #168]	@ (800ac20 <UART_SetConfig+0xac0>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	08db      	lsrs	r3, r3, #3
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	4a28      	ldr	r2, [pc, #160]	@ (800ac24 <UART_SetConfig+0xac4>)
 800ab82:	fa22 f303 	lsr.w	r3, r2, r3
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab88:	e00f      	b.n	800abaa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ab8a:	4b26      	ldr	r3, [pc, #152]	@ (800ac24 <UART_SetConfig+0xac4>)
 800ab8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8e:	e00c      	b.n	800abaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab90:	4b25      	ldr	r3, [pc, #148]	@ (800ac28 <UART_SetConfig+0xac8>)
 800ab92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab94:	e009      	b.n	800abaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab9c:	e005      	b.n	800abaa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aba8:	bf00      	nop
    }

    if (pclk != 0U)
 800abaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d021      	beq.n	800abf4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac2c <UART_SetConfig+0xacc>)
 800abb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abba:	461a      	mov	r2, r3
 800abbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abbe:	fbb3 f2f2 	udiv	r2, r3, r2
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	085b      	lsrs	r3, r3, #1
 800abc8:	441a      	add	r2, r3
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd6:	2b0f      	cmp	r3, #15
 800abd8:	d909      	bls.n	800abee <UART_SetConfig+0xa8e>
 800abda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abe0:	d205      	bcs.n	800abee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	60da      	str	r2, [r3, #12]
 800abec:	e002      	b.n	800abf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2200      	movs	r2, #0
 800ac08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ac10:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3748      	adds	r7, #72	@ 0x48
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac1e:	bf00      	nop
 800ac20:	58024400 	.word	0x58024400
 800ac24:	03d09000 	.word	0x03d09000
 800ac28:	003d0900 	.word	0x003d0900
 800ac2c:	080190bc 	.word	0x080190bc

0800ac30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac3c:	f003 0308 	and.w	r3, r3, #8
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00a      	beq.n	800ac5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	430a      	orrs	r2, r1
 800ac58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00a      	beq.n	800ac7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	430a      	orrs	r2, r1
 800ac7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac80:	f003 0302 	and.w	r3, r3, #2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00a      	beq.n	800ac9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	430a      	orrs	r2, r1
 800ac9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca2:	f003 0304 	and.w	r3, r3, #4
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00a      	beq.n	800acc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	430a      	orrs	r2, r1
 800acbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc4:	f003 0310 	and.w	r3, r3, #16
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00a      	beq.n	800ace2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	430a      	orrs	r2, r1
 800ace0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace6:	f003 0320 	and.w	r3, r3, #32
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00a      	beq.n	800ad04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	430a      	orrs	r2, r1
 800ad02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d01a      	beq.n	800ad46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	430a      	orrs	r2, r1
 800ad24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad2e:	d10a      	bne.n	800ad46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	430a      	orrs	r2, r1
 800ad44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00a      	beq.n	800ad68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	430a      	orrs	r2, r1
 800ad66:	605a      	str	r2, [r3, #4]
  }
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b098      	sub	sp, #96	@ 0x60
 800ad78:	af02      	add	r7, sp, #8
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad84:	f7f7 fb88 	bl	8002498 <HAL_GetTick>
 800ad88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 0308 	and.w	r3, r3, #8
 800ad94:	2b08      	cmp	r3, #8
 800ad96:	d12f      	bne.n	800adf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ada0:	2200      	movs	r2, #0
 800ada2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f88e 	bl	800aec8 <UART_WaitOnFlagUntilTimeout>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d022      	beq.n	800adf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800adc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adc6:	653b      	str	r3, [r7, #80]	@ 0x50
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	461a      	mov	r2, r3
 800adce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800add0:	647b      	str	r3, [r7, #68]	@ 0x44
 800add2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800add6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800add8:	e841 2300 	strex	r3, r2, [r1]
 800addc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800adde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e6      	bne.n	800adb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e063      	b.n	800aec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0304 	and.w	r3, r3, #4
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d149      	bne.n	800ae9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f857 	bl	800aec8 <UART_WaitOnFlagUntilTimeout>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d03c      	beq.n	800ae9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae28:	e853 3f00 	ldrex	r3, [r3]
 800ae2c:	623b      	str	r3, [r7, #32]
   return(result);
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae46:	e841 2300 	strex	r3, r2, [r1]
 800ae4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1e6      	bne.n	800ae20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3308      	adds	r3, #8
 800ae58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	e853 3f00 	ldrex	r3, [r3]
 800ae60:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f023 0301 	bic.w	r3, r3, #1
 800ae68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3308      	adds	r3, #8
 800ae70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae72:	61fa      	str	r2, [r7, #28]
 800ae74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae76:	69b9      	ldr	r1, [r7, #24]
 800ae78:	69fa      	ldr	r2, [r7, #28]
 800ae7a:	e841 2300 	strex	r3, r2, [r1]
 800ae7e:	617b      	str	r3, [r7, #20]
   return(result);
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1e5      	bne.n	800ae52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e012      	b.n	800aec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2220      	movs	r2, #32
 800aea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3758      	adds	r7, #88	@ 0x58
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	4613      	mov	r3, r2
 800aed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aed8:	e04f      	b.n	800af7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aee0:	d04b      	beq.n	800af7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aee2:	f7f7 fad9 	bl	8002498 <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	69ba      	ldr	r2, [r7, #24]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d302      	bcc.n	800aef8 <UART_WaitOnFlagUntilTimeout+0x30>
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d101      	bne.n	800aefc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e04e      	b.n	800af9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0304 	and.w	r3, r3, #4
 800af06:	2b00      	cmp	r3, #0
 800af08:	d037      	beq.n	800af7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2b80      	cmp	r3, #128	@ 0x80
 800af0e:	d034      	beq.n	800af7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2b40      	cmp	r3, #64	@ 0x40
 800af14:	d031      	beq.n	800af7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	69db      	ldr	r3, [r3, #28]
 800af1c:	f003 0308 	and.w	r3, r3, #8
 800af20:	2b08      	cmp	r3, #8
 800af22:	d110      	bne.n	800af46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2208      	movs	r2, #8
 800af2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f000 f921 	bl	800b174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2208      	movs	r2, #8
 800af36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e029      	b.n	800af9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	69db      	ldr	r3, [r3, #28]
 800af4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af54:	d111      	bne.n	800af7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f000 f907 	bl	800b174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2220      	movs	r2, #32
 800af6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e00f      	b.n	800af9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	69da      	ldr	r2, [r3, #28]
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	4013      	ands	r3, r2
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	429a      	cmp	r2, r3
 800af88:	bf0c      	ite	eq
 800af8a:	2301      	moveq	r3, #1
 800af8c:	2300      	movne	r3, #0
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	461a      	mov	r2, r3
 800af92:	79fb      	ldrb	r3, [r7, #7]
 800af94:	429a      	cmp	r2, r3
 800af96:	d0a0      	beq.n	800aeda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b096      	sub	sp, #88	@ 0x58
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	4613      	mov	r3, r2
 800afb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	88fa      	ldrh	r2, [r7, #6]
 800afbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2222      	movs	r2, #34	@ 0x22
 800afcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d02d      	beq.n	800b036 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afe0:	4a40      	ldr	r2, [pc, #256]	@ (800b0e4 <UART_Start_Receive_DMA+0x140>)
 800afe2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afea:	4a3f      	ldr	r2, [pc, #252]	@ (800b0e8 <UART_Start_Receive_DMA+0x144>)
 800afec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff4:	4a3d      	ldr	r2, [pc, #244]	@ (800b0ec <UART_Start_Receive_DMA+0x148>)
 800aff6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800affe:	2200      	movs	r2, #0
 800b000:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3324      	adds	r3, #36	@ 0x24
 800b00e:	4619      	mov	r1, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b014:	461a      	mov	r2, r3
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	f7f7 feca 	bl	8002db0 <HAL_DMA_Start_IT>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d009      	beq.n	800b036 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2210      	movs	r2, #16
 800b026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2220      	movs	r2, #32
 800b02e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e051      	b.n	800b0da <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d018      	beq.n	800b070 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b052:	657b      	str	r3, [r7, #84]	@ 0x54
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	461a      	mov	r2, r3
 800b05a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b05c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b05e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b060:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b062:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b064:	e841 2300 	strex	r3, r2, [r1]
 800b068:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b06a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1e6      	bne.n	800b03e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3308      	adds	r3, #8
 800b076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07a:	e853 3f00 	ldrex	r3, [r3]
 800b07e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b082:	f043 0301 	orr.w	r3, r3, #1
 800b086:	653b      	str	r3, [r7, #80]	@ 0x50
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3308      	adds	r3, #8
 800b08e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b090:	637a      	str	r2, [r7, #52]	@ 0x34
 800b092:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e5      	bne.n	800b070 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	e853 3f00 	ldrex	r3, [r3]
 800b0b2:	613b      	str	r3, [r7, #16]
   return(result);
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0c4:	623a      	str	r2, [r7, #32]
 800b0c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c8:	69f9      	ldr	r1, [r7, #28]
 800b0ca:	6a3a      	ldr	r2, [r7, #32]
 800b0cc:	e841 2300 	strex	r3, r2, [r1]
 800b0d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1e5      	bne.n	800b0a4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3758      	adds	r7, #88	@ 0x58
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	0800b2f3 	.word	0x0800b2f3
 800b0e8:	0800b41b 	.word	0x0800b41b
 800b0ec:	0800b459 	.word	0x0800b459

0800b0f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b08f      	sub	sp, #60	@ 0x3c
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fe:	6a3b      	ldr	r3, [r7, #32]
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	61fb      	str	r3, [r7, #28]
   return(result);
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b10c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	461a      	mov	r2, r3
 800b114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b118:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b11c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b11e:	e841 2300 	strex	r3, r2, [r1]
 800b122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1e6      	bne.n	800b0f8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3308      	adds	r3, #8
 800b130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	60bb      	str	r3, [r7, #8]
   return(result);
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b140:	633b      	str	r3, [r7, #48]	@ 0x30
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3308      	adds	r3, #8
 800b148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b14a:	61ba      	str	r2, [r7, #24]
 800b14c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6979      	ldr	r1, [r7, #20]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	613b      	str	r3, [r7, #16]
   return(result);
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e5      	bne.n	800b12a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2220      	movs	r2, #32
 800b162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b166:	bf00      	nop
 800b168:	373c      	adds	r7, #60	@ 0x3c
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
	...

0800b174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b095      	sub	sp, #84	@ 0x54
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b184:	e853 3f00 	ldrex	r3, [r3]
 800b188:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	461a      	mov	r2, r3
 800b198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b19a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b19c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b1a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e6      	bne.n	800b17c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	e853 3f00 	ldrex	r3, [r3]
 800b1bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1be:	69fa      	ldr	r2, [r7, #28]
 800b1c0:	4b1e      	ldr	r3, [pc, #120]	@ (800b23c <UART_EndRxTransfer+0xc8>)
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b1d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e5      	bne.n	800b1ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d118      	bne.n	800b21c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	e853 3f00 	ldrex	r3, [r3]
 800b1f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	f023 0310 	bic.w	r3, r3, #16
 800b1fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	461a      	mov	r2, r3
 800b206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b208:	61bb      	str	r3, [r7, #24]
 800b20a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20c:	6979      	ldr	r1, [r7, #20]
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	e841 2300 	strex	r3, r2, [r1]
 800b214:	613b      	str	r3, [r7, #16]
   return(result);
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1e6      	bne.n	800b1ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2220      	movs	r2, #32
 800b220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b230:	bf00      	nop
 800b232:	3754      	adds	r7, #84	@ 0x54
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	effffffe 	.word	0xeffffffe

0800b240 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b090      	sub	sp, #64	@ 0x40
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b24c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	69db      	ldr	r3, [r3, #28]
 800b252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b256:	d037      	beq.n	800b2c8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3308      	adds	r3, #8
 800b266:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26a:	e853 3f00 	ldrex	r3, [r3]
 800b26e:	623b      	str	r3, [r7, #32]
   return(result);
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b276:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3308      	adds	r3, #8
 800b27e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b280:	633a      	str	r2, [r7, #48]	@ 0x30
 800b282:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b288:	e841 2300 	strex	r3, r2, [r1]
 800b28c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1e5      	bne.n	800b260 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	e853 3f00 	ldrex	r3, [r3]
 800b2a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b2:	61fb      	str	r3, [r7, #28]
 800b2b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	69b9      	ldr	r1, [r7, #24]
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	617b      	str	r3, [r7, #20]
   return(result);
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e6      	bne.n	800b294 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2c6:	e002      	b.n	800b2ce <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b2c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b2ca:	f7fe ff0b 	bl	800a0e4 <HAL_UART_TxCpltCallback>
}
 800b2ce:	bf00      	nop
 800b2d0:	3740      	adds	r7, #64	@ 0x40
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b084      	sub	sp, #16
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f7fe ff07 	bl	800a0f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ea:	bf00      	nop
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b09c      	sub	sp, #112	@ 0x70
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	69db      	ldr	r3, [r3, #28]
 800b304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b308:	d071      	beq.n	800b3ee <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b30a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b30c:	2200      	movs	r2, #0
 800b30e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b31a:	e853 3f00 	ldrex	r3, [r3]
 800b31e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b322:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b326:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	461a      	mov	r2, r3
 800b32e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b330:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b332:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b334:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b336:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b338:	e841 2300 	strex	r3, r2, [r1]
 800b33c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b33e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1e6      	bne.n	800b312 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3308      	adds	r3, #8
 800b34a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34e:	e853 3f00 	ldrex	r3, [r3]
 800b352:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b356:	f023 0301 	bic.w	r3, r3, #1
 800b35a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b35c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3308      	adds	r3, #8
 800b362:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b364:	647a      	str	r2, [r7, #68]	@ 0x44
 800b366:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b368:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b36a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b36c:	e841 2300 	strex	r3, r2, [r1]
 800b370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e5      	bne.n	800b344 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3308      	adds	r3, #8
 800b37e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	e853 3f00 	ldrex	r3, [r3]
 800b386:	623b      	str	r3, [r7, #32]
   return(result);
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b38e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3308      	adds	r3, #8
 800b396:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b398:	633a      	str	r2, [r7, #48]	@ 0x30
 800b39a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b39e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3a0:	e841 2300 	strex	r3, r2, [r1]
 800b3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1e5      	bne.n	800b378 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b3ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3ae:	2220      	movs	r2, #32
 800b3b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d118      	bne.n	800b3ee <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	e853 3f00 	ldrex	r3, [r3]
 800b3c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f023 0310 	bic.w	r3, r3, #16
 800b3d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b3d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3da:	61fb      	str	r3, [r7, #28]
 800b3dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3de:	69b9      	ldr	r1, [r7, #24]
 800b3e0:	69fa      	ldr	r2, [r7, #28]
 800b3e2:	e841 2300 	strex	r3, r2, [r1]
 800b3e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e6      	bne.n	800b3bc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d107      	bne.n	800b40c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b402:	4619      	mov	r1, r3
 800b404:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b406:	f7fe fe9f 	bl	800a148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b40a:	e002      	b.n	800b412 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b40c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b40e:	f7fe fe7d 	bl	800a10c <HAL_UART_RxCpltCallback>
}
 800b412:	bf00      	nop
 800b414:	3770      	adds	r7, #112	@ 0x70
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b426:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2201      	movs	r2, #1
 800b42c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b432:	2b01      	cmp	r3, #1
 800b434:	d109      	bne.n	800b44a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b43c:	085b      	lsrs	r3, r3, #1
 800b43e:	b29b      	uxth	r3, r3
 800b440:	4619      	mov	r1, r3
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7fe fe80 	bl	800a148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b448:	e002      	b.n	800b450 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f7fe fe68 	bl	800a120 <HAL_UART_RxHalfCpltCallback>
}
 800b450:	bf00      	nop
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b464:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b46c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b474:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b480:	2b80      	cmp	r3, #128	@ 0x80
 800b482:	d109      	bne.n	800b498 <UART_DMAError+0x40>
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	2b21      	cmp	r3, #33	@ 0x21
 800b488:	d106      	bne.n	800b498 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b492:	6978      	ldr	r0, [r7, #20]
 800b494:	f7ff fe2c 	bl	800b0f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a2:	2b40      	cmp	r3, #64	@ 0x40
 800b4a4:	d109      	bne.n	800b4ba <UART_DMAError+0x62>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b22      	cmp	r3, #34	@ 0x22
 800b4aa:	d106      	bne.n	800b4ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b4b4:	6978      	ldr	r0, [r7, #20]
 800b4b6:	f7ff fe5d 	bl	800b174 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4c0:	f043 0210 	orr.w	r2, r3, #16
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4ca:	6978      	ldr	r0, [r7, #20]
 800b4cc:	f7fe fe32 	bl	800a134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4d0:	bf00      	nop
 800b4d2:	3718      	adds	r7, #24
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f7fe fe1c 	bl	800a134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4fc:	bf00      	nop
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	e853 3f00 	ldrex	r3, [r3]
 800b518:	60bb      	str	r3, [r7, #8]
   return(result);
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b520:	61fb      	str	r3, [r7, #28]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	61bb      	str	r3, [r7, #24]
 800b52c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52e:	6979      	ldr	r1, [r7, #20]
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	e841 2300 	strex	r3, r2, [r1]
 800b536:	613b      	str	r3, [r7, #16]
   return(result);
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1e6      	bne.n	800b50c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2220      	movs	r2, #32
 800b542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7fe fdc9 	bl	800a0e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b552:	bf00      	nop
 800b554:	3720      	adds	r7, #32
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b083      	sub	sp, #12
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b562:	bf00      	nop
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b576:	bf00      	nop
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b582:	b480      	push	{r7}
 800b584:	b083      	sub	sp, #12
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b58a:	bf00      	nop
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b596:	b480      	push	{r7}
 800b598:	b085      	sub	sp, #20
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d101      	bne.n	800b5ac <HAL_UARTEx_DisableFifoMode+0x16>
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	e027      	b.n	800b5fc <HAL_UARTEx_DisableFifoMode+0x66>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2224      	movs	r2, #36	@ 0x24
 800b5b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f022 0201 	bic.w	r2, r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b5da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3714      	adds	r7, #20
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d101      	bne.n	800b620 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b61c:	2302      	movs	r3, #2
 800b61e:	e02d      	b.n	800b67c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2224      	movs	r2, #36	@ 0x24
 800b62c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f022 0201 	bic.w	r2, r2, #1
 800b646:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	430a      	orrs	r2, r1
 800b65a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f84f 	bl	800b700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2220      	movs	r2, #32
 800b66e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b694:	2b01      	cmp	r3, #1
 800b696:	d101      	bne.n	800b69c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b698:	2302      	movs	r3, #2
 800b69a:	e02d      	b.n	800b6f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2224      	movs	r2, #36	@ 0x24
 800b6a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f022 0201 	bic.w	r2, r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	430a      	orrs	r2, r1
 800b6d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f811 	bl	800b700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2220      	movs	r2, #32
 800b6ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d108      	bne.n	800b722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b720:	e031      	b.n	800b786 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b722:	2310      	movs	r3, #16
 800b724:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b726:	2310      	movs	r3, #16
 800b728:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	0e5b      	lsrs	r3, r3, #25
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f003 0307 	and.w	r3, r3, #7
 800b738:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	0f5b      	lsrs	r3, r3, #29
 800b742:	b2db      	uxtb	r3, r3
 800b744:	f003 0307 	and.w	r3, r3, #7
 800b748:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b74a:	7bbb      	ldrb	r3, [r7, #14]
 800b74c:	7b3a      	ldrb	r2, [r7, #12]
 800b74e:	4911      	ldr	r1, [pc, #68]	@ (800b794 <UARTEx_SetNbDataToProcess+0x94>)
 800b750:	5c8a      	ldrb	r2, [r1, r2]
 800b752:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b756:	7b3a      	ldrb	r2, [r7, #12]
 800b758:	490f      	ldr	r1, [pc, #60]	@ (800b798 <UARTEx_SetNbDataToProcess+0x98>)
 800b75a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b75c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b760:	b29a      	uxth	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b768:	7bfb      	ldrb	r3, [r7, #15]
 800b76a:	7b7a      	ldrb	r2, [r7, #13]
 800b76c:	4909      	ldr	r1, [pc, #36]	@ (800b794 <UARTEx_SetNbDataToProcess+0x94>)
 800b76e:	5c8a      	ldrb	r2, [r1, r2]
 800b770:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b774:	7b7a      	ldrb	r2, [r7, #13]
 800b776:	4908      	ldr	r1, [pc, #32]	@ (800b798 <UARTEx_SetNbDataToProcess+0x98>)
 800b778:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b77a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b77e:	b29a      	uxth	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b786:	bf00      	nop
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	080190d4 	.word	0x080190d4
 800b798:	080190dc 	.word	0x080190dc

0800b79c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b79c:	b084      	sub	sp, #16
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b084      	sub	sp, #16
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	f107 001c 	add.w	r0, r7, #28
 800b7aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d121      	bne.n	800b7fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68da      	ldr	r2, [r3, #12]
 800b7c6:	4b2c      	ldr	r3, [pc, #176]	@ (800b878 <USB_CoreInit+0xdc>)
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b7da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d105      	bne.n	800b7ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 faaa 	bl	800bd48 <USB_CoreReset>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73fb      	strb	r3, [r7, #15]
 800b7f8:	e01b      	b.n	800b832 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fa9e 	bl	800bd48 <USB_CoreReset>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b810:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b814:	2b00      	cmp	r3, #0
 800b816:	d106      	bne.n	800b826 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	639a      	str	r2, [r3, #56]	@ 0x38
 800b824:	e005      	b.n	800b832 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b82a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b832:	7fbb      	ldrb	r3, [r7, #30]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d116      	bne.n	800b866 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b846:	4b0d      	ldr	r3, [pc, #52]	@ (800b87c <USB_CoreInit+0xe0>)
 800b848:	4313      	orrs	r3, r2
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	f043 0206 	orr.w	r2, r3, #6
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	f043 0220 	orr.w	r2, r3, #32
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b866:	7bfb      	ldrb	r3, [r7, #15]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3710      	adds	r7, #16
 800b86c:	46bd      	mov	sp, r7
 800b86e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b872:	b004      	add	sp, #16
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	ffbdffbf 	.word	0xffbdffbf
 800b87c:	03ee0000 	.word	0x03ee0000

0800b880 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	f023 0201 	bic.w	r2, r3, #1
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b084      	sub	sp, #16
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b8be:	78fb      	ldrb	r3, [r7, #3]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d115      	bne.n	800b8f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b8d0:	200a      	movs	r0, #10
 800b8d2:	f7f6 fded 	bl	80024b0 <HAL_Delay>
      ms += 10U;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	330a      	adds	r3, #10
 800b8da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fa25 	bl	800bd2c <USB_GetMode>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d01e      	beq.n	800b926 <USB_SetCurrentMode+0x84>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2bc7      	cmp	r3, #199	@ 0xc7
 800b8ec:	d9f0      	bls.n	800b8d0 <USB_SetCurrentMode+0x2e>
 800b8ee:	e01a      	b.n	800b926 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b8f0:	78fb      	ldrb	r3, [r7, #3]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d115      	bne.n	800b922 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b902:	200a      	movs	r0, #10
 800b904:	f7f6 fdd4 	bl	80024b0 <HAL_Delay>
      ms += 10U;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	330a      	adds	r3, #10
 800b90c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fa0c 	bl	800bd2c <USB_GetMode>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d005      	beq.n	800b926 <USB_SetCurrentMode+0x84>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2bc7      	cmp	r3, #199	@ 0xc7
 800b91e:	d9f0      	bls.n	800b902 <USB_SetCurrentMode+0x60>
 800b920:	e001      	b.n	800b926 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e005      	b.n	800b932 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2bc8      	cmp	r3, #200	@ 0xc8
 800b92a:	d101      	bne.n	800b930 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e000      	b.n	800b932 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
	...

0800b93c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b93c:	b084      	sub	sp, #16
 800b93e:	b580      	push	{r7, lr}
 800b940:	b086      	sub	sp, #24
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b94a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b956:	2300      	movs	r3, #0
 800b958:	613b      	str	r3, [r7, #16]
 800b95a:	e009      	b.n	800b970 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	3340      	adds	r3, #64	@ 0x40
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	2200      	movs	r2, #0
 800b968:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	3301      	adds	r3, #1
 800b96e:	613b      	str	r3, [r7, #16]
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2b0e      	cmp	r3, #14
 800b974:	d9f2      	bls.n	800b95c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b976:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d11c      	bne.n	800b9b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b98c:	f043 0302 	orr.w	r3, r3, #2
 800b990:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b996:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	e005      	b.n	800b9c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d10d      	bne.n	800b9f4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d104      	bne.n	800b9ea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f968 	bl	800bcb8 <USB_SetDevSpeed>
 800b9e8:	e008      	b.n	800b9fc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f963 	bl	800bcb8 <USB_SetDevSpeed>
 800b9f2:	e003      	b.n	800b9fc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b9f4:	2103      	movs	r1, #3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f95e 	bl	800bcb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b9fc:	2110      	movs	r1, #16
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f8fa 	bl	800bbf8 <USB_FlushTxFifo>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f924 	bl	800bc5c <USB_FlushRxFifo>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba24:	461a      	mov	r2, r3
 800ba26:	2300      	movs	r3, #0
 800ba28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba30:	461a      	mov	r2, r3
 800ba32:	2300      	movs	r3, #0
 800ba34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	2300      	movs	r3, #0
 800ba40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba42:	2300      	movs	r3, #0
 800ba44:	613b      	str	r3, [r7, #16]
 800ba46:	e043      	b.n	800bad0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba5e:	d118      	bne.n	800ba92 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba72:	461a      	mov	r2, r3
 800ba74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ba78:	6013      	str	r3, [r2, #0]
 800ba7a:	e013      	b.n	800baa4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba88:	461a      	mov	r2, r3
 800ba8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	e008      	b.n	800baa4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	015a      	lsls	r2, r3, #5
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	4413      	add	r3, r2
 800ba9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba9e:	461a      	mov	r2, r3
 800baa0:	2300      	movs	r3, #0
 800baa2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	015a      	lsls	r2, r3, #5
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	4413      	add	r3, r2
 800baac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bab0:	461a      	mov	r2, r3
 800bab2:	2300      	movs	r3, #0
 800bab4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	4413      	add	r3, r2
 800babe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bac2:	461a      	mov	r2, r3
 800bac4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bac8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	3301      	adds	r3, #1
 800bace:	613b      	str	r3, [r7, #16]
 800bad0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bad4:	461a      	mov	r2, r3
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	4293      	cmp	r3, r2
 800bada:	d3b5      	bcc.n	800ba48 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800badc:	2300      	movs	r3, #0
 800bade:	613b      	str	r3, [r7, #16]
 800bae0:	e043      	b.n	800bb6a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800baf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800baf8:	d118      	bne.n	800bb2c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	e013      	b.n	800bb3e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	015a      	lsls	r2, r3, #5
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb22:	461a      	mov	r2, r3
 800bb24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bb28:	6013      	str	r3, [r2, #0]
 800bb2a:	e008      	b.n	800bb3e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	015a      	lsls	r2, r3, #5
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	4413      	add	r3, r2
 800bb34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb38:	461a      	mov	r2, r3
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	015a      	lsls	r2, r3, #5
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4413      	add	r3, r2
 800bb46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	3301      	adds	r3, #1
 800bb68:	613b      	str	r3, [r7, #16]
 800bb6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bb6e:	461a      	mov	r2, r3
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d3b5      	bcc.n	800bae2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bb96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d105      	bne.n	800bbac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	f043 0210 	orr.w	r2, r3, #16
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	699a      	ldr	r2, [r3, #24]
 800bbb0:	4b0f      	ldr	r3, [pc, #60]	@ (800bbf0 <USB_DevInit+0x2b4>)
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bbb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	f043 0208 	orr.w	r2, r3, #8
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbcc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d105      	bne.n	800bbe0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	699a      	ldr	r2, [r3, #24]
 800bbd8:	4b06      	ldr	r3, [pc, #24]	@ (800bbf4 <USB_DevInit+0x2b8>)
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbec:	b004      	add	sp, #16
 800bbee:	4770      	bx	lr
 800bbf0:	803c3800 	.word	0x803c3800
 800bbf4:	40000004 	.word	0x40000004

0800bbf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc02:	2300      	movs	r3, #0
 800bc04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc12:	d901      	bls.n	800bc18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e01b      	b.n	800bc50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	daf2      	bge.n	800bc06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	019b      	lsls	r3, r3, #6
 800bc28:	f043 0220 	orr.w	r2, r3, #32
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	3301      	adds	r3, #1
 800bc34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc3c:	d901      	bls.n	800bc42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e006      	b.n	800bc50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f003 0320 	and.w	r3, r3, #32
 800bc4a:	2b20      	cmp	r3, #32
 800bc4c:	d0f0      	beq.n	800bc30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc64:	2300      	movs	r3, #0
 800bc66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc74:	d901      	bls.n	800bc7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bc76:	2303      	movs	r3, #3
 800bc78:	e018      	b.n	800bcac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	daf2      	bge.n	800bc68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2210      	movs	r2, #16
 800bc8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc98:	d901      	bls.n	800bc9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e006      	b.n	800bcac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	f003 0310 	and.w	r3, r3, #16
 800bca6:	2b10      	cmp	r3, #16
 800bca8:	d0f0      	beq.n	800bc8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	68f9      	ldr	r1, [r7, #12]
 800bcd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b085      	sub	sp, #20
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bd04:	f023 0303 	bic.w	r3, r3, #3
 800bd08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd18:	f043 0302 	orr.w	r3, r3, #2
 800bd1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	695b      	ldr	r3, [r3, #20]
 800bd38:	f003 0301 	and.w	r3, r3, #1
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd50:	2300      	movs	r3, #0
 800bd52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	3301      	adds	r3, #1
 800bd58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd60:	d901      	bls.n	800bd66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd62:	2303      	movs	r3, #3
 800bd64:	e01b      	b.n	800bd9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	daf2      	bge.n	800bd54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	f043 0201 	orr.w	r2, r3, #1
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd8a:	d901      	bls.n	800bd90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	e006      	b.n	800bd9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d0f0      	beq.n	800bd7e <USB_CoreReset+0x36>

  return HAL_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
	...

0800bdac <__NVIC_SetPriority>:
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	6039      	str	r1, [r7, #0]
 800bdb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bdb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	db0a      	blt.n	800bdd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	490c      	ldr	r1, [pc, #48]	@ (800bdf8 <__NVIC_SetPriority+0x4c>)
 800bdc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdca:	0112      	lsls	r2, r2, #4
 800bdcc:	b2d2      	uxtb	r2, r2
 800bdce:	440b      	add	r3, r1
 800bdd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bdd4:	e00a      	b.n	800bdec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	4908      	ldr	r1, [pc, #32]	@ (800bdfc <__NVIC_SetPriority+0x50>)
 800bddc:	88fb      	ldrh	r3, [r7, #6]
 800bdde:	f003 030f 	and.w	r3, r3, #15
 800bde2:	3b04      	subs	r3, #4
 800bde4:	0112      	lsls	r2, r2, #4
 800bde6:	b2d2      	uxtb	r2, r2
 800bde8:	440b      	add	r3, r1
 800bdea:	761a      	strb	r2, [r3, #24]
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	e000e100 	.word	0xe000e100
 800bdfc:	e000ed00 	.word	0xe000ed00

0800be00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800be00:	b580      	push	{r7, lr}
 800be02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800be04:	4b05      	ldr	r3, [pc, #20]	@ (800be1c <SysTick_Handler+0x1c>)
 800be06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800be08:	f001 fd6e 	bl	800d8e8 <xTaskGetSchedulerState>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d001      	beq.n	800be16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800be12:	f002 fb69 	bl	800e4e8 <xPortSysTickHandler>
  }
}
 800be16:	bf00      	nop
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	e000e010 	.word	0xe000e010

0800be20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be20:	b580      	push	{r7, lr}
 800be22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be24:	2100      	movs	r1, #0
 800be26:	f06f 0004 	mvn.w	r0, #4
 800be2a:	f7ff ffbf 	bl	800bdac <__NVIC_SetPriority>
#endif
}
 800be2e:	bf00      	nop
 800be30:	bd80      	pop	{r7, pc}
	...

0800be34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be3a:	f3ef 8305 	mrs	r3, IPSR
 800be3e:	603b      	str	r3, [r7, #0]
  return(result);
 800be40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be42:	2b00      	cmp	r3, #0
 800be44:	d003      	beq.n	800be4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be46:	f06f 0305 	mvn.w	r3, #5
 800be4a:	607b      	str	r3, [r7, #4]
 800be4c:	e00c      	b.n	800be68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be4e:	4b0a      	ldr	r3, [pc, #40]	@ (800be78 <osKernelInitialize+0x44>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d105      	bne.n	800be62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800be56:	4b08      	ldr	r3, [pc, #32]	@ (800be78 <osKernelInitialize+0x44>)
 800be58:	2201      	movs	r2, #1
 800be5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be5c:	2300      	movs	r3, #0
 800be5e:	607b      	str	r3, [r7, #4]
 800be60:	e002      	b.n	800be68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be68:	687b      	ldr	r3, [r7, #4]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	24031f10 	.word	0x24031f10

0800be7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be82:	f3ef 8305 	mrs	r3, IPSR
 800be86:	603b      	str	r3, [r7, #0]
  return(result);
 800be88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d003      	beq.n	800be96 <osKernelStart+0x1a>
    stat = osErrorISR;
 800be8e:	f06f 0305 	mvn.w	r3, #5
 800be92:	607b      	str	r3, [r7, #4]
 800be94:	e010      	b.n	800beb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800be96:	4b0b      	ldr	r3, [pc, #44]	@ (800bec4 <osKernelStart+0x48>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d109      	bne.n	800beb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800be9e:	f7ff ffbf 	bl	800be20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bea2:	4b08      	ldr	r3, [pc, #32]	@ (800bec4 <osKernelStart+0x48>)
 800bea4:	2202      	movs	r2, #2
 800bea6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bea8:	f001 f892 	bl	800cfd0 <vTaskStartScheduler>
      stat = osOK;
 800beac:	2300      	movs	r3, #0
 800beae:	607b      	str	r3, [r7, #4]
 800beb0:	e002      	b.n	800beb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800beb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800beb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800beb8:	687b      	ldr	r3, [r7, #4]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	24031f10 	.word	0x24031f10

0800bec8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08e      	sub	sp, #56	@ 0x38
 800becc:	af04      	add	r7, sp, #16
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bed4:	2300      	movs	r3, #0
 800bed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bed8:	f3ef 8305 	mrs	r3, IPSR
 800bedc:	617b      	str	r3, [r7, #20]
  return(result);
 800bede:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d17e      	bne.n	800bfe2 <osThreadNew+0x11a>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d07b      	beq.n	800bfe2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800beea:	2380      	movs	r3, #128	@ 0x80
 800beec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800beee:	2318      	movs	r3, #24
 800bef0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800befa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d045      	beq.n	800bf8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <osThreadNew+0x48>
        name = attr->name;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	699b      	ldr	r3, [r3, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d008      	beq.n	800bf36 <osThreadNew+0x6e>
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	2b38      	cmp	r3, #56	@ 0x38
 800bf28:	d805      	bhi.n	800bf36 <osThreadNew+0x6e>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d001      	beq.n	800bf3a <osThreadNew+0x72>
        return (NULL);
 800bf36:	2300      	movs	r3, #0
 800bf38:	e054      	b.n	800bfe4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	089b      	lsrs	r3, r3, #2
 800bf48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00e      	beq.n	800bf70 <osThreadNew+0xa8>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	2ba7      	cmp	r3, #167	@ 0xa7
 800bf58:	d90a      	bls.n	800bf70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d006      	beq.n	800bf70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <osThreadNew+0xa8>
        mem = 1;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	61bb      	str	r3, [r7, #24]
 800bf6e:	e010      	b.n	800bf92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10c      	bne.n	800bf92 <osThreadNew+0xca>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d108      	bne.n	800bf92 <osThreadNew+0xca>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d104      	bne.n	800bf92 <osThreadNew+0xca>
          mem = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	61bb      	str	r3, [r7, #24]
 800bf8c:	e001      	b.n	800bf92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d110      	bne.n	800bfba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfa0:	9202      	str	r2, [sp, #8]
 800bfa2:	9301      	str	r3, [sp, #4]
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	6a3a      	ldr	r2, [r7, #32]
 800bfac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f000 fe1a 	bl	800cbe8 <xTaskCreateStatic>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	613b      	str	r3, [r7, #16]
 800bfb8:	e013      	b.n	800bfe2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d110      	bne.n	800bfe2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bfc0:	6a3b      	ldr	r3, [r7, #32]
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	f107 0310 	add.w	r3, r7, #16
 800bfc8:	9301      	str	r3, [sp, #4]
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 fe68 	bl	800cca8 <xTaskCreate>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d001      	beq.n	800bfe2 <osThreadNew+0x11a>
            hTask = NULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bfe2:	693b      	ldr	r3, [r7, #16]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3728      	adds	r7, #40	@ 0x28
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bff4:	f3ef 8305 	mrs	r3, IPSR
 800bff8:	60bb      	str	r3, [r7, #8]
  return(result);
 800bffa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d003      	beq.n	800c008 <osDelay+0x1c>
    stat = osErrorISR;
 800c000:	f06f 0305 	mvn.w	r3, #5
 800c004:	60fb      	str	r3, [r7, #12]
 800c006:	e007      	b.n	800c018 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c008:	2300      	movs	r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d002      	beq.n	800c018 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 ffa6 	bl	800cf64 <vTaskDelay>
    }
  }

  return (stat);
 800c018:	68fb      	ldr	r3, [r7, #12]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	4a07      	ldr	r2, [pc, #28]	@ (800c050 <vApplicationGetIdleTaskMemory+0x2c>)
 800c034:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	4a06      	ldr	r2, [pc, #24]	@ (800c054 <vApplicationGetIdleTaskMemory+0x30>)
 800c03a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2280      	movs	r2, #128	@ 0x80
 800c040:	601a      	str	r2, [r3, #0]
}
 800c042:	bf00      	nop
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	24031f14 	.word	0x24031f14
 800c054:	24031fbc 	.word	0x24031fbc

0800c058 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	4a07      	ldr	r2, [pc, #28]	@ (800c084 <vApplicationGetTimerTaskMemory+0x2c>)
 800c068:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	4a06      	ldr	r2, [pc, #24]	@ (800c088 <vApplicationGetTimerTaskMemory+0x30>)
 800c06e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c076:	601a      	str	r2, [r3, #0]
}
 800c078:	bf00      	nop
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	240321bc 	.word	0x240321bc
 800c088:	24032264 	.word	0x24032264

0800c08c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f103 0208 	add.w	r2, r3, #8
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c0a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f103 0208 	add.w	r2, r3, #8
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f103 0208 	add.w	r2, r3, #8
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c0da:	bf00      	nop
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b085      	sub	sp, #20
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	689a      	ldr	r2, [r3, #8]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	601a      	str	r2, [r3, #0]
}
 800c122:	bf00      	nop
 800c124:	3714      	adds	r7, #20
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr

0800c12e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c12e:	b480      	push	{r7}
 800c130:	b085      	sub	sp, #20
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c144:	d103      	bne.n	800c14e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e00c      	b.n	800c168 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3308      	adds	r3, #8
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	e002      	b.n	800c15c <vListInsert+0x2e>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	60fb      	str	r3, [r7, #12]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	429a      	cmp	r2, r3
 800c166:	d2f6      	bcs.n	800c156 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	683a      	ldr	r2, [r7, #0]
 800c176:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	1c5a      	adds	r2, r3, #1
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	601a      	str	r2, [r3, #0]
}
 800c194:	bf00      	nop
 800c196:	3714      	adds	r7, #20
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	6892      	ldr	r2, [r2, #8]
 800c1b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	6852      	ldr	r2, [r2, #4]
 800c1c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d103      	bne.n	800c1d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689a      	ldr	r2, [r3, #8]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	1e5a      	subs	r2, r3, #1
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10b      	bne.n	800c220 <xQueueGenericReset+0x2c>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	60bb      	str	r3, [r7, #8]
}
 800c21a:	bf00      	nop
 800c21c:	bf00      	nop
 800c21e:	e7fd      	b.n	800c21c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c220:	f002 f8d2 	bl	800e3c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c22c:	68f9      	ldr	r1, [r7, #12]
 800c22e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c230:	fb01 f303 	mul.w	r3, r1, r3
 800c234:	441a      	add	r2, r3
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c250:	3b01      	subs	r3, #1
 800c252:	68f9      	ldr	r1, [r7, #12]
 800c254:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c256:	fb01 f303 	mul.w	r3, r1, r3
 800c25a:	441a      	add	r2, r3
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	22ff      	movs	r2, #255	@ 0xff
 800c264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	22ff      	movs	r2, #255	@ 0xff
 800c26c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d114      	bne.n	800c2a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d01a      	beq.n	800c2b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3310      	adds	r3, #16
 800c282:	4618      	mov	r0, r3
 800c284:	f001 f942 	bl	800d50c <xTaskRemoveFromEventList>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d012      	beq.n	800c2b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c28e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c4 <xQueueGenericReset+0xd0>)
 800c290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c294:	601a      	str	r2, [r3, #0]
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	e009      	b.n	800c2b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3310      	adds	r3, #16
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff fef1 	bl	800c08c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	3324      	adds	r3, #36	@ 0x24
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7ff feec 	bl	800c08c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c2b4:	f002 f8ba 	bl	800e42c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c2b8:	2301      	movs	r3, #1
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	e000ed04 	.word	0xe000ed04

0800c2c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08e      	sub	sp, #56	@ 0x38
 800c2cc:	af02      	add	r7, sp, #8
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d10b      	bne.n	800c2f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c2ee:	bf00      	nop
 800c2f0:	bf00      	nop
 800c2f2:	e7fd      	b.n	800c2f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10b      	bne.n	800c312 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c30c:	bf00      	nop
 800c30e:	bf00      	nop
 800c310:	e7fd      	b.n	800c30e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d002      	beq.n	800c31e <xQueueGenericCreateStatic+0x56>
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <xQueueGenericCreateStatic+0x5a>
 800c31e:	2301      	movs	r3, #1
 800c320:	e000      	b.n	800c324 <xQueueGenericCreateStatic+0x5c>
 800c322:	2300      	movs	r3, #0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10b      	bne.n	800c340 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32c:	f383 8811 	msr	BASEPRI, r3
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	623b      	str	r3, [r7, #32]
}
 800c33a:	bf00      	nop
 800c33c:	bf00      	nop
 800c33e:	e7fd      	b.n	800c33c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d102      	bne.n	800c34c <xQueueGenericCreateStatic+0x84>
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <xQueueGenericCreateStatic+0x88>
 800c34c:	2301      	movs	r3, #1
 800c34e:	e000      	b.n	800c352 <xQueueGenericCreateStatic+0x8a>
 800c350:	2300      	movs	r3, #0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10b      	bne.n	800c36e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	61fb      	str	r3, [r7, #28]
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	e7fd      	b.n	800c36a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c36e:	2350      	movs	r3, #80	@ 0x50
 800c370:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2b50      	cmp	r3, #80	@ 0x50
 800c376:	d00b      	beq.n	800c390 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	61bb      	str	r3, [r7, #24]
}
 800c38a:	bf00      	nop
 800c38c:	bf00      	nop
 800c38e:	e7fd      	b.n	800c38c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c390:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00d      	beq.n	800c3b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	68b9      	ldr	r1, [r7, #8]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f000 f805 	bl	800c3c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3730      	adds	r7, #48	@ 0x30
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
 800c3ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d103      	bne.n	800c3de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	e002      	b.n	800c3e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	69b8      	ldr	r0, [r7, #24]
 800c3f4:	f7ff fefe 	bl	800c1f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	78fa      	ldrb	r2, [r7, #3]
 800c3fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c400:	bf00      	nop
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b08e      	sub	sp, #56	@ 0x38
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c416:	2300      	movs	r3, #0
 800c418:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10b      	bne.n	800c43c <xQueueGenericSend+0x34>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c436:	bf00      	nop
 800c438:	bf00      	nop
 800c43a:	e7fd      	b.n	800c438 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d103      	bne.n	800c44a <xQueueGenericSend+0x42>
 800c442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <xQueueGenericSend+0x46>
 800c44a:	2301      	movs	r3, #1
 800c44c:	e000      	b.n	800c450 <xQueueGenericSend+0x48>
 800c44e:	2300      	movs	r3, #0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10b      	bne.n	800c46c <xQueueGenericSend+0x64>
	__asm volatile
 800c454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c458:	f383 8811 	msr	BASEPRI, r3
 800c45c:	f3bf 8f6f 	isb	sy
 800c460:	f3bf 8f4f 	dsb	sy
 800c464:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c466:	bf00      	nop
 800c468:	bf00      	nop
 800c46a:	e7fd      	b.n	800c468 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d103      	bne.n	800c47a <xQueueGenericSend+0x72>
 800c472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c476:	2b01      	cmp	r3, #1
 800c478:	d101      	bne.n	800c47e <xQueueGenericSend+0x76>
 800c47a:	2301      	movs	r3, #1
 800c47c:	e000      	b.n	800c480 <xQueueGenericSend+0x78>
 800c47e:	2300      	movs	r3, #0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10b      	bne.n	800c49c <xQueueGenericSend+0x94>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	623b      	str	r3, [r7, #32]
}
 800c496:	bf00      	nop
 800c498:	bf00      	nop
 800c49a:	e7fd      	b.n	800c498 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c49c:	f001 fa24 	bl	800d8e8 <xTaskGetSchedulerState>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d102      	bne.n	800c4ac <xQueueGenericSend+0xa4>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d101      	bne.n	800c4b0 <xQueueGenericSend+0xa8>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e000      	b.n	800c4b2 <xQueueGenericSend+0xaa>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10b      	bne.n	800c4ce <xQueueGenericSend+0xc6>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	61fb      	str	r3, [r7, #28]
}
 800c4c8:	bf00      	nop
 800c4ca:	bf00      	nop
 800c4cc:	e7fd      	b.n	800c4ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4ce:	f001 ff7b 	bl	800e3c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d302      	bcc.n	800c4e4 <xQueueGenericSend+0xdc>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d129      	bne.n	800c538 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	68b9      	ldr	r1, [r7, #8]
 800c4e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4ea:	f000 fa0f 	bl	800c90c <prvCopyDataToQueue>
 800c4ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d010      	beq.n	800c51a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fa:	3324      	adds	r3, #36	@ 0x24
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 f805 	bl	800d50c <xTaskRemoveFromEventList>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d013      	beq.n	800c530 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c508:	4b3f      	ldr	r3, [pc, #252]	@ (800c608 <xQueueGenericSend+0x200>)
 800c50a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c50e:	601a      	str	r2, [r3, #0]
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	e00a      	b.n	800c530 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d007      	beq.n	800c530 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c520:	4b39      	ldr	r3, [pc, #228]	@ (800c608 <xQueueGenericSend+0x200>)
 800c522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c530:	f001 ff7c 	bl	800e42c <vPortExitCritical>
				return pdPASS;
 800c534:	2301      	movs	r3, #1
 800c536:	e063      	b.n	800c600 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d103      	bne.n	800c546 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c53e:	f001 ff75 	bl	800e42c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c542:	2300      	movs	r3, #0
 800c544:	e05c      	b.n	800c600 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d106      	bne.n	800c55a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c54c:	f107 0314 	add.w	r3, r7, #20
 800c550:	4618      	mov	r0, r3
 800c552:	f001 f867 	bl	800d624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c556:	2301      	movs	r3, #1
 800c558:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c55a:	f001 ff67 	bl	800e42c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c55e:	f000 fda7 	bl	800d0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c562:	f001 ff31 	bl	800e3c8 <vPortEnterCritical>
 800c566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c56c:	b25b      	sxtb	r3, r3
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c572:	d103      	bne.n	800c57c <xQueueGenericSend+0x174>
 800c574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c582:	b25b      	sxtb	r3, r3
 800c584:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c588:	d103      	bne.n	800c592 <xQueueGenericSend+0x18a>
 800c58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c592:	f001 ff4b 	bl	800e42c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c596:	1d3a      	adds	r2, r7, #4
 800c598:	f107 0314 	add.w	r3, r7, #20
 800c59c:	4611      	mov	r1, r2
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f001 f856 	bl	800d650 <xTaskCheckForTimeOut>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d124      	bne.n	800c5f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ac:	f000 faa6 	bl	800cafc <prvIsQueueFull>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d018      	beq.n	800c5e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	3310      	adds	r3, #16
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	4611      	mov	r1, r2
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 ff52 	bl	800d468 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5c6:	f000 fa31 	bl	800ca2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5ca:	f000 fd7f 	bl	800d0cc <xTaskResumeAll>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f47f af7c 	bne.w	800c4ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c5d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c608 <xQueueGenericSend+0x200>)
 800c5d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	e772      	b.n	800c4ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c5e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ea:	f000 fa1f 	bl	800ca2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5ee:	f000 fd6d 	bl	800d0cc <xTaskResumeAll>
 800c5f2:	e76c      	b.n	800c4ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c5f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5f6:	f000 fa19 	bl	800ca2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5fa:	f000 fd67 	bl	800d0cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c5fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c600:	4618      	mov	r0, r3
 800c602:	3738      	adds	r7, #56	@ 0x38
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	e000ed04 	.word	0xe000ed04

0800c60c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b090      	sub	sp, #64	@ 0x40
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
 800c618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10b      	bne.n	800c63c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c636:	bf00      	nop
 800c638:	bf00      	nop
 800c63a:	e7fd      	b.n	800c638 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <xQueueGenericSendFromISR+0x3e>
 800c642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <xQueueGenericSendFromISR+0x42>
 800c64a:	2301      	movs	r3, #1
 800c64c:	e000      	b.n	800c650 <xQueueGenericSendFromISR+0x44>
 800c64e:	2300      	movs	r3, #0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10b      	bne.n	800c66c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c666:	bf00      	nop
 800c668:	bf00      	nop
 800c66a:	e7fd      	b.n	800c668 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d103      	bne.n	800c67a <xQueueGenericSendFromISR+0x6e>
 800c672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c676:	2b01      	cmp	r3, #1
 800c678:	d101      	bne.n	800c67e <xQueueGenericSendFromISR+0x72>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e000      	b.n	800c680 <xQueueGenericSendFromISR+0x74>
 800c67e:	2300      	movs	r3, #0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10b      	bne.n	800c69c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	623b      	str	r3, [r7, #32]
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	e7fd      	b.n	800c698 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c69c:	f001 ff74 	bl	800e588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c6a0:	f3ef 8211 	mrs	r2, BASEPRI
 800c6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	61fa      	str	r2, [r7, #28]
 800c6b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c6b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d302      	bcc.n	800c6ce <xQueueGenericSendFromISR+0xc2>
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	d12f      	bne.n	800c72e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	68b9      	ldr	r1, [r7, #8]
 800c6e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c6e4:	f000 f912 	bl	800c90c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c6e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c6ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6f0:	d112      	bne.n	800c718 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d016      	beq.n	800c728 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fc:	3324      	adds	r3, #36	@ 0x24
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 ff04 	bl	800d50c <xTaskRemoveFromEventList>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00e      	beq.n	800c728 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00b      	beq.n	800c728 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	601a      	str	r2, [r3, #0]
 800c716:	e007      	b.n	800c728 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c71c:	3301      	adds	r3, #1
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	b25a      	sxtb	r2, r3
 800c722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c728:	2301      	movs	r3, #1
 800c72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c72c:	e001      	b.n	800c732 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c72e:	2300      	movs	r3, #0
 800c730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c734:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c73c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c740:	4618      	mov	r0, r3
 800c742:	3740      	adds	r7, #64	@ 0x40
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b08c      	sub	sp, #48	@ 0x30
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c754:	2300      	movs	r3, #0
 800c756:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10b      	bne.n	800c77a <xQueueReceive+0x32>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	623b      	str	r3, [r7, #32]
}
 800c774:	bf00      	nop
 800c776:	bf00      	nop
 800c778:	e7fd      	b.n	800c776 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d103      	bne.n	800c788 <xQueueReceive+0x40>
 800c780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c784:	2b00      	cmp	r3, #0
 800c786:	d101      	bne.n	800c78c <xQueueReceive+0x44>
 800c788:	2301      	movs	r3, #1
 800c78a:	e000      	b.n	800c78e <xQueueReceive+0x46>
 800c78c:	2300      	movs	r3, #0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10b      	bne.n	800c7aa <xQueueReceive+0x62>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	61fb      	str	r3, [r7, #28]
}
 800c7a4:	bf00      	nop
 800c7a6:	bf00      	nop
 800c7a8:	e7fd      	b.n	800c7a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7aa:	f001 f89d 	bl	800d8e8 <xTaskGetSchedulerState>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d102      	bne.n	800c7ba <xQueueReceive+0x72>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <xQueueReceive+0x76>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e000      	b.n	800c7c0 <xQueueReceive+0x78>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10b      	bne.n	800c7dc <xQueueReceive+0x94>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	61bb      	str	r3, [r7, #24]
}
 800c7d6:	bf00      	nop
 800c7d8:	bf00      	nop
 800c7da:	e7fd      	b.n	800c7d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7dc:	f001 fdf4 	bl	800e3c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d01f      	beq.n	800c82c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7ec:	68b9      	ldr	r1, [r7, #8]
 800c7ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7f0:	f000 f8f6 	bl	800c9e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f6:	1e5a      	subs	r2, r3, #1
 800c7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00f      	beq.n	800c824 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c806:	3310      	adds	r3, #16
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 fe7f 	bl	800d50c <xTaskRemoveFromEventList>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d007      	beq.n	800c824 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c814:	4b3c      	ldr	r3, [pc, #240]	@ (800c908 <xQueueReceive+0x1c0>)
 800c816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c824:	f001 fe02 	bl	800e42c <vPortExitCritical>
				return pdPASS;
 800c828:	2301      	movs	r3, #1
 800c82a:	e069      	b.n	800c900 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d103      	bne.n	800c83a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c832:	f001 fdfb 	bl	800e42c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c836:	2300      	movs	r3, #0
 800c838:	e062      	b.n	800c900 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d106      	bne.n	800c84e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c840:	f107 0310 	add.w	r3, r7, #16
 800c844:	4618      	mov	r0, r3
 800c846:	f000 feed 	bl	800d624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c84a:	2301      	movs	r3, #1
 800c84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c84e:	f001 fded 	bl	800e42c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c852:	f000 fc2d 	bl	800d0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c856:	f001 fdb7 	bl	800e3c8 <vPortEnterCritical>
 800c85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c860:	b25b      	sxtb	r3, r3
 800c862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c866:	d103      	bne.n	800c870 <xQueueReceive+0x128>
 800c868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c876:	b25b      	sxtb	r3, r3
 800c878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c87c:	d103      	bne.n	800c886 <xQueueReceive+0x13e>
 800c87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c880:	2200      	movs	r2, #0
 800c882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c886:	f001 fdd1 	bl	800e42c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c88a:	1d3a      	adds	r2, r7, #4
 800c88c:	f107 0310 	add.w	r3, r7, #16
 800c890:	4611      	mov	r1, r2
 800c892:	4618      	mov	r0, r3
 800c894:	f000 fedc 	bl	800d650 <xTaskCheckForTimeOut>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d123      	bne.n	800c8e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c89e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8a0:	f000 f916 	bl	800cad0 <prvIsQueueEmpty>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d017      	beq.n	800c8da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ac:	3324      	adds	r3, #36	@ 0x24
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 fdd8 	bl	800d468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8ba:	f000 f8b7 	bl	800ca2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8be:	f000 fc05 	bl	800d0cc <xTaskResumeAll>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d189      	bne.n	800c7dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c8c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c908 <xQueueReceive+0x1c0>)
 800c8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8ce:	601a      	str	r2, [r3, #0]
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	e780      	b.n	800c7dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c8da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8dc:	f000 f8a6 	bl	800ca2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8e0:	f000 fbf4 	bl	800d0cc <xTaskResumeAll>
 800c8e4:	e77a      	b.n	800c7dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c8e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8e8:	f000 f8a0 	bl	800ca2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8ec:	f000 fbee 	bl	800d0cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8f2:	f000 f8ed 	bl	800cad0 <prvIsQueueEmpty>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f43f af6f 	beq.w	800c7dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c900:	4618      	mov	r0, r3
 800c902:	3730      	adds	r7, #48	@ 0x30
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c918:	2300      	movs	r3, #0
 800c91a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10d      	bne.n	800c946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d14d      	bne.n	800c9ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	4618      	mov	r0, r3
 800c938:	f000 fff4 	bl	800d924 <xTaskPriorityDisinherit>
 800c93c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	609a      	str	r2, [r3, #8]
 800c944:	e043      	b.n	800c9ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d119      	bne.n	800c980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6858      	ldr	r0, [r3, #4]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c954:	461a      	mov	r2, r3
 800c956:	68b9      	ldr	r1, [r7, #8]
 800c958:	f00b fc55 	bl	8018206 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	685a      	ldr	r2, [r3, #4]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c964:	441a      	add	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	429a      	cmp	r2, r3
 800c974:	d32b      	bcc.n	800c9ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	605a      	str	r2, [r3, #4]
 800c97e:	e026      	b.n	800c9ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	68d8      	ldr	r0, [r3, #12]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c988:	461a      	mov	r2, r3
 800c98a:	68b9      	ldr	r1, [r7, #8]
 800c98c:	f00b fc3b 	bl	8018206 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	68da      	ldr	r2, [r3, #12]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c998:	425b      	negs	r3, r3
 800c99a:	441a      	add	r2, r3
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	68da      	ldr	r2, [r3, #12]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d207      	bcs.n	800c9bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	689a      	ldr	r2, [r3, #8]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9b4:	425b      	negs	r3, r3
 800c9b6:	441a      	add	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d105      	bne.n	800c9ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	1c5a      	adds	r2, r3, #1
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c9d6:	697b      	ldr	r3, [r7, #20]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3718      	adds	r7, #24
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d018      	beq.n	800ca24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	68da      	ldr	r2, [r3, #12]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9fa:	441a      	add	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	68da      	ldr	r2, [r3, #12]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d303      	bcc.n	800ca14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	68d9      	ldr	r1, [r3, #12]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	6838      	ldr	r0, [r7, #0]
 800ca20:	f00b fbf1 	bl	8018206 <memcpy>
	}
}
 800ca24:	bf00      	nop
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca34:	f001 fcc8 	bl	800e3c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca40:	e011      	b.n	800ca66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d012      	beq.n	800ca70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3324      	adds	r3, #36	@ 0x24
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 fd5c 	bl	800d50c <xTaskRemoveFromEventList>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d001      	beq.n	800ca5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca5a:	f000 fe5d 	bl	800d718 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
 800ca60:	3b01      	subs	r3, #1
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	dce9      	bgt.n	800ca42 <prvUnlockQueue+0x16>
 800ca6e:	e000      	b.n	800ca72 <prvUnlockQueue+0x46>
					break;
 800ca70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	22ff      	movs	r2, #255	@ 0xff
 800ca76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ca7a:	f001 fcd7 	bl	800e42c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca7e:	f001 fca3 	bl	800e3c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca8a:	e011      	b.n	800cab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d012      	beq.n	800caba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3310      	adds	r3, #16
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 fd37 	bl	800d50c <xTaskRemoveFromEventList>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d001      	beq.n	800caa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800caa4:	f000 fe38 	bl	800d718 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800caa8:	7bbb      	ldrb	r3, [r7, #14]
 800caaa:	3b01      	subs	r3, #1
 800caac:	b2db      	uxtb	r3, r3
 800caae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	dce9      	bgt.n	800ca8c <prvUnlockQueue+0x60>
 800cab8:	e000      	b.n	800cabc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800caba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	22ff      	movs	r2, #255	@ 0xff
 800cac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cac4:	f001 fcb2 	bl	800e42c <vPortExitCritical>
}
 800cac8:	bf00      	nop
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cad8:	f001 fc76 	bl	800e3c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d102      	bne.n	800caea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cae4:	2301      	movs	r3, #1
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	e001      	b.n	800caee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800caea:	2300      	movs	r3, #0
 800caec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800caee:	f001 fc9d 	bl	800e42c <vPortExitCritical>

	return xReturn;
 800caf2:	68fb      	ldr	r3, [r7, #12]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb04:	f001 fc60 	bl	800e3c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d102      	bne.n	800cb1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb14:	2301      	movs	r3, #1
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	e001      	b.n	800cb1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb1e:	f001 fc85 	bl	800e42c <vPortExitCritical>

	return xReturn;
 800cb22:	68fb      	ldr	r3, [r7, #12]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb36:	2300      	movs	r3, #0
 800cb38:	60fb      	str	r3, [r7, #12]
 800cb3a:	e014      	b.n	800cb66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cb3c:	4a0f      	ldr	r2, [pc, #60]	@ (800cb7c <vQueueAddToRegistry+0x50>)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10b      	bne.n	800cb60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cb48:	490c      	ldr	r1, [pc, #48]	@ (800cb7c <vQueueAddToRegistry+0x50>)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cb52:	4a0a      	ldr	r2, [pc, #40]	@ (800cb7c <vQueueAddToRegistry+0x50>)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	00db      	lsls	r3, r3, #3
 800cb58:	4413      	add	r3, r2
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cb5e:	e006      	b.n	800cb6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3301      	adds	r3, #1
 800cb64:	60fb      	str	r3, [r7, #12]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2b07      	cmp	r3, #7
 800cb6a:	d9e7      	bls.n	800cb3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cb6c:	bf00      	nop
 800cb6e:	bf00      	nop
 800cb70:	3714      	adds	r7, #20
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	24032664 	.word	0x24032664

0800cb80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb90:	f001 fc1a 	bl	800e3c8 <vPortEnterCritical>
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb9a:	b25b      	sxtb	r3, r3
 800cb9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cba0:	d103      	bne.n	800cbaa <vQueueWaitForMessageRestricted+0x2a>
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbb0:	b25b      	sxtb	r3, r3
 800cbb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbb6:	d103      	bne.n	800cbc0 <vQueueWaitForMessageRestricted+0x40>
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbc0:	f001 fc34 	bl	800e42c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d106      	bne.n	800cbda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	3324      	adds	r3, #36	@ 0x24
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	68b9      	ldr	r1, [r7, #8]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 fc6d 	bl	800d4b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbda:	6978      	ldr	r0, [r7, #20]
 800cbdc:	f7ff ff26 	bl	800ca2c <prvUnlockQueue>
	}
 800cbe0:	bf00      	nop
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08e      	sub	sp, #56	@ 0x38
 800cbec:	af04      	add	r7, sp, #16
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
 800cbf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10b      	bne.n	800cc14 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	623b      	str	r3, [r7, #32]
}
 800cc0e:	bf00      	nop
 800cc10:	bf00      	nop
 800cc12:	e7fd      	b.n	800cc10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10b      	bne.n	800cc32 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	61fb      	str	r3, [r7, #28]
}
 800cc2c:	bf00      	nop
 800cc2e:	bf00      	nop
 800cc30:	e7fd      	b.n	800cc2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc32:	23a8      	movs	r3, #168	@ 0xa8
 800cc34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	2ba8      	cmp	r3, #168	@ 0xa8
 800cc3a:	d00b      	beq.n	800cc54 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cc3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc40:	f383 8811 	msr	BASEPRI, r3
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	f3bf 8f4f 	dsb	sy
 800cc4c:	61bb      	str	r3, [r7, #24]
}
 800cc4e:	bf00      	nop
 800cc50:	bf00      	nop
 800cc52:	e7fd      	b.n	800cc50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d01e      	beq.n	800cc9a <xTaskCreateStatic+0xb2>
 800cc5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d01b      	beq.n	800cc9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6e:	2202      	movs	r2, #2
 800cc70:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc74:	2300      	movs	r3, #0
 800cc76:	9303      	str	r3, [sp, #12]
 800cc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7a:	9302      	str	r3, [sp, #8]
 800cc7c:	f107 0314 	add.w	r3, r7, #20
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f000 f851 	bl	800cd34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc94:	f000 f8f6 	bl	800ce84 <prvAddNewTaskToReadyList>
 800cc98:	e001      	b.n	800cc9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc9e:	697b      	ldr	r3, [r7, #20]
	}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3728      	adds	r7, #40	@ 0x28
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b08c      	sub	sp, #48	@ 0x30
 800ccac:	af04      	add	r7, sp, #16
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	603b      	str	r3, [r7, #0]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ccb8:	88fb      	ldrh	r3, [r7, #6]
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f001 fca5 	bl	800e60c <pvPortMalloc>
 800ccc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00e      	beq.n	800cce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ccca:	20a8      	movs	r0, #168	@ 0xa8
 800cccc:	f001 fc9e 	bl	800e60c <pvPortMalloc>
 800ccd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d003      	beq.n	800cce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	631a      	str	r2, [r3, #48]	@ 0x30
 800ccde:	e005      	b.n	800ccec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cce0:	6978      	ldr	r0, [r7, #20]
 800cce2:	f001 fd61 	bl	800e7a8 <vPortFree>
 800cce6:	e001      	b.n	800ccec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cce8:	2300      	movs	r3, #0
 800ccea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d017      	beq.n	800cd22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccfa:	88fa      	ldrh	r2, [r7, #6]
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	9303      	str	r3, [sp, #12]
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	9302      	str	r3, [sp, #8]
 800cd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	68b9      	ldr	r1, [r7, #8]
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f000 f80f 	bl	800cd34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd16:	69f8      	ldr	r0, [r7, #28]
 800cd18:	f000 f8b4 	bl	800ce84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	61bb      	str	r3, [r7, #24]
 800cd20:	e002      	b.n	800cd28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd28:	69bb      	ldr	r3, [r7, #24]
	}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3720      	adds	r7, #32
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
	...

0800cd34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b088      	sub	sp, #32
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
 800cd40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	21a5      	movs	r1, #165	@ 0xa5
 800cd4e:	f00b f93b 	bl	8017fc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd56:	6879      	ldr	r1, [r7, #4]
 800cd58:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cd5c:	440b      	add	r3, r1
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	4413      	add	r3, r2
 800cd62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	f023 0307 	bic.w	r3, r3, #7
 800cd6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	f003 0307 	and.w	r3, r3, #7
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00b      	beq.n	800cd8e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	617b      	str	r3, [r7, #20]
}
 800cd88:	bf00      	nop
 800cd8a:	bf00      	nop
 800cd8c:	e7fd      	b.n	800cd8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d01f      	beq.n	800cdd4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd94:	2300      	movs	r3, #0
 800cd96:	61fb      	str	r3, [r7, #28]
 800cd98:	e012      	b.n	800cdc0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	4413      	add	r3, r2
 800cda0:	7819      	ldrb	r1, [r3, #0]
 800cda2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	4413      	add	r3, r2
 800cda8:	3334      	adds	r3, #52	@ 0x34
 800cdaa:	460a      	mov	r2, r1
 800cdac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cdae:	68ba      	ldr	r2, [r7, #8]
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d006      	beq.n	800cdc8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	61fb      	str	r3, [r7, #28]
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	2b0f      	cmp	r3, #15
 800cdc4:	d9e9      	bls.n	800cd9a <prvInitialiseNewTask+0x66>
 800cdc6:	e000      	b.n	800cdca <prvInitialiseNewTask+0x96>
			{
				break;
 800cdc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cdd2:	e003      	b.n	800cddc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdde:	2b37      	cmp	r3, #55	@ 0x37
 800cde0:	d901      	bls.n	800cde6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cde2:	2337      	movs	r3, #55	@ 0x37
 800cde4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdf0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7ff f965 	bl	800c0cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce04:	3318      	adds	r3, #24
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7ff f960 	bl	800c0cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ce18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce24:	2200      	movs	r2, #0
 800ce26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ce32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce34:	3354      	adds	r3, #84	@ 0x54
 800ce36:	224c      	movs	r2, #76	@ 0x4c
 800ce38:	2100      	movs	r1, #0
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f00b f8c4 	bl	8017fc8 <memset>
 800ce40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce42:	4a0d      	ldr	r2, [pc, #52]	@ (800ce78 <prvInitialiseNewTask+0x144>)
 800ce44:	659a      	str	r2, [r3, #88]	@ 0x58
 800ce46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce48:	4a0c      	ldr	r2, [pc, #48]	@ (800ce7c <prvInitialiseNewTask+0x148>)
 800ce4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ce80 <prvInitialiseNewTask+0x14c>)
 800ce50:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	68f9      	ldr	r1, [r7, #12]
 800ce56:	69b8      	ldr	r0, [r7, #24]
 800ce58:	f001 f982 	bl	800e160 <pxPortInitialiseStack>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce6e:	bf00      	nop
 800ce70:	3720      	adds	r7, #32
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	24068548 	.word	0x24068548
 800ce7c:	240685b0 	.word	0x240685b0
 800ce80:	24068618 	.word	0x24068618

0800ce84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce8c:	f001 fa9c 	bl	800e3c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce90:	4b2d      	ldr	r3, [pc, #180]	@ (800cf48 <prvAddNewTaskToReadyList+0xc4>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	3301      	adds	r3, #1
 800ce96:	4a2c      	ldr	r2, [pc, #176]	@ (800cf48 <prvAddNewTaskToReadyList+0xc4>)
 800ce98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce9a:	4b2c      	ldr	r3, [pc, #176]	@ (800cf4c <prvAddNewTaskToReadyList+0xc8>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d109      	bne.n	800ceb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cea2:	4a2a      	ldr	r2, [pc, #168]	@ (800cf4c <prvAddNewTaskToReadyList+0xc8>)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cea8:	4b27      	ldr	r3, [pc, #156]	@ (800cf48 <prvAddNewTaskToReadyList+0xc4>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d110      	bne.n	800ced2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ceb0:	f000 fc56 	bl	800d760 <prvInitialiseTaskLists>
 800ceb4:	e00d      	b.n	800ced2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ceb6:	4b26      	ldr	r3, [pc, #152]	@ (800cf50 <prvAddNewTaskToReadyList+0xcc>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d109      	bne.n	800ced2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cebe:	4b23      	ldr	r3, [pc, #140]	@ (800cf4c <prvAddNewTaskToReadyList+0xc8>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d802      	bhi.n	800ced2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cecc:	4a1f      	ldr	r2, [pc, #124]	@ (800cf4c <prvAddNewTaskToReadyList+0xc8>)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ced2:	4b20      	ldr	r3, [pc, #128]	@ (800cf54 <prvAddNewTaskToReadyList+0xd0>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3301      	adds	r3, #1
 800ced8:	4a1e      	ldr	r2, [pc, #120]	@ (800cf54 <prvAddNewTaskToReadyList+0xd0>)
 800ceda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cedc:	4b1d      	ldr	r3, [pc, #116]	@ (800cf54 <prvAddNewTaskToReadyList+0xd0>)
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cee8:	4b1b      	ldr	r3, [pc, #108]	@ (800cf58 <prvAddNewTaskToReadyList+0xd4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d903      	bls.n	800cef8 <prvAddNewTaskToReadyList+0x74>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef4:	4a18      	ldr	r2, [pc, #96]	@ (800cf58 <prvAddNewTaskToReadyList+0xd4>)
 800cef6:	6013      	str	r3, [r2, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cefc:	4613      	mov	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4a15      	ldr	r2, [pc, #84]	@ (800cf5c <prvAddNewTaskToReadyList+0xd8>)
 800cf06:	441a      	add	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3304      	adds	r3, #4
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	4610      	mov	r0, r2
 800cf10:	f7ff f8e9 	bl	800c0e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf14:	f001 fa8a 	bl	800e42c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf18:	4b0d      	ldr	r3, [pc, #52]	@ (800cf50 <prvAddNewTaskToReadyList+0xcc>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00e      	beq.n	800cf3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf20:	4b0a      	ldr	r3, [pc, #40]	@ (800cf4c <prvAddNewTaskToReadyList+0xc8>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d207      	bcs.n	800cf3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf2e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf60 <prvAddNewTaskToReadyList+0xdc>)
 800cf30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf3e:	bf00      	nop
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	24032b78 	.word	0x24032b78
 800cf4c:	240326a4 	.word	0x240326a4
 800cf50:	24032b84 	.word	0x24032b84
 800cf54:	24032b94 	.word	0x24032b94
 800cf58:	24032b80 	.word	0x24032b80
 800cf5c:	240326a8 	.word	0x240326a8
 800cf60:	e000ed04 	.word	0xe000ed04

0800cf64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d018      	beq.n	800cfa8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf76:	4b14      	ldr	r3, [pc, #80]	@ (800cfc8 <vTaskDelay+0x64>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00b      	beq.n	800cf96 <vTaskDelay+0x32>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	60bb      	str	r3, [r7, #8]
}
 800cf90:	bf00      	nop
 800cf92:	bf00      	nop
 800cf94:	e7fd      	b.n	800cf92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf96:	f000 f88b 	bl	800d0b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fd31 	bl	800da04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cfa2:	f000 f893 	bl	800d0cc <xTaskResumeAll>
 800cfa6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d107      	bne.n	800cfbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cfae:	4b07      	ldr	r3, [pc, #28]	@ (800cfcc <vTaskDelay+0x68>)
 800cfb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfb4:	601a      	str	r2, [r3, #0]
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfbe:	bf00      	nop
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	24032ba0 	.word	0x24032ba0
 800cfcc:	e000ed04 	.word	0xe000ed04

0800cfd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08a      	sub	sp, #40	@ 0x28
 800cfd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfde:	463a      	mov	r2, r7
 800cfe0:	1d39      	adds	r1, r7, #4
 800cfe2:	f107 0308 	add.w	r3, r7, #8
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff f81c 	bl	800c024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfec:	6839      	ldr	r1, [r7, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	9202      	str	r2, [sp, #8]
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	2300      	movs	r3, #0
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	2300      	movs	r3, #0
 800cffc:	460a      	mov	r2, r1
 800cffe:	4924      	ldr	r1, [pc, #144]	@ (800d090 <vTaskStartScheduler+0xc0>)
 800d000:	4824      	ldr	r0, [pc, #144]	@ (800d094 <vTaskStartScheduler+0xc4>)
 800d002:	f7ff fdf1 	bl	800cbe8 <xTaskCreateStatic>
 800d006:	4603      	mov	r3, r0
 800d008:	4a23      	ldr	r2, [pc, #140]	@ (800d098 <vTaskStartScheduler+0xc8>)
 800d00a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d00c:	4b22      	ldr	r3, [pc, #136]	@ (800d098 <vTaskStartScheduler+0xc8>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d014:	2301      	movs	r3, #1
 800d016:	617b      	str	r3, [r7, #20]
 800d018:	e001      	b.n	800d01e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d01a:	2300      	movs	r3, #0
 800d01c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	2b01      	cmp	r3, #1
 800d022:	d102      	bne.n	800d02a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d024:	f000 fd42 	bl	800daac <xTimerCreateTimerTask>
 800d028:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d11b      	bne.n	800d068 <vTaskStartScheduler+0x98>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	613b      	str	r3, [r7, #16]
}
 800d042:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d044:	4b15      	ldr	r3, [pc, #84]	@ (800d09c <vTaskStartScheduler+0xcc>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3354      	adds	r3, #84	@ 0x54
 800d04a:	4a15      	ldr	r2, [pc, #84]	@ (800d0a0 <vTaskStartScheduler+0xd0>)
 800d04c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d04e:	4b15      	ldr	r3, [pc, #84]	@ (800d0a4 <vTaskStartScheduler+0xd4>)
 800d050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d054:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d056:	4b14      	ldr	r3, [pc, #80]	@ (800d0a8 <vTaskStartScheduler+0xd8>)
 800d058:	2201      	movs	r2, #1
 800d05a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d05c:	4b13      	ldr	r3, [pc, #76]	@ (800d0ac <vTaskStartScheduler+0xdc>)
 800d05e:	2200      	movs	r2, #0
 800d060:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d062:	f001 f90d 	bl	800e280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d066:	e00f      	b.n	800d088 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d06e:	d10b      	bne.n	800d088 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	60fb      	str	r3, [r7, #12]
}
 800d082:	bf00      	nop
 800d084:	bf00      	nop
 800d086:	e7fd      	b.n	800d084 <vTaskStartScheduler+0xb4>
}
 800d088:	bf00      	nop
 800d08a:	3718      	adds	r7, #24
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	0801905c 	.word	0x0801905c
 800d094:	0800d731 	.word	0x0800d731
 800d098:	24032b9c 	.word	0x24032b9c
 800d09c:	240326a4 	.word	0x240326a4
 800d0a0:	240000c4 	.word	0x240000c4
 800d0a4:	24032b98 	.word	0x24032b98
 800d0a8:	24032b84 	.word	0x24032b84
 800d0ac:	24032b7c 	.word	0x24032b7c

0800d0b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d0b4:	4b04      	ldr	r3, [pc, #16]	@ (800d0c8 <vTaskSuspendAll+0x18>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	4a03      	ldr	r2, [pc, #12]	@ (800d0c8 <vTaskSuspendAll+0x18>)
 800d0bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d0be:	bf00      	nop
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr
 800d0c8:	24032ba0 	.word	0x24032ba0

0800d0cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0da:	4b42      	ldr	r3, [pc, #264]	@ (800d1e4 <xTaskResumeAll+0x118>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10b      	bne.n	800d0fa <xTaskResumeAll+0x2e>
	__asm volatile
 800d0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	603b      	str	r3, [r7, #0]
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
 800d0f8:	e7fd      	b.n	800d0f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0fa:	f001 f965 	bl	800e3c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0fe:	4b39      	ldr	r3, [pc, #228]	@ (800d1e4 <xTaskResumeAll+0x118>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	3b01      	subs	r3, #1
 800d104:	4a37      	ldr	r2, [pc, #220]	@ (800d1e4 <xTaskResumeAll+0x118>)
 800d106:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d108:	4b36      	ldr	r3, [pc, #216]	@ (800d1e4 <xTaskResumeAll+0x118>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d162      	bne.n	800d1d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d110:	4b35      	ldr	r3, [pc, #212]	@ (800d1e8 <xTaskResumeAll+0x11c>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d05e      	beq.n	800d1d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d118:	e02f      	b.n	800d17a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d11a:	4b34      	ldr	r3, [pc, #208]	@ (800d1ec <xTaskResumeAll+0x120>)
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3318      	adds	r3, #24
 800d126:	4618      	mov	r0, r3
 800d128:	f7ff f83a 	bl	800c1a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	3304      	adds	r3, #4
 800d130:	4618      	mov	r0, r3
 800d132:	f7ff f835 	bl	800c1a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d13a:	4b2d      	ldr	r3, [pc, #180]	@ (800d1f0 <xTaskResumeAll+0x124>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d903      	bls.n	800d14a <xTaskResumeAll+0x7e>
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d146:	4a2a      	ldr	r2, [pc, #168]	@ (800d1f0 <xTaskResumeAll+0x124>)
 800d148:	6013      	str	r3, [r2, #0]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d14e:	4613      	mov	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4a27      	ldr	r2, [pc, #156]	@ (800d1f4 <xTaskResumeAll+0x128>)
 800d158:	441a      	add	r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3304      	adds	r3, #4
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f7fe ffc0 	bl	800c0e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d16a:	4b23      	ldr	r3, [pc, #140]	@ (800d1f8 <xTaskResumeAll+0x12c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d170:	429a      	cmp	r2, r3
 800d172:	d302      	bcc.n	800d17a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d174:	4b21      	ldr	r3, [pc, #132]	@ (800d1fc <xTaskResumeAll+0x130>)
 800d176:	2201      	movs	r2, #1
 800d178:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d17a:	4b1c      	ldr	r3, [pc, #112]	@ (800d1ec <xTaskResumeAll+0x120>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d1cb      	bne.n	800d11a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d001      	beq.n	800d18c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d188:	f000 fb8e 	bl	800d8a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d18c:	4b1c      	ldr	r3, [pc, #112]	@ (800d200 <xTaskResumeAll+0x134>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d010      	beq.n	800d1ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d198:	f000 f846 	bl	800d228 <xTaskIncrementTick>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d002      	beq.n	800d1a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d1a2:	4b16      	ldr	r3, [pc, #88]	@ (800d1fc <xTaskResumeAll+0x130>)
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d1f1      	bne.n	800d198 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d1b4:	4b12      	ldr	r3, [pc, #72]	@ (800d200 <xTaskResumeAll+0x134>)
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d1ba:	4b10      	ldr	r3, [pc, #64]	@ (800d1fc <xTaskResumeAll+0x130>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d009      	beq.n	800d1d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d204 <xTaskResumeAll+0x138>)
 800d1c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1d6:	f001 f929 	bl	800e42c <vPortExitCritical>

	return xAlreadyYielded;
 800d1da:	68bb      	ldr	r3, [r7, #8]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	24032ba0 	.word	0x24032ba0
 800d1e8:	24032b78 	.word	0x24032b78
 800d1ec:	24032b38 	.word	0x24032b38
 800d1f0:	24032b80 	.word	0x24032b80
 800d1f4:	240326a8 	.word	0x240326a8
 800d1f8:	240326a4 	.word	0x240326a4
 800d1fc:	24032b8c 	.word	0x24032b8c
 800d200:	24032b88 	.word	0x24032b88
 800d204:	e000ed04 	.word	0xe000ed04

0800d208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d20e:	4b05      	ldr	r3, [pc, #20]	@ (800d224 <xTaskGetTickCount+0x1c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d214:	687b      	ldr	r3, [r7, #4]
}
 800d216:	4618      	mov	r0, r3
 800d218:	370c      	adds	r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	24032b7c 	.word	0x24032b7c

0800d228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b086      	sub	sp, #24
 800d22c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d22e:	2300      	movs	r3, #0
 800d230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d232:	4b4f      	ldr	r3, [pc, #316]	@ (800d370 <xTaskIncrementTick+0x148>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	f040 8090 	bne.w	800d35c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d23c:	4b4d      	ldr	r3, [pc, #308]	@ (800d374 <xTaskIncrementTick+0x14c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3301      	adds	r3, #1
 800d242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d244:	4a4b      	ldr	r2, [pc, #300]	@ (800d374 <xTaskIncrementTick+0x14c>)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d121      	bne.n	800d294 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d250:	4b49      	ldr	r3, [pc, #292]	@ (800d378 <xTaskIncrementTick+0x150>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00b      	beq.n	800d272 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	603b      	str	r3, [r7, #0]
}
 800d26c:	bf00      	nop
 800d26e:	bf00      	nop
 800d270:	e7fd      	b.n	800d26e <xTaskIncrementTick+0x46>
 800d272:	4b41      	ldr	r3, [pc, #260]	@ (800d378 <xTaskIncrementTick+0x150>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	60fb      	str	r3, [r7, #12]
 800d278:	4b40      	ldr	r3, [pc, #256]	@ (800d37c <xTaskIncrementTick+0x154>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a3e      	ldr	r2, [pc, #248]	@ (800d378 <xTaskIncrementTick+0x150>)
 800d27e:	6013      	str	r3, [r2, #0]
 800d280:	4a3e      	ldr	r2, [pc, #248]	@ (800d37c <xTaskIncrementTick+0x154>)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6013      	str	r3, [r2, #0]
 800d286:	4b3e      	ldr	r3, [pc, #248]	@ (800d380 <xTaskIncrementTick+0x158>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	3301      	adds	r3, #1
 800d28c:	4a3c      	ldr	r2, [pc, #240]	@ (800d380 <xTaskIncrementTick+0x158>)
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	f000 fb0a 	bl	800d8a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d294:	4b3b      	ldr	r3, [pc, #236]	@ (800d384 <xTaskIncrementTick+0x15c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	693a      	ldr	r2, [r7, #16]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d349      	bcc.n	800d332 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d29e:	4b36      	ldr	r3, [pc, #216]	@ (800d378 <xTaskIncrementTick+0x150>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d104      	bne.n	800d2b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2a8:	4b36      	ldr	r3, [pc, #216]	@ (800d384 <xTaskIncrementTick+0x15c>)
 800d2aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d2ae:	601a      	str	r2, [r3, #0]
					break;
 800d2b0:	e03f      	b.n	800d332 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2b2:	4b31      	ldr	r3, [pc, #196]	@ (800d378 <xTaskIncrementTick+0x150>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2c2:	693a      	ldr	r2, [r7, #16]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d203      	bcs.n	800d2d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2ca:	4a2e      	ldr	r2, [pc, #184]	@ (800d384 <xTaskIncrementTick+0x15c>)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2d0:	e02f      	b.n	800d332 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fe ff62 	bl	800c1a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d004      	beq.n	800d2ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	3318      	adds	r3, #24
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fe ff59 	bl	800c1a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f2:	4b25      	ldr	r3, [pc, #148]	@ (800d388 <xTaskIncrementTick+0x160>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d903      	bls.n	800d302 <xTaskIncrementTick+0xda>
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2fe:	4a22      	ldr	r2, [pc, #136]	@ (800d388 <xTaskIncrementTick+0x160>)
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d306:	4613      	mov	r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4413      	add	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4a1f      	ldr	r2, [pc, #124]	@ (800d38c <xTaskIncrementTick+0x164>)
 800d310:	441a      	add	r2, r3
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	3304      	adds	r3, #4
 800d316:	4619      	mov	r1, r3
 800d318:	4610      	mov	r0, r2
 800d31a:	f7fe fee4 	bl	800c0e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d322:	4b1b      	ldr	r3, [pc, #108]	@ (800d390 <xTaskIncrementTick+0x168>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d328:	429a      	cmp	r2, r3
 800d32a:	d3b8      	bcc.n	800d29e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d32c:	2301      	movs	r3, #1
 800d32e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d330:	e7b5      	b.n	800d29e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d332:	4b17      	ldr	r3, [pc, #92]	@ (800d390 <xTaskIncrementTick+0x168>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d338:	4914      	ldr	r1, [pc, #80]	@ (800d38c <xTaskIncrementTick+0x164>)
 800d33a:	4613      	mov	r3, r2
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	4413      	add	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	440b      	add	r3, r1
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b01      	cmp	r3, #1
 800d348:	d901      	bls.n	800d34e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d34a:	2301      	movs	r3, #1
 800d34c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d34e:	4b11      	ldr	r3, [pc, #68]	@ (800d394 <xTaskIncrementTick+0x16c>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d007      	beq.n	800d366 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d356:	2301      	movs	r3, #1
 800d358:	617b      	str	r3, [r7, #20]
 800d35a:	e004      	b.n	800d366 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d35c:	4b0e      	ldr	r3, [pc, #56]	@ (800d398 <xTaskIncrementTick+0x170>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	3301      	adds	r3, #1
 800d362:	4a0d      	ldr	r2, [pc, #52]	@ (800d398 <xTaskIncrementTick+0x170>)
 800d364:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d366:	697b      	ldr	r3, [r7, #20]
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3718      	adds	r7, #24
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	24032ba0 	.word	0x24032ba0
 800d374:	24032b7c 	.word	0x24032b7c
 800d378:	24032b30 	.word	0x24032b30
 800d37c:	24032b34 	.word	0x24032b34
 800d380:	24032b90 	.word	0x24032b90
 800d384:	24032b98 	.word	0x24032b98
 800d388:	24032b80 	.word	0x24032b80
 800d38c:	240326a8 	.word	0x240326a8
 800d390:	240326a4 	.word	0x240326a4
 800d394:	24032b8c 	.word	0x24032b8c
 800d398:	24032b88 	.word	0x24032b88

0800d39c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d3a2:	4b2b      	ldr	r3, [pc, #172]	@ (800d450 <vTaskSwitchContext+0xb4>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d3aa:	4b2a      	ldr	r3, [pc, #168]	@ (800d454 <vTaskSwitchContext+0xb8>)
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3b0:	e047      	b.n	800d442 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d3b2:	4b28      	ldr	r3, [pc, #160]	@ (800d454 <vTaskSwitchContext+0xb8>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b8:	4b27      	ldr	r3, [pc, #156]	@ (800d458 <vTaskSwitchContext+0xbc>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	60fb      	str	r3, [r7, #12]
 800d3be:	e011      	b.n	800d3e4 <vTaskSwitchContext+0x48>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10b      	bne.n	800d3de <vTaskSwitchContext+0x42>
	__asm volatile
 800d3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ca:	f383 8811 	msr	BASEPRI, r3
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	607b      	str	r3, [r7, #4]
}
 800d3d8:	bf00      	nop
 800d3da:	bf00      	nop
 800d3dc:	e7fd      	b.n	800d3da <vTaskSwitchContext+0x3e>
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	3b01      	subs	r3, #1
 800d3e2:	60fb      	str	r3, [r7, #12]
 800d3e4:	491d      	ldr	r1, [pc, #116]	@ (800d45c <vTaskSwitchContext+0xc0>)
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	440b      	add	r3, r1
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d0e3      	beq.n	800d3c0 <vTaskSwitchContext+0x24>
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4413      	add	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4a16      	ldr	r2, [pc, #88]	@ (800d45c <vTaskSwitchContext+0xc0>)
 800d404:	4413      	add	r3, r2
 800d406:	60bb      	str	r3, [r7, #8]
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	685a      	ldr	r2, [r3, #4]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	605a      	str	r2, [r3, #4]
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	685a      	ldr	r2, [r3, #4]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	3308      	adds	r3, #8
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d104      	bne.n	800d428 <vTaskSwitchContext+0x8c>
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	685a      	ldr	r2, [r3, #4]
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	605a      	str	r2, [r3, #4]
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	4a0c      	ldr	r2, [pc, #48]	@ (800d460 <vTaskSwitchContext+0xc4>)
 800d430:	6013      	str	r3, [r2, #0]
 800d432:	4a09      	ldr	r2, [pc, #36]	@ (800d458 <vTaskSwitchContext+0xbc>)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d438:	4b09      	ldr	r3, [pc, #36]	@ (800d460 <vTaskSwitchContext+0xc4>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3354      	adds	r3, #84	@ 0x54
 800d43e:	4a09      	ldr	r2, [pc, #36]	@ (800d464 <vTaskSwitchContext+0xc8>)
 800d440:	6013      	str	r3, [r2, #0]
}
 800d442:	bf00      	nop
 800d444:	3714      	adds	r7, #20
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	24032ba0 	.word	0x24032ba0
 800d454:	24032b8c 	.word	0x24032b8c
 800d458:	24032b80 	.word	0x24032b80
 800d45c:	240326a8 	.word	0x240326a8
 800d460:	240326a4 	.word	0x240326a4
 800d464:	240000c4 	.word	0x240000c4

0800d468 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10b      	bne.n	800d490 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	60fb      	str	r3, [r7, #12]
}
 800d48a:	bf00      	nop
 800d48c:	bf00      	nop
 800d48e:	e7fd      	b.n	800d48c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d490:	4b07      	ldr	r3, [pc, #28]	@ (800d4b0 <vTaskPlaceOnEventList+0x48>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	3318      	adds	r3, #24
 800d496:	4619      	mov	r1, r3
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7fe fe48 	bl	800c12e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d49e:	2101      	movs	r1, #1
 800d4a0:	6838      	ldr	r0, [r7, #0]
 800d4a2:	f000 faaf 	bl	800da04 <prvAddCurrentTaskToDelayedList>
}
 800d4a6:	bf00      	nop
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	240326a4 	.word	0x240326a4

0800d4b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10b      	bne.n	800d4de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	617b      	str	r3, [r7, #20]
}
 800d4d8:	bf00      	nop
 800d4da:	bf00      	nop
 800d4dc:	e7fd      	b.n	800d4da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4de:	4b0a      	ldr	r3, [pc, #40]	@ (800d508 <vTaskPlaceOnEventListRestricted+0x54>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	3318      	adds	r3, #24
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7fe fdfd 	bl	800c0e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d002      	beq.n	800d4f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d4f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d4f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d4f8:	6879      	ldr	r1, [r7, #4]
 800d4fa:	68b8      	ldr	r0, [r7, #8]
 800d4fc:	f000 fa82 	bl	800da04 <prvAddCurrentTaskToDelayedList>
	}
 800d500:	bf00      	nop
 800d502:	3718      	adds	r7, #24
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	240326a4 	.word	0x240326a4

0800d50c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d10b      	bne.n	800d53a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	60fb      	str	r3, [r7, #12]
}
 800d534:	bf00      	nop
 800d536:	bf00      	nop
 800d538:	e7fd      	b.n	800d536 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	3318      	adds	r3, #24
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fe fe2e 	bl	800c1a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d544:	4b1d      	ldr	r3, [pc, #116]	@ (800d5bc <xTaskRemoveFromEventList+0xb0>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d11d      	bne.n	800d588 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	3304      	adds	r3, #4
 800d550:	4618      	mov	r0, r3
 800d552:	f7fe fe25 	bl	800c1a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d55a:	4b19      	ldr	r3, [pc, #100]	@ (800d5c0 <xTaskRemoveFromEventList+0xb4>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d903      	bls.n	800d56a <xTaskRemoveFromEventList+0x5e>
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d566:	4a16      	ldr	r2, [pc, #88]	@ (800d5c0 <xTaskRemoveFromEventList+0xb4>)
 800d568:	6013      	str	r3, [r2, #0]
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d56e:	4613      	mov	r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	4413      	add	r3, r2
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	4a13      	ldr	r2, [pc, #76]	@ (800d5c4 <xTaskRemoveFromEventList+0xb8>)
 800d578:	441a      	add	r2, r3
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	3304      	adds	r3, #4
 800d57e:	4619      	mov	r1, r3
 800d580:	4610      	mov	r0, r2
 800d582:	f7fe fdb0 	bl	800c0e6 <vListInsertEnd>
 800d586:	e005      	b.n	800d594 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	3318      	adds	r3, #24
 800d58c:	4619      	mov	r1, r3
 800d58e:	480e      	ldr	r0, [pc, #56]	@ (800d5c8 <xTaskRemoveFromEventList+0xbc>)
 800d590:	f7fe fda9 	bl	800c0e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d598:	4b0c      	ldr	r3, [pc, #48]	@ (800d5cc <xTaskRemoveFromEventList+0xc0>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d905      	bls.n	800d5ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d5a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d0 <xTaskRemoveFromEventList+0xc4>)
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	601a      	str	r2, [r3, #0]
 800d5ac:	e001      	b.n	800d5b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d5b2:	697b      	ldr	r3, [r7, #20]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	24032ba0 	.word	0x24032ba0
 800d5c0:	24032b80 	.word	0x24032b80
 800d5c4:	240326a8 	.word	0x240326a8
 800d5c8:	24032b38 	.word	0x24032b38
 800d5cc:	240326a4 	.word	0x240326a4
 800d5d0:	24032b8c 	.word	0x24032b8c

0800d5d4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d10b      	bne.n	800d5fa <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e6:	f383 8811 	msr	BASEPRI, r3
 800d5ea:	f3bf 8f6f 	isb	sy
 800d5ee:	f3bf 8f4f 	dsb	sy
 800d5f2:	60fb      	str	r3, [r7, #12]
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop
 800d5f8:	e7fd      	b.n	800d5f6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d5fa:	f000 fee5 	bl	800e3c8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5fe:	4b07      	ldr	r3, [pc, #28]	@ (800d61c <vTaskSetTimeOutState+0x48>)
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d606:	4b06      	ldr	r3, [pc, #24]	@ (800d620 <vTaskSetTimeOutState+0x4c>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d60e:	f000 ff0d 	bl	800e42c <vPortExitCritical>
}
 800d612:	bf00      	nop
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	24032b90 	.word	0x24032b90
 800d620:	24032b7c 	.word	0x24032b7c

0800d624 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d62c:	4b06      	ldr	r3, [pc, #24]	@ (800d648 <vTaskInternalSetTimeOutState+0x24>)
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d634:	4b05      	ldr	r3, [pc, #20]	@ (800d64c <vTaskInternalSetTimeOutState+0x28>)
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	605a      	str	r2, [r3, #4]
}
 800d63c:	bf00      	nop
 800d63e:	370c      	adds	r7, #12
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr
 800d648:	24032b90 	.word	0x24032b90
 800d64c:	24032b7c 	.word	0x24032b7c

0800d650 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b088      	sub	sp, #32
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10b      	bne.n	800d678 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	613b      	str	r3, [r7, #16]
}
 800d672:	bf00      	nop
 800d674:	bf00      	nop
 800d676:	e7fd      	b.n	800d674 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10b      	bne.n	800d696 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	60fb      	str	r3, [r7, #12]
}
 800d690:	bf00      	nop
 800d692:	bf00      	nop
 800d694:	e7fd      	b.n	800d692 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d696:	f000 fe97 	bl	800e3c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d69a:	4b1d      	ldr	r3, [pc, #116]	@ (800d710 <xTaskCheckForTimeOut+0xc0>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	69ba      	ldr	r2, [r7, #24]
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6b2:	d102      	bne.n	800d6ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	61fb      	str	r3, [r7, #28]
 800d6b8:	e023      	b.n	800d702 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	4b15      	ldr	r3, [pc, #84]	@ (800d714 <xTaskCheckForTimeOut+0xc4>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d007      	beq.n	800d6d6 <xTaskCheckForTimeOut+0x86>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	69ba      	ldr	r2, [r7, #24]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d302      	bcc.n	800d6d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	61fb      	str	r3, [r7, #28]
 800d6d4:	e015      	b.n	800d702 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	697a      	ldr	r2, [r7, #20]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d20b      	bcs.n	800d6f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	1ad2      	subs	r2, r2, r3
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7ff ff99 	bl	800d624 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	61fb      	str	r3, [r7, #28]
 800d6f6:	e004      	b.n	800d702 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d6fe:	2301      	movs	r3, #1
 800d700:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d702:	f000 fe93 	bl	800e42c <vPortExitCritical>

	return xReturn;
 800d706:	69fb      	ldr	r3, [r7, #28]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3720      	adds	r7, #32
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	24032b7c 	.word	0x24032b7c
 800d714:	24032b90 	.word	0x24032b90

0800d718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d718:	b480      	push	{r7}
 800d71a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d71c:	4b03      	ldr	r3, [pc, #12]	@ (800d72c <vTaskMissedYield+0x14>)
 800d71e:	2201      	movs	r2, #1
 800d720:	601a      	str	r2, [r3, #0]
}
 800d722:	bf00      	nop
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	24032b8c 	.word	0x24032b8c

0800d730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d738:	f000 f852 	bl	800d7e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d73c:	4b06      	ldr	r3, [pc, #24]	@ (800d758 <prvIdleTask+0x28>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d9f9      	bls.n	800d738 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d744:	4b05      	ldr	r3, [pc, #20]	@ (800d75c <prvIdleTask+0x2c>)
 800d746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d754:	e7f0      	b.n	800d738 <prvIdleTask+0x8>
 800d756:	bf00      	nop
 800d758:	240326a8 	.word	0x240326a8
 800d75c:	e000ed04 	.word	0xe000ed04

0800d760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d766:	2300      	movs	r3, #0
 800d768:	607b      	str	r3, [r7, #4]
 800d76a:	e00c      	b.n	800d786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	4613      	mov	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4413      	add	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4a12      	ldr	r2, [pc, #72]	@ (800d7c0 <prvInitialiseTaskLists+0x60>)
 800d778:	4413      	add	r3, r2
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fe fc86 	bl	800c08c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	3301      	adds	r3, #1
 800d784:	607b      	str	r3, [r7, #4]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b37      	cmp	r3, #55	@ 0x37
 800d78a:	d9ef      	bls.n	800d76c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d78c:	480d      	ldr	r0, [pc, #52]	@ (800d7c4 <prvInitialiseTaskLists+0x64>)
 800d78e:	f7fe fc7d 	bl	800c08c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d792:	480d      	ldr	r0, [pc, #52]	@ (800d7c8 <prvInitialiseTaskLists+0x68>)
 800d794:	f7fe fc7a 	bl	800c08c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d798:	480c      	ldr	r0, [pc, #48]	@ (800d7cc <prvInitialiseTaskLists+0x6c>)
 800d79a:	f7fe fc77 	bl	800c08c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d79e:	480c      	ldr	r0, [pc, #48]	@ (800d7d0 <prvInitialiseTaskLists+0x70>)
 800d7a0:	f7fe fc74 	bl	800c08c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d7a4:	480b      	ldr	r0, [pc, #44]	@ (800d7d4 <prvInitialiseTaskLists+0x74>)
 800d7a6:	f7fe fc71 	bl	800c08c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d7aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d8 <prvInitialiseTaskLists+0x78>)
 800d7ac:	4a05      	ldr	r2, [pc, #20]	@ (800d7c4 <prvInitialiseTaskLists+0x64>)
 800d7ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d7dc <prvInitialiseTaskLists+0x7c>)
 800d7b2:	4a05      	ldr	r2, [pc, #20]	@ (800d7c8 <prvInitialiseTaskLists+0x68>)
 800d7b4:	601a      	str	r2, [r3, #0]
}
 800d7b6:	bf00      	nop
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	240326a8 	.word	0x240326a8
 800d7c4:	24032b08 	.word	0x24032b08
 800d7c8:	24032b1c 	.word	0x24032b1c
 800d7cc:	24032b38 	.word	0x24032b38
 800d7d0:	24032b4c 	.word	0x24032b4c
 800d7d4:	24032b64 	.word	0x24032b64
 800d7d8:	24032b30 	.word	0x24032b30
 800d7dc:	24032b34 	.word	0x24032b34

0800d7e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7e6:	e019      	b.n	800d81c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d7e8:	f000 fdee 	bl	800e3c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7ec:	4b10      	ldr	r3, [pc, #64]	@ (800d830 <prvCheckTasksWaitingTermination+0x50>)
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe fcd1 	bl	800c1a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d834 <prvCheckTasksWaitingTermination+0x54>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	3b01      	subs	r3, #1
 800d804:	4a0b      	ldr	r2, [pc, #44]	@ (800d834 <prvCheckTasksWaitingTermination+0x54>)
 800d806:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d808:	4b0b      	ldr	r3, [pc, #44]	@ (800d838 <prvCheckTasksWaitingTermination+0x58>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3b01      	subs	r3, #1
 800d80e:	4a0a      	ldr	r2, [pc, #40]	@ (800d838 <prvCheckTasksWaitingTermination+0x58>)
 800d810:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d812:	f000 fe0b 	bl	800e42c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f810 	bl	800d83c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d81c:	4b06      	ldr	r3, [pc, #24]	@ (800d838 <prvCheckTasksWaitingTermination+0x58>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1e1      	bne.n	800d7e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d824:	bf00      	nop
 800d826:	bf00      	nop
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	24032b4c 	.word	0x24032b4c
 800d834:	24032b78 	.word	0x24032b78
 800d838:	24032b60 	.word	0x24032b60

0800d83c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3354      	adds	r3, #84	@ 0x54
 800d848:	4618      	mov	r0, r3
 800d84a:	f00a fc0b 	bl	8018064 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d854:	2b00      	cmp	r3, #0
 800d856:	d108      	bne.n	800d86a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 ffa3 	bl	800e7a8 <vPortFree>
				vPortFree( pxTCB );
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 ffa0 	bl	800e7a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d868:	e019      	b.n	800d89e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d870:	2b01      	cmp	r3, #1
 800d872:	d103      	bne.n	800d87c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 ff97 	bl	800e7a8 <vPortFree>
	}
 800d87a:	e010      	b.n	800d89e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d882:	2b02      	cmp	r3, #2
 800d884:	d00b      	beq.n	800d89e <prvDeleteTCB+0x62>
	__asm volatile
 800d886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	60fb      	str	r3, [r7, #12]
}
 800d898:	bf00      	nop
 800d89a:	bf00      	nop
 800d89c:	e7fd      	b.n	800d89a <prvDeleteTCB+0x5e>
	}
 800d89e:	bf00      	nop
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
	...

0800d8a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d8e0 <prvResetNextTaskUnblockTime+0x38>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d104      	bne.n	800d8c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d8b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e4 <prvResetNextTaskUnblockTime+0x3c>)
 800d8ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d8c0:	e008      	b.n	800d8d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8c2:	4b07      	ldr	r3, [pc, #28]	@ (800d8e0 <prvResetNextTaskUnblockTime+0x38>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	4a04      	ldr	r2, [pc, #16]	@ (800d8e4 <prvResetNextTaskUnblockTime+0x3c>)
 800d8d2:	6013      	str	r3, [r2, #0]
}
 800d8d4:	bf00      	nop
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	24032b30 	.word	0x24032b30
 800d8e4:	24032b98 	.word	0x24032b98

0800d8e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d8ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d91c <xTaskGetSchedulerState+0x34>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d102      	bne.n	800d8fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	607b      	str	r3, [r7, #4]
 800d8fa:	e008      	b.n	800d90e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8fc:	4b08      	ldr	r3, [pc, #32]	@ (800d920 <xTaskGetSchedulerState+0x38>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d102      	bne.n	800d90a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d904:	2302      	movs	r3, #2
 800d906:	607b      	str	r3, [r7, #4]
 800d908:	e001      	b.n	800d90e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d90a:	2300      	movs	r3, #0
 800d90c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d90e:	687b      	ldr	r3, [r7, #4]
	}
 800d910:	4618      	mov	r0, r3
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	24032b84 	.word	0x24032b84
 800d920:	24032ba0 	.word	0x24032ba0

0800d924 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d930:	2300      	movs	r3, #0
 800d932:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d058      	beq.n	800d9ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d93a:	4b2f      	ldr	r3, [pc, #188]	@ (800d9f8 <xTaskPriorityDisinherit+0xd4>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	429a      	cmp	r2, r3
 800d942:	d00b      	beq.n	800d95c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d948:	f383 8811 	msr	BASEPRI, r3
 800d94c:	f3bf 8f6f 	isb	sy
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	60fb      	str	r3, [r7, #12]
}
 800d956:	bf00      	nop
 800d958:	bf00      	nop
 800d95a:	e7fd      	b.n	800d958 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10b      	bne.n	800d97c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	60bb      	str	r3, [r7, #8]
}
 800d976:	bf00      	nop
 800d978:	bf00      	nop
 800d97a:	e7fd      	b.n	800d978 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d980:	1e5a      	subs	r2, r3, #1
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d98e:	429a      	cmp	r2, r3
 800d990:	d02c      	beq.n	800d9ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d996:	2b00      	cmp	r3, #0
 800d998:	d128      	bne.n	800d9ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	3304      	adds	r3, #4
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe fbfe 	bl	800c1a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9bc:	4b0f      	ldr	r3, [pc, #60]	@ (800d9fc <xTaskPriorityDisinherit+0xd8>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d903      	bls.n	800d9cc <xTaskPriorityDisinherit+0xa8>
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c8:	4a0c      	ldr	r2, [pc, #48]	@ (800d9fc <xTaskPriorityDisinherit+0xd8>)
 800d9ca:	6013      	str	r3, [r2, #0]
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	4a09      	ldr	r2, [pc, #36]	@ (800da00 <xTaskPriorityDisinherit+0xdc>)
 800d9da:	441a      	add	r2, r3
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	3304      	adds	r3, #4
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	4610      	mov	r0, r2
 800d9e4:	f7fe fb7f 	bl	800c0e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9ec:	697b      	ldr	r3, [r7, #20]
	}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3718      	adds	r7, #24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	240326a4 	.word	0x240326a4
 800d9fc:	24032b80 	.word	0x24032b80
 800da00:	240326a8 	.word	0x240326a8

0800da04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da0e:	4b21      	ldr	r3, [pc, #132]	@ (800da94 <prvAddCurrentTaskToDelayedList+0x90>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da14:	4b20      	ldr	r3, [pc, #128]	@ (800da98 <prvAddCurrentTaskToDelayedList+0x94>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3304      	adds	r3, #4
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe fbc0 	bl	800c1a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da26:	d10a      	bne.n	800da3e <prvAddCurrentTaskToDelayedList+0x3a>
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d007      	beq.n	800da3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da2e:	4b1a      	ldr	r3, [pc, #104]	@ (800da98 <prvAddCurrentTaskToDelayedList+0x94>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	3304      	adds	r3, #4
 800da34:	4619      	mov	r1, r3
 800da36:	4819      	ldr	r0, [pc, #100]	@ (800da9c <prvAddCurrentTaskToDelayedList+0x98>)
 800da38:	f7fe fb55 	bl	800c0e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800da3c:	e026      	b.n	800da8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4413      	add	r3, r2
 800da44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800da46:	4b14      	ldr	r3, [pc, #80]	@ (800da98 <prvAddCurrentTaskToDelayedList+0x94>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	429a      	cmp	r2, r3
 800da54:	d209      	bcs.n	800da6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da56:	4b12      	ldr	r3, [pc, #72]	@ (800daa0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	4b0f      	ldr	r3, [pc, #60]	@ (800da98 <prvAddCurrentTaskToDelayedList+0x94>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3304      	adds	r3, #4
 800da60:	4619      	mov	r1, r3
 800da62:	4610      	mov	r0, r2
 800da64:	f7fe fb63 	bl	800c12e <vListInsert>
}
 800da68:	e010      	b.n	800da8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da6a:	4b0e      	ldr	r3, [pc, #56]	@ (800daa4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	4b0a      	ldr	r3, [pc, #40]	@ (800da98 <prvAddCurrentTaskToDelayedList+0x94>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	3304      	adds	r3, #4
 800da74:	4619      	mov	r1, r3
 800da76:	4610      	mov	r0, r2
 800da78:	f7fe fb59 	bl	800c12e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da7c:	4b0a      	ldr	r3, [pc, #40]	@ (800daa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	429a      	cmp	r2, r3
 800da84:	d202      	bcs.n	800da8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800da86:	4a08      	ldr	r2, [pc, #32]	@ (800daa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	6013      	str	r3, [r2, #0]
}
 800da8c:	bf00      	nop
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	24032b7c 	.word	0x24032b7c
 800da98:	240326a4 	.word	0x240326a4
 800da9c:	24032b64 	.word	0x24032b64
 800daa0:	24032b34 	.word	0x24032b34
 800daa4:	24032b30 	.word	0x24032b30
 800daa8:	24032b98 	.word	0x24032b98

0800daac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b08a      	sub	sp, #40	@ 0x28
 800dab0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dab6:	f000 fb13 	bl	800e0e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800daba:	4b1d      	ldr	r3, [pc, #116]	@ (800db30 <xTimerCreateTimerTask+0x84>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d021      	beq.n	800db06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dac2:	2300      	movs	r3, #0
 800dac4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dac6:	2300      	movs	r3, #0
 800dac8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800daca:	1d3a      	adds	r2, r7, #4
 800dacc:	f107 0108 	add.w	r1, r7, #8
 800dad0:	f107 030c 	add.w	r3, r7, #12
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7fe fabf 	bl	800c058 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dada:	6879      	ldr	r1, [r7, #4]
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	9202      	str	r2, [sp, #8]
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	2302      	movs	r3, #2
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	2300      	movs	r3, #0
 800daea:	460a      	mov	r2, r1
 800daec:	4911      	ldr	r1, [pc, #68]	@ (800db34 <xTimerCreateTimerTask+0x88>)
 800daee:	4812      	ldr	r0, [pc, #72]	@ (800db38 <xTimerCreateTimerTask+0x8c>)
 800daf0:	f7ff f87a 	bl	800cbe8 <xTaskCreateStatic>
 800daf4:	4603      	mov	r3, r0
 800daf6:	4a11      	ldr	r2, [pc, #68]	@ (800db3c <xTimerCreateTimerTask+0x90>)
 800daf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dafa:	4b10      	ldr	r3, [pc, #64]	@ (800db3c <xTimerCreateTimerTask+0x90>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d001      	beq.n	800db06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800db02:	2301      	movs	r3, #1
 800db04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10b      	bne.n	800db24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	613b      	str	r3, [r7, #16]
}
 800db1e:	bf00      	nop
 800db20:	bf00      	nop
 800db22:	e7fd      	b.n	800db20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800db24:	697b      	ldr	r3, [r7, #20]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3718      	adds	r7, #24
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	24032bd4 	.word	0x24032bd4
 800db34:	08019064 	.word	0x08019064
 800db38:	0800dc79 	.word	0x0800dc79
 800db3c:	24032bd8 	.word	0x24032bd8

0800db40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b08a      	sub	sp, #40	@ 0x28
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
 800db4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800db4e:	2300      	movs	r3, #0
 800db50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d10b      	bne.n	800db70 <xTimerGenericCommand+0x30>
	__asm volatile
 800db58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	623b      	str	r3, [r7, #32]
}
 800db6a:	bf00      	nop
 800db6c:	bf00      	nop
 800db6e:	e7fd      	b.n	800db6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800db70:	4b19      	ldr	r3, [pc, #100]	@ (800dbd8 <xTimerGenericCommand+0x98>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d02a      	beq.n	800dbce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	2b05      	cmp	r3, #5
 800db88:	dc18      	bgt.n	800dbbc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800db8a:	f7ff fead 	bl	800d8e8 <xTaskGetSchedulerState>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b02      	cmp	r3, #2
 800db92:	d109      	bne.n	800dba8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800db94:	4b10      	ldr	r3, [pc, #64]	@ (800dbd8 <xTimerGenericCommand+0x98>)
 800db96:	6818      	ldr	r0, [r3, #0]
 800db98:	f107 0110 	add.w	r1, r7, #16
 800db9c:	2300      	movs	r3, #0
 800db9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dba0:	f7fe fc32 	bl	800c408 <xQueueGenericSend>
 800dba4:	6278      	str	r0, [r7, #36]	@ 0x24
 800dba6:	e012      	b.n	800dbce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dba8:	4b0b      	ldr	r3, [pc, #44]	@ (800dbd8 <xTimerGenericCommand+0x98>)
 800dbaa:	6818      	ldr	r0, [r3, #0]
 800dbac:	f107 0110 	add.w	r1, r7, #16
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f7fe fc28 	bl	800c408 <xQueueGenericSend>
 800dbb8:	6278      	str	r0, [r7, #36]	@ 0x24
 800dbba:	e008      	b.n	800dbce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dbbc:	4b06      	ldr	r3, [pc, #24]	@ (800dbd8 <xTimerGenericCommand+0x98>)
 800dbbe:	6818      	ldr	r0, [r3, #0]
 800dbc0:	f107 0110 	add.w	r1, r7, #16
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	683a      	ldr	r2, [r7, #0]
 800dbc8:	f7fe fd20 	bl	800c60c <xQueueGenericSendFromISR>
 800dbcc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3728      	adds	r7, #40	@ 0x28
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	24032bd4 	.word	0x24032bd4

0800dbdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b088      	sub	sp, #32
 800dbe0:	af02      	add	r7, sp, #8
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbe6:	4b23      	ldr	r3, [pc, #140]	@ (800dc74 <prvProcessExpiredTimer+0x98>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	3304      	adds	r3, #4
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fe fad3 	bl	800c1a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc00:	f003 0304 	and.w	r3, r3, #4
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d023      	beq.n	800dc50 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	699a      	ldr	r2, [r3, #24]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	18d1      	adds	r1, r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	6978      	ldr	r0, [r7, #20]
 800dc16:	f000 f8d5 	bl	800ddc4 <prvInsertTimerInActiveList>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d020      	beq.n	800dc62 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc20:	2300      	movs	r3, #0
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	2300      	movs	r3, #0
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	2100      	movs	r1, #0
 800dc2a:	6978      	ldr	r0, [r7, #20]
 800dc2c:	f7ff ff88 	bl	800db40 <xTimerGenericCommand>
 800dc30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d114      	bne.n	800dc62 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3c:	f383 8811 	msr	BASEPRI, r3
 800dc40:	f3bf 8f6f 	isb	sy
 800dc44:	f3bf 8f4f 	dsb	sy
 800dc48:	60fb      	str	r3, [r7, #12]
}
 800dc4a:	bf00      	nop
 800dc4c:	bf00      	nop
 800dc4e:	e7fd      	b.n	800dc4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc56:	f023 0301 	bic.w	r3, r3, #1
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	6a1b      	ldr	r3, [r3, #32]
 800dc66:	6978      	ldr	r0, [r7, #20]
 800dc68:	4798      	blx	r3
}
 800dc6a:	bf00      	nop
 800dc6c:	3718      	adds	r7, #24
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	24032bcc 	.word	0x24032bcc

0800dc78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc80:	f107 0308 	add.w	r3, r7, #8
 800dc84:	4618      	mov	r0, r3
 800dc86:	f000 f859 	bl	800dd3c <prvGetNextExpireTime>
 800dc8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f000 f805 	bl	800dca0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dc96:	f000 f8d7 	bl	800de48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc9a:	bf00      	nop
 800dc9c:	e7f0      	b.n	800dc80 <prvTimerTask+0x8>
	...

0800dca0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dcaa:	f7ff fa01 	bl	800d0b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dcae:	f107 0308 	add.w	r3, r7, #8
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f000 f866 	bl	800dd84 <prvSampleTimeNow>
 800dcb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d130      	bne.n	800dd22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10a      	bne.n	800dcdc <prvProcessTimerOrBlockTask+0x3c>
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d806      	bhi.n	800dcdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dcce:	f7ff f9fd 	bl	800d0cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dcd2:	68f9      	ldr	r1, [r7, #12]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f7ff ff81 	bl	800dbdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dcda:	e024      	b.n	800dd26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d008      	beq.n	800dcf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dce2:	4b13      	ldr	r3, [pc, #76]	@ (800dd30 <prvProcessTimerOrBlockTask+0x90>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d101      	bne.n	800dcf0 <prvProcessTimerOrBlockTask+0x50>
 800dcec:	2301      	movs	r3, #1
 800dcee:	e000      	b.n	800dcf2 <prvProcessTimerOrBlockTask+0x52>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dcf4:	4b0f      	ldr	r3, [pc, #60]	@ (800dd34 <prvProcessTimerOrBlockTask+0x94>)
 800dcf6:	6818      	ldr	r0, [r3, #0]
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	4619      	mov	r1, r3
 800dd02:	f7fe ff3d 	bl	800cb80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dd06:	f7ff f9e1 	bl	800d0cc <xTaskResumeAll>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10a      	bne.n	800dd26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dd10:	4b09      	ldr	r3, [pc, #36]	@ (800dd38 <prvProcessTimerOrBlockTask+0x98>)
 800dd12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd16:	601a      	str	r2, [r3, #0]
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	f3bf 8f6f 	isb	sy
}
 800dd20:	e001      	b.n	800dd26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dd22:	f7ff f9d3 	bl	800d0cc <xTaskResumeAll>
}
 800dd26:	bf00      	nop
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	24032bd0 	.word	0x24032bd0
 800dd34:	24032bd4 	.word	0x24032bd4
 800dd38:	e000ed04 	.word	0xe000ed04

0800dd3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b085      	sub	sp, #20
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dd44:	4b0e      	ldr	r3, [pc, #56]	@ (800dd80 <prvGetNextExpireTime+0x44>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d101      	bne.n	800dd52 <prvGetNextExpireTime+0x16>
 800dd4e:	2201      	movs	r2, #1
 800dd50:	e000      	b.n	800dd54 <prvGetNextExpireTime+0x18>
 800dd52:	2200      	movs	r2, #0
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d105      	bne.n	800dd6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd60:	4b07      	ldr	r3, [pc, #28]	@ (800dd80 <prvGetNextExpireTime+0x44>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	60fb      	str	r3, [r7, #12]
 800dd6a:	e001      	b.n	800dd70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dd70:	68fb      	ldr	r3, [r7, #12]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3714      	adds	r7, #20
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	24032bcc 	.word	0x24032bcc

0800dd84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dd8c:	f7ff fa3c 	bl	800d208 <xTaskGetTickCount>
 800dd90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dd92:	4b0b      	ldr	r3, [pc, #44]	@ (800ddc0 <prvSampleTimeNow+0x3c>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d205      	bcs.n	800dda8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dd9c:	f000 f93a 	bl	800e014 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	601a      	str	r2, [r3, #0]
 800dda6:	e002      	b.n	800ddae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ddae:	4a04      	ldr	r2, [pc, #16]	@ (800ddc0 <prvSampleTimeNow+0x3c>)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	24032bdc 	.word	0x24032bdc

0800ddc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	68ba      	ldr	r2, [r7, #8]
 800ddda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d812      	bhi.n	800de10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	1ad2      	subs	r2, r2, r3
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	699b      	ldr	r3, [r3, #24]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d302      	bcc.n	800ddfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	617b      	str	r3, [r7, #20]
 800ddfc:	e01b      	b.n	800de36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ddfe:	4b10      	ldr	r3, [pc, #64]	@ (800de40 <prvInsertTimerInActiveList+0x7c>)
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	3304      	adds	r3, #4
 800de06:	4619      	mov	r1, r3
 800de08:	4610      	mov	r0, r2
 800de0a:	f7fe f990 	bl	800c12e <vListInsert>
 800de0e:	e012      	b.n	800de36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	429a      	cmp	r2, r3
 800de16:	d206      	bcs.n	800de26 <prvInsertTimerInActiveList+0x62>
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d302      	bcc.n	800de26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800de20:	2301      	movs	r3, #1
 800de22:	617b      	str	r3, [r7, #20]
 800de24:	e007      	b.n	800de36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de26:	4b07      	ldr	r3, [pc, #28]	@ (800de44 <prvInsertTimerInActiveList+0x80>)
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	3304      	adds	r3, #4
 800de2e:	4619      	mov	r1, r3
 800de30:	4610      	mov	r0, r2
 800de32:	f7fe f97c 	bl	800c12e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800de36:	697b      	ldr	r3, [r7, #20]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3718      	adds	r7, #24
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	24032bd0 	.word	0x24032bd0
 800de44:	24032bcc 	.word	0x24032bcc

0800de48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b08e      	sub	sp, #56	@ 0x38
 800de4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de4e:	e0ce      	b.n	800dfee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	da19      	bge.n	800de8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800de56:	1d3b      	adds	r3, r7, #4
 800de58:	3304      	adds	r3, #4
 800de5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800de5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10b      	bne.n	800de7a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	61fb      	str	r3, [r7, #28]
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop
 800de78:	e7fd      	b.n	800de76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800de7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de80:	6850      	ldr	r0, [r2, #4]
 800de82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de84:	6892      	ldr	r2, [r2, #8]
 800de86:	4611      	mov	r1, r2
 800de88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f2c0 80ae 	blt.w	800dfee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800de96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d004      	beq.n	800dea8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea0:	3304      	adds	r3, #4
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fe f97c 	bl	800c1a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dea8:	463b      	mov	r3, r7
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff ff6a 	bl	800dd84 <prvSampleTimeNow>
 800deb0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b09      	cmp	r3, #9
 800deb6:	f200 8097 	bhi.w	800dfe8 <prvProcessReceivedCommands+0x1a0>
 800deba:	a201      	add	r2, pc, #4	@ (adr r2, 800dec0 <prvProcessReceivedCommands+0x78>)
 800debc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec0:	0800dee9 	.word	0x0800dee9
 800dec4:	0800dee9 	.word	0x0800dee9
 800dec8:	0800dee9 	.word	0x0800dee9
 800decc:	0800df5f 	.word	0x0800df5f
 800ded0:	0800df73 	.word	0x0800df73
 800ded4:	0800dfbf 	.word	0x0800dfbf
 800ded8:	0800dee9 	.word	0x0800dee9
 800dedc:	0800dee9 	.word	0x0800dee9
 800dee0:	0800df5f 	.word	0x0800df5f
 800dee4:	0800df73 	.word	0x0800df73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800deee:	f043 0301 	orr.w	r3, r3, #1
 800def2:	b2da      	uxtb	r2, r3
 800def4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	18d1      	adds	r1, r2, r3
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df08:	f7ff ff5c 	bl	800ddc4 <prvInsertTimerInActiveList>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d06c      	beq.n	800dfec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df20:	f003 0304 	and.w	r3, r3, #4
 800df24:	2b00      	cmp	r3, #0
 800df26:	d061      	beq.n	800dfec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df2c:	699b      	ldr	r3, [r3, #24]
 800df2e:	441a      	add	r2, r3
 800df30:	2300      	movs	r3, #0
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	2300      	movs	r3, #0
 800df36:	2100      	movs	r1, #0
 800df38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df3a:	f7ff fe01 	bl	800db40 <xTimerGenericCommand>
 800df3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800df40:	6a3b      	ldr	r3, [r7, #32]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d152      	bne.n	800dfec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800df46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4a:	f383 8811 	msr	BASEPRI, r3
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	61bb      	str	r3, [r7, #24]
}
 800df58:	bf00      	nop
 800df5a:	bf00      	nop
 800df5c:	e7fd      	b.n	800df5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df64:	f023 0301 	bic.w	r3, r3, #1
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800df70:	e03d      	b.n	800dfee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df78:	f043 0301 	orr.w	r3, r3, #1
 800df7c:	b2da      	uxtb	r2, r3
 800df7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800df8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8c:	699b      	ldr	r3, [r3, #24]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10b      	bne.n	800dfaa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	617b      	str	r3, [r7, #20]
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop
 800dfa8:	e7fd      	b.n	800dfa6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfac:	699a      	ldr	r2, [r3, #24]
 800dfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb0:	18d1      	adds	r1, r2, r3
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfb8:	f7ff ff04 	bl	800ddc4 <prvInsertTimerInActiveList>
					break;
 800dfbc:	e017      	b.n	800dfee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dfbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfc4:	f003 0302 	and.w	r3, r3, #2
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d103      	bne.n	800dfd4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dfcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfce:	f000 fbeb 	bl	800e7a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dfd2:	e00c      	b.n	800dfee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfda:	f023 0301 	bic.w	r3, r3, #1
 800dfde:	b2da      	uxtb	r2, r3
 800dfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dfe6:	e002      	b.n	800dfee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dfe8:	bf00      	nop
 800dfea:	e000      	b.n	800dfee <prvProcessReceivedCommands+0x1a6>
					break;
 800dfec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dfee:	4b08      	ldr	r3, [pc, #32]	@ (800e010 <prvProcessReceivedCommands+0x1c8>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	1d39      	adds	r1, r7, #4
 800dff4:	2200      	movs	r2, #0
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe fba6 	bl	800c748 <xQueueReceive>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f47f af26 	bne.w	800de50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e004:	bf00      	nop
 800e006:	bf00      	nop
 800e008:	3730      	adds	r7, #48	@ 0x30
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	24032bd4 	.word	0x24032bd4

0800e014 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b088      	sub	sp, #32
 800e018:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e01a:	e049      	b.n	800e0b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e01c:	4b2e      	ldr	r3, [pc, #184]	@ (800e0d8 <prvSwitchTimerLists+0xc4>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e026:	4b2c      	ldr	r3, [pc, #176]	@ (800e0d8 <prvSwitchTimerLists+0xc4>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	3304      	adds	r3, #4
 800e034:	4618      	mov	r0, r3
 800e036:	f7fe f8b3 	bl	800c1a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e048:	f003 0304 	and.w	r3, r3, #4
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d02f      	beq.n	800e0b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	699b      	ldr	r3, [r3, #24]
 800e054:	693a      	ldr	r2, [r7, #16]
 800e056:	4413      	add	r3, r2
 800e058:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d90e      	bls.n	800e080 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e06e:	4b1a      	ldr	r3, [pc, #104]	@ (800e0d8 <prvSwitchTimerLists+0xc4>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	3304      	adds	r3, #4
 800e076:	4619      	mov	r1, r3
 800e078:	4610      	mov	r0, r2
 800e07a:	f7fe f858 	bl	800c12e <vListInsert>
 800e07e:	e017      	b.n	800e0b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e080:	2300      	movs	r3, #0
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	2300      	movs	r3, #0
 800e086:	693a      	ldr	r2, [r7, #16]
 800e088:	2100      	movs	r1, #0
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f7ff fd58 	bl	800db40 <xTimerGenericCommand>
 800e090:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10b      	bne.n	800e0b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e09c:	f383 8811 	msr	BASEPRI, r3
 800e0a0:	f3bf 8f6f 	isb	sy
 800e0a4:	f3bf 8f4f 	dsb	sy
 800e0a8:	603b      	str	r3, [r7, #0]
}
 800e0aa:	bf00      	nop
 800e0ac:	bf00      	nop
 800e0ae:	e7fd      	b.n	800e0ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0b0:	4b09      	ldr	r3, [pc, #36]	@ (800e0d8 <prvSwitchTimerLists+0xc4>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1b0      	bne.n	800e01c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e0ba:	4b07      	ldr	r3, [pc, #28]	@ (800e0d8 <prvSwitchTimerLists+0xc4>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e0c0:	4b06      	ldr	r3, [pc, #24]	@ (800e0dc <prvSwitchTimerLists+0xc8>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a04      	ldr	r2, [pc, #16]	@ (800e0d8 <prvSwitchTimerLists+0xc4>)
 800e0c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e0c8:	4a04      	ldr	r2, [pc, #16]	@ (800e0dc <prvSwitchTimerLists+0xc8>)
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	6013      	str	r3, [r2, #0]
}
 800e0ce:	bf00      	nop
 800e0d0:	3718      	adds	r7, #24
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	24032bcc 	.word	0x24032bcc
 800e0dc:	24032bd0 	.word	0x24032bd0

0800e0e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e0e6:	f000 f96f 	bl	800e3c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e0ea:	4b15      	ldr	r3, [pc, #84]	@ (800e140 <prvCheckForValidListAndQueue+0x60>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d120      	bne.n	800e134 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e0f2:	4814      	ldr	r0, [pc, #80]	@ (800e144 <prvCheckForValidListAndQueue+0x64>)
 800e0f4:	f7fd ffca 	bl	800c08c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e0f8:	4813      	ldr	r0, [pc, #76]	@ (800e148 <prvCheckForValidListAndQueue+0x68>)
 800e0fa:	f7fd ffc7 	bl	800c08c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e0fe:	4b13      	ldr	r3, [pc, #76]	@ (800e14c <prvCheckForValidListAndQueue+0x6c>)
 800e100:	4a10      	ldr	r2, [pc, #64]	@ (800e144 <prvCheckForValidListAndQueue+0x64>)
 800e102:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e104:	4b12      	ldr	r3, [pc, #72]	@ (800e150 <prvCheckForValidListAndQueue+0x70>)
 800e106:	4a10      	ldr	r2, [pc, #64]	@ (800e148 <prvCheckForValidListAndQueue+0x68>)
 800e108:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e10a:	2300      	movs	r3, #0
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	4b11      	ldr	r3, [pc, #68]	@ (800e154 <prvCheckForValidListAndQueue+0x74>)
 800e110:	4a11      	ldr	r2, [pc, #68]	@ (800e158 <prvCheckForValidListAndQueue+0x78>)
 800e112:	2110      	movs	r1, #16
 800e114:	200a      	movs	r0, #10
 800e116:	f7fe f8d7 	bl	800c2c8 <xQueueGenericCreateStatic>
 800e11a:	4603      	mov	r3, r0
 800e11c:	4a08      	ldr	r2, [pc, #32]	@ (800e140 <prvCheckForValidListAndQueue+0x60>)
 800e11e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e120:	4b07      	ldr	r3, [pc, #28]	@ (800e140 <prvCheckForValidListAndQueue+0x60>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d005      	beq.n	800e134 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e128:	4b05      	ldr	r3, [pc, #20]	@ (800e140 <prvCheckForValidListAndQueue+0x60>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	490b      	ldr	r1, [pc, #44]	@ (800e15c <prvCheckForValidListAndQueue+0x7c>)
 800e12e:	4618      	mov	r0, r3
 800e130:	f7fe fcfc 	bl	800cb2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e134:	f000 f97a 	bl	800e42c <vPortExitCritical>
}
 800e138:	bf00      	nop
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	24032bd4 	.word	0x24032bd4
 800e144:	24032ba4 	.word	0x24032ba4
 800e148:	24032bb8 	.word	0x24032bb8
 800e14c:	24032bcc 	.word	0x24032bcc
 800e150:	24032bd0 	.word	0x24032bd0
 800e154:	24032c80 	.word	0x24032c80
 800e158:	24032be0 	.word	0x24032be0
 800e15c:	0801906c 	.word	0x0801906c

0800e160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	3b04      	subs	r3, #4
 800e170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	3b04      	subs	r3, #4
 800e17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	f023 0201 	bic.w	r2, r3, #1
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	3b04      	subs	r3, #4
 800e18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e190:	4a0c      	ldr	r2, [pc, #48]	@ (800e1c4 <pxPortInitialiseStack+0x64>)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	3b14      	subs	r3, #20
 800e19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3b04      	subs	r3, #4
 800e1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f06f 0202 	mvn.w	r2, #2
 800e1ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	3b20      	subs	r3, #32
 800e1b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3714      	adds	r7, #20
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr
 800e1c4:	0800e1c9 	.word	0x0800e1c9

0800e1c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e1d2:	4b13      	ldr	r3, [pc, #76]	@ (800e220 <prvTaskExitError+0x58>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1da:	d00b      	beq.n	800e1f4 <prvTaskExitError+0x2c>
	__asm volatile
 800e1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e0:	f383 8811 	msr	BASEPRI, r3
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	60fb      	str	r3, [r7, #12]
}
 800e1ee:	bf00      	nop
 800e1f0:	bf00      	nop
 800e1f2:	e7fd      	b.n	800e1f0 <prvTaskExitError+0x28>
	__asm volatile
 800e1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1f8:	f383 8811 	msr	BASEPRI, r3
 800e1fc:	f3bf 8f6f 	isb	sy
 800e200:	f3bf 8f4f 	dsb	sy
 800e204:	60bb      	str	r3, [r7, #8]
}
 800e206:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e208:	bf00      	nop
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d0fc      	beq.n	800e20a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e210:	bf00      	nop
 800e212:	bf00      	nop
 800e214:	3714      	adds	r7, #20
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	24000014 	.word	0x24000014
	...

0800e230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e230:	4b07      	ldr	r3, [pc, #28]	@ (800e250 <pxCurrentTCBConst2>)
 800e232:	6819      	ldr	r1, [r3, #0]
 800e234:	6808      	ldr	r0, [r1, #0]
 800e236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23a:	f380 8809 	msr	PSP, r0
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f04f 0000 	mov.w	r0, #0
 800e246:	f380 8811 	msr	BASEPRI, r0
 800e24a:	4770      	bx	lr
 800e24c:	f3af 8000 	nop.w

0800e250 <pxCurrentTCBConst2>:
 800e250:	240326a4 	.word	0x240326a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e254:	bf00      	nop
 800e256:	bf00      	nop

0800e258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e258:	4808      	ldr	r0, [pc, #32]	@ (800e27c <prvPortStartFirstTask+0x24>)
 800e25a:	6800      	ldr	r0, [r0, #0]
 800e25c:	6800      	ldr	r0, [r0, #0]
 800e25e:	f380 8808 	msr	MSP, r0
 800e262:	f04f 0000 	mov.w	r0, #0
 800e266:	f380 8814 	msr	CONTROL, r0
 800e26a:	b662      	cpsie	i
 800e26c:	b661      	cpsie	f
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	df00      	svc	0
 800e278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e27a:	bf00      	nop
 800e27c:	e000ed08 	.word	0xe000ed08

0800e280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e286:	4b47      	ldr	r3, [pc, #284]	@ (800e3a4 <xPortStartScheduler+0x124>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a47      	ldr	r2, [pc, #284]	@ (800e3a8 <xPortStartScheduler+0x128>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d10b      	bne.n	800e2a8 <xPortStartScheduler+0x28>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	613b      	str	r3, [r7, #16]
}
 800e2a2:	bf00      	nop
 800e2a4:	bf00      	nop
 800e2a6:	e7fd      	b.n	800e2a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e2a8:	4b3e      	ldr	r3, [pc, #248]	@ (800e3a4 <xPortStartScheduler+0x124>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a3f      	ldr	r2, [pc, #252]	@ (800e3ac <xPortStartScheduler+0x12c>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d10b      	bne.n	800e2ca <xPortStartScheduler+0x4a>
	__asm volatile
 800e2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	60fb      	str	r3, [r7, #12]
}
 800e2c4:	bf00      	nop
 800e2c6:	bf00      	nop
 800e2c8:	e7fd      	b.n	800e2c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e2ca:	4b39      	ldr	r3, [pc, #228]	@ (800e3b0 <xPortStartScheduler+0x130>)
 800e2cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	22ff      	movs	r2, #255	@ 0xff
 800e2da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e2e4:	78fb      	ldrb	r3, [r7, #3]
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e2ec:	b2da      	uxtb	r2, r3
 800e2ee:	4b31      	ldr	r3, [pc, #196]	@ (800e3b4 <xPortStartScheduler+0x134>)
 800e2f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e2f2:	4b31      	ldr	r3, [pc, #196]	@ (800e3b8 <xPortStartScheduler+0x138>)
 800e2f4:	2207      	movs	r2, #7
 800e2f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2f8:	e009      	b.n	800e30e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e2fa:	4b2f      	ldr	r3, [pc, #188]	@ (800e3b8 <xPortStartScheduler+0x138>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3b01      	subs	r3, #1
 800e300:	4a2d      	ldr	r2, [pc, #180]	@ (800e3b8 <xPortStartScheduler+0x138>)
 800e302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e304:	78fb      	ldrb	r3, [r7, #3]
 800e306:	b2db      	uxtb	r3, r3
 800e308:	005b      	lsls	r3, r3, #1
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e30e:	78fb      	ldrb	r3, [r7, #3]
 800e310:	b2db      	uxtb	r3, r3
 800e312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e316:	2b80      	cmp	r3, #128	@ 0x80
 800e318:	d0ef      	beq.n	800e2fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e31a:	4b27      	ldr	r3, [pc, #156]	@ (800e3b8 <xPortStartScheduler+0x138>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f1c3 0307 	rsb	r3, r3, #7
 800e322:	2b04      	cmp	r3, #4
 800e324:	d00b      	beq.n	800e33e <xPortStartScheduler+0xbe>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	60bb      	str	r3, [r7, #8]
}
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	e7fd      	b.n	800e33a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e33e:	4b1e      	ldr	r3, [pc, #120]	@ (800e3b8 <xPortStartScheduler+0x138>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	021b      	lsls	r3, r3, #8
 800e344:	4a1c      	ldr	r2, [pc, #112]	@ (800e3b8 <xPortStartScheduler+0x138>)
 800e346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e348:	4b1b      	ldr	r3, [pc, #108]	@ (800e3b8 <xPortStartScheduler+0x138>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e350:	4a19      	ldr	r2, [pc, #100]	@ (800e3b8 <xPortStartScheduler+0x138>)
 800e352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	b2da      	uxtb	r2, r3
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e35c:	4b17      	ldr	r3, [pc, #92]	@ (800e3bc <xPortStartScheduler+0x13c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a16      	ldr	r2, [pc, #88]	@ (800e3bc <xPortStartScheduler+0x13c>)
 800e362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e368:	4b14      	ldr	r3, [pc, #80]	@ (800e3bc <xPortStartScheduler+0x13c>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a13      	ldr	r2, [pc, #76]	@ (800e3bc <xPortStartScheduler+0x13c>)
 800e36e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e374:	f000 f8da 	bl	800e52c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e378:	4b11      	ldr	r3, [pc, #68]	@ (800e3c0 <xPortStartScheduler+0x140>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e37e:	f000 f8f9 	bl	800e574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e382:	4b10      	ldr	r3, [pc, #64]	@ (800e3c4 <xPortStartScheduler+0x144>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a0f      	ldr	r2, [pc, #60]	@ (800e3c4 <xPortStartScheduler+0x144>)
 800e388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e38c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e38e:	f7ff ff63 	bl	800e258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e392:	f7ff f803 	bl	800d39c <vTaskSwitchContext>
	prvTaskExitError();
 800e396:	f7ff ff17 	bl	800e1c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3718      	adds	r7, #24
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	e000ed00 	.word	0xe000ed00
 800e3a8:	410fc271 	.word	0x410fc271
 800e3ac:	410fc270 	.word	0x410fc270
 800e3b0:	e000e400 	.word	0xe000e400
 800e3b4:	24032cd0 	.word	0x24032cd0
 800e3b8:	24032cd4 	.word	0x24032cd4
 800e3bc:	e000ed20 	.word	0xe000ed20
 800e3c0:	24000014 	.word	0x24000014
 800e3c4:	e000ef34 	.word	0xe000ef34

0800e3c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	607b      	str	r3, [r7, #4]
}
 800e3e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e3e2:	4b10      	ldr	r3, [pc, #64]	@ (800e424 <vPortEnterCritical+0x5c>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	4a0e      	ldr	r2, [pc, #56]	@ (800e424 <vPortEnterCritical+0x5c>)
 800e3ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e3ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e424 <vPortEnterCritical+0x5c>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d110      	bne.n	800e416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e428 <vPortEnterCritical+0x60>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00b      	beq.n	800e416 <vPortEnterCritical+0x4e>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	603b      	str	r3, [r7, #0]
}
 800e410:	bf00      	nop
 800e412:	bf00      	nop
 800e414:	e7fd      	b.n	800e412 <vPortEnterCritical+0x4a>
	}
}
 800e416:	bf00      	nop
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	24000014 	.word	0x24000014
 800e428:	e000ed04 	.word	0xe000ed04

0800e42c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e432:	4b12      	ldr	r3, [pc, #72]	@ (800e47c <vPortExitCritical+0x50>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10b      	bne.n	800e452 <vPortExitCritical+0x26>
	__asm volatile
 800e43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e43e:	f383 8811 	msr	BASEPRI, r3
 800e442:	f3bf 8f6f 	isb	sy
 800e446:	f3bf 8f4f 	dsb	sy
 800e44a:	607b      	str	r3, [r7, #4]
}
 800e44c:	bf00      	nop
 800e44e:	bf00      	nop
 800e450:	e7fd      	b.n	800e44e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e452:	4b0a      	ldr	r3, [pc, #40]	@ (800e47c <vPortExitCritical+0x50>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	3b01      	subs	r3, #1
 800e458:	4a08      	ldr	r2, [pc, #32]	@ (800e47c <vPortExitCritical+0x50>)
 800e45a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e45c:	4b07      	ldr	r3, [pc, #28]	@ (800e47c <vPortExitCritical+0x50>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d105      	bne.n	800e470 <vPortExitCritical+0x44>
 800e464:	2300      	movs	r3, #0
 800e466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	f383 8811 	msr	BASEPRI, r3
}
 800e46e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr
 800e47c:	24000014 	.word	0x24000014

0800e480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e480:	f3ef 8009 	mrs	r0, PSP
 800e484:	f3bf 8f6f 	isb	sy
 800e488:	4b15      	ldr	r3, [pc, #84]	@ (800e4e0 <pxCurrentTCBConst>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	f01e 0f10 	tst.w	lr, #16
 800e490:	bf08      	it	eq
 800e492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	6010      	str	r0, [r2, #0]
 800e49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e4a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e4a4:	f380 8811 	msr	BASEPRI, r0
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f7fe ff74 	bl	800d39c <vTaskSwitchContext>
 800e4b4:	f04f 0000 	mov.w	r0, #0
 800e4b8:	f380 8811 	msr	BASEPRI, r0
 800e4bc:	bc09      	pop	{r0, r3}
 800e4be:	6819      	ldr	r1, [r3, #0]
 800e4c0:	6808      	ldr	r0, [r1, #0]
 800e4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c6:	f01e 0f10 	tst.w	lr, #16
 800e4ca:	bf08      	it	eq
 800e4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e4d0:	f380 8809 	msr	PSP, r0
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	f3af 8000 	nop.w

0800e4e0 <pxCurrentTCBConst>:
 800e4e0:	240326a4 	.word	0x240326a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e4e4:	bf00      	nop
 800e4e6:	bf00      	nop

0800e4e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	607b      	str	r3, [r7, #4]
}
 800e500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e502:	f7fe fe91 	bl	800d228 <xTaskIncrementTick>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d003      	beq.n	800e514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e50c:	4b06      	ldr	r3, [pc, #24]	@ (800e528 <xPortSysTickHandler+0x40>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	2300      	movs	r3, #0
 800e516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f383 8811 	msr	BASEPRI, r3
}
 800e51e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	e000ed04 	.word	0xe000ed04

0800e52c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e52c:	b480      	push	{r7}
 800e52e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e530:	4b0b      	ldr	r3, [pc, #44]	@ (800e560 <vPortSetupTimerInterrupt+0x34>)
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e536:	4b0b      	ldr	r3, [pc, #44]	@ (800e564 <vPortSetupTimerInterrupt+0x38>)
 800e538:	2200      	movs	r2, #0
 800e53a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e53c:	4b0a      	ldr	r3, [pc, #40]	@ (800e568 <vPortSetupTimerInterrupt+0x3c>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a0a      	ldr	r2, [pc, #40]	@ (800e56c <vPortSetupTimerInterrupt+0x40>)
 800e542:	fba2 2303 	umull	r2, r3, r2, r3
 800e546:	099b      	lsrs	r3, r3, #6
 800e548:	4a09      	ldr	r2, [pc, #36]	@ (800e570 <vPortSetupTimerInterrupt+0x44>)
 800e54a:	3b01      	subs	r3, #1
 800e54c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e54e:	4b04      	ldr	r3, [pc, #16]	@ (800e560 <vPortSetupTimerInterrupt+0x34>)
 800e550:	2207      	movs	r2, #7
 800e552:	601a      	str	r2, [r3, #0]
}
 800e554:	bf00      	nop
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	e000e010 	.word	0xe000e010
 800e564:	e000e018 	.word	0xe000e018
 800e568:	24000004 	.word	0x24000004
 800e56c:	10624dd3 	.word	0x10624dd3
 800e570:	e000e014 	.word	0xe000e014

0800e574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e584 <vPortEnableVFP+0x10>
 800e578:	6801      	ldr	r1, [r0, #0]
 800e57a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e57e:	6001      	str	r1, [r0, #0]
 800e580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e582:	bf00      	nop
 800e584:	e000ed88 	.word	0xe000ed88

0800e588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e58e:	f3ef 8305 	mrs	r3, IPSR
 800e592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2b0f      	cmp	r3, #15
 800e598:	d915      	bls.n	800e5c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e59a:	4a18      	ldr	r2, [pc, #96]	@ (800e5fc <vPortValidateInterruptPriority+0x74>)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	4413      	add	r3, r2
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e5a4:	4b16      	ldr	r3, [pc, #88]	@ (800e600 <vPortValidateInterruptPriority+0x78>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	7afa      	ldrb	r2, [r7, #11]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d20b      	bcs.n	800e5c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	607b      	str	r3, [r7, #4]
}
 800e5c0:	bf00      	nop
 800e5c2:	bf00      	nop
 800e5c4:	e7fd      	b.n	800e5c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e5c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e604 <vPortValidateInterruptPriority+0x7c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e5ce:	4b0e      	ldr	r3, [pc, #56]	@ (800e608 <vPortValidateInterruptPriority+0x80>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d90b      	bls.n	800e5ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	603b      	str	r3, [r7, #0]
}
 800e5e8:	bf00      	nop
 800e5ea:	bf00      	nop
 800e5ec:	e7fd      	b.n	800e5ea <vPortValidateInterruptPriority+0x62>
	}
 800e5ee:	bf00      	nop
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	e000e3f0 	.word	0xe000e3f0
 800e600:	24032cd0 	.word	0x24032cd0
 800e604:	e000ed0c 	.word	0xe000ed0c
 800e608:	24032cd4 	.word	0x24032cd4

0800e60c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b08a      	sub	sp, #40	@ 0x28
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e614:	2300      	movs	r3, #0
 800e616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e618:	f7fe fd4a 	bl	800d0b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e61c:	4b5c      	ldr	r3, [pc, #368]	@ (800e790 <pvPortMalloc+0x184>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e624:	f000 f924 	bl	800e870 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e628:	4b5a      	ldr	r3, [pc, #360]	@ (800e794 <pvPortMalloc+0x188>)
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4013      	ands	r3, r2
 800e630:	2b00      	cmp	r3, #0
 800e632:	f040 8095 	bne.w	800e760 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d01e      	beq.n	800e67a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e63c:	2208      	movs	r2, #8
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4413      	add	r3, r2
 800e642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f003 0307 	and.w	r3, r3, #7
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d015      	beq.n	800e67a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f023 0307 	bic.w	r3, r3, #7
 800e654:	3308      	adds	r3, #8
 800e656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f003 0307 	and.w	r3, r3, #7
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00b      	beq.n	800e67a <pvPortMalloc+0x6e>
	__asm volatile
 800e662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	617b      	str	r3, [r7, #20]
}
 800e674:	bf00      	nop
 800e676:	bf00      	nop
 800e678:	e7fd      	b.n	800e676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d06f      	beq.n	800e760 <pvPortMalloc+0x154>
 800e680:	4b45      	ldr	r3, [pc, #276]	@ (800e798 <pvPortMalloc+0x18c>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	429a      	cmp	r2, r3
 800e688:	d86a      	bhi.n	800e760 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e68a:	4b44      	ldr	r3, [pc, #272]	@ (800e79c <pvPortMalloc+0x190>)
 800e68c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e68e:	4b43      	ldr	r3, [pc, #268]	@ (800e79c <pvPortMalloc+0x190>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e694:	e004      	b.n	800e6a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d903      	bls.n	800e6b2 <pvPortMalloc+0xa6>
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d1f1      	bne.n	800e696 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e6b2:	4b37      	ldr	r3, [pc, #220]	@ (800e790 <pvPortMalloc+0x184>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d051      	beq.n	800e760 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e6bc:	6a3b      	ldr	r3, [r7, #32]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2208      	movs	r2, #8
 800e6c2:	4413      	add	r3, r2
 800e6c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	6a3b      	ldr	r3, [r7, #32]
 800e6cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d0:	685a      	ldr	r2, [r3, #4]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	1ad2      	subs	r2, r2, r3
 800e6d6:	2308      	movs	r3, #8
 800e6d8:	005b      	lsls	r3, r3, #1
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d920      	bls.n	800e720 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e6de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	f003 0307 	and.w	r3, r3, #7
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00b      	beq.n	800e708 <pvPortMalloc+0xfc>
	__asm volatile
 800e6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	613b      	str	r3, [r7, #16]
}
 800e702:	bf00      	nop
 800e704:	bf00      	nop
 800e706:	e7fd      	b.n	800e704 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70a:	685a      	ldr	r2, [r3, #4]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	1ad2      	subs	r2, r2, r3
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e71a:	69b8      	ldr	r0, [r7, #24]
 800e71c:	f000 f90c 	bl	800e938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e720:	4b1d      	ldr	r3, [pc, #116]	@ (800e798 <pvPortMalloc+0x18c>)
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	4a1b      	ldr	r2, [pc, #108]	@ (800e798 <pvPortMalloc+0x18c>)
 800e72c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e72e:	4b1a      	ldr	r3, [pc, #104]	@ (800e798 <pvPortMalloc+0x18c>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	4b1b      	ldr	r3, [pc, #108]	@ (800e7a0 <pvPortMalloc+0x194>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	429a      	cmp	r2, r3
 800e738:	d203      	bcs.n	800e742 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e73a:	4b17      	ldr	r3, [pc, #92]	@ (800e798 <pvPortMalloc+0x18c>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a18      	ldr	r2, [pc, #96]	@ (800e7a0 <pvPortMalloc+0x194>)
 800e740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e744:	685a      	ldr	r2, [r3, #4]
 800e746:	4b13      	ldr	r3, [pc, #76]	@ (800e794 <pvPortMalloc+0x188>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	431a      	orrs	r2, r3
 800e74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e752:	2200      	movs	r2, #0
 800e754:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e756:	4b13      	ldr	r3, [pc, #76]	@ (800e7a4 <pvPortMalloc+0x198>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3301      	adds	r3, #1
 800e75c:	4a11      	ldr	r2, [pc, #68]	@ (800e7a4 <pvPortMalloc+0x198>)
 800e75e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e760:	f7fe fcb4 	bl	800d0cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	f003 0307 	and.w	r3, r3, #7
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00b      	beq.n	800e786 <pvPortMalloc+0x17a>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	60fb      	str	r3, [r7, #12]
}
 800e780:	bf00      	nop
 800e782:	bf00      	nop
 800e784:	e7fd      	b.n	800e782 <pvPortMalloc+0x176>
	return pvReturn;
 800e786:	69fb      	ldr	r3, [r7, #28]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3728      	adds	r7, #40	@ 0x28
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	24063a20 	.word	0x24063a20
 800e794:	24063a34 	.word	0x24063a34
 800e798:	24063a24 	.word	0x24063a24
 800e79c:	24063a18 	.word	0x24063a18
 800e7a0:	24063a28 	.word	0x24063a28
 800e7a4:	24063a2c 	.word	0x24063a2c

0800e7a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b086      	sub	sp, #24
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d04f      	beq.n	800e85a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e7ba:	2308      	movs	r3, #8
 800e7bc:	425b      	negs	r3, r3
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	4b25      	ldr	r3, [pc, #148]	@ (800e864 <vPortFree+0xbc>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10b      	bne.n	800e7ee <vPortFree+0x46>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	60fb      	str	r3, [r7, #12]
}
 800e7e8:	bf00      	nop
 800e7ea:	bf00      	nop
 800e7ec:	e7fd      	b.n	800e7ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00b      	beq.n	800e80e <vPortFree+0x66>
	__asm volatile
 800e7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	60bb      	str	r3, [r7, #8]
}
 800e808:	bf00      	nop
 800e80a:	bf00      	nop
 800e80c:	e7fd      	b.n	800e80a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	685a      	ldr	r2, [r3, #4]
 800e812:	4b14      	ldr	r3, [pc, #80]	@ (800e864 <vPortFree+0xbc>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4013      	ands	r3, r2
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d01e      	beq.n	800e85a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d11a      	bne.n	800e85a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	685a      	ldr	r2, [r3, #4]
 800e828:	4b0e      	ldr	r3, [pc, #56]	@ (800e864 <vPortFree+0xbc>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	43db      	mvns	r3, r3
 800e82e:	401a      	ands	r2, r3
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e834:	f7fe fc3c 	bl	800d0b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	685a      	ldr	r2, [r3, #4]
 800e83c:	4b0a      	ldr	r3, [pc, #40]	@ (800e868 <vPortFree+0xc0>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4413      	add	r3, r2
 800e842:	4a09      	ldr	r2, [pc, #36]	@ (800e868 <vPortFree+0xc0>)
 800e844:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e846:	6938      	ldr	r0, [r7, #16]
 800e848:	f000 f876 	bl	800e938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e84c:	4b07      	ldr	r3, [pc, #28]	@ (800e86c <vPortFree+0xc4>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	3301      	adds	r3, #1
 800e852:	4a06      	ldr	r2, [pc, #24]	@ (800e86c <vPortFree+0xc4>)
 800e854:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e856:	f7fe fc39 	bl	800d0cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e85a:	bf00      	nop
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	24063a34 	.word	0x24063a34
 800e868:	24063a24 	.word	0x24063a24
 800e86c:	24063a30 	.word	0x24063a30

0800e870 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e870:	b480      	push	{r7}
 800e872:	b085      	sub	sp, #20
 800e874:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e876:	4b29      	ldr	r3, [pc, #164]	@ (800e91c <prvHeapInit+0xac>)
 800e878:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e87a:	4b29      	ldr	r3, [pc, #164]	@ (800e920 <prvHeapInit+0xb0>)
 800e87c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f003 0307 	and.w	r3, r3, #7
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00c      	beq.n	800e8a2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	3307      	adds	r3, #7
 800e88c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f023 0307 	bic.w	r3, r3, #7
 800e894:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	4a20      	ldr	r2, [pc, #128]	@ (800e920 <prvHeapInit+0xb0>)
 800e89e:	4413      	add	r3, r2
 800e8a0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e8a6:	4a1f      	ldr	r2, [pc, #124]	@ (800e924 <prvHeapInit+0xb4>)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e8ac:	4b1d      	ldr	r3, [pc, #116]	@ (800e924 <prvHeapInit+0xb4>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e8ba:	2208      	movs	r2, #8
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	1a9b      	subs	r3, r3, r2
 800e8c0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f023 0307 	bic.w	r3, r3, #7
 800e8c8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	4a16      	ldr	r2, [pc, #88]	@ (800e928 <prvHeapInit+0xb8>)
 800e8ce:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e8d0:	4b15      	ldr	r3, [pc, #84]	@ (800e928 <prvHeapInit+0xb8>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e8d8:	4b13      	ldr	r3, [pc, #76]	@ (800e928 <prvHeapInit+0xb8>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	68fa      	ldr	r2, [r7, #12]
 800e8e8:	1ad2      	subs	r2, r2, r3
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e928 <prvHeapInit+0xb8>)
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e92c <prvHeapInit+0xbc>)
 800e8fc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	4a0b      	ldr	r2, [pc, #44]	@ (800e930 <prvHeapInit+0xc0>)
 800e904:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e906:	4b0b      	ldr	r3, [pc, #44]	@ (800e934 <prvHeapInit+0xc4>)
 800e908:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e90c:	601a      	str	r2, [r3, #0]
}
 800e90e:	bf00      	nop
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	00030d40 	.word	0x00030d40
 800e920:	24032cd8 	.word	0x24032cd8
 800e924:	24063a18 	.word	0x24063a18
 800e928:	24063a20 	.word	0x24063a20
 800e92c:	24063a28 	.word	0x24063a28
 800e930:	24063a24 	.word	0x24063a24
 800e934:	24063a34 	.word	0x24063a34

0800e938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e940:	4b28      	ldr	r3, [pc, #160]	@ (800e9e4 <prvInsertBlockIntoFreeList+0xac>)
 800e942:	60fb      	str	r3, [r7, #12]
 800e944:	e002      	b.n	800e94c <prvInsertBlockIntoFreeList+0x14>
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	60fb      	str	r3, [r7, #12]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	429a      	cmp	r2, r3
 800e954:	d8f7      	bhi.n	800e946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	68ba      	ldr	r2, [r7, #8]
 800e960:	4413      	add	r3, r2
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	429a      	cmp	r2, r3
 800e966:	d108      	bne.n	800e97a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	685a      	ldr	r2, [r3, #4]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	441a      	add	r2, r3
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	68ba      	ldr	r2, [r7, #8]
 800e984:	441a      	add	r2, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d118      	bne.n	800e9c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	4b15      	ldr	r3, [pc, #84]	@ (800e9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	429a      	cmp	r2, r3
 800e998:	d00d      	beq.n	800e9b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	441a      	add	r2, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	601a      	str	r2, [r3, #0]
 800e9b4:	e008      	b.n	800e9c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e9b6:	4b0c      	ldr	r3, [pc, #48]	@ (800e9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	e003      	b.n	800e9c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d002      	beq.n	800e9d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9d6:	bf00      	nop
 800e9d8:	3714      	adds	r7, #20
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	24063a18 	.word	0x24063a18
 800e9e8:	24063a20 	.word	0x24063a20

0800e9ec <rcl_get_zero_initialized_publisher>:
 800e9ec:	4b01      	ldr	r3, [pc, #4]	@ (800e9f4 <rcl_get_zero_initialized_publisher+0x8>)
 800e9ee:	6818      	ldr	r0, [r3, #0]
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop
 800e9f4:	080190e4 	.word	0x080190e4

0800e9f8 <rcl_publisher_init>:
 800e9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9fc:	b088      	sub	sp, #32
 800e9fe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ea00:	2e00      	cmp	r6, #0
 800ea02:	d06b      	beq.n	800eadc <rcl_publisher_init+0xe4>
 800ea04:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800ea08:	4605      	mov	r5, r0
 800ea0a:	460f      	mov	r7, r1
 800ea0c:	4690      	mov	r8, r2
 800ea0e:	4650      	mov	r0, sl
 800ea10:	4699      	mov	r9, r3
 800ea12:	f000 f9e5 	bl	800ede0 <rcutils_allocator_is_valid>
 800ea16:	f080 0401 	eor.w	r4, r0, #1
 800ea1a:	b2e4      	uxtb	r4, r4
 800ea1c:	2c00      	cmp	r4, #0
 800ea1e:	d15d      	bne.n	800eadc <rcl_publisher_init+0xe4>
 800ea20:	2d00      	cmp	r5, #0
 800ea22:	d05b      	beq.n	800eadc <rcl_publisher_init+0xe4>
 800ea24:	682b      	ldr	r3, [r5, #0]
 800ea26:	b123      	cbz	r3, 800ea32 <rcl_publisher_init+0x3a>
 800ea28:	2464      	movs	r4, #100	@ 0x64
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	b008      	add	sp, #32
 800ea2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea32:	4638      	mov	r0, r7
 800ea34:	f005 f872 	bl	8013b1c <rcl_node_is_valid>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d054      	beq.n	800eae6 <rcl_publisher_init+0xee>
 800ea3c:	f1b8 0f00 	cmp.w	r8, #0
 800ea40:	d04c      	beq.n	800eadc <rcl_publisher_init+0xe4>
 800ea42:	fab9 f389 	clz	r3, r9
 800ea46:	095b      	lsrs	r3, r3, #5
 800ea48:	f1b9 0f00 	cmp.w	r9, #0
 800ea4c:	d046      	beq.n	800eadc <rcl_publisher_init+0xe4>
 800ea4e:	aa07      	add	r2, sp, #28
 800ea50:	9307      	str	r3, [sp, #28]
 800ea52:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ea56:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ea5a:	9205      	str	r2, [sp, #20]
 800ea5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea60:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ea64:	4649      	mov	r1, r9
 800ea66:	4638      	mov	r0, r7
 800ea68:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800ea6c:	f005 f8ae 	bl	8013bcc <rcl_node_resolve_name>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d14f      	bne.n	800eb14 <rcl_publisher_init+0x11c>
 800ea74:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800ea76:	20c8      	movs	r0, #200	@ 0xc8
 800ea78:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ea7a:	4798      	blx	r3
 800ea7c:	6028      	str	r0, [r5, #0]
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	d050      	beq.n	800eb24 <rcl_publisher_init+0x12c>
 800ea82:	4638      	mov	r0, r7
 800ea84:	f005 f86c 	bl	8013b60 <rcl_node_get_rmw_handle>
 800ea88:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ea8c:	4641      	mov	r1, r8
 800ea8e:	9a07      	ldr	r2, [sp, #28]
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	4633      	mov	r3, r6
 800ea94:	682c      	ldr	r4, [r5, #0]
 800ea96:	f000 fa61 	bl	800ef5c <rmw_create_publisher>
 800ea9a:	682b      	ldr	r3, [r5, #0]
 800ea9c:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800eaa0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eaa4:	b370      	cbz	r0, 800eb04 <rcl_publisher_init+0x10c>
 800eaa6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800eaaa:	f000 fb3b 	bl	800f124 <rmw_publisher_get_actual_qos>
 800eaae:	682b      	ldr	r3, [r5, #0]
 800eab0:	4604      	mov	r4, r0
 800eab2:	b9d0      	cbnz	r0, 800eaea <rcl_publisher_init+0xf2>
 800eab4:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800eab8:	4631      	mov	r1, r6
 800eaba:	4618      	mov	r0, r3
 800eabc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800eac0:	2270      	movs	r2, #112	@ 0x70
 800eac2:	f009 fba0 	bl	8018206 <memcpy>
 800eac6:	683a      	ldr	r2, [r7, #0]
 800eac8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800eacc:	9807      	ldr	r0, [sp, #28]
 800eace:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ead0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ead2:	4798      	blx	r3
 800ead4:	4620      	mov	r0, r4
 800ead6:	b008      	add	sp, #32
 800ead8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eadc:	240b      	movs	r4, #11
 800eade:	4620      	mov	r0, r4
 800eae0:	b008      	add	sp, #32
 800eae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae6:	24c8      	movs	r4, #200	@ 0xc8
 800eae8:	e79f      	b.n	800ea2a <rcl_publisher_init+0x32>
 800eaea:	b1cb      	cbz	r3, 800eb20 <rcl_publisher_init+0x128>
 800eaec:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800eaf0:	b142      	cbz	r2, 800eb04 <rcl_publisher_init+0x10c>
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	f005 f834 	bl	8013b60 <rcl_node_get_rmw_handle>
 800eaf8:	682b      	ldr	r3, [r5, #0]
 800eafa:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800eafe:	f000 fb25 	bl	800f14c <rmw_destroy_publisher>
 800eb02:	682b      	ldr	r3, [r5, #0]
 800eb04:	4618      	mov	r0, r3
 800eb06:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800eb08:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800eb0a:	2401      	movs	r4, #1
 800eb0c:	4790      	blx	r2
 800eb0e:	2300      	movs	r3, #0
 800eb10:	602b      	str	r3, [r5, #0]
 800eb12:	e7db      	b.n	800eacc <rcl_publisher_init+0xd4>
 800eb14:	2867      	cmp	r0, #103	@ 0x67
 800eb16:	d007      	beq.n	800eb28 <rcl_publisher_init+0x130>
 800eb18:	2869      	cmp	r0, #105	@ 0x69
 800eb1a:	d005      	beq.n	800eb28 <rcl_publisher_init+0x130>
 800eb1c:	280a      	cmp	r0, #10
 800eb1e:	d001      	beq.n	800eb24 <rcl_publisher_init+0x12c>
 800eb20:	2401      	movs	r4, #1
 800eb22:	e7d3      	b.n	800eacc <rcl_publisher_init+0xd4>
 800eb24:	240a      	movs	r4, #10
 800eb26:	e7d1      	b.n	800eacc <rcl_publisher_init+0xd4>
 800eb28:	2467      	movs	r4, #103	@ 0x67
 800eb2a:	e7cf      	b.n	800eacc <rcl_publisher_init+0xd4>

0800eb2c <rcl_publisher_get_default_options>:
 800eb2c:	b570      	push	{r4, r5, r6, lr}
 800eb2e:	4d14      	ldr	r5, [pc, #80]	@ (800eb80 <rcl_publisher_get_default_options+0x54>)
 800eb30:	b088      	sub	sp, #32
 800eb32:	4604      	mov	r4, r0
 800eb34:	2250      	movs	r2, #80	@ 0x50
 800eb36:	4913      	ldr	r1, [pc, #76]	@ (800eb84 <rcl_publisher_get_default_options+0x58>)
 800eb38:	4628      	mov	r0, r5
 800eb3a:	f009 fb64 	bl	8018206 <memcpy>
 800eb3e:	a802      	add	r0, sp, #8
 800eb40:	f000 f940 	bl	800edc4 <rcutils_get_default_allocator>
 800eb44:	f10d 0c08 	add.w	ip, sp, #8
 800eb48:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800eb4c:	466e      	mov	r6, sp
 800eb4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb52:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb56:	f8dc 3000 	ldr.w	r3, [ip]
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	f8ce 3000 	str.w	r3, [lr]
 800eb60:	f000 f97e 	bl	800ee60 <rmw_get_default_publisher_options>
 800eb64:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800eb68:	2270      	movs	r2, #112	@ 0x70
 800eb6a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800eb6e:	e883 0003 	stmia.w	r3, {r0, r1}
 800eb72:	4629      	mov	r1, r5
 800eb74:	4620      	mov	r0, r4
 800eb76:	f009 fb46 	bl	8018206 <memcpy>
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	b008      	add	sp, #32
 800eb7e:	bd70      	pop	{r4, r5, r6, pc}
 800eb80:	24063a38 	.word	0x24063a38
 800eb84:	080190e8 	.word	0x080190e8

0800eb88 <rcl_publish>:
 800eb88:	b1f8      	cbz	r0, 800ebca <rcl_publish+0x42>
 800eb8a:	6803      	ldr	r3, [r0, #0]
 800eb8c:	b570      	push	{r4, r5, r6, lr}
 800eb8e:	4604      	mov	r4, r0
 800eb90:	b1b3      	cbz	r3, 800ebc0 <rcl_publish+0x38>
 800eb92:	4616      	mov	r6, r2
 800eb94:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800eb98:	b192      	cbz	r2, 800ebc0 <rcl_publish+0x38>
 800eb9a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800eb9e:	460d      	mov	r5, r1
 800eba0:	f004 fbdc 	bl	801335c <rcl_context_is_valid>
 800eba4:	b160      	cbz	r0, 800ebc0 <rcl_publish+0x38>
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ebac:	b140      	cbz	r0, 800ebc0 <rcl_publish+0x38>
 800ebae:	b155      	cbz	r5, 800ebc6 <rcl_publish+0x3e>
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	f000 f972 	bl	800ee9c <rmw_publish>
 800ebb8:	3800      	subs	r0, #0
 800ebba:	bf18      	it	ne
 800ebbc:	2001      	movne	r0, #1
 800ebbe:	bd70      	pop	{r4, r5, r6, pc}
 800ebc0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ebc4:	bd70      	pop	{r4, r5, r6, pc}
 800ebc6:	200b      	movs	r0, #11
 800ebc8:	bd70      	pop	{r4, r5, r6, pc}
 800ebca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ebce:	4770      	bx	lr

0800ebd0 <rclc_support_init>:
 800ebd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd4:	b086      	sub	sp, #24
 800ebd6:	b3bb      	cbz	r3, 800ec48 <rclc_support_init+0x78>
 800ebd8:	4606      	mov	r6, r0
 800ebda:	b3a8      	cbz	r0, 800ec48 <rclc_support_init+0x78>
 800ebdc:	461c      	mov	r4, r3
 800ebde:	460f      	mov	r7, r1
 800ebe0:	4690      	mov	r8, r2
 800ebe2:	f004 fd27 	bl	8013634 <rcl_get_zero_initialized_init_options>
 800ebe6:	f104 050c 	add.w	r5, r4, #12
 800ebea:	9005      	str	r0, [sp, #20]
 800ebec:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ebf0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ebf4:	a805      	add	r0, sp, #20
 800ebf6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ebfa:	f004 fd1d 	bl	8013638 <rcl_init_options_init>
 800ebfe:	4605      	mov	r5, r0
 800ec00:	b9e0      	cbnz	r0, 800ec3c <rclc_support_init+0x6c>
 800ec02:	ad02      	add	r5, sp, #8
 800ec04:	4628      	mov	r0, r5
 800ec06:	f004 fb9f 	bl	8013348 <rcl_get_zero_initialized_context>
 800ec0a:	4633      	mov	r3, r6
 800ec0c:	aa05      	add	r2, sp, #20
 800ec0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ec12:	e886 0003 	stmia.w	r6, {r0, r1}
 800ec16:	4641      	mov	r1, r8
 800ec18:	4638      	mov	r0, r7
 800ec1a:	f004 fc05 	bl	8013428 <rcl_init>
 800ec1e:	4605      	mov	r5, r0
 800ec20:	b9b8      	cbnz	r0, 800ec52 <rclc_support_init+0x82>
 800ec22:	4622      	mov	r2, r4
 800ec24:	f106 010c 	add.w	r1, r6, #12
 800ec28:	2003      	movs	r0, #3
 800ec2a:	60b4      	str	r4, [r6, #8]
 800ec2c:	f005 f9bc 	bl	8013fa8 <rcl_clock_init>
 800ec30:	4605      	mov	r5, r0
 800ec32:	b970      	cbnz	r0, 800ec52 <rclc_support_init+0x82>
 800ec34:	a805      	add	r0, sp, #20
 800ec36:	f004 fd65 	bl	8013704 <rcl_init_options_fini>
 800ec3a:	b108      	cbz	r0, 800ec40 <rclc_support_init+0x70>
 800ec3c:	f000 f8f4 	bl	800ee28 <rcutils_reset_error>
 800ec40:	4628      	mov	r0, r5
 800ec42:	b006      	add	sp, #24
 800ec44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec48:	250b      	movs	r5, #11
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	b006      	add	sp, #24
 800ec4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec52:	f000 f8e9 	bl	800ee28 <rcutils_reset_error>
 800ec56:	a805      	add	r0, sp, #20
 800ec58:	f004 fd54 	bl	8013704 <rcl_init_options_fini>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d0ef      	beq.n	800ec40 <rclc_support_init+0x70>
 800ec60:	e7ec      	b.n	800ec3c <rclc_support_init+0x6c>
 800ec62:	bf00      	nop

0800ec64 <rclc_node_init_default>:
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	bf18      	it	ne
 800ec68:	2a00      	cmpne	r2, #0
 800ec6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec6e:	4616      	mov	r6, r2
 800ec70:	bf0c      	ite	eq
 800ec72:	2201      	moveq	r2, #1
 800ec74:	2200      	movne	r2, #0
 800ec76:	b0a1      	sub	sp, #132	@ 0x84
 800ec78:	2900      	cmp	r1, #0
 800ec7a:	bf08      	it	eq
 800ec7c:	f042 0201 	orreq.w	r2, r2, #1
 800ec80:	bb22      	cbnz	r2, 800eccc <rclc_node_init_default+0x68>
 800ec82:	4604      	mov	r4, r0
 800ec84:	b310      	cbz	r0, 800eccc <rclc_node_init_default+0x68>
 800ec86:	f10d 0810 	add.w	r8, sp, #16
 800ec8a:	461f      	mov	r7, r3
 800ec8c:	460d      	mov	r5, r1
 800ec8e:	f10d 0918 	add.w	r9, sp, #24
 800ec92:	4640      	mov	r0, r8
 800ec94:	f004 fdf0 	bl	8013878 <rcl_get_zero_initialized_node>
 800ec98:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ec9c:	e884 0003 	stmia.w	r4, {r0, r1}
 800eca0:	4648      	mov	r0, r9
 800eca2:	f004 ff63 	bl	8013b6c <rcl_node_get_default_options>
 800eca6:	4640      	mov	r0, r8
 800eca8:	f004 fde6 	bl	8013878 <rcl_get_zero_initialized_node>
 800ecac:	f8cd 9000 	str.w	r9, [sp]
 800ecb0:	463b      	mov	r3, r7
 800ecb2:	4632      	mov	r2, r6
 800ecb4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ecb8:	e884 0003 	stmia.w	r4, {r0, r1}
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f004 fde4 	bl	801388c <rcl_node_init>
 800ecc4:	b930      	cbnz	r0, 800ecd4 <rclc_node_init_default+0x70>
 800ecc6:	b021      	add	sp, #132	@ 0x84
 800ecc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eccc:	200b      	movs	r0, #11
 800ecce:	b021      	add	sp, #132	@ 0x84
 800ecd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecd4:	9003      	str	r0, [sp, #12]
 800ecd6:	f000 f8a7 	bl	800ee28 <rcutils_reset_error>
 800ecda:	f000 f8a5 	bl	800ee28 <rcutils_reset_error>
 800ecde:	9803      	ldr	r0, [sp, #12]
 800ece0:	b021      	add	sp, #132	@ 0x84
 800ece2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ece6:	bf00      	nop

0800ece8 <rclc_publisher_init_default>:
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	bf18      	it	ne
 800ecec:	2a00      	cmpne	r2, #0
 800ecee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf2:	4616      	mov	r6, r2
 800ecf4:	bf0c      	ite	eq
 800ecf6:	2201      	moveq	r2, #1
 800ecf8:	2200      	movne	r2, #0
 800ecfa:	b0a0      	sub	sp, #128	@ 0x80
 800ecfc:	2900      	cmp	r1, #0
 800ecfe:	bf08      	it	eq
 800ed00:	f042 0201 	orreq.w	r2, r2, #1
 800ed04:	bb1a      	cbnz	r2, 800ed4e <rclc_publisher_init_default+0x66>
 800ed06:	4604      	mov	r4, r0
 800ed08:	b308      	cbz	r0, 800ed4e <rclc_publisher_init_default+0x66>
 800ed0a:	f10d 0810 	add.w	r8, sp, #16
 800ed0e:	461f      	mov	r7, r3
 800ed10:	460d      	mov	r5, r1
 800ed12:	f7ff fe6b 	bl	800e9ec <rcl_get_zero_initialized_publisher>
 800ed16:	6020      	str	r0, [r4, #0]
 800ed18:	4640      	mov	r0, r8
 800ed1a:	f7ff ff07 	bl	800eb2c <rcl_publisher_get_default_options>
 800ed1e:	2250      	movs	r2, #80	@ 0x50
 800ed20:	490d      	ldr	r1, [pc, #52]	@ (800ed58 <rclc_publisher_init_default+0x70>)
 800ed22:	4640      	mov	r0, r8
 800ed24:	f009 fa6f 	bl	8018206 <memcpy>
 800ed28:	463b      	mov	r3, r7
 800ed2a:	4632      	mov	r2, r6
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f8cd 8000 	str.w	r8, [sp]
 800ed34:	f7ff fe60 	bl	800e9f8 <rcl_publisher_init>
 800ed38:	b910      	cbnz	r0, 800ed40 <rclc_publisher_init_default+0x58>
 800ed3a:	b020      	add	sp, #128	@ 0x80
 800ed3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed40:	9003      	str	r0, [sp, #12]
 800ed42:	f000 f871 	bl	800ee28 <rcutils_reset_error>
 800ed46:	9803      	ldr	r0, [sp, #12]
 800ed48:	b020      	add	sp, #128	@ 0x80
 800ed4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed4e:	200b      	movs	r0, #11
 800ed50:	b020      	add	sp, #128	@ 0x80
 800ed52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed56:	bf00      	nop
 800ed58:	08019138 	.word	0x08019138

0800ed5c <__default_zero_allocate>:
 800ed5c:	f008 bd86 	b.w	801786c <calloc>

0800ed60 <__default_reallocate>:
 800ed60:	f008 bf12 	b.w	8017b88 <realloc>

0800ed64 <__default_deallocate>:
 800ed64:	f008 bdee 	b.w	8017944 <free>

0800ed68 <__default_allocate>:
 800ed68:	f008 bde4 	b.w	8017934 <malloc>

0800ed6c <rcutils_get_zero_initialized_allocator>:
 800ed6c:	b510      	push	{r4, lr}
 800ed6e:	4c05      	ldr	r4, [pc, #20]	@ (800ed84 <rcutils_get_zero_initialized_allocator+0x18>)
 800ed70:	4686      	mov	lr, r0
 800ed72:	4684      	mov	ip, r0
 800ed74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	4670      	mov	r0, lr
 800ed7e:	f8cc 3000 	str.w	r3, [ip]
 800ed82:	bd10      	pop	{r4, pc}
 800ed84:	08019188 	.word	0x08019188

0800ed88 <rcutils_set_default_allocator>:
 800ed88:	b1a8      	cbz	r0, 800edb6 <rcutils_set_default_allocator+0x2e>
 800ed8a:	6802      	ldr	r2, [r0, #0]
 800ed8c:	b1a2      	cbz	r2, 800edb8 <rcutils_set_default_allocator+0x30>
 800ed8e:	6841      	ldr	r1, [r0, #4]
 800ed90:	b1a1      	cbz	r1, 800edbc <rcutils_set_default_allocator+0x34>
 800ed92:	b410      	push	{r4}
 800ed94:	68c4      	ldr	r4, [r0, #12]
 800ed96:	b164      	cbz	r4, 800edb2 <rcutils_set_default_allocator+0x2a>
 800ed98:	6880      	ldr	r0, [r0, #8]
 800ed9a:	b138      	cbz	r0, 800edac <rcutils_set_default_allocator+0x24>
 800ed9c:	4b08      	ldr	r3, [pc, #32]	@ (800edc0 <rcutils_set_default_allocator+0x38>)
 800ed9e:	601a      	str	r2, [r3, #0]
 800eda0:	2200      	movs	r2, #0
 800eda2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800eda6:	2001      	movs	r0, #1
 800eda8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800edac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	4620      	mov	r0, r4
 800edb4:	e7fa      	b.n	800edac <rcutils_set_default_allocator+0x24>
 800edb6:	4770      	bx	lr
 800edb8:	4610      	mov	r0, r2
 800edba:	4770      	bx	lr
 800edbc:	4608      	mov	r0, r1
 800edbe:	4770      	bx	lr
 800edc0:	24000018 	.word	0x24000018

0800edc4 <rcutils_get_default_allocator>:
 800edc4:	b510      	push	{r4, lr}
 800edc6:	4c05      	ldr	r4, [pc, #20]	@ (800eddc <rcutils_get_default_allocator+0x18>)
 800edc8:	4686      	mov	lr, r0
 800edca:	4684      	mov	ip, r0
 800edcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800edd2:	6823      	ldr	r3, [r4, #0]
 800edd4:	4670      	mov	r0, lr
 800edd6:	f8cc 3000 	str.w	r3, [ip]
 800edda:	bd10      	pop	{r4, pc}
 800eddc:	24000018 	.word	0x24000018

0800ede0 <rcutils_allocator_is_valid>:
 800ede0:	b158      	cbz	r0, 800edfa <rcutils_allocator_is_valid+0x1a>
 800ede2:	6803      	ldr	r3, [r0, #0]
 800ede4:	b143      	cbz	r3, 800edf8 <rcutils_allocator_is_valid+0x18>
 800ede6:	6843      	ldr	r3, [r0, #4]
 800ede8:	b133      	cbz	r3, 800edf8 <rcutils_allocator_is_valid+0x18>
 800edea:	68c3      	ldr	r3, [r0, #12]
 800edec:	b123      	cbz	r3, 800edf8 <rcutils_allocator_is_valid+0x18>
 800edee:	6880      	ldr	r0, [r0, #8]
 800edf0:	3800      	subs	r0, #0
 800edf2:	bf18      	it	ne
 800edf4:	2001      	movne	r0, #1
 800edf6:	4770      	bx	lr
 800edf8:	4618      	mov	r0, r3
 800edfa:	4770      	bx	lr

0800edfc <rcutils_get_error_string>:
 800edfc:	4b06      	ldr	r3, [pc, #24]	@ (800ee18 <rcutils_get_error_string+0x1c>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	b13b      	cbz	r3, 800ee12 <rcutils_get_error_string+0x16>
 800ee02:	4b06      	ldr	r3, [pc, #24]	@ (800ee1c <rcutils_get_error_string+0x20>)
 800ee04:	781a      	ldrb	r2, [r3, #0]
 800ee06:	b90a      	cbnz	r2, 800ee0c <rcutils_get_error_string+0x10>
 800ee08:	2201      	movs	r2, #1
 800ee0a:	701a      	strb	r2, [r3, #0]
 800ee0c:	4b04      	ldr	r3, [pc, #16]	@ (800ee20 <rcutils_get_error_string+0x24>)
 800ee0e:	7818      	ldrb	r0, [r3, #0]
 800ee10:	4770      	bx	lr
 800ee12:	4b04      	ldr	r3, [pc, #16]	@ (800ee24 <rcutils_get_error_string+0x28>)
 800ee14:	7818      	ldrb	r0, [r3, #0]
 800ee16:	4770      	bx	lr
 800ee18:	24063aa8 	.word	0x24063aa8
 800ee1c:	24063ac1 	.word	0x24063ac1
 800ee20:	24063ac0 	.word	0x24063ac0
 800ee24:	0801919c 	.word	0x0801919c

0800ee28 <rcutils_reset_error>:
 800ee28:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ee48 <rcutils_reset_error+0x20>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	4a08      	ldr	r2, [pc, #32]	@ (800ee50 <rcutils_reset_error+0x28>)
 800ee30:	4808      	ldr	r0, [pc, #32]	@ (800ee54 <rcutils_reset_error+0x2c>)
 800ee32:	8013      	strh	r3, [r2, #0]
 800ee34:	4908      	ldr	r1, [pc, #32]	@ (800ee58 <rcutils_reset_error+0x30>)
 800ee36:	7003      	strb	r3, [r0, #0]
 800ee38:	700b      	strb	r3, [r1, #0]
 800ee3a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ee3e:	4a07      	ldr	r2, [pc, #28]	@ (800ee5c <rcutils_reset_error+0x34>)
 800ee40:	7013      	strb	r3, [r2, #0]
 800ee42:	4770      	bx	lr
 800ee44:	f3af 8000 	nop.w
	...
 800ee50:	24063ab0 	.word	0x24063ab0
 800ee54:	24063ac1 	.word	0x24063ac1
 800ee58:	24063ac0 	.word	0x24063ac0
 800ee5c:	24063aa8 	.word	0x24063aa8

0800ee60 <rmw_get_default_publisher_options>:
 800ee60:	2200      	movs	r2, #0
 800ee62:	6002      	str	r2, [r0, #0]
 800ee64:	7102      	strb	r2, [r0, #4]
 800ee66:	4770      	bx	lr

0800ee68 <rmw_uros_set_custom_transport>:
 800ee68:	b470      	push	{r4, r5, r6}
 800ee6a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ee6e:	b162      	cbz	r2, 800ee8a <rmw_uros_set_custom_transport+0x22>
 800ee70:	b15b      	cbz	r3, 800ee8a <rmw_uros_set_custom_transport+0x22>
 800ee72:	b155      	cbz	r5, 800ee8a <rmw_uros_set_custom_transport+0x22>
 800ee74:	b14e      	cbz	r6, 800ee8a <rmw_uros_set_custom_transport+0x22>
 800ee76:	4c06      	ldr	r4, [pc, #24]	@ (800ee90 <rmw_uros_set_custom_transport+0x28>)
 800ee78:	7020      	strb	r0, [r4, #0]
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	6166      	str	r6, [r4, #20]
 800ee7e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ee82:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ee86:	bc70      	pop	{r4, r5, r6}
 800ee88:	4770      	bx	lr
 800ee8a:	200b      	movs	r0, #11
 800ee8c:	bc70      	pop	{r4, r5, r6}
 800ee8e:	4770      	bx	lr
 800ee90:	24063ac4 	.word	0x24063ac4

0800ee94 <flush_session>:
 800ee94:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800ee96:	f002 bb6d 	b.w	8011574 <uxr_run_session_until_confirm_delivery>
 800ee9a:	bf00      	nop

0800ee9c <rmw_publish>:
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d053      	beq.n	800ef48 <rmw_publish+0xac>
 800eea0:	b570      	push	{r4, r5, r6, lr}
 800eea2:	460d      	mov	r5, r1
 800eea4:	b08e      	sub	sp, #56	@ 0x38
 800eea6:	2900      	cmp	r1, #0
 800eea8:	d04b      	beq.n	800ef42 <rmw_publish+0xa6>
 800eeaa:	4604      	mov	r4, r0
 800eeac:	6800      	ldr	r0, [r0, #0]
 800eeae:	f000 fc77 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d045      	beq.n	800ef42 <rmw_publish+0xa6>
 800eeb6:	6866      	ldr	r6, [r4, #4]
 800eeb8:	2e00      	cmp	r6, #0
 800eeba:	d042      	beq.n	800ef42 <rmw_publish+0xa6>
 800eebc:	69b4      	ldr	r4, [r6, #24]
 800eebe:	4628      	mov	r0, r5
 800eec0:	6923      	ldr	r3, [r4, #16]
 800eec2:	4798      	blx	r3
 800eec4:	69f3      	ldr	r3, [r6, #28]
 800eec6:	9005      	str	r0, [sp, #20]
 800eec8:	b113      	cbz	r3, 800eed0 <rmw_publish+0x34>
 800eeca:	a805      	add	r0, sp, #20
 800eecc:	4798      	blx	r3
 800eece:	9805      	ldr	r0, [sp, #20]
 800eed0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	9000      	str	r0, [sp, #0]
 800eed8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800eedc:	6972      	ldr	r2, [r6, #20]
 800eede:	ab06      	add	r3, sp, #24
 800eee0:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800eee2:	f003 f999 	bl	8012218 <uxr_prepare_output_stream>
 800eee6:	b1d8      	cbz	r0, 800ef20 <rmw_publish+0x84>
 800eee8:	68a3      	ldr	r3, [r4, #8]
 800eeea:	a906      	add	r1, sp, #24
 800eeec:	4628      	mov	r0, r5
 800eeee:	4798      	blx	r3
 800eef0:	6a33      	ldr	r3, [r6, #32]
 800eef2:	4604      	mov	r4, r0
 800eef4:	b10b      	cbz	r3, 800eefa <rmw_publish+0x5e>
 800eef6:	a806      	add	r0, sp, #24
 800eef8:	4798      	blx	r3
 800eefa:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ef04:	d022      	beq.n	800ef4c <rmw_publish+0xb0>
 800ef06:	6918      	ldr	r0, [r3, #16]
 800ef08:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800ef0a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef0e:	f002 fb31 	bl	8011574 <uxr_run_session_until_confirm_delivery>
 800ef12:	4020      	ands	r0, r4
 800ef14:	b2c4      	uxtb	r4, r0
 800ef16:	f084 0001 	eor.w	r0, r4, #1
 800ef1a:	b2c0      	uxtb	r0, r0
 800ef1c:	b00e      	add	sp, #56	@ 0x38
 800ef1e:	bd70      	pop	{r4, r5, r6, pc}
 800ef20:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ef24:	6918      	ldr	r0, [r3, #16]
 800ef26:	9b05      	ldr	r3, [sp, #20]
 800ef28:	9602      	str	r6, [sp, #8]
 800ef2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	4b09      	ldr	r3, [pc, #36]	@ (800ef58 <rmw_publish+0xbc>)
 800ef32:	9301      	str	r3, [sp, #4]
 800ef34:	ab06      	add	r3, sp, #24
 800ef36:	6972      	ldr	r2, [r6, #20]
 800ef38:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ef3a:	f003 f99d 	bl	8012278 <uxr_prepare_output_stream_fragmented>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d1d2      	bne.n	800eee8 <rmw_publish+0x4c>
 800ef42:	2001      	movs	r0, #1
 800ef44:	b00e      	add	sp, #56	@ 0x38
 800ef46:	bd70      	pop	{r4, r5, r6, pc}
 800ef48:	2001      	movs	r0, #1
 800ef4a:	4770      	bx	lr
 800ef4c:	6918      	ldr	r0, [r3, #16]
 800ef4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef52:	f001 ff8f 	bl	8010e74 <uxr_flash_output_streams>
 800ef56:	e7de      	b.n	800ef16 <rmw_publish+0x7a>
 800ef58:	0800ee95 	.word	0x0800ee95

0800ef5c <rmw_create_publisher>:
 800ef5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef60:	b087      	sub	sp, #28
 800ef62:	2800      	cmp	r0, #0
 800ef64:	f000 80d2 	beq.w	800f10c <rmw_create_publisher+0x1b0>
 800ef68:	460e      	mov	r6, r1
 800ef6a:	2900      	cmp	r1, #0
 800ef6c:	f000 80ce 	beq.w	800f10c <rmw_create_publisher+0x1b0>
 800ef70:	4604      	mov	r4, r0
 800ef72:	6800      	ldr	r0, [r0, #0]
 800ef74:	4615      	mov	r5, r2
 800ef76:	461f      	mov	r7, r3
 800ef78:	f000 fc12 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 800ef7c:	f080 0001 	eor.w	r0, r0, #1
 800ef80:	b2c0      	uxtb	r0, r0
 800ef82:	2800      	cmp	r0, #0
 800ef84:	f040 80c2 	bne.w	800f10c <rmw_create_publisher+0x1b0>
 800ef88:	2d00      	cmp	r5, #0
 800ef8a:	f000 80bf 	beq.w	800f10c <rmw_create_publisher+0x1b0>
 800ef8e:	782b      	ldrb	r3, [r5, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f000 80bb 	beq.w	800f10c <rmw_create_publisher+0x1b0>
 800ef96:	2f00      	cmp	r7, #0
 800ef98:	f000 80b8 	beq.w	800f10c <rmw_create_publisher+0x1b0>
 800ef9c:	485e      	ldr	r0, [pc, #376]	@ (800f118 <rmw_create_publisher+0x1bc>)
 800ef9e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800efa2:	f005 fdbf 	bl	8014b24 <get_memory>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	f000 80b0 	beq.w	800f10c <rmw_create_publisher+0x1b0>
 800efac:	6884      	ldr	r4, [r0, #8]
 800efae:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800efb2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800efb6:	f005 fdd9 	bl	8014b6c <rmw_get_implementation_identifier>
 800efba:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800efbe:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800efc2:	4628      	mov	r0, r5
 800efc4:	f7f1 f996 	bl	80002f4 <strlen>
 800efc8:	3001      	adds	r0, #1
 800efca:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800efce:	283c      	cmp	r0, #60	@ 0x3c
 800efd0:	f200 808f 	bhi.w	800f0f2 <rmw_create_publisher+0x196>
 800efd4:	462b      	mov	r3, r5
 800efd6:	4a51      	ldr	r2, [pc, #324]	@ (800f11c <rmw_create_publisher+0x1c0>)
 800efd8:	213c      	movs	r1, #60	@ 0x3c
 800efda:	4650      	mov	r0, sl
 800efdc:	f008 ff44 	bl	8017e68 <sniprintf>
 800efe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efe4:	4639      	mov	r1, r7
 800efe6:	2250      	movs	r2, #80	@ 0x50
 800efe8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800efea:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800efee:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800eff2:	f009 f908 	bl	8018206 <memcpy>
 800eff6:	7a3b      	ldrb	r3, [r7, #8]
 800eff8:	4630      	mov	r0, r6
 800effa:	4949      	ldr	r1, [pc, #292]	@ (800f120 <rmw_create_publisher+0x1c4>)
 800effc:	2b02      	cmp	r3, #2
 800effe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f002:	bf0c      	ite	eq
 800f004:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f008:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f00c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f00e:	2300      	movs	r3, #0
 800f010:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f014:	f000 fbd2 	bl	800f7bc <get_message_typesupport_handle>
 800f018:	2800      	cmp	r0, #0
 800f01a:	d06a      	beq.n	800f0f2 <rmw_create_publisher+0x196>
 800f01c:	6842      	ldr	r2, [r0, #4]
 800f01e:	61a2      	str	r2, [r4, #24]
 800f020:	2a00      	cmp	r2, #0
 800f022:	d066      	beq.n	800f0f2 <rmw_create_publisher+0x196>
 800f024:	4629      	mov	r1, r5
 800f026:	463b      	mov	r3, r7
 800f028:	4648      	mov	r0, r9
 800f02a:	f006 f80b 	bl	8015044 <create_topic>
 800f02e:	6260      	str	r0, [r4, #36]	@ 0x24
 800f030:	2800      	cmp	r0, #0
 800f032:	d062      	beq.n	800f0fa <rmw_create_publisher+0x19e>
 800f034:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f038:	2103      	movs	r1, #3
 800f03a:	2506      	movs	r5, #6
 800f03c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f040:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800f044:	1c42      	adds	r2, r0, #1
 800f046:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800f04a:	f001 fdc3 	bl	8010bd4 <uxr_object_id>
 800f04e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f052:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f056:	6120      	str	r0, [r4, #16]
 800f058:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f05c:	6910      	ldr	r0, [r2, #16]
 800f05e:	9500      	str	r5, [sp, #0]
 800f060:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f064:	6819      	ldr	r1, [r3, #0]
 800f066:	6922      	ldr	r2, [r4, #16]
 800f068:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f06c:	f001 fd0c 	bl	8010a88 <uxr_buffer_create_publisher_bin>
 800f070:	4602      	mov	r2, r0
 800f072:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f076:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f07a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f07e:	f000 fb15 	bl	800f6ac <run_xrce_session>
 800f082:	b3b0      	cbz	r0, 800f0f2 <rmw_create_publisher+0x196>
 800f084:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f088:	2105      	movs	r1, #5
 800f08a:	f10d 0a10 	add.w	sl, sp, #16
 800f08e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f092:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800f096:	1c42      	adds	r2, r0, #1
 800f098:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800f09c:	f001 fd9a 	bl	8010bd4 <uxr_object_id>
 800f0a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f0a4:	4639      	mov	r1, r7
 800f0a6:	6160      	str	r0, [r4, #20]
 800f0a8:	691e      	ldr	r6, [r3, #16]
 800f0aa:	4650      	mov	r0, sl
 800f0ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0b0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f0b4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800f0b8:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800f0bc:	f000 fb12 	bl	800f6e4 <convert_qos_profile>
 800f0c0:	9503      	str	r5, [sp, #12]
 800f0c2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f0c6:	9001      	str	r0, [sp, #4]
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f0ce:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	6839      	ldr	r1, [r7, #0]
 800f0d6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f0da:	f001 fd05 	bl	8010ae8 <uxr_buffer_create_datawriter_bin>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f0e4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f0e8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f0ec:	f000 fade 	bl	800f6ac <run_xrce_session>
 800f0f0:	b970      	cbnz	r0, 800f110 <rmw_create_publisher+0x1b4>
 800f0f2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f0f4:	b108      	cbz	r0, 800f0fa <rmw_create_publisher+0x19e>
 800f0f6:	f000 fa73 	bl	800f5e0 <rmw_uxrce_fini_topic_memory>
 800f0fa:	4640      	mov	r0, r8
 800f0fc:	f04f 0800 	mov.w	r8, #0
 800f100:	f000 fa16 	bl	800f530 <rmw_uxrce_fini_publisher_memory>
 800f104:	4640      	mov	r0, r8
 800f106:	b007      	add	sp, #28
 800f108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10c:	f04f 0800 	mov.w	r8, #0
 800f110:	4640      	mov	r0, r8
 800f112:	b007      	add	sp, #28
 800f114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f118:	240683bc 	.word	0x240683bc
 800f11c:	080191d4 	.word	0x080191d4
 800f120:	080191a0 	.word	0x080191a0

0800f124 <rmw_publisher_get_actual_qos>:
 800f124:	b178      	cbz	r0, 800f146 <rmw_publisher_get_actual_qos+0x22>
 800f126:	b510      	push	{r4, lr}
 800f128:	fab1 f481 	clz	r4, r1
 800f12c:	0964      	lsrs	r4, r4, #5
 800f12e:	b141      	cbz	r1, 800f142 <rmw_publisher_get_actual_qos+0x1e>
 800f130:	6843      	ldr	r3, [r0, #4]
 800f132:	2250      	movs	r2, #80	@ 0x50
 800f134:	4608      	mov	r0, r1
 800f136:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f13a:	f009 f864 	bl	8018206 <memcpy>
 800f13e:	4620      	mov	r0, r4
 800f140:	bd10      	pop	{r4, pc}
 800f142:	200b      	movs	r0, #11
 800f144:	bd10      	pop	{r4, pc}
 800f146:	200b      	movs	r0, #11
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop

0800f14c <rmw_destroy_publisher>:
 800f14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f150:	b128      	cbz	r0, 800f15e <rmw_destroy_publisher+0x12>
 800f152:	4604      	mov	r4, r0
 800f154:	6800      	ldr	r0, [r0, #0]
 800f156:	460d      	mov	r5, r1
 800f158:	f000 fb22 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 800f15c:	b918      	cbnz	r0, 800f166 <rmw_destroy_publisher+0x1a>
 800f15e:	2401      	movs	r4, #1
 800f160:	4620      	mov	r0, r4
 800f162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f166:	6863      	ldr	r3, [r4, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d0f8      	beq.n	800f15e <rmw_destroy_publisher+0x12>
 800f16c:	fab5 f485 	clz	r4, r5
 800f170:	0964      	lsrs	r4, r4, #5
 800f172:	2d00      	cmp	r5, #0
 800f174:	d0f3      	beq.n	800f15e <rmw_destroy_publisher+0x12>
 800f176:	6828      	ldr	r0, [r5, #0]
 800f178:	f000 fb12 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d0ee      	beq.n	800f15e <rmw_destroy_publisher+0x12>
 800f180:	686e      	ldr	r6, [r5, #4]
 800f182:	2e00      	cmp	r6, #0
 800f184:	d0eb      	beq.n	800f15e <rmw_destroy_publisher+0x12>
 800f186:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800f188:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800f18c:	f005 ffaa 	bl	80150e4 <destroy_topic>
 800f190:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f194:	6972      	ldr	r2, [r6, #20]
 800f196:	6918      	ldr	r0, [r3, #16]
 800f198:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f19c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1a0:	6819      	ldr	r1, [r3, #0]
 800f1a2:	f001 fbbd 	bl	8010920 <uxr_buffer_delete_entity>
 800f1a6:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f1aa:	4680      	mov	r8, r0
 800f1ac:	6932      	ldr	r2, [r6, #16]
 800f1ae:	6918      	ldr	r0, [r3, #16]
 800f1b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f1b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1b8:	6819      	ldr	r1, [r3, #0]
 800f1ba:	f001 fbb1 	bl	8010920 <uxr_buffer_delete_entity>
 800f1be:	4606      	mov	r6, r0
 800f1c0:	6938      	ldr	r0, [r7, #16]
 800f1c2:	4642      	mov	r2, r8
 800f1c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f1c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f1cc:	f000 fa6e 	bl	800f6ac <run_xrce_session>
 800f1d0:	693f      	ldr	r7, [r7, #16]
 800f1d2:	4632      	mov	r2, r6
 800f1d4:	4606      	mov	r6, r0
 800f1d6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800f1da:	4638      	mov	r0, r7
 800f1dc:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800f1e0:	f000 fa64 	bl	800f6ac <run_xrce_session>
 800f1e4:	b126      	cbz	r6, 800f1f0 <rmw_destroy_publisher+0xa4>
 800f1e6:	b118      	cbz	r0, 800f1f0 <rmw_destroy_publisher+0xa4>
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	f000 f9a1 	bl	800f530 <rmw_uxrce_fini_publisher_memory>
 800f1ee:	e7b7      	b.n	800f160 <rmw_destroy_publisher+0x14>
 800f1f0:	2402      	movs	r4, #2
 800f1f2:	e7f9      	b.n	800f1e8 <rmw_destroy_publisher+0x9c>

0800f1f4 <rmw_uros_epoch_nanos>:
 800f1f4:	4b05      	ldr	r3, [pc, #20]	@ (800f20c <rmw_uros_epoch_nanos+0x18>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	b123      	cbz	r3, 800f204 <rmw_uros_epoch_nanos+0x10>
 800f1fa:	6898      	ldr	r0, [r3, #8]
 800f1fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f200:	f001 be2e 	b.w	8010e60 <uxr_epoch_nanos>
 800f204:	2000      	movs	r0, #0
 800f206:	2100      	movs	r1, #0
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	240683dc 	.word	0x240683dc

0800f210 <rmw_uros_sync_session>:
 800f210:	b508      	push	{r3, lr}
 800f212:	4b07      	ldr	r3, [pc, #28]	@ (800f230 <rmw_uros_sync_session+0x20>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	b14b      	cbz	r3, 800f22c <rmw_uros_sync_session+0x1c>
 800f218:	4601      	mov	r1, r0
 800f21a:	6898      	ldr	r0, [r3, #8]
 800f21c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f220:	f002 fa22 	bl	8011668 <uxr_sync_session>
 800f224:	f080 0001 	eor.w	r0, r0, #1
 800f228:	b2c0      	uxtb	r0, r0
 800f22a:	bd08      	pop	{r3, pc}
 800f22c:	2001      	movs	r0, #1
 800f22e:	bd08      	pop	{r3, pc}
 800f230:	240683dc 	.word	0x240683dc

0800f234 <rmw_uxrce_init_service_memory>:
 800f234:	b1e2      	cbz	r2, 800f270 <rmw_uxrce_init_service_memory+0x3c>
 800f236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f23a:	7b05      	ldrb	r5, [r0, #12]
 800f23c:	4606      	mov	r6, r0
 800f23e:	b9ad      	cbnz	r5, 800f26c <rmw_uxrce_init_service_memory+0x38>
 800f240:	23c8      	movs	r3, #200	@ 0xc8
 800f242:	4617      	mov	r7, r2
 800f244:	460c      	mov	r4, r1
 800f246:	46a8      	mov	r8, r5
 800f248:	6083      	str	r3, [r0, #8]
 800f24a:	f240 1301 	movw	r3, #257	@ 0x101
 800f24e:	e9c0 5500 	strd	r5, r5, [r0]
 800f252:	8183      	strh	r3, [r0, #12]
 800f254:	3501      	adds	r5, #1
 800f256:	4621      	mov	r1, r4
 800f258:	4630      	mov	r0, r6
 800f25a:	f005 fc73 	bl	8014b44 <put_memory>
 800f25e:	42af      	cmp	r7, r5
 800f260:	60a4      	str	r4, [r4, #8]
 800f262:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f266:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f26a:	d1f3      	bne.n	800f254 <rmw_uxrce_init_service_memory+0x20>
 800f26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop

0800f274 <rmw_uxrce_init_client_memory>:
 800f274:	b1e2      	cbz	r2, 800f2b0 <rmw_uxrce_init_client_memory+0x3c>
 800f276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f27a:	7b05      	ldrb	r5, [r0, #12]
 800f27c:	4606      	mov	r6, r0
 800f27e:	b9ad      	cbnz	r5, 800f2ac <rmw_uxrce_init_client_memory+0x38>
 800f280:	23c8      	movs	r3, #200	@ 0xc8
 800f282:	4617      	mov	r7, r2
 800f284:	460c      	mov	r4, r1
 800f286:	46a8      	mov	r8, r5
 800f288:	6083      	str	r3, [r0, #8]
 800f28a:	f240 1301 	movw	r3, #257	@ 0x101
 800f28e:	e9c0 5500 	strd	r5, r5, [r0]
 800f292:	8183      	strh	r3, [r0, #12]
 800f294:	3501      	adds	r5, #1
 800f296:	4621      	mov	r1, r4
 800f298:	4630      	mov	r0, r6
 800f29a:	f005 fc53 	bl	8014b44 <put_memory>
 800f29e:	42af      	cmp	r7, r5
 800f2a0:	60a4      	str	r4, [r4, #8]
 800f2a2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f2a6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f2aa:	d1f3      	bne.n	800f294 <rmw_uxrce_init_client_memory+0x20>
 800f2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop

0800f2b4 <rmw_uxrce_init_publisher_memory>:
 800f2b4:	b1e2      	cbz	r2, 800f2f0 <rmw_uxrce_init_publisher_memory+0x3c>
 800f2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ba:	7b05      	ldrb	r5, [r0, #12]
 800f2bc:	4606      	mov	r6, r0
 800f2be:	b9ad      	cbnz	r5, 800f2ec <rmw_uxrce_init_publisher_memory+0x38>
 800f2c0:	23d8      	movs	r3, #216	@ 0xd8
 800f2c2:	4617      	mov	r7, r2
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	46a8      	mov	r8, r5
 800f2c8:	6083      	str	r3, [r0, #8]
 800f2ca:	f240 1301 	movw	r3, #257	@ 0x101
 800f2ce:	e9c0 5500 	strd	r5, r5, [r0]
 800f2d2:	8183      	strh	r3, [r0, #12]
 800f2d4:	3501      	adds	r5, #1
 800f2d6:	4621      	mov	r1, r4
 800f2d8:	4630      	mov	r0, r6
 800f2da:	f005 fc33 	bl	8014b44 <put_memory>
 800f2de:	42af      	cmp	r7, r5
 800f2e0:	60a4      	str	r4, [r4, #8]
 800f2e2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f2e6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f2ea:	d1f3      	bne.n	800f2d4 <rmw_uxrce_init_publisher_memory+0x20>
 800f2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f0:	4770      	bx	lr
 800f2f2:	bf00      	nop

0800f2f4 <rmw_uxrce_init_subscription_memory>:
 800f2f4:	b1e2      	cbz	r2, 800f330 <rmw_uxrce_init_subscription_memory+0x3c>
 800f2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2fa:	7b05      	ldrb	r5, [r0, #12]
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	b9ad      	cbnz	r5, 800f32c <rmw_uxrce_init_subscription_memory+0x38>
 800f300:	23d8      	movs	r3, #216	@ 0xd8
 800f302:	4617      	mov	r7, r2
 800f304:	460c      	mov	r4, r1
 800f306:	46a8      	mov	r8, r5
 800f308:	6083      	str	r3, [r0, #8]
 800f30a:	f240 1301 	movw	r3, #257	@ 0x101
 800f30e:	e9c0 5500 	strd	r5, r5, [r0]
 800f312:	8183      	strh	r3, [r0, #12]
 800f314:	3501      	adds	r5, #1
 800f316:	4621      	mov	r1, r4
 800f318:	4630      	mov	r0, r6
 800f31a:	f005 fc13 	bl	8014b44 <put_memory>
 800f31e:	42af      	cmp	r7, r5
 800f320:	60a4      	str	r4, [r4, #8]
 800f322:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f326:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f32a:	d1f3      	bne.n	800f314 <rmw_uxrce_init_subscription_memory+0x20>
 800f32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop

0800f334 <rmw_uxrce_init_node_memory>:
 800f334:	b1e2      	cbz	r2, 800f370 <rmw_uxrce_init_node_memory+0x3c>
 800f336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f33a:	7b05      	ldrb	r5, [r0, #12]
 800f33c:	4606      	mov	r6, r0
 800f33e:	b9ad      	cbnz	r5, 800f36c <rmw_uxrce_init_node_memory+0x38>
 800f340:	23a4      	movs	r3, #164	@ 0xa4
 800f342:	4617      	mov	r7, r2
 800f344:	460c      	mov	r4, r1
 800f346:	46a8      	mov	r8, r5
 800f348:	6083      	str	r3, [r0, #8]
 800f34a:	f240 1301 	movw	r3, #257	@ 0x101
 800f34e:	e9c0 5500 	strd	r5, r5, [r0]
 800f352:	8183      	strh	r3, [r0, #12]
 800f354:	3501      	adds	r5, #1
 800f356:	4621      	mov	r1, r4
 800f358:	4630      	mov	r0, r6
 800f35a:	f005 fbf3 	bl	8014b44 <put_memory>
 800f35e:	42af      	cmp	r7, r5
 800f360:	60a4      	str	r4, [r4, #8]
 800f362:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800f366:	f804 8c98 	strb.w	r8, [r4, #-152]
 800f36a:	d1f3      	bne.n	800f354 <rmw_uxrce_init_node_memory+0x20>
 800f36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop

0800f374 <rmw_uxrce_init_session_memory>:
 800f374:	b1ea      	cbz	r2, 800f3b2 <rmw_uxrce_init_session_memory+0x3e>
 800f376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f37a:	7b05      	ldrb	r5, [r0, #12]
 800f37c:	4606      	mov	r6, r0
 800f37e:	b9b5      	cbnz	r5, 800f3ae <rmw_uxrce_init_session_memory+0x3a>
 800f380:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800f384:	f240 1301 	movw	r3, #257	@ 0x101
 800f388:	4617      	mov	r7, r2
 800f38a:	460c      	mov	r4, r1
 800f38c:	46a9      	mov	r9, r5
 800f38e:	f8c0 8008 	str.w	r8, [r0, #8]
 800f392:	8183      	strh	r3, [r0, #12]
 800f394:	e9c0 5500 	strd	r5, r5, [r0]
 800f398:	3501      	adds	r5, #1
 800f39a:	4621      	mov	r1, r4
 800f39c:	4630      	mov	r0, r6
 800f39e:	f005 fbd1 	bl	8014b44 <put_memory>
 800f3a2:	42af      	cmp	r7, r5
 800f3a4:	60a4      	str	r4, [r4, #8]
 800f3a6:	f884 900c 	strb.w	r9, [r4, #12]
 800f3aa:	4444      	add	r4, r8
 800f3ac:	d1f4      	bne.n	800f398 <rmw_uxrce_init_session_memory+0x24>
 800f3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3b2:	4770      	bx	lr

0800f3b4 <rmw_uxrce_init_topic_memory>:
 800f3b4:	b1e2      	cbz	r2, 800f3f0 <rmw_uxrce_init_topic_memory+0x3c>
 800f3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ba:	7b05      	ldrb	r5, [r0, #12]
 800f3bc:	4606      	mov	r6, r0
 800f3be:	b9ad      	cbnz	r5, 800f3ec <rmw_uxrce_init_topic_memory+0x38>
 800f3c0:	231c      	movs	r3, #28
 800f3c2:	4617      	mov	r7, r2
 800f3c4:	460c      	mov	r4, r1
 800f3c6:	46a8      	mov	r8, r5
 800f3c8:	6083      	str	r3, [r0, #8]
 800f3ca:	f240 1301 	movw	r3, #257	@ 0x101
 800f3ce:	e9c0 5500 	strd	r5, r5, [r0]
 800f3d2:	8183      	strh	r3, [r0, #12]
 800f3d4:	3501      	adds	r5, #1
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	4630      	mov	r0, r6
 800f3da:	f005 fbb3 	bl	8014b44 <put_memory>
 800f3de:	42af      	cmp	r7, r5
 800f3e0:	60a4      	str	r4, [r4, #8]
 800f3e2:	f104 041c 	add.w	r4, r4, #28
 800f3e6:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f3ea:	d1f3      	bne.n	800f3d4 <rmw_uxrce_init_topic_memory+0x20>
 800f3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop

0800f3f4 <rmw_uxrce_init_static_input_buffer_memory>:
 800f3f4:	b1ea      	cbz	r2, 800f432 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3fa:	7b05      	ldrb	r5, [r0, #12]
 800f3fc:	4606      	mov	r6, r0
 800f3fe:	b9b5      	cbnz	r5, 800f42e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f400:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800f404:	4617      	mov	r7, r2
 800f406:	460c      	mov	r4, r1
 800f408:	46a8      	mov	r8, r5
 800f40a:	6083      	str	r3, [r0, #8]
 800f40c:	f240 1301 	movw	r3, #257	@ 0x101
 800f410:	e9c0 5500 	strd	r5, r5, [r0]
 800f414:	8183      	strh	r3, [r0, #12]
 800f416:	3501      	adds	r5, #1
 800f418:	4621      	mov	r1, r4
 800f41a:	4630      	mov	r0, r6
 800f41c:	f005 fb92 	bl	8014b44 <put_memory>
 800f420:	42af      	cmp	r7, r5
 800f422:	60a4      	str	r4, [r4, #8]
 800f424:	f884 800c 	strb.w	r8, [r4, #12]
 800f428:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800f42c:	d1f3      	bne.n	800f416 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f432:	4770      	bx	lr

0800f434 <rmw_uxrce_init_init_options_impl_memory>:
 800f434:	b1e2      	cbz	r2, 800f470 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f43a:	7b05      	ldrb	r5, [r0, #12]
 800f43c:	4606      	mov	r6, r0
 800f43e:	b9ad      	cbnz	r5, 800f46c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f440:	232c      	movs	r3, #44	@ 0x2c
 800f442:	4617      	mov	r7, r2
 800f444:	460c      	mov	r4, r1
 800f446:	46a8      	mov	r8, r5
 800f448:	6083      	str	r3, [r0, #8]
 800f44a:	f240 1301 	movw	r3, #257	@ 0x101
 800f44e:	e9c0 5500 	strd	r5, r5, [r0]
 800f452:	8183      	strh	r3, [r0, #12]
 800f454:	3501      	adds	r5, #1
 800f456:	4621      	mov	r1, r4
 800f458:	4630      	mov	r0, r6
 800f45a:	f005 fb73 	bl	8014b44 <put_memory>
 800f45e:	42af      	cmp	r7, r5
 800f460:	60a4      	str	r4, [r4, #8]
 800f462:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800f466:	f804 8c20 	strb.w	r8, [r4, #-32]
 800f46a:	d1f3      	bne.n	800f454 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop

0800f474 <rmw_uxrce_init_wait_set_memory>:
 800f474:	b1e2      	cbz	r2, 800f4b0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47a:	7b05      	ldrb	r5, [r0, #12]
 800f47c:	4606      	mov	r6, r0
 800f47e:	b9ad      	cbnz	r5, 800f4ac <rmw_uxrce_init_wait_set_memory+0x38>
 800f480:	231c      	movs	r3, #28
 800f482:	4617      	mov	r7, r2
 800f484:	460c      	mov	r4, r1
 800f486:	46a8      	mov	r8, r5
 800f488:	6083      	str	r3, [r0, #8]
 800f48a:	f240 1301 	movw	r3, #257	@ 0x101
 800f48e:	e9c0 5500 	strd	r5, r5, [r0]
 800f492:	8183      	strh	r3, [r0, #12]
 800f494:	3501      	adds	r5, #1
 800f496:	4621      	mov	r1, r4
 800f498:	4630      	mov	r0, r6
 800f49a:	f005 fb53 	bl	8014b44 <put_memory>
 800f49e:	42af      	cmp	r7, r5
 800f4a0:	60a4      	str	r4, [r4, #8]
 800f4a2:	f104 041c 	add.w	r4, r4, #28
 800f4a6:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f4aa:	d1f3      	bne.n	800f494 <rmw_uxrce_init_wait_set_memory+0x20>
 800f4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop

0800f4b4 <rmw_uxrce_init_guard_condition_memory>:
 800f4b4:	b1e2      	cbz	r2, 800f4f0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ba:	7b05      	ldrb	r5, [r0, #12]
 800f4bc:	4606      	mov	r6, r0
 800f4be:	b9ad      	cbnz	r5, 800f4ec <rmw_uxrce_init_guard_condition_memory+0x38>
 800f4c0:	2320      	movs	r3, #32
 800f4c2:	4617      	mov	r7, r2
 800f4c4:	460c      	mov	r4, r1
 800f4c6:	46a8      	mov	r8, r5
 800f4c8:	6083      	str	r3, [r0, #8]
 800f4ca:	f240 1301 	movw	r3, #257	@ 0x101
 800f4ce:	e9c0 5500 	strd	r5, r5, [r0]
 800f4d2:	8183      	strh	r3, [r0, #12]
 800f4d4:	3501      	adds	r5, #1
 800f4d6:	4621      	mov	r1, r4
 800f4d8:	4630      	mov	r0, r6
 800f4da:	f005 fb33 	bl	8014b44 <put_memory>
 800f4de:	42af      	cmp	r7, r5
 800f4e0:	60a4      	str	r4, [r4, #8]
 800f4e2:	f104 0420 	add.w	r4, r4, #32
 800f4e6:	f804 8c14 	strb.w	r8, [r4, #-20]
 800f4ea:	d1f3      	bne.n	800f4d4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop

0800f4f4 <rmw_uxrce_fini_session_memory>:
 800f4f4:	4601      	mov	r1, r0
 800f4f6:	4801      	ldr	r0, [pc, #4]	@ (800f4fc <rmw_uxrce_fini_session_memory+0x8>)
 800f4f8:	f005 bb24 	b.w	8014b44 <put_memory>
 800f4fc:	240683dc 	.word	0x240683dc

0800f500 <rmw_uxrce_fini_node_memory>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4604      	mov	r4, r0
 800f504:	6800      	ldr	r0, [r0, #0]
 800f506:	b128      	cbz	r0, 800f514 <rmw_uxrce_fini_node_memory+0x14>
 800f508:	4b07      	ldr	r3, [pc, #28]	@ (800f528 <rmw_uxrce_fini_node_memory+0x28>)
 800f50a:	6819      	ldr	r1, [r3, #0]
 800f50c:	f7f0 fee8 	bl	80002e0 <strcmp>
 800f510:	b940      	cbnz	r0, 800f524 <rmw_uxrce_fini_node_memory+0x24>
 800f512:	6020      	str	r0, [r4, #0]
 800f514:	6861      	ldr	r1, [r4, #4]
 800f516:	b129      	cbz	r1, 800f524 <rmw_uxrce_fini_node_memory+0x24>
 800f518:	2500      	movs	r5, #0
 800f51a:	4804      	ldr	r0, [pc, #16]	@ (800f52c <rmw_uxrce_fini_node_memory+0x2c>)
 800f51c:	610d      	str	r5, [r1, #16]
 800f51e:	f005 fb11 	bl	8014b44 <put_memory>
 800f522:	6065      	str	r5, [r4, #4]
 800f524:	bd38      	pop	{r3, r4, r5, pc}
 800f526:	bf00      	nop
 800f528:	080197bc 	.word	0x080197bc
 800f52c:	240683ac 	.word	0x240683ac

0800f530 <rmw_uxrce_fini_publisher_memory>:
 800f530:	b510      	push	{r4, lr}
 800f532:	4604      	mov	r4, r0
 800f534:	6800      	ldr	r0, [r0, #0]
 800f536:	b128      	cbz	r0, 800f544 <rmw_uxrce_fini_publisher_memory+0x14>
 800f538:	4b06      	ldr	r3, [pc, #24]	@ (800f554 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f53a:	6819      	ldr	r1, [r3, #0]
 800f53c:	f7f0 fed0 	bl	80002e0 <strcmp>
 800f540:	b938      	cbnz	r0, 800f552 <rmw_uxrce_fini_publisher_memory+0x22>
 800f542:	6020      	str	r0, [r4, #0]
 800f544:	6861      	ldr	r1, [r4, #4]
 800f546:	b121      	cbz	r1, 800f552 <rmw_uxrce_fini_publisher_memory+0x22>
 800f548:	4803      	ldr	r0, [pc, #12]	@ (800f558 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f54a:	f005 fafb 	bl	8014b44 <put_memory>
 800f54e:	2300      	movs	r3, #0
 800f550:	6063      	str	r3, [r4, #4]
 800f552:	bd10      	pop	{r4, pc}
 800f554:	080197bc 	.word	0x080197bc
 800f558:	240683bc 	.word	0x240683bc

0800f55c <rmw_uxrce_fini_subscription_memory>:
 800f55c:	b510      	push	{r4, lr}
 800f55e:	4604      	mov	r4, r0
 800f560:	6800      	ldr	r0, [r0, #0]
 800f562:	b128      	cbz	r0, 800f570 <rmw_uxrce_fini_subscription_memory+0x14>
 800f564:	4b06      	ldr	r3, [pc, #24]	@ (800f580 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f566:	6819      	ldr	r1, [r3, #0]
 800f568:	f7f0 feba 	bl	80002e0 <strcmp>
 800f56c:	b938      	cbnz	r0, 800f57e <rmw_uxrce_fini_subscription_memory+0x22>
 800f56e:	6020      	str	r0, [r4, #0]
 800f570:	6861      	ldr	r1, [r4, #4]
 800f572:	b121      	cbz	r1, 800f57e <rmw_uxrce_fini_subscription_memory+0x22>
 800f574:	4803      	ldr	r0, [pc, #12]	@ (800f584 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f576:	f005 fae5 	bl	8014b44 <put_memory>
 800f57a:	2300      	movs	r3, #0
 800f57c:	6063      	str	r3, [r4, #4]
 800f57e:	bd10      	pop	{r4, pc}
 800f580:	080197bc 	.word	0x080197bc
 800f584:	240683fc 	.word	0x240683fc

0800f588 <rmw_uxrce_fini_service_memory>:
 800f588:	b510      	push	{r4, lr}
 800f58a:	4604      	mov	r4, r0
 800f58c:	6800      	ldr	r0, [r0, #0]
 800f58e:	b128      	cbz	r0, 800f59c <rmw_uxrce_fini_service_memory+0x14>
 800f590:	4b06      	ldr	r3, [pc, #24]	@ (800f5ac <rmw_uxrce_fini_service_memory+0x24>)
 800f592:	6819      	ldr	r1, [r3, #0]
 800f594:	f7f0 fea4 	bl	80002e0 <strcmp>
 800f598:	b938      	cbnz	r0, 800f5aa <rmw_uxrce_fini_service_memory+0x22>
 800f59a:	6020      	str	r0, [r4, #0]
 800f59c:	6861      	ldr	r1, [r4, #4]
 800f59e:	b121      	cbz	r1, 800f5aa <rmw_uxrce_fini_service_memory+0x22>
 800f5a0:	4803      	ldr	r0, [pc, #12]	@ (800f5b0 <rmw_uxrce_fini_service_memory+0x28>)
 800f5a2:	f005 facf 	bl	8014b44 <put_memory>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	6063      	str	r3, [r4, #4]
 800f5aa:	bd10      	pop	{r4, pc}
 800f5ac:	080197bc 	.word	0x080197bc
 800f5b0:	240683cc 	.word	0x240683cc

0800f5b4 <rmw_uxrce_fini_client_memory>:
 800f5b4:	b510      	push	{r4, lr}
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	6800      	ldr	r0, [r0, #0]
 800f5ba:	b128      	cbz	r0, 800f5c8 <rmw_uxrce_fini_client_memory+0x14>
 800f5bc:	4b06      	ldr	r3, [pc, #24]	@ (800f5d8 <rmw_uxrce_fini_client_memory+0x24>)
 800f5be:	6819      	ldr	r1, [r3, #0]
 800f5c0:	f7f0 fe8e 	bl	80002e0 <strcmp>
 800f5c4:	b938      	cbnz	r0, 800f5d6 <rmw_uxrce_fini_client_memory+0x22>
 800f5c6:	6020      	str	r0, [r4, #0]
 800f5c8:	6861      	ldr	r1, [r4, #4]
 800f5ca:	b121      	cbz	r1, 800f5d6 <rmw_uxrce_fini_client_memory+0x22>
 800f5cc:	4803      	ldr	r0, [pc, #12]	@ (800f5dc <rmw_uxrce_fini_client_memory+0x28>)
 800f5ce:	f005 fab9 	bl	8014b44 <put_memory>
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	6063      	str	r3, [r4, #4]
 800f5d6:	bd10      	pop	{r4, pc}
 800f5d8:	080197bc 	.word	0x080197bc
 800f5dc:	24063ae0 	.word	0x24063ae0

0800f5e0 <rmw_uxrce_fini_topic_memory>:
 800f5e0:	b510      	push	{r4, lr}
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	4803      	ldr	r0, [pc, #12]	@ (800f5f4 <rmw_uxrce_fini_topic_memory+0x14>)
 800f5e6:	4621      	mov	r1, r4
 800f5e8:	f005 faac 	bl	8014b44 <put_memory>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	61a3      	str	r3, [r4, #24]
 800f5f0:	bd10      	pop	{r4, pc}
 800f5f2:	bf00      	nop
 800f5f4:	2406840c 	.word	0x2406840c

0800f5f8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	492b      	ldr	r1, [pc, #172]	@ (800f6a8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f5fc:	b530      	push	{r4, r5, lr}
 800f5fe:	680d      	ldr	r5, [r1, #0]
 800f600:	ac03      	add	r4, sp, #12
 800f602:	e884 000c 	stmia.w	r4, {r2, r3}
 800f606:	461c      	mov	r4, r3
 800f608:	2d00      	cmp	r5, #0
 800f60a:	d04b      	beq.n	800f6a4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800f60c:	462b      	mov	r3, r5
 800f60e:	2100      	movs	r1, #0
 800f610:	689a      	ldr	r2, [r3, #8]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f618:	4290      	cmp	r0, r2
 800f61a:	bf08      	it	eq
 800f61c:	3101      	addeq	r1, #1
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d1f6      	bne.n	800f610 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f622:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f626:	2b02      	cmp	r3, #2
 800f628:	d029      	beq.n	800f67e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f62a:	d820      	bhi.n	800f66e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800f62c:	428c      	cmp	r4, r1
 800f62e:	d828      	bhi.n	800f682 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f630:	fab4 f284 	clz	r2, r4
 800f634:	0952      	lsrs	r2, r2, #5
 800f636:	b324      	cbz	r4, 800f682 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f638:	b1dd      	cbz	r5, 800f672 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800f63a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f63e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f642:	e001      	b.n	800f648 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800f644:	686d      	ldr	r5, [r5, #4]
 800f646:	b1ad      	cbz	r5, 800f674 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f648:	68ab      	ldr	r3, [r5, #8]
 800f64a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800f64e:	4288      	cmp	r0, r1
 800f650:	d1f8      	bne.n	800f644 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f652:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800f656:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f65a:	4561      	cmp	r1, ip
 800f65c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f660:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f664:	daee      	bge.n	800f644 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f666:	468c      	mov	ip, r1
 800f668:	461c      	mov	r4, r3
 800f66a:	462a      	mov	r2, r5
 800f66c:	e7ea      	b.n	800f644 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f66e:	2b03      	cmp	r3, #3
 800f670:	d0dc      	beq.n	800f62c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800f672:	2200      	movs	r2, #0
 800f674:	4610      	mov	r0, r2
 800f676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f67a:	b002      	add	sp, #8
 800f67c:	4770      	bx	lr
 800f67e:	428c      	cmp	r4, r1
 800f680:	d905      	bls.n	800f68e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f682:	4809      	ldr	r0, [pc, #36]	@ (800f6a8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f688:	b002      	add	sp, #8
 800f68a:	f005 ba4b 	b.w	8014b24 <get_memory>
 800f68e:	fab4 f284 	clz	r2, r4
 800f692:	0952      	lsrs	r2, r2, #5
 800f694:	2c00      	cmp	r4, #0
 800f696:	d1ed      	bne.n	800f674 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f698:	4803      	ldr	r0, [pc, #12]	@ (800f6a8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f69a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f69e:	b002      	add	sp, #8
 800f6a0:	f005 ba40 	b.w	8014b24 <get_memory>
 800f6a4:	4629      	mov	r1, r5
 800f6a6:	e7bc      	b.n	800f622 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f6a8:	240683ec 	.word	0x240683ec

0800f6ac <run_xrce_session>:
 800f6ac:	b510      	push	{r4, lr}
 800f6ae:	788c      	ldrb	r4, [r1, #2]
 800f6b0:	b086      	sub	sp, #24
 800f6b2:	2c01      	cmp	r4, #1
 800f6b4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f6b8:	d00c      	beq.n	800f6d4 <run_xrce_session+0x28>
 800f6ba:	2401      	movs	r4, #1
 800f6bc:	4619      	mov	r1, r3
 800f6be:	f10d 020e 	add.w	r2, sp, #14
 800f6c2:	f10d 0317 	add.w	r3, sp, #23
 800f6c6:	9400      	str	r4, [sp, #0]
 800f6c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f6cc:	f001 ff76 	bl	80115bc <uxr_run_session_until_all_status>
 800f6d0:	b006      	add	sp, #24
 800f6d2:	bd10      	pop	{r4, pc}
 800f6d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f6d8:	f001 fbcc 	bl	8010e74 <uxr_flash_output_streams>
 800f6dc:	4620      	mov	r0, r4
 800f6de:	b006      	add	sp, #24
 800f6e0:	bd10      	pop	{r4, pc}
 800f6e2:	bf00      	nop

0800f6e4 <convert_qos_profile>:
 800f6e4:	7a4a      	ldrb	r2, [r1, #9]
 800f6e6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f6ea:	2a02      	cmp	r2, #2
 800f6ec:	bf18      	it	ne
 800f6ee:	2200      	movne	r2, #0
 800f6f0:	7002      	strb	r2, [r0, #0]
 800f6f2:	f1ac 0202 	sub.w	r2, ip, #2
 800f6f6:	fab2 f282 	clz	r2, r2
 800f6fa:	0952      	lsrs	r2, r2, #5
 800f6fc:	7042      	strb	r2, [r0, #1]
 800f6fe:	780a      	ldrb	r2, [r1, #0]
 800f700:	8889      	ldrh	r1, [r1, #4]
 800f702:	f1a2 0202 	sub.w	r2, r2, #2
 800f706:	8081      	strh	r1, [r0, #4]
 800f708:	fab2 f282 	clz	r2, r2
 800f70c:	0952      	lsrs	r2, r2, #5
 800f70e:	7082      	strb	r2, [r0, #2]
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop

0800f714 <generate_type_name>:
 800f714:	2300      	movs	r3, #0
 800f716:	b530      	push	{r4, r5, lr}
 800f718:	700b      	strb	r3, [r1, #0]
 800f71a:	b087      	sub	sp, #28
 800f71c:	6803      	ldr	r3, [r0, #0]
 800f71e:	4614      	mov	r4, r2
 800f720:	b1bb      	cbz	r3, 800f752 <generate_type_name+0x3e>
 800f722:	4a0e      	ldr	r2, [pc, #56]	@ (800f75c <generate_type_name+0x48>)
 800f724:	4615      	mov	r5, r2
 800f726:	9500      	str	r5, [sp, #0]
 800f728:	9203      	str	r2, [sp, #12]
 800f72a:	4d0d      	ldr	r5, [pc, #52]	@ (800f760 <generate_type_name+0x4c>)
 800f72c:	6842      	ldr	r2, [r0, #4]
 800f72e:	4608      	mov	r0, r1
 800f730:	490c      	ldr	r1, [pc, #48]	@ (800f764 <generate_type_name+0x50>)
 800f732:	9204      	str	r2, [sp, #16]
 800f734:	9105      	str	r1, [sp, #20]
 800f736:	9102      	str	r1, [sp, #8]
 800f738:	4621      	mov	r1, r4
 800f73a:	4a0b      	ldr	r2, [pc, #44]	@ (800f768 <generate_type_name+0x54>)
 800f73c:	9501      	str	r5, [sp, #4]
 800f73e:	f008 fb93 	bl	8017e68 <sniprintf>
 800f742:	2800      	cmp	r0, #0
 800f744:	bfa8      	it	ge
 800f746:	4284      	cmpge	r4, r0
 800f748:	bfcc      	ite	gt
 800f74a:	2001      	movgt	r0, #1
 800f74c:	2000      	movle	r0, #0
 800f74e:	b007      	add	sp, #28
 800f750:	bd30      	pop	{r4, r5, pc}
 800f752:	4b06      	ldr	r3, [pc, #24]	@ (800f76c <generate_type_name+0x58>)
 800f754:	4a01      	ldr	r2, [pc, #4]	@ (800f75c <generate_type_name+0x48>)
 800f756:	461d      	mov	r5, r3
 800f758:	e7e5      	b.n	800f726 <generate_type_name+0x12>
 800f75a:	bf00      	nop
 800f75c:	080191c4 	.word	0x080191c4
 800f760:	080191dc 	.word	0x080191dc
 800f764:	080191d8 	.word	0x080191d8
 800f768:	080191c8 	.word	0x080191c8
 800f76c:	08019594 	.word	0x08019594

0800f770 <generate_topic_name>:
 800f770:	b530      	push	{r4, r5, lr}
 800f772:	4614      	mov	r4, r2
 800f774:	b083      	sub	sp, #12
 800f776:	4605      	mov	r5, r0
 800f778:	4b07      	ldr	r3, [pc, #28]	@ (800f798 <generate_topic_name+0x28>)
 800f77a:	4a08      	ldr	r2, [pc, #32]	@ (800f79c <generate_topic_name+0x2c>)
 800f77c:	4608      	mov	r0, r1
 800f77e:	9500      	str	r5, [sp, #0]
 800f780:	4621      	mov	r1, r4
 800f782:	f008 fb71 	bl	8017e68 <sniprintf>
 800f786:	2800      	cmp	r0, #0
 800f788:	bfa8      	it	ge
 800f78a:	4284      	cmpge	r4, r0
 800f78c:	bfcc      	ite	gt
 800f78e:	2001      	movgt	r0, #1
 800f790:	2000      	movle	r0, #0
 800f792:	b003      	add	sp, #12
 800f794:	bd30      	pop	{r4, r5, pc}
 800f796:	bf00      	nop
 800f798:	080191e8 	.word	0x080191e8
 800f79c:	080191e0 	.word	0x080191e0

0800f7a0 <is_uxrce_rmw_identifier_valid>:
 800f7a0:	b510      	push	{r4, lr}
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	b140      	cbz	r0, 800f7b8 <is_uxrce_rmw_identifier_valid+0x18>
 800f7a6:	f005 f9e1 	bl	8014b6c <rmw_get_implementation_identifier>
 800f7aa:	4601      	mov	r1, r0
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f7f0 fd97 	bl	80002e0 <strcmp>
 800f7b2:	fab0 f080 	clz	r0, r0
 800f7b6:	0940      	lsrs	r0, r0, #5
 800f7b8:	bd10      	pop	{r4, pc}
 800f7ba:	bf00      	nop

0800f7bc <get_message_typesupport_handle>:
 800f7bc:	6883      	ldr	r3, [r0, #8]
 800f7be:	4718      	bx	r3

0800f7c0 <get_message_typesupport_handle_function>:
 800f7c0:	b510      	push	{r4, lr}
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	6800      	ldr	r0, [r0, #0]
 800f7c6:	f7f0 fd8b 	bl	80002e0 <strcmp>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	bf0c      	ite	eq
 800f7ce:	4620      	moveq	r0, r4
 800f7d0:	2000      	movne	r0, #0
 800f7d2:	bd10      	pop	{r4, pc}

0800f7d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f7d4:	4b04      	ldr	r3, [pc, #16]	@ (800f7e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	b10a      	cbz	r2, 800f7de <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f7da:	4803      	ldr	r0, [pc, #12]	@ (800f7e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f7dc:	4770      	bx	lr
 800f7de:	4a03      	ldr	r2, [pc, #12]	@ (800f7ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f7e0:	4801      	ldr	r0, [pc, #4]	@ (800f7e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f7e2:	6812      	ldr	r2, [r2, #0]
 800f7e4:	601a      	str	r2, [r3, #0]
 800f7e6:	4770      	bx	lr
 800f7e8:	24000034 	.word	0x24000034
 800f7ec:	240000b0 	.word	0x240000b0

0800f7f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f7f0:	4a02      	ldr	r2, [pc, #8]	@ (800f7fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800f7f2:	4b03      	ldr	r3, [pc, #12]	@ (800f800 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800f7f4:	6812      	ldr	r2, [r2, #0]
 800f7f6:	601a      	str	r2, [r3, #0]
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	240000b0 	.word	0x240000b0
 800f800:	24000034 	.word	0x24000034

0800f804 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800f804:	f005 be92 	b.w	801552c <std_msgs__msg__Int32__init>

0800f808 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800f808:	f005 be94 	b.w	8015534 <std_msgs__msg__Int32__fini>

0800f80c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f80c:	4b04      	ldr	r3, [pc, #16]	@ (800f820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	b10a      	cbz	r2, 800f816 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f812:	4803      	ldr	r0, [pc, #12]	@ (800f820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f814:	4770      	bx	lr
 800f816:	4a03      	ldr	r2, [pc, #12]	@ (800f824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f818:	4801      	ldr	r0, [pc, #4]	@ (800f820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f81a:	6812      	ldr	r2, [r2, #0]
 800f81c:	601a      	str	r2, [r3, #0]
 800f81e:	4770      	bx	lr
 800f820:	2400007c 	.word	0x2400007c
 800f824:	240000b4 	.word	0x240000b4

0800f828 <_Int32__max_serialized_size>:
 800f828:	2104      	movs	r1, #4
 800f82a:	2000      	movs	r0, #0
 800f82c:	b508      	push	{r3, lr}
 800f82e:	f001 f807 	bl	8010840 <ucdr_alignment>
 800f832:	3004      	adds	r0, #4
 800f834:	bd08      	pop	{r3, pc}
 800f836:	bf00      	nop

0800f838 <_Int32__cdr_deserialize>:
 800f838:	b109      	cbz	r1, 800f83e <_Int32__cdr_deserialize+0x6>
 800f83a:	f000 bf19 	b.w	8010670 <ucdr_deserialize_int32_t>
 800f83e:	4608      	mov	r0, r1
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop

0800f844 <get_serialized_size_std_msgs__msg__Int32>:
 800f844:	b138      	cbz	r0, 800f856 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800f846:	b508      	push	{r3, lr}
 800f848:	460b      	mov	r3, r1
 800f84a:	2104      	movs	r1, #4
 800f84c:	4618      	mov	r0, r3
 800f84e:	f000 fff7 	bl	8010840 <ucdr_alignment>
 800f852:	3004      	adds	r0, #4
 800f854:	bd08      	pop	{r3, pc}
 800f856:	4770      	bx	lr

0800f858 <_Int32__cdr_serialize>:
 800f858:	460a      	mov	r2, r1
 800f85a:	b118      	cbz	r0, 800f864 <_Int32__cdr_serialize+0xc>
 800f85c:	6801      	ldr	r1, [r0, #0]
 800f85e:	4610      	mov	r0, r2
 800f860:	f000 be6e 	b.w	8010540 <ucdr_serialize_int32_t>
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop

0800f868 <_Int32__get_serialized_size>:
 800f868:	b130      	cbz	r0, 800f878 <_Int32__get_serialized_size+0x10>
 800f86a:	2104      	movs	r1, #4
 800f86c:	2000      	movs	r0, #0
 800f86e:	b508      	push	{r3, lr}
 800f870:	f000 ffe6 	bl	8010840 <ucdr_alignment>
 800f874:	3004      	adds	r0, #4
 800f876:	bd08      	pop	{r3, pc}
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop

0800f87c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f87c:	4800      	ldr	r0, [pc, #0]	@ (800f880 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800f87e:	4770      	bx	lr
 800f880:	24000088 	.word	0x24000088

0800f884 <ucdr_serialize_bool>:
 800f884:	b538      	push	{r3, r4, r5, lr}
 800f886:	460d      	mov	r5, r1
 800f888:	2101      	movs	r1, #1
 800f88a:	4604      	mov	r4, r0
 800f88c:	f000 ff8c 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800f890:	b148      	cbz	r0, 800f8a6 <ucdr_serialize_bool+0x22>
 800f892:	68a3      	ldr	r3, [r4, #8]
 800f894:	2101      	movs	r1, #1
 800f896:	701d      	strb	r5, [r3, #0]
 800f898:	68a2      	ldr	r2, [r4, #8]
 800f89a:	6923      	ldr	r3, [r4, #16]
 800f89c:	440a      	add	r2, r1
 800f89e:	7561      	strb	r1, [r4, #21]
 800f8a0:	440b      	add	r3, r1
 800f8a2:	60a2      	str	r2, [r4, #8]
 800f8a4:	6123      	str	r3, [r4, #16]
 800f8a6:	7da0      	ldrb	r0, [r4, #22]
 800f8a8:	f080 0001 	eor.w	r0, r0, #1
 800f8ac:	bd38      	pop	{r3, r4, r5, pc}
 800f8ae:	bf00      	nop

0800f8b0 <ucdr_deserialize_bool>:
 800f8b0:	b538      	push	{r3, r4, r5, lr}
 800f8b2:	460d      	mov	r5, r1
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	f000 ff76 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800f8bc:	b160      	cbz	r0, 800f8d8 <ucdr_deserialize_bool+0x28>
 800f8be:	68a2      	ldr	r2, [r4, #8]
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	6923      	ldr	r3, [r4, #16]
 800f8c4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f8c8:	440b      	add	r3, r1
 800f8ca:	3800      	subs	r0, #0
 800f8cc:	bf18      	it	ne
 800f8ce:	2001      	movne	r0, #1
 800f8d0:	7028      	strb	r0, [r5, #0]
 800f8d2:	60a2      	str	r2, [r4, #8]
 800f8d4:	6123      	str	r3, [r4, #16]
 800f8d6:	7561      	strb	r1, [r4, #21]
 800f8d8:	7da0      	ldrb	r0, [r4, #22]
 800f8da:	f080 0001 	eor.w	r0, r0, #1
 800f8de:	bd38      	pop	{r3, r4, r5, pc}

0800f8e0 <ucdr_serialize_uint8_t>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	460d      	mov	r5, r1
 800f8e4:	2101      	movs	r1, #1
 800f8e6:	4604      	mov	r4, r0
 800f8e8:	f000 ff5e 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800f8ec:	b148      	cbz	r0, 800f902 <ucdr_serialize_uint8_t+0x22>
 800f8ee:	68a3      	ldr	r3, [r4, #8]
 800f8f0:	2101      	movs	r1, #1
 800f8f2:	701d      	strb	r5, [r3, #0]
 800f8f4:	68a2      	ldr	r2, [r4, #8]
 800f8f6:	6923      	ldr	r3, [r4, #16]
 800f8f8:	440a      	add	r2, r1
 800f8fa:	7561      	strb	r1, [r4, #21]
 800f8fc:	440b      	add	r3, r1
 800f8fe:	60a2      	str	r2, [r4, #8]
 800f900:	6123      	str	r3, [r4, #16]
 800f902:	7da0      	ldrb	r0, [r4, #22]
 800f904:	f080 0001 	eor.w	r0, r0, #1
 800f908:	bd38      	pop	{r3, r4, r5, pc}
 800f90a:	bf00      	nop

0800f90c <ucdr_deserialize_uint8_t>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	460d      	mov	r5, r1
 800f910:	2101      	movs	r1, #1
 800f912:	4604      	mov	r4, r0
 800f914:	f000 ff48 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800f918:	b150      	cbz	r0, 800f930 <ucdr_deserialize_uint8_t+0x24>
 800f91a:	68a3      	ldr	r3, [r4, #8]
 800f91c:	2101      	movs	r1, #1
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	702b      	strb	r3, [r5, #0]
 800f922:	68a2      	ldr	r2, [r4, #8]
 800f924:	6923      	ldr	r3, [r4, #16]
 800f926:	440a      	add	r2, r1
 800f928:	7561      	strb	r1, [r4, #21]
 800f92a:	440b      	add	r3, r1
 800f92c:	60a2      	str	r2, [r4, #8]
 800f92e:	6123      	str	r3, [r4, #16]
 800f930:	7da0      	ldrb	r0, [r4, #22]
 800f932:	f080 0001 	eor.w	r0, r0, #1
 800f936:	bd38      	pop	{r3, r4, r5, pc}

0800f938 <ucdr_serialize_uint16_t>:
 800f938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f93c:	460b      	mov	r3, r1
 800f93e:	b082      	sub	sp, #8
 800f940:	4604      	mov	r4, r0
 800f942:	2102      	movs	r1, #2
 800f944:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f948:	f000 ff82 	bl	8010850 <ucdr_buffer_alignment>
 800f94c:	4601      	mov	r1, r0
 800f94e:	4620      	mov	r0, r4
 800f950:	7d67      	ldrb	r7, [r4, #21]
 800f952:	f000 ffc5 	bl	80108e0 <ucdr_advance_buffer>
 800f956:	2102      	movs	r1, #2
 800f958:	4620      	mov	r0, r4
 800f95a:	f000 ff19 	bl	8010790 <ucdr_check_buffer_available_for>
 800f95e:	bb78      	cbnz	r0, 800f9c0 <ucdr_serialize_uint16_t+0x88>
 800f960:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f964:	42ab      	cmp	r3, r5
 800f966:	d926      	bls.n	800f9b6 <ucdr_serialize_uint16_t+0x7e>
 800f968:	1b5e      	subs	r6, r3, r5
 800f96a:	60a3      	str	r3, [r4, #8]
 800f96c:	6923      	ldr	r3, [r4, #16]
 800f96e:	4620      	mov	r0, r4
 800f970:	f1c6 0802 	rsb	r8, r6, #2
 800f974:	4433      	add	r3, r6
 800f976:	4641      	mov	r1, r8
 800f978:	6123      	str	r3, [r4, #16]
 800f97a:	f000 ff15 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800f97e:	2800      	cmp	r0, #0
 800f980:	d03b      	beq.n	800f9fa <ucdr_serialize_uint16_t+0xc2>
 800f982:	7d23      	ldrb	r3, [r4, #20]
 800f984:	2b01      	cmp	r3, #1
 800f986:	d04a      	beq.n	800fa1e <ucdr_serialize_uint16_t+0xe6>
 800f988:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f98c:	702b      	strb	r3, [r5, #0]
 800f98e:	2e00      	cmp	r6, #0
 800f990:	d040      	beq.n	800fa14 <ucdr_serialize_uint16_t+0xdc>
 800f992:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f996:	706b      	strb	r3, [r5, #1]
 800f998:	6923      	ldr	r3, [r4, #16]
 800f99a:	2102      	movs	r1, #2
 800f99c:	68a2      	ldr	r2, [r4, #8]
 800f99e:	3302      	adds	r3, #2
 800f9a0:	7da0      	ldrb	r0, [r4, #22]
 800f9a2:	4442      	add	r2, r8
 800f9a4:	7561      	strb	r1, [r4, #21]
 800f9a6:	1b9e      	subs	r6, r3, r6
 800f9a8:	f080 0001 	eor.w	r0, r0, #1
 800f9ac:	60a2      	str	r2, [r4, #8]
 800f9ae:	6126      	str	r6, [r4, #16]
 800f9b0:	b002      	add	sp, #8
 800f9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b6:	2102      	movs	r1, #2
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f000 fef5 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800f9be:	b190      	cbz	r0, 800f9e6 <ucdr_serialize_uint16_t+0xae>
 800f9c0:	7d23      	ldrb	r3, [r4, #20]
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	68a3      	ldr	r3, [r4, #8]
 800f9c6:	d014      	beq.n	800f9f2 <ucdr_serialize_uint16_t+0xba>
 800f9c8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f9cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9d0:	7019      	strb	r1, [r3, #0]
 800f9d2:	68a3      	ldr	r3, [r4, #8]
 800f9d4:	705a      	strb	r2, [r3, #1]
 800f9d6:	2102      	movs	r1, #2
 800f9d8:	68a2      	ldr	r2, [r4, #8]
 800f9da:	6923      	ldr	r3, [r4, #16]
 800f9dc:	440a      	add	r2, r1
 800f9de:	7561      	strb	r1, [r4, #21]
 800f9e0:	440b      	add	r3, r1
 800f9e2:	60a2      	str	r2, [r4, #8]
 800f9e4:	6123      	str	r3, [r4, #16]
 800f9e6:	7da0      	ldrb	r0, [r4, #22]
 800f9e8:	f080 0001 	eor.w	r0, r0, #1
 800f9ec:	b002      	add	sp, #8
 800f9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f9f6:	801a      	strh	r2, [r3, #0]
 800f9f8:	e7ed      	b.n	800f9d6 <ucdr_serialize_uint16_t+0x9e>
 800f9fa:	68a2      	ldr	r2, [r4, #8]
 800f9fc:	6923      	ldr	r3, [r4, #16]
 800f9fe:	7da0      	ldrb	r0, [r4, #22]
 800fa00:	1b92      	subs	r2, r2, r6
 800fa02:	1b9b      	subs	r3, r3, r6
 800fa04:	7567      	strb	r7, [r4, #21]
 800fa06:	f080 0001 	eor.w	r0, r0, #1
 800fa0a:	60a2      	str	r2, [r4, #8]
 800fa0c:	6123      	str	r3, [r4, #16]
 800fa0e:	b002      	add	sp, #8
 800fa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa14:	68a3      	ldr	r3, [r4, #8]
 800fa16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa1a:	701a      	strb	r2, [r3, #0]
 800fa1c:	e7bc      	b.n	800f998 <ucdr_serialize_uint16_t+0x60>
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f10d 0506 	add.w	r5, sp, #6
 800fa24:	4632      	mov	r2, r6
 800fa26:	4629      	mov	r1, r5
 800fa28:	f008 fbed 	bl	8018206 <memcpy>
 800fa2c:	4642      	mov	r2, r8
 800fa2e:	19a9      	adds	r1, r5, r6
 800fa30:	68a0      	ldr	r0, [r4, #8]
 800fa32:	f008 fbe8 	bl	8018206 <memcpy>
 800fa36:	e7af      	b.n	800f998 <ucdr_serialize_uint16_t+0x60>

0800fa38 <ucdr_serialize_endian_uint16_t>:
 800fa38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	b083      	sub	sp, #12
 800fa40:	460d      	mov	r5, r1
 800fa42:	2102      	movs	r1, #2
 800fa44:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fa48:	f000 ff02 	bl	8010850 <ucdr_buffer_alignment>
 800fa4c:	4601      	mov	r1, r0
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fa54:	f000 ff44 	bl	80108e0 <ucdr_advance_buffer>
 800fa58:	2102      	movs	r1, #2
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f000 fe98 	bl	8010790 <ucdr_check_buffer_available_for>
 800fa60:	bb70      	cbnz	r0, 800fac0 <ucdr_serialize_endian_uint16_t+0x88>
 800fa62:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fa66:	42be      	cmp	r6, r7
 800fa68:	d925      	bls.n	800fab6 <ucdr_serialize_endian_uint16_t+0x7e>
 800fa6a:	6923      	ldr	r3, [r4, #16]
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	60a6      	str	r6, [r4, #8]
 800fa70:	1bf6      	subs	r6, r6, r7
 800fa72:	4433      	add	r3, r6
 800fa74:	f1c6 0902 	rsb	r9, r6, #2
 800fa78:	6123      	str	r3, [r4, #16]
 800fa7a:	4649      	mov	r1, r9
 800fa7c:	f000 fe94 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d039      	beq.n	800faf8 <ucdr_serialize_endian_uint16_t+0xc0>
 800fa84:	2d01      	cmp	r5, #1
 800fa86:	d04a      	beq.n	800fb1e <ucdr_serialize_endian_uint16_t+0xe6>
 800fa88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa8c:	703b      	strb	r3, [r7, #0]
 800fa8e:	2e00      	cmp	r6, #0
 800fa90:	d040      	beq.n	800fb14 <ucdr_serialize_endian_uint16_t+0xdc>
 800fa92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa96:	707b      	strb	r3, [r7, #1]
 800fa98:	6923      	ldr	r3, [r4, #16]
 800fa9a:	2102      	movs	r1, #2
 800fa9c:	68a2      	ldr	r2, [r4, #8]
 800fa9e:	7da0      	ldrb	r0, [r4, #22]
 800faa0:	3302      	adds	r3, #2
 800faa2:	444a      	add	r2, r9
 800faa4:	7561      	strb	r1, [r4, #21]
 800faa6:	1b9b      	subs	r3, r3, r6
 800faa8:	f080 0001 	eor.w	r0, r0, #1
 800faac:	60a2      	str	r2, [r4, #8]
 800faae:	6123      	str	r3, [r4, #16]
 800fab0:	b003      	add	sp, #12
 800fab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fab6:	2102      	movs	r1, #2
 800fab8:	4620      	mov	r0, r4
 800faba:	f000 fe75 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fabe:	b188      	cbz	r0, 800fae4 <ucdr_serialize_endian_uint16_t+0xac>
 800fac0:	2d01      	cmp	r5, #1
 800fac2:	68a3      	ldr	r3, [r4, #8]
 800fac4:	d014      	beq.n	800faf0 <ucdr_serialize_endian_uint16_t+0xb8>
 800fac6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800faca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800face:	7019      	strb	r1, [r3, #0]
 800fad0:	68a3      	ldr	r3, [r4, #8]
 800fad2:	705a      	strb	r2, [r3, #1]
 800fad4:	2102      	movs	r1, #2
 800fad6:	68a2      	ldr	r2, [r4, #8]
 800fad8:	6923      	ldr	r3, [r4, #16]
 800fada:	440a      	add	r2, r1
 800fadc:	7561      	strb	r1, [r4, #21]
 800fade:	440b      	add	r3, r1
 800fae0:	60a2      	str	r2, [r4, #8]
 800fae2:	6123      	str	r3, [r4, #16]
 800fae4:	7da0      	ldrb	r0, [r4, #22]
 800fae6:	f080 0001 	eor.w	r0, r0, #1
 800faea:	b003      	add	sp, #12
 800faec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faf0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800faf4:	801a      	strh	r2, [r3, #0]
 800faf6:	e7ed      	b.n	800fad4 <ucdr_serialize_endian_uint16_t+0x9c>
 800faf8:	68a2      	ldr	r2, [r4, #8]
 800fafa:	6923      	ldr	r3, [r4, #16]
 800fafc:	7da0      	ldrb	r0, [r4, #22]
 800fafe:	1b92      	subs	r2, r2, r6
 800fb00:	1b9b      	subs	r3, r3, r6
 800fb02:	f884 8015 	strb.w	r8, [r4, #21]
 800fb06:	f080 0001 	eor.w	r0, r0, #1
 800fb0a:	60a2      	str	r2, [r4, #8]
 800fb0c:	6123      	str	r3, [r4, #16]
 800fb0e:	b003      	add	sp, #12
 800fb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb14:	68a3      	ldr	r3, [r4, #8]
 800fb16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb1a:	701a      	strb	r2, [r3, #0]
 800fb1c:	e7bc      	b.n	800fa98 <ucdr_serialize_endian_uint16_t+0x60>
 800fb1e:	f10d 0506 	add.w	r5, sp, #6
 800fb22:	4632      	mov	r2, r6
 800fb24:	4638      	mov	r0, r7
 800fb26:	4629      	mov	r1, r5
 800fb28:	f008 fb6d 	bl	8018206 <memcpy>
 800fb2c:	464a      	mov	r2, r9
 800fb2e:	19a9      	adds	r1, r5, r6
 800fb30:	68a0      	ldr	r0, [r4, #8]
 800fb32:	f008 fb68 	bl	8018206 <memcpy>
 800fb36:	e7af      	b.n	800fa98 <ucdr_serialize_endian_uint16_t+0x60>

0800fb38 <ucdr_deserialize_uint16_t>:
 800fb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb3c:	4604      	mov	r4, r0
 800fb3e:	460d      	mov	r5, r1
 800fb40:	2102      	movs	r1, #2
 800fb42:	f000 fe85 	bl	8010850 <ucdr_buffer_alignment>
 800fb46:	4601      	mov	r1, r0
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fb4e:	f000 fec7 	bl	80108e0 <ucdr_advance_buffer>
 800fb52:	2102      	movs	r1, #2
 800fb54:	4620      	mov	r0, r4
 800fb56:	f000 fe1b 	bl	8010790 <ucdr_check_buffer_available_for>
 800fb5a:	bb60      	cbnz	r0, 800fbb6 <ucdr_deserialize_uint16_t+0x7e>
 800fb5c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fb60:	42be      	cmp	r6, r7
 800fb62:	d923      	bls.n	800fbac <ucdr_deserialize_uint16_t+0x74>
 800fb64:	6923      	ldr	r3, [r4, #16]
 800fb66:	4620      	mov	r0, r4
 800fb68:	60a6      	str	r6, [r4, #8]
 800fb6a:	1bf6      	subs	r6, r6, r7
 800fb6c:	4433      	add	r3, r6
 800fb6e:	f1c6 0902 	rsb	r9, r6, #2
 800fb72:	6123      	str	r3, [r4, #16]
 800fb74:	4649      	mov	r1, r9
 800fb76:	f000 fe17 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	d034      	beq.n	800fbe8 <ucdr_deserialize_uint16_t+0xb0>
 800fb7e:	7d23      	ldrb	r3, [r4, #20]
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d042      	beq.n	800fc0a <ucdr_deserialize_uint16_t+0xd2>
 800fb84:	787b      	ldrb	r3, [r7, #1]
 800fb86:	702b      	strb	r3, [r5, #0]
 800fb88:	2e00      	cmp	r6, #0
 800fb8a:	d03a      	beq.n	800fc02 <ucdr_deserialize_uint16_t+0xca>
 800fb8c:	783b      	ldrb	r3, [r7, #0]
 800fb8e:	706b      	strb	r3, [r5, #1]
 800fb90:	6923      	ldr	r3, [r4, #16]
 800fb92:	2102      	movs	r1, #2
 800fb94:	68a2      	ldr	r2, [r4, #8]
 800fb96:	3302      	adds	r3, #2
 800fb98:	7da0      	ldrb	r0, [r4, #22]
 800fb9a:	444a      	add	r2, r9
 800fb9c:	7561      	strb	r1, [r4, #21]
 800fb9e:	1b9b      	subs	r3, r3, r6
 800fba0:	f080 0001 	eor.w	r0, r0, #1
 800fba4:	60a2      	str	r2, [r4, #8]
 800fba6:	6123      	str	r3, [r4, #16]
 800fba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbac:	2102      	movs	r1, #2
 800fbae:	4620      	mov	r0, r4
 800fbb0:	f000 fdfa 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fbb4:	b180      	cbz	r0, 800fbd8 <ucdr_deserialize_uint16_t+0xa0>
 800fbb6:	7d23      	ldrb	r3, [r4, #20]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	68a3      	ldr	r3, [r4, #8]
 800fbbc:	d011      	beq.n	800fbe2 <ucdr_deserialize_uint16_t+0xaa>
 800fbbe:	785b      	ldrb	r3, [r3, #1]
 800fbc0:	702b      	strb	r3, [r5, #0]
 800fbc2:	68a3      	ldr	r3, [r4, #8]
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	706b      	strb	r3, [r5, #1]
 800fbc8:	2102      	movs	r1, #2
 800fbca:	68a2      	ldr	r2, [r4, #8]
 800fbcc:	6923      	ldr	r3, [r4, #16]
 800fbce:	440a      	add	r2, r1
 800fbd0:	7561      	strb	r1, [r4, #21]
 800fbd2:	440b      	add	r3, r1
 800fbd4:	60a2      	str	r2, [r4, #8]
 800fbd6:	6123      	str	r3, [r4, #16]
 800fbd8:	7da0      	ldrb	r0, [r4, #22]
 800fbda:	f080 0001 	eor.w	r0, r0, #1
 800fbde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbe2:	881b      	ldrh	r3, [r3, #0]
 800fbe4:	802b      	strh	r3, [r5, #0]
 800fbe6:	e7ef      	b.n	800fbc8 <ucdr_deserialize_uint16_t+0x90>
 800fbe8:	68a2      	ldr	r2, [r4, #8]
 800fbea:	6923      	ldr	r3, [r4, #16]
 800fbec:	1b92      	subs	r2, r2, r6
 800fbee:	7da0      	ldrb	r0, [r4, #22]
 800fbf0:	1b9b      	subs	r3, r3, r6
 800fbf2:	f884 8015 	strb.w	r8, [r4, #21]
 800fbf6:	f080 0001 	eor.w	r0, r0, #1
 800fbfa:	60a2      	str	r2, [r4, #8]
 800fbfc:	6123      	str	r3, [r4, #16]
 800fbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc02:	68a3      	ldr	r3, [r4, #8]
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	706b      	strb	r3, [r5, #1]
 800fc08:	e7c2      	b.n	800fb90 <ucdr_deserialize_uint16_t+0x58>
 800fc0a:	4639      	mov	r1, r7
 800fc0c:	4632      	mov	r2, r6
 800fc0e:	4628      	mov	r0, r5
 800fc10:	f008 faf9 	bl	8018206 <memcpy>
 800fc14:	464a      	mov	r2, r9
 800fc16:	19a8      	adds	r0, r5, r6
 800fc18:	68a1      	ldr	r1, [r4, #8]
 800fc1a:	f008 faf4 	bl	8018206 <memcpy>
 800fc1e:	e7b7      	b.n	800fb90 <ucdr_deserialize_uint16_t+0x58>

0800fc20 <ucdr_deserialize_endian_uint16_t>:
 800fc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc24:	4604      	mov	r4, r0
 800fc26:	460e      	mov	r6, r1
 800fc28:	2102      	movs	r1, #2
 800fc2a:	4615      	mov	r5, r2
 800fc2c:	f000 fe10 	bl	8010850 <ucdr_buffer_alignment>
 800fc30:	4601      	mov	r1, r0
 800fc32:	4620      	mov	r0, r4
 800fc34:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc38:	f000 fe52 	bl	80108e0 <ucdr_advance_buffer>
 800fc3c:	2102      	movs	r1, #2
 800fc3e:	4620      	mov	r0, r4
 800fc40:	f000 fda6 	bl	8010790 <ucdr_check_buffer_available_for>
 800fc44:	bb70      	cbnz	r0, 800fca4 <ucdr_deserialize_endian_uint16_t+0x84>
 800fc46:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800fc4a:	454f      	cmp	r7, r9
 800fc4c:	d925      	bls.n	800fc9a <ucdr_deserialize_endian_uint16_t+0x7a>
 800fc4e:	6923      	ldr	r3, [r4, #16]
 800fc50:	4620      	mov	r0, r4
 800fc52:	60a7      	str	r7, [r4, #8]
 800fc54:	eba7 0709 	sub.w	r7, r7, r9
 800fc58:	443b      	add	r3, r7
 800fc5a:	f1c7 0a02 	rsb	sl, r7, #2
 800fc5e:	6123      	str	r3, [r4, #16]
 800fc60:	4651      	mov	r1, sl
 800fc62:	f000 fda1 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fc66:	2800      	cmp	r0, #0
 800fc68:	d034      	beq.n	800fcd4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800fc6a:	2e01      	cmp	r6, #1
 800fc6c:	d043      	beq.n	800fcf6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800fc6e:	f899 3001 	ldrb.w	r3, [r9, #1]
 800fc72:	702b      	strb	r3, [r5, #0]
 800fc74:	2f00      	cmp	r7, #0
 800fc76:	d03a      	beq.n	800fcee <ucdr_deserialize_endian_uint16_t+0xce>
 800fc78:	f899 3000 	ldrb.w	r3, [r9]
 800fc7c:	706b      	strb	r3, [r5, #1]
 800fc7e:	6923      	ldr	r3, [r4, #16]
 800fc80:	2102      	movs	r1, #2
 800fc82:	68a2      	ldr	r2, [r4, #8]
 800fc84:	3302      	adds	r3, #2
 800fc86:	7da0      	ldrb	r0, [r4, #22]
 800fc88:	4452      	add	r2, sl
 800fc8a:	7561      	strb	r1, [r4, #21]
 800fc8c:	1bdb      	subs	r3, r3, r7
 800fc8e:	f080 0001 	eor.w	r0, r0, #1
 800fc92:	60a2      	str	r2, [r4, #8]
 800fc94:	6123      	str	r3, [r4, #16]
 800fc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc9a:	2102      	movs	r1, #2
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f000 fd83 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fca2:	b178      	cbz	r0, 800fcc4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800fca4:	2e01      	cmp	r6, #1
 800fca6:	68a3      	ldr	r3, [r4, #8]
 800fca8:	d011      	beq.n	800fcce <ucdr_deserialize_endian_uint16_t+0xae>
 800fcaa:	785b      	ldrb	r3, [r3, #1]
 800fcac:	702b      	strb	r3, [r5, #0]
 800fcae:	68a3      	ldr	r3, [r4, #8]
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	706b      	strb	r3, [r5, #1]
 800fcb4:	2102      	movs	r1, #2
 800fcb6:	68a2      	ldr	r2, [r4, #8]
 800fcb8:	6923      	ldr	r3, [r4, #16]
 800fcba:	440a      	add	r2, r1
 800fcbc:	7561      	strb	r1, [r4, #21]
 800fcbe:	440b      	add	r3, r1
 800fcc0:	60a2      	str	r2, [r4, #8]
 800fcc2:	6123      	str	r3, [r4, #16]
 800fcc4:	7da0      	ldrb	r0, [r4, #22]
 800fcc6:	f080 0001 	eor.w	r0, r0, #1
 800fcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcce:	881b      	ldrh	r3, [r3, #0]
 800fcd0:	802b      	strh	r3, [r5, #0]
 800fcd2:	e7ef      	b.n	800fcb4 <ucdr_deserialize_endian_uint16_t+0x94>
 800fcd4:	68a2      	ldr	r2, [r4, #8]
 800fcd6:	6923      	ldr	r3, [r4, #16]
 800fcd8:	1bd2      	subs	r2, r2, r7
 800fcda:	7da0      	ldrb	r0, [r4, #22]
 800fcdc:	1bdb      	subs	r3, r3, r7
 800fcde:	f884 8015 	strb.w	r8, [r4, #21]
 800fce2:	f080 0001 	eor.w	r0, r0, #1
 800fce6:	60a2      	str	r2, [r4, #8]
 800fce8:	6123      	str	r3, [r4, #16]
 800fcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcee:	68a3      	ldr	r3, [r4, #8]
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	706b      	strb	r3, [r5, #1]
 800fcf4:	e7c3      	b.n	800fc7e <ucdr_deserialize_endian_uint16_t+0x5e>
 800fcf6:	4649      	mov	r1, r9
 800fcf8:	463a      	mov	r2, r7
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	f008 fa83 	bl	8018206 <memcpy>
 800fd00:	4652      	mov	r2, sl
 800fd02:	19e8      	adds	r0, r5, r7
 800fd04:	68a1      	ldr	r1, [r4, #8]
 800fd06:	f008 fa7e 	bl	8018206 <memcpy>
 800fd0a:	e7b8      	b.n	800fc7e <ucdr_deserialize_endian_uint16_t+0x5e>

0800fd0c <ucdr_serialize_uint32_t>:
 800fd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd10:	b082      	sub	sp, #8
 800fd12:	4604      	mov	r4, r0
 800fd14:	9101      	str	r1, [sp, #4]
 800fd16:	2104      	movs	r1, #4
 800fd18:	f000 fd9a 	bl	8010850 <ucdr_buffer_alignment>
 800fd1c:	4601      	mov	r1, r0
 800fd1e:	4620      	mov	r0, r4
 800fd20:	7d67      	ldrb	r7, [r4, #21]
 800fd22:	f000 fddd 	bl	80108e0 <ucdr_advance_buffer>
 800fd26:	2104      	movs	r1, #4
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f000 fd31 	bl	8010790 <ucdr_check_buffer_available_for>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d139      	bne.n	800fda6 <ucdr_serialize_uint32_t+0x9a>
 800fd32:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fd36:	42ab      	cmp	r3, r5
 800fd38:	d930      	bls.n	800fd9c <ucdr_serialize_uint32_t+0x90>
 800fd3a:	1b5e      	subs	r6, r3, r5
 800fd3c:	60a3      	str	r3, [r4, #8]
 800fd3e:	6923      	ldr	r3, [r4, #16]
 800fd40:	4620      	mov	r0, r4
 800fd42:	f1c6 0804 	rsb	r8, r6, #4
 800fd46:	4433      	add	r3, r6
 800fd48:	4641      	mov	r1, r8
 800fd4a:	6123      	str	r3, [r4, #16]
 800fd4c:	f000 fd2c 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fd50:	2800      	cmp	r0, #0
 800fd52:	d04c      	beq.n	800fdee <ucdr_serialize_uint32_t+0xe2>
 800fd54:	7d23      	ldrb	r3, [r4, #20]
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	d063      	beq.n	800fe22 <ucdr_serialize_uint32_t+0x116>
 800fd5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fd5e:	702b      	strb	r3, [r5, #0]
 800fd60:	2e00      	cmp	r6, #0
 800fd62:	d051      	beq.n	800fe08 <ucdr_serialize_uint32_t+0xfc>
 800fd64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fd68:	2e01      	cmp	r6, #1
 800fd6a:	706b      	strb	r3, [r5, #1]
 800fd6c:	d050      	beq.n	800fe10 <ucdr_serialize_uint32_t+0x104>
 800fd6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fd72:	2e02      	cmp	r6, #2
 800fd74:	70ab      	strb	r3, [r5, #2]
 800fd76:	d04f      	beq.n	800fe18 <ucdr_serialize_uint32_t+0x10c>
 800fd78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fd7c:	70eb      	strb	r3, [r5, #3]
 800fd7e:	6923      	ldr	r3, [r4, #16]
 800fd80:	2104      	movs	r1, #4
 800fd82:	68a2      	ldr	r2, [r4, #8]
 800fd84:	3304      	adds	r3, #4
 800fd86:	7da0      	ldrb	r0, [r4, #22]
 800fd88:	4442      	add	r2, r8
 800fd8a:	7561      	strb	r1, [r4, #21]
 800fd8c:	1b9e      	subs	r6, r3, r6
 800fd8e:	f080 0001 	eor.w	r0, r0, #1
 800fd92:	60a2      	str	r2, [r4, #8]
 800fd94:	6126      	str	r6, [r4, #16]
 800fd96:	b002      	add	sp, #8
 800fd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd9c:	2104      	movs	r1, #4
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f000 fd02 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fda4:	b1d0      	cbz	r0, 800fddc <ucdr_serialize_uint32_t+0xd0>
 800fda6:	7d23      	ldrb	r3, [r4, #20]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	68a3      	ldr	r3, [r4, #8]
 800fdac:	d01c      	beq.n	800fde8 <ucdr_serialize_uint32_t+0xdc>
 800fdae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fdb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fdb6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fdba:	7018      	strb	r0, [r3, #0]
 800fdbc:	68a3      	ldr	r3, [r4, #8]
 800fdbe:	705a      	strb	r2, [r3, #1]
 800fdc0:	68a3      	ldr	r3, [r4, #8]
 800fdc2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fdc6:	7099      	strb	r1, [r3, #2]
 800fdc8:	68a3      	ldr	r3, [r4, #8]
 800fdca:	70da      	strb	r2, [r3, #3]
 800fdcc:	2104      	movs	r1, #4
 800fdce:	68a2      	ldr	r2, [r4, #8]
 800fdd0:	6923      	ldr	r3, [r4, #16]
 800fdd2:	440a      	add	r2, r1
 800fdd4:	7561      	strb	r1, [r4, #21]
 800fdd6:	440b      	add	r3, r1
 800fdd8:	60a2      	str	r2, [r4, #8]
 800fdda:	6123      	str	r3, [r4, #16]
 800fddc:	7da0      	ldrb	r0, [r4, #22]
 800fdde:	f080 0001 	eor.w	r0, r0, #1
 800fde2:	b002      	add	sp, #8
 800fde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fde8:	9a01      	ldr	r2, [sp, #4]
 800fdea:	601a      	str	r2, [r3, #0]
 800fdec:	e7ee      	b.n	800fdcc <ucdr_serialize_uint32_t+0xc0>
 800fdee:	68a2      	ldr	r2, [r4, #8]
 800fdf0:	6923      	ldr	r3, [r4, #16]
 800fdf2:	7da0      	ldrb	r0, [r4, #22]
 800fdf4:	1b92      	subs	r2, r2, r6
 800fdf6:	1b9b      	subs	r3, r3, r6
 800fdf8:	7567      	strb	r7, [r4, #21]
 800fdfa:	f080 0001 	eor.w	r0, r0, #1
 800fdfe:	60a2      	str	r2, [r4, #8]
 800fe00:	6123      	str	r3, [r4, #16]
 800fe02:	b002      	add	sp, #8
 800fe04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe08:	68a3      	ldr	r3, [r4, #8]
 800fe0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe0e:	701a      	strb	r2, [r3, #0]
 800fe10:	68a3      	ldr	r3, [r4, #8]
 800fe12:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe16:	701a      	strb	r2, [r3, #0]
 800fe18:	68a3      	ldr	r3, [r4, #8]
 800fe1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe1e:	701a      	strb	r2, [r3, #0]
 800fe20:	e7ad      	b.n	800fd7e <ucdr_serialize_uint32_t+0x72>
 800fe22:	4628      	mov	r0, r5
 800fe24:	ad01      	add	r5, sp, #4
 800fe26:	4632      	mov	r2, r6
 800fe28:	4629      	mov	r1, r5
 800fe2a:	f008 f9ec 	bl	8018206 <memcpy>
 800fe2e:	4642      	mov	r2, r8
 800fe30:	19a9      	adds	r1, r5, r6
 800fe32:	68a0      	ldr	r0, [r4, #8]
 800fe34:	f008 f9e7 	bl	8018206 <memcpy>
 800fe38:	e7a1      	b.n	800fd7e <ucdr_serialize_uint32_t+0x72>
 800fe3a:	bf00      	nop

0800fe3c <ucdr_serialize_endian_uint32_t>:
 800fe3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe40:	4604      	mov	r4, r0
 800fe42:	b083      	sub	sp, #12
 800fe44:	460d      	mov	r5, r1
 800fe46:	2104      	movs	r1, #4
 800fe48:	9201      	str	r2, [sp, #4]
 800fe4a:	f000 fd01 	bl	8010850 <ucdr_buffer_alignment>
 800fe4e:	4601      	mov	r1, r0
 800fe50:	4620      	mov	r0, r4
 800fe52:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fe56:	f000 fd43 	bl	80108e0 <ucdr_advance_buffer>
 800fe5a:	2104      	movs	r1, #4
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f000 fc97 	bl	8010790 <ucdr_check_buffer_available_for>
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d138      	bne.n	800fed8 <ucdr_serialize_endian_uint32_t+0x9c>
 800fe66:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fe6a:	42b7      	cmp	r7, r6
 800fe6c:	d92f      	bls.n	800fece <ucdr_serialize_endian_uint32_t+0x92>
 800fe6e:	6923      	ldr	r3, [r4, #16]
 800fe70:	4620      	mov	r0, r4
 800fe72:	60a7      	str	r7, [r4, #8]
 800fe74:	1bbf      	subs	r7, r7, r6
 800fe76:	443b      	add	r3, r7
 800fe78:	f1c7 0904 	rsb	r9, r7, #4
 800fe7c:	6123      	str	r3, [r4, #16]
 800fe7e:	4649      	mov	r1, r9
 800fe80:	f000 fc92 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d04a      	beq.n	800ff1e <ucdr_serialize_endian_uint32_t+0xe2>
 800fe88:	2d01      	cmp	r5, #1
 800fe8a:	d063      	beq.n	800ff54 <ucdr_serialize_endian_uint32_t+0x118>
 800fe8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe90:	7033      	strb	r3, [r6, #0]
 800fe92:	2f00      	cmp	r7, #0
 800fe94:	d051      	beq.n	800ff3a <ucdr_serialize_endian_uint32_t+0xfe>
 800fe96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fe9a:	2f01      	cmp	r7, #1
 800fe9c:	7073      	strb	r3, [r6, #1]
 800fe9e:	d050      	beq.n	800ff42 <ucdr_serialize_endian_uint32_t+0x106>
 800fea0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fea4:	2f02      	cmp	r7, #2
 800fea6:	70b3      	strb	r3, [r6, #2]
 800fea8:	d04f      	beq.n	800ff4a <ucdr_serialize_endian_uint32_t+0x10e>
 800feaa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800feae:	70f3      	strb	r3, [r6, #3]
 800feb0:	6923      	ldr	r3, [r4, #16]
 800feb2:	2104      	movs	r1, #4
 800feb4:	68a2      	ldr	r2, [r4, #8]
 800feb6:	7da0      	ldrb	r0, [r4, #22]
 800feb8:	3304      	adds	r3, #4
 800feba:	444a      	add	r2, r9
 800febc:	7561      	strb	r1, [r4, #21]
 800febe:	1bdb      	subs	r3, r3, r7
 800fec0:	f080 0001 	eor.w	r0, r0, #1
 800fec4:	60a2      	str	r2, [r4, #8]
 800fec6:	6123      	str	r3, [r4, #16]
 800fec8:	b003      	add	sp, #12
 800feca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fece:	2104      	movs	r1, #4
 800fed0:	4620      	mov	r0, r4
 800fed2:	f000 fc69 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800fed6:	b1c8      	cbz	r0, 800ff0c <ucdr_serialize_endian_uint32_t+0xd0>
 800fed8:	2d01      	cmp	r5, #1
 800feda:	68a3      	ldr	r3, [r4, #8]
 800fedc:	d01c      	beq.n	800ff18 <ucdr_serialize_endian_uint32_t+0xdc>
 800fede:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fee2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fee6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800feea:	7018      	strb	r0, [r3, #0]
 800feec:	68a3      	ldr	r3, [r4, #8]
 800feee:	705a      	strb	r2, [r3, #1]
 800fef0:	68a3      	ldr	r3, [r4, #8]
 800fef2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fef6:	7099      	strb	r1, [r3, #2]
 800fef8:	68a3      	ldr	r3, [r4, #8]
 800fefa:	70da      	strb	r2, [r3, #3]
 800fefc:	2104      	movs	r1, #4
 800fefe:	68a2      	ldr	r2, [r4, #8]
 800ff00:	6923      	ldr	r3, [r4, #16]
 800ff02:	440a      	add	r2, r1
 800ff04:	7561      	strb	r1, [r4, #21]
 800ff06:	440b      	add	r3, r1
 800ff08:	60a2      	str	r2, [r4, #8]
 800ff0a:	6123      	str	r3, [r4, #16]
 800ff0c:	7da0      	ldrb	r0, [r4, #22]
 800ff0e:	f080 0001 	eor.w	r0, r0, #1
 800ff12:	b003      	add	sp, #12
 800ff14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff18:	9a01      	ldr	r2, [sp, #4]
 800ff1a:	601a      	str	r2, [r3, #0]
 800ff1c:	e7ee      	b.n	800fefc <ucdr_serialize_endian_uint32_t+0xc0>
 800ff1e:	68a2      	ldr	r2, [r4, #8]
 800ff20:	6923      	ldr	r3, [r4, #16]
 800ff22:	7da0      	ldrb	r0, [r4, #22]
 800ff24:	1bd2      	subs	r2, r2, r7
 800ff26:	1bdb      	subs	r3, r3, r7
 800ff28:	f884 8015 	strb.w	r8, [r4, #21]
 800ff2c:	f080 0001 	eor.w	r0, r0, #1
 800ff30:	60a2      	str	r2, [r4, #8]
 800ff32:	6123      	str	r3, [r4, #16]
 800ff34:	b003      	add	sp, #12
 800ff36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff3a:	68a3      	ldr	r3, [r4, #8]
 800ff3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff40:	701a      	strb	r2, [r3, #0]
 800ff42:	68a3      	ldr	r3, [r4, #8]
 800ff44:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ff48:	701a      	strb	r2, [r3, #0]
 800ff4a:	68a3      	ldr	r3, [r4, #8]
 800ff4c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff50:	701a      	strb	r2, [r3, #0]
 800ff52:	e7ad      	b.n	800feb0 <ucdr_serialize_endian_uint32_t+0x74>
 800ff54:	ad01      	add	r5, sp, #4
 800ff56:	463a      	mov	r2, r7
 800ff58:	4630      	mov	r0, r6
 800ff5a:	4629      	mov	r1, r5
 800ff5c:	f008 f953 	bl	8018206 <memcpy>
 800ff60:	464a      	mov	r2, r9
 800ff62:	19e9      	adds	r1, r5, r7
 800ff64:	68a0      	ldr	r0, [r4, #8]
 800ff66:	f008 f94e 	bl	8018206 <memcpy>
 800ff6a:	e7a1      	b.n	800feb0 <ucdr_serialize_endian_uint32_t+0x74>

0800ff6c <ucdr_deserialize_uint32_t>:
 800ff6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff70:	4604      	mov	r4, r0
 800ff72:	460d      	mov	r5, r1
 800ff74:	2104      	movs	r1, #4
 800ff76:	f000 fc6b 	bl	8010850 <ucdr_buffer_alignment>
 800ff7a:	4601      	mov	r1, r0
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ff82:	f000 fcad 	bl	80108e0 <ucdr_advance_buffer>
 800ff86:	2104      	movs	r1, #4
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f000 fc01 	bl	8010790 <ucdr_check_buffer_available_for>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	d138      	bne.n	8010004 <ucdr_deserialize_uint32_t+0x98>
 800ff92:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ff96:	42b7      	cmp	r7, r6
 800ff98:	d92f      	bls.n	800fffa <ucdr_deserialize_uint32_t+0x8e>
 800ff9a:	6923      	ldr	r3, [r4, #16]
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	60a7      	str	r7, [r4, #8]
 800ffa0:	1bbf      	subs	r7, r7, r6
 800ffa2:	443b      	add	r3, r7
 800ffa4:	f1c7 0904 	rsb	r9, r7, #4
 800ffa8:	6123      	str	r3, [r4, #16]
 800ffaa:	4649      	mov	r1, r9
 800ffac:	f000 fbfc 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	d046      	beq.n	8010042 <ucdr_deserialize_uint32_t+0xd6>
 800ffb4:	7d23      	ldrb	r3, [r4, #20]
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d05c      	beq.n	8010074 <ucdr_deserialize_uint32_t+0x108>
 800ffba:	78f3      	ldrb	r3, [r6, #3]
 800ffbc:	702b      	strb	r3, [r5, #0]
 800ffbe:	2f00      	cmp	r7, #0
 800ffc0:	d04c      	beq.n	801005c <ucdr_deserialize_uint32_t+0xf0>
 800ffc2:	78b3      	ldrb	r3, [r6, #2]
 800ffc4:	2f01      	cmp	r7, #1
 800ffc6:	706b      	strb	r3, [r5, #1]
 800ffc8:	f105 0302 	add.w	r3, r5, #2
 800ffcc:	d04a      	beq.n	8010064 <ucdr_deserialize_uint32_t+0xf8>
 800ffce:	7873      	ldrb	r3, [r6, #1]
 800ffd0:	2f02      	cmp	r7, #2
 800ffd2:	70ab      	strb	r3, [r5, #2]
 800ffd4:	f105 0303 	add.w	r3, r5, #3
 800ffd8:	d048      	beq.n	801006c <ucdr_deserialize_uint32_t+0x100>
 800ffda:	7833      	ldrb	r3, [r6, #0]
 800ffdc:	70eb      	strb	r3, [r5, #3]
 800ffde:	6923      	ldr	r3, [r4, #16]
 800ffe0:	2104      	movs	r1, #4
 800ffe2:	68a2      	ldr	r2, [r4, #8]
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	7da0      	ldrb	r0, [r4, #22]
 800ffe8:	444a      	add	r2, r9
 800ffea:	7561      	strb	r1, [r4, #21]
 800ffec:	1bdb      	subs	r3, r3, r7
 800ffee:	f080 0001 	eor.w	r0, r0, #1
 800fff2:	60a2      	str	r2, [r4, #8]
 800fff4:	6123      	str	r3, [r4, #16]
 800fff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fffa:	2104      	movs	r1, #4
 800fffc:	4620      	mov	r0, r4
 800fffe:	f000 fbd3 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 8010002:	b1b0      	cbz	r0, 8010032 <ucdr_deserialize_uint32_t+0xc6>
 8010004:	7d23      	ldrb	r3, [r4, #20]
 8010006:	2b01      	cmp	r3, #1
 8010008:	68a3      	ldr	r3, [r4, #8]
 801000a:	d017      	beq.n	801003c <ucdr_deserialize_uint32_t+0xd0>
 801000c:	78db      	ldrb	r3, [r3, #3]
 801000e:	702b      	strb	r3, [r5, #0]
 8010010:	68a3      	ldr	r3, [r4, #8]
 8010012:	789b      	ldrb	r3, [r3, #2]
 8010014:	706b      	strb	r3, [r5, #1]
 8010016:	68a3      	ldr	r3, [r4, #8]
 8010018:	785b      	ldrb	r3, [r3, #1]
 801001a:	70ab      	strb	r3, [r5, #2]
 801001c:	68a3      	ldr	r3, [r4, #8]
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	70eb      	strb	r3, [r5, #3]
 8010022:	2104      	movs	r1, #4
 8010024:	68a2      	ldr	r2, [r4, #8]
 8010026:	6923      	ldr	r3, [r4, #16]
 8010028:	440a      	add	r2, r1
 801002a:	7561      	strb	r1, [r4, #21]
 801002c:	440b      	add	r3, r1
 801002e:	60a2      	str	r2, [r4, #8]
 8010030:	6123      	str	r3, [r4, #16]
 8010032:	7da0      	ldrb	r0, [r4, #22]
 8010034:	f080 0001 	eor.w	r0, r0, #1
 8010038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	602b      	str	r3, [r5, #0]
 8010040:	e7ef      	b.n	8010022 <ucdr_deserialize_uint32_t+0xb6>
 8010042:	68a2      	ldr	r2, [r4, #8]
 8010044:	6923      	ldr	r3, [r4, #16]
 8010046:	1bd2      	subs	r2, r2, r7
 8010048:	7da0      	ldrb	r0, [r4, #22]
 801004a:	1bdb      	subs	r3, r3, r7
 801004c:	f884 8015 	strb.w	r8, [r4, #21]
 8010050:	f080 0001 	eor.w	r0, r0, #1
 8010054:	60a2      	str	r2, [r4, #8]
 8010056:	6123      	str	r3, [r4, #16]
 8010058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801005c:	68a3      	ldr	r3, [r4, #8]
 801005e:	789b      	ldrb	r3, [r3, #2]
 8010060:	706b      	strb	r3, [r5, #1]
 8010062:	1cab      	adds	r3, r5, #2
 8010064:	68a2      	ldr	r2, [r4, #8]
 8010066:	7852      	ldrb	r2, [r2, #1]
 8010068:	f803 2b01 	strb.w	r2, [r3], #1
 801006c:	68a2      	ldr	r2, [r4, #8]
 801006e:	7812      	ldrb	r2, [r2, #0]
 8010070:	701a      	strb	r2, [r3, #0]
 8010072:	e7b4      	b.n	800ffde <ucdr_deserialize_uint32_t+0x72>
 8010074:	4631      	mov	r1, r6
 8010076:	463a      	mov	r2, r7
 8010078:	4628      	mov	r0, r5
 801007a:	f008 f8c4 	bl	8018206 <memcpy>
 801007e:	464a      	mov	r2, r9
 8010080:	19e8      	adds	r0, r5, r7
 8010082:	68a1      	ldr	r1, [r4, #8]
 8010084:	f008 f8bf 	bl	8018206 <memcpy>
 8010088:	e7a9      	b.n	800ffde <ucdr_deserialize_uint32_t+0x72>
 801008a:	bf00      	nop

0801008c <ucdr_deserialize_endian_uint32_t>:
 801008c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010090:	4604      	mov	r4, r0
 8010092:	460e      	mov	r6, r1
 8010094:	2104      	movs	r1, #4
 8010096:	4615      	mov	r5, r2
 8010098:	f000 fbda 	bl	8010850 <ucdr_buffer_alignment>
 801009c:	4601      	mov	r1, r0
 801009e:	4620      	mov	r0, r4
 80100a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80100a4:	f000 fc1c 	bl	80108e0 <ucdr_advance_buffer>
 80100a8:	2104      	movs	r1, #4
 80100aa:	4620      	mov	r0, r4
 80100ac:	f000 fb70 	bl	8010790 <ucdr_check_buffer_available_for>
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d13c      	bne.n	801012e <ucdr_deserialize_endian_uint32_t+0xa2>
 80100b4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80100b8:	42bb      	cmp	r3, r7
 80100ba:	d933      	bls.n	8010124 <ucdr_deserialize_endian_uint32_t+0x98>
 80100bc:	eba3 0907 	sub.w	r9, r3, r7
 80100c0:	60a3      	str	r3, [r4, #8]
 80100c2:	6923      	ldr	r3, [r4, #16]
 80100c4:	4620      	mov	r0, r4
 80100c6:	f1c9 0a04 	rsb	sl, r9, #4
 80100ca:	444b      	add	r3, r9
 80100cc:	4651      	mov	r1, sl
 80100ce:	6123      	str	r3, [r4, #16]
 80100d0:	f000 fb6a 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d048      	beq.n	801016a <ucdr_deserialize_endian_uint32_t+0xde>
 80100d8:	2e01      	cmp	r6, #1
 80100da:	d061      	beq.n	80101a0 <ucdr_deserialize_endian_uint32_t+0x114>
 80100dc:	78fb      	ldrb	r3, [r7, #3]
 80100de:	702b      	strb	r3, [r5, #0]
 80100e0:	f1b9 0f00 	cmp.w	r9, #0
 80100e4:	d050      	beq.n	8010188 <ucdr_deserialize_endian_uint32_t+0xfc>
 80100e6:	78bb      	ldrb	r3, [r7, #2]
 80100e8:	f1b9 0f01 	cmp.w	r9, #1
 80100ec:	706b      	strb	r3, [r5, #1]
 80100ee:	f105 0302 	add.w	r3, r5, #2
 80100f2:	d04d      	beq.n	8010190 <ucdr_deserialize_endian_uint32_t+0x104>
 80100f4:	787b      	ldrb	r3, [r7, #1]
 80100f6:	f1b9 0f02 	cmp.w	r9, #2
 80100fa:	70ab      	strb	r3, [r5, #2]
 80100fc:	f105 0303 	add.w	r3, r5, #3
 8010100:	d04a      	beq.n	8010198 <ucdr_deserialize_endian_uint32_t+0x10c>
 8010102:	783b      	ldrb	r3, [r7, #0]
 8010104:	70eb      	strb	r3, [r5, #3]
 8010106:	6923      	ldr	r3, [r4, #16]
 8010108:	2104      	movs	r1, #4
 801010a:	68a2      	ldr	r2, [r4, #8]
 801010c:	3304      	adds	r3, #4
 801010e:	7da0      	ldrb	r0, [r4, #22]
 8010110:	4452      	add	r2, sl
 8010112:	7561      	strb	r1, [r4, #21]
 8010114:	eba3 0309 	sub.w	r3, r3, r9
 8010118:	f080 0001 	eor.w	r0, r0, #1
 801011c:	60a2      	str	r2, [r4, #8]
 801011e:	6123      	str	r3, [r4, #16]
 8010120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010124:	2104      	movs	r1, #4
 8010126:	4620      	mov	r0, r4
 8010128:	f000 fb3e 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 801012c:	b1a8      	cbz	r0, 801015a <ucdr_deserialize_endian_uint32_t+0xce>
 801012e:	2e01      	cmp	r6, #1
 8010130:	68a3      	ldr	r3, [r4, #8]
 8010132:	d017      	beq.n	8010164 <ucdr_deserialize_endian_uint32_t+0xd8>
 8010134:	78db      	ldrb	r3, [r3, #3]
 8010136:	702b      	strb	r3, [r5, #0]
 8010138:	68a3      	ldr	r3, [r4, #8]
 801013a:	789b      	ldrb	r3, [r3, #2]
 801013c:	706b      	strb	r3, [r5, #1]
 801013e:	68a3      	ldr	r3, [r4, #8]
 8010140:	785b      	ldrb	r3, [r3, #1]
 8010142:	70ab      	strb	r3, [r5, #2]
 8010144:	68a3      	ldr	r3, [r4, #8]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	70eb      	strb	r3, [r5, #3]
 801014a:	2104      	movs	r1, #4
 801014c:	68a2      	ldr	r2, [r4, #8]
 801014e:	6923      	ldr	r3, [r4, #16]
 8010150:	440a      	add	r2, r1
 8010152:	7561      	strb	r1, [r4, #21]
 8010154:	440b      	add	r3, r1
 8010156:	60a2      	str	r2, [r4, #8]
 8010158:	6123      	str	r3, [r4, #16]
 801015a:	7da0      	ldrb	r0, [r4, #22]
 801015c:	f080 0001 	eor.w	r0, r0, #1
 8010160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	602b      	str	r3, [r5, #0]
 8010168:	e7ef      	b.n	801014a <ucdr_deserialize_endian_uint32_t+0xbe>
 801016a:	68a2      	ldr	r2, [r4, #8]
 801016c:	6923      	ldr	r3, [r4, #16]
 801016e:	eba2 0209 	sub.w	r2, r2, r9
 8010172:	7da0      	ldrb	r0, [r4, #22]
 8010174:	eba3 0309 	sub.w	r3, r3, r9
 8010178:	f884 8015 	strb.w	r8, [r4, #21]
 801017c:	f080 0001 	eor.w	r0, r0, #1
 8010180:	60a2      	str	r2, [r4, #8]
 8010182:	6123      	str	r3, [r4, #16]
 8010184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010188:	68a3      	ldr	r3, [r4, #8]
 801018a:	789b      	ldrb	r3, [r3, #2]
 801018c:	706b      	strb	r3, [r5, #1]
 801018e:	1cab      	adds	r3, r5, #2
 8010190:	68a2      	ldr	r2, [r4, #8]
 8010192:	7852      	ldrb	r2, [r2, #1]
 8010194:	f803 2b01 	strb.w	r2, [r3], #1
 8010198:	68a2      	ldr	r2, [r4, #8]
 801019a:	7812      	ldrb	r2, [r2, #0]
 801019c:	701a      	strb	r2, [r3, #0]
 801019e:	e7b2      	b.n	8010106 <ucdr_deserialize_endian_uint32_t+0x7a>
 80101a0:	4639      	mov	r1, r7
 80101a2:	464a      	mov	r2, r9
 80101a4:	4628      	mov	r0, r5
 80101a6:	f008 f82e 	bl	8018206 <memcpy>
 80101aa:	4652      	mov	r2, sl
 80101ac:	eb05 0009 	add.w	r0, r5, r9
 80101b0:	68a1      	ldr	r1, [r4, #8]
 80101b2:	f008 f828 	bl	8018206 <memcpy>
 80101b6:	e7a6      	b.n	8010106 <ucdr_deserialize_endian_uint32_t+0x7a>

080101b8 <ucdr_serialize_uint64_t>:
 80101b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101bc:	4604      	mov	r4, r0
 80101be:	b082      	sub	sp, #8
 80101c0:	2108      	movs	r1, #8
 80101c2:	e9cd 2300 	strd	r2, r3, [sp]
 80101c6:	f000 fb43 	bl	8010850 <ucdr_buffer_alignment>
 80101ca:	4601      	mov	r1, r0
 80101cc:	4620      	mov	r0, r4
 80101ce:	7d67      	ldrb	r7, [r4, #21]
 80101d0:	f000 fb86 	bl	80108e0 <ucdr_advance_buffer>
 80101d4:	2108      	movs	r1, #8
 80101d6:	4620      	mov	r0, r4
 80101d8:	f000 fada 	bl	8010790 <ucdr_check_buffer_available_for>
 80101dc:	2800      	cmp	r0, #0
 80101de:	d14e      	bne.n	801027e <ucdr_serialize_uint64_t+0xc6>
 80101e0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80101e4:	42ab      	cmp	r3, r5
 80101e6:	d945      	bls.n	8010274 <ucdr_serialize_uint64_t+0xbc>
 80101e8:	1b5e      	subs	r6, r3, r5
 80101ea:	60a3      	str	r3, [r4, #8]
 80101ec:	6923      	ldr	r3, [r4, #16]
 80101ee:	4620      	mov	r0, r4
 80101f0:	f1c6 0808 	rsb	r8, r6, #8
 80101f4:	4433      	add	r3, r6
 80101f6:	4641      	mov	r1, r8
 80101f8:	6123      	str	r3, [r4, #16]
 80101fa:	f000 fad5 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 80101fe:	2800      	cmp	r0, #0
 8010200:	d074      	beq.n	80102ec <ucdr_serialize_uint64_t+0x134>
 8010202:	7d23      	ldrb	r3, [r4, #20]
 8010204:	2b01      	cmp	r3, #1
 8010206:	f000 809b 	beq.w	8010340 <ucdr_serialize_uint64_t+0x188>
 801020a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801020e:	702b      	strb	r3, [r5, #0]
 8010210:	2e00      	cmp	r6, #0
 8010212:	d078      	beq.n	8010306 <ucdr_serialize_uint64_t+0x14e>
 8010214:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010218:	2e01      	cmp	r6, #1
 801021a:	706b      	strb	r3, [r5, #1]
 801021c:	d077      	beq.n	801030e <ucdr_serialize_uint64_t+0x156>
 801021e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010222:	2e02      	cmp	r6, #2
 8010224:	70ab      	strb	r3, [r5, #2]
 8010226:	d076      	beq.n	8010316 <ucdr_serialize_uint64_t+0x15e>
 8010228:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801022c:	2e03      	cmp	r6, #3
 801022e:	70eb      	strb	r3, [r5, #3]
 8010230:	d075      	beq.n	801031e <ucdr_serialize_uint64_t+0x166>
 8010232:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010236:	2e04      	cmp	r6, #4
 8010238:	712b      	strb	r3, [r5, #4]
 801023a:	d074      	beq.n	8010326 <ucdr_serialize_uint64_t+0x16e>
 801023c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010240:	2e05      	cmp	r6, #5
 8010242:	716b      	strb	r3, [r5, #5]
 8010244:	d073      	beq.n	801032e <ucdr_serialize_uint64_t+0x176>
 8010246:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801024a:	2e06      	cmp	r6, #6
 801024c:	71ab      	strb	r3, [r5, #6]
 801024e:	d072      	beq.n	8010336 <ucdr_serialize_uint64_t+0x17e>
 8010250:	f89d 3000 	ldrb.w	r3, [sp]
 8010254:	71eb      	strb	r3, [r5, #7]
 8010256:	6923      	ldr	r3, [r4, #16]
 8010258:	2108      	movs	r1, #8
 801025a:	68a2      	ldr	r2, [r4, #8]
 801025c:	3308      	adds	r3, #8
 801025e:	7da0      	ldrb	r0, [r4, #22]
 8010260:	4442      	add	r2, r8
 8010262:	7561      	strb	r1, [r4, #21]
 8010264:	1b9e      	subs	r6, r3, r6
 8010266:	f080 0001 	eor.w	r0, r0, #1
 801026a:	60a2      	str	r2, [r4, #8]
 801026c:	6126      	str	r6, [r4, #16]
 801026e:	b002      	add	sp, #8
 8010270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010274:	2108      	movs	r1, #8
 8010276:	4620      	mov	r0, r4
 8010278:	f000 fa96 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 801027c:	b350      	cbz	r0, 80102d4 <ucdr_serialize_uint64_t+0x11c>
 801027e:	7d23      	ldrb	r3, [r4, #20]
 8010280:	2b01      	cmp	r3, #1
 8010282:	d02d      	beq.n	80102e0 <ucdr_serialize_uint64_t+0x128>
 8010284:	68a3      	ldr	r3, [r4, #8]
 8010286:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801028a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801028e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010292:	7018      	strb	r0, [r3, #0]
 8010294:	68a3      	ldr	r3, [r4, #8]
 8010296:	705a      	strb	r2, [r3, #1]
 8010298:	68a3      	ldr	r3, [r4, #8]
 801029a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801029e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80102a2:	7099      	strb	r1, [r3, #2]
 80102a4:	68a3      	ldr	r3, [r4, #8]
 80102a6:	70da      	strb	r2, [r3, #3]
 80102a8:	68a3      	ldr	r3, [r4, #8]
 80102aa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80102ae:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80102b2:	7118      	strb	r0, [r3, #4]
 80102b4:	68a3      	ldr	r3, [r4, #8]
 80102b6:	715a      	strb	r2, [r3, #5]
 80102b8:	68a3      	ldr	r3, [r4, #8]
 80102ba:	f89d 2000 	ldrb.w	r2, [sp]
 80102be:	7199      	strb	r1, [r3, #6]
 80102c0:	68a3      	ldr	r3, [r4, #8]
 80102c2:	71da      	strb	r2, [r3, #7]
 80102c4:	2108      	movs	r1, #8
 80102c6:	68a2      	ldr	r2, [r4, #8]
 80102c8:	6923      	ldr	r3, [r4, #16]
 80102ca:	440a      	add	r2, r1
 80102cc:	7561      	strb	r1, [r4, #21]
 80102ce:	440b      	add	r3, r1
 80102d0:	60a2      	str	r2, [r4, #8]
 80102d2:	6123      	str	r3, [r4, #16]
 80102d4:	7da0      	ldrb	r0, [r4, #22]
 80102d6:	f080 0001 	eor.w	r0, r0, #1
 80102da:	b002      	add	sp, #8
 80102dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e0:	466b      	mov	r3, sp
 80102e2:	68a2      	ldr	r2, [r4, #8]
 80102e4:	cb03      	ldmia	r3!, {r0, r1}
 80102e6:	6010      	str	r0, [r2, #0]
 80102e8:	6051      	str	r1, [r2, #4]
 80102ea:	e7eb      	b.n	80102c4 <ucdr_serialize_uint64_t+0x10c>
 80102ec:	68a2      	ldr	r2, [r4, #8]
 80102ee:	6923      	ldr	r3, [r4, #16]
 80102f0:	7da0      	ldrb	r0, [r4, #22]
 80102f2:	1b92      	subs	r2, r2, r6
 80102f4:	1b9b      	subs	r3, r3, r6
 80102f6:	7567      	strb	r7, [r4, #21]
 80102f8:	f080 0001 	eor.w	r0, r0, #1
 80102fc:	60a2      	str	r2, [r4, #8]
 80102fe:	6123      	str	r3, [r4, #16]
 8010300:	b002      	add	sp, #8
 8010302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010306:	68a3      	ldr	r3, [r4, #8]
 8010308:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801030c:	701a      	strb	r2, [r3, #0]
 801030e:	68a3      	ldr	r3, [r4, #8]
 8010310:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010314:	701a      	strb	r2, [r3, #0]
 8010316:	68a3      	ldr	r3, [r4, #8]
 8010318:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801031c:	701a      	strb	r2, [r3, #0]
 801031e:	68a3      	ldr	r3, [r4, #8]
 8010320:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010324:	701a      	strb	r2, [r3, #0]
 8010326:	68a3      	ldr	r3, [r4, #8]
 8010328:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801032c:	701a      	strb	r2, [r3, #0]
 801032e:	68a3      	ldr	r3, [r4, #8]
 8010330:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010334:	701a      	strb	r2, [r3, #0]
 8010336:	68a3      	ldr	r3, [r4, #8]
 8010338:	f89d 2000 	ldrb.w	r2, [sp]
 801033c:	701a      	strb	r2, [r3, #0]
 801033e:	e78a      	b.n	8010256 <ucdr_serialize_uint64_t+0x9e>
 8010340:	4628      	mov	r0, r5
 8010342:	466d      	mov	r5, sp
 8010344:	4632      	mov	r2, r6
 8010346:	4629      	mov	r1, r5
 8010348:	f007 ff5d 	bl	8018206 <memcpy>
 801034c:	4642      	mov	r2, r8
 801034e:	19a9      	adds	r1, r5, r6
 8010350:	68a0      	ldr	r0, [r4, #8]
 8010352:	f007 ff58 	bl	8018206 <memcpy>
 8010356:	e77e      	b.n	8010256 <ucdr_serialize_uint64_t+0x9e>

08010358 <ucdr_serialize_int16_t>:
 8010358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801035c:	460b      	mov	r3, r1
 801035e:	b082      	sub	sp, #8
 8010360:	4604      	mov	r4, r0
 8010362:	2102      	movs	r1, #2
 8010364:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010368:	f000 fa72 	bl	8010850 <ucdr_buffer_alignment>
 801036c:	4601      	mov	r1, r0
 801036e:	4620      	mov	r0, r4
 8010370:	7d67      	ldrb	r7, [r4, #21]
 8010372:	f000 fab5 	bl	80108e0 <ucdr_advance_buffer>
 8010376:	2102      	movs	r1, #2
 8010378:	4620      	mov	r0, r4
 801037a:	f000 fa09 	bl	8010790 <ucdr_check_buffer_available_for>
 801037e:	bb78      	cbnz	r0, 80103e0 <ucdr_serialize_int16_t+0x88>
 8010380:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010384:	42ab      	cmp	r3, r5
 8010386:	d926      	bls.n	80103d6 <ucdr_serialize_int16_t+0x7e>
 8010388:	1b5e      	subs	r6, r3, r5
 801038a:	60a3      	str	r3, [r4, #8]
 801038c:	6923      	ldr	r3, [r4, #16]
 801038e:	4620      	mov	r0, r4
 8010390:	f1c6 0802 	rsb	r8, r6, #2
 8010394:	4433      	add	r3, r6
 8010396:	4641      	mov	r1, r8
 8010398:	6123      	str	r3, [r4, #16]
 801039a:	f000 fa05 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 801039e:	2800      	cmp	r0, #0
 80103a0:	d03b      	beq.n	801041a <ucdr_serialize_int16_t+0xc2>
 80103a2:	7d23      	ldrb	r3, [r4, #20]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d04a      	beq.n	801043e <ucdr_serialize_int16_t+0xe6>
 80103a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80103ac:	702b      	strb	r3, [r5, #0]
 80103ae:	2e00      	cmp	r6, #0
 80103b0:	d040      	beq.n	8010434 <ucdr_serialize_int16_t+0xdc>
 80103b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80103b6:	706b      	strb	r3, [r5, #1]
 80103b8:	6923      	ldr	r3, [r4, #16]
 80103ba:	2102      	movs	r1, #2
 80103bc:	68a2      	ldr	r2, [r4, #8]
 80103be:	3302      	adds	r3, #2
 80103c0:	7da0      	ldrb	r0, [r4, #22]
 80103c2:	4442      	add	r2, r8
 80103c4:	7561      	strb	r1, [r4, #21]
 80103c6:	1b9e      	subs	r6, r3, r6
 80103c8:	f080 0001 	eor.w	r0, r0, #1
 80103cc:	60a2      	str	r2, [r4, #8]
 80103ce:	6126      	str	r6, [r4, #16]
 80103d0:	b002      	add	sp, #8
 80103d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d6:	2102      	movs	r1, #2
 80103d8:	4620      	mov	r0, r4
 80103da:	f000 f9e5 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 80103de:	b190      	cbz	r0, 8010406 <ucdr_serialize_int16_t+0xae>
 80103e0:	7d23      	ldrb	r3, [r4, #20]
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	68a3      	ldr	r3, [r4, #8]
 80103e6:	d014      	beq.n	8010412 <ucdr_serialize_int16_t+0xba>
 80103e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80103ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80103f0:	7019      	strb	r1, [r3, #0]
 80103f2:	68a3      	ldr	r3, [r4, #8]
 80103f4:	705a      	strb	r2, [r3, #1]
 80103f6:	2102      	movs	r1, #2
 80103f8:	68a2      	ldr	r2, [r4, #8]
 80103fa:	6923      	ldr	r3, [r4, #16]
 80103fc:	440a      	add	r2, r1
 80103fe:	7561      	strb	r1, [r4, #21]
 8010400:	440b      	add	r3, r1
 8010402:	60a2      	str	r2, [r4, #8]
 8010404:	6123      	str	r3, [r4, #16]
 8010406:	7da0      	ldrb	r0, [r4, #22]
 8010408:	f080 0001 	eor.w	r0, r0, #1
 801040c:	b002      	add	sp, #8
 801040e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010412:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010416:	801a      	strh	r2, [r3, #0]
 8010418:	e7ed      	b.n	80103f6 <ucdr_serialize_int16_t+0x9e>
 801041a:	68a2      	ldr	r2, [r4, #8]
 801041c:	6923      	ldr	r3, [r4, #16]
 801041e:	7da0      	ldrb	r0, [r4, #22]
 8010420:	1b92      	subs	r2, r2, r6
 8010422:	1b9b      	subs	r3, r3, r6
 8010424:	7567      	strb	r7, [r4, #21]
 8010426:	f080 0001 	eor.w	r0, r0, #1
 801042a:	60a2      	str	r2, [r4, #8]
 801042c:	6123      	str	r3, [r4, #16]
 801042e:	b002      	add	sp, #8
 8010430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010434:	68a3      	ldr	r3, [r4, #8]
 8010436:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801043a:	701a      	strb	r2, [r3, #0]
 801043c:	e7bc      	b.n	80103b8 <ucdr_serialize_int16_t+0x60>
 801043e:	4628      	mov	r0, r5
 8010440:	f10d 0506 	add.w	r5, sp, #6
 8010444:	4632      	mov	r2, r6
 8010446:	4629      	mov	r1, r5
 8010448:	f007 fedd 	bl	8018206 <memcpy>
 801044c:	4642      	mov	r2, r8
 801044e:	19a9      	adds	r1, r5, r6
 8010450:	68a0      	ldr	r0, [r4, #8]
 8010452:	f007 fed8 	bl	8018206 <memcpy>
 8010456:	e7af      	b.n	80103b8 <ucdr_serialize_int16_t+0x60>

08010458 <ucdr_deserialize_int16_t>:
 8010458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801045c:	4604      	mov	r4, r0
 801045e:	460d      	mov	r5, r1
 8010460:	2102      	movs	r1, #2
 8010462:	f000 f9f5 	bl	8010850 <ucdr_buffer_alignment>
 8010466:	4601      	mov	r1, r0
 8010468:	4620      	mov	r0, r4
 801046a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801046e:	f000 fa37 	bl	80108e0 <ucdr_advance_buffer>
 8010472:	2102      	movs	r1, #2
 8010474:	4620      	mov	r0, r4
 8010476:	f000 f98b 	bl	8010790 <ucdr_check_buffer_available_for>
 801047a:	bb60      	cbnz	r0, 80104d6 <ucdr_deserialize_int16_t+0x7e>
 801047c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010480:	42be      	cmp	r6, r7
 8010482:	d923      	bls.n	80104cc <ucdr_deserialize_int16_t+0x74>
 8010484:	6923      	ldr	r3, [r4, #16]
 8010486:	4620      	mov	r0, r4
 8010488:	60a6      	str	r6, [r4, #8]
 801048a:	1bf6      	subs	r6, r6, r7
 801048c:	4433      	add	r3, r6
 801048e:	f1c6 0902 	rsb	r9, r6, #2
 8010492:	6123      	str	r3, [r4, #16]
 8010494:	4649      	mov	r1, r9
 8010496:	f000 f987 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 801049a:	2800      	cmp	r0, #0
 801049c:	d034      	beq.n	8010508 <ucdr_deserialize_int16_t+0xb0>
 801049e:	7d23      	ldrb	r3, [r4, #20]
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d042      	beq.n	801052a <ucdr_deserialize_int16_t+0xd2>
 80104a4:	787b      	ldrb	r3, [r7, #1]
 80104a6:	702b      	strb	r3, [r5, #0]
 80104a8:	2e00      	cmp	r6, #0
 80104aa:	d03a      	beq.n	8010522 <ucdr_deserialize_int16_t+0xca>
 80104ac:	783b      	ldrb	r3, [r7, #0]
 80104ae:	706b      	strb	r3, [r5, #1]
 80104b0:	6923      	ldr	r3, [r4, #16]
 80104b2:	2102      	movs	r1, #2
 80104b4:	68a2      	ldr	r2, [r4, #8]
 80104b6:	3302      	adds	r3, #2
 80104b8:	7da0      	ldrb	r0, [r4, #22]
 80104ba:	444a      	add	r2, r9
 80104bc:	7561      	strb	r1, [r4, #21]
 80104be:	1b9b      	subs	r3, r3, r6
 80104c0:	f080 0001 	eor.w	r0, r0, #1
 80104c4:	60a2      	str	r2, [r4, #8]
 80104c6:	6123      	str	r3, [r4, #16]
 80104c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104cc:	2102      	movs	r1, #2
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 f96a 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 80104d4:	b180      	cbz	r0, 80104f8 <ucdr_deserialize_int16_t+0xa0>
 80104d6:	7d23      	ldrb	r3, [r4, #20]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	68a3      	ldr	r3, [r4, #8]
 80104dc:	d011      	beq.n	8010502 <ucdr_deserialize_int16_t+0xaa>
 80104de:	785b      	ldrb	r3, [r3, #1]
 80104e0:	702b      	strb	r3, [r5, #0]
 80104e2:	68a3      	ldr	r3, [r4, #8]
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	706b      	strb	r3, [r5, #1]
 80104e8:	2102      	movs	r1, #2
 80104ea:	68a2      	ldr	r2, [r4, #8]
 80104ec:	6923      	ldr	r3, [r4, #16]
 80104ee:	440a      	add	r2, r1
 80104f0:	7561      	strb	r1, [r4, #21]
 80104f2:	440b      	add	r3, r1
 80104f4:	60a2      	str	r2, [r4, #8]
 80104f6:	6123      	str	r3, [r4, #16]
 80104f8:	7da0      	ldrb	r0, [r4, #22]
 80104fa:	f080 0001 	eor.w	r0, r0, #1
 80104fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010502:	881b      	ldrh	r3, [r3, #0]
 8010504:	802b      	strh	r3, [r5, #0]
 8010506:	e7ef      	b.n	80104e8 <ucdr_deserialize_int16_t+0x90>
 8010508:	68a2      	ldr	r2, [r4, #8]
 801050a:	6923      	ldr	r3, [r4, #16]
 801050c:	1b92      	subs	r2, r2, r6
 801050e:	7da0      	ldrb	r0, [r4, #22]
 8010510:	1b9b      	subs	r3, r3, r6
 8010512:	f884 8015 	strb.w	r8, [r4, #21]
 8010516:	f080 0001 	eor.w	r0, r0, #1
 801051a:	60a2      	str	r2, [r4, #8]
 801051c:	6123      	str	r3, [r4, #16]
 801051e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010522:	68a3      	ldr	r3, [r4, #8]
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	706b      	strb	r3, [r5, #1]
 8010528:	e7c2      	b.n	80104b0 <ucdr_deserialize_int16_t+0x58>
 801052a:	4639      	mov	r1, r7
 801052c:	4632      	mov	r2, r6
 801052e:	4628      	mov	r0, r5
 8010530:	f007 fe69 	bl	8018206 <memcpy>
 8010534:	464a      	mov	r2, r9
 8010536:	19a8      	adds	r0, r5, r6
 8010538:	68a1      	ldr	r1, [r4, #8]
 801053a:	f007 fe64 	bl	8018206 <memcpy>
 801053e:	e7b7      	b.n	80104b0 <ucdr_deserialize_int16_t+0x58>

08010540 <ucdr_serialize_int32_t>:
 8010540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010544:	b082      	sub	sp, #8
 8010546:	4604      	mov	r4, r0
 8010548:	9101      	str	r1, [sp, #4]
 801054a:	2104      	movs	r1, #4
 801054c:	f000 f980 	bl	8010850 <ucdr_buffer_alignment>
 8010550:	4601      	mov	r1, r0
 8010552:	4620      	mov	r0, r4
 8010554:	7d67      	ldrb	r7, [r4, #21]
 8010556:	f000 f9c3 	bl	80108e0 <ucdr_advance_buffer>
 801055a:	2104      	movs	r1, #4
 801055c:	4620      	mov	r0, r4
 801055e:	f000 f917 	bl	8010790 <ucdr_check_buffer_available_for>
 8010562:	2800      	cmp	r0, #0
 8010564:	d139      	bne.n	80105da <ucdr_serialize_int32_t+0x9a>
 8010566:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801056a:	42ab      	cmp	r3, r5
 801056c:	d930      	bls.n	80105d0 <ucdr_serialize_int32_t+0x90>
 801056e:	1b5e      	subs	r6, r3, r5
 8010570:	60a3      	str	r3, [r4, #8]
 8010572:	6923      	ldr	r3, [r4, #16]
 8010574:	4620      	mov	r0, r4
 8010576:	f1c6 0804 	rsb	r8, r6, #4
 801057a:	4433      	add	r3, r6
 801057c:	4641      	mov	r1, r8
 801057e:	6123      	str	r3, [r4, #16]
 8010580:	f000 f912 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 8010584:	2800      	cmp	r0, #0
 8010586:	d04c      	beq.n	8010622 <ucdr_serialize_int32_t+0xe2>
 8010588:	7d23      	ldrb	r3, [r4, #20]
 801058a:	2b01      	cmp	r3, #1
 801058c:	d063      	beq.n	8010656 <ucdr_serialize_int32_t+0x116>
 801058e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010592:	702b      	strb	r3, [r5, #0]
 8010594:	2e00      	cmp	r6, #0
 8010596:	d051      	beq.n	801063c <ucdr_serialize_int32_t+0xfc>
 8010598:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801059c:	2e01      	cmp	r6, #1
 801059e:	706b      	strb	r3, [r5, #1]
 80105a0:	d050      	beq.n	8010644 <ucdr_serialize_int32_t+0x104>
 80105a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80105a6:	2e02      	cmp	r6, #2
 80105a8:	70ab      	strb	r3, [r5, #2]
 80105aa:	d04f      	beq.n	801064c <ucdr_serialize_int32_t+0x10c>
 80105ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80105b0:	70eb      	strb	r3, [r5, #3]
 80105b2:	6923      	ldr	r3, [r4, #16]
 80105b4:	2104      	movs	r1, #4
 80105b6:	68a2      	ldr	r2, [r4, #8]
 80105b8:	3304      	adds	r3, #4
 80105ba:	7da0      	ldrb	r0, [r4, #22]
 80105bc:	4442      	add	r2, r8
 80105be:	7561      	strb	r1, [r4, #21]
 80105c0:	1b9e      	subs	r6, r3, r6
 80105c2:	f080 0001 	eor.w	r0, r0, #1
 80105c6:	60a2      	str	r2, [r4, #8]
 80105c8:	6126      	str	r6, [r4, #16]
 80105ca:	b002      	add	sp, #8
 80105cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d0:	2104      	movs	r1, #4
 80105d2:	4620      	mov	r0, r4
 80105d4:	f000 f8e8 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 80105d8:	b1d0      	cbz	r0, 8010610 <ucdr_serialize_int32_t+0xd0>
 80105da:	7d23      	ldrb	r3, [r4, #20]
 80105dc:	2b01      	cmp	r3, #1
 80105de:	68a3      	ldr	r3, [r4, #8]
 80105e0:	d01c      	beq.n	801061c <ucdr_serialize_int32_t+0xdc>
 80105e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80105e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80105ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80105ee:	7018      	strb	r0, [r3, #0]
 80105f0:	68a3      	ldr	r3, [r4, #8]
 80105f2:	705a      	strb	r2, [r3, #1]
 80105f4:	68a3      	ldr	r3, [r4, #8]
 80105f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80105fa:	7099      	strb	r1, [r3, #2]
 80105fc:	68a3      	ldr	r3, [r4, #8]
 80105fe:	70da      	strb	r2, [r3, #3]
 8010600:	2104      	movs	r1, #4
 8010602:	68a2      	ldr	r2, [r4, #8]
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	440a      	add	r2, r1
 8010608:	7561      	strb	r1, [r4, #21]
 801060a:	440b      	add	r3, r1
 801060c:	60a2      	str	r2, [r4, #8]
 801060e:	6123      	str	r3, [r4, #16]
 8010610:	7da0      	ldrb	r0, [r4, #22]
 8010612:	f080 0001 	eor.w	r0, r0, #1
 8010616:	b002      	add	sp, #8
 8010618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801061c:	9a01      	ldr	r2, [sp, #4]
 801061e:	601a      	str	r2, [r3, #0]
 8010620:	e7ee      	b.n	8010600 <ucdr_serialize_int32_t+0xc0>
 8010622:	68a2      	ldr	r2, [r4, #8]
 8010624:	6923      	ldr	r3, [r4, #16]
 8010626:	7da0      	ldrb	r0, [r4, #22]
 8010628:	1b92      	subs	r2, r2, r6
 801062a:	1b9b      	subs	r3, r3, r6
 801062c:	7567      	strb	r7, [r4, #21]
 801062e:	f080 0001 	eor.w	r0, r0, #1
 8010632:	60a2      	str	r2, [r4, #8]
 8010634:	6123      	str	r3, [r4, #16]
 8010636:	b002      	add	sp, #8
 8010638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801063c:	68a3      	ldr	r3, [r4, #8]
 801063e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010642:	701a      	strb	r2, [r3, #0]
 8010644:	68a3      	ldr	r3, [r4, #8]
 8010646:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801064a:	701a      	strb	r2, [r3, #0]
 801064c:	68a3      	ldr	r3, [r4, #8]
 801064e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010652:	701a      	strb	r2, [r3, #0]
 8010654:	e7ad      	b.n	80105b2 <ucdr_serialize_int32_t+0x72>
 8010656:	4628      	mov	r0, r5
 8010658:	ad01      	add	r5, sp, #4
 801065a:	4632      	mov	r2, r6
 801065c:	4629      	mov	r1, r5
 801065e:	f007 fdd2 	bl	8018206 <memcpy>
 8010662:	4642      	mov	r2, r8
 8010664:	19a9      	adds	r1, r5, r6
 8010666:	68a0      	ldr	r0, [r4, #8]
 8010668:	f007 fdcd 	bl	8018206 <memcpy>
 801066c:	e7a1      	b.n	80105b2 <ucdr_serialize_int32_t+0x72>
 801066e:	bf00      	nop

08010670 <ucdr_deserialize_int32_t>:
 8010670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010674:	4604      	mov	r4, r0
 8010676:	460d      	mov	r5, r1
 8010678:	2104      	movs	r1, #4
 801067a:	f000 f8e9 	bl	8010850 <ucdr_buffer_alignment>
 801067e:	4601      	mov	r1, r0
 8010680:	4620      	mov	r0, r4
 8010682:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010686:	f000 f92b 	bl	80108e0 <ucdr_advance_buffer>
 801068a:	2104      	movs	r1, #4
 801068c:	4620      	mov	r0, r4
 801068e:	f000 f87f 	bl	8010790 <ucdr_check_buffer_available_for>
 8010692:	2800      	cmp	r0, #0
 8010694:	d138      	bne.n	8010708 <ucdr_deserialize_int32_t+0x98>
 8010696:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801069a:	42b7      	cmp	r7, r6
 801069c:	d92f      	bls.n	80106fe <ucdr_deserialize_int32_t+0x8e>
 801069e:	6923      	ldr	r3, [r4, #16]
 80106a0:	4620      	mov	r0, r4
 80106a2:	60a7      	str	r7, [r4, #8]
 80106a4:	1bbf      	subs	r7, r7, r6
 80106a6:	443b      	add	r3, r7
 80106a8:	f1c7 0904 	rsb	r9, r7, #4
 80106ac:	6123      	str	r3, [r4, #16]
 80106ae:	4649      	mov	r1, r9
 80106b0:	f000 f87a 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d046      	beq.n	8010746 <ucdr_deserialize_int32_t+0xd6>
 80106b8:	7d23      	ldrb	r3, [r4, #20]
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d05c      	beq.n	8010778 <ucdr_deserialize_int32_t+0x108>
 80106be:	78f3      	ldrb	r3, [r6, #3]
 80106c0:	702b      	strb	r3, [r5, #0]
 80106c2:	2f00      	cmp	r7, #0
 80106c4:	d04c      	beq.n	8010760 <ucdr_deserialize_int32_t+0xf0>
 80106c6:	78b3      	ldrb	r3, [r6, #2]
 80106c8:	2f01      	cmp	r7, #1
 80106ca:	706b      	strb	r3, [r5, #1]
 80106cc:	f105 0302 	add.w	r3, r5, #2
 80106d0:	d04a      	beq.n	8010768 <ucdr_deserialize_int32_t+0xf8>
 80106d2:	7873      	ldrb	r3, [r6, #1]
 80106d4:	2f02      	cmp	r7, #2
 80106d6:	70ab      	strb	r3, [r5, #2]
 80106d8:	f105 0303 	add.w	r3, r5, #3
 80106dc:	d048      	beq.n	8010770 <ucdr_deserialize_int32_t+0x100>
 80106de:	7833      	ldrb	r3, [r6, #0]
 80106e0:	70eb      	strb	r3, [r5, #3]
 80106e2:	6923      	ldr	r3, [r4, #16]
 80106e4:	2104      	movs	r1, #4
 80106e6:	68a2      	ldr	r2, [r4, #8]
 80106e8:	3304      	adds	r3, #4
 80106ea:	7da0      	ldrb	r0, [r4, #22]
 80106ec:	444a      	add	r2, r9
 80106ee:	7561      	strb	r1, [r4, #21]
 80106f0:	1bdb      	subs	r3, r3, r7
 80106f2:	f080 0001 	eor.w	r0, r0, #1
 80106f6:	60a2      	str	r2, [r4, #8]
 80106f8:	6123      	str	r3, [r4, #16]
 80106fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106fe:	2104      	movs	r1, #4
 8010700:	4620      	mov	r0, r4
 8010702:	f000 f851 	bl	80107a8 <ucdr_check_final_buffer_behavior>
 8010706:	b1b0      	cbz	r0, 8010736 <ucdr_deserialize_int32_t+0xc6>
 8010708:	7d23      	ldrb	r3, [r4, #20]
 801070a:	2b01      	cmp	r3, #1
 801070c:	68a3      	ldr	r3, [r4, #8]
 801070e:	d017      	beq.n	8010740 <ucdr_deserialize_int32_t+0xd0>
 8010710:	78db      	ldrb	r3, [r3, #3]
 8010712:	702b      	strb	r3, [r5, #0]
 8010714:	68a3      	ldr	r3, [r4, #8]
 8010716:	789b      	ldrb	r3, [r3, #2]
 8010718:	706b      	strb	r3, [r5, #1]
 801071a:	68a3      	ldr	r3, [r4, #8]
 801071c:	785b      	ldrb	r3, [r3, #1]
 801071e:	70ab      	strb	r3, [r5, #2]
 8010720:	68a3      	ldr	r3, [r4, #8]
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	70eb      	strb	r3, [r5, #3]
 8010726:	2104      	movs	r1, #4
 8010728:	68a2      	ldr	r2, [r4, #8]
 801072a:	6923      	ldr	r3, [r4, #16]
 801072c:	440a      	add	r2, r1
 801072e:	7561      	strb	r1, [r4, #21]
 8010730:	440b      	add	r3, r1
 8010732:	60a2      	str	r2, [r4, #8]
 8010734:	6123      	str	r3, [r4, #16]
 8010736:	7da0      	ldrb	r0, [r4, #22]
 8010738:	f080 0001 	eor.w	r0, r0, #1
 801073c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	602b      	str	r3, [r5, #0]
 8010744:	e7ef      	b.n	8010726 <ucdr_deserialize_int32_t+0xb6>
 8010746:	68a2      	ldr	r2, [r4, #8]
 8010748:	6923      	ldr	r3, [r4, #16]
 801074a:	1bd2      	subs	r2, r2, r7
 801074c:	7da0      	ldrb	r0, [r4, #22]
 801074e:	1bdb      	subs	r3, r3, r7
 8010750:	f884 8015 	strb.w	r8, [r4, #21]
 8010754:	f080 0001 	eor.w	r0, r0, #1
 8010758:	60a2      	str	r2, [r4, #8]
 801075a:	6123      	str	r3, [r4, #16]
 801075c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010760:	68a3      	ldr	r3, [r4, #8]
 8010762:	789b      	ldrb	r3, [r3, #2]
 8010764:	706b      	strb	r3, [r5, #1]
 8010766:	1cab      	adds	r3, r5, #2
 8010768:	68a2      	ldr	r2, [r4, #8]
 801076a:	7852      	ldrb	r2, [r2, #1]
 801076c:	f803 2b01 	strb.w	r2, [r3], #1
 8010770:	68a2      	ldr	r2, [r4, #8]
 8010772:	7812      	ldrb	r2, [r2, #0]
 8010774:	701a      	strb	r2, [r3, #0]
 8010776:	e7b4      	b.n	80106e2 <ucdr_deserialize_int32_t+0x72>
 8010778:	4631      	mov	r1, r6
 801077a:	463a      	mov	r2, r7
 801077c:	4628      	mov	r0, r5
 801077e:	f007 fd42 	bl	8018206 <memcpy>
 8010782:	464a      	mov	r2, r9
 8010784:	19e8      	adds	r0, r5, r7
 8010786:	68a1      	ldr	r1, [r4, #8]
 8010788:	f007 fd3d 	bl	8018206 <memcpy>
 801078c:	e7a9      	b.n	80106e2 <ucdr_deserialize_int32_t+0x72>
 801078e:	bf00      	nop

08010790 <ucdr_check_buffer_available_for>:
 8010790:	7d83      	ldrb	r3, [r0, #22]
 8010792:	b93b      	cbnz	r3, 80107a4 <ucdr_check_buffer_available_for+0x14>
 8010794:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010798:	4419      	add	r1, r3
 801079a:	4288      	cmp	r0, r1
 801079c:	bf34      	ite	cc
 801079e:	2000      	movcc	r0, #0
 80107a0:	2001      	movcs	r0, #1
 80107a2:	4770      	bx	lr
 80107a4:	2000      	movs	r0, #0
 80107a6:	4770      	bx	lr

080107a8 <ucdr_check_final_buffer_behavior>:
 80107a8:	7d83      	ldrb	r3, [r0, #22]
 80107aa:	b943      	cbnz	r3, 80107be <ucdr_check_final_buffer_behavior+0x16>
 80107ac:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80107b0:	b510      	push	{r4, lr}
 80107b2:	4291      	cmp	r1, r2
 80107b4:	4604      	mov	r4, r0
 80107b6:	d205      	bcs.n	80107c4 <ucdr_check_final_buffer_behavior+0x1c>
 80107b8:	2301      	movs	r3, #1
 80107ba:	4618      	mov	r0, r3
 80107bc:	bd10      	pop	{r4, pc}
 80107be:	2300      	movs	r3, #0
 80107c0:	4618      	mov	r0, r3
 80107c2:	4770      	bx	lr
 80107c4:	6982      	ldr	r2, [r0, #24]
 80107c6:	b13a      	cbz	r2, 80107d8 <ucdr_check_final_buffer_behavior+0x30>
 80107c8:	69c1      	ldr	r1, [r0, #28]
 80107ca:	4790      	blx	r2
 80107cc:	f080 0301 	eor.w	r3, r0, #1
 80107d0:	75a0      	strb	r0, [r4, #22]
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	4618      	mov	r0, r3
 80107d6:	bd10      	pop	{r4, pc}
 80107d8:	2001      	movs	r0, #1
 80107da:	75a0      	strb	r0, [r4, #22]
 80107dc:	e7fa      	b.n	80107d4 <ucdr_check_final_buffer_behavior+0x2c>
 80107de:	bf00      	nop

080107e0 <ucdr_set_on_full_buffer_callback>:
 80107e0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop

080107e8 <ucdr_init_buffer_origin_offset_endian>:
 80107e8:	b410      	push	{r4}
 80107ea:	9c01      	ldr	r4, [sp, #4]
 80107ec:	440a      	add	r2, r1
 80107ee:	6001      	str	r1, [r0, #0]
 80107f0:	6042      	str	r2, [r0, #4]
 80107f2:	190a      	adds	r2, r1, r4
 80107f4:	441c      	add	r4, r3
 80107f6:	6082      	str	r2, [r0, #8]
 80107f8:	2200      	movs	r2, #0
 80107fa:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80107fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010802:	7542      	strb	r2, [r0, #21]
 8010804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010808:	7582      	strb	r2, [r0, #22]
 801080a:	7503      	strb	r3, [r0, #20]
 801080c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop

08010814 <ucdr_init_buffer_origin_offset>:
 8010814:	b510      	push	{r4, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	9c04      	ldr	r4, [sp, #16]
 801081a:	9400      	str	r4, [sp, #0]
 801081c:	2401      	movs	r4, #1
 801081e:	9401      	str	r4, [sp, #4]
 8010820:	f7ff ffe2 	bl	80107e8 <ucdr_init_buffer_origin_offset_endian>
 8010824:	b002      	add	sp, #8
 8010826:	bd10      	pop	{r4, pc}

08010828 <ucdr_init_buffer_origin>:
 8010828:	b510      	push	{r4, lr}
 801082a:	2400      	movs	r4, #0
 801082c:	b082      	sub	sp, #8
 801082e:	9400      	str	r4, [sp, #0]
 8010830:	f7ff fff0 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8010834:	b002      	add	sp, #8
 8010836:	bd10      	pop	{r4, pc}

08010838 <ucdr_init_buffer>:
 8010838:	2300      	movs	r3, #0
 801083a:	f7ff bff5 	b.w	8010828 <ucdr_init_buffer_origin>
 801083e:	bf00      	nop

08010840 <ucdr_alignment>:
 8010840:	fbb0 f2f1 	udiv	r2, r0, r1
 8010844:	fb02 0011 	mls	r0, r2, r1, r0
 8010848:	1e4b      	subs	r3, r1, #1
 801084a:	1a08      	subs	r0, r1, r0
 801084c:	4018      	ands	r0, r3
 801084e:	4770      	bx	lr

08010850 <ucdr_buffer_alignment>:
 8010850:	7d43      	ldrb	r3, [r0, #21]
 8010852:	428b      	cmp	r3, r1
 8010854:	d209      	bcs.n	801086a <ucdr_buffer_alignment+0x1a>
 8010856:	6903      	ldr	r3, [r0, #16]
 8010858:	1e4a      	subs	r2, r1, #1
 801085a:	fbb3 f0f1 	udiv	r0, r3, r1
 801085e:	fb01 3010 	mls	r0, r1, r0, r3
 8010862:	1a09      	subs	r1, r1, r0
 8010864:	ea01 0002 	and.w	r0, r1, r2
 8010868:	4770      	bx	lr
 801086a:	2000      	movs	r0, #0
 801086c:	4770      	bx	lr
 801086e:	bf00      	nop

08010870 <ucdr_align_to>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	4604      	mov	r4, r0
 8010874:	460d      	mov	r5, r1
 8010876:	f7ff ffeb 	bl	8010850 <ucdr_buffer_alignment>
 801087a:	68a3      	ldr	r3, [r4, #8]
 801087c:	7565      	strb	r5, [r4, #21]
 801087e:	181a      	adds	r2, r3, r0
 8010880:	6923      	ldr	r3, [r4, #16]
 8010882:	4418      	add	r0, r3
 8010884:	6863      	ldr	r3, [r4, #4]
 8010886:	4293      	cmp	r3, r2
 8010888:	6120      	str	r0, [r4, #16]
 801088a:	bf28      	it	cs
 801088c:	4613      	movcs	r3, r2
 801088e:	60a3      	str	r3, [r4, #8]
 8010890:	bd38      	pop	{r3, r4, r5, pc}
 8010892:	bf00      	nop

08010894 <ucdr_buffer_length>:
 8010894:	6882      	ldr	r2, [r0, #8]
 8010896:	6800      	ldr	r0, [r0, #0]
 8010898:	1a10      	subs	r0, r2, r0
 801089a:	4770      	bx	lr

0801089c <ucdr_buffer_remaining>:
 801089c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80108a0:	1a10      	subs	r0, r2, r0
 80108a2:	4770      	bx	lr

080108a4 <ucdr_check_final_buffer_behavior_array>:
 80108a4:	b538      	push	{r3, r4, r5, lr}
 80108a6:	7d83      	ldrb	r3, [r0, #22]
 80108a8:	b9a3      	cbnz	r3, 80108d4 <ucdr_check_final_buffer_behavior_array+0x30>
 80108aa:	4604      	mov	r4, r0
 80108ac:	460d      	mov	r5, r1
 80108ae:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d300      	bcc.n	80108b8 <ucdr_check_final_buffer_behavior_array+0x14>
 80108b6:	b931      	cbnz	r1, 80108c6 <ucdr_check_final_buffer_behavior_array+0x22>
 80108b8:	4620      	mov	r0, r4
 80108ba:	f7ff ffef 	bl	801089c <ucdr_buffer_remaining>
 80108be:	42a8      	cmp	r0, r5
 80108c0:	bf28      	it	cs
 80108c2:	4628      	movcs	r0, r5
 80108c4:	bd38      	pop	{r3, r4, r5, pc}
 80108c6:	6983      	ldr	r3, [r0, #24]
 80108c8:	b133      	cbz	r3, 80108d8 <ucdr_check_final_buffer_behavior_array+0x34>
 80108ca:	69c1      	ldr	r1, [r0, #28]
 80108cc:	4798      	blx	r3
 80108ce:	75a0      	strb	r0, [r4, #22]
 80108d0:	2800      	cmp	r0, #0
 80108d2:	d0f1      	beq.n	80108b8 <ucdr_check_final_buffer_behavior_array+0x14>
 80108d4:	2000      	movs	r0, #0
 80108d6:	bd38      	pop	{r3, r4, r5, pc}
 80108d8:	2301      	movs	r3, #1
 80108da:	7583      	strb	r3, [r0, #22]
 80108dc:	e7fa      	b.n	80108d4 <ucdr_check_final_buffer_behavior_array+0x30>
 80108de:	bf00      	nop

080108e0 <ucdr_advance_buffer>:
 80108e0:	b538      	push	{r3, r4, r5, lr}
 80108e2:	4604      	mov	r4, r0
 80108e4:	460d      	mov	r5, r1
 80108e6:	f7ff ff53 	bl	8010790 <ucdr_check_buffer_available_for>
 80108ea:	b178      	cbz	r0, 801090c <ucdr_advance_buffer+0x2c>
 80108ec:	6923      	ldr	r3, [r4, #16]
 80108ee:	68a2      	ldr	r2, [r4, #8]
 80108f0:	442b      	add	r3, r5
 80108f2:	442a      	add	r2, r5
 80108f4:	6123      	str	r3, [r4, #16]
 80108f6:	2301      	movs	r3, #1
 80108f8:	60a2      	str	r2, [r4, #8]
 80108fa:	7563      	strb	r3, [r4, #21]
 80108fc:	bd38      	pop	{r3, r4, r5, pc}
 80108fe:	68a2      	ldr	r2, [r4, #8]
 8010900:	1a2d      	subs	r5, r5, r0
 8010902:	6923      	ldr	r3, [r4, #16]
 8010904:	4402      	add	r2, r0
 8010906:	4418      	add	r0, r3
 8010908:	60a2      	str	r2, [r4, #8]
 801090a:	6120      	str	r0, [r4, #16]
 801090c:	4629      	mov	r1, r5
 801090e:	2201      	movs	r2, #1
 8010910:	4620      	mov	r0, r4
 8010912:	f7ff ffc7 	bl	80108a4 <ucdr_check_final_buffer_behavior_array>
 8010916:	2800      	cmp	r0, #0
 8010918:	d1f1      	bne.n	80108fe <ucdr_advance_buffer+0x1e>
 801091a:	2301      	movs	r3, #1
 801091c:	7563      	strb	r3, [r4, #21]
 801091e:	bd38      	pop	{r3, r4, r5, pc}

08010920 <uxr_buffer_delete_entity>:
 8010920:	b510      	push	{r4, lr}
 8010922:	2300      	movs	r3, #0
 8010924:	b08e      	sub	sp, #56	@ 0x38
 8010926:	4604      	mov	r4, r0
 8010928:	9103      	str	r1, [sp, #12]
 801092a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801092e:	2303      	movs	r3, #3
 8010930:	2204      	movs	r2, #4
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	ab06      	add	r3, sp, #24
 8010936:	f001 f8c1 	bl	8011abc <uxr_prepare_stream_to_write_submessage>
 801093a:	b918      	cbnz	r0, 8010944 <uxr_buffer_delete_entity+0x24>
 801093c:	4604      	mov	r4, r0
 801093e:	4620      	mov	r0, r4
 8010940:	b00e      	add	sp, #56	@ 0x38
 8010942:	bd10      	pop	{r4, pc}
 8010944:	9902      	ldr	r1, [sp, #8]
 8010946:	aa05      	add	r2, sp, #20
 8010948:	4620      	mov	r0, r4
 801094a:	f001 f9f3 	bl	8011d34 <uxr_init_base_object_request>
 801094e:	4604      	mov	r4, r0
 8010950:	a905      	add	r1, sp, #20
 8010952:	a806      	add	r0, sp, #24
 8010954:	f002 fb5c 	bl	8013010 <uxr_serialize_DELETE_Payload>
 8010958:	4620      	mov	r0, r4
 801095a:	b00e      	add	sp, #56	@ 0x38
 801095c:	bd10      	pop	{r4, pc}
 801095e:	bf00      	nop

08010960 <uxr_common_create_entity>:
 8010960:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010964:	b510      	push	{r4, lr}
 8010966:	f1bc 0f01 	cmp.w	ip, #1
 801096a:	b08c      	sub	sp, #48	@ 0x30
 801096c:	4604      	mov	r4, r0
 801096e:	9202      	str	r2, [sp, #8]
 8010970:	bf0c      	ite	eq
 8010972:	f003 0201 	andeq.w	r2, r3, #1
 8010976:	2200      	movne	r2, #0
 8010978:	330e      	adds	r3, #14
 801097a:	9103      	str	r1, [sp, #12]
 801097c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010980:	441a      	add	r2, r3
 8010982:	ab04      	add	r3, sp, #16
 8010984:	9101      	str	r1, [sp, #4]
 8010986:	2101      	movs	r1, #1
 8010988:	b292      	uxth	r2, r2
 801098a:	9100      	str	r1, [sp, #0]
 801098c:	9903      	ldr	r1, [sp, #12]
 801098e:	f001 f895 	bl	8011abc <uxr_prepare_stream_to_write_submessage>
 8010992:	b918      	cbnz	r0, 801099c <uxr_common_create_entity+0x3c>
 8010994:	4604      	mov	r4, r0
 8010996:	4620      	mov	r0, r4
 8010998:	b00c      	add	sp, #48	@ 0x30
 801099a:	bd10      	pop	{r4, pc}
 801099c:	9902      	ldr	r1, [sp, #8]
 801099e:	4620      	mov	r0, r4
 80109a0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109a2:	f001 f9c7 	bl	8011d34 <uxr_init_base_object_request>
 80109a6:	4604      	mov	r4, r0
 80109a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80109aa:	a804      	add	r0, sp, #16
 80109ac:	f002 fa8a 	bl	8012ec4 <uxr_serialize_CREATE_Payload>
 80109b0:	4620      	mov	r0, r4
 80109b2:	b00c      	add	sp, #48	@ 0x30
 80109b4:	bd10      	pop	{r4, pc}
 80109b6:	bf00      	nop

080109b8 <uxr_buffer_create_participant_bin>:
 80109b8:	b570      	push	{r4, r5, r6, lr}
 80109ba:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80109be:	4605      	mov	r5, r0
 80109c0:	ac11      	add	r4, sp, #68	@ 0x44
 80109c2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80109c6:	2303      	movs	r3, #3
 80109c8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80109cc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80109d0:	7223      	strb	r3, [r4, #8]
 80109d2:	2300      	movs	r3, #0
 80109d4:	2201      	movs	r2, #1
 80109d6:	f88d 3014 	strb.w	r3, [sp, #20]
 80109da:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80109dc:	7122      	strb	r2, [r4, #4]
 80109de:	b1cb      	cbz	r3, 8010a14 <uxr_buffer_create_participant_bin+0x5c>
 80109e0:	f88d 201c 	strb.w	r2, [sp, #28]
 80109e4:	9308      	str	r3, [sp, #32]
 80109e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109ea:	a915      	add	r1, sp, #84	@ 0x54
 80109ec:	a809      	add	r0, sp, #36	@ 0x24
 80109ee:	f7ff ff23 	bl	8010838 <ucdr_init_buffer>
 80109f2:	a905      	add	r1, sp, #20
 80109f4:	a809      	add	r0, sp, #36	@ 0x24
 80109f6:	f001 ff3b 	bl	8012870 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80109fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109fc:	9600      	str	r6, [sp, #0]
 80109fe:	4628      	mov	r0, r5
 8010a00:	9401      	str	r4, [sp, #4]
 8010a02:	60e3      	str	r3, [r4, #12]
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010a0a:	f7ff ffa9 	bl	8010960 <uxr_common_create_entity>
 8010a0e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010a12:	bd70      	pop	{r4, r5, r6, pc}
 8010a14:	f88d 301c 	strb.w	r3, [sp, #28]
 8010a18:	e7e5      	b.n	80109e6 <uxr_buffer_create_participant_bin+0x2e>
 8010a1a:	bf00      	nop

08010a1c <uxr_buffer_create_topic_bin>:
 8010a1c:	b570      	push	{r4, r5, r6, lr}
 8010a1e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010a22:	4605      	mov	r5, r0
 8010a24:	4618      	mov	r0, r3
 8010a26:	9105      	str	r1, [sp, #20]
 8010a28:	a997      	add	r1, sp, #604	@ 0x25c
 8010a2a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010a2e:	ac13      	add	r4, sp, #76	@ 0x4c
 8010a30:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010a34:	2302      	movs	r3, #2
 8010a36:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010a3a:	f000 f8ed 	bl	8010c18 <uxr_object_id_to_raw>
 8010a3e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a44:	a917      	add	r1, sp, #92	@ 0x5c
 8010a46:	a80b      	add	r0, sp, #44	@ 0x2c
 8010a48:	9306      	str	r3, [sp, #24]
 8010a4a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010a4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a4e:	2303      	movs	r3, #3
 8010a50:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010a54:	2301      	movs	r3, #1
 8010a56:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	f88d 301c 	strb.w	r3, [sp, #28]
 8010a60:	f7ff feea 	bl	8010838 <ucdr_init_buffer>
 8010a64:	a906      	add	r1, sp, #24
 8010a66:	a80b      	add	r0, sp, #44	@ 0x2c
 8010a68:	f001 ff24 	bl	80128b4 <uxr_serialize_OBJK_Topic_Binary>
 8010a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a6e:	4628      	mov	r0, r5
 8010a70:	9600      	str	r6, [sp, #0]
 8010a72:	9316      	str	r3, [sp, #88]	@ 0x58
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	9401      	str	r4, [sp, #4]
 8010a78:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010a7c:	f7ff ff70 	bl	8010960 <uxr_common_create_entity>
 8010a80:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010a84:	bd70      	pop	{r4, r5, r6, pc}
 8010a86:	bf00      	nop

08010a88 <uxr_buffer_create_publisher_bin>:
 8010a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a8a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010a8e:	2603      	movs	r6, #3
 8010a90:	4605      	mov	r5, r0
 8010a92:	4618      	mov	r0, r3
 8010a94:	9105      	str	r1, [sp, #20]
 8010a96:	a992      	add	r1, sp, #584	@ 0x248
 8010a98:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010a9c:	ac0e      	add	r4, sp, #56	@ 0x38
 8010a9e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010aa2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010aa6:	f000 f8b7 	bl	8010c18 <uxr_object_id_to_raw>
 8010aaa:	2300      	movs	r3, #0
 8010aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ab0:	a912      	add	r1, sp, #72	@ 0x48
 8010ab2:	a806      	add	r0, sp, #24
 8010ab4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010ab8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010abc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010ac0:	f7ff feba 	bl	8010838 <ucdr_init_buffer>
 8010ac4:	a993      	add	r1, sp, #588	@ 0x24c
 8010ac6:	a806      	add	r0, sp, #24
 8010ac8:	f001 ffa8 	bl	8012a1c <uxr_serialize_OBJK_Publisher_Binary>
 8010acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ace:	4628      	mov	r0, r5
 8010ad0:	9700      	str	r7, [sp, #0]
 8010ad2:	9311      	str	r3, [sp, #68]	@ 0x44
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	9401      	str	r4, [sp, #4]
 8010ad8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010adc:	f7ff ff40 	bl	8010960 <uxr_common_create_entity>
 8010ae0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ae6:	bf00      	nop

08010ae8 <uxr_buffer_create_datawriter_bin>:
 8010ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aec:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010af0:	4606      	mov	r6, r0
 8010af2:	4618      	mov	r0, r3
 8010af4:	2703      	movs	r7, #3
 8010af6:	ac1d      	add	r4, sp, #116	@ 0x74
 8010af8:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010afc:	9105      	str	r1, [sp, #20]
 8010afe:	a9a1      	add	r1, sp, #644	@ 0x284
 8010b00:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010b04:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010b08:	2305      	movs	r3, #5
 8010b0a:	7123      	strb	r3, [r4, #4]
 8010b0c:	f000 f884 	bl	8010c18 <uxr_object_id_to_raw>
 8010b10:	a90e      	add	r1, sp, #56	@ 0x38
 8010b12:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010b14:	7227      	strb	r7, [r4, #8]
 8010b16:	f000 f87f 	bl	8010c18 <uxr_object_id_to_raw>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010b20:	3d00      	subs	r5, #0
 8010b22:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010b26:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010b2a:	bf18      	it	ne
 8010b2c:	2501      	movne	r5, #1
 8010b2e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010b32:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010b36:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010b3a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010b3e:	2301      	movs	r3, #1
 8010b40:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010b44:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010b48:	bb8a      	cbnz	r2, 8010bae <uxr_buffer_create_datawriter_bin+0xc6>
 8010b4a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010b4e:	f04f 0c13 	mov.w	ip, #19
 8010b52:	250b      	movs	r5, #11
 8010b54:	2221      	movs	r2, #33	@ 0x21
 8010b56:	2111      	movs	r1, #17
 8010b58:	2009      	movs	r0, #9
 8010b5a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010b5e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010b62:	b923      	cbnz	r3, 8010b6e <uxr_buffer_create_datawriter_bin+0x86>
 8010b64:	4672      	mov	r2, lr
 8010b66:	4661      	mov	r1, ip
 8010b68:	4628      	mov	r0, r5
 8010b6a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010b6e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d025      	beq.n	8010bc2 <uxr_buffer_create_datawriter_bin+0xda>
 8010b76:	2b03      	cmp	r3, #3
 8010b78:	d029      	beq.n	8010bce <uxr_buffer_create_datawriter_bin+0xe6>
 8010b7a:	b32b      	cbz	r3, 8010bc8 <uxr_buffer_create_datawriter_bin+0xe0>
 8010b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b80:	a921      	add	r1, sp, #132	@ 0x84
 8010b82:	a806      	add	r0, sp, #24
 8010b84:	f7ff fe58 	bl	8010838 <ucdr_init_buffer>
 8010b88:	a90e      	add	r1, sp, #56	@ 0x38
 8010b8a:	a806      	add	r0, sp, #24
 8010b8c:	f001 ffbc 	bl	8012b08 <uxr_serialize_OBJK_DataWriter_Binary>
 8010b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b92:	f8cd 8000 	str.w	r8, [sp]
 8010b96:	4630      	mov	r0, r6
 8010b98:	9401      	str	r4, [sp, #4]
 8010b9a:	60e3      	str	r3, [r4, #12]
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ba2:	f7ff fedd 	bl	8010960 <uxr_common_create_entity>
 8010ba6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bae:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010bb2:	f04f 0c12 	mov.w	ip, #18
 8010bb6:	250a      	movs	r5, #10
 8010bb8:	2220      	movs	r2, #32
 8010bba:	2110      	movs	r1, #16
 8010bbc:	2008      	movs	r0, #8
 8010bbe:	2702      	movs	r7, #2
 8010bc0:	e7cd      	b.n	8010b5e <uxr_buffer_create_datawriter_bin+0x76>
 8010bc2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010bc6:	e7d9      	b.n	8010b7c <uxr_buffer_create_datawriter_bin+0x94>
 8010bc8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010bcc:	e7d6      	b.n	8010b7c <uxr_buffer_create_datawriter_bin+0x94>
 8010bce:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010bd2:	e7d3      	b.n	8010b7c <uxr_buffer_create_datawriter_bin+0x94>

08010bd4 <uxr_object_id>:
 8010bd4:	b082      	sub	sp, #8
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	f88d 1006 	strb.w	r1, [sp, #6]
 8010bdc:	f360 030f 	bfi	r3, r0, #0, #16
 8010be0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010be4:	f362 431f 	bfi	r3, r2, #16, #16
 8010be8:	4618      	mov	r0, r3
 8010bea:	b002      	add	sp, #8
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop

08010bf0 <uxr_object_id_from_raw>:
 8010bf0:	7843      	ldrb	r3, [r0, #1]
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	7801      	ldrb	r1, [r0, #0]
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	091a      	lsrs	r2, r3, #4
 8010bfa:	f003 030f 	and.w	r3, r3, #15
 8010bfe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010c02:	f88d 3006 	strb.w	r3, [sp, #6]
 8010c06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010c0a:	f362 000f 	bfi	r0, r2, #0, #16
 8010c0e:	f363 401f 	bfi	r0, r3, #16, #16
 8010c12:	b002      	add	sp, #8
 8010c14:	4770      	bx	lr
 8010c16:	bf00      	nop

08010c18 <uxr_object_id_to_raw>:
 8010c18:	4602      	mov	r2, r0
 8010c1a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010c1e:	b082      	sub	sp, #8
 8010c20:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010c24:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010c28:	f881 c000 	strb.w	ip, [r1]
 8010c2c:	7048      	strb	r0, [r1, #1]
 8010c2e:	b002      	add	sp, #8
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop

08010c34 <on_get_fragmentation_info>:
 8010c34:	b500      	push	{lr}
 8010c36:	b08b      	sub	sp, #44	@ 0x2c
 8010c38:	4601      	mov	r1, r0
 8010c3a:	2204      	movs	r2, #4
 8010c3c:	a802      	add	r0, sp, #8
 8010c3e:	f7ff fdfb 	bl	8010838 <ucdr_init_buffer>
 8010c42:	f10d 0305 	add.w	r3, sp, #5
 8010c46:	f10d 0206 	add.w	r2, sp, #6
 8010c4a:	a901      	add	r1, sp, #4
 8010c4c:	a802      	add	r0, sp, #8
 8010c4e:	f001 f9fb 	bl	8012048 <uxr_read_submessage_header>
 8010c52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010c56:	2b0d      	cmp	r3, #13
 8010c58:	d003      	beq.n	8010c62 <on_get_fragmentation_info+0x2e>
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	b00b      	add	sp, #44	@ 0x2c
 8010c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010c66:	f013 0f02 	tst.w	r3, #2
 8010c6a:	bf14      	ite	ne
 8010c6c:	2002      	movne	r0, #2
 8010c6e:	2001      	moveq	r0, #1
 8010c70:	b00b      	add	sp, #44	@ 0x2c
 8010c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c76:	bf00      	nop

08010c78 <read_submessage_get_info>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	2500      	movs	r5, #0
 8010c7c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010c80:	460e      	mov	r6, r1
 8010c82:	4604      	mov	r4, r0
 8010c84:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010c88:	4629      	mov	r1, r5
 8010c8a:	a810      	add	r0, sp, #64	@ 0x40
 8010c8c:	9503      	str	r5, [sp, #12]
 8010c8e:	9504      	str	r5, [sp, #16]
 8010c90:	f007 f99a 	bl	8017fc8 <memset>
 8010c94:	a903      	add	r1, sp, #12
 8010c96:	4630      	mov	r0, r6
 8010c98:	f002 f9a4 	bl	8012fe4 <uxr_deserialize_GET_INFO_Payload>
 8010c9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010ca6:	f001 f83d 	bl	8011d24 <uxr_session_header_offset>
 8010caa:	462b      	mov	r3, r5
 8010cac:	220c      	movs	r2, #12
 8010cae:	a905      	add	r1, sp, #20
 8010cb0:	9000      	str	r0, [sp, #0]
 8010cb2:	a808      	add	r0, sp, #32
 8010cb4:	f7ff fdae 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8010cb8:	a910      	add	r1, sp, #64	@ 0x40
 8010cba:	a808      	add	r0, sp, #32
 8010cbc:	f002 fa06 	bl	80130cc <uxr_serialize_INFO_Payload>
 8010cc0:	9b08      	ldr	r3, [sp, #32]
 8010cc2:	462a      	mov	r2, r5
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	f000 ffd8 	bl	8011c7c <uxr_stamp_session_header>
 8010ccc:	a808      	add	r0, sp, #32
 8010cce:	f7ff fde1 	bl	8010894 <ucdr_buffer_length>
 8010cd2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	a905      	add	r1, sp, #20
 8010cd8:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010cdc:	47a0      	blx	r4
 8010cde:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010ce2:	bd70      	pop	{r4, r5, r6, pc}

08010ce4 <write_submessage_acknack.isra.0>:
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	b092      	sub	sp, #72	@ 0x48
 8010ce8:	4605      	mov	r5, r0
 8010cea:	460e      	mov	r6, r1
 8010cec:	4614      	mov	r4, r2
 8010cee:	f001 f819 	bl	8011d24 <uxr_session_header_offset>
 8010cf2:	a905      	add	r1, sp, #20
 8010cf4:	9000      	str	r0, [sp, #0]
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	a80a      	add	r0, sp, #40	@ 0x28
 8010cfa:	2211      	movs	r2, #17
 8010cfc:	f7ff fd8a 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8010d00:	2218      	movs	r2, #24
 8010d02:	2300      	movs	r3, #0
 8010d04:	210a      	movs	r1, #10
 8010d06:	fb02 5404 	mla	r4, r2, r4, r5
 8010d0a:	a80a      	add	r0, sp, #40	@ 0x28
 8010d0c:	2205      	movs	r2, #5
 8010d0e:	3450      	adds	r4, #80	@ 0x50
 8010d10:	f001 f980 	bl	8012014 <uxr_buffer_submessage_header>
 8010d14:	a903      	add	r1, sp, #12
 8010d16:	4620      	mov	r0, r4
 8010d18:	f005 f808 	bl	8015d2c <uxr_compute_acknack>
 8010d1c:	ba40      	rev16	r0, r0
 8010d1e:	a903      	add	r1, sp, #12
 8010d20:	f88d 6010 	strb.w	r6, [sp, #16]
 8010d24:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010d28:	a80a      	add	r0, sp, #40	@ 0x28
 8010d2a:	f002 fa41 	bl	80131b0 <uxr_serialize_ACKNACK_Payload>
 8010d2e:	2200      	movs	r2, #0
 8010d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d32:	4628      	mov	r0, r5
 8010d34:	4611      	mov	r1, r2
 8010d36:	f000 ffa1 	bl	8011c7c <uxr_stamp_session_header>
 8010d3a:	a80a      	add	r0, sp, #40	@ 0x28
 8010d3c:	f7ff fdaa 	bl	8010894 <ucdr_buffer_length>
 8010d40:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010d42:	4602      	mov	r2, r0
 8010d44:	a905      	add	r1, sp, #20
 8010d46:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010d4a:	47a0      	blx	r4
 8010d4c:	b012      	add	sp, #72	@ 0x48
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}

08010d50 <uxr_init_session>:
 8010d50:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010d88 <uxr_init_session+0x38>
 8010d54:	2300      	movs	r3, #0
 8010d56:	b510      	push	{r4, lr}
 8010d58:	4604      	mov	r4, r0
 8010d5a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010d5e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010d62:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010d66:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010d6a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010d6e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010d72:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010d76:	2181      	movs	r1, #129	@ 0x81
 8010d78:	f000 fee4 	bl	8011b44 <uxr_init_session_info>
 8010d7c:	f104 0008 	add.w	r0, r4, #8
 8010d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d84:	f001 b862 	b.w	8011e4c <uxr_init_stream_storage>
	...

08010d90 <uxr_set_status_callback>:
 8010d90:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop

08010d98 <uxr_set_topic_callback>:
 8010d98:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010d9c:	4770      	bx	lr
 8010d9e:	bf00      	nop

08010da0 <uxr_set_request_callback>:
 8010da0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop

08010da8 <uxr_set_reply_callback>:
 8010da8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop

08010db0 <uxr_create_output_best_effort_stream>:
 8010db0:	b510      	push	{r4, lr}
 8010db2:	4604      	mov	r4, r0
 8010db4:	b084      	sub	sp, #16
 8010db6:	e9cd 2100 	strd	r2, r1, [sp]
 8010dba:	f000 ffb3 	bl	8011d24 <uxr_session_header_offset>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	f104 0008 	add.w	r0, r4, #8
 8010dc4:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010dc8:	b004      	add	sp, #16
 8010dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dce:	f001 b883 	b.w	8011ed8 <uxr_add_output_best_effort_buffer>
 8010dd2:	bf00      	nop

08010dd4 <uxr_create_output_reliable_stream>:
 8010dd4:	b530      	push	{r4, r5, lr}
 8010dd6:	b089      	sub	sp, #36	@ 0x24
 8010dd8:	4604      	mov	r4, r0
 8010dda:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010dde:	9303      	str	r3, [sp, #12]
 8010de0:	f000 ffa0 	bl	8011d24 <uxr_session_header_offset>
 8010de4:	4605      	mov	r5, r0
 8010de6:	9905      	ldr	r1, [sp, #20]
 8010de8:	f104 0008 	add.w	r0, r4, #8
 8010dec:	9500      	str	r5, [sp, #0]
 8010dee:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010df2:	f001 f885 	bl	8011f00 <uxr_add_output_reliable_buffer>
 8010df6:	2200      	movs	r2, #0
 8010df8:	fa5f fc80 	uxtb.w	ip, r0
 8010dfc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8010e00:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010e04:	0e03      	lsrs	r3, r0, #24
 8010e06:	f36c 0207 	bfi	r2, ip, #0, #8
 8010e0a:	f364 220f 	bfi	r2, r4, #8, #8
 8010e0e:	f361 4217 	bfi	r2, r1, #16, #8
 8010e12:	f363 621f 	bfi	r2, r3, #24, #8
 8010e16:	4610      	mov	r0, r2
 8010e18:	b009      	add	sp, #36	@ 0x24
 8010e1a:	bd30      	pop	{r4, r5, pc}

08010e1c <uxr_create_input_best_effort_stream>:
 8010e1c:	b082      	sub	sp, #8
 8010e1e:	3008      	adds	r0, #8
 8010e20:	b002      	add	sp, #8
 8010e22:	f001 b887 	b.w	8011f34 <uxr_add_input_best_effort_buffer>
 8010e26:	bf00      	nop

08010e28 <uxr_create_input_reliable_stream>:
 8010e28:	b510      	push	{r4, lr}
 8010e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8010e5c <uxr_create_input_reliable_stream+0x34>)
 8010e2c:	b084      	sub	sp, #16
 8010e2e:	3008      	adds	r0, #8
 8010e30:	9400      	str	r4, [sp, #0]
 8010e32:	f001 f895 	bl	8011f60 <uxr_add_input_reliable_buffer>
 8010e36:	2200      	movs	r2, #0
 8010e38:	fa5f fe80 	uxtb.w	lr, r0
 8010e3c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8010e40:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010e44:	0e03      	lsrs	r3, r0, #24
 8010e46:	f36e 0207 	bfi	r2, lr, #0, #8
 8010e4a:	f36c 220f 	bfi	r2, ip, #8, #8
 8010e4e:	f361 4217 	bfi	r2, r1, #16, #8
 8010e52:	f363 621f 	bfi	r2, r3, #24, #8
 8010e56:	4610      	mov	r0, r2
 8010e58:	b004      	add	sp, #16
 8010e5a:	bd10      	pop	{r4, pc}
 8010e5c:	08010c35 	.word	0x08010c35

08010e60 <uxr_epoch_nanos>:
 8010e60:	b510      	push	{r4, lr}
 8010e62:	4604      	mov	r4, r0
 8010e64:	f001 f938 	bl	80120d8 <uxr_nanos>
 8010e68:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010e6c:	1ac0      	subs	r0, r0, r3
 8010e6e:	eb61 0102 	sbc.w	r1, r1, r2
 8010e72:	bd10      	pop	{r4, pc}

08010e74 <uxr_flash_output_streams>:
 8010e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e78:	7e03      	ldrb	r3, [r0, #24]
 8010e7a:	b084      	sub	sp, #16
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	b1fb      	cbz	r3, 8010ec0 <uxr_flash_output_streams+0x4c>
 8010e80:	f04f 0900 	mov.w	r9, #0
 8010e84:	f10d 0802 	add.w	r8, sp, #2
 8010e88:	af03      	add	r7, sp, #12
 8010e8a:	ae02      	add	r6, sp, #8
 8010e8c:	4648      	mov	r0, r9
 8010e8e:	2201      	movs	r2, #1
 8010e90:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010e94:	4611      	mov	r1, r2
 8010e96:	3508      	adds	r5, #8
 8010e98:	f000 ff7e 	bl	8011d98 <uxr_stream_id>
 8010e9c:	4684      	mov	ip, r0
 8010e9e:	4643      	mov	r3, r8
 8010ea0:	463a      	mov	r2, r7
 8010ea2:	4631      	mov	r1, r6
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	f8cd c004 	str.w	ip, [sp, #4]
 8010eaa:	f004 ffc9 	bl	8015e40 <uxr_prepare_best_effort_buffer_to_send>
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d13d      	bne.n	8010f2e <uxr_flash_output_streams+0xba>
 8010eb2:	f109 0901 	add.w	r9, r9, #1
 8010eb6:	7e23      	ldrb	r3, [r4, #24]
 8010eb8:	fa5f f089 	uxtb.w	r0, r9
 8010ebc:	4283      	cmp	r3, r0
 8010ebe:	d8e6      	bhi.n	8010e8e <uxr_flash_output_streams+0x1a>
 8010ec0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010ec4:	b383      	cbz	r3, 8010f28 <uxr_flash_output_streams+0xb4>
 8010ec6:	f04f 0900 	mov.w	r9, #0
 8010eca:	f10d 0802 	add.w	r8, sp, #2
 8010ece:	af03      	add	r7, sp, #12
 8010ed0:	ae02      	add	r6, sp, #8
 8010ed2:	4648      	mov	r0, r9
 8010ed4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010ed8:	2201      	movs	r2, #1
 8010eda:	2102      	movs	r1, #2
 8010edc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010ee0:	f000 ff5a 	bl	8011d98 <uxr_stream_id>
 8010ee4:	9001      	str	r0, [sp, #4]
 8010ee6:	3520      	adds	r5, #32
 8010ee8:	e00c      	b.n	8010f04 <uxr_flash_output_streams+0x90>
 8010eea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010eee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010ef2:	9b02      	ldr	r3, [sp, #8]
 8010ef4:	f000 fec2 	bl	8011c7c <uxr_stamp_session_header>
 8010ef8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010efa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010efe:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010f02:	47d0      	blx	sl
 8010f04:	4643      	mov	r3, r8
 8010f06:	463a      	mov	r2, r7
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f005 f9bc 	bl	8016288 <uxr_prepare_next_reliable_buffer_to_send>
 8010f10:	4603      	mov	r3, r0
 8010f12:	4620      	mov	r0, r4
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d1e8      	bne.n	8010eea <uxr_flash_output_streams+0x76>
 8010f18:	f109 0901 	add.w	r9, r9, #1
 8010f1c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010f20:	fa5f f089 	uxtb.w	r0, r9
 8010f24:	4283      	cmp	r3, r0
 8010f26:	d8d5      	bhi.n	8010ed4 <uxr_flash_output_streams+0x60>
 8010f28:	b004      	add	sp, #16
 8010f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f2e:	9b02      	ldr	r3, [sp, #8]
 8010f30:	4620      	mov	r0, r4
 8010f32:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010f36:	f109 0901 	add.w	r9, r9, #1
 8010f3a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010f3e:	f000 fe9d 	bl	8011c7c <uxr_stamp_session_header>
 8010f42:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f44:	9a03      	ldr	r2, [sp, #12]
 8010f46:	685d      	ldr	r5, [r3, #4]
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	9902      	ldr	r1, [sp, #8]
 8010f4c:	47a8      	blx	r5
 8010f4e:	7e23      	ldrb	r3, [r4, #24]
 8010f50:	fa5f f089 	uxtb.w	r0, r9
 8010f54:	4283      	cmp	r3, r0
 8010f56:	d89a      	bhi.n	8010e8e <uxr_flash_output_streams+0x1a>
 8010f58:	e7b2      	b.n	8010ec0 <uxr_flash_output_streams+0x4c>
 8010f5a:	bf00      	nop

08010f5c <read_submessage_info>:
 8010f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f60:	460d      	mov	r5, r1
 8010f62:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010f66:	4606      	mov	r6, r0
 8010f68:	4669      	mov	r1, sp
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	f001 ff4c 	bl	8012e08 <uxr_deserialize_BaseObjectReply>
 8010f70:	4604      	mov	r4, r0
 8010f72:	a902      	add	r1, sp, #8
 8010f74:	4628      	mov	r0, r5
 8010f76:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8010f7a:	f7fe fc99 	bl	800f8b0 <ucdr_deserialize_bool>
 8010f7e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010f82:	4004      	ands	r4, r0
 8010f84:	b2e4      	uxtb	r4, r4
 8010f86:	b95b      	cbnz	r3, 8010fa0 <read_submessage_info+0x44>
 8010f88:	a987      	add	r1, sp, #540	@ 0x21c
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	f7fe fc90 	bl	800f8b0 <ucdr_deserialize_bool>
 8010f90:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010f94:	4680      	mov	r8, r0
 8010f96:	b94b      	cbnz	r3, 8010fac <read_submessage_info+0x50>
 8010f98:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fa0:	a903      	add	r1, sp, #12
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	f001 fddc 	bl	8012b60 <uxr_deserialize_ObjectVariant>
 8010fa8:	4004      	ands	r4, r0
 8010faa:	e7ed      	b.n	8010f88 <read_submessage_info+0x2c>
 8010fac:	a988      	add	r1, sp, #544	@ 0x220
 8010fae:	4628      	mov	r0, r5
 8010fb0:	f7fe fcac 	bl	800f90c <ucdr_deserialize_uint8_t>
 8010fb4:	ea14 0f08 	tst.w	r4, r8
 8010fb8:	d0ee      	beq.n	8010f98 <read_submessage_info+0x3c>
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	d0ec      	beq.n	8010f98 <read_submessage_info+0x3c>
 8010fbe:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010fc2:	2b0d      	cmp	r3, #13
 8010fc4:	d1e8      	bne.n	8010f98 <read_submessage_info+0x3c>
 8010fc6:	a98a      	add	r1, sp, #552	@ 0x228
 8010fc8:	4628      	mov	r0, r5
 8010fca:	f7ff fa45 	bl	8010458 <ucdr_deserialize_int16_t>
 8010fce:	b138      	cbz	r0, 8010fe0 <read_submessage_info+0x84>
 8010fd0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	dd06      	ble.n	8010fe6 <read_submessage_info+0x8a>
 8010fd8:	2f00      	cmp	r7, #0
 8010fda:	bf14      	ite	ne
 8010fdc:	2001      	movne	r0, #1
 8010fde:	2002      	moveq	r0, #2
 8010fe0:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8010fe4:	e7d8      	b.n	8010f98 <read_submessage_info+0x3c>
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	e7fa      	b.n	8010fe0 <read_submessage_info+0x84>
 8010fea:	bf00      	nop

08010fec <read_submessage_list>:
 8010fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	b097      	sub	sp, #92	@ 0x5c
 8010ff4:	460d      	mov	r5, r1
 8010ff6:	4ec1      	ldr	r6, [pc, #772]	@ (80112fc <read_submessage_list+0x310>)
 8010ff8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ffa:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010ffe:	aa0c      	add	r2, sp, #48	@ 0x30
 8011000:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011004:	4628      	mov	r0, r5
 8011006:	f001 f81f 	bl	8012048 <uxr_read_submessage_header>
 801100a:	2800      	cmp	r0, #0
 801100c:	f000 8142 	beq.w	8011294 <read_submessage_list+0x2a8>
 8011010:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8011014:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8011018:	3b02      	subs	r3, #2
 801101a:	2b0d      	cmp	r3, #13
 801101c:	d8ed      	bhi.n	8010ffa <read_submessage_list+0xe>
 801101e:	a101      	add	r1, pc, #4	@ (adr r1, 8011024 <read_submessage_list+0x38>)
 8011020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011024:	0801128b 	.word	0x0801128b
 8011028:	08010ffb 	.word	0x08010ffb
 801102c:	0801127b 	.word	0x0801127b
 8011030:	08011219 	.word	0x08011219
 8011034:	0801120f 	.word	0x0801120f
 8011038:	08010ffb 	.word	0x08010ffb
 801103c:	08010ffb 	.word	0x08010ffb
 8011040:	08011165 	.word	0x08011165
 8011044:	080110f7 	.word	0x080110f7
 8011048:	080110b7 	.word	0x080110b7
 801104c:	08010ffb 	.word	0x08010ffb
 8011050:	08010ffb 	.word	0x08010ffb
 8011054:	08010ffb 	.word	0x08010ffb
 8011058:	0801105d 	.word	0x0801105d
 801105c:	a910      	add	r1, sp, #64	@ 0x40
 801105e:	4628      	mov	r0, r5
 8011060:	f002 f908 	bl	8013274 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011064:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8011068:	f1b8 0f00 	cmp.w	r8, #0
 801106c:	f000 811a 	beq.w	80112a4 <read_submessage_list+0x2b8>
 8011070:	f001 f832 	bl	80120d8 <uxr_nanos>
 8011074:	4602      	mov	r2, r0
 8011076:	460b      	mov	r3, r1
 8011078:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801107c:	2100      	movs	r1, #0
 801107e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8011080:	9006      	str	r0, [sp, #24]
 8011082:	468c      	mov	ip, r1
 8011084:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8011086:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801108a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801108c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8011090:	468c      	mov	ip, r1
 8011092:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8011094:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8011098:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801109c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 80110a0:	fbc7 0106 	smlal	r0, r1, r7, r6
 80110a4:	e9cd 0100 	strd	r0, r1, [sp]
 80110a8:	4620      	mov	r0, r4
 80110aa:	47c0      	blx	r8
 80110ac:	f04f 0301 	mov.w	r3, #1
 80110b0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80110b4:	e7a1      	b.n	8010ffa <read_submessage_list+0xe>
 80110b6:	a910      	add	r1, sp, #64	@ 0x40
 80110b8:	4628      	mov	r0, r5
 80110ba:	f002 f8b9 	bl	8013230 <uxr_deserialize_HEARTBEAT_Payload>
 80110be:	2100      	movs	r1, #0
 80110c0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80110c4:	f000 fe96 	bl	8011df4 <uxr_stream_id_from_raw>
 80110c8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80110cc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80110ce:	f104 0008 	add.w	r0, r4, #8
 80110d2:	4641      	mov	r1, r8
 80110d4:	f000 ff7c 	bl	8011fd0 <uxr_get_input_reliable_stream>
 80110d8:	2800      	cmp	r0, #0
 80110da:	d08e      	beq.n	8010ffa <read_submessage_list+0xe>
 80110dc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80110e0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80110e4:	f004 fe16 	bl	8015d14 <uxr_process_heartbeat>
 80110e8:	4642      	mov	r2, r8
 80110ea:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80110ee:	4620      	mov	r0, r4
 80110f0:	f7ff fdf8 	bl	8010ce4 <write_submessage_acknack.isra.0>
 80110f4:	e781      	b.n	8010ffa <read_submessage_list+0xe>
 80110f6:	a910      	add	r1, sp, #64	@ 0x40
 80110f8:	4628      	mov	r0, r5
 80110fa:	f002 f871 	bl	80131e0 <uxr_deserialize_ACKNACK_Payload>
 80110fe:	2100      	movs	r1, #0
 8011100:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011104:	f000 fe76 	bl	8011df4 <uxr_stream_id_from_raw>
 8011108:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801110c:	900d      	str	r0, [sp, #52]	@ 0x34
 801110e:	f104 0008 	add.w	r0, r4, #8
 8011112:	f000 ff47 	bl	8011fa4 <uxr_get_output_reliable_stream>
 8011116:	4680      	mov	r8, r0
 8011118:	2800      	cmp	r0, #0
 801111a:	f43f af6e 	beq.w	8010ffa <read_submessage_list+0xe>
 801111e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8011122:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011126:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801112a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801112e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011132:	b289      	uxth	r1, r1
 8011134:	f005 f950 	bl	80163d8 <uxr_process_acknack>
 8011138:	4640      	mov	r0, r8
 801113a:	f005 f911 	bl	8016360 <uxr_begin_output_nack_buffer_it>
 801113e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8011142:	e005      	b.n	8011150 <read_submessage_list+0x164>
 8011144:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011146:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801114a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801114e:	47c8      	blx	r9
 8011150:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011154:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011156:	4651      	mov	r1, sl
 8011158:	4640      	mov	r0, r8
 801115a:	f005 f903 	bl	8016364 <uxr_next_reliable_nack_buffer_to_send>
 801115e:	2800      	cmp	r0, #0
 8011160:	d1f0      	bne.n	8011144 <read_submessage_list+0x158>
 8011162:	e74a      	b.n	8010ffa <read_submessage_list+0xe>
 8011164:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011168:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801116c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8011170:	4628      	mov	r0, r5
 8011172:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8011176:	4651      	mov	r1, sl
 8011178:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801117c:	f1a8 0804 	sub.w	r8, r8, #4
 8011180:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8011184:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8011188:	fa1f f888 	uxth.w	r8, r8
 801118c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011190:	f009 090e 	and.w	r9, r9, #14
 8011194:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8011198:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801119c:	f001 fd82 	bl	8012ca4 <uxr_deserialize_BaseObjectRequest>
 80111a0:	4650      	mov	r0, sl
 80111a2:	a90f      	add	r1, sp, #60	@ 0x3c
 80111a4:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80111a8:	f000 fde4 	bl	8011d74 <uxr_parse_base_object_request>
 80111ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80111ae:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80111b2:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80111b6:	9110      	str	r1, [sp, #64]	@ 0x40
 80111b8:	f1bb 0f00 	cmp.w	fp, #0
 80111bc:	d006      	beq.n	80111cc <read_submessage_list+0x1e0>
 80111be:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80111c2:	4652      	mov	r2, sl
 80111c4:	4620      	mov	r0, r4
 80111c6:	9300      	str	r3, [sp, #0]
 80111c8:	2300      	movs	r3, #0
 80111ca:	47d8      	blx	fp
 80111cc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80111ce:	b182      	cbz	r2, 80111f2 <read_submessage_list+0x206>
 80111d0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80111d2:	f04f 0c00 	mov.w	ip, #0
 80111d6:	3902      	subs	r1, #2
 80111d8:	e003      	b.n	80111e2 <read_submessage_list+0x1f6>
 80111da:	f10c 0c01 	add.w	ip, ip, #1
 80111de:	4594      	cmp	ip, r2
 80111e0:	d007      	beq.n	80111f2 <read_submessage_list+0x206>
 80111e2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80111e6:	4553      	cmp	r3, sl
 80111e8:	d1f7      	bne.n	80111da <read_submessage_list+0x1ee>
 80111ea:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80111ec:	2200      	movs	r2, #0
 80111ee:	f803 200c 	strb.w	r2, [r3, ip]
 80111f2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80111f6:	464b      	mov	r3, r9
 80111f8:	4642      	mov	r2, r8
 80111fa:	4620      	mov	r0, r4
 80111fc:	9102      	str	r1, [sp, #8]
 80111fe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011200:	9101      	str	r1, [sp, #4]
 8011202:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011204:	9100      	str	r1, [sp, #0]
 8011206:	4629      	mov	r1, r5
 8011208:	f005 f96e 	bl	80164e8 <read_submessage_format>
 801120c:	e6f5      	b.n	8010ffa <read_submessage_list+0xe>
 801120e:	4629      	mov	r1, r5
 8011210:	4620      	mov	r0, r4
 8011212:	f7ff fea3 	bl	8010f5c <read_submessage_info>
 8011216:	e6f0      	b.n	8010ffa <read_submessage_list+0xe>
 8011218:	2a00      	cmp	r2, #0
 801121a:	d03e      	beq.n	801129a <read_submessage_list+0x2ae>
 801121c:	a910      	add	r1, sp, #64	@ 0x40
 801121e:	4628      	mov	r0, r5
 8011220:	f001 ff36 	bl	8013090 <uxr_deserialize_STATUS_Payload>
 8011224:	a90e      	add	r1, sp, #56	@ 0x38
 8011226:	aa0d      	add	r2, sp, #52	@ 0x34
 8011228:	a810      	add	r0, sp, #64	@ 0x40
 801122a:	f000 fda3 	bl	8011d74 <uxr_parse_base_object_request>
 801122e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011230:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011234:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011238:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801123c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801123e:	f1ba 0f00 	cmp.w	sl, #0
 8011242:	d006      	beq.n	8011252 <read_submessage_list+0x266>
 8011244:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011248:	4642      	mov	r2, r8
 801124a:	4620      	mov	r0, r4
 801124c:	9300      	str	r3, [sp, #0]
 801124e:	464b      	mov	r3, r9
 8011250:	47d0      	blx	sl
 8011252:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011254:	2a00      	cmp	r2, #0
 8011256:	f43f aed0 	beq.w	8010ffa <read_submessage_list+0xe>
 801125a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801125c:	2100      	movs	r1, #0
 801125e:	3802      	subs	r0, #2
 8011260:	e003      	b.n	801126a <read_submessage_list+0x27e>
 8011262:	3101      	adds	r1, #1
 8011264:	4291      	cmp	r1, r2
 8011266:	f43f aec8 	beq.w	8010ffa <read_submessage_list+0xe>
 801126a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801126e:	4543      	cmp	r3, r8
 8011270:	d1f7      	bne.n	8011262 <read_submessage_list+0x276>
 8011272:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011274:	f803 9001 	strb.w	r9, [r3, r1]
 8011278:	e6bf      	b.n	8010ffa <read_submessage_list+0xe>
 801127a:	2a00      	cmp	r2, #0
 801127c:	f47f aebd 	bne.w	8010ffa <read_submessage_list+0xe>
 8011280:	4629      	mov	r1, r5
 8011282:	4620      	mov	r0, r4
 8011284:	f000 fcba 	bl	8011bfc <uxr_read_create_session_status>
 8011288:	e6b7      	b.n	8010ffa <read_submessage_list+0xe>
 801128a:	4629      	mov	r1, r5
 801128c:	4620      	mov	r0, r4
 801128e:	f7ff fcf3 	bl	8010c78 <read_submessage_get_info>
 8011292:	e6b2      	b.n	8010ffa <read_submessage_list+0xe>
 8011294:	b017      	add	sp, #92	@ 0x5c
 8011296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801129a:	4629      	mov	r1, r5
 801129c:	4620      	mov	r0, r4
 801129e:	f000 fcbb 	bl	8011c18 <uxr_read_delete_session_status>
 80112a2:	e6aa      	b.n	8010ffa <read_submessage_list+0xe>
 80112a4:	f000 ff18 	bl	80120d8 <uxr_nanos>
 80112a8:	4642      	mov	r2, r8
 80112aa:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80112ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80112ae:	fbc7 3206 	smlal	r3, r2, r7, r6
 80112b2:	1818      	adds	r0, r3, r0
 80112b4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80112b6:	eb42 0101 	adc.w	r1, r2, r1
 80112ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80112bc:	4642      	mov	r2, r8
 80112be:	fbc7 3206 	smlal	r3, r2, r7, r6
 80112c2:	469c      	mov	ip, r3
 80112c4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 80112c8:	fbc3 7806 	smlal	r7, r8, r3, r6
 80112cc:	4643      	mov	r3, r8
 80112ce:	eb1c 0c07 	adds.w	ip, ip, r7
 80112d2:	eb42 0203 	adc.w	r2, r2, r3
 80112d6:	ebb0 030c 	subs.w	r3, r0, ip
 80112da:	eb61 0202 	sbc.w	r2, r1, r2
 80112de:	2a00      	cmp	r2, #0
 80112e0:	db08      	blt.n	80112f4 <read_submessage_list+0x308>
 80112e2:	085b      	lsrs	r3, r3, #1
 80112e4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80112e8:	1052      	asrs	r2, r2, #1
 80112ea:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80112ee:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 80112f2:	e6db      	b.n	80110ac <read_submessage_list+0xc0>
 80112f4:	3301      	adds	r3, #1
 80112f6:	f142 0200 	adc.w	r2, r2, #0
 80112fa:	e7f2      	b.n	80112e2 <read_submessage_list+0x2f6>
 80112fc:	3b9aca00 	.word	0x3b9aca00

08011300 <listen_message_reliably>:
 8011300:	1e0b      	subs	r3, r1, #0
 8011302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011306:	bfb8      	it	lt
 8011308:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801130c:	b09d      	sub	sp, #116	@ 0x74
 801130e:	4680      	mov	r8, r0
 8011310:	9305      	str	r3, [sp, #20]
 8011312:	f000 fec5 	bl	80120a0 <uxr_millis>
 8011316:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801131a:	4681      	mov	r9, r0
 801131c:	2a00      	cmp	r2, #0
 801131e:	f000 809a 	beq.w	8011456 <listen_message_reliably+0x156>
 8011322:	2600      	movs	r6, #0
 8011324:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011328:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801132c:	460f      	mov	r7, r1
 801132e:	4630      	mov	r0, r6
 8011330:	9303      	str	r3, [sp, #12]
 8011332:	e00e      	b.n	8011352 <listen_message_reliably+0x52>
 8011334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011336:	3601      	adds	r6, #1
 8011338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801133a:	455a      	cmp	r2, fp
 801133c:	9903      	ldr	r1, [sp, #12]
 801133e:	b2f0      	uxtb	r0, r6
 8011340:	eb73 0101 	sbcs.w	r1, r3, r1
 8011344:	da01      	bge.n	801134a <listen_message_reliably+0x4a>
 8011346:	4693      	mov	fp, r2
 8011348:	9303      	str	r3, [sp, #12]
 801134a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801134e:	4283      	cmp	r3, r0
 8011350:	d95f      	bls.n	8011412 <listen_message_reliably+0x112>
 8011352:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011356:	2102      	movs	r1, #2
 8011358:	2201      	movs	r2, #1
 801135a:	00e4      	lsls	r4, r4, #3
 801135c:	f000 fd1c 	bl	8011d98 <uxr_stream_id>
 8011360:	4601      	mov	r1, r0
 8011362:	f104 0520 	add.w	r5, r4, #32
 8011366:	463b      	mov	r3, r7
 8011368:	464a      	mov	r2, r9
 801136a:	9109      	str	r1, [sp, #36]	@ 0x24
 801136c:	4445      	add	r5, r8
 801136e:	4628      	mov	r0, r5
 8011370:	f004 ffca 	bl	8016308 <uxr_update_output_stream_heartbeat_timestamp>
 8011374:	eb08 0304 	add.w	r3, r8, r4
 8011378:	2800      	cmp	r0, #0
 801137a:	d0db      	beq.n	8011334 <listen_message_reliably+0x34>
 801137c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8011380:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8011384:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011388:	4640      	mov	r0, r8
 801138a:	3501      	adds	r5, #1
 801138c:	4444      	add	r4, r8
 801138e:	9304      	str	r3, [sp, #16]
 8011390:	f000 fcc8 	bl	8011d24 <uxr_session_header_offset>
 8011394:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011398:	2300      	movs	r3, #0
 801139a:	2211      	movs	r2, #17
 801139c:	a90c      	add	r1, sp, #48	@ 0x30
 801139e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80113a2:	9000      	str	r0, [sp, #0]
 80113a4:	4650      	mov	r0, sl
 80113a6:	3601      	adds	r6, #1
 80113a8:	f7ff fa34 	bl	8010814 <ucdr_init_buffer_origin_offset>
 80113ac:	2300      	movs	r3, #0
 80113ae:	2205      	movs	r2, #5
 80113b0:	210b      	movs	r1, #11
 80113b2:	4650      	mov	r0, sl
 80113b4:	f000 fe2e 	bl	8012014 <uxr_buffer_submessage_header>
 80113b8:	2101      	movs	r1, #1
 80113ba:	8968      	ldrh	r0, [r5, #10]
 80113bc:	f005 f95e 	bl	801667c <uxr_seq_num_add>
 80113c0:	892b      	ldrh	r3, [r5, #8]
 80113c2:	4602      	mov	r2, r0
 80113c4:	a90a      	add	r1, sp, #40	@ 0x28
 80113c6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80113ca:	4650      	mov	r0, sl
 80113cc:	9b04      	ldr	r3, [sp, #16]
 80113ce:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80113d2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80113d6:	f001 ff17 	bl	8013208 <uxr_serialize_HEARTBEAT_Payload>
 80113da:	2200      	movs	r2, #0
 80113dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80113de:	4640      	mov	r0, r8
 80113e0:	4611      	mov	r1, r2
 80113e2:	f000 fc4b 	bl	8011c7c <uxr_stamp_session_header>
 80113e6:	4650      	mov	r0, sl
 80113e8:	f7ff fa54 	bl	8010894 <ucdr_buffer_length>
 80113ec:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80113f0:	4602      	mov	r2, r0
 80113f2:	a90c      	add	r1, sp, #48	@ 0x30
 80113f4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80113f8:	47a8      	blx	r5
 80113fa:	9903      	ldr	r1, [sp, #12]
 80113fc:	b2f0      	uxtb	r0, r6
 80113fe:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011402:	455a      	cmp	r2, fp
 8011404:	eb73 0101 	sbcs.w	r1, r3, r1
 8011408:	db9d      	blt.n	8011346 <listen_message_reliably+0x46>
 801140a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801140e:	4283      	cmp	r3, r0
 8011410:	d89f      	bhi.n	8011352 <listen_message_reliably+0x52>
 8011412:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011416:	9a03      	ldr	r2, [sp, #12]
 8011418:	429a      	cmp	r2, r3
 801141a:	bf08      	it	eq
 801141c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011420:	d019      	beq.n	8011456 <listen_message_reliably+0x156>
 8011422:	ebab 0309 	sub.w	r3, fp, r9
 8011426:	2b00      	cmp	r3, #0
 8011428:	9d05      	ldr	r5, [sp, #20]
 801142a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801142e:	aa08      	add	r2, sp, #32
 8011430:	bf08      	it	eq
 8011432:	2301      	moveq	r3, #1
 8011434:	a907      	add	r1, sp, #28
 8011436:	6884      	ldr	r4, [r0, #8]
 8011438:	429d      	cmp	r5, r3
 801143a:	6800      	ldr	r0, [r0, #0]
 801143c:	bfa8      	it	ge
 801143e:	461d      	movge	r5, r3
 8011440:	462b      	mov	r3, r5
 8011442:	47a0      	blx	r4
 8011444:	b948      	cbnz	r0, 801145a <listen_message_reliably+0x15a>
 8011446:	9b05      	ldr	r3, [sp, #20]
 8011448:	1b5b      	subs	r3, r3, r5
 801144a:	2b00      	cmp	r3, #0
 801144c:	9305      	str	r3, [sp, #20]
 801144e:	f73f af60 	bgt.w	8011312 <listen_message_reliably+0x12>
 8011452:	4604      	mov	r4, r0
 8011454:	e012      	b.n	801147c <listen_message_reliably+0x17c>
 8011456:	9b05      	ldr	r3, [sp, #20]
 8011458:	e7e5      	b.n	8011426 <listen_message_reliably+0x126>
 801145a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801145e:	4604      	mov	r4, r0
 8011460:	2500      	movs	r5, #0
 8011462:	a80c      	add	r0, sp, #48	@ 0x30
 8011464:	f7ff f9e8 	bl	8010838 <ucdr_init_buffer>
 8011468:	f10d 031a 	add.w	r3, sp, #26
 801146c:	aa06      	add	r2, sp, #24
 801146e:	a90c      	add	r1, sp, #48	@ 0x30
 8011470:	4640      	mov	r0, r8
 8011472:	f88d 5018 	strb.w	r5, [sp, #24]
 8011476:	f000 fc15 	bl	8011ca4 <uxr_read_session_header>
 801147a:	b918      	cbnz	r0, 8011484 <listen_message_reliably+0x184>
 801147c:	4620      	mov	r0, r4
 801147e:	b01d      	add	sp, #116	@ 0x74
 8011480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011484:	4629      	mov	r1, r5
 8011486:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801148a:	f000 fcb3 	bl	8011df4 <uxr_stream_id_from_raw>
 801148e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011492:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011496:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801149a:	2e01      	cmp	r6, #1
 801149c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80114a0:	d04b      	beq.n	801153a <listen_message_reliably+0x23a>
 80114a2:	2e02      	cmp	r6, #2
 80114a4:	d00f      	beq.n	80114c6 <listen_message_reliably+0x1c6>
 80114a6:	2e00      	cmp	r6, #0
 80114a8:	d1e8      	bne.n	801147c <listen_message_reliably+0x17c>
 80114aa:	4631      	mov	r1, r6
 80114ac:	4630      	mov	r0, r6
 80114ae:	f000 fca1 	bl	8011df4 <uxr_stream_id_from_raw>
 80114b2:	4602      	mov	r2, r0
 80114b4:	a90c      	add	r1, sp, #48	@ 0x30
 80114b6:	4640      	mov	r0, r8
 80114b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80114ba:	f7ff fd97 	bl	8010fec <read_submessage_list>
 80114be:	4620      	mov	r0, r4
 80114c0:	b01d      	add	sp, #116	@ 0x74
 80114c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c6:	4629      	mov	r1, r5
 80114c8:	f108 0008 	add.w	r0, r8, #8
 80114cc:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80114d0:	f000 fd7e 	bl	8011fd0 <uxr_get_input_reliable_stream>
 80114d4:	4607      	mov	r7, r0
 80114d6:	b338      	cbz	r0, 8011528 <listen_message_reliably+0x228>
 80114d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114da:	a80c      	add	r0, sp, #48	@ 0x30
 80114dc:	9203      	str	r2, [sp, #12]
 80114de:	f7ff f9dd 	bl	801089c <ucdr_buffer_remaining>
 80114e2:	4603      	mov	r3, r0
 80114e4:	f10d 0019 	add.w	r0, sp, #25
 80114e8:	9a03      	ldr	r2, [sp, #12]
 80114ea:	4651      	mov	r1, sl
 80114ec:	9000      	str	r0, [sp, #0]
 80114ee:	4638      	mov	r0, r7
 80114f0:	f004 fb14 	bl	8015b1c <uxr_receive_reliable_message>
 80114f4:	b1c0      	cbz	r0, 8011528 <listen_message_reliably+0x228>
 80114f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80114fa:	b393      	cbz	r3, 8011562 <listen_message_reliably+0x262>
 80114fc:	ae14      	add	r6, sp, #80	@ 0x50
 80114fe:	f04f 0a02 	mov.w	sl, #2
 8011502:	e00a      	b.n	801151a <listen_message_reliably+0x21a>
 8011504:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011508:	4631      	mov	r1, r6
 801150a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801150e:	4640      	mov	r0, r8
 8011510:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011514:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011516:	f7ff fd69 	bl	8010fec <read_submessage_list>
 801151a:	2204      	movs	r2, #4
 801151c:	4631      	mov	r1, r6
 801151e:	4638      	mov	r0, r7
 8011520:	f004 fb7e 	bl	8015c20 <uxr_next_input_reliable_buffer_available>
 8011524:	2800      	cmp	r0, #0
 8011526:	d1ed      	bne.n	8011504 <listen_message_reliably+0x204>
 8011528:	4640      	mov	r0, r8
 801152a:	462a      	mov	r2, r5
 801152c:	4649      	mov	r1, r9
 801152e:	f7ff fbd9 	bl	8010ce4 <write_submessage_acknack.isra.0>
 8011532:	4620      	mov	r0, r4
 8011534:	b01d      	add	sp, #116	@ 0x74
 8011536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153a:	4629      	mov	r1, r5
 801153c:	f108 0008 	add.w	r0, r8, #8
 8011540:	f000 fd3c 	bl	8011fbc <uxr_get_input_best_effort_stream>
 8011544:	2800      	cmp	r0, #0
 8011546:	d099      	beq.n	801147c <listen_message_reliably+0x17c>
 8011548:	4651      	mov	r1, sl
 801154a:	f004 fa5d 	bl	8015a08 <uxr_receive_best_effort_message>
 801154e:	2800      	cmp	r0, #0
 8011550:	d094      	beq.n	801147c <listen_message_reliably+0x17c>
 8011552:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011556:	a90c      	add	r1, sp, #48	@ 0x30
 8011558:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801155a:	4640      	mov	r0, r8
 801155c:	f7ff fd46 	bl	8010fec <read_submessage_list>
 8011560:	e78c      	b.n	801147c <listen_message_reliably+0x17c>
 8011562:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011566:	a90c      	add	r1, sp, #48	@ 0x30
 8011568:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801156a:	4640      	mov	r0, r8
 801156c:	f7ff fd3e 	bl	8010fec <read_submessage_list>
 8011570:	e7c4      	b.n	80114fc <listen_message_reliably+0x1fc>
 8011572:	bf00      	nop

08011574 <uxr_run_session_until_confirm_delivery>:
 8011574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011578:	4606      	mov	r6, r0
 801157a:	460d      	mov	r5, r1
 801157c:	f000 fd90 	bl	80120a0 <uxr_millis>
 8011580:	4607      	mov	r7, r0
 8011582:	4630      	mov	r0, r6
 8011584:	f106 0808 	add.w	r8, r6, #8
 8011588:	f7ff fc74 	bl	8010e74 <uxr_flash_output_streams>
 801158c:	2d00      	cmp	r5, #0
 801158e:	db10      	blt.n	80115b2 <uxr_run_session_until_confirm_delivery+0x3e>
 8011590:	462c      	mov	r4, r5
 8011592:	e006      	b.n	80115a2 <uxr_run_session_until_confirm_delivery+0x2e>
 8011594:	f7ff feb4 	bl	8011300 <listen_message_reliably>
 8011598:	f000 fd82 	bl	80120a0 <uxr_millis>
 801159c:	1bc3      	subs	r3, r0, r7
 801159e:	1aec      	subs	r4, r5, r3
 80115a0:	d407      	bmi.n	80115b2 <uxr_run_session_until_confirm_delivery+0x3e>
 80115a2:	4640      	mov	r0, r8
 80115a4:	f000 fd20 	bl	8011fe8 <uxr_output_streams_confirmed>
 80115a8:	4603      	mov	r3, r0
 80115aa:	4621      	mov	r1, r4
 80115ac:	4630      	mov	r0, r6
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d0f0      	beq.n	8011594 <uxr_run_session_until_confirm_delivery+0x20>
 80115b2:	4640      	mov	r0, r8
 80115b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115b8:	f000 bd16 	b.w	8011fe8 <uxr_output_streams_confirmed>

080115bc <uxr_run_session_until_all_status>:
 80115bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80115c4:	4606      	mov	r6, r0
 80115c6:	4688      	mov	r8, r1
 80115c8:	4692      	mov	sl, r2
 80115ca:	461f      	mov	r7, r3
 80115cc:	f7ff fc52 	bl	8010e74 <uxr_flash_output_streams>
 80115d0:	f1bb 0f00 	cmp.w	fp, #0
 80115d4:	d004      	beq.n	80115e0 <uxr_run_session_until_all_status+0x24>
 80115d6:	465a      	mov	r2, fp
 80115d8:	21ff      	movs	r1, #255	@ 0xff
 80115da:	4638      	mov	r0, r7
 80115dc:	f006 fcf4 	bl	8017fc8 <memset>
 80115e0:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80115e4:	1e7d      	subs	r5, r7, #1
 80115e6:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80115ea:	f000 fd59 	bl	80120a0 <uxr_millis>
 80115ee:	4641      	mov	r1, r8
 80115f0:	4681      	mov	r9, r0
 80115f2:	4630      	mov	r0, r6
 80115f4:	f7ff fe84 	bl	8011300 <listen_message_reliably>
 80115f8:	f000 fd52 	bl	80120a0 <uxr_millis>
 80115fc:	eba0 0009 	sub.w	r0, r0, r9
 8011600:	eba8 0100 	sub.w	r1, r8, r0
 8011604:	f1bb 0f00 	cmp.w	fp, #0
 8011608:	d029      	beq.n	801165e <uxr_run_session_until_all_status+0xa2>
 801160a:	46ae      	mov	lr, r5
 801160c:	f04f 0c00 	mov.w	ip, #0
 8011610:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8011614:	2cff      	cmp	r4, #255	@ 0xff
 8011616:	d015      	beq.n	8011644 <uxr_run_session_until_all_status+0x88>
 8011618:	f10c 0c01 	add.w	ip, ip, #1
 801161c:	45e3      	cmp	fp, ip
 801161e:	d8f7      	bhi.n	8011610 <uxr_run_session_until_all_status+0x54>
 8011620:	2300      	movs	r3, #0
 8011622:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011624:	e000      	b.n	8011628 <uxr_run_session_until_all_status+0x6c>
 8011626:	b158      	cbz	r0, 8011640 <uxr_run_session_until_all_status+0x84>
 8011628:	462b      	mov	r3, r5
 801162a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801162e:	3302      	adds	r3, #2
 8011630:	2801      	cmp	r0, #1
 8011632:	eba3 0307 	sub.w	r3, r3, r7
 8011636:	bf8c      	ite	hi
 8011638:	2000      	movhi	r0, #0
 801163a:	2001      	movls	r0, #1
 801163c:	459b      	cmp	fp, r3
 801163e:	d8f2      	bhi.n	8011626 <uxr_run_session_until_all_status+0x6a>
 8011640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011644:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8011648:	f10c 0c01 	add.w	ip, ip, #1
 801164c:	45dc      	cmp	ip, fp
 801164e:	d201      	bcs.n	8011654 <uxr_run_session_until_all_status+0x98>
 8011650:	2b00      	cmp	r3, #0
 8011652:	d0dd      	beq.n	8011610 <uxr_run_session_until_all_status+0x54>
 8011654:	2900      	cmp	r1, #0
 8011656:	dde3      	ble.n	8011620 <uxr_run_session_until_all_status+0x64>
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1ca      	bne.n	80115f2 <uxr_run_session_until_all_status+0x36>
 801165c:	e7e0      	b.n	8011620 <uxr_run_session_until_all_status+0x64>
 801165e:	2001      	movs	r0, #1
 8011660:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8011664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011668 <uxr_sync_session>:
 8011668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801166a:	b093      	sub	sp, #76	@ 0x4c
 801166c:	4604      	mov	r4, r0
 801166e:	460d      	mov	r5, r1
 8011670:	f000 fb58 	bl	8011d24 <uxr_session_header_offset>
 8011674:	2214      	movs	r2, #20
 8011676:	2300      	movs	r3, #0
 8011678:	9000      	str	r0, [sp, #0]
 801167a:	a80a      	add	r0, sp, #40	@ 0x28
 801167c:	eb0d 0102 	add.w	r1, sp, r2
 8011680:	f7ff f8c8 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8011684:	2300      	movs	r3, #0
 8011686:	2208      	movs	r2, #8
 8011688:	210e      	movs	r1, #14
 801168a:	a80a      	add	r0, sp, #40	@ 0x28
 801168c:	f000 fcc2 	bl	8012014 <uxr_buffer_submessage_header>
 8011690:	f000 fd22 	bl	80120d8 <uxr_nanos>
 8011694:	460e      	mov	r6, r1
 8011696:	4607      	mov	r7, r0
 8011698:	a31b      	add	r3, pc, #108	@ (adr r3, 8011708 <uxr_sync_session+0xa0>)
 801169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169e:	f7ee fe87 	bl	80003b0 <__aeabi_ldivmod>
 80116a2:	4631      	mov	r1, r6
 80116a4:	9003      	str	r0, [sp, #12]
 80116a6:	4638      	mov	r0, r7
 80116a8:	a317      	add	r3, pc, #92	@ (adr r3, 8011708 <uxr_sync_session+0xa0>)
 80116aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ae:	f7ee fe7f 	bl	80003b0 <__aeabi_ldivmod>
 80116b2:	a903      	add	r1, sp, #12
 80116b4:	a80a      	add	r0, sp, #40	@ 0x28
 80116b6:	9204      	str	r2, [sp, #16]
 80116b8:	f001 fdce 	bl	8013258 <uxr_serialize_TIMESTAMP_Payload>
 80116bc:	2200      	movs	r2, #0
 80116be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116c0:	4620      	mov	r0, r4
 80116c2:	4611      	mov	r1, r2
 80116c4:	f000 fada 	bl	8011c7c <uxr_stamp_session_header>
 80116c8:	a80a      	add	r0, sp, #40	@ 0x28
 80116ca:	f7ff f8e3 	bl	8010894 <ucdr_buffer_length>
 80116ce:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80116d0:	4602      	mov	r2, r0
 80116d2:	a905      	add	r1, sp, #20
 80116d4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80116d8:	47b0      	blx	r6
 80116da:	f000 fce1 	bl	80120a0 <uxr_millis>
 80116de:	2300      	movs	r3, #0
 80116e0:	4606      	mov	r6, r0
 80116e2:	4629      	mov	r1, r5
 80116e4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80116e8:	e000      	b.n	80116ec <uxr_sync_session+0x84>
 80116ea:	b950      	cbnz	r0, 8011702 <uxr_sync_session+0x9a>
 80116ec:	4620      	mov	r0, r4
 80116ee:	f7ff fe07 	bl	8011300 <listen_message_reliably>
 80116f2:	f000 fcd5 	bl	80120a0 <uxr_millis>
 80116f6:	1b83      	subs	r3, r0, r6
 80116f8:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80116fc:	1ae9      	subs	r1, r5, r3
 80116fe:	2900      	cmp	r1, #0
 8011700:	dcf3      	bgt.n	80116ea <uxr_sync_session+0x82>
 8011702:	b013      	add	sp, #76	@ 0x4c
 8011704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011706:	bf00      	nop
 8011708:	3b9aca00 	.word	0x3b9aca00
 801170c:	00000000 	.word	0x00000000

08011710 <wait_session_status>:
 8011710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011714:	4604      	mov	r4, r0
 8011716:	b09d      	sub	sp, #116	@ 0x74
 8011718:	20ff      	movs	r0, #255	@ 0xff
 801171a:	9303      	str	r3, [sp, #12]
 801171c:	7160      	strb	r0, [r4, #5]
 801171e:	2b00      	cmp	r3, #0
 8011720:	f000 80b6 	beq.w	8011890 <wait_session_status+0x180>
 8011724:	4689      	mov	r9, r1
 8011726:	4692      	mov	sl, r2
 8011728:	f04f 0b00 	mov.w	fp, #0
 801172c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801172e:	4652      	mov	r2, sl
 8011730:	4649      	mov	r1, r9
 8011732:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011736:	47a8      	blx	r5
 8011738:	f000 fcb2 	bl	80120a0 <uxr_millis>
 801173c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011740:	4605      	mov	r5, r0
 8011742:	e009      	b.n	8011758 <wait_session_status+0x48>
 8011744:	f000 fcac 	bl	80120a0 <uxr_millis>
 8011748:	1b40      	subs	r0, r0, r5
 801174a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801174e:	2b00      	cmp	r3, #0
 8011750:	dd40      	ble.n	80117d4 <wait_session_status+0xc4>
 8011752:	7960      	ldrb	r0, [r4, #5]
 8011754:	28ff      	cmp	r0, #255	@ 0xff
 8011756:	d145      	bne.n	80117e4 <wait_session_status+0xd4>
 8011758:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801175a:	a908      	add	r1, sp, #32
 801175c:	6896      	ldr	r6, [r2, #8]
 801175e:	6810      	ldr	r0, [r2, #0]
 8011760:	aa09      	add	r2, sp, #36	@ 0x24
 8011762:	47b0      	blx	r6
 8011764:	2800      	cmp	r0, #0
 8011766:	d0ed      	beq.n	8011744 <wait_session_status+0x34>
 8011768:	a80c      	add	r0, sp, #48	@ 0x30
 801176a:	2600      	movs	r6, #0
 801176c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011770:	f7ff f862 	bl	8010838 <ucdr_init_buffer>
 8011774:	f10d 031e 	add.w	r3, sp, #30
 8011778:	aa07      	add	r2, sp, #28
 801177a:	a90c      	add	r1, sp, #48	@ 0x30
 801177c:	4620      	mov	r0, r4
 801177e:	f88d 601c 	strb.w	r6, [sp, #28]
 8011782:	f000 fa8f 	bl	8011ca4 <uxr_read_session_header>
 8011786:	2800      	cmp	r0, #0
 8011788:	d0dc      	beq.n	8011744 <wait_session_status+0x34>
 801178a:	4631      	mov	r1, r6
 801178c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011790:	f000 fb30 	bl	8011df4 <uxr_stream_id_from_raw>
 8011794:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011798:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801179c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80117a0:	2f01      	cmp	r7, #1
 80117a2:	9302      	str	r3, [sp, #8]
 80117a4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80117a8:	d05c      	beq.n	8011864 <wait_session_status+0x154>
 80117aa:	2f02      	cmp	r7, #2
 80117ac:	d020      	beq.n	80117f0 <wait_session_status+0xe0>
 80117ae:	2f00      	cmp	r7, #0
 80117b0:	d1c8      	bne.n	8011744 <wait_session_status+0x34>
 80117b2:	4639      	mov	r1, r7
 80117b4:	4638      	mov	r0, r7
 80117b6:	f000 fb1d 	bl	8011df4 <uxr_stream_id_from_raw>
 80117ba:	a90c      	add	r1, sp, #48	@ 0x30
 80117bc:	4602      	mov	r2, r0
 80117be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80117c0:	4620      	mov	r0, r4
 80117c2:	f7ff fc13 	bl	8010fec <read_submessage_list>
 80117c6:	f000 fc6b 	bl	80120a0 <uxr_millis>
 80117ca:	1b40      	subs	r0, r0, r5
 80117cc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	dcbe      	bgt.n	8011752 <wait_session_status+0x42>
 80117d4:	f10b 0b01 	add.w	fp, fp, #1
 80117d8:	9b03      	ldr	r3, [sp, #12]
 80117da:	7960      	ldrb	r0, [r4, #5]
 80117dc:	455b      	cmp	r3, fp
 80117de:	d001      	beq.n	80117e4 <wait_session_status+0xd4>
 80117e0:	28ff      	cmp	r0, #255	@ 0xff
 80117e2:	d0a3      	beq.n	801172c <wait_session_status+0x1c>
 80117e4:	38ff      	subs	r0, #255	@ 0xff
 80117e6:	bf18      	it	ne
 80117e8:	2001      	movne	r0, #1
 80117ea:	b01d      	add	sp, #116	@ 0x74
 80117ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80117f4:	4631      	mov	r1, r6
 80117f6:	f104 0008 	add.w	r0, r4, #8
 80117fa:	9304      	str	r3, [sp, #16]
 80117fc:	f000 fbe8 	bl	8011fd0 <uxr_get_input_reliable_stream>
 8011800:	4680      	mov	r8, r0
 8011802:	b348      	cbz	r0, 8011858 <wait_session_status+0x148>
 8011804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011806:	a80c      	add	r0, sp, #48	@ 0x30
 8011808:	9205      	str	r2, [sp, #20]
 801180a:	f7ff f847 	bl	801089c <ucdr_buffer_remaining>
 801180e:	4603      	mov	r3, r0
 8011810:	f10d 001d 	add.w	r0, sp, #29
 8011814:	9a05      	ldr	r2, [sp, #20]
 8011816:	9000      	str	r0, [sp, #0]
 8011818:	4640      	mov	r0, r8
 801181a:	9902      	ldr	r1, [sp, #8]
 801181c:	f004 f97e 	bl	8015b1c <uxr_receive_reliable_message>
 8011820:	b1d0      	cbz	r0, 8011858 <wait_session_status+0x148>
 8011822:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d03a      	beq.n	80118a0 <wait_session_status+0x190>
 801182a:	9f04      	ldr	r7, [sp, #16]
 801182c:	e00a      	b.n	8011844 <wait_session_status+0x134>
 801182e:	f04f 0302 	mov.w	r3, #2
 8011832:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8011836:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801183a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801183e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011840:	f7ff fbd4 	bl	8010fec <read_submessage_list>
 8011844:	a914      	add	r1, sp, #80	@ 0x50
 8011846:	2204      	movs	r2, #4
 8011848:	4640      	mov	r0, r8
 801184a:	f004 f9e9 	bl	8015c20 <uxr_next_input_reliable_buffer_available>
 801184e:	4603      	mov	r3, r0
 8011850:	a914      	add	r1, sp, #80	@ 0x50
 8011852:	4620      	mov	r0, r4
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1ea      	bne.n	801182e <wait_session_status+0x11e>
 8011858:	4632      	mov	r2, r6
 801185a:	9904      	ldr	r1, [sp, #16]
 801185c:	4620      	mov	r0, r4
 801185e:	f7ff fa41 	bl	8010ce4 <write_submessage_acknack.isra.0>
 8011862:	e76f      	b.n	8011744 <wait_session_status+0x34>
 8011864:	4631      	mov	r1, r6
 8011866:	f104 0008 	add.w	r0, r4, #8
 801186a:	f000 fba7 	bl	8011fbc <uxr_get_input_best_effort_stream>
 801186e:	2800      	cmp	r0, #0
 8011870:	f43f af68 	beq.w	8011744 <wait_session_status+0x34>
 8011874:	9902      	ldr	r1, [sp, #8]
 8011876:	f004 f8c7 	bl	8015a08 <uxr_receive_best_effort_message>
 801187a:	2800      	cmp	r0, #0
 801187c:	f43f af62 	beq.w	8011744 <wait_session_status+0x34>
 8011880:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011884:	a90c      	add	r1, sp, #48	@ 0x30
 8011886:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011888:	4620      	mov	r0, r4
 801188a:	f7ff fbaf 	bl	8010fec <read_submessage_list>
 801188e:	e759      	b.n	8011744 <wait_session_status+0x34>
 8011890:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011892:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011896:	47a0      	blx	r4
 8011898:	2001      	movs	r0, #1
 801189a:	b01d      	add	sp, #116	@ 0x74
 801189c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80118a4:	a90c      	add	r1, sp, #48	@ 0x30
 80118a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80118a8:	4620      	mov	r0, r4
 80118aa:	f7ff fb9f 	bl	8010fec <read_submessage_list>
 80118ae:	e7bc      	b.n	801182a <wait_session_status+0x11a>

080118b0 <uxr_delete_session_retries>:
 80118b0:	b530      	push	{r4, r5, lr}
 80118b2:	b08f      	sub	sp, #60	@ 0x3c
 80118b4:	4604      	mov	r4, r0
 80118b6:	460d      	mov	r5, r1
 80118b8:	f000 fa34 	bl	8011d24 <uxr_session_header_offset>
 80118bc:	2300      	movs	r3, #0
 80118be:	2210      	movs	r2, #16
 80118c0:	a902      	add	r1, sp, #8
 80118c2:	9000      	str	r0, [sp, #0]
 80118c4:	a806      	add	r0, sp, #24
 80118c6:	f7fe ffa5 	bl	8010814 <ucdr_init_buffer_origin_offset>
 80118ca:	a906      	add	r1, sp, #24
 80118cc:	4620      	mov	r0, r4
 80118ce:	f000 f979 	bl	8011bc4 <uxr_buffer_delete_session>
 80118d2:	2200      	movs	r2, #0
 80118d4:	9b06      	ldr	r3, [sp, #24]
 80118d6:	4620      	mov	r0, r4
 80118d8:	4611      	mov	r1, r2
 80118da:	f000 f9cf 	bl	8011c7c <uxr_stamp_session_header>
 80118de:	a806      	add	r0, sp, #24
 80118e0:	f7fe ffd8 	bl	8010894 <ucdr_buffer_length>
 80118e4:	462b      	mov	r3, r5
 80118e6:	4602      	mov	r2, r0
 80118e8:	a902      	add	r1, sp, #8
 80118ea:	4620      	mov	r0, r4
 80118ec:	f7ff ff10 	bl	8011710 <wait_session_status>
 80118f0:	b118      	cbz	r0, 80118fa <uxr_delete_session_retries+0x4a>
 80118f2:	7960      	ldrb	r0, [r4, #5]
 80118f4:	fab0 f080 	clz	r0, r0
 80118f8:	0940      	lsrs	r0, r0, #5
 80118fa:	b00f      	add	sp, #60	@ 0x3c
 80118fc:	bd30      	pop	{r4, r5, pc}
 80118fe:	bf00      	nop

08011900 <uxr_create_session>:
 8011900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	f100 0b08 	add.w	fp, r0, #8
 8011908:	4604      	mov	r4, r0
 801190a:	b0ab      	sub	sp, #172	@ 0xac
 801190c:	4658      	mov	r0, fp
 801190e:	465e      	mov	r6, fp
 8011910:	f000 faa6 	bl	8011e60 <uxr_reset_stream_storage>
 8011914:	4620      	mov	r0, r4
 8011916:	f000 fa05 	bl	8011d24 <uxr_session_header_offset>
 801191a:	2300      	movs	r3, #0
 801191c:	221c      	movs	r2, #28
 801191e:	a90b      	add	r1, sp, #44	@ 0x2c
 8011920:	9000      	str	r0, [sp, #0]
 8011922:	a812      	add	r0, sp, #72	@ 0x48
 8011924:	f7fe ff76 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8011928:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801192a:	a912      	add	r1, sp, #72	@ 0x48
 801192c:	4620      	mov	r0, r4
 801192e:	8a1a      	ldrh	r2, [r3, #16]
 8011930:	3a04      	subs	r2, #4
 8011932:	b292      	uxth	r2, r2
 8011934:	f000 f91c 	bl	8011b70 <uxr_buffer_create_session>
 8011938:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801193a:	4620      	mov	r0, r4
 801193c:	f000 f98a 	bl	8011c54 <uxr_stamp_create_session_header>
 8011940:	a812      	add	r0, sp, #72	@ 0x48
 8011942:	f7fe ffa7 	bl	8010894 <ucdr_buffer_length>
 8011946:	23ff      	movs	r3, #255	@ 0xff
 8011948:	4681      	mov	r9, r0
 801194a:	7163      	strb	r3, [r4, #5]
 801194c:	230a      	movs	r3, #10
 801194e:	9303      	str	r3, [sp, #12]
 8011950:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011952:	464a      	mov	r2, r9
 8011954:	a90b      	add	r1, sp, #44	@ 0x2c
 8011956:	e9d3 0500 	ldrd	r0, r5, [r3]
 801195a:	47a8      	blx	r5
 801195c:	f000 fba0 	bl	80120a0 <uxr_millis>
 8011960:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011964:	4605      	mov	r5, r0
 8011966:	e009      	b.n	801197c <uxr_create_session+0x7c>
 8011968:	f000 fb9a 	bl	80120a0 <uxr_millis>
 801196c:	1b40      	subs	r0, r0, r5
 801196e:	7962      	ldrb	r2, [r4, #5]
 8011970:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011974:	2b00      	cmp	r3, #0
 8011976:	dd38      	ble.n	80119ea <uxr_create_session+0xea>
 8011978:	2aff      	cmp	r2, #255	@ 0xff
 801197a:	d13c      	bne.n	80119f6 <uxr_create_session+0xf6>
 801197c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801197e:	a907      	add	r1, sp, #28
 8011980:	6897      	ldr	r7, [r2, #8]
 8011982:	6810      	ldr	r0, [r2, #0]
 8011984:	aa08      	add	r2, sp, #32
 8011986:	47b8      	blx	r7
 8011988:	2800      	cmp	r0, #0
 801198a:	d0ed      	beq.n	8011968 <uxr_create_session+0x68>
 801198c:	a81a      	add	r0, sp, #104	@ 0x68
 801198e:	2700      	movs	r7, #0
 8011990:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011994:	f7fe ff50 	bl	8010838 <ucdr_init_buffer>
 8011998:	f10d 031a 	add.w	r3, sp, #26
 801199c:	aa06      	add	r2, sp, #24
 801199e:	a91a      	add	r1, sp, #104	@ 0x68
 80119a0:	4620      	mov	r0, r4
 80119a2:	f88d 7018 	strb.w	r7, [sp, #24]
 80119a6:	f000 f97d 	bl	8011ca4 <uxr_read_session_header>
 80119aa:	2800      	cmp	r0, #0
 80119ac:	d0dc      	beq.n	8011968 <uxr_create_session+0x68>
 80119ae:	4639      	mov	r1, r7
 80119b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80119b4:	f000 fa1e 	bl	8011df4 <uxr_stream_id_from_raw>
 80119b8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80119bc:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80119c0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80119c4:	2f01      	cmp	r7, #1
 80119c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80119ca:	d053      	beq.n	8011a74 <uxr_create_session+0x174>
 80119cc:	2f02      	cmp	r7, #2
 80119ce:	d018      	beq.n	8011a02 <uxr_create_session+0x102>
 80119d0:	2f00      	cmp	r7, #0
 80119d2:	d1c9      	bne.n	8011968 <uxr_create_session+0x68>
 80119d4:	4639      	mov	r1, r7
 80119d6:	4638      	mov	r0, r7
 80119d8:	f000 fa0c 	bl	8011df4 <uxr_stream_id_from_raw>
 80119dc:	a91a      	add	r1, sp, #104	@ 0x68
 80119de:	4602      	mov	r2, r0
 80119e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80119e2:	4620      	mov	r0, r4
 80119e4:	f7ff fb02 	bl	8010fec <read_submessage_list>
 80119e8:	e7be      	b.n	8011968 <uxr_create_session+0x68>
 80119ea:	9b03      	ldr	r3, [sp, #12]
 80119ec:	3b01      	subs	r3, #1
 80119ee:	9303      	str	r3, [sp, #12]
 80119f0:	d001      	beq.n	80119f6 <uxr_create_session+0xf6>
 80119f2:	2aff      	cmp	r2, #255	@ 0xff
 80119f4:	d0ac      	beq.n	8011950 <uxr_create_session+0x50>
 80119f6:	2a00      	cmp	r2, #0
 80119f8:	d051      	beq.n	8011a9e <uxr_create_session+0x19e>
 80119fa:	2000      	movs	r0, #0
 80119fc:	b02b      	add	sp, #172	@ 0xac
 80119fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a02:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011a06:	4641      	mov	r1, r8
 8011a08:	4630      	mov	r0, r6
 8011a0a:	9304      	str	r3, [sp, #16]
 8011a0c:	f000 fae0 	bl	8011fd0 <uxr_get_input_reliable_stream>
 8011a10:	4682      	mov	sl, r0
 8011a12:	b348      	cbz	r0, 8011a68 <uxr_create_session+0x168>
 8011a14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011a16:	a81a      	add	r0, sp, #104	@ 0x68
 8011a18:	9205      	str	r2, [sp, #20]
 8011a1a:	f7fe ff3f 	bl	801089c <ucdr_buffer_remaining>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	f10d 0019 	add.w	r0, sp, #25
 8011a24:	9a05      	ldr	r2, [sp, #20]
 8011a26:	4659      	mov	r1, fp
 8011a28:	9000      	str	r0, [sp, #0]
 8011a2a:	4650      	mov	r0, sl
 8011a2c:	f004 f876 	bl	8015b1c <uxr_receive_reliable_message>
 8011a30:	b1d0      	cbz	r0, 8011a68 <uxr_create_session+0x168>
 8011a32:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d038      	beq.n	8011aac <uxr_create_session+0x1ac>
 8011a3a:	9f04      	ldr	r7, [sp, #16]
 8011a3c:	e00a      	b.n	8011a54 <uxr_create_session+0x154>
 8011a3e:	f04f 0302 	mov.w	r3, #2
 8011a42:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8011a46:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8011a4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a50:	f7ff facc 	bl	8010fec <read_submessage_list>
 8011a54:	a922      	add	r1, sp, #136	@ 0x88
 8011a56:	2204      	movs	r2, #4
 8011a58:	4650      	mov	r0, sl
 8011a5a:	f004 f8e1 	bl	8015c20 <uxr_next_input_reliable_buffer_available>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	a922      	add	r1, sp, #136	@ 0x88
 8011a62:	4620      	mov	r0, r4
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d1ea      	bne.n	8011a3e <uxr_create_session+0x13e>
 8011a68:	4642      	mov	r2, r8
 8011a6a:	9904      	ldr	r1, [sp, #16]
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f7ff f939 	bl	8010ce4 <write_submessage_acknack.isra.0>
 8011a72:	e779      	b.n	8011968 <uxr_create_session+0x68>
 8011a74:	4641      	mov	r1, r8
 8011a76:	4630      	mov	r0, r6
 8011a78:	f000 faa0 	bl	8011fbc <uxr_get_input_best_effort_stream>
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	f43f af73 	beq.w	8011968 <uxr_create_session+0x68>
 8011a82:	4659      	mov	r1, fp
 8011a84:	f003 ffc0 	bl	8015a08 <uxr_receive_best_effort_message>
 8011a88:	2800      	cmp	r0, #0
 8011a8a:	f43f af6d 	beq.w	8011968 <uxr_create_session+0x68>
 8011a8e:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8011a92:	a91a      	add	r1, sp, #104	@ 0x68
 8011a94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a96:	4620      	mov	r0, r4
 8011a98:	f7ff faa8 	bl	8010fec <read_submessage_list>
 8011a9c:	e764      	b.n	8011968 <uxr_create_session+0x68>
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	f000 f9de 	bl	8011e60 <uxr_reset_stream_storage>
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	b02b      	add	sp, #172	@ 0xac
 8011aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aac:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8011ab0:	a91a      	add	r1, sp, #104	@ 0x68
 8011ab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	f7ff fa99 	bl	8010fec <read_submessage_list>
 8011aba:	e7be      	b.n	8011a3a <uxr_create_session+0x13a>

08011abc <uxr_prepare_stream_to_write_submessage>:
 8011abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac0:	b082      	sub	sp, #8
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	4610      	mov	r0, r2
 8011ac6:	4615      	mov	r5, r2
 8011ac8:	461e      	mov	r6, r3
 8011aca:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8011ace:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011ad2:	f105 0904 	add.w	r9, r5, #4
 8011ad6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011ada:	9101      	str	r1, [sp, #4]
 8011adc:	f000 fada 	bl	8012094 <uxr_submessage_padding>
 8011ae0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ae4:	4481      	add	r9, r0
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d01d      	beq.n	8011b26 <uxr_prepare_stream_to_write_submessage+0x6a>
 8011aea:	2b02      	cmp	r3, #2
 8011aec:	d116      	bne.n	8011b1c <uxr_prepare_stream_to_write_submessage+0x60>
 8011aee:	f104 0008 	add.w	r0, r4, #8
 8011af2:	4651      	mov	r1, sl
 8011af4:	f000 fa56 	bl	8011fa4 <uxr_get_output_reliable_stream>
 8011af8:	4604      	mov	r4, r0
 8011afa:	b158      	cbz	r0, 8011b14 <uxr_prepare_stream_to_write_submessage+0x58>
 8011afc:	4649      	mov	r1, r9
 8011afe:	4632      	mov	r2, r6
 8011b00:	f004 fa54 	bl	8015fac <uxr_prepare_reliable_buffer_to_write>
 8011b04:	4604      	mov	r4, r0
 8011b06:	b12c      	cbz	r4, 8011b14 <uxr_prepare_stream_to_write_submessage+0x58>
 8011b08:	4643      	mov	r3, r8
 8011b0a:	b2aa      	uxth	r2, r5
 8011b0c:	4639      	mov	r1, r7
 8011b0e:	4630      	mov	r0, r6
 8011b10:	f000 fa80 	bl	8012014 <uxr_buffer_submessage_header>
 8011b14:	4620      	mov	r0, r4
 8011b16:	b002      	add	sp, #8
 8011b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b1c:	2400      	movs	r4, #0
 8011b1e:	4620      	mov	r0, r4
 8011b20:	b002      	add	sp, #8
 8011b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b26:	f104 0008 	add.w	r0, r4, #8
 8011b2a:	4651      	mov	r1, sl
 8011b2c:	f000 fa32 	bl	8011f94 <uxr_get_output_best_effort_stream>
 8011b30:	4604      	mov	r4, r0
 8011b32:	2800      	cmp	r0, #0
 8011b34:	d0ee      	beq.n	8011b14 <uxr_prepare_stream_to_write_submessage+0x58>
 8011b36:	4649      	mov	r1, r9
 8011b38:	4632      	mov	r2, r6
 8011b3a:	f004 f961 	bl	8015e00 <uxr_prepare_best_effort_buffer_to_write>
 8011b3e:	4604      	mov	r4, r0
 8011b40:	e7e1      	b.n	8011b06 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011b42:	bf00      	nop

08011b44 <uxr_init_session_info>:
 8011b44:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8011b48:	23ff      	movs	r3, #255	@ 0xff
 8011b4a:	7102      	strb	r2, [r0, #4]
 8011b4c:	f880 c001 	strb.w	ip, [r0, #1]
 8011b50:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011b54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011b58:	7001      	strb	r1, [r0, #0]
 8011b5a:	f880 c002 	strb.w	ip, [r0, #2]
 8011b5e:	7143      	strb	r3, [r0, #5]
 8011b60:	70c2      	strb	r2, [r0, #3]
 8011b62:	b500      	push	{lr}
 8011b64:	f04f 0e09 	mov.w	lr, #9
 8011b68:	f8a0 e006 	strh.w	lr, [r0, #6]
 8011b6c:	f85d fb04 	ldr.w	pc, [sp], #4

08011b70 <uxr_buffer_create_session>:
 8011b70:	b530      	push	{r4, r5, lr}
 8011b72:	2300      	movs	r3, #0
 8011b74:	b089      	sub	sp, #36	@ 0x24
 8011b76:	4d12      	ldr	r5, [pc, #72]	@ (8011bc0 <uxr_buffer_create_session+0x50>)
 8011b78:	460c      	mov	r4, r1
 8011b7a:	9307      	str	r3, [sp, #28]
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011b82:	2201      	movs	r2, #1
 8011b84:	9301      	str	r3, [sp, #4]
 8011b86:	80c2      	strh	r2, [r0, #6]
 8011b88:	f88d 2004 	strb.w	r2, [sp, #4]
 8011b8c:	682a      	ldr	r2, [r5, #0]
 8011b8e:	9303      	str	r3, [sp, #12]
 8011b90:	9200      	str	r2, [sp, #0]
 8011b92:	88aa      	ldrh	r2, [r5, #4]
 8011b94:	9306      	str	r3, [sp, #24]
 8011b96:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011b9a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011b9e:	9202      	str	r2, [sp, #8]
 8011ba0:	7802      	ldrb	r2, [r0, #0]
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f88d 200c 	strb.w	r2, [sp, #12]
 8011ba8:	2210      	movs	r2, #16
 8011baa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011bae:	f000 fa31 	bl	8012014 <uxr_buffer_submessage_header>
 8011bb2:	4669      	mov	r1, sp
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f001 f983 	bl	8012ec0 <uxr_serialize_CREATE_CLIENT_Payload>
 8011bba:	b009      	add	sp, #36	@ 0x24
 8011bbc:	bd30      	pop	{r4, r5, pc}
 8011bbe:	bf00      	nop
 8011bc0:	08019074 	.word	0x08019074

08011bc4 <uxr_buffer_delete_session>:
 8011bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8011bf8 <uxr_buffer_delete_session+0x34>)
 8011bc6:	2302      	movs	r3, #2
 8011bc8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8011bcc:	b510      	push	{r4, lr}
 8011bce:	460c      	mov	r4, r1
 8011bd0:	b082      	sub	sp, #8
 8011bd2:	8911      	ldrh	r1, [r2, #8]
 8011bd4:	2204      	movs	r2, #4
 8011bd6:	80c3      	strh	r3, [r0, #6]
 8011bd8:	2300      	movs	r3, #0
 8011bda:	f8ad 1006 	strh.w	r1, [sp, #6]
 8011bde:	4620      	mov	r0, r4
 8011be0:	2103      	movs	r1, #3
 8011be2:	f8ad c004 	strh.w	ip, [sp, #4]
 8011be6:	f000 fa15 	bl	8012014 <uxr_buffer_submessage_header>
 8011bea:	a901      	add	r1, sp, #4
 8011bec:	4620      	mov	r0, r4
 8011bee:	f001 fa0f 	bl	8013010 <uxr_serialize_DELETE_Payload>
 8011bf2:	b002      	add	sp, #8
 8011bf4:	bd10      	pop	{r4, pc}
 8011bf6:	bf00      	nop
 8011bf8:	08019074 	.word	0x08019074

08011bfc <uxr_read_create_session_status>:
 8011bfc:	b510      	push	{r4, lr}
 8011bfe:	460b      	mov	r3, r1
 8011c00:	b088      	sub	sp, #32
 8011c02:	4604      	mov	r4, r0
 8011c04:	a901      	add	r1, sp, #4
 8011c06:	4618      	mov	r0, r3
 8011c08:	f001 fa12 	bl	8013030 <uxr_deserialize_STATUS_AGENT_Payload>
 8011c0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c10:	7163      	strb	r3, [r4, #5]
 8011c12:	b008      	add	sp, #32
 8011c14:	bd10      	pop	{r4, pc}
 8011c16:	bf00      	nop

08011c18 <uxr_read_delete_session_status>:
 8011c18:	b510      	push	{r4, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	4604      	mov	r4, r0
 8011c1e:	4608      	mov	r0, r1
 8011c20:	a902      	add	r1, sp, #8
 8011c22:	f001 fa35 	bl	8013090 <uxr_deserialize_STATUS_Payload>
 8011c26:	88e3      	ldrh	r3, [r4, #6]
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	d001      	beq.n	8011c30 <uxr_read_delete_session_status+0x18>
 8011c2c:	b004      	add	sp, #16
 8011c2e:	bd10      	pop	{r4, pc}
 8011c30:	f10d 000a 	add.w	r0, sp, #10
 8011c34:	f7fe ffdc 	bl	8010bf0 <uxr_object_id_from_raw>
 8011c38:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011c3c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011c40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011c44:	b29b      	uxth	r3, r3
 8011c46:	2b02      	cmp	r3, #2
 8011c48:	d1f0      	bne.n	8011c2c <uxr_read_delete_session_status+0x14>
 8011c4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011c4e:	7163      	strb	r3, [r4, #5]
 8011c50:	e7ec      	b.n	8011c2c <uxr_read_delete_session_status+0x14>
 8011c52:	bf00      	nop

08011c54 <uxr_stamp_create_session_header>:
 8011c54:	b510      	push	{r4, lr}
 8011c56:	2208      	movs	r2, #8
 8011c58:	b08a      	sub	sp, #40	@ 0x28
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	eb0d 0002 	add.w	r0, sp, r2
 8011c60:	f7fe fdea 	bl	8010838 <ucdr_init_buffer>
 8011c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c68:	2300      	movs	r3, #0
 8011c6a:	a802      	add	r0, sp, #8
 8011c6c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011c70:	9400      	str	r4, [sp, #0]
 8011c72:	461a      	mov	r2, r3
 8011c74:	f000 fbca 	bl	801240c <uxr_serialize_message_header>
 8011c78:	b00a      	add	sp, #40	@ 0x28
 8011c7a:	bd10      	pop	{r4, pc}

08011c7c <uxr_stamp_session_header>:
 8011c7c:	b530      	push	{r4, r5, lr}
 8011c7e:	b08d      	sub	sp, #52	@ 0x34
 8011c80:	4604      	mov	r4, r0
 8011c82:	460d      	mov	r5, r1
 8011c84:	4619      	mov	r1, r3
 8011c86:	a804      	add	r0, sp, #16
 8011c88:	9203      	str	r2, [sp, #12]
 8011c8a:	2208      	movs	r2, #8
 8011c8c:	f7fe fdd4 	bl	8010838 <ucdr_init_buffer>
 8011c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c94:	9b03      	ldr	r3, [sp, #12]
 8011c96:	462a      	mov	r2, r5
 8011c98:	a804      	add	r0, sp, #16
 8011c9a:	9400      	str	r4, [sp, #0]
 8011c9c:	f000 fbb6 	bl	801240c <uxr_serialize_message_header>
 8011ca0:	b00d      	add	sp, #52	@ 0x34
 8011ca2:	bd30      	pop	{r4, r5, pc}

08011ca4 <uxr_read_session_header>:
 8011ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca8:	4607      	mov	r7, r0
 8011caa:	b084      	sub	sp, #16
 8011cac:	4608      	mov	r0, r1
 8011cae:	460c      	mov	r4, r1
 8011cb0:	4615      	mov	r5, r2
 8011cb2:	461e      	mov	r6, r3
 8011cb4:	f7fe fdf2 	bl	801089c <ucdr_buffer_remaining>
 8011cb8:	2808      	cmp	r0, #8
 8011cba:	d803      	bhi.n	8011cc4 <uxr_read_session_header+0x20>
 8011cbc:	2000      	movs	r0, #0
 8011cbe:	b004      	add	sp, #16
 8011cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc4:	f10d 080c 	add.w	r8, sp, #12
 8011cc8:	4633      	mov	r3, r6
 8011cca:	462a      	mov	r2, r5
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f10d 010b 	add.w	r1, sp, #11
 8011cd2:	f8cd 8000 	str.w	r8, [sp]
 8011cd6:	f000 fbb7 	bl	8012448 <uxr_deserialize_message_header>
 8011cda:	783a      	ldrb	r2, [r7, #0]
 8011cdc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d1eb      	bne.n	8011cbc <uxr_read_session_header+0x18>
 8011ce4:	061b      	lsls	r3, r3, #24
 8011ce6:	d41b      	bmi.n	8011d20 <uxr_read_session_header+0x7c>
 8011ce8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011cec:	787b      	ldrb	r3, [r7, #1]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d003      	beq.n	8011cfa <uxr_read_session_header+0x56>
 8011cf2:	2001      	movs	r0, #1
 8011cf4:	f080 0001 	eor.w	r0, r0, #1
 8011cf8:	e7e1      	b.n	8011cbe <uxr_read_session_header+0x1a>
 8011cfa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011cfe:	1cb8      	adds	r0, r7, #2
 8011d00:	78bb      	ldrb	r3, [r7, #2]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d1f5      	bne.n	8011cf2 <uxr_read_session_header+0x4e>
 8011d06:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011d0a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	d1ef      	bne.n	8011cf2 <uxr_read_session_header+0x4e>
 8011d12:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011d16:	7843      	ldrb	r3, [r0, #1]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d1ea      	bne.n	8011cf2 <uxr_read_session_header+0x4e>
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	e7e9      	b.n	8011cf4 <uxr_read_session_header+0x50>
 8011d20:	2001      	movs	r0, #1
 8011d22:	e7cc      	b.n	8011cbe <uxr_read_session_header+0x1a>

08011d24 <uxr_session_header_offset>:
 8011d24:	f990 3000 	ldrsb.w	r3, [r0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	bfac      	ite	ge
 8011d2c:	2008      	movge	r0, #8
 8011d2e:	2004      	movlt	r0, #4
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop

08011d34 <uxr_init_base_object_request>:
 8011d34:	b510      	push	{r4, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011d3c:	9101      	str	r1, [sp, #4]
 8011d3e:	88c3      	ldrh	r3, [r0, #6]
 8011d40:	f1a3 010a 	sub.w	r1, r3, #10
 8011d44:	b289      	uxth	r1, r1
 8011d46:	42a1      	cmp	r1, r4
 8011d48:	d80f      	bhi.n	8011d6a <uxr_init_base_object_request+0x36>
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	b29c      	uxth	r4, r3
 8011d4e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	80c4      	strh	r4, [r0, #6]
 8011d56:	1c91      	adds	r1, r2, #2
 8011d58:	9801      	ldr	r0, [sp, #4]
 8011d5a:	f882 c000 	strb.w	ip, [r2]
 8011d5e:	7053      	strb	r3, [r2, #1]
 8011d60:	f7fe ff5a 	bl	8010c18 <uxr_object_id_to_raw>
 8011d64:	4620      	mov	r0, r4
 8011d66:	b002      	add	sp, #8
 8011d68:	bd10      	pop	{r4, pc}
 8011d6a:	230a      	movs	r3, #10
 8011d6c:	f04f 0c00 	mov.w	ip, #0
 8011d70:	461c      	mov	r4, r3
 8011d72:	e7ef      	b.n	8011d54 <uxr_init_base_object_request+0x20>

08011d74 <uxr_parse_base_object_request>:
 8011d74:	b570      	push	{r4, r5, r6, lr}
 8011d76:	4604      	mov	r4, r0
 8011d78:	3002      	adds	r0, #2
 8011d7a:	460d      	mov	r5, r1
 8011d7c:	4616      	mov	r6, r2
 8011d7e:	f7fe ff37 	bl	8010bf0 <uxr_object_id_from_raw>
 8011d82:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011d86:	8028      	strh	r0, [r5, #0]
 8011d88:	806b      	strh	r3, [r5, #2]
 8011d8a:	7822      	ldrb	r2, [r4, #0]
 8011d8c:	7863      	ldrb	r3, [r4, #1]
 8011d8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011d92:	8033      	strh	r3, [r6, #0]
 8011d94:	bd70      	pop	{r4, r5, r6, pc}
 8011d96:	bf00      	nop

08011d98 <uxr_stream_id>:
 8011d98:	2901      	cmp	r1, #1
 8011d9a:	4684      	mov	ip, r0
 8011d9c:	b500      	push	{lr}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	d01f      	beq.n	8011de2 <uxr_stream_id+0x4a>
 8011da2:	2902      	cmp	r1, #2
 8011da4:	f04f 0e00 	mov.w	lr, #0
 8011da8:	d020      	beq.n	8011dec <uxr_stream_id+0x54>
 8011daa:	2300      	movs	r3, #0
 8011dac:	2000      	movs	r0, #0
 8011dae:	f36e 0307 	bfi	r3, lr, #0, #8
 8011db2:	f36c 230f 	bfi	r3, ip, #8, #8
 8011db6:	f361 4317 	bfi	r3, r1, #16, #8
 8011dba:	f362 631f 	bfi	r3, r2, #24, #8
 8011dbe:	fa5f fc83 	uxtb.w	ip, r3
 8011dc2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011dc6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011dca:	0e1b      	lsrs	r3, r3, #24
 8011dcc:	f36c 0007 	bfi	r0, ip, #0, #8
 8011dd0:	f361 200f 	bfi	r0, r1, #8, #8
 8011dd4:	f362 4017 	bfi	r0, r2, #16, #8
 8011dd8:	f363 601f 	bfi	r0, r3, #24, #8
 8011ddc:	b003      	add	sp, #12
 8011dde:	f85d fb04 	ldr.w	pc, [sp], #4
 8011de2:	f100 0e01 	add.w	lr, r0, #1
 8011de6:	fa5f fe8e 	uxtb.w	lr, lr
 8011dea:	e7de      	b.n	8011daa <uxr_stream_id+0x12>
 8011dec:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8011df0:	e7db      	b.n	8011daa <uxr_stream_id+0x12>
 8011df2:	bf00      	nop

08011df4 <uxr_stream_id_from_raw>:
 8011df4:	b082      	sub	sp, #8
 8011df6:	b130      	cbz	r0, 8011e06 <uxr_stream_id_from_raw+0x12>
 8011df8:	0603      	lsls	r3, r0, #24
 8011dfa:	d421      	bmi.n	8011e40 <uxr_stream_id_from_raw+0x4c>
 8011dfc:	1e42      	subs	r2, r0, #1
 8011dfe:	f04f 0c01 	mov.w	ip, #1
 8011e02:	b2d2      	uxtb	r2, r2
 8011e04:	e001      	b.n	8011e0a <uxr_stream_id_from_raw+0x16>
 8011e06:	4684      	mov	ip, r0
 8011e08:	4602      	mov	r2, r0
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	f360 0307 	bfi	r3, r0, #0, #8
 8011e10:	2000      	movs	r0, #0
 8011e12:	f362 230f 	bfi	r3, r2, #8, #8
 8011e16:	f36c 4317 	bfi	r3, ip, #16, #8
 8011e1a:	f361 631f 	bfi	r3, r1, #24, #8
 8011e1e:	fa5f fc83 	uxtb.w	ip, r3
 8011e22:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011e26:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011e2a:	0e1b      	lsrs	r3, r3, #24
 8011e2c:	f36c 0007 	bfi	r0, ip, #0, #8
 8011e30:	f361 200f 	bfi	r0, r1, #8, #8
 8011e34:	f362 4017 	bfi	r0, r2, #16, #8
 8011e38:	f363 601f 	bfi	r0, r3, #24, #8
 8011e3c:	b002      	add	sp, #8
 8011e3e:	4770      	bx	lr
 8011e40:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011e44:	f04f 0c02 	mov.w	ip, #2
 8011e48:	e7df      	b.n	8011e0a <uxr_stream_id_from_raw+0x16>
 8011e4a:	bf00      	nop

08011e4c <uxr_init_stream_storage>:
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	7403      	strb	r3, [r0, #16]
 8011e50:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011e54:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011e58:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop

08011e60 <uxr_reset_stream_storage>:
 8011e60:	b570      	push	{r4, r5, r6, lr}
 8011e62:	7c03      	ldrb	r3, [r0, #16]
 8011e64:	4604      	mov	r4, r0
 8011e66:	b14b      	cbz	r3, 8011e7c <uxr_reset_stream_storage+0x1c>
 8011e68:	4606      	mov	r6, r0
 8011e6a:	2500      	movs	r5, #0
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	3501      	adds	r5, #1
 8011e70:	f003 ffc0 	bl	8015df4 <uxr_reset_output_best_effort_stream>
 8011e74:	7c23      	ldrb	r3, [r4, #16]
 8011e76:	3610      	adds	r6, #16
 8011e78:	42ab      	cmp	r3, r5
 8011e7a:	d8f7      	bhi.n	8011e6c <uxr_reset_stream_storage+0xc>
 8011e7c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e80:	b15b      	cbz	r3, 8011e9a <uxr_reset_stream_storage+0x3a>
 8011e82:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e86:	2500      	movs	r5, #0
 8011e88:	4630      	mov	r0, r6
 8011e8a:	3501      	adds	r5, #1
 8011e8c:	f003 fdb8 	bl	8015a00 <uxr_reset_input_best_effort_stream>
 8011e90:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e94:	3602      	adds	r6, #2
 8011e96:	42ab      	cmp	r3, r5
 8011e98:	d8f6      	bhi.n	8011e88 <uxr_reset_stream_storage+0x28>
 8011e9a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011e9e:	b15b      	cbz	r3, 8011eb8 <uxr_reset_stream_storage+0x58>
 8011ea0:	f104 0618 	add.w	r6, r4, #24
 8011ea4:	2500      	movs	r5, #0
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	3501      	adds	r5, #1
 8011eaa:	f004 f851 	bl	8015f50 <uxr_reset_output_reliable_stream>
 8011eae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011eb2:	3628      	adds	r6, #40	@ 0x28
 8011eb4:	42ab      	cmp	r3, r5
 8011eb6:	d8f6      	bhi.n	8011ea6 <uxr_reset_stream_storage+0x46>
 8011eb8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011ebc:	b15b      	cbz	r3, 8011ed6 <uxr_reset_stream_storage+0x76>
 8011ebe:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011ec2:	2500      	movs	r5, #0
 8011ec4:	4630      	mov	r0, r6
 8011ec6:	3501      	adds	r5, #1
 8011ec8:	f003 fe06 	bl	8015ad8 <uxr_reset_input_reliable_stream>
 8011ecc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011ed0:	3618      	adds	r6, #24
 8011ed2:	42ab      	cmp	r3, r5
 8011ed4:	d8f6      	bhi.n	8011ec4 <uxr_reset_stream_storage+0x64>
 8011ed6:	bd70      	pop	{r4, r5, r6, pc}

08011ed8 <uxr_add_output_best_effort_buffer>:
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	7c04      	ldrb	r4, [r0, #16]
 8011edc:	b082      	sub	sp, #8
 8011ede:	f104 0c01 	add.w	ip, r4, #1
 8011ee2:	f880 c010 	strb.w	ip, [r0, #16]
 8011ee6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011eea:	f003 ff79 	bl	8015de0 <uxr_init_output_best_effort_stream>
 8011eee:	2201      	movs	r2, #1
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	b002      	add	sp, #8
 8011ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011efa:	f7ff bf4d 	b.w	8011d98 <uxr_stream_id>
 8011efe:	bf00      	nop

08011f00 <uxr_add_output_reliable_buffer>:
 8011f00:	b510      	push	{r4, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	4684      	mov	ip, r0
 8011f06:	2028      	movs	r0, #40	@ 0x28
 8011f08:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8011f0c:	9400      	str	r4, [sp, #0]
 8011f0e:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011f12:	fb00 c004 	mla	r0, r0, r4, ip
 8011f16:	f104 0e01 	add.w	lr, r4, #1
 8011f1a:	3018      	adds	r0, #24
 8011f1c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011f20:	f003 ffde 	bl	8015ee0 <uxr_init_output_reliable_stream>
 8011f24:	2201      	movs	r2, #1
 8011f26:	2102      	movs	r1, #2
 8011f28:	4620      	mov	r0, r4
 8011f2a:	b004      	add	sp, #16
 8011f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f30:	f7ff bf32 	b.w	8011d98 <uxr_stream_id>

08011f34 <uxr_add_input_best_effort_buffer>:
 8011f34:	b510      	push	{r4, lr}
 8011f36:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	1c62      	adds	r2, r4, #1
 8011f3e:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8011f42:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8011f46:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011f4a:	f003 fd55 	bl	80159f8 <uxr_init_input_best_effort_stream>
 8011f4e:	2200      	movs	r2, #0
 8011f50:	2101      	movs	r1, #1
 8011f52:	4620      	mov	r0, r4
 8011f54:	b002      	add	sp, #8
 8011f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f5a:	f7ff bf1d 	b.w	8011d98 <uxr_stream_id>
 8011f5e:	bf00      	nop

08011f60 <uxr_add_input_reliable_buffer>:
 8011f60:	b510      	push	{r4, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	4684      	mov	ip, r0
 8011f66:	2018      	movs	r0, #24
 8011f68:	9c06      	ldr	r4, [sp, #24]
 8011f6a:	9400      	str	r4, [sp, #0]
 8011f6c:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011f70:	fb00 c004 	mla	r0, r0, r4, ip
 8011f74:	f104 0e01 	add.w	lr, r4, #1
 8011f78:	3048      	adds	r0, #72	@ 0x48
 8011f7a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011f7e:	f003 fd85 	bl	8015a8c <uxr_init_input_reliable_stream>
 8011f82:	2200      	movs	r2, #0
 8011f84:	2102      	movs	r1, #2
 8011f86:	4620      	mov	r0, r4
 8011f88:	b004      	add	sp, #16
 8011f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f8e:	f7ff bf03 	b.w	8011d98 <uxr_stream_id>
 8011f92:	bf00      	nop

08011f94 <uxr_get_output_best_effort_stream>:
 8011f94:	7c03      	ldrb	r3, [r0, #16]
 8011f96:	428b      	cmp	r3, r1
 8011f98:	bf8c      	ite	hi
 8011f9a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011f9e:	2000      	movls	r0, #0
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop

08011fa4 <uxr_get_output_reliable_stream>:
 8011fa4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011fa8:	428b      	cmp	r3, r1
 8011faa:	d904      	bls.n	8011fb6 <uxr_get_output_reliable_stream+0x12>
 8011fac:	2328      	movs	r3, #40	@ 0x28
 8011fae:	fb03 0001 	mla	r0, r3, r1, r0
 8011fb2:	3018      	adds	r0, #24
 8011fb4:	4770      	bx	lr
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	4770      	bx	lr
 8011fba:	bf00      	nop

08011fbc <uxr_get_input_best_effort_stream>:
 8011fbc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011fc0:	428b      	cmp	r3, r1
 8011fc2:	d903      	bls.n	8011fcc <uxr_get_input_best_effort_stream+0x10>
 8011fc4:	3121      	adds	r1, #33	@ 0x21
 8011fc6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011fca:	4770      	bx	lr
 8011fcc:	2000      	movs	r0, #0
 8011fce:	4770      	bx	lr

08011fd0 <uxr_get_input_reliable_stream>:
 8011fd0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011fd4:	428b      	cmp	r3, r1
 8011fd6:	d904      	bls.n	8011fe2 <uxr_get_input_reliable_stream+0x12>
 8011fd8:	2318      	movs	r3, #24
 8011fda:	fb03 0001 	mla	r0, r3, r1, r0
 8011fde:	3048      	adds	r0, #72	@ 0x48
 8011fe0:	4770      	bx	lr
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop

08011fe8 <uxr_output_streams_confirmed>:
 8011fe8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011fec:	b183      	cbz	r3, 8012010 <uxr_output_streams_confirmed+0x28>
 8011fee:	b570      	push	{r4, r5, r6, lr}
 8011ff0:	4606      	mov	r6, r0
 8011ff2:	f100 0518 	add.w	r5, r0, #24
 8011ff6:	2400      	movs	r4, #0
 8011ff8:	e000      	b.n	8011ffc <uxr_output_streams_confirmed+0x14>
 8011ffa:	b140      	cbz	r0, 801200e <uxr_output_streams_confirmed+0x26>
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	3401      	adds	r4, #1
 8012000:	f004 fa1a 	bl	8016438 <uxr_is_output_up_to_date>
 8012004:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012008:	3528      	adds	r5, #40	@ 0x28
 801200a:	42a3      	cmp	r3, r4
 801200c:	d8f5      	bhi.n	8011ffa <uxr_output_streams_confirmed+0x12>
 801200e:	bd70      	pop	{r4, r5, r6, pc}
 8012010:	2001      	movs	r0, #1
 8012012:	4770      	bx	lr

08012014 <uxr_buffer_submessage_header>:
 8012014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012016:	460e      	mov	r6, r1
 8012018:	2104      	movs	r1, #4
 801201a:	4604      	mov	r4, r0
 801201c:	4615      	mov	r5, r2
 801201e:	461f      	mov	r7, r3
 8012020:	f7fe fc26 	bl	8010870 <ucdr_align_to>
 8012024:	2301      	movs	r3, #1
 8012026:	4631      	mov	r1, r6
 8012028:	4620      	mov	r0, r4
 801202a:	ea47 0203 	orr.w	r2, r7, r3
 801202e:	7523      	strb	r3, [r4, #20]
 8012030:	462b      	mov	r3, r5
 8012032:	f000 fa29 	bl	8012488 <uxr_serialize_submessage_header>
 8012036:	4620      	mov	r0, r4
 8012038:	f7fe fc30 	bl	801089c <ucdr_buffer_remaining>
 801203c:	42a8      	cmp	r0, r5
 801203e:	bf34      	ite	cc
 8012040:	2000      	movcc	r0, #0
 8012042:	2001      	movcs	r0, #1
 8012044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012046:	bf00      	nop

08012048 <uxr_read_submessage_header>:
 8012048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801204c:	4604      	mov	r4, r0
 801204e:	460d      	mov	r5, r1
 8012050:	2104      	movs	r1, #4
 8012052:	4616      	mov	r6, r2
 8012054:	4698      	mov	r8, r3
 8012056:	f7fe fc0b 	bl	8010870 <ucdr_align_to>
 801205a:	4620      	mov	r0, r4
 801205c:	f7fe fc1e 	bl	801089c <ucdr_buffer_remaining>
 8012060:	2803      	cmp	r0, #3
 8012062:	bf8c      	ite	hi
 8012064:	2701      	movhi	r7, #1
 8012066:	2700      	movls	r7, #0
 8012068:	d802      	bhi.n	8012070 <uxr_read_submessage_header+0x28>
 801206a:	4638      	mov	r0, r7
 801206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012070:	4633      	mov	r3, r6
 8012072:	4642      	mov	r2, r8
 8012074:	4620      	mov	r0, r4
 8012076:	4629      	mov	r1, r5
 8012078:	f000 fa1a 	bl	80124b0 <uxr_deserialize_submessage_header>
 801207c:	f898 3000 	ldrb.w	r3, [r8]
 8012080:	4638      	mov	r0, r7
 8012082:	f003 0201 	and.w	r2, r3, #1
 8012086:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801208a:	f888 3000 	strb.w	r3, [r8]
 801208e:	7522      	strb	r2, [r4, #20]
 8012090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012094 <uxr_submessage_padding>:
 8012094:	f010 0003 	ands.w	r0, r0, #3
 8012098:	bf18      	it	ne
 801209a:	f1c0 0004 	rsbne	r0, r0, #4
 801209e:	4770      	bx	lr

080120a0 <uxr_millis>:
 80120a0:	b510      	push	{r4, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	2001      	movs	r0, #1
 80120a6:	4669      	mov	r1, sp
 80120a8:	f7ef fd16 	bl	8001ad8 <clock_gettime>
 80120ac:	4908      	ldr	r1, [pc, #32]	@ (80120d0 <uxr_millis+0x30>)
 80120ae:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80120b2:	fba0 0301 	umull	r0, r3, r0, r1
 80120b6:	1900      	adds	r0, r0, r4
 80120b8:	fb01 3102 	mla	r1, r1, r2, r3
 80120bc:	4a05      	ldr	r2, [pc, #20]	@ (80120d4 <uxr_millis+0x34>)
 80120be:	f04f 0300 	mov.w	r3, #0
 80120c2:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80120c6:	f7ee f973 	bl	80003b0 <__aeabi_ldivmod>
 80120ca:	b004      	add	sp, #16
 80120cc:	bd10      	pop	{r4, pc}
 80120ce:	bf00      	nop
 80120d0:	3b9aca00 	.word	0x3b9aca00
 80120d4:	000f4240 	.word	0x000f4240

080120d8 <uxr_nanos>:
 80120d8:	b510      	push	{r4, lr}
 80120da:	b084      	sub	sp, #16
 80120dc:	2001      	movs	r0, #1
 80120de:	4669      	mov	r1, sp
 80120e0:	f7ef fcfa 	bl	8001ad8 <clock_gettime>
 80120e4:	4a06      	ldr	r2, [pc, #24]	@ (8012100 <uxr_nanos+0x28>)
 80120e6:	9800      	ldr	r0, [sp, #0]
 80120e8:	9902      	ldr	r1, [sp, #8]
 80120ea:	fba0 0302 	umull	r0, r3, r0, r2
 80120ee:	9c01      	ldr	r4, [sp, #4]
 80120f0:	1840      	adds	r0, r0, r1
 80120f2:	fb02 3304 	mla	r3, r2, r4, r3
 80120f6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80120fa:	b004      	add	sp, #16
 80120fc:	bd10      	pop	{r4, pc}
 80120fe:	bf00      	nop
 8012100:	3b9aca00 	.word	0x3b9aca00

08012104 <on_full_output_buffer_fragmented>:
 8012104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012108:	460c      	mov	r4, r1
 801210a:	b08a      	sub	sp, #40	@ 0x28
 801210c:	4606      	mov	r6, r0
 801210e:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012112:	f104 0008 	add.w	r0, r4, #8
 8012116:	f7ff ff45 	bl	8011fa4 <uxr_get_output_reliable_stream>
 801211a:	4605      	mov	r5, r0
 801211c:	f004 f996 	bl	801644c <get_available_free_slots>
 8012120:	b968      	cbnz	r0, 801213e <on_full_output_buffer_fragmented+0x3a>
 8012122:	4620      	mov	r0, r4
 8012124:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012128:	4798      	blx	r3
 801212a:	b918      	cbnz	r0, 8012134 <on_full_output_buffer_fragmented+0x30>
 801212c:	2001      	movs	r0, #1
 801212e:	b00a      	add	sp, #40	@ 0x28
 8012130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012134:	4628      	mov	r0, r5
 8012136:	f004 f989 	bl	801644c <get_available_free_slots>
 801213a:	2800      	cmp	r0, #0
 801213c:	d0f6      	beq.n	801212c <on_full_output_buffer_fragmented+0x28>
 801213e:	8929      	ldrh	r1, [r5, #8]
 8012140:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8012144:	89eb      	ldrh	r3, [r5, #14]
 8012146:	7b28      	ldrb	r0, [r5, #12]
 8012148:	686f      	ldr	r7, [r5, #4]
 801214a:	1a12      	subs	r2, r2, r0
 801214c:	fbb3 f0f1 	udiv	r0, r3, r1
 8012150:	fbb7 f7f1 	udiv	r7, r7, r1
 8012154:	fb01 3110 	mls	r1, r1, r0, r3
 8012158:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801215c:	b289      	uxth	r1, r1
 801215e:	fb07 f101 	mul.w	r1, r7, r1
 8012162:	3f04      	subs	r7, #4
 8012164:	443a      	add	r2, r7
 8012166:	3104      	adds	r1, #4
 8012168:	fa1f f882 	uxth.w	r8, r2
 801216c:	463a      	mov	r2, r7
 801216e:	eba3 0308 	sub.w	r3, r3, r8
 8012172:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012176:	682b      	ldr	r3, [r5, #0]
 8012178:	4419      	add	r1, r3
 801217a:	2300      	movs	r3, #0
 801217c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8012180:	9000      	str	r0, [sp, #0]
 8012182:	a802      	add	r0, sp, #8
 8012184:	f7fe fb46 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8012188:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801218c:	f102 0308 	add.w	r3, r2, #8
 8012190:	42bb      	cmp	r3, r7
 8012192:	d927      	bls.n	80121e4 <on_full_output_buffer_fragmented+0xe0>
 8012194:	4642      	mov	r2, r8
 8012196:	2300      	movs	r3, #0
 8012198:	210d      	movs	r1, #13
 801219a:	a802      	add	r0, sp, #8
 801219c:	f7ff ff3a 	bl	8012014 <uxr_buffer_submessage_header>
 80121a0:	8929      	ldrh	r1, [r5, #8]
 80121a2:	89eb      	ldrh	r3, [r5, #14]
 80121a4:	686a      	ldr	r2, [r5, #4]
 80121a6:	fbb3 f0f1 	udiv	r0, r3, r1
 80121aa:	fbb2 f2f1 	udiv	r2, r2, r1
 80121ae:	fb01 3310 	mls	r3, r1, r0, r3
 80121b2:	b29b      	uxth	r3, r3
 80121b4:	fb02 f303 	mul.w	r3, r2, r3
 80121b8:	682a      	ldr	r2, [r5, #0]
 80121ba:	50d7      	str	r7, [r2, r3]
 80121bc:	2101      	movs	r1, #1
 80121be:	89e8      	ldrh	r0, [r5, #14]
 80121c0:	f004 fa5c 	bl	801667c <uxr_seq_num_add>
 80121c4:	9904      	ldr	r1, [sp, #16]
 80121c6:	9a03      	ldr	r2, [sp, #12]
 80121c8:	81e8      	strh	r0, [r5, #14]
 80121ca:	4630      	mov	r0, r6
 80121cc:	1a52      	subs	r2, r2, r1
 80121ce:	f7fe fb33 	bl	8010838 <ucdr_init_buffer>
 80121d2:	4630      	mov	r0, r6
 80121d4:	4622      	mov	r2, r4
 80121d6:	490f      	ldr	r1, [pc, #60]	@ (8012214 <on_full_output_buffer_fragmented+0x110>)
 80121d8:	f7fe fb02 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 80121dc:	2000      	movs	r0, #0
 80121de:	b00a      	add	sp, #40	@ 0x28
 80121e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e4:	b292      	uxth	r2, r2
 80121e6:	2302      	movs	r3, #2
 80121e8:	210d      	movs	r1, #13
 80121ea:	a802      	add	r0, sp, #8
 80121ec:	f7ff ff12 	bl	8012014 <uxr_buffer_submessage_header>
 80121f0:	8928      	ldrh	r0, [r5, #8]
 80121f2:	89eb      	ldrh	r3, [r5, #14]
 80121f4:	6869      	ldr	r1, [r5, #4]
 80121f6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80121fa:	fbb3 f7f0 	udiv	r7, r3, r0
 80121fe:	fbb1 f1f0 	udiv	r1, r1, r0
 8012202:	fb00 3317 	mls	r3, r0, r7, r3
 8012206:	3208      	adds	r2, #8
 8012208:	b29b      	uxth	r3, r3
 801220a:	fb01 f303 	mul.w	r3, r1, r3
 801220e:	6829      	ldr	r1, [r5, #0]
 8012210:	50ca      	str	r2, [r1, r3]
 8012212:	e7d3      	b.n	80121bc <on_full_output_buffer_fragmented+0xb8>
 8012214:	08012105 	.word	0x08012105

08012218 <uxr_prepare_output_stream>:
 8012218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801221a:	b087      	sub	sp, #28
 801221c:	2707      	movs	r7, #7
 801221e:	2500      	movs	r5, #0
 8012220:	461c      	mov	r4, r3
 8012222:	4606      	mov	r6, r0
 8012224:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012228:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801222a:	e9cd 7500 	strd	r7, r5, [sp]
 801222e:	3204      	adds	r2, #4
 8012230:	f7ff fc44 	bl	8011abc <uxr_prepare_stream_to_write_submessage>
 8012234:	f080 0201 	eor.w	r2, r0, #1
 8012238:	b2d2      	uxtb	r2, r2
 801223a:	75a2      	strb	r2, [r4, #22]
 801223c:	b112      	cbz	r2, 8012244 <uxr_prepare_output_stream+0x2c>
 801223e:	4628      	mov	r0, r5
 8012240:	b007      	add	sp, #28
 8012242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012244:	aa05      	add	r2, sp, #20
 8012246:	9902      	ldr	r1, [sp, #8]
 8012248:	4630      	mov	r0, r6
 801224a:	f7ff fd73 	bl	8011d34 <uxr_init_base_object_request>
 801224e:	a905      	add	r1, sp, #20
 8012250:	4605      	mov	r5, r0
 8012252:	4620      	mov	r0, r4
 8012254:	f000 ff9c 	bl	8013190 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012258:	69a6      	ldr	r6, [r4, #24]
 801225a:	69e7      	ldr	r7, [r4, #28]
 801225c:	4620      	mov	r0, r4
 801225e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012262:	1a52      	subs	r2, r2, r1
 8012264:	f7fe fae8 	bl	8010838 <ucdr_init_buffer>
 8012268:	4620      	mov	r0, r4
 801226a:	463a      	mov	r2, r7
 801226c:	4631      	mov	r1, r6
 801226e:	f7fe fab7 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 8012272:	4628      	mov	r0, r5
 8012274:	b007      	add	sp, #28
 8012276:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012278 <uxr_prepare_output_stream_fragmented>:
 8012278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801227c:	b091      	sub	sp, #68	@ 0x44
 801227e:	4605      	mov	r5, r0
 8012280:	3008      	adds	r0, #8
 8012282:	461e      	mov	r6, r3
 8012284:	9105      	str	r1, [sp, #20]
 8012286:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801228a:	9204      	str	r2, [sp, #16]
 801228c:	f7ff fe8a 	bl	8011fa4 <uxr_get_output_reliable_stream>
 8012290:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012294:	2b01      	cmp	r3, #1
 8012296:	f000 8093 	beq.w	80123c0 <uxr_prepare_output_stream_fragmented+0x148>
 801229a:	4604      	mov	r4, r0
 801229c:	2800      	cmp	r0, #0
 801229e:	f000 808f 	beq.w	80123c0 <uxr_prepare_output_stream_fragmented+0x148>
 80122a2:	f004 f8d3 	bl	801644c <get_available_free_slots>
 80122a6:	2800      	cmp	r0, #0
 80122a8:	f000 8085 	beq.w	80123b6 <uxr_prepare_output_stream_fragmented+0x13e>
 80122ac:	8923      	ldrh	r3, [r4, #8]
 80122ae:	89e7      	ldrh	r7, [r4, #14]
 80122b0:	6862      	ldr	r2, [r4, #4]
 80122b2:	fbb7 f9f3 	udiv	r9, r7, r3
 80122b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80122ba:	fb03 7919 	mls	r9, r3, r9, r7
 80122be:	6823      	ldr	r3, [r4, #0]
 80122c0:	f1a2 0b04 	sub.w	fp, r2, #4
 80122c4:	9203      	str	r2, [sp, #12]
 80122c6:	fa1f f989 	uxth.w	r9, r9
 80122ca:	fb02 f909 	mul.w	r9, r2, r9
 80122ce:	f109 0904 	add.w	r9, r9, #4
 80122d2:	4499      	add	r9, r3
 80122d4:	7b23      	ldrb	r3, [r4, #12]
 80122d6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80122da:	4543      	cmp	r3, r8
 80122dc:	d37c      	bcc.n	80123d8 <uxr_prepare_output_stream_fragmented+0x160>
 80122de:	f1ab 0a04 	sub.w	sl, fp, #4
 80122e2:	465a      	mov	r2, fp
 80122e4:	4649      	mov	r1, r9
 80122e6:	a808      	add	r0, sp, #32
 80122e8:	ebaa 0a03 	sub.w	sl, sl, r3
 80122ec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80122ee:	f8cd 8000 	str.w	r8, [sp]
 80122f2:	3308      	adds	r3, #8
 80122f4:	fa1f fa8a 	uxth.w	sl, sl
 80122f8:	9302      	str	r3, [sp, #8]
 80122fa:	2300      	movs	r3, #0
 80122fc:	f7fe fa8a 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8012300:	9b02      	ldr	r3, [sp, #8]
 8012302:	4652      	mov	r2, sl
 8012304:	210d      	movs	r1, #13
 8012306:	455b      	cmp	r3, fp
 8012308:	bf34      	ite	cc
 801230a:	2302      	movcc	r3, #2
 801230c:	2300      	movcs	r3, #0
 801230e:	a808      	add	r0, sp, #32
 8012310:	f7ff fe80 	bl	8012014 <uxr_buffer_submessage_header>
 8012314:	8921      	ldrh	r1, [r4, #8]
 8012316:	6863      	ldr	r3, [r4, #4]
 8012318:	4638      	mov	r0, r7
 801231a:	fbb7 f2f1 	udiv	r2, r7, r1
 801231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012322:	fb01 7212 	mls	r2, r1, r2, r7
 8012326:	2101      	movs	r1, #1
 8012328:	b292      	uxth	r2, r2
 801232a:	fb02 f303 	mul.w	r3, r2, r3
 801232e:	6822      	ldr	r2, [r4, #0]
 8012330:	f842 b003 	str.w	fp, [r2, r3]
 8012334:	f004 f9a2 	bl	801667c <uxr_seq_num_add>
 8012338:	9b03      	ldr	r3, [sp, #12]
 801233a:	f108 0104 	add.w	r1, r8, #4
 801233e:	4607      	mov	r7, r0
 8012340:	f1a3 0208 	sub.w	r2, r3, #8
 8012344:	4630      	mov	r0, r6
 8012346:	4449      	add	r1, r9
 8012348:	eba2 0208 	sub.w	r2, r2, r8
 801234c:	f7fe fa74 	bl	8010838 <ucdr_init_buffer>
 8012350:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012352:	2107      	movs	r1, #7
 8012354:	81e7      	strh	r7, [r4, #14]
 8012356:	1d1a      	adds	r2, r3, #4
 8012358:	2300      	movs	r3, #0
 801235a:	4630      	mov	r0, r6
 801235c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012360:	bf28      	it	cs
 8012362:	461a      	movcs	r2, r3
 8012364:	b292      	uxth	r2, r2
 8012366:	f7ff fe55 	bl	8012014 <uxr_buffer_submessage_header>
 801236a:	aa07      	add	r2, sp, #28
 801236c:	9904      	ldr	r1, [sp, #16]
 801236e:	4628      	mov	r0, r5
 8012370:	f7ff fce0 	bl	8011d34 <uxr_init_base_object_request>
 8012374:	4604      	mov	r4, r0
 8012376:	b320      	cbz	r0, 80123c2 <uxr_prepare_output_stream_fragmented+0x14a>
 8012378:	a907      	add	r1, sp, #28
 801237a:	4630      	mov	r0, r6
 801237c:	f000 ff08 	bl	8013190 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012380:	4630      	mov	r0, r6
 8012382:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012386:	1a52      	subs	r2, r2, r1
 8012388:	f7fe fa56 	bl	8010838 <ucdr_init_buffer>
 801238c:	9b05      	ldr	r3, [sp, #20]
 801238e:	9a02      	ldr	r2, [sp, #8]
 8012390:	4630      	mov	r0, r6
 8012392:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012396:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012398:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 801239c:	462a      	mov	r2, r5
 801239e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80123a2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80123a4:	4918      	ldr	r1, [pc, #96]	@ (8012408 <uxr_prepare_output_stream_fragmented+0x190>)
 80123a6:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80123aa:	f7fe fa19 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 80123ae:	4620      	mov	r0, r4
 80123b0:	b011      	add	sp, #68	@ 0x44
 80123b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80123b8:	4628      	mov	r0, r5
 80123ba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80123bc:	4798      	blx	r3
 80123be:	b920      	cbnz	r0, 80123ca <uxr_prepare_output_stream_fragmented+0x152>
 80123c0:	2400      	movs	r4, #0
 80123c2:	4620      	mov	r0, r4
 80123c4:	b011      	add	sp, #68	@ 0x44
 80123c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ca:	4620      	mov	r0, r4
 80123cc:	f004 f83e 	bl	801644c <get_available_free_slots>
 80123d0:	2800      	cmp	r0, #0
 80123d2:	f47f af6b 	bne.w	80122ac <uxr_prepare_output_stream_fragmented+0x34>
 80123d6:	e7f3      	b.n	80123c0 <uxr_prepare_output_stream_fragmented+0x148>
 80123d8:	4638      	mov	r0, r7
 80123da:	2101      	movs	r1, #1
 80123dc:	f004 f94e 	bl	801667c <uxr_seq_num_add>
 80123e0:	8922      	ldrh	r2, [r4, #8]
 80123e2:	6863      	ldr	r3, [r4, #4]
 80123e4:	4607      	mov	r7, r0
 80123e6:	fbb3 f9f2 	udiv	r9, r3, r2
 80123ea:	fbb0 f3f2 	udiv	r3, r0, r2
 80123ee:	fb02 0313 	mls	r3, r2, r3, r0
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	fb03 f909 	mul.w	r9, r3, r9
 80123f8:	6823      	ldr	r3, [r4, #0]
 80123fa:	f109 0904 	add.w	r9, r9, #4
 80123fe:	4499      	add	r9, r3
 8012400:	7b23      	ldrb	r3, [r4, #12]
 8012402:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012406:	e76a      	b.n	80122de <uxr_prepare_output_stream_fragmented+0x66>
 8012408:	08012105 	.word	0x08012105

0801240c <uxr_serialize_message_header>:
 801240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801240e:	4616      	mov	r6, r2
 8012410:	b083      	sub	sp, #12
 8012412:	4604      	mov	r4, r0
 8012414:	460d      	mov	r5, r1
 8012416:	9301      	str	r3, [sp, #4]
 8012418:	9f08      	ldr	r7, [sp, #32]
 801241a:	f7fd fa61 	bl	800f8e0 <ucdr_serialize_uint8_t>
 801241e:	4631      	mov	r1, r6
 8012420:	4620      	mov	r0, r4
 8012422:	f7fd fa5d 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012426:	9a01      	ldr	r2, [sp, #4]
 8012428:	2101      	movs	r1, #1
 801242a:	4620      	mov	r0, r4
 801242c:	f7fd fb04 	bl	800fa38 <ucdr_serialize_endian_uint16_t>
 8012430:	062b      	lsls	r3, r5, #24
 8012432:	d501      	bpl.n	8012438 <uxr_serialize_message_header+0x2c>
 8012434:	b003      	add	sp, #12
 8012436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012438:	2204      	movs	r2, #4
 801243a:	4639      	mov	r1, r7
 801243c:	4620      	mov	r0, r4
 801243e:	b003      	add	sp, #12
 8012440:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012444:	f003 b8de 	b.w	8015604 <ucdr_serialize_array_uint8_t>

08012448 <uxr_deserialize_message_header>:
 8012448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801244a:	4616      	mov	r6, r2
 801244c:	b083      	sub	sp, #12
 801244e:	4604      	mov	r4, r0
 8012450:	460d      	mov	r5, r1
 8012452:	9301      	str	r3, [sp, #4]
 8012454:	9f08      	ldr	r7, [sp, #32]
 8012456:	f7fd fa59 	bl	800f90c <ucdr_deserialize_uint8_t>
 801245a:	4631      	mov	r1, r6
 801245c:	4620      	mov	r0, r4
 801245e:	f7fd fa55 	bl	800f90c <ucdr_deserialize_uint8_t>
 8012462:	9a01      	ldr	r2, [sp, #4]
 8012464:	2101      	movs	r1, #1
 8012466:	4620      	mov	r0, r4
 8012468:	f7fd fbda 	bl	800fc20 <ucdr_deserialize_endian_uint16_t>
 801246c:	f995 3000 	ldrsb.w	r3, [r5]
 8012470:	2b00      	cmp	r3, #0
 8012472:	da01      	bge.n	8012478 <uxr_deserialize_message_header+0x30>
 8012474:	b003      	add	sp, #12
 8012476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012478:	2204      	movs	r2, #4
 801247a:	4639      	mov	r1, r7
 801247c:	4620      	mov	r0, r4
 801247e:	b003      	add	sp, #12
 8012480:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012484:	f003 b922 	b.w	80156cc <ucdr_deserialize_array_uint8_t>

08012488 <uxr_serialize_submessage_header>:
 8012488:	b530      	push	{r4, r5, lr}
 801248a:	4615      	mov	r5, r2
 801248c:	b083      	sub	sp, #12
 801248e:	4604      	mov	r4, r0
 8012490:	9301      	str	r3, [sp, #4]
 8012492:	f7fd fa25 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012496:	4629      	mov	r1, r5
 8012498:	4620      	mov	r0, r4
 801249a:	f7fd fa21 	bl	800f8e0 <ucdr_serialize_uint8_t>
 801249e:	9a01      	ldr	r2, [sp, #4]
 80124a0:	2101      	movs	r1, #1
 80124a2:	4620      	mov	r0, r4
 80124a4:	b003      	add	sp, #12
 80124a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124aa:	f7fd bac5 	b.w	800fa38 <ucdr_serialize_endian_uint16_t>
 80124ae:	bf00      	nop

080124b0 <uxr_deserialize_submessage_header>:
 80124b0:	b530      	push	{r4, r5, lr}
 80124b2:	4615      	mov	r5, r2
 80124b4:	b083      	sub	sp, #12
 80124b6:	4604      	mov	r4, r0
 80124b8:	9301      	str	r3, [sp, #4]
 80124ba:	f7fd fa27 	bl	800f90c <ucdr_deserialize_uint8_t>
 80124be:	4629      	mov	r1, r5
 80124c0:	4620      	mov	r0, r4
 80124c2:	f7fd fa23 	bl	800f90c <ucdr_deserialize_uint8_t>
 80124c6:	9a01      	ldr	r2, [sp, #4]
 80124c8:	2101      	movs	r1, #1
 80124ca:	4620      	mov	r0, r4
 80124cc:	b003      	add	sp, #12
 80124ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124d2:	f7fd bba5 	b.w	800fc20 <ucdr_deserialize_endian_uint16_t>
 80124d6:	bf00      	nop

080124d8 <uxr_serialize_CLIENT_Representation>:
 80124d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124dc:	2204      	movs	r2, #4
 80124de:	460e      	mov	r6, r1
 80124e0:	4605      	mov	r5, r0
 80124e2:	f003 f88f 	bl	8015604 <ucdr_serialize_array_uint8_t>
 80124e6:	4607      	mov	r7, r0
 80124e8:	2202      	movs	r2, #2
 80124ea:	1d31      	adds	r1, r6, #4
 80124ec:	4628      	mov	r0, r5
 80124ee:	f003 f889 	bl	8015604 <ucdr_serialize_array_uint8_t>
 80124f2:	4038      	ands	r0, r7
 80124f4:	2202      	movs	r2, #2
 80124f6:	1db1      	adds	r1, r6, #6
 80124f8:	b2c7      	uxtb	r7, r0
 80124fa:	4628      	mov	r0, r5
 80124fc:	f003 f882 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8012500:	2204      	movs	r2, #4
 8012502:	4007      	ands	r7, r0
 8012504:	f106 0108 	add.w	r1, r6, #8
 8012508:	4628      	mov	r0, r5
 801250a:	f003 f87b 	bl	8015604 <ucdr_serialize_array_uint8_t>
 801250e:	4007      	ands	r7, r0
 8012510:	7b31      	ldrb	r1, [r6, #12]
 8012512:	4628      	mov	r0, r5
 8012514:	f7fd f9e4 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012518:	7b71      	ldrb	r1, [r6, #13]
 801251a:	4007      	ands	r7, r0
 801251c:	4628      	mov	r0, r5
 801251e:	f7fd f9b1 	bl	800f884 <ucdr_serialize_bool>
 8012522:	7b73      	ldrb	r3, [r6, #13]
 8012524:	ea07 0800 	and.w	r8, r7, r0
 8012528:	b93b      	cbnz	r3, 801253a <uxr_serialize_CLIENT_Representation+0x62>
 801252a:	8bb1      	ldrh	r1, [r6, #28]
 801252c:	4628      	mov	r0, r5
 801252e:	f7fd fa03 	bl	800f938 <ucdr_serialize_uint16_t>
 8012532:	ea08 0000 	and.w	r0, r8, r0
 8012536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801253a:	6931      	ldr	r1, [r6, #16]
 801253c:	4628      	mov	r0, r5
 801253e:	f7fd fbe5 	bl	800fd0c <ucdr_serialize_uint32_t>
 8012542:	6933      	ldr	r3, [r6, #16]
 8012544:	b1e3      	cbz	r3, 8012580 <uxr_serialize_CLIENT_Representation+0xa8>
 8012546:	b1c0      	cbz	r0, 801257a <uxr_serialize_CLIENT_Representation+0xa2>
 8012548:	4637      	mov	r7, r6
 801254a:	f04f 0900 	mov.w	r9, #0
 801254e:	e000      	b.n	8012552 <uxr_serialize_CLIENT_Representation+0x7a>
 8012550:	b19c      	cbz	r4, 801257a <uxr_serialize_CLIENT_Representation+0xa2>
 8012552:	6979      	ldr	r1, [r7, #20]
 8012554:	4628      	mov	r0, r5
 8012556:	f003 f979 	bl	801584c <ucdr_serialize_string>
 801255a:	69b9      	ldr	r1, [r7, #24]
 801255c:	4604      	mov	r4, r0
 801255e:	4628      	mov	r0, r5
 8012560:	f003 f974 	bl	801584c <ucdr_serialize_string>
 8012564:	f109 0901 	add.w	r9, r9, #1
 8012568:	6933      	ldr	r3, [r6, #16]
 801256a:	4004      	ands	r4, r0
 801256c:	3708      	adds	r7, #8
 801256e:	4599      	cmp	r9, r3
 8012570:	b2e4      	uxtb	r4, r4
 8012572:	d3ed      	bcc.n	8012550 <uxr_serialize_CLIENT_Representation+0x78>
 8012574:	ea08 0804 	and.w	r8, r8, r4
 8012578:	e7d7      	b.n	801252a <uxr_serialize_CLIENT_Representation+0x52>
 801257a:	f04f 0800 	mov.w	r8, #0
 801257e:	e7d4      	b.n	801252a <uxr_serialize_CLIENT_Representation+0x52>
 8012580:	ea08 0800 	and.w	r8, r8, r0
 8012584:	e7d1      	b.n	801252a <uxr_serialize_CLIENT_Representation+0x52>
 8012586:	bf00      	nop

08012588 <uxr_deserialize_CLIENT_Representation>:
 8012588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801258c:	2204      	movs	r2, #4
 801258e:	460c      	mov	r4, r1
 8012590:	4605      	mov	r5, r0
 8012592:	f003 f89b 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012596:	4607      	mov	r7, r0
 8012598:	2202      	movs	r2, #2
 801259a:	1d21      	adds	r1, r4, #4
 801259c:	4628      	mov	r0, r5
 801259e:	f003 f895 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 80125a2:	4038      	ands	r0, r7
 80125a4:	2202      	movs	r2, #2
 80125a6:	1da1      	adds	r1, r4, #6
 80125a8:	b2c6      	uxtb	r6, r0
 80125aa:	4628      	mov	r0, r5
 80125ac:	f003 f88e 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 80125b0:	2204      	movs	r2, #4
 80125b2:	4006      	ands	r6, r0
 80125b4:	f104 0108 	add.w	r1, r4, #8
 80125b8:	4628      	mov	r0, r5
 80125ba:	f003 f887 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 80125be:	4006      	ands	r6, r0
 80125c0:	f104 010c 	add.w	r1, r4, #12
 80125c4:	4628      	mov	r0, r5
 80125c6:	f7fd f9a1 	bl	800f90c <ucdr_deserialize_uint8_t>
 80125ca:	f104 010d 	add.w	r1, r4, #13
 80125ce:	ea06 0700 	and.w	r7, r6, r0
 80125d2:	4628      	mov	r0, r5
 80125d4:	f7fd f96c 	bl	800f8b0 <ucdr_deserialize_bool>
 80125d8:	7b63      	ldrb	r3, [r4, #13]
 80125da:	4007      	ands	r7, r0
 80125dc:	b93b      	cbnz	r3, 80125ee <uxr_deserialize_CLIENT_Representation+0x66>
 80125de:	f104 011c 	add.w	r1, r4, #28
 80125e2:	4628      	mov	r0, r5
 80125e4:	f7fd faa8 	bl	800fb38 <ucdr_deserialize_uint16_t>
 80125e8:	4038      	ands	r0, r7
 80125ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125ee:	f104 0110 	add.w	r1, r4, #16
 80125f2:	4628      	mov	r0, r5
 80125f4:	f7fd fcba 	bl	800ff6c <ucdr_deserialize_uint32_t>
 80125f8:	6923      	ldr	r3, [r4, #16]
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d903      	bls.n	8012606 <uxr_deserialize_CLIENT_Representation+0x7e>
 80125fe:	2301      	movs	r3, #1
 8012600:	2700      	movs	r7, #0
 8012602:	75ab      	strb	r3, [r5, #22]
 8012604:	e7eb      	b.n	80125de <uxr_deserialize_CLIENT_Representation+0x56>
 8012606:	b30b      	cbz	r3, 801264c <uxr_deserialize_CLIENT_Representation+0xc4>
 8012608:	b1f0      	cbz	r0, 8012648 <uxr_deserialize_CLIENT_Representation+0xc0>
 801260a:	46a0      	mov	r8, r4
 801260c:	f04f 0900 	mov.w	r9, #0
 8012610:	e000      	b.n	8012614 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012612:	b1ce      	cbz	r6, 8012648 <uxr_deserialize_CLIENT_Representation+0xc0>
 8012614:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012618:	f108 0808 	add.w	r8, r8, #8
 801261c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012620:	4628      	mov	r0, r5
 8012622:	f003 f923 	bl	801586c <ucdr_deserialize_string>
 8012626:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801262a:	4606      	mov	r6, r0
 801262c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012630:	4628      	mov	r0, r5
 8012632:	f109 0901 	add.w	r9, r9, #1
 8012636:	f003 f919 	bl	801586c <ucdr_deserialize_string>
 801263a:	6923      	ldr	r3, [r4, #16]
 801263c:	4006      	ands	r6, r0
 801263e:	4599      	cmp	r9, r3
 8012640:	b2f6      	uxtb	r6, r6
 8012642:	d3e6      	bcc.n	8012612 <uxr_deserialize_CLIENT_Representation+0x8a>
 8012644:	4037      	ands	r7, r6
 8012646:	e7ca      	b.n	80125de <uxr_deserialize_CLIENT_Representation+0x56>
 8012648:	2700      	movs	r7, #0
 801264a:	e7c8      	b.n	80125de <uxr_deserialize_CLIENT_Representation+0x56>
 801264c:	4007      	ands	r7, r0
 801264e:	e7c6      	b.n	80125de <uxr_deserialize_CLIENT_Representation+0x56>

08012650 <uxr_serialize_AGENT_Representation>:
 8012650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012654:	2204      	movs	r2, #4
 8012656:	460f      	mov	r7, r1
 8012658:	4605      	mov	r5, r0
 801265a:	f002 ffd3 	bl	8015604 <ucdr_serialize_array_uint8_t>
 801265e:	4604      	mov	r4, r0
 8012660:	2202      	movs	r2, #2
 8012662:	1d39      	adds	r1, r7, #4
 8012664:	4628      	mov	r0, r5
 8012666:	f002 ffcd 	bl	8015604 <ucdr_serialize_array_uint8_t>
 801266a:	4020      	ands	r0, r4
 801266c:	2202      	movs	r2, #2
 801266e:	1db9      	adds	r1, r7, #6
 8012670:	b2c4      	uxtb	r4, r0
 8012672:	4628      	mov	r0, r5
 8012674:	f002 ffc6 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8012678:	7a39      	ldrb	r1, [r7, #8]
 801267a:	4004      	ands	r4, r0
 801267c:	4628      	mov	r0, r5
 801267e:	f7fd f901 	bl	800f884 <ucdr_serialize_bool>
 8012682:	7a3b      	ldrb	r3, [r7, #8]
 8012684:	ea00 0804 	and.w	r8, r0, r4
 8012688:	b913      	cbnz	r3, 8012690 <uxr_serialize_AGENT_Representation+0x40>
 801268a:	4640      	mov	r0, r8
 801268c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012690:	68f9      	ldr	r1, [r7, #12]
 8012692:	4628      	mov	r0, r5
 8012694:	f7fd fb3a 	bl	800fd0c <ucdr_serialize_uint32_t>
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	b303      	cbz	r3, 80126de <uxr_serialize_AGENT_Representation+0x8e>
 801269c:	b1d0      	cbz	r0, 80126d4 <uxr_serialize_AGENT_Representation+0x84>
 801269e:	463e      	mov	r6, r7
 80126a0:	f04f 0900 	mov.w	r9, #0
 80126a4:	e000      	b.n	80126a8 <uxr_serialize_AGENT_Representation+0x58>
 80126a6:	b1ac      	cbz	r4, 80126d4 <uxr_serialize_AGENT_Representation+0x84>
 80126a8:	6931      	ldr	r1, [r6, #16]
 80126aa:	4628      	mov	r0, r5
 80126ac:	f003 f8ce 	bl	801584c <ucdr_serialize_string>
 80126b0:	6971      	ldr	r1, [r6, #20]
 80126b2:	4604      	mov	r4, r0
 80126b4:	4628      	mov	r0, r5
 80126b6:	f003 f8c9 	bl	801584c <ucdr_serialize_string>
 80126ba:	f109 0901 	add.w	r9, r9, #1
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	4004      	ands	r4, r0
 80126c2:	3608      	adds	r6, #8
 80126c4:	4599      	cmp	r9, r3
 80126c6:	b2e4      	uxtb	r4, r4
 80126c8:	d3ed      	bcc.n	80126a6 <uxr_serialize_AGENT_Representation+0x56>
 80126ca:	ea08 0804 	and.w	r8, r8, r4
 80126ce:	4640      	mov	r0, r8
 80126d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126d4:	f04f 0800 	mov.w	r8, #0
 80126d8:	4640      	mov	r0, r8
 80126da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126de:	ea08 0800 	and.w	r8, r8, r0
 80126e2:	e7d2      	b.n	801268a <uxr_serialize_AGENT_Representation+0x3a>

080126e4 <uxr_serialize_DATAWRITER_Representation>:
 80126e4:	b570      	push	{r4, r5, r6, lr}
 80126e6:	460d      	mov	r5, r1
 80126e8:	7809      	ldrb	r1, [r1, #0]
 80126ea:	4606      	mov	r6, r0
 80126ec:	f7fd f8f8 	bl	800f8e0 <ucdr_serialize_uint8_t>
 80126f0:	4604      	mov	r4, r0
 80126f2:	b130      	cbz	r0, 8012702 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80126f4:	782b      	ldrb	r3, [r5, #0]
 80126f6:	2b02      	cmp	r3, #2
 80126f8:	d00c      	beq.n	8012714 <uxr_serialize_DATAWRITER_Representation+0x30>
 80126fa:	2b03      	cmp	r3, #3
 80126fc:	d010      	beq.n	8012720 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80126fe:	2b01      	cmp	r3, #1
 8012700:	d008      	beq.n	8012714 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012702:	2202      	movs	r2, #2
 8012704:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012708:	4630      	mov	r0, r6
 801270a:	f002 ff7b 	bl	8015604 <ucdr_serialize_array_uint8_t>
 801270e:	4020      	ands	r0, r4
 8012710:	b2c0      	uxtb	r0, r0
 8012712:	bd70      	pop	{r4, r5, r6, pc}
 8012714:	6869      	ldr	r1, [r5, #4]
 8012716:	4630      	mov	r0, r6
 8012718:	f003 f898 	bl	801584c <ucdr_serialize_string>
 801271c:	4604      	mov	r4, r0
 801271e:	e7f0      	b.n	8012702 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012720:	4629      	mov	r1, r5
 8012722:	4630      	mov	r0, r6
 8012724:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012728:	3104      	adds	r1, #4
 801272a:	f003 f863 	bl	80157f4 <ucdr_serialize_sequence_uint8_t>
 801272e:	4604      	mov	r4, r0
 8012730:	e7e7      	b.n	8012702 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012732:	bf00      	nop

08012734 <uxr_serialize_ObjectVariant.part.0>:
 8012734:	b570      	push	{r4, r5, r6, lr}
 8012736:	780b      	ldrb	r3, [r1, #0]
 8012738:	460c      	mov	r4, r1
 801273a:	4605      	mov	r5, r0
 801273c:	3b01      	subs	r3, #1
 801273e:	2b0d      	cmp	r3, #13
 8012740:	d854      	bhi.n	80127ec <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012742:	e8df f003 	tbb	[pc, r3]
 8012746:	0730      	.short	0x0730
 8012748:	07071b1b 	.word	0x07071b1b
 801274c:	0c530707 	.word	0x0c530707
 8012750:	494e0c0c 	.word	0x494e0c0c
 8012754:	3104      	adds	r1, #4
 8012756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801275a:	f7ff bfc3 	b.w	80126e4 <uxr_serialize_DATAWRITER_Representation>
 801275e:	7909      	ldrb	r1, [r1, #4]
 8012760:	f7fd f8be 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012764:	b1e8      	cbz	r0, 80127a2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012766:	7923      	ldrb	r3, [r4, #4]
 8012768:	2b01      	cmp	r3, #1
 801276a:	d001      	beq.n	8012770 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801276c:	2b02      	cmp	r3, #2
 801276e:	d13d      	bne.n	80127ec <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012770:	68a1      	ldr	r1, [r4, #8]
 8012772:	4628      	mov	r0, r5
 8012774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012778:	f003 b868 	b.w	801584c <ucdr_serialize_string>
 801277c:	7909      	ldrb	r1, [r1, #4]
 801277e:	f7fd f8af 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012782:	4606      	mov	r6, r0
 8012784:	b120      	cbz	r0, 8012790 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012786:	7923      	ldrb	r3, [r4, #4]
 8012788:	2b02      	cmp	r3, #2
 801278a:	d039      	beq.n	8012800 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801278c:	2b03      	cmp	r3, #3
 801278e:	d02f      	beq.n	80127f0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012790:	2202      	movs	r2, #2
 8012792:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012796:	4628      	mov	r0, r5
 8012798:	f002 ff34 	bl	8015604 <ucdr_serialize_array_uint8_t>
 801279c:	4030      	ands	r0, r6
 801279e:	b2c0      	uxtb	r0, r0
 80127a0:	bd70      	pop	{r4, r5, r6, pc}
 80127a2:	2000      	movs	r0, #0
 80127a4:	bd70      	pop	{r4, r5, r6, pc}
 80127a6:	7909      	ldrb	r1, [r1, #4]
 80127a8:	f7fd f89a 	bl	800f8e0 <ucdr_serialize_uint8_t>
 80127ac:	4606      	mov	r6, r0
 80127ae:	b158      	cbz	r0, 80127c8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80127b0:	7923      	ldrb	r3, [r4, #4]
 80127b2:	2b02      	cmp	r3, #2
 80127b4:	d003      	beq.n	80127be <uxr_serialize_ObjectVariant.part.0+0x8a>
 80127b6:	2b03      	cmp	r3, #3
 80127b8:	d028      	beq.n	801280c <uxr_serialize_ObjectVariant.part.0+0xd8>
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d104      	bne.n	80127c8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80127be:	68a1      	ldr	r1, [r4, #8]
 80127c0:	4628      	mov	r0, r5
 80127c2:	f003 f843 	bl	801584c <ucdr_serialize_string>
 80127c6:	4606      	mov	r6, r0
 80127c8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80127cc:	4628      	mov	r0, r5
 80127ce:	f7fd fdc3 	bl	8010358 <ucdr_serialize_int16_t>
 80127d2:	4030      	ands	r0, r6
 80127d4:	b2c0      	uxtb	r0, r0
 80127d6:	bd70      	pop	{r4, r5, r6, pc}
 80127d8:	3104      	adds	r1, #4
 80127da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127de:	f7ff be7b 	b.w	80124d8 <uxr_serialize_CLIENT_Representation>
 80127e2:	3104      	adds	r1, #4
 80127e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127e8:	f7ff bf32 	b.w	8012650 <uxr_serialize_AGENT_Representation>
 80127ec:	2001      	movs	r0, #1
 80127ee:	bd70      	pop	{r4, r5, r6, pc}
 80127f0:	68a2      	ldr	r2, [r4, #8]
 80127f2:	f104 010c 	add.w	r1, r4, #12
 80127f6:	4628      	mov	r0, r5
 80127f8:	f002 fffc 	bl	80157f4 <ucdr_serialize_sequence_uint8_t>
 80127fc:	4606      	mov	r6, r0
 80127fe:	e7c7      	b.n	8012790 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012800:	68a1      	ldr	r1, [r4, #8]
 8012802:	4628      	mov	r0, r5
 8012804:	f003 f822 	bl	801584c <ucdr_serialize_string>
 8012808:	4606      	mov	r6, r0
 801280a:	e7c1      	b.n	8012790 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801280c:	68a2      	ldr	r2, [r4, #8]
 801280e:	f104 010c 	add.w	r1, r4, #12
 8012812:	4628      	mov	r0, r5
 8012814:	f002 ffee 	bl	80157f4 <ucdr_serialize_sequence_uint8_t>
 8012818:	4606      	mov	r6, r0
 801281a:	e7d5      	b.n	80127c8 <uxr_serialize_ObjectVariant.part.0+0x94>

0801281c <uxr_deserialize_DATAWRITER_Representation>:
 801281c:	b570      	push	{r4, r5, r6, lr}
 801281e:	4606      	mov	r6, r0
 8012820:	460d      	mov	r5, r1
 8012822:	f7fd f873 	bl	800f90c <ucdr_deserialize_uint8_t>
 8012826:	4604      	mov	r4, r0
 8012828:	b130      	cbz	r0, 8012838 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801282a:	782b      	ldrb	r3, [r5, #0]
 801282c:	2b02      	cmp	r3, #2
 801282e:	d00c      	beq.n	801284a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012830:	2b03      	cmp	r3, #3
 8012832:	d012      	beq.n	801285a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012834:	2b01      	cmp	r3, #1
 8012836:	d008      	beq.n	801284a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012838:	2202      	movs	r2, #2
 801283a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801283e:	4630      	mov	r0, r6
 8012840:	f002 ff44 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012844:	4020      	ands	r0, r4
 8012846:	b2c0      	uxtb	r0, r0
 8012848:	bd70      	pop	{r4, r5, r6, pc}
 801284a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801284e:	6869      	ldr	r1, [r5, #4]
 8012850:	4630      	mov	r0, r6
 8012852:	f003 f80b 	bl	801586c <ucdr_deserialize_string>
 8012856:	4604      	mov	r4, r0
 8012858:	e7ee      	b.n	8012838 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801285a:	1d2b      	adds	r3, r5, #4
 801285c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012860:	f105 0108 	add.w	r1, r5, #8
 8012864:	4630      	mov	r0, r6
 8012866:	f002 ffd7 	bl	8015818 <ucdr_deserialize_sequence_uint8_t>
 801286a:	4604      	mov	r4, r0
 801286c:	e7e4      	b.n	8012838 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801286e:	bf00      	nop

08012870 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012870:	b570      	push	{r4, r5, r6, lr}
 8012872:	460d      	mov	r5, r1
 8012874:	7809      	ldrb	r1, [r1, #0]
 8012876:	4606      	mov	r6, r0
 8012878:	f7fd f804 	bl	800f884 <ucdr_serialize_bool>
 801287c:	782b      	ldrb	r3, [r5, #0]
 801287e:	4604      	mov	r4, r0
 8012880:	b94b      	cbnz	r3, 8012896 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012882:	7a29      	ldrb	r1, [r5, #8]
 8012884:	4630      	mov	r0, r6
 8012886:	f7fc fffd 	bl	800f884 <ucdr_serialize_bool>
 801288a:	7a2b      	ldrb	r3, [r5, #8]
 801288c:	4004      	ands	r4, r0
 801288e:	b2e4      	uxtb	r4, r4
 8012890:	b943      	cbnz	r3, 80128a4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012892:	4620      	mov	r0, r4
 8012894:	bd70      	pop	{r4, r5, r6, pc}
 8012896:	6869      	ldr	r1, [r5, #4]
 8012898:	4630      	mov	r0, r6
 801289a:	f002 ffd7 	bl	801584c <ucdr_serialize_string>
 801289e:	4004      	ands	r4, r0
 80128a0:	b2e4      	uxtb	r4, r4
 80128a2:	e7ee      	b.n	8012882 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80128a4:	68e9      	ldr	r1, [r5, #12]
 80128a6:	4630      	mov	r0, r6
 80128a8:	f002 ffd0 	bl	801584c <ucdr_serialize_string>
 80128ac:	4004      	ands	r4, r0
 80128ae:	4620      	mov	r0, r4
 80128b0:	bd70      	pop	{r4, r5, r6, pc}
 80128b2:	bf00      	nop

080128b4 <uxr_serialize_OBJK_Topic_Binary>:
 80128b4:	b570      	push	{r4, r5, r6, lr}
 80128b6:	460d      	mov	r5, r1
 80128b8:	4606      	mov	r6, r0
 80128ba:	6809      	ldr	r1, [r1, #0]
 80128bc:	f002 ffc6 	bl	801584c <ucdr_serialize_string>
 80128c0:	4604      	mov	r4, r0
 80128c2:	7929      	ldrb	r1, [r5, #4]
 80128c4:	4630      	mov	r0, r6
 80128c6:	f7fc ffdd 	bl	800f884 <ucdr_serialize_bool>
 80128ca:	792b      	ldrb	r3, [r5, #4]
 80128cc:	4004      	ands	r4, r0
 80128ce:	b2e4      	uxtb	r4, r4
 80128d0:	b943      	cbnz	r3, 80128e4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80128d2:	7b29      	ldrb	r1, [r5, #12]
 80128d4:	4630      	mov	r0, r6
 80128d6:	f7fc ffd5 	bl	800f884 <ucdr_serialize_bool>
 80128da:	7b2b      	ldrb	r3, [r5, #12]
 80128dc:	4004      	ands	r4, r0
 80128de:	b93b      	cbnz	r3, 80128f0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80128e0:	4620      	mov	r0, r4
 80128e2:	bd70      	pop	{r4, r5, r6, pc}
 80128e4:	68a9      	ldr	r1, [r5, #8]
 80128e6:	4630      	mov	r0, r6
 80128e8:	f002 ffb0 	bl	801584c <ucdr_serialize_string>
 80128ec:	4004      	ands	r4, r0
 80128ee:	e7f0      	b.n	80128d2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80128f0:	6929      	ldr	r1, [r5, #16]
 80128f2:	4630      	mov	r0, r6
 80128f4:	f002 ffaa 	bl	801584c <ucdr_serialize_string>
 80128f8:	4004      	ands	r4, r0
 80128fa:	b2e4      	uxtb	r4, r4
 80128fc:	4620      	mov	r0, r4
 80128fe:	bd70      	pop	{r4, r5, r6, pc}

08012900 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012904:	460c      	mov	r4, r1
 8012906:	7809      	ldrb	r1, [r1, #0]
 8012908:	4606      	mov	r6, r0
 801290a:	f7fc ffbb 	bl	800f884 <ucdr_serialize_bool>
 801290e:	7823      	ldrb	r3, [r4, #0]
 8012910:	4605      	mov	r5, r0
 8012912:	b96b      	cbnz	r3, 8012930 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012914:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012918:	4630      	mov	r0, r6
 801291a:	f7fc ffb3 	bl	800f884 <ucdr_serialize_bool>
 801291e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012922:	4005      	ands	r5, r0
 8012924:	b2ed      	uxtb	r5, r5
 8012926:	2b00      	cmp	r3, #0
 8012928:	d169      	bne.n	80129fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801292a:	4628      	mov	r0, r5
 801292c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012930:	6861      	ldr	r1, [r4, #4]
 8012932:	4630      	mov	r0, r6
 8012934:	f7fd f9ea 	bl	800fd0c <ucdr_serialize_uint32_t>
 8012938:	6863      	ldr	r3, [r4, #4]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d06b      	beq.n	8012a16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801293e:	2800      	cmp	r0, #0
 8012940:	d067      	beq.n	8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012942:	68a1      	ldr	r1, [r4, #8]
 8012944:	4630      	mov	r0, r6
 8012946:	f002 ff81 	bl	801584c <ucdr_serialize_string>
 801294a:	6863      	ldr	r3, [r4, #4]
 801294c:	2b01      	cmp	r3, #1
 801294e:	d953      	bls.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012950:	2800      	cmp	r0, #0
 8012952:	d05e      	beq.n	8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012954:	68e1      	ldr	r1, [r4, #12]
 8012956:	4630      	mov	r0, r6
 8012958:	f002 ff78 	bl	801584c <ucdr_serialize_string>
 801295c:	6863      	ldr	r3, [r4, #4]
 801295e:	2b02      	cmp	r3, #2
 8012960:	d94a      	bls.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012962:	2800      	cmp	r0, #0
 8012964:	d055      	beq.n	8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012966:	6921      	ldr	r1, [r4, #16]
 8012968:	4630      	mov	r0, r6
 801296a:	f002 ff6f 	bl	801584c <ucdr_serialize_string>
 801296e:	6863      	ldr	r3, [r4, #4]
 8012970:	2b03      	cmp	r3, #3
 8012972:	d941      	bls.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012974:	2800      	cmp	r0, #0
 8012976:	d04c      	beq.n	8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012978:	6961      	ldr	r1, [r4, #20]
 801297a:	4630      	mov	r0, r6
 801297c:	f002 ff66 	bl	801584c <ucdr_serialize_string>
 8012980:	6863      	ldr	r3, [r4, #4]
 8012982:	2b04      	cmp	r3, #4
 8012984:	d938      	bls.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012986:	2800      	cmp	r0, #0
 8012988:	d043      	beq.n	8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801298a:	69a1      	ldr	r1, [r4, #24]
 801298c:	4630      	mov	r0, r6
 801298e:	f002 ff5d 	bl	801584c <ucdr_serialize_string>
 8012992:	6863      	ldr	r3, [r4, #4]
 8012994:	2b05      	cmp	r3, #5
 8012996:	d92f      	bls.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012998:	2800      	cmp	r0, #0
 801299a:	d03a      	beq.n	8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801299c:	69e1      	ldr	r1, [r4, #28]
 801299e:	4630      	mov	r0, r6
 80129a0:	f002 ff54 	bl	801584c <ucdr_serialize_string>
 80129a4:	6863      	ldr	r3, [r4, #4]
 80129a6:	2b06      	cmp	r3, #6
 80129a8:	d926      	bls.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129aa:	b390      	cbz	r0, 8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129ac:	6a21      	ldr	r1, [r4, #32]
 80129ae:	4630      	mov	r0, r6
 80129b0:	f002 ff4c 	bl	801584c <ucdr_serialize_string>
 80129b4:	6863      	ldr	r3, [r4, #4]
 80129b6:	2b07      	cmp	r3, #7
 80129b8:	d91e      	bls.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129ba:	b350      	cbz	r0, 8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80129be:	4630      	mov	r0, r6
 80129c0:	f002 ff44 	bl	801584c <ucdr_serialize_string>
 80129c4:	6863      	ldr	r3, [r4, #4]
 80129c6:	2b08      	cmp	r3, #8
 80129c8:	d916      	bls.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129ca:	b310      	cbz	r0, 8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129cc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80129ce:	4630      	mov	r0, r6
 80129d0:	f002 ff3c 	bl	801584c <ucdr_serialize_string>
 80129d4:	6863      	ldr	r3, [r4, #4]
 80129d6:	2b09      	cmp	r3, #9
 80129d8:	d90e      	bls.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129da:	b1d0      	cbz	r0, 8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129dc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80129e0:	2709      	movs	r7, #9
 80129e2:	e000      	b.n	80129e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80129e4:	b1a8      	cbz	r0, 8012a12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129e6:	f858 1b04 	ldr.w	r1, [r8], #4
 80129ea:	4630      	mov	r0, r6
 80129ec:	f002 ff2e 	bl	801584c <ucdr_serialize_string>
 80129f0:	3701      	adds	r7, #1
 80129f2:	6862      	ldr	r2, [r4, #4]
 80129f4:	4297      	cmp	r7, r2
 80129f6:	d3f5      	bcc.n	80129e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80129f8:	4005      	ands	r5, r0
 80129fa:	b2ed      	uxtb	r5, r5
 80129fc:	e78a      	b.n	8012914 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80129fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012a00:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012a04:	4630      	mov	r0, r6
 8012a06:	f002 fef5 	bl	80157f4 <ucdr_serialize_sequence_uint8_t>
 8012a0a:	4005      	ands	r5, r0
 8012a0c:	4628      	mov	r0, r5
 8012a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a12:	2500      	movs	r5, #0
 8012a14:	e77e      	b.n	8012914 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012a16:	4028      	ands	r0, r5
 8012a18:	b2c5      	uxtb	r5, r0
 8012a1a:	e77b      	b.n	8012914 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012a1c <uxr_serialize_OBJK_Publisher_Binary>:
 8012a1c:	b570      	push	{r4, r5, r6, lr}
 8012a1e:	460d      	mov	r5, r1
 8012a20:	7809      	ldrb	r1, [r1, #0]
 8012a22:	4606      	mov	r6, r0
 8012a24:	f7fc ff2e 	bl	800f884 <ucdr_serialize_bool>
 8012a28:	782b      	ldrb	r3, [r5, #0]
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	b94b      	cbnz	r3, 8012a42 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012a2e:	7a29      	ldrb	r1, [r5, #8]
 8012a30:	4630      	mov	r0, r6
 8012a32:	f7fc ff27 	bl	800f884 <ucdr_serialize_bool>
 8012a36:	7a2b      	ldrb	r3, [r5, #8]
 8012a38:	4004      	ands	r4, r0
 8012a3a:	b2e4      	uxtb	r4, r4
 8012a3c:	b943      	cbnz	r3, 8012a50 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012a3e:	4620      	mov	r0, r4
 8012a40:	bd70      	pop	{r4, r5, r6, pc}
 8012a42:	6869      	ldr	r1, [r5, #4]
 8012a44:	4630      	mov	r0, r6
 8012a46:	f002 ff01 	bl	801584c <ucdr_serialize_string>
 8012a4a:	4004      	ands	r4, r0
 8012a4c:	b2e4      	uxtb	r4, r4
 8012a4e:	e7ee      	b.n	8012a2e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012a50:	f105 010c 	add.w	r1, r5, #12
 8012a54:	4630      	mov	r0, r6
 8012a56:	f7ff ff53 	bl	8012900 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012a5a:	4004      	ands	r4, r0
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	bd70      	pop	{r4, r5, r6, pc}

08012a60 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012a60:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012a64:	4688      	mov	r8, r1
 8012a66:	4681      	mov	r9, r0
 8012a68:	8809      	ldrh	r1, [r1, #0]
 8012a6a:	f7fc ff65 	bl	800f938 <ucdr_serialize_uint16_t>
 8012a6e:	4606      	mov	r6, r0
 8012a70:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012a74:	4648      	mov	r0, r9
 8012a76:	f7fc ff05 	bl	800f884 <ucdr_serialize_bool>
 8012a7a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012a7e:	4006      	ands	r6, r0
 8012a80:	b2f5      	uxtb	r5, r6
 8012a82:	b9eb      	cbnz	r3, 8012ac0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012a84:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012a88:	4648      	mov	r0, r9
 8012a8a:	f7fc fefb 	bl	800f884 <ucdr_serialize_bool>
 8012a8e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012a92:	4005      	ands	r5, r0
 8012a94:	bb7b      	cbnz	r3, 8012af6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012a96:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012a9a:	4648      	mov	r0, r9
 8012a9c:	f7fc fef2 	bl	800f884 <ucdr_serialize_bool>
 8012aa0:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012aa4:	4005      	ands	r5, r0
 8012aa6:	b9f3      	cbnz	r3, 8012ae6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012aa8:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012aac:	4648      	mov	r0, r9
 8012aae:	f7fc fee9 	bl	800f884 <ucdr_serialize_bool>
 8012ab2:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012ab6:	4005      	ands	r5, r0
 8012ab8:	b94b      	cbnz	r3, 8012ace <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012aba:	4628      	mov	r0, r5
 8012abc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012ac0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012ac4:	4648      	mov	r0, r9
 8012ac6:	f7fc ff37 	bl	800f938 <ucdr_serialize_uint16_t>
 8012aca:	4005      	ands	r5, r0
 8012acc:	e7da      	b.n	8012a84 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012ace:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012ad2:	f108 011c 	add.w	r1, r8, #28
 8012ad6:	4648      	mov	r0, r9
 8012ad8:	f002 fe8c 	bl	80157f4 <ucdr_serialize_sequence_uint8_t>
 8012adc:	4028      	ands	r0, r5
 8012ade:	b2c5      	uxtb	r5, r0
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012ae6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012aea:	4648      	mov	r0, r9
 8012aec:	f7fd f90e 	bl	800fd0c <ucdr_serialize_uint32_t>
 8012af0:	4028      	ands	r0, r5
 8012af2:	b2c5      	uxtb	r5, r0
 8012af4:	e7d8      	b.n	8012aa8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012af6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012afa:	4648      	mov	r0, r9
 8012afc:	f7fd f906 	bl	800fd0c <ucdr_serialize_uint32_t>
 8012b00:	4028      	ands	r0, r5
 8012b02:	b2c5      	uxtb	r5, r0
 8012b04:	e7c7      	b.n	8012a96 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012b06:	bf00      	nop

08012b08 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b0a:	2202      	movs	r2, #2
 8012b0c:	460d      	mov	r5, r1
 8012b0e:	4606      	mov	r6, r0
 8012b10:	f002 fd78 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8012b14:	4604      	mov	r4, r0
 8012b16:	78a9      	ldrb	r1, [r5, #2]
 8012b18:	4630      	mov	r0, r6
 8012b1a:	f7fc feb3 	bl	800f884 <ucdr_serialize_bool>
 8012b1e:	78ab      	ldrb	r3, [r5, #2]
 8012b20:	4004      	ands	r4, r0
 8012b22:	b2e4      	uxtb	r4, r4
 8012b24:	b90b      	cbnz	r3, 8012b2a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012b26:	4620      	mov	r0, r4
 8012b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b2a:	f105 0108 	add.w	r1, r5, #8
 8012b2e:	4630      	mov	r0, r6
 8012b30:	f7ff ff96 	bl	8012a60 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012b34:	4607      	mov	r7, r0
 8012b36:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012b3a:	4630      	mov	r0, r6
 8012b3c:	f7fc fea2 	bl	800f884 <ucdr_serialize_bool>
 8012b40:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012b44:	4038      	ands	r0, r7
 8012b46:	b2c7      	uxtb	r7, r0
 8012b48:	b913      	cbnz	r3, 8012b50 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012b4a:	403c      	ands	r4, r7
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b50:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012b54:	4630      	mov	r0, r6
 8012b56:	f7fd fb2f 	bl	80101b8 <ucdr_serialize_uint64_t>
 8012b5a:	4007      	ands	r7, r0
 8012b5c:	e7f5      	b.n	8012b4a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012b5e:	bf00      	nop

08012b60 <uxr_deserialize_ObjectVariant>:
 8012b60:	b570      	push	{r4, r5, r6, lr}
 8012b62:	4605      	mov	r5, r0
 8012b64:	460e      	mov	r6, r1
 8012b66:	f7fc fed1 	bl	800f90c <ucdr_deserialize_uint8_t>
 8012b6a:	b168      	cbz	r0, 8012b88 <uxr_deserialize_ObjectVariant+0x28>
 8012b6c:	7833      	ldrb	r3, [r6, #0]
 8012b6e:	4604      	mov	r4, r0
 8012b70:	3b01      	subs	r3, #1
 8012b72:	2b0d      	cmp	r3, #13
 8012b74:	d809      	bhi.n	8012b8a <uxr_deserialize_ObjectVariant+0x2a>
 8012b76:	e8df f003 	tbb	[pc, r3]
 8012b7a:	0a41      	.short	0x0a41
 8012b7c:	0a0a2323 	.word	0x0a0a2323
 8012b80:	10080a0a 	.word	0x10080a0a
 8012b84:	565c1010 	.word	0x565c1010
 8012b88:	2400      	movs	r4, #0
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	bd70      	pop	{r4, r5, r6, pc}
 8012b8e:	1d31      	adds	r1, r6, #4
 8012b90:	4628      	mov	r0, r5
 8012b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b96:	f7ff be41 	b.w	801281c <uxr_deserialize_DATAWRITER_Representation>
 8012b9a:	1d31      	adds	r1, r6, #4
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	f7fc feb5 	bl	800f90c <ucdr_deserialize_uint8_t>
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	d0f0      	beq.n	8012b88 <uxr_deserialize_ObjectVariant+0x28>
 8012ba6:	7933      	ldrb	r3, [r6, #4]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d001      	beq.n	8012bb0 <uxr_deserialize_ObjectVariant+0x50>
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	d1ec      	bne.n	8012b8a <uxr_deserialize_ObjectVariant+0x2a>
 8012bb0:	68b1      	ldr	r1, [r6, #8]
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bbc:	f002 be56 	b.w	801586c <ucdr_deserialize_string>
 8012bc0:	1d31      	adds	r1, r6, #4
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	f7fc fea2 	bl	800f90c <ucdr_deserialize_uint8_t>
 8012bc8:	4604      	mov	r4, r0
 8012bca:	b170      	cbz	r0, 8012bea <uxr_deserialize_ObjectVariant+0x8a>
 8012bcc:	7933      	ldrb	r3, [r6, #4]
 8012bce:	2b02      	cmp	r3, #2
 8012bd0:	d04c      	beq.n	8012c6c <uxr_deserialize_ObjectVariant+0x10c>
 8012bd2:	2b03      	cmp	r3, #3
 8012bd4:	d109      	bne.n	8012bea <uxr_deserialize_ObjectVariant+0x8a>
 8012bd6:	f106 0308 	add.w	r3, r6, #8
 8012bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bde:	f106 010c 	add.w	r1, r6, #12
 8012be2:	4628      	mov	r0, r5
 8012be4:	f002 fe18 	bl	8015818 <ucdr_deserialize_sequence_uint8_t>
 8012be8:	4604      	mov	r4, r0
 8012bea:	2202      	movs	r2, #2
 8012bec:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	f002 fd6b 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012bf6:	4020      	ands	r0, r4
 8012bf8:	b2c4      	uxtb	r4, r0
 8012bfa:	e7c6      	b.n	8012b8a <uxr_deserialize_ObjectVariant+0x2a>
 8012bfc:	1d31      	adds	r1, r6, #4
 8012bfe:	4628      	mov	r0, r5
 8012c00:	f7fc fe84 	bl	800f90c <ucdr_deserialize_uint8_t>
 8012c04:	4604      	mov	r4, r0
 8012c06:	b130      	cbz	r0, 8012c16 <uxr_deserialize_ObjectVariant+0xb6>
 8012c08:	7933      	ldrb	r3, [r6, #4]
 8012c0a:	2b02      	cmp	r3, #2
 8012c0c:	d036      	beq.n	8012c7c <uxr_deserialize_ObjectVariant+0x11c>
 8012c0e:	2b03      	cmp	r3, #3
 8012c10:	d03c      	beq.n	8012c8c <uxr_deserialize_ObjectVariant+0x12c>
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d032      	beq.n	8012c7c <uxr_deserialize_ObjectVariant+0x11c>
 8012c16:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	f7fd fc1c 	bl	8010458 <ucdr_deserialize_int16_t>
 8012c20:	4020      	ands	r0, r4
 8012c22:	b2c4      	uxtb	r4, r0
 8012c24:	e7b1      	b.n	8012b8a <uxr_deserialize_ObjectVariant+0x2a>
 8012c26:	1d31      	adds	r1, r6, #4
 8012c28:	4628      	mov	r0, r5
 8012c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c2e:	f7ff bcab 	b.w	8012588 <uxr_deserialize_CLIENT_Representation>
 8012c32:	2204      	movs	r2, #4
 8012c34:	4628      	mov	r0, r5
 8012c36:	18b1      	adds	r1, r6, r2
 8012c38:	f002 fd48 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012c3c:	4604      	mov	r4, r0
 8012c3e:	2202      	movs	r2, #2
 8012c40:	f106 0108 	add.w	r1, r6, #8
 8012c44:	4628      	mov	r0, r5
 8012c46:	f002 fd41 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012c4a:	4004      	ands	r4, r0
 8012c4c:	2202      	movs	r2, #2
 8012c4e:	f106 010a 	add.w	r1, r6, #10
 8012c52:	4628      	mov	r0, r5
 8012c54:	b2e4      	uxtb	r4, r4
 8012c56:	f002 fd39 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	f106 010c 	add.w	r1, r6, #12
 8012c60:	4628      	mov	r0, r5
 8012c62:	401c      	ands	r4, r3
 8012c64:	f7fc fe24 	bl	800f8b0 <ucdr_deserialize_bool>
 8012c68:	4004      	ands	r4, r0
 8012c6a:	e78e      	b.n	8012b8a <uxr_deserialize_ObjectVariant+0x2a>
 8012c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c70:	68b1      	ldr	r1, [r6, #8]
 8012c72:	4628      	mov	r0, r5
 8012c74:	f002 fdfa 	bl	801586c <ucdr_deserialize_string>
 8012c78:	4604      	mov	r4, r0
 8012c7a:	e7b6      	b.n	8012bea <uxr_deserialize_ObjectVariant+0x8a>
 8012c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c80:	68b1      	ldr	r1, [r6, #8]
 8012c82:	4628      	mov	r0, r5
 8012c84:	f002 fdf2 	bl	801586c <ucdr_deserialize_string>
 8012c88:	4604      	mov	r4, r0
 8012c8a:	e7c4      	b.n	8012c16 <uxr_deserialize_ObjectVariant+0xb6>
 8012c8c:	f106 0308 	add.w	r3, r6, #8
 8012c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c94:	f106 010c 	add.w	r1, r6, #12
 8012c98:	4628      	mov	r0, r5
 8012c9a:	f002 fdbd 	bl	8015818 <ucdr_deserialize_sequence_uint8_t>
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	e7b9      	b.n	8012c16 <uxr_deserialize_ObjectVariant+0xb6>
 8012ca2:	bf00      	nop

08012ca4 <uxr_deserialize_BaseObjectRequest>:
 8012ca4:	b570      	push	{r4, r5, r6, lr}
 8012ca6:	2202      	movs	r2, #2
 8012ca8:	4605      	mov	r5, r0
 8012caa:	460e      	mov	r6, r1
 8012cac:	f002 fd0e 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012cb0:	2202      	movs	r2, #2
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	18b1      	adds	r1, r6, r2
 8012cb8:	f002 fd08 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012cbc:	4020      	ands	r0, r4
 8012cbe:	b2c0      	uxtb	r0, r0
 8012cc0:	bd70      	pop	{r4, r5, r6, pc}
 8012cc2:	bf00      	nop

08012cc4 <uxr_serialize_ActivityInfoVariant>:
 8012cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cc8:	460e      	mov	r6, r1
 8012cca:	7809      	ldrb	r1, [r1, #0]
 8012ccc:	4680      	mov	r8, r0
 8012cce:	f7fc fe07 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012cd2:	4607      	mov	r7, r0
 8012cd4:	b138      	cbz	r0, 8012ce6 <uxr_serialize_ActivityInfoVariant+0x22>
 8012cd6:	7833      	ldrb	r3, [r6, #0]
 8012cd8:	2b06      	cmp	r3, #6
 8012cda:	f000 8081 	beq.w	8012de0 <uxr_serialize_ActivityInfoVariant+0x11c>
 8012cde:	2b0d      	cmp	r3, #13
 8012ce0:	d014      	beq.n	8012d0c <uxr_serialize_ActivityInfoVariant+0x48>
 8012ce2:	2b05      	cmp	r3, #5
 8012ce4:	d002      	beq.n	8012cec <uxr_serialize_ActivityInfoVariant+0x28>
 8012ce6:	4638      	mov	r0, r7
 8012ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cec:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012cf0:	4640      	mov	r0, r8
 8012cf2:	f7fd fb31 	bl	8010358 <ucdr_serialize_int16_t>
 8012cf6:	4607      	mov	r7, r0
 8012cf8:	4640      	mov	r0, r8
 8012cfa:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8012cfe:	f7fd fa5b 	bl	80101b8 <ucdr_serialize_uint64_t>
 8012d02:	4038      	ands	r0, r7
 8012d04:	b2c7      	uxtb	r7, r0
 8012d06:	4638      	mov	r0, r7
 8012d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d0c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012d10:	4640      	mov	r0, r8
 8012d12:	f7fd fb21 	bl	8010358 <ucdr_serialize_int16_t>
 8012d16:	68f1      	ldr	r1, [r6, #12]
 8012d18:	4607      	mov	r7, r0
 8012d1a:	4640      	mov	r0, r8
 8012d1c:	f7fc fff6 	bl	800fd0c <ucdr_serialize_uint32_t>
 8012d20:	68f3      	ldr	r3, [r6, #12]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d0ed      	beq.n	8012d02 <uxr_serialize_ActivityInfoVariant+0x3e>
 8012d26:	b318      	cbz	r0, 8012d70 <uxr_serialize_ActivityInfoVariant+0xac>
 8012d28:	f106 090c 	add.w	r9, r6, #12
 8012d2c:	2400      	movs	r4, #0
 8012d2e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012d32:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8012d36:	7c29      	ldrb	r1, [r5, #16]
 8012d38:	4640      	mov	r0, r8
 8012d3a:	f7fc fdd1 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012d3e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8012d42:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012d46:	2800      	cmp	r0, #0
 8012d48:	d051      	beq.n	8012dee <uxr_serialize_ActivityInfoVariant+0x12a>
 8012d4a:	7c2b      	ldrb	r3, [r5, #16]
 8012d4c:	00c9      	lsls	r1, r1, #3
 8012d4e:	2b03      	cmp	r3, #3
 8012d50:	d854      	bhi.n	8012dfc <uxr_serialize_ActivityInfoVariant+0x138>
 8012d52:	e8df f003 	tbb	[pc, r3]
 8012d56:	2133      	.short	0x2133
 8012d58:	020f      	.short	0x020f
 8012d5a:	4449      	add	r1, r9
 8012d5c:	4640      	mov	r0, r8
 8012d5e:	6889      	ldr	r1, [r1, #8]
 8012d60:	f002 fd74 	bl	801584c <ucdr_serialize_string>
 8012d64:	3401      	adds	r4, #1
 8012d66:	68f2      	ldr	r2, [r6, #12]
 8012d68:	4294      	cmp	r4, r2
 8012d6a:	d244      	bcs.n	8012df6 <uxr_serialize_ActivityInfoVariant+0x132>
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	d1de      	bne.n	8012d2e <uxr_serialize_ActivityInfoVariant+0x6a>
 8012d70:	2700      	movs	r7, #0
 8012d72:	e7b8      	b.n	8012ce6 <uxr_serialize_ActivityInfoVariant+0x22>
 8012d74:	3108      	adds	r1, #8
 8012d76:	44a2      	add	sl, r4
 8012d78:	2210      	movs	r2, #16
 8012d7a:	4640      	mov	r0, r8
 8012d7c:	4449      	add	r1, r9
 8012d7e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012d82:	f002 fc3f 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8012d86:	4605      	mov	r5, r0
 8012d88:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8012d8c:	4640      	mov	r0, r8
 8012d8e:	f7fc ffbd 	bl	800fd0c <ucdr_serialize_uint32_t>
 8012d92:	4028      	ands	r0, r5
 8012d94:	b2c0      	uxtb	r0, r0
 8012d96:	e7e5      	b.n	8012d64 <uxr_serialize_ActivityInfoVariant+0xa0>
 8012d98:	3108      	adds	r1, #8
 8012d9a:	44a2      	add	sl, r4
 8012d9c:	2204      	movs	r2, #4
 8012d9e:	4640      	mov	r0, r8
 8012da0:	4449      	add	r1, r9
 8012da2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012da6:	f002 fc2d 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8012daa:	4605      	mov	r5, r0
 8012dac:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8012db0:	4640      	mov	r0, r8
 8012db2:	f7fc fdc1 	bl	800f938 <ucdr_serialize_uint16_t>
 8012db6:	4028      	ands	r0, r5
 8012db8:	b2c0      	uxtb	r0, r0
 8012dba:	e7d3      	b.n	8012d64 <uxr_serialize_ActivityInfoVariant+0xa0>
 8012dbc:	3108      	adds	r1, #8
 8012dbe:	44a2      	add	sl, r4
 8012dc0:	2202      	movs	r2, #2
 8012dc2:	4640      	mov	r0, r8
 8012dc4:	4449      	add	r1, r9
 8012dc6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012dca:	f002 fc1b 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8012dce:	4605      	mov	r5, r0
 8012dd0:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8012dd4:	4640      	mov	r0, r8
 8012dd6:	f7fc fd83 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012dda:	4028      	ands	r0, r5
 8012ddc:	b2c0      	uxtb	r0, r0
 8012dde:	e7c1      	b.n	8012d64 <uxr_serialize_ActivityInfoVariant+0xa0>
 8012de0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012de4:	4640      	mov	r0, r8
 8012de6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dea:	f7fd bab5 	b.w	8010358 <ucdr_serialize_int16_t>
 8012dee:	3401      	adds	r4, #1
 8012df0:	68f2      	ldr	r2, [r6, #12]
 8012df2:	42a2      	cmp	r2, r4
 8012df4:	d8bc      	bhi.n	8012d70 <uxr_serialize_ActivityInfoVariant+0xac>
 8012df6:	4007      	ands	r7, r0
 8012df8:	b2ff      	uxtb	r7, r7
 8012dfa:	e774      	b.n	8012ce6 <uxr_serialize_ActivityInfoVariant+0x22>
 8012dfc:	3401      	adds	r4, #1
 8012dfe:	68f3      	ldr	r3, [r6, #12]
 8012e00:	3518      	adds	r5, #24
 8012e02:	429c      	cmp	r4, r3
 8012e04:	d397      	bcc.n	8012d36 <uxr_serialize_ActivityInfoVariant+0x72>
 8012e06:	e76e      	b.n	8012ce6 <uxr_serialize_ActivityInfoVariant+0x22>

08012e08 <uxr_deserialize_BaseObjectReply>:
 8012e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e0c:	2202      	movs	r2, #2
 8012e0e:	4606      	mov	r6, r0
 8012e10:	460f      	mov	r7, r1
 8012e12:	f002 fc5b 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012e16:	2202      	movs	r2, #2
 8012e18:	4605      	mov	r5, r0
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	18b9      	adds	r1, r7, r2
 8012e1e:	f002 fc55 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012e22:	4680      	mov	r8, r0
 8012e24:	1d39      	adds	r1, r7, #4
 8012e26:	4630      	mov	r0, r6
 8012e28:	f7fc fd70 	bl	800f90c <ucdr_deserialize_uint8_t>
 8012e2c:	ea05 0508 	and.w	r5, r5, r8
 8012e30:	4604      	mov	r4, r0
 8012e32:	1d79      	adds	r1, r7, #5
 8012e34:	4630      	mov	r0, r6
 8012e36:	402c      	ands	r4, r5
 8012e38:	f7fc fd68 	bl	800f90c <ucdr_deserialize_uint8_t>
 8012e3c:	4020      	ands	r0, r4
 8012e3e:	b2c0      	uxtb	r0, r0
 8012e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e44 <uxr_serialize_ReadSpecification>:
 8012e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e46:	460e      	mov	r6, r1
 8012e48:	4607      	mov	r7, r0
 8012e4a:	7809      	ldrb	r1, [r1, #0]
 8012e4c:	f7fc fd48 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012e50:	4604      	mov	r4, r0
 8012e52:	7871      	ldrb	r1, [r6, #1]
 8012e54:	4638      	mov	r0, r7
 8012e56:	f7fc fd43 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012e5a:	4004      	ands	r4, r0
 8012e5c:	78b1      	ldrb	r1, [r6, #2]
 8012e5e:	4638      	mov	r0, r7
 8012e60:	f7fc fd10 	bl	800f884 <ucdr_serialize_bool>
 8012e64:	78b3      	ldrb	r3, [r6, #2]
 8012e66:	b2e4      	uxtb	r4, r4
 8012e68:	4004      	ands	r4, r0
 8012e6a:	b943      	cbnz	r3, 8012e7e <uxr_serialize_ReadSpecification+0x3a>
 8012e6c:	7a31      	ldrb	r1, [r6, #8]
 8012e6e:	4638      	mov	r0, r7
 8012e70:	f7fc fd08 	bl	800f884 <ucdr_serialize_bool>
 8012e74:	7a33      	ldrb	r3, [r6, #8]
 8012e76:	4004      	ands	r4, r0
 8012e78:	b93b      	cbnz	r3, 8012e8a <uxr_serialize_ReadSpecification+0x46>
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e7e:	6871      	ldr	r1, [r6, #4]
 8012e80:	4638      	mov	r0, r7
 8012e82:	f002 fce3 	bl	801584c <ucdr_serialize_string>
 8012e86:	4004      	ands	r4, r0
 8012e88:	e7f0      	b.n	8012e6c <uxr_serialize_ReadSpecification+0x28>
 8012e8a:	8971      	ldrh	r1, [r6, #10]
 8012e8c:	4638      	mov	r0, r7
 8012e8e:	f7fc fd53 	bl	800f938 <ucdr_serialize_uint16_t>
 8012e92:	4605      	mov	r5, r0
 8012e94:	89b1      	ldrh	r1, [r6, #12]
 8012e96:	4638      	mov	r0, r7
 8012e98:	f7fc fd4e 	bl	800f938 <ucdr_serialize_uint16_t>
 8012e9c:	4005      	ands	r5, r0
 8012e9e:	89f1      	ldrh	r1, [r6, #14]
 8012ea0:	4638      	mov	r0, r7
 8012ea2:	b2ed      	uxtb	r5, r5
 8012ea4:	f7fc fd48 	bl	800f938 <ucdr_serialize_uint16_t>
 8012ea8:	8a31      	ldrh	r1, [r6, #16]
 8012eaa:	4025      	ands	r5, r4
 8012eac:	4604      	mov	r4, r0
 8012eae:	4638      	mov	r0, r7
 8012eb0:	4025      	ands	r5, r4
 8012eb2:	f7fc fd41 	bl	800f938 <ucdr_serialize_uint16_t>
 8012eb6:	ea00 0405 	and.w	r4, r0, r5
 8012eba:	4620      	mov	r0, r4
 8012ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ebe:	bf00      	nop

08012ec0 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012ec0:	f7ff bb0a 	b.w	80124d8 <uxr_serialize_CLIENT_Representation>

08012ec4 <uxr_serialize_CREATE_Payload>:
 8012ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ec6:	2202      	movs	r2, #2
 8012ec8:	4607      	mov	r7, r0
 8012eca:	460e      	mov	r6, r1
 8012ecc:	f002 fb9a 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8012ed0:	2202      	movs	r2, #2
 8012ed2:	4605      	mov	r5, r0
 8012ed4:	4638      	mov	r0, r7
 8012ed6:	18b1      	adds	r1, r6, r2
 8012ed8:	f002 fb94 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8012edc:	7931      	ldrb	r1, [r6, #4]
 8012ede:	4604      	mov	r4, r0
 8012ee0:	4638      	mov	r0, r7
 8012ee2:	f7fc fcfd 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012ee6:	b170      	cbz	r0, 8012f06 <uxr_serialize_CREATE_Payload+0x42>
 8012ee8:	7933      	ldrb	r3, [r6, #4]
 8012eea:	402c      	ands	r4, r5
 8012eec:	3b01      	subs	r3, #1
 8012eee:	b2e4      	uxtb	r4, r4
 8012ef0:	2b0d      	cmp	r3, #13
 8012ef2:	d809      	bhi.n	8012f08 <uxr_serialize_CREATE_Payload+0x44>
 8012ef4:	e8df f003 	tbb	[pc, r3]
 8012ef8:	23230a4c 	.word	0x23230a4c
 8012efc:	0a0a0a0a 	.word	0x0a0a0a0a
 8012f00:	12121208 	.word	0x12121208
 8012f04:	3e45      	.short	0x3e45
 8012f06:	2400      	movs	r4, #0
 8012f08:	4620      	mov	r0, r4
 8012f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f0c:	f106 0108 	add.w	r1, r6, #8
 8012f10:	4638      	mov	r0, r7
 8012f12:	f7ff fbe7 	bl	80126e4 <uxr_serialize_DATAWRITER_Representation>
 8012f16:	4004      	ands	r4, r0
 8012f18:	4620      	mov	r0, r4
 8012f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f1c:	7a31      	ldrb	r1, [r6, #8]
 8012f1e:	4638      	mov	r0, r7
 8012f20:	f7fc fcde 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d0ee      	beq.n	8012f06 <uxr_serialize_CREATE_Payload+0x42>
 8012f28:	7a33      	ldrb	r3, [r6, #8]
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d001      	beq.n	8012f32 <uxr_serialize_CREATE_Payload+0x6e>
 8012f2e:	2b02      	cmp	r3, #2
 8012f30:	d1ea      	bne.n	8012f08 <uxr_serialize_CREATE_Payload+0x44>
 8012f32:	68f1      	ldr	r1, [r6, #12]
 8012f34:	4638      	mov	r0, r7
 8012f36:	f002 fc89 	bl	801584c <ucdr_serialize_string>
 8012f3a:	4004      	ands	r4, r0
 8012f3c:	e7e4      	b.n	8012f08 <uxr_serialize_CREATE_Payload+0x44>
 8012f3e:	7a31      	ldrb	r1, [r6, #8]
 8012f40:	4638      	mov	r0, r7
 8012f42:	f7fc fccd 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012f46:	4605      	mov	r5, r0
 8012f48:	b158      	cbz	r0, 8012f62 <uxr_serialize_CREATE_Payload+0x9e>
 8012f4a:	7a33      	ldrb	r3, [r6, #8]
 8012f4c:	2b02      	cmp	r3, #2
 8012f4e:	d034      	beq.n	8012fba <uxr_serialize_CREATE_Payload+0xf6>
 8012f50:	2b03      	cmp	r3, #3
 8012f52:	d106      	bne.n	8012f62 <uxr_serialize_CREATE_Payload+0x9e>
 8012f54:	68f2      	ldr	r2, [r6, #12]
 8012f56:	f106 0110 	add.w	r1, r6, #16
 8012f5a:	4638      	mov	r0, r7
 8012f5c:	f002 fc4a 	bl	80157f4 <ucdr_serialize_sequence_uint8_t>
 8012f60:	4605      	mov	r5, r0
 8012f62:	2202      	movs	r2, #2
 8012f64:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012f68:	4638      	mov	r0, r7
 8012f6a:	f002 fb4b 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8012f6e:	4028      	ands	r0, r5
 8012f70:	4004      	ands	r4, r0
 8012f72:	e7c9      	b.n	8012f08 <uxr_serialize_CREATE_Payload+0x44>
 8012f74:	f106 0108 	add.w	r1, r6, #8
 8012f78:	4638      	mov	r0, r7
 8012f7a:	f7ff faad 	bl	80124d8 <uxr_serialize_CLIENT_Representation>
 8012f7e:	4004      	ands	r4, r0
 8012f80:	e7c2      	b.n	8012f08 <uxr_serialize_CREATE_Payload+0x44>
 8012f82:	f106 0108 	add.w	r1, r6, #8
 8012f86:	4638      	mov	r0, r7
 8012f88:	f7ff fb62 	bl	8012650 <uxr_serialize_AGENT_Representation>
 8012f8c:	4004      	ands	r4, r0
 8012f8e:	e7bb      	b.n	8012f08 <uxr_serialize_CREATE_Payload+0x44>
 8012f90:	7a31      	ldrb	r1, [r6, #8]
 8012f92:	4638      	mov	r0, r7
 8012f94:	f7fc fca4 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8012f98:	4605      	mov	r5, r0
 8012f9a:	b130      	cbz	r0, 8012faa <uxr_serialize_CREATE_Payload+0xe6>
 8012f9c:	7a33      	ldrb	r3, [r6, #8]
 8012f9e:	2b02      	cmp	r3, #2
 8012fa0:	d011      	beq.n	8012fc6 <uxr_serialize_CREATE_Payload+0x102>
 8012fa2:	2b03      	cmp	r3, #3
 8012fa4:	d015      	beq.n	8012fd2 <uxr_serialize_CREATE_Payload+0x10e>
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d00d      	beq.n	8012fc6 <uxr_serialize_CREATE_Payload+0x102>
 8012faa:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8012fae:	4638      	mov	r0, r7
 8012fb0:	f7fd f9d2 	bl	8010358 <ucdr_serialize_int16_t>
 8012fb4:	4028      	ands	r0, r5
 8012fb6:	4004      	ands	r4, r0
 8012fb8:	e7a6      	b.n	8012f08 <uxr_serialize_CREATE_Payload+0x44>
 8012fba:	68f1      	ldr	r1, [r6, #12]
 8012fbc:	4638      	mov	r0, r7
 8012fbe:	f002 fc45 	bl	801584c <ucdr_serialize_string>
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	e7cd      	b.n	8012f62 <uxr_serialize_CREATE_Payload+0x9e>
 8012fc6:	68f1      	ldr	r1, [r6, #12]
 8012fc8:	4638      	mov	r0, r7
 8012fca:	f002 fc3f 	bl	801584c <ucdr_serialize_string>
 8012fce:	4605      	mov	r5, r0
 8012fd0:	e7eb      	b.n	8012faa <uxr_serialize_CREATE_Payload+0xe6>
 8012fd2:	68f2      	ldr	r2, [r6, #12]
 8012fd4:	f106 0110 	add.w	r1, r6, #16
 8012fd8:	4638      	mov	r0, r7
 8012fda:	f002 fc0b 	bl	80157f4 <ucdr_serialize_sequence_uint8_t>
 8012fde:	4605      	mov	r5, r0
 8012fe0:	e7e3      	b.n	8012faa <uxr_serialize_CREATE_Payload+0xe6>
 8012fe2:	bf00      	nop

08012fe4 <uxr_deserialize_GET_INFO_Payload>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	2202      	movs	r2, #2
 8012fe8:	4605      	mov	r5, r0
 8012fea:	460e      	mov	r6, r1
 8012fec:	f002 fb6e 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012ff0:	2202      	movs	r2, #2
 8012ff2:	4604      	mov	r4, r0
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	18b1      	adds	r1, r6, r2
 8012ff8:	f002 fb68 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	1d31      	adds	r1, r6, #4
 8013000:	4628      	mov	r0, r5
 8013002:	401c      	ands	r4, r3
 8013004:	f7fc ffb2 	bl	800ff6c <ucdr_deserialize_uint32_t>
 8013008:	b2e4      	uxtb	r4, r4
 801300a:	4020      	ands	r0, r4
 801300c:	bd70      	pop	{r4, r5, r6, pc}
 801300e:	bf00      	nop

08013010 <uxr_serialize_DELETE_Payload>:
 8013010:	b570      	push	{r4, r5, r6, lr}
 8013012:	2202      	movs	r2, #2
 8013014:	4605      	mov	r5, r0
 8013016:	460e      	mov	r6, r1
 8013018:	f002 faf4 	bl	8015604 <ucdr_serialize_array_uint8_t>
 801301c:	2202      	movs	r2, #2
 801301e:	4604      	mov	r4, r0
 8013020:	4628      	mov	r0, r5
 8013022:	18b1      	adds	r1, r6, r2
 8013024:	f002 faee 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8013028:	4020      	ands	r0, r4
 801302a:	b2c0      	uxtb	r0, r0
 801302c:	bd70      	pop	{r4, r5, r6, pc}
 801302e:	bf00      	nop

08013030 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013034:	460e      	mov	r6, r1
 8013036:	4605      	mov	r5, r0
 8013038:	f7fc fc68 	bl	800f90c <ucdr_deserialize_uint8_t>
 801303c:	4604      	mov	r4, r0
 801303e:	1c71      	adds	r1, r6, #1
 8013040:	4628      	mov	r0, r5
 8013042:	f7fc fc63 	bl	800f90c <ucdr_deserialize_uint8_t>
 8013046:	2204      	movs	r2, #4
 8013048:	4681      	mov	r9, r0
 801304a:	4628      	mov	r0, r5
 801304c:	18b1      	adds	r1, r6, r2
 801304e:	f002 fb3d 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8013052:	f106 0108 	add.w	r1, r6, #8
 8013056:	4680      	mov	r8, r0
 8013058:	2202      	movs	r2, #2
 801305a:	4628      	mov	r0, r5
 801305c:	f002 fb36 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8013060:	ea04 0309 	and.w	r3, r4, r9
 8013064:	4607      	mov	r7, r0
 8013066:	2202      	movs	r2, #2
 8013068:	b2db      	uxtb	r3, r3
 801306a:	f106 010a 	add.w	r1, r6, #10
 801306e:	4628      	mov	r0, r5
 8013070:	ea03 0408 	and.w	r4, r3, r8
 8013074:	f002 fb2a 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8013078:	4603      	mov	r3, r0
 801307a:	4628      	mov	r0, r5
 801307c:	403c      	ands	r4, r7
 801307e:	f106 010c 	add.w	r1, r6, #12
 8013082:	461d      	mov	r5, r3
 8013084:	f7fc fc14 	bl	800f8b0 <ucdr_deserialize_bool>
 8013088:	4025      	ands	r5, r4
 801308a:	4028      	ands	r0, r5
 801308c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013090 <uxr_deserialize_STATUS_Payload>:
 8013090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013094:	2202      	movs	r2, #2
 8013096:	4606      	mov	r6, r0
 8013098:	460f      	mov	r7, r1
 801309a:	f002 fb17 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 801309e:	2202      	movs	r2, #2
 80130a0:	4605      	mov	r5, r0
 80130a2:	4630      	mov	r0, r6
 80130a4:	18b9      	adds	r1, r7, r2
 80130a6:	f002 fb11 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 80130aa:	4680      	mov	r8, r0
 80130ac:	1d39      	adds	r1, r7, #4
 80130ae:	4630      	mov	r0, r6
 80130b0:	f7fc fc2c 	bl	800f90c <ucdr_deserialize_uint8_t>
 80130b4:	ea05 0508 	and.w	r5, r5, r8
 80130b8:	4604      	mov	r4, r0
 80130ba:	1d79      	adds	r1, r7, #5
 80130bc:	4630      	mov	r0, r6
 80130be:	402c      	ands	r4, r5
 80130c0:	f7fc fc24 	bl	800f90c <ucdr_deserialize_uint8_t>
 80130c4:	4020      	ands	r0, r4
 80130c6:	b2c0      	uxtb	r0, r0
 80130c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130cc <uxr_serialize_INFO_Payload>:
 80130cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130d0:	2202      	movs	r2, #2
 80130d2:	460c      	mov	r4, r1
 80130d4:	4605      	mov	r5, r0
 80130d6:	f002 fa95 	bl	8015604 <ucdr_serialize_array_uint8_t>
 80130da:	2202      	movs	r2, #2
 80130dc:	4680      	mov	r8, r0
 80130de:	4628      	mov	r0, r5
 80130e0:	18a1      	adds	r1, r4, r2
 80130e2:	f002 fa8f 	bl	8015604 <ucdr_serialize_array_uint8_t>
 80130e6:	4607      	mov	r7, r0
 80130e8:	7921      	ldrb	r1, [r4, #4]
 80130ea:	4628      	mov	r0, r5
 80130ec:	f7fc fbf8 	bl	800f8e0 <ucdr_serialize_uint8_t>
 80130f0:	ea08 0807 	and.w	r8, r8, r7
 80130f4:	4606      	mov	r6, r0
 80130f6:	7961      	ldrb	r1, [r4, #5]
 80130f8:	4628      	mov	r0, r5
 80130fa:	ea06 0608 	and.w	r6, r6, r8
 80130fe:	f7fc fbef 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8013102:	7a21      	ldrb	r1, [r4, #8]
 8013104:	4030      	ands	r0, r6
 8013106:	b2c7      	uxtb	r7, r0
 8013108:	4628      	mov	r0, r5
 801310a:	f7fc fbbb 	bl	800f884 <ucdr_serialize_bool>
 801310e:	7a23      	ldrb	r3, [r4, #8]
 8013110:	4606      	mov	r6, r0
 8013112:	b96b      	cbnz	r3, 8013130 <uxr_serialize_INFO_Payload+0x64>
 8013114:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013118:	4628      	mov	r0, r5
 801311a:	f7fc fbb3 	bl	800f884 <ucdr_serialize_bool>
 801311e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013122:	4030      	ands	r0, r6
 8013124:	b2c6      	uxtb	r6, r0
 8013126:	b983      	cbnz	r3, 801314a <uxr_serialize_INFO_Payload+0x7e>
 8013128:	ea06 0007 	and.w	r0, r6, r7
 801312c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013130:	7b21      	ldrb	r1, [r4, #12]
 8013132:	4628      	mov	r0, r5
 8013134:	f7fc fbd4 	bl	800f8e0 <ucdr_serialize_uint8_t>
 8013138:	b188      	cbz	r0, 801315e <uxr_serialize_INFO_Payload+0x92>
 801313a:	f104 010c 	add.w	r1, r4, #12
 801313e:	4628      	mov	r0, r5
 8013140:	f7ff faf8 	bl	8012734 <uxr_serialize_ObjectVariant.part.0>
 8013144:	4030      	ands	r0, r6
 8013146:	b2c6      	uxtb	r6, r0
 8013148:	e7e4      	b.n	8013114 <uxr_serialize_INFO_Payload+0x48>
 801314a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801314e:	4628      	mov	r0, r5
 8013150:	f7ff fdb8 	bl	8012cc4 <uxr_serialize_ActivityInfoVariant>
 8013154:	4006      	ands	r6, r0
 8013156:	ea06 0007 	and.w	r0, r6, r7
 801315a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801315e:	4606      	mov	r6, r0
 8013160:	e7d8      	b.n	8013114 <uxr_serialize_INFO_Payload+0x48>
 8013162:	bf00      	nop

08013164 <uxr_serialize_READ_DATA_Payload>:
 8013164:	b570      	push	{r4, r5, r6, lr}
 8013166:	2202      	movs	r2, #2
 8013168:	4605      	mov	r5, r0
 801316a:	460e      	mov	r6, r1
 801316c:	f002 fa4a 	bl	8015604 <ucdr_serialize_array_uint8_t>
 8013170:	2202      	movs	r2, #2
 8013172:	4604      	mov	r4, r0
 8013174:	4628      	mov	r0, r5
 8013176:	18b1      	adds	r1, r6, r2
 8013178:	f002 fa44 	bl	8015604 <ucdr_serialize_array_uint8_t>
 801317c:	4603      	mov	r3, r0
 801317e:	1d31      	adds	r1, r6, #4
 8013180:	4628      	mov	r0, r5
 8013182:	401c      	ands	r4, r3
 8013184:	f7ff fe5e 	bl	8012e44 <uxr_serialize_ReadSpecification>
 8013188:	b2e4      	uxtb	r4, r4
 801318a:	4020      	ands	r0, r4
 801318c:	bd70      	pop	{r4, r5, r6, pc}
 801318e:	bf00      	nop

08013190 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013190:	b570      	push	{r4, r5, r6, lr}
 8013192:	2202      	movs	r2, #2
 8013194:	4605      	mov	r5, r0
 8013196:	460e      	mov	r6, r1
 8013198:	f002 fa34 	bl	8015604 <ucdr_serialize_array_uint8_t>
 801319c:	2202      	movs	r2, #2
 801319e:	4604      	mov	r4, r0
 80131a0:	4628      	mov	r0, r5
 80131a2:	18b1      	adds	r1, r6, r2
 80131a4:	f002 fa2e 	bl	8015604 <ucdr_serialize_array_uint8_t>
 80131a8:	4020      	ands	r0, r4
 80131aa:	b2c0      	uxtb	r0, r0
 80131ac:	bd70      	pop	{r4, r5, r6, pc}
 80131ae:	bf00      	nop

080131b0 <uxr_serialize_ACKNACK_Payload>:
 80131b0:	b570      	push	{r4, r5, r6, lr}
 80131b2:	460c      	mov	r4, r1
 80131b4:	4605      	mov	r5, r0
 80131b6:	460e      	mov	r6, r1
 80131b8:	f834 1b02 	ldrh.w	r1, [r4], #2
 80131bc:	f7fc fbbc 	bl	800f938 <ucdr_serialize_uint16_t>
 80131c0:	2202      	movs	r2, #2
 80131c2:	4621      	mov	r1, r4
 80131c4:	4604      	mov	r4, r0
 80131c6:	4628      	mov	r0, r5
 80131c8:	f002 fa1c 	bl	8015604 <ucdr_serialize_array_uint8_t>
 80131cc:	4603      	mov	r3, r0
 80131ce:	7931      	ldrb	r1, [r6, #4]
 80131d0:	4628      	mov	r0, r5
 80131d2:	401c      	ands	r4, r3
 80131d4:	f7fc fb84 	bl	800f8e0 <ucdr_serialize_uint8_t>
 80131d8:	b2e4      	uxtb	r4, r4
 80131da:	4020      	ands	r0, r4
 80131dc:	bd70      	pop	{r4, r5, r6, pc}
 80131de:	bf00      	nop

080131e0 <uxr_deserialize_ACKNACK_Payload>:
 80131e0:	b570      	push	{r4, r5, r6, lr}
 80131e2:	460e      	mov	r6, r1
 80131e4:	4605      	mov	r5, r0
 80131e6:	f7fc fca7 	bl	800fb38 <ucdr_deserialize_uint16_t>
 80131ea:	2202      	movs	r2, #2
 80131ec:	4604      	mov	r4, r0
 80131ee:	4628      	mov	r0, r5
 80131f0:	18b1      	adds	r1, r6, r2
 80131f2:	f002 fa6b 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 80131f6:	4603      	mov	r3, r0
 80131f8:	1d31      	adds	r1, r6, #4
 80131fa:	4628      	mov	r0, r5
 80131fc:	401c      	ands	r4, r3
 80131fe:	f7fc fb85 	bl	800f90c <ucdr_deserialize_uint8_t>
 8013202:	b2e4      	uxtb	r4, r4
 8013204:	4020      	ands	r0, r4
 8013206:	bd70      	pop	{r4, r5, r6, pc}

08013208 <uxr_serialize_HEARTBEAT_Payload>:
 8013208:	b570      	push	{r4, r5, r6, lr}
 801320a:	460d      	mov	r5, r1
 801320c:	4606      	mov	r6, r0
 801320e:	8809      	ldrh	r1, [r1, #0]
 8013210:	f7fc fb92 	bl	800f938 <ucdr_serialize_uint16_t>
 8013214:	8869      	ldrh	r1, [r5, #2]
 8013216:	4604      	mov	r4, r0
 8013218:	4630      	mov	r0, r6
 801321a:	f7fc fb8d 	bl	800f938 <ucdr_serialize_uint16_t>
 801321e:	4603      	mov	r3, r0
 8013220:	7929      	ldrb	r1, [r5, #4]
 8013222:	4630      	mov	r0, r6
 8013224:	401c      	ands	r4, r3
 8013226:	f7fc fb5b 	bl	800f8e0 <ucdr_serialize_uint8_t>
 801322a:	b2e4      	uxtb	r4, r4
 801322c:	4020      	ands	r0, r4
 801322e:	bd70      	pop	{r4, r5, r6, pc}

08013230 <uxr_deserialize_HEARTBEAT_Payload>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	460e      	mov	r6, r1
 8013234:	4605      	mov	r5, r0
 8013236:	f7fc fc7f 	bl	800fb38 <ucdr_deserialize_uint16_t>
 801323a:	4604      	mov	r4, r0
 801323c:	1cb1      	adds	r1, r6, #2
 801323e:	4628      	mov	r0, r5
 8013240:	f7fc fc7a 	bl	800fb38 <ucdr_deserialize_uint16_t>
 8013244:	4603      	mov	r3, r0
 8013246:	1d31      	adds	r1, r6, #4
 8013248:	4628      	mov	r0, r5
 801324a:	401c      	ands	r4, r3
 801324c:	f7fc fb5e 	bl	800f90c <ucdr_deserialize_uint8_t>
 8013250:	b2e4      	uxtb	r4, r4
 8013252:	4020      	ands	r0, r4
 8013254:	bd70      	pop	{r4, r5, r6, pc}
 8013256:	bf00      	nop

08013258 <uxr_serialize_TIMESTAMP_Payload>:
 8013258:	b570      	push	{r4, r5, r6, lr}
 801325a:	460d      	mov	r5, r1
 801325c:	4606      	mov	r6, r0
 801325e:	6809      	ldr	r1, [r1, #0]
 8013260:	f7fd f96e 	bl	8010540 <ucdr_serialize_int32_t>
 8013264:	4604      	mov	r4, r0
 8013266:	6869      	ldr	r1, [r5, #4]
 8013268:	4630      	mov	r0, r6
 801326a:	f7fc fd4f 	bl	800fd0c <ucdr_serialize_uint32_t>
 801326e:	4020      	ands	r0, r4
 8013270:	b2c0      	uxtb	r0, r0
 8013272:	bd70      	pop	{r4, r5, r6, pc}

08013274 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013278:	460e      	mov	r6, r1
 801327a:	4605      	mov	r5, r0
 801327c:	f7fd f9f8 	bl	8010670 <ucdr_deserialize_int32_t>
 8013280:	4607      	mov	r7, r0
 8013282:	1d31      	adds	r1, r6, #4
 8013284:	4628      	mov	r0, r5
 8013286:	f7fc fe71 	bl	800ff6c <ucdr_deserialize_uint32_t>
 801328a:	4680      	mov	r8, r0
 801328c:	f106 0108 	add.w	r1, r6, #8
 8013290:	4628      	mov	r0, r5
 8013292:	f7fd f9ed 	bl	8010670 <ucdr_deserialize_int32_t>
 8013296:	ea07 0708 	and.w	r7, r7, r8
 801329a:	4604      	mov	r4, r0
 801329c:	f106 010c 	add.w	r1, r6, #12
 80132a0:	4628      	mov	r0, r5
 80132a2:	403c      	ands	r4, r7
 80132a4:	f7fc fe62 	bl	800ff6c <ucdr_deserialize_uint32_t>
 80132a8:	f106 0110 	add.w	r1, r6, #16
 80132ac:	4004      	ands	r4, r0
 80132ae:	4628      	mov	r0, r5
 80132b0:	f7fd f9de 	bl	8010670 <ucdr_deserialize_int32_t>
 80132b4:	4603      	mov	r3, r0
 80132b6:	b2e4      	uxtb	r4, r4
 80132b8:	4628      	mov	r0, r5
 80132ba:	461d      	mov	r5, r3
 80132bc:	f106 0114 	add.w	r1, r6, #20
 80132c0:	f7fc fe54 	bl	800ff6c <ucdr_deserialize_uint32_t>
 80132c4:	402c      	ands	r4, r5
 80132c6:	4020      	ands	r0, r4
 80132c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132cc <uxr_deserialize_SampleIdentity>:
 80132cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d0:	4604      	mov	r4, r0
 80132d2:	460d      	mov	r5, r1
 80132d4:	220c      	movs	r2, #12
 80132d6:	f002 f9f9 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 80132da:	2203      	movs	r2, #3
 80132dc:	f105 010c 	add.w	r1, r5, #12
 80132e0:	4607      	mov	r7, r0
 80132e2:	4620      	mov	r0, r4
 80132e4:	f002 f9f2 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 80132e8:	f105 010f 	add.w	r1, r5, #15
 80132ec:	4680      	mov	r8, r0
 80132ee:	4620      	mov	r0, r4
 80132f0:	f7fc fb0c 	bl	800f90c <ucdr_deserialize_uint8_t>
 80132f4:	f105 0110 	add.w	r1, r5, #16
 80132f8:	4606      	mov	r6, r0
 80132fa:	4620      	mov	r0, r4
 80132fc:	f7fd f9b8 	bl	8010670 <ucdr_deserialize_int32_t>
 8013300:	ea07 0708 	and.w	r7, r7, r8
 8013304:	4603      	mov	r3, r0
 8013306:	4620      	mov	r0, r4
 8013308:	403e      	ands	r6, r7
 801330a:	f105 0114 	add.w	r1, r5, #20
 801330e:	461c      	mov	r4, r3
 8013310:	f7fc fe2c 	bl	800ff6c <ucdr_deserialize_uint32_t>
 8013314:	4034      	ands	r4, r6
 8013316:	4020      	ands	r0, r4
 8013318:	b2c0      	uxtb	r0, r0
 801331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801331e:	bf00      	nop

08013320 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013320:	280b      	cmp	r0, #11
 8013322:	dc0d      	bgt.n	8013340 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013324:	2800      	cmp	r0, #0
 8013326:	db09      	blt.n	801333c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013328:	280b      	cmp	r0, #11
 801332a:	d807      	bhi.n	801333c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801332c:	e8df f000 	tbb	[pc, r0]
 8013330:	07060607 	.word	0x07060607
 8013334:	06060606 	.word	0x06060606
 8013338:	07070606 	.word	0x07070606
 801333c:	2001      	movs	r0, #1
 801333e:	4770      	bx	lr
 8013340:	28cb      	cmp	r0, #203	@ 0xcb
 8013342:	bf18      	it	ne
 8013344:	2001      	movne	r0, #1
 8013346:	4770      	bx	lr

08013348 <rcl_get_zero_initialized_context>:
 8013348:	4a03      	ldr	r2, [pc, #12]	@ (8013358 <rcl_get_zero_initialized_context+0x10>)
 801334a:	4603      	mov	r3, r0
 801334c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013350:	e883 0003 	stmia.w	r3, {r0, r1}
 8013354:	4618      	mov	r0, r3
 8013356:	4770      	bx	lr
 8013358:	0801933c 	.word	0x0801933c

0801335c <rcl_context_is_valid>:
 801335c:	b118      	cbz	r0, 8013366 <rcl_context_is_valid+0xa>
 801335e:	6840      	ldr	r0, [r0, #4]
 8013360:	3800      	subs	r0, #0
 8013362:	bf18      	it	ne
 8013364:	2001      	movne	r0, #1
 8013366:	4770      	bx	lr

08013368 <__cleanup_context>:
 8013368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801336c:	4606      	mov	r6, r0
 801336e:	2300      	movs	r3, #0
 8013370:	6800      	ldr	r0, [r0, #0]
 8013372:	6073      	str	r3, [r6, #4]
 8013374:	2800      	cmp	r0, #0
 8013376:	d049      	beq.n	801340c <__cleanup_context+0xa4>
 8013378:	6947      	ldr	r7, [r0, #20]
 801337a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801337e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013382:	b137      	cbz	r7, 8013392 <__cleanup_context+0x2a>
 8013384:	3014      	adds	r0, #20
 8013386:	f000 f9bd 	bl	8013704 <rcl_init_options_fini>
 801338a:	4607      	mov	r7, r0
 801338c:	2800      	cmp	r0, #0
 801338e:	d144      	bne.n	801341a <__cleanup_context+0xb2>
 8013390:	6830      	ldr	r0, [r6, #0]
 8013392:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013394:	b143      	cbz	r3, 80133a8 <__cleanup_context+0x40>
 8013396:	3028      	adds	r0, #40	@ 0x28
 8013398:	f001 fe22 	bl	8014fe0 <rmw_context_fini>
 801339c:	b118      	cbz	r0, 80133a6 <__cleanup_context+0x3e>
 801339e:	2f00      	cmp	r7, #0
 80133a0:	d03e      	beq.n	8013420 <__cleanup_context+0xb8>
 80133a2:	f7fb fd41 	bl	800ee28 <rcutils_reset_error>
 80133a6:	6830      	ldr	r0, [r6, #0]
 80133a8:	6a03      	ldr	r3, [r0, #32]
 80133aa:	b1db      	cbz	r3, 80133e4 <__cleanup_context+0x7c>
 80133ac:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80133b0:	2a01      	cmp	r2, #1
 80133b2:	f17c 0100 	sbcs.w	r1, ip, #0
 80133b6:	db11      	blt.n	80133dc <__cleanup_context+0x74>
 80133b8:	2400      	movs	r4, #0
 80133ba:	4625      	mov	r5, r4
 80133bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80133c0:	4649      	mov	r1, r9
 80133c2:	b1b8      	cbz	r0, 80133f4 <__cleanup_context+0x8c>
 80133c4:	47c0      	blx	r8
 80133c6:	6833      	ldr	r3, [r6, #0]
 80133c8:	3401      	adds	r4, #1
 80133ca:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80133ce:	f145 0500 	adc.w	r5, r5, #0
 80133d2:	6a1b      	ldr	r3, [r3, #32]
 80133d4:	4294      	cmp	r4, r2
 80133d6:	eb75 010c 	sbcs.w	r1, r5, ip
 80133da:	dbef      	blt.n	80133bc <__cleanup_context+0x54>
 80133dc:	4618      	mov	r0, r3
 80133de:	4649      	mov	r1, r9
 80133e0:	47c0      	blx	r8
 80133e2:	6830      	ldr	r0, [r6, #0]
 80133e4:	4649      	mov	r1, r9
 80133e6:	47c0      	blx	r8
 80133e8:	2300      	movs	r3, #0
 80133ea:	4638      	mov	r0, r7
 80133ec:	e9c6 3300 	strd	r3, r3, [r6]
 80133f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133f4:	3401      	adds	r4, #1
 80133f6:	f145 0500 	adc.w	r5, r5, #0
 80133fa:	4294      	cmp	r4, r2
 80133fc:	eb75 010c 	sbcs.w	r1, r5, ip
 8013400:	dbdc      	blt.n	80133bc <__cleanup_context+0x54>
 8013402:	4618      	mov	r0, r3
 8013404:	4649      	mov	r1, r9
 8013406:	47c0      	blx	r8
 8013408:	6830      	ldr	r0, [r6, #0]
 801340a:	e7eb      	b.n	80133e4 <__cleanup_context+0x7c>
 801340c:	4607      	mov	r7, r0
 801340e:	2300      	movs	r3, #0
 8013410:	4638      	mov	r0, r7
 8013412:	e9c6 3300 	strd	r3, r3, [r6]
 8013416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801341a:	f7fb fd05 	bl	800ee28 <rcutils_reset_error>
 801341e:	e7b7      	b.n	8013390 <__cleanup_context+0x28>
 8013420:	f7ff ff7e 	bl	8013320 <rcl_convert_rmw_ret_to_rcl_ret>
 8013424:	4607      	mov	r7, r0
 8013426:	e7bc      	b.n	80133a2 <__cleanup_context+0x3a>

08013428 <rcl_init>:
 8013428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801342c:	1e05      	subs	r5, r0, #0
 801342e:	b09e      	sub	sp, #120	@ 0x78
 8013430:	460e      	mov	r6, r1
 8013432:	4690      	mov	r8, r2
 8013434:	461f      	mov	r7, r3
 8013436:	f340 809f 	ble.w	8013578 <rcl_init+0x150>
 801343a:	2900      	cmp	r1, #0
 801343c:	f000 809f 	beq.w	801357e <rcl_init+0x156>
 8013440:	f1a1 0e04 	sub.w	lr, r1, #4
 8013444:	f04f 0c00 	mov.w	ip, #0
 8013448:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801344c:	f10c 0c01 	add.w	ip, ip, #1
 8013450:	2c00      	cmp	r4, #0
 8013452:	f000 8094 	beq.w	801357e <rcl_init+0x156>
 8013456:	4565      	cmp	r5, ip
 8013458:	d1f6      	bne.n	8013448 <rcl_init+0x20>
 801345a:	f1b8 0f00 	cmp.w	r8, #0
 801345e:	f000 808e 	beq.w	801357e <rcl_init+0x156>
 8013462:	f8d8 4000 	ldr.w	r4, [r8]
 8013466:	2c00      	cmp	r4, #0
 8013468:	f000 8089 	beq.w	801357e <rcl_init+0x156>
 801346c:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013476:	6823      	ldr	r3, [r4, #0]
 8013478:	a819      	add	r0, sp, #100	@ 0x64
 801347a:	f8cc 3000 	str.w	r3, [ip]
 801347e:	f7fb fcaf 	bl	800ede0 <rcutils_allocator_is_valid>
 8013482:	f080 0001 	eor.w	r0, r0, #1
 8013486:	b2c0      	uxtb	r0, r0
 8013488:	2800      	cmp	r0, #0
 801348a:	d178      	bne.n	801357e <rcl_init+0x156>
 801348c:	2f00      	cmp	r7, #0
 801348e:	d076      	beq.n	801357e <rcl_init+0x156>
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d178      	bne.n	8013588 <rcl_init+0x160>
 8013496:	2178      	movs	r1, #120	@ 0x78
 8013498:	2001      	movs	r0, #1
 801349a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801349e:	4798      	blx	r3
 80134a0:	4604      	mov	r4, r0
 80134a2:	6038      	str	r0, [r7, #0]
 80134a4:	2800      	cmp	r0, #0
 80134a6:	f000 80b6 	beq.w	8013616 <rcl_init+0x1ee>
 80134aa:	a802      	add	r0, sp, #8
 80134ac:	f001 f9c4 	bl	8014838 <rmw_get_zero_initialized_context>
 80134b0:	a902      	add	r1, sp, #8
 80134b2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80134b6:	2250      	movs	r2, #80	@ 0x50
 80134b8:	f004 fea5 	bl	8018206 <memcpy>
 80134bc:	ac19      	add	r4, sp, #100	@ 0x64
 80134be:	f8d7 e000 	ldr.w	lr, [r7]
 80134c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80134c4:	46f4      	mov	ip, lr
 80134c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134ca:	6823      	ldr	r3, [r4, #0]
 80134cc:	f10e 0114 	add.w	r1, lr, #20
 80134d0:	4640      	mov	r0, r8
 80134d2:	f8cc 3000 	str.w	r3, [ip]
 80134d6:	f000 f93f 	bl	8013758 <rcl_init_options_copy>
 80134da:	4604      	mov	r4, r0
 80134dc:	2800      	cmp	r0, #0
 80134de:	d144      	bne.n	801356a <rcl_init+0x142>
 80134e0:	f8d7 9000 	ldr.w	r9, [r7]
 80134e4:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80134e8:	f8c9 0020 	str.w	r0, [r9, #32]
 80134ec:	f8c9 5018 	str.w	r5, [r9, #24]
 80134f0:	f8c9 801c 	str.w	r8, [r9, #28]
 80134f4:	2d00      	cmp	r5, #0
 80134f6:	d04e      	beq.n	8013596 <rcl_init+0x16e>
 80134f8:	2e00      	cmp	r6, #0
 80134fa:	d04c      	beq.n	8013596 <rcl_init+0x16e>
 80134fc:	2104      	movs	r1, #4
 80134fe:	4628      	mov	r0, r5
 8013500:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013504:	4798      	blx	r3
 8013506:	f8c9 0020 	str.w	r0, [r9, #32]
 801350a:	f8d7 9000 	ldr.w	r9, [r7]
 801350e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013512:	46ca      	mov	sl, r9
 8013514:	b343      	cbz	r3, 8013568 <rcl_init+0x140>
 8013516:	2d01      	cmp	r5, #1
 8013518:	f178 0300 	sbcs.w	r3, r8, #0
 801351c:	db3b      	blt.n	8013596 <rcl_init+0x16e>
 801351e:	2400      	movs	r4, #0
 8013520:	3e04      	subs	r6, #4
 8013522:	46a1      	mov	r9, r4
 8013524:	e00b      	b.n	801353e <rcl_init+0x116>
 8013526:	6831      	ldr	r1, [r6, #0]
 8013528:	f004 fe6d 	bl	8018206 <memcpy>
 801352c:	3401      	adds	r4, #1
 801352e:	f149 0900 	adc.w	r9, r9, #0
 8013532:	45c8      	cmp	r8, r9
 8013534:	bf08      	it	eq
 8013536:	42a5      	cmpeq	r5, r4
 8013538:	d02b      	beq.n	8013592 <rcl_init+0x16a>
 801353a:	f8d7 a000 	ldr.w	sl, [r7]
 801353e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013542:	f7ec fed7 	bl	80002f4 <strlen>
 8013546:	1c42      	adds	r2, r0, #1
 8013548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801354a:	4610      	mov	r0, r2
 801354c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801354e:	f8da a020 	ldr.w	sl, [sl, #32]
 8013552:	9201      	str	r2, [sp, #4]
 8013554:	4798      	blx	r3
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801355c:	6a1b      	ldr	r3, [r3, #32]
 801355e:	9a01      	ldr	r2, [sp, #4]
 8013560:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013564:	2800      	cmp	r0, #0
 8013566:	d1de      	bne.n	8013526 <rcl_init+0xfe>
 8013568:	240a      	movs	r4, #10
 801356a:	4638      	mov	r0, r7
 801356c:	f7ff fefc 	bl	8013368 <__cleanup_context>
 8013570:	4620      	mov	r0, r4
 8013572:	b01e      	add	sp, #120	@ 0x78
 8013574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013578:	2900      	cmp	r1, #0
 801357a:	f43f af6e 	beq.w	801345a <rcl_init+0x32>
 801357e:	240b      	movs	r4, #11
 8013580:	4620      	mov	r0, r4
 8013582:	b01e      	add	sp, #120	@ 0x78
 8013584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013588:	2464      	movs	r4, #100	@ 0x64
 801358a:	4620      	mov	r0, r4
 801358c:	b01e      	add	sp, #120	@ 0x78
 801358e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013592:	f8d7 9000 	ldr.w	r9, [r7]
 8013596:	4926      	ldr	r1, [pc, #152]	@ (8013630 <rcl_init+0x208>)
 8013598:	680b      	ldr	r3, [r1, #0]
 801359a:	3301      	adds	r3, #1
 801359c:	d036      	beq.n	801360c <rcl_init+0x1e4>
 801359e:	461a      	mov	r2, r3
 80135a0:	2400      	movs	r4, #0
 80135a2:	600b      	str	r3, [r1, #0]
 80135a4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80135a8:	607b      	str	r3, [r7, #4]
 80135aa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80135ac:	3301      	adds	r3, #1
 80135ae:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80135b2:	d034      	beq.n	801361e <rcl_init+0x1f6>
 80135b4:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80135b8:	b93b      	cbnz	r3, 80135ca <rcl_init+0x1a2>
 80135ba:	3030      	adds	r0, #48	@ 0x30
 80135bc:	f000 f93a 	bl	8013834 <rcl_get_localhost_only>
 80135c0:	4604      	mov	r4, r0
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d1d1      	bne.n	801356a <rcl_init+0x142>
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	6958      	ldr	r0, [r3, #20]
 80135ca:	aa18      	add	r2, sp, #96	@ 0x60
 80135cc:	a917      	add	r1, sp, #92	@ 0x5c
 80135ce:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80135d0:	f000 fdce 	bl	8014170 <rcl_validate_enclave_name>
 80135d4:	4604      	mov	r4, r0
 80135d6:	2800      	cmp	r0, #0
 80135d8:	d1c7      	bne.n	801356a <rcl_init+0x142>
 80135da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80135dc:	b9eb      	cbnz	r3, 801361a <rcl_init+0x1f2>
 80135de:	6839      	ldr	r1, [r7, #0]
 80135e0:	694b      	ldr	r3, [r1, #20]
 80135e2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80135e6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80135e8:	f000 fc72 	bl	8013ed0 <rcl_get_security_options_from_environment>
 80135ec:	4604      	mov	r4, r0
 80135ee:	2800      	cmp	r0, #0
 80135f0:	d1bb      	bne.n	801356a <rcl_init+0x142>
 80135f2:	6839      	ldr	r1, [r7, #0]
 80135f4:	6948      	ldr	r0, [r1, #20]
 80135f6:	3128      	adds	r1, #40	@ 0x28
 80135f8:	3018      	adds	r0, #24
 80135fa:	f001 fbbb 	bl	8014d74 <rmw_init>
 80135fe:	4604      	mov	r4, r0
 8013600:	2800      	cmp	r0, #0
 8013602:	d0bd      	beq.n	8013580 <rcl_init+0x158>
 8013604:	f7ff fe8c 	bl	8013320 <rcl_convert_rmw_ret_to_rcl_ret>
 8013608:	4604      	mov	r4, r0
 801360a:	e7ae      	b.n	801356a <rcl_init+0x142>
 801360c:	2201      	movs	r2, #1
 801360e:	461c      	mov	r4, r3
 8013610:	600a      	str	r2, [r1, #0]
 8013612:	4613      	mov	r3, r2
 8013614:	e7c6      	b.n	80135a4 <rcl_init+0x17c>
 8013616:	240a      	movs	r4, #10
 8013618:	e7b2      	b.n	8013580 <rcl_init+0x158>
 801361a:	2401      	movs	r4, #1
 801361c:	e7a5      	b.n	801356a <rcl_init+0x142>
 801361e:	3024      	adds	r0, #36	@ 0x24
 8013620:	f003 fcc8 	bl	8016fb4 <rcl_get_default_domain_id>
 8013624:	4604      	mov	r4, r0
 8013626:	2800      	cmp	r0, #0
 8013628:	d19f      	bne.n	801356a <rcl_init+0x142>
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	6958      	ldr	r0, [r3, #20]
 801362e:	e7c1      	b.n	80135b4 <rcl_init+0x18c>
 8013630:	2406842c 	.word	0x2406842c

08013634 <rcl_get_zero_initialized_init_options>:
 8013634:	2000      	movs	r0, #0
 8013636:	4770      	bx	lr

08013638 <rcl_init_options_init>:
 8013638:	b084      	sub	sp, #16
 801363a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801363c:	b097      	sub	sp, #92	@ 0x5c
 801363e:	ae1d      	add	r6, sp, #116	@ 0x74
 8013640:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013644:	2800      	cmp	r0, #0
 8013646:	d058      	beq.n	80136fa <rcl_init_options_init+0xc2>
 8013648:	6803      	ldr	r3, [r0, #0]
 801364a:	4605      	mov	r5, r0
 801364c:	b133      	cbz	r3, 801365c <rcl_init_options_init+0x24>
 801364e:	2464      	movs	r4, #100	@ 0x64
 8013650:	4620      	mov	r0, r4
 8013652:	b017      	add	sp, #92	@ 0x5c
 8013654:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013658:	b004      	add	sp, #16
 801365a:	4770      	bx	lr
 801365c:	4630      	mov	r0, r6
 801365e:	f7fb fbbf 	bl	800ede0 <rcutils_allocator_is_valid>
 8013662:	2800      	cmp	r0, #0
 8013664:	d049      	beq.n	80136fa <rcl_init_options_init+0xc2>
 8013666:	46b4      	mov	ip, r6
 8013668:	ac11      	add	r4, sp, #68	@ 0x44
 801366a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801366e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013670:	f8dc 3000 	ldr.w	r3, [ip]
 8013674:	2050      	movs	r0, #80	@ 0x50
 8013676:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8013678:	6023      	str	r3, [r4, #0]
 801367a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801367c:	4798      	blx	r3
 801367e:	4604      	mov	r4, r0
 8013680:	6028      	str	r0, [r5, #0]
 8013682:	2800      	cmp	r0, #0
 8013684:	d03b      	beq.n	80136fe <rcl_init_options_init+0xc6>
 8013686:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801368a:	4686      	mov	lr, r0
 801368c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013690:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013694:	f8dc 3000 	ldr.w	r3, [ip]
 8013698:	a802      	add	r0, sp, #8
 801369a:	f8ce 3000 	str.w	r3, [lr]
 801369e:	f001 f8df 	bl	8014860 <rmw_get_zero_initialized_init_options>
 80136a2:	f10d 0e08 	add.w	lr, sp, #8
 80136a6:	f104 0c18 	add.w	ip, r4, #24
 80136aa:	682f      	ldr	r7, [r5, #0]
 80136ac:	ac20      	add	r4, sp, #128	@ 0x80
 80136ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80136b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80136b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80136ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80136be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80136c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80136c6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80136ca:	e88c 0003 	stmia.w	ip, {r0, r1}
 80136ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80136d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80136d6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80136da:	f107 0018 	add.w	r0, r7, #24
 80136de:	f001 fa4b 	bl	8014b78 <rmw_init_options_init>
 80136e2:	4604      	mov	r4, r0
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d0b3      	beq.n	8013650 <rcl_init_options_init+0x18>
 80136e8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80136ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80136ec:	6828      	ldr	r0, [r5, #0]
 80136ee:	4798      	blx	r3
 80136f0:	4620      	mov	r0, r4
 80136f2:	f7ff fe15 	bl	8013320 <rcl_convert_rmw_ret_to_rcl_ret>
 80136f6:	4604      	mov	r4, r0
 80136f8:	e7aa      	b.n	8013650 <rcl_init_options_init+0x18>
 80136fa:	240b      	movs	r4, #11
 80136fc:	e7a8      	b.n	8013650 <rcl_init_options_init+0x18>
 80136fe:	240a      	movs	r4, #10
 8013700:	e7a6      	b.n	8013650 <rcl_init_options_init+0x18>
 8013702:	bf00      	nop

08013704 <rcl_init_options_fini>:
 8013704:	b530      	push	{r4, r5, lr}
 8013706:	b087      	sub	sp, #28
 8013708:	b1f0      	cbz	r0, 8013748 <rcl_init_options_fini+0x44>
 801370a:	6803      	ldr	r3, [r0, #0]
 801370c:	4604      	mov	r4, r0
 801370e:	b1db      	cbz	r3, 8013748 <rcl_init_options_fini+0x44>
 8013710:	469c      	mov	ip, r3
 8013712:	f10d 0e04 	add.w	lr, sp, #4
 8013716:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801371a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801371e:	f8dc 3000 	ldr.w	r3, [ip]
 8013722:	a801      	add	r0, sp, #4
 8013724:	f8ce 3000 	str.w	r3, [lr]
 8013728:	f7fb fb5a 	bl	800ede0 <rcutils_allocator_is_valid>
 801372c:	b160      	cbz	r0, 8013748 <rcl_init_options_fini+0x44>
 801372e:	6820      	ldr	r0, [r4, #0]
 8013730:	3018      	adds	r0, #24
 8013732:	f001 fadb 	bl	8014cec <rmw_init_options_fini>
 8013736:	4605      	mov	r5, r0
 8013738:	b950      	cbnz	r0, 8013750 <rcl_init_options_fini+0x4c>
 801373a:	6820      	ldr	r0, [r4, #0]
 801373c:	9b02      	ldr	r3, [sp, #8]
 801373e:	9905      	ldr	r1, [sp, #20]
 8013740:	4798      	blx	r3
 8013742:	4628      	mov	r0, r5
 8013744:	b007      	add	sp, #28
 8013746:	bd30      	pop	{r4, r5, pc}
 8013748:	250b      	movs	r5, #11
 801374a:	4628      	mov	r0, r5
 801374c:	b007      	add	sp, #28
 801374e:	bd30      	pop	{r4, r5, pc}
 8013750:	f7ff fde6 	bl	8013320 <rcl_convert_rmw_ret_to_rcl_ret>
 8013754:	4605      	mov	r5, r0
 8013756:	e7f8      	b.n	801374a <rcl_init_options_fini+0x46>

08013758 <rcl_init_options_copy>:
 8013758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801375c:	b094      	sub	sp, #80	@ 0x50
 801375e:	2800      	cmp	r0, #0
 8013760:	d05b      	beq.n	801381a <rcl_init_options_copy+0xc2>
 8013762:	4604      	mov	r4, r0
 8013764:	6800      	ldr	r0, [r0, #0]
 8013766:	2800      	cmp	r0, #0
 8013768:	d057      	beq.n	801381a <rcl_init_options_copy+0xc2>
 801376a:	460e      	mov	r6, r1
 801376c:	f7fb fb38 	bl	800ede0 <rcutils_allocator_is_valid>
 8013770:	2e00      	cmp	r6, #0
 8013772:	d052      	beq.n	801381a <rcl_init_options_copy+0xc2>
 8013774:	f080 0001 	eor.w	r0, r0, #1
 8013778:	b2c0      	uxtb	r0, r0
 801377a:	2800      	cmp	r0, #0
 801377c:	d14d      	bne.n	801381a <rcl_init_options_copy+0xc2>
 801377e:	6833      	ldr	r3, [r6, #0]
 8013780:	b123      	cbz	r3, 801378c <rcl_init_options_copy+0x34>
 8013782:	2464      	movs	r4, #100	@ 0x64
 8013784:	4620      	mov	r0, r4
 8013786:	b014      	add	sp, #80	@ 0x50
 8013788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801378c:	6827      	ldr	r7, [r4, #0]
 801378e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8013790:	46bc      	mov	ip, r7
 8013792:	f8d7 8000 	ldr.w	r8, [r7]
 8013796:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801379a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801379c:	f8dc 3000 	ldr.w	r3, [ip]
 80137a0:	2050      	movs	r0, #80	@ 0x50
 80137a2:	4619      	mov	r1, r3
 80137a4:	602b      	str	r3, [r5, #0]
 80137a6:	47c0      	blx	r8
 80137a8:	4605      	mov	r5, r0
 80137aa:	6030      	str	r0, [r6, #0]
 80137ac:	b3d0      	cbz	r0, 8013824 <rcl_init_options_copy+0xcc>
 80137ae:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80137b2:	4686      	mov	lr, r0
 80137b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80137bc:	f8dc 3000 	ldr.w	r3, [ip]
 80137c0:	4668      	mov	r0, sp
 80137c2:	f8ce 3000 	str.w	r3, [lr]
 80137c6:	f001 f84b 	bl	8014860 <rmw_get_zero_initialized_init_options>
 80137ca:	46ee      	mov	lr, sp
 80137cc:	f105 0c18 	add.w	ip, r5, #24
 80137d0:	6824      	ldr	r4, [r4, #0]
 80137d2:	6835      	ldr	r5, [r6, #0]
 80137d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80137d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80137e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80137e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137ec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80137f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80137f4:	f104 0018 	add.w	r0, r4, #24
 80137f8:	f105 0118 	add.w	r1, r5, #24
 80137fc:	f001 fa24 	bl	8014c48 <rmw_init_options_copy>
 8013800:	4604      	mov	r4, r0
 8013802:	2800      	cmp	r0, #0
 8013804:	d0be      	beq.n	8013784 <rcl_init_options_copy+0x2c>
 8013806:	f7fb faf9 	bl	800edfc <rcutils_get_error_string>
 801380a:	f7fb fb0d 	bl	800ee28 <rcutils_reset_error>
 801380e:	4630      	mov	r0, r6
 8013810:	f7ff ff78 	bl	8013704 <rcl_init_options_fini>
 8013814:	b140      	cbz	r0, 8013828 <rcl_init_options_copy+0xd0>
 8013816:	4604      	mov	r4, r0
 8013818:	e7b4      	b.n	8013784 <rcl_init_options_copy+0x2c>
 801381a:	240b      	movs	r4, #11
 801381c:	4620      	mov	r0, r4
 801381e:	b014      	add	sp, #80	@ 0x50
 8013820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013824:	240a      	movs	r4, #10
 8013826:	e7ad      	b.n	8013784 <rcl_init_options_copy+0x2c>
 8013828:	4620      	mov	r0, r4
 801382a:	b014      	add	sp, #80	@ 0x50
 801382c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013830:	f7ff bd76 	b.w	8013320 <rcl_convert_rmw_ret_to_rcl_ret>

08013834 <rcl_get_localhost_only>:
 8013834:	b510      	push	{r4, lr}
 8013836:	2300      	movs	r3, #0
 8013838:	b082      	sub	sp, #8
 801383a:	9301      	str	r3, [sp, #4]
 801383c:	b1b8      	cbz	r0, 801386e <rcl_get_localhost_only+0x3a>
 801383e:	4604      	mov	r4, r0
 8013840:	a901      	add	r1, sp, #4
 8013842:	480c      	ldr	r0, [pc, #48]	@ (8013874 <rcl_get_localhost_only+0x40>)
 8013844:	f000 fcdc 	bl	8014200 <rcutils_get_env>
 8013848:	b110      	cbz	r0, 8013850 <rcl_get_localhost_only+0x1c>
 801384a:	2001      	movs	r0, #1
 801384c:	b002      	add	sp, #8
 801384e:	bd10      	pop	{r4, pc}
 8013850:	9b01      	ldr	r3, [sp, #4]
 8013852:	b113      	cbz	r3, 801385a <rcl_get_localhost_only+0x26>
 8013854:	781a      	ldrb	r2, [r3, #0]
 8013856:	2a31      	cmp	r2, #49	@ 0x31
 8013858:	d004      	beq.n	8013864 <rcl_get_localhost_only+0x30>
 801385a:	2302      	movs	r3, #2
 801385c:	2000      	movs	r0, #0
 801385e:	7023      	strb	r3, [r4, #0]
 8013860:	b002      	add	sp, #8
 8013862:	bd10      	pop	{r4, pc}
 8013864:	785b      	ldrb	r3, [r3, #1]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d1f7      	bne.n	801385a <rcl_get_localhost_only+0x26>
 801386a:	2301      	movs	r3, #1
 801386c:	e7f6      	b.n	801385c <rcl_get_localhost_only+0x28>
 801386e:	200b      	movs	r0, #11
 8013870:	b002      	add	sp, #8
 8013872:	bd10      	pop	{r4, pc}
 8013874:	08019344 	.word	0x08019344

08013878 <rcl_get_zero_initialized_node>:
 8013878:	4a03      	ldr	r2, [pc, #12]	@ (8013888 <rcl_get_zero_initialized_node+0x10>)
 801387a:	4603      	mov	r3, r0
 801387c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013880:	e883 0003 	stmia.w	r3, {r0, r1}
 8013884:	4618      	mov	r0, r3
 8013886:	4770      	bx	lr
 8013888:	0801936c 	.word	0x0801936c

0801388c <rcl_node_init>:
 801388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013890:	b0a9      	sub	sp, #164	@ 0xa4
 8013892:	4604      	mov	r4, r0
 8013894:	460e      	mov	r6, r1
 8013896:	4615      	mov	r5, r2
 8013898:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801389c:	a823      	add	r0, sp, #140	@ 0x8c
 801389e:	461f      	mov	r7, r3
 80138a0:	f003 fdae 	bl	8017400 <rcl_guard_condition_get_default_options>
 80138a4:	f1b8 0f00 	cmp.w	r8, #0
 80138a8:	f000 80f3 	beq.w	8013a92 <rcl_node_init+0x206>
 80138ac:	4640      	mov	r0, r8
 80138ae:	f7fb fa97 	bl	800ede0 <rcutils_allocator_is_valid>
 80138b2:	2d00      	cmp	r5, #0
 80138b4:	bf18      	it	ne
 80138b6:	2c00      	cmpne	r4, #0
 80138b8:	f080 0001 	eor.w	r0, r0, #1
 80138bc:	bf0c      	ite	eq
 80138be:	f04f 0c01 	moveq.w	ip, #1
 80138c2:	f04f 0c00 	movne.w	ip, #0
 80138c6:	2e00      	cmp	r6, #0
 80138c8:	bf08      	it	eq
 80138ca:	f04c 0c01 	orreq.w	ip, ip, #1
 80138ce:	ea4c 0c00 	orr.w	ip, ip, r0
 80138d2:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 80138d6:	f040 80dc 	bne.w	8013a92 <rcl_node_init+0x206>
 80138da:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80138de:	f1ba 0f00 	cmp.w	sl, #0
 80138e2:	f040 80fc 	bne.w	8013ade <rcl_node_init+0x252>
 80138e6:	2f00      	cmp	r7, #0
 80138e8:	f000 80d3 	beq.w	8013a92 <rcl_node_init+0x206>
 80138ec:	4638      	mov	r0, r7
 80138ee:	f7ff fd35 	bl	801335c <rcl_context_is_valid>
 80138f2:	4683      	mov	fp, r0
 80138f4:	2800      	cmp	r0, #0
 80138f6:	f000 80d2 	beq.w	8013a9e <rcl_node_init+0x212>
 80138fa:	4652      	mov	r2, sl
 80138fc:	4630      	mov	r0, r6
 80138fe:	a922      	add	r1, sp, #136	@ 0x88
 8013900:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8013904:	f001 f8ae 	bl	8014a64 <rmw_validate_node_name>
 8013908:	4682      	mov	sl, r0
 801390a:	2800      	cmp	r0, #0
 801390c:	f040 80c3 	bne.w	8013a96 <rcl_node_init+0x20a>
 8013910:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013912:	2800      	cmp	r0, #0
 8013914:	f040 80f1 	bne.w	8013afa <rcl_node_init+0x26e>
 8013918:	4628      	mov	r0, r5
 801391a:	f7ec fceb 	bl	80002f4 <strlen>
 801391e:	2800      	cmp	r0, #0
 8013920:	f040 80c0 	bne.w	8013aa4 <rcl_node_init+0x218>
 8013924:	4d79      	ldr	r5, [pc, #484]	@ (8013b0c <rcl_node_init+0x280>)
 8013926:	a922      	add	r1, sp, #136	@ 0x88
 8013928:	2200      	movs	r2, #0
 801392a:	4628      	mov	r0, r5
 801392c:	f001 f87c 	bl	8014a28 <rmw_validate_namespace>
 8013930:	4682      	mov	sl, r0
 8013932:	2800      	cmp	r0, #0
 8013934:	f040 80af 	bne.w	8013a96 <rcl_node_init+0x20a>
 8013938:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801393a:	2800      	cmp	r0, #0
 801393c:	f040 80d5 	bne.w	8013aea <rcl_node_init+0x25e>
 8013940:	f8d8 3000 	ldr.w	r3, [r8]
 8013944:	2078      	movs	r0, #120	@ 0x78
 8013946:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801394a:	4798      	blx	r3
 801394c:	4682      	mov	sl, r0
 801394e:	6060      	str	r0, [r4, #4]
 8013950:	2800      	cmp	r0, #0
 8013952:	f000 80cf 	beq.w	8013af4 <rcl_node_init+0x268>
 8013956:	2200      	movs	r2, #0
 8013958:	2300      	movs	r3, #0
 801395a:	a808      	add	r0, sp, #32
 801395c:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8013960:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8013964:	f000 f902 	bl	8013b6c <rcl_node_get_default_options>
 8013968:	a908      	add	r1, sp, #32
 801396a:	4650      	mov	r0, sl
 801396c:	2268      	movs	r2, #104	@ 0x68
 801396e:	f004 fc4a 	bl	8018206 <memcpy>
 8013972:	6861      	ldr	r1, [r4, #4]
 8013974:	4640      	mov	r0, r8
 8013976:	6027      	str	r7, [r4, #0]
 8013978:	f000 f906 	bl	8013b88 <rcl_node_options_copy>
 801397c:	2800      	cmp	r0, #0
 801397e:	d158      	bne.n	8013a32 <rcl_node_init+0x1a6>
 8013980:	4628      	mov	r0, r5
 8013982:	f7ec fcb7 	bl	80002f4 <strlen>
 8013986:	4428      	add	r0, r5
 8013988:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801398c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013990:	2b2f      	cmp	r3, #47	@ 0x2f
 8013992:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013996:	9300      	str	r3, [sp, #0]
 8013998:	bf0c      	ite	eq
 801399a:	4b5d      	ldreq	r3, [pc, #372]	@ (8013b10 <rcl_node_init+0x284>)
 801399c:	4b5d      	ldrne	r3, [pc, #372]	@ (8013b14 <rcl_node_init+0x288>)
 801399e:	9302      	str	r3, [sp, #8]
 80139a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80139a4:	9301      	str	r3, [sp, #4]
 80139a6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80139aa:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80139ae:	f000 fc4f 	bl	8014250 <rcutils_format_string_limit>
 80139b2:	6823      	ldr	r3, [r4, #0]
 80139b4:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 80139b8:	4631      	mov	r1, r6
 80139ba:	6818      	ldr	r0, [r3, #0]
 80139bc:	462a      	mov	r2, r5
 80139be:	6866      	ldr	r6, [r4, #4]
 80139c0:	3028      	adds	r0, #40	@ 0x28
 80139c2:	f001 fc31 	bl	8015228 <rmw_create_node>
 80139c6:	6863      	ldr	r3, [r4, #4]
 80139c8:	66b0      	str	r0, [r6, #104]	@ 0x68
 80139ca:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d032      	beq.n	8013a36 <rcl_node_init+0x1aa>
 80139d0:	f001 fcba 	bl	8015348 <rmw_node_get_graph_guard_condition>
 80139d4:	4682      	mov	sl, r0
 80139d6:	b360      	cbz	r0, 8013a32 <rcl_node_init+0x1a6>
 80139d8:	f8d8 3000 	ldr.w	r3, [r8]
 80139dc:	2008      	movs	r0, #8
 80139de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80139e2:	6866      	ldr	r6, [r4, #4]
 80139e4:	4798      	blx	r3
 80139e6:	6863      	ldr	r3, [r4, #4]
 80139e8:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80139ea:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80139ee:	f1bb 0f00 	cmp.w	fp, #0
 80139f2:	d020      	beq.n	8013a36 <rcl_node_init+0x1aa>
 80139f4:	a806      	add	r0, sp, #24
 80139f6:	ae23      	add	r6, sp, #140	@ 0x8c
 80139f8:	f003 fc76 	bl	80172e8 <rcl_get_zero_initialized_guard_condition>
 80139fc:	a806      	add	r0, sp, #24
 80139fe:	6863      	ldr	r3, [r4, #4]
 8013a00:	46c4      	mov	ip, r8
 8013a02:	c803      	ldmia	r0, {r0, r1}
 8013a04:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013a08:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013a0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013a12:	f8dc 3000 	ldr.w	r3, [ip]
 8013a16:	6033      	str	r3, [r6, #0]
 8013a18:	ab28      	add	r3, sp, #160	@ 0xa0
 8013a1a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013a1e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013a22:	4651      	mov	r1, sl
 8013a24:	463a      	mov	r2, r7
 8013a26:	4670      	mov	r0, lr
 8013a28:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013a2a:	f003 fc67 	bl	80172fc <rcl_guard_condition_init_from_rmw>
 8013a2e:	4682      	mov	sl, r0
 8013a30:	b328      	cbz	r0, 8013a7e <rcl_node_init+0x1f2>
 8013a32:	6863      	ldr	r3, [r4, #4]
 8013a34:	b1f3      	cbz	r3, 8013a74 <rcl_node_init+0x1e8>
 8013a36:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013a38:	b128      	cbz	r0, 8013a46 <rcl_node_init+0x1ba>
 8013a3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a3e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a42:	4798      	blx	r3
 8013a44:	6863      	ldr	r3, [r4, #4]
 8013a46:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013a48:	b110      	cbz	r0, 8013a50 <rcl_node_init+0x1c4>
 8013a4a:	f001 fbff 	bl	801524c <rmw_destroy_node>
 8013a4e:	6863      	ldr	r3, [r4, #4]
 8013a50:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013a52:	b148      	cbz	r0, 8013a68 <rcl_node_init+0x1dc>
 8013a54:	f003 fcae 	bl	80173b4 <rcl_guard_condition_fini>
 8013a58:	6863      	ldr	r3, [r4, #4]
 8013a5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a5e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013a60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a64:	4798      	blx	r3
 8013a66:	6863      	ldr	r3, [r4, #4]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a72:	4798      	blx	r3
 8013a74:	2300      	movs	r3, #0
 8013a76:	f04f 0a01 	mov.w	sl, #1
 8013a7a:	e9c4 3300 	strd	r3, r3, [r4]
 8013a7e:	f1b9 0f00 	cmp.w	r9, #0
 8013a82:	d008      	beq.n	8013a96 <rcl_node_init+0x20a>
 8013a84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a88:	4628      	mov	r0, r5
 8013a8a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a8e:	4798      	blx	r3
 8013a90:	e001      	b.n	8013a96 <rcl_node_init+0x20a>
 8013a92:	f04f 0a0b 	mov.w	sl, #11
 8013a96:	4650      	mov	r0, sl
 8013a98:	b029      	add	sp, #164	@ 0xa4
 8013a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a9e:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8013aa2:	e7f8      	b.n	8013a96 <rcl_node_init+0x20a>
 8013aa4:	782b      	ldrb	r3, [r5, #0]
 8013aa6:	2b2f      	cmp	r3, #47	@ 0x2f
 8013aa8:	f43f af3d 	beq.w	8013926 <rcl_node_init+0x9a>
 8013aac:	9503      	str	r5, [sp, #12]
 8013aae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013ab2:	9300      	str	r3, [sp, #0]
 8013ab4:	4b18      	ldr	r3, [pc, #96]	@ (8013b18 <rcl_node_init+0x28c>)
 8013ab6:	9302      	str	r3, [sp, #8]
 8013ab8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013abc:	9301      	str	r3, [sp, #4]
 8013abe:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013ac2:	f000 fbc5 	bl	8014250 <rcutils_format_string_limit>
 8013ac6:	4605      	mov	r5, r0
 8013ac8:	b1e0      	cbz	r0, 8013b04 <rcl_node_init+0x278>
 8013aca:	2200      	movs	r2, #0
 8013acc:	a922      	add	r1, sp, #136	@ 0x88
 8013ace:	9222      	str	r2, [sp, #136]	@ 0x88
 8013ad0:	f000 ffaa 	bl	8014a28 <rmw_validate_namespace>
 8013ad4:	4682      	mov	sl, r0
 8013ad6:	2800      	cmp	r0, #0
 8013ad8:	d1d4      	bne.n	8013a84 <rcl_node_init+0x1f8>
 8013ada:	46d9      	mov	r9, fp
 8013adc:	e72c      	b.n	8013938 <rcl_node_init+0xac>
 8013ade:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8013ae2:	4650      	mov	r0, sl
 8013ae4:	b029      	add	sp, #164	@ 0xa4
 8013ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aea:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8013aee:	f000 ffad 	bl	8014a4c <rmw_namespace_validation_result_string>
 8013af2:	e7c4      	b.n	8013a7e <rcl_node_init+0x1f2>
 8013af4:	f04f 0a0a 	mov.w	sl, #10
 8013af8:	e7c1      	b.n	8013a7e <rcl_node_init+0x1f2>
 8013afa:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8013afe:	f001 f805 	bl	8014b0c <rmw_node_name_validation_result_string>
 8013b02:	e7c8      	b.n	8013a96 <rcl_node_init+0x20a>
 8013b04:	f04f 0a0a 	mov.w	sl, #10
 8013b08:	e7c5      	b.n	8013a96 <rcl_node_init+0x20a>
 8013b0a:	bf00      	nop
 8013b0c:	0801935c 	.word	0x0801935c
 8013b10:	080191e0 	.word	0x080191e0
 8013b14:	08019364 	.word	0x08019364
 8013b18:	08019360 	.word	0x08019360

08013b1c <rcl_node_is_valid>:
 8013b1c:	b130      	cbz	r0, 8013b2c <rcl_node_is_valid+0x10>
 8013b1e:	6843      	ldr	r3, [r0, #4]
 8013b20:	b123      	cbz	r3, 8013b2c <rcl_node_is_valid+0x10>
 8013b22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013b24:	b113      	cbz	r3, 8013b2c <rcl_node_is_valid+0x10>
 8013b26:	6800      	ldr	r0, [r0, #0]
 8013b28:	f7ff bc18 	b.w	801335c <rcl_context_is_valid>
 8013b2c:	2000      	movs	r0, #0
 8013b2e:	4770      	bx	lr

08013b30 <rcl_node_get_name>:
 8013b30:	b120      	cbz	r0, 8013b3c <rcl_node_get_name+0xc>
 8013b32:	6840      	ldr	r0, [r0, #4]
 8013b34:	b110      	cbz	r0, 8013b3c <rcl_node_get_name+0xc>
 8013b36:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013b38:	b100      	cbz	r0, 8013b3c <rcl_node_get_name+0xc>
 8013b3a:	6880      	ldr	r0, [r0, #8]
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop

08013b40 <rcl_node_get_namespace>:
 8013b40:	b120      	cbz	r0, 8013b4c <rcl_node_get_namespace+0xc>
 8013b42:	6840      	ldr	r0, [r0, #4]
 8013b44:	b110      	cbz	r0, 8013b4c <rcl_node_get_namespace+0xc>
 8013b46:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013b48:	b100      	cbz	r0, 8013b4c <rcl_node_get_namespace+0xc>
 8013b4a:	68c0      	ldr	r0, [r0, #12]
 8013b4c:	4770      	bx	lr
 8013b4e:	bf00      	nop

08013b50 <rcl_node_get_options>:
 8013b50:	b128      	cbz	r0, 8013b5e <rcl_node_get_options+0xe>
 8013b52:	6840      	ldr	r0, [r0, #4]
 8013b54:	b118      	cbz	r0, 8013b5e <rcl_node_get_options+0xe>
 8013b56:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	bf08      	it	eq
 8013b5c:	2000      	moveq	r0, #0
 8013b5e:	4770      	bx	lr

08013b60 <rcl_node_get_rmw_handle>:
 8013b60:	b110      	cbz	r0, 8013b68 <rcl_node_get_rmw_handle+0x8>
 8013b62:	6840      	ldr	r0, [r0, #4]
 8013b64:	b100      	cbz	r0, 8013b68 <rcl_node_get_rmw_handle+0x8>
 8013b66:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013b68:	4770      	bx	lr
 8013b6a:	bf00      	nop

08013b6c <rcl_node_get_default_options>:
 8013b6c:	b510      	push	{r4, lr}
 8013b6e:	4604      	mov	r4, r0
 8013b70:	2268      	movs	r2, #104	@ 0x68
 8013b72:	2100      	movs	r1, #0
 8013b74:	f004 fa28 	bl	8017fc8 <memset>
 8013b78:	4620      	mov	r0, r4
 8013b7a:	f7fb f923 	bl	800edc4 <rcutils_get_default_allocator>
 8013b7e:	2301      	movs	r3, #1
 8013b80:	4620      	mov	r0, r4
 8013b82:	7523      	strb	r3, [r4, #20]
 8013b84:	bd10      	pop	{r4, pc}
 8013b86:	bf00      	nop

08013b88 <rcl_node_options_copy>:
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	bf18      	it	ne
 8013b8c:	4288      	cmpne	r0, r1
 8013b8e:	d01b      	beq.n	8013bc8 <rcl_node_options_copy+0x40>
 8013b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b92:	fab1 f681 	clz	r6, r1
 8013b96:	460c      	mov	r4, r1
 8013b98:	0976      	lsrs	r6, r6, #5
 8013b9a:	b199      	cbz	r1, 8013bc4 <rcl_node_options_copy+0x3c>
 8013b9c:	4605      	mov	r5, r0
 8013b9e:	8a87      	ldrh	r7, [r0, #20]
 8013ba0:	4684      	mov	ip, r0
 8013ba2:	468e      	mov	lr, r1
 8013ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ba6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013baa:	682b      	ldr	r3, [r5, #0]
 8013bac:	2250      	movs	r2, #80	@ 0x50
 8013bae:	f10c 0118 	add.w	r1, ip, #24
 8013bb2:	f104 0018 	add.w	r0, r4, #24
 8013bb6:	f8ce 3000 	str.w	r3, [lr]
 8013bba:	82a7      	strh	r7, [r4, #20]
 8013bbc:	f004 fb23 	bl	8018206 <memcpy>
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bc4:	200b      	movs	r0, #11
 8013bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bc8:	200b      	movs	r0, #11
 8013bca:	4770      	bx	lr

08013bcc <rcl_node_resolve_name>:
 8013bcc:	b082      	sub	sp, #8
 8013bce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd2:	b091      	sub	sp, #68	@ 0x44
 8013bd4:	ac1a      	add	r4, sp, #104	@ 0x68
 8013bd6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013bda:	e884 000c 	stmia.w	r4, {r2, r3}
 8013bde:	2800      	cmp	r0, #0
 8013be0:	d03d      	beq.n	8013c5e <rcl_node_resolve_name+0x92>
 8013be2:	460c      	mov	r4, r1
 8013be4:	4605      	mov	r5, r0
 8013be6:	f7ff ffb3 	bl	8013b50 <rcl_node_get_options>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d03a      	beq.n	8013c64 <rcl_node_resolve_name+0x98>
 8013bee:	4628      	mov	r0, r5
 8013bf0:	f7ff ff9e 	bl	8013b30 <rcl_node_get_name>
 8013bf4:	4606      	mov	r6, r0
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013bfa:	f7ff ffa1 	bl	8013b40 <rcl_node_get_namespace>
 8013bfe:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013c02:	4607      	mov	r7, r0
 8013c04:	46ac      	mov	ip, r5
 8013c06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c0e:	f8de 3000 	ldr.w	r3, [lr]
 8013c12:	f8cc 3000 	str.w	r3, [ip]
 8013c16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013c18:	b30b      	cbz	r3, 8013c5e <rcl_node_resolve_name+0x92>
 8013c1a:	4689      	mov	r9, r1
 8013c1c:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8013c20:	f000 fc8e 	bl	8014540 <rcutils_get_zero_initialized_string_map>
 8013c24:	ab10      	add	r3, sp, #64	@ 0x40
 8013c26:	9008      	str	r0, [sp, #32]
 8013c28:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013c2c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013c30:	2100      	movs	r1, #0
 8013c32:	a808      	add	r0, sp, #32
 8013c34:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013c38:	f000 fcf8 	bl	801462c <rcutils_string_map_init>
 8013c3c:	4683      	mov	fp, r0
 8013c3e:	b1a0      	cbz	r0, 8013c6a <rcl_node_resolve_name+0x9e>
 8013c40:	f7fb f8dc 	bl	800edfc <rcutils_get_error_string>
 8013c44:	f7fb f8f0 	bl	800ee28 <rcutils_reset_error>
 8013c48:	f1bb 0f0a 	cmp.w	fp, #10
 8013c4c:	bf18      	it	ne
 8013c4e:	f04f 0b01 	movne.w	fp, #1
 8013c52:	4658      	mov	r0, fp
 8013c54:	b011      	add	sp, #68	@ 0x44
 8013c56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c5a:	b002      	add	sp, #8
 8013c5c:	4770      	bx	lr
 8013c5e:	f04f 0b0b 	mov.w	fp, #11
 8013c62:	e7f6      	b.n	8013c52 <rcl_node_resolve_name+0x86>
 8013c64:	f04f 0b01 	mov.w	fp, #1
 8013c68:	e7f3      	b.n	8013c52 <rcl_node_resolve_name+0x86>
 8013c6a:	9009      	str	r0, [sp, #36]	@ 0x24
 8013c6c:	9007      	str	r0, [sp, #28]
 8013c6e:	a808      	add	r0, sp, #32
 8013c70:	f003 fb34 	bl	80172dc <rcl_get_default_topic_name_substitutions>
 8013c74:	4683      	mov	fp, r0
 8013c76:	b180      	cbz	r0, 8013c9a <rcl_node_resolve_name+0xce>
 8013c78:	280a      	cmp	r0, #10
 8013c7a:	a808      	add	r0, sp, #32
 8013c7c:	bf18      	it	ne
 8013c7e:	f04f 0b01 	movne.w	fp, #1
 8013c82:	f000 fd13 	bl	80146ac <rcutils_string_map_fini>
 8013c86:	4604      	mov	r4, r0
 8013c88:	2800      	cmp	r0, #0
 8013c8a:	d15b      	bne.n	8013d44 <rcl_node_resolve_name+0x178>
 8013c8c:	4651      	mov	r1, sl
 8013c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c90:	47c8      	blx	r9
 8013c92:	4651      	mov	r1, sl
 8013c94:	4620      	mov	r0, r4
 8013c96:	47c8      	blx	r9
 8013c98:	e7db      	b.n	8013c52 <rcl_node_resolve_name+0x86>
 8013c9a:	ab09      	add	r3, sp, #36	@ 0x24
 8013c9c:	46ec      	mov	ip, sp
 8013c9e:	9305      	str	r3, [sp, #20]
 8013ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ca2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ca6:	682b      	ldr	r3, [r5, #0]
 8013ca8:	463a      	mov	r2, r7
 8013caa:	4631      	mov	r1, r6
 8013cac:	4620      	mov	r0, r4
 8013cae:	f8cc 3000 	str.w	r3, [ip]
 8013cb2:	ab08      	add	r3, sp, #32
 8013cb4:	f003 f9b2 	bl	801701c <rcl_expand_topic_name>
 8013cb8:	4683      	mov	fp, r0
 8013cba:	b9d8      	cbnz	r0, 8013cf4 <rcl_node_resolve_name+0x128>
 8013cbc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	9009      	str	r0, [sp, #36]	@ 0x24
 8013cc2:	a90a      	add	r1, sp, #40	@ 0x28
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f000 fddf 	bl	8014888 <rmw_validate_full_topic_name>
 8013cca:	bb50      	cbnz	r0, 8013d22 <rcl_node_resolve_name+0x156>
 8013ccc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013cce:	2d00      	cmp	r5, #0
 8013cd0:	d140      	bne.n	8013d54 <rcl_node_resolve_name+0x188>
 8013cd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013cd4:	a808      	add	r0, sp, #32
 8013cd6:	601c      	str	r4, [r3, #0]
 8013cd8:	f000 fce8 	bl	80146ac <rcutils_string_map_fini>
 8013cdc:	4683      	mov	fp, r0
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	d043      	beq.n	8013d6a <rcl_node_resolve_name+0x19e>
 8013ce2:	f7fb f88b 	bl	800edfc <rcutils_get_error_string>
 8013ce6:	46a8      	mov	r8, r5
 8013ce8:	f04f 0b01 	mov.w	fp, #1
 8013cec:	462c      	mov	r4, r5
 8013cee:	f7fb f89b 	bl	800ee28 <rcutils_reset_error>
 8013cf2:	e00a      	b.n	8013d0a <rcl_node_resolve_name+0x13e>
 8013cf4:	2867      	cmp	r0, #103	@ 0x67
 8013cf6:	bf14      	ite	ne
 8013cf8:	f04f 0800 	movne.w	r8, #0
 8013cfc:	f008 0801 	andeq.w	r8, r8, #1
 8013d00:	9c07      	ldr	r4, [sp, #28]
 8013d02:	a808      	add	r0, sp, #32
 8013d04:	f000 fcd2 	bl	80146ac <rcutils_string_map_fini>
 8013d08:	bb50      	cbnz	r0, 8013d60 <rcl_node_resolve_name+0x194>
 8013d0a:	4651      	mov	r1, sl
 8013d0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d0e:	47c8      	blx	r9
 8013d10:	4651      	mov	r1, sl
 8013d12:	4620      	mov	r0, r4
 8013d14:	47c8      	blx	r9
 8013d16:	f1b8 0f00 	cmp.w	r8, #0
 8013d1a:	bf18      	it	ne
 8013d1c:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8013d20:	e797      	b.n	8013c52 <rcl_node_resolve_name+0x86>
 8013d22:	f7fb f86b 	bl	800edfc <rcutils_get_error_string>
 8013d26:	f7fb f87f 	bl	800ee28 <rcutils_reset_error>
 8013d2a:	a808      	add	r0, sp, #32
 8013d2c:	f000 fcbe 	bl	80146ac <rcutils_string_map_fini>
 8013d30:	b998      	cbnz	r0, 8013d5a <rcl_node_resolve_name+0x18e>
 8013d32:	4651      	mov	r1, sl
 8013d34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d36:	47c8      	blx	r9
 8013d38:	4651      	mov	r1, sl
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f04f 0b01 	mov.w	fp, #1
 8013d40:	47c8      	blx	r9
 8013d42:	e786      	b.n	8013c52 <rcl_node_resolve_name+0x86>
 8013d44:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013d48:	f7fb f858 	bl	800edfc <rcutils_get_error_string>
 8013d4c:	f7fb f86c 	bl	800ee28 <rcutils_reset_error>
 8013d50:	4644      	mov	r4, r8
 8013d52:	e7da      	b.n	8013d0a <rcl_node_resolve_name+0x13e>
 8013d54:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8013d58:	e7d3      	b.n	8013d02 <rcl_node_resolve_name+0x136>
 8013d5a:	46d8      	mov	r8, fp
 8013d5c:	f04f 0b01 	mov.w	fp, #1
 8013d60:	f7fb f84c 	bl	800edfc <rcutils_get_error_string>
 8013d64:	f7fb f860 	bl	800ee28 <rcutils_reset_error>
 8013d68:	e7cf      	b.n	8013d0a <rcl_node_resolve_name+0x13e>
 8013d6a:	4651      	mov	r1, sl
 8013d6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d6e:	47c8      	blx	r9
 8013d70:	4651      	mov	r1, sl
 8013d72:	4658      	mov	r0, fp
 8013d74:	47c8      	blx	r9
 8013d76:	e76c      	b.n	8013c52 <rcl_node_resolve_name+0x86>

08013d78 <exact_match_lookup>:
 8013d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d7a:	f102 0708 	add.w	r7, r2, #8
 8013d7e:	460b      	mov	r3, r1
 8013d80:	b085      	sub	sp, #20
 8013d82:	4614      	mov	r4, r2
 8013d84:	4606      	mov	r6, r0
 8013d86:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013d8a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	4919      	ldr	r1, [pc, #100]	@ (8013df8 <exact_match_lookup+0x80>)
 8013d92:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013d96:	f000 fa4d 	bl	8014234 <rcutils_join_path>
 8013d9a:	7833      	ldrb	r3, [r6, #0]
 8013d9c:	4605      	mov	r5, r0
 8013d9e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013da0:	d023      	beq.n	8013dea <exact_match_lookup+0x72>
 8013da2:	f104 030c 	add.w	r3, r4, #12
 8013da6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013daa:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013dae:	1c70      	adds	r0, r6, #1
 8013db0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013db4:	f000 fa44 	bl	8014240 <rcutils_to_native_path>
 8013db8:	4606      	mov	r6, r0
 8013dba:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013dbe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013dc2:	4631      	mov	r1, r6
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013dca:	f000 fa33 	bl	8014234 <rcutils_join_path>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	6862      	ldr	r2, [r4, #4]
 8013dd4:	461e      	mov	r6, r3
 8013dd6:	6921      	ldr	r1, [r4, #16]
 8013dd8:	4790      	blx	r2
 8013dda:	4628      	mov	r0, r5
 8013ddc:	4635      	mov	r5, r6
 8013dde:	6863      	ldr	r3, [r4, #4]
 8013de0:	6921      	ldr	r1, [r4, #16]
 8013de2:	4798      	blx	r3
 8013de4:	4628      	mov	r0, r5
 8013de6:	b005      	add	sp, #20
 8013de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dea:	7873      	ldrb	r3, [r6, #1]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d1d8      	bne.n	8013da2 <exact_match_lookup+0x2a>
 8013df0:	4628      	mov	r0, r5
 8013df2:	b005      	add	sp, #20
 8013df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df6:	bf00      	nop
 8013df8:	080193b0 	.word	0x080193b0

08013dfc <rcl_get_secure_root>:
 8013dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e00:	b085      	sub	sp, #20
 8013e02:	b168      	cbz	r0, 8013e20 <rcl_get_secure_root+0x24>
 8013e04:	4607      	mov	r7, r0
 8013e06:	4608      	mov	r0, r1
 8013e08:	460c      	mov	r4, r1
 8013e0a:	f7fa ffe9 	bl	800ede0 <rcutils_allocator_is_valid>
 8013e0e:	b138      	cbz	r0, 8013e20 <rcl_get_secure_root+0x24>
 8013e10:	2300      	movs	r3, #0
 8013e12:	482d      	ldr	r0, [pc, #180]	@ (8013ec8 <rcl_get_secure_root+0xcc>)
 8013e14:	a903      	add	r1, sp, #12
 8013e16:	9303      	str	r3, [sp, #12]
 8013e18:	f000 f9f2 	bl	8014200 <rcutils_get_env>
 8013e1c:	4605      	mov	r5, r0
 8013e1e:	b120      	cbz	r0, 8013e2a <rcl_get_secure_root+0x2e>
 8013e20:	2500      	movs	r5, #0
 8013e22:	4628      	mov	r0, r5
 8013e24:	b005      	add	sp, #20
 8013e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e2a:	9b03      	ldr	r3, [sp, #12]
 8013e2c:	781a      	ldrb	r2, [r3, #0]
 8013e2e:	2a00      	cmp	r2, #0
 8013e30:	d0f6      	beq.n	8013e20 <rcl_get_secure_root+0x24>
 8013e32:	f104 090c 	add.w	r9, r4, #12
 8013e36:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013e3a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013e44:	f000 fb3e 	bl	80144c4 <rcutils_strdup>
 8013e48:	4680      	mov	r8, r0
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	d0e8      	beq.n	8013e20 <rcl_get_secure_root+0x24>
 8013e4e:	a903      	add	r1, sp, #12
 8013e50:	481e      	ldr	r0, [pc, #120]	@ (8013ecc <rcl_get_secure_root+0xd0>)
 8013e52:	9503      	str	r5, [sp, #12]
 8013e54:	f000 f9d4 	bl	8014200 <rcutils_get_env>
 8013e58:	b160      	cbz	r0, 8013e74 <rcl_get_secure_root+0x78>
 8013e5a:	2600      	movs	r6, #0
 8013e5c:	4630      	mov	r0, r6
 8013e5e:	6863      	ldr	r3, [r4, #4]
 8013e60:	6921      	ldr	r1, [r4, #16]
 8013e62:	4798      	blx	r3
 8013e64:	4640      	mov	r0, r8
 8013e66:	6863      	ldr	r3, [r4, #4]
 8013e68:	6921      	ldr	r1, [r4, #16]
 8013e6a:	4798      	blx	r3
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	b005      	add	sp, #20
 8013e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e74:	9b03      	ldr	r3, [sp, #12]
 8013e76:	781e      	ldrb	r6, [r3, #0]
 8013e78:	b1f6      	cbz	r6, 8013eb8 <rcl_get_secure_root+0xbc>
 8013e7a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013e7e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013e82:	4618      	mov	r0, r3
 8013e84:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013e88:	f000 fb1c 	bl	80144c4 <rcutils_strdup>
 8013e8c:	4606      	mov	r6, r0
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d0e3      	beq.n	8013e5a <rcl_get_secure_root+0x5e>
 8013e92:	4622      	mov	r2, r4
 8013e94:	4641      	mov	r1, r8
 8013e96:	f7ff ff6f 	bl	8013d78 <exact_match_lookup>
 8013e9a:	4605      	mov	r5, r0
 8013e9c:	2d00      	cmp	r5, #0
 8013e9e:	d0dd      	beq.n	8013e5c <rcl_get_secure_root+0x60>
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	f000 f9c5 	bl	8014230 <rcutils_is_directory>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d1d7      	bne.n	8013e5c <rcl_get_secure_root+0x60>
 8013eac:	4628      	mov	r0, r5
 8013eae:	6921      	ldr	r1, [r4, #16]
 8013eb0:	461d      	mov	r5, r3
 8013eb2:	6863      	ldr	r3, [r4, #4]
 8013eb4:	4798      	blx	r3
 8013eb6:	e7d1      	b.n	8013e5c <rcl_get_secure_root+0x60>
 8013eb8:	4622      	mov	r2, r4
 8013eba:	4638      	mov	r0, r7
 8013ebc:	4641      	mov	r1, r8
 8013ebe:	f7ff ff5b 	bl	8013d78 <exact_match_lookup>
 8013ec2:	4605      	mov	r5, r0
 8013ec4:	e7ea      	b.n	8013e9c <rcl_get_secure_root+0xa0>
 8013ec6:	bf00      	nop
 8013ec8:	080193bc 	.word	0x080193bc
 8013ecc:	080193d4 	.word	0x080193d4

08013ed0 <rcl_get_security_options_from_environment>:
 8013ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed4:	b082      	sub	sp, #8
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	4606      	mov	r6, r0
 8013eda:	460f      	mov	r7, r1
 8013edc:	4821      	ldr	r0, [pc, #132]	@ (8013f64 <rcl_get_security_options_from_environment+0x94>)
 8013ede:	a901      	add	r1, sp, #4
 8013ee0:	4690      	mov	r8, r2
 8013ee2:	9301      	str	r3, [sp, #4]
 8013ee4:	f000 f98c 	bl	8014200 <rcutils_get_env>
 8013ee8:	b120      	cbz	r0, 8013ef4 <rcl_get_security_options_from_environment+0x24>
 8013eea:	2501      	movs	r5, #1
 8013eec:	4628      	mov	r0, r5
 8013eee:	b002      	add	sp, #8
 8013ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef4:	4604      	mov	r4, r0
 8013ef6:	491c      	ldr	r1, [pc, #112]	@ (8013f68 <rcl_get_security_options_from_environment+0x98>)
 8013ef8:	9801      	ldr	r0, [sp, #4]
 8013efa:	f7ec f9f1 	bl	80002e0 <strcmp>
 8013efe:	4605      	mov	r5, r0
 8013f00:	b9f0      	cbnz	r0, 8013f40 <rcl_get_security_options_from_environment+0x70>
 8013f02:	9001      	str	r0, [sp, #4]
 8013f04:	f1b8 0f00 	cmp.w	r8, #0
 8013f08:	d021      	beq.n	8013f4e <rcl_get_security_options_from_environment+0x7e>
 8013f0a:	a901      	add	r1, sp, #4
 8013f0c:	4817      	ldr	r0, [pc, #92]	@ (8013f6c <rcl_get_security_options_from_environment+0x9c>)
 8013f0e:	f000 f977 	bl	8014200 <rcutils_get_env>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	d1e9      	bne.n	8013eea <rcl_get_security_options_from_environment+0x1a>
 8013f16:	4916      	ldr	r1, [pc, #88]	@ (8013f70 <rcl_get_security_options_from_environment+0xa0>)
 8013f18:	9801      	ldr	r0, [sp, #4]
 8013f1a:	f7ec f9e1 	bl	80002e0 <strcmp>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	4639      	mov	r1, r7
 8013f22:	4630      	mov	r0, r6
 8013f24:	fab3 f383 	clz	r3, r3
 8013f28:	095b      	lsrs	r3, r3, #5
 8013f2a:	f888 3000 	strb.w	r3, [r8]
 8013f2e:	f7ff ff65 	bl	8013dfc <rcl_get_secure_root>
 8013f32:	b170      	cbz	r0, 8013f52 <rcl_get_security_options_from_environment+0x82>
 8013f34:	f8c8 0004 	str.w	r0, [r8, #4]
 8013f38:	4628      	mov	r0, r5
 8013f3a:	b002      	add	sp, #8
 8013f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f40:	4625      	mov	r5, r4
 8013f42:	f888 4000 	strb.w	r4, [r8]
 8013f46:	4628      	mov	r0, r5
 8013f48:	b002      	add	sp, #8
 8013f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f4e:	250b      	movs	r5, #11
 8013f50:	e7cc      	b.n	8013eec <rcl_get_security_options_from_environment+0x1c>
 8013f52:	f898 5000 	ldrb.w	r5, [r8]
 8013f56:	f1a5 0501 	sub.w	r5, r5, #1
 8013f5a:	fab5 f585 	clz	r5, r5
 8013f5e:	096d      	lsrs	r5, r5, #5
 8013f60:	e7c4      	b.n	8013eec <rcl_get_security_options_from_environment+0x1c>
 8013f62:	bf00      	nop
 8013f64:	08019374 	.word	0x08019374
 8013f68:	08019388 	.word	0x08019388
 8013f6c:	08019390 	.word	0x08019390
 8013f70:	080193a8 	.word	0x080193a8

08013f74 <rcl_get_system_time>:
 8013f74:	4608      	mov	r0, r1
 8013f76:	f000 bc11 	b.w	801479c <rcutils_system_time_now>
 8013f7a:	bf00      	nop

08013f7c <rcl_get_steady_time>:
 8013f7c:	4608      	mov	r0, r1
 8013f7e:	f000 bc33 	b.w	80147e8 <rcutils_steady_time_now>
 8013f82:	bf00      	nop

08013f84 <rcl_get_ros_time>:
 8013f84:	7a03      	ldrb	r3, [r0, #8]
 8013f86:	b510      	push	{r4, lr}
 8013f88:	460c      	mov	r4, r1
 8013f8a:	b143      	cbz	r3, 8013f9e <rcl_get_ros_time+0x1a>
 8013f8c:	2105      	movs	r1, #5
 8013f8e:	f000 f901 	bl	8014194 <__atomic_load_8>
 8013f92:	4602      	mov	r2, r0
 8013f94:	460b      	mov	r3, r1
 8013f96:	2000      	movs	r0, #0
 8013f98:	e9c4 2300 	strd	r2, r3, [r4]
 8013f9c:	bd10      	pop	{r4, pc}
 8013f9e:	4608      	mov	r0, r1
 8013fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fa4:	f000 bbfa 	b.w	801479c <rcutils_system_time_now>

08013fa8 <rcl_clock_init>:
 8013fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013faa:	4605      	mov	r5, r0
 8013fac:	4610      	mov	r0, r2
 8013fae:	4614      	mov	r4, r2
 8013fb0:	460e      	mov	r6, r1
 8013fb2:	f7fa ff15 	bl	800ede0 <rcutils_allocator_is_valid>
 8013fb6:	b128      	cbz	r0, 8013fc4 <rcl_clock_init+0x1c>
 8013fb8:	2d03      	cmp	r5, #3
 8013fba:	d803      	bhi.n	8013fc4 <rcl_clock_init+0x1c>
 8013fbc:	e8df f005 	tbb	[pc, r5]
 8013fc0:	0659301f 	.word	0x0659301f
 8013fc4:	f04f 0c0b 	mov.w	ip, #11
 8013fc8:	4660      	mov	r0, ip
 8013fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fcc:	2c00      	cmp	r4, #0
 8013fce:	d0f9      	beq.n	8013fc4 <rcl_clock_init+0x1c>
 8013fd0:	fab6 f386 	clz	r3, r6
 8013fd4:	095b      	lsrs	r3, r3, #5
 8013fd6:	2e00      	cmp	r6, #0
 8013fd8:	d0f4      	beq.n	8013fc4 <rcl_clock_init+0x1c>
 8013fda:	6133      	str	r3, [r6, #16]
 8013fdc:	469c      	mov	ip, r3
 8013fde:	f106 0514 	add.w	r5, r6, #20
 8013fe2:	4f32      	ldr	r7, [pc, #200]	@ (80140ac <rcl_clock_init+0x104>)
 8013fe4:	f04f 0e03 	mov.w	lr, #3
 8013fe8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013ff0:	6823      	ldr	r3, [r4, #0]
 8013ff2:	4660      	mov	r0, ip
 8013ff4:	602b      	str	r3, [r5, #0]
 8013ff6:	60f7      	str	r7, [r6, #12]
 8013ff8:	f886 e000 	strb.w	lr, [r6]
 8013ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ffe:	2e00      	cmp	r6, #0
 8014000:	d0e0      	beq.n	8013fc4 <rcl_clock_init+0x1c>
 8014002:	2300      	movs	r3, #0
 8014004:	f106 0514 	add.w	r5, r6, #20
 8014008:	7033      	strb	r3, [r6, #0]
 801400a:	469c      	mov	ip, r3
 801400c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014010:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014018:	6823      	ldr	r3, [r4, #0]
 801401a:	4660      	mov	r0, ip
 801401c:	602b      	str	r3, [r5, #0]
 801401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014020:	2c00      	cmp	r4, #0
 8014022:	d0cf      	beq.n	8013fc4 <rcl_clock_init+0x1c>
 8014024:	fab6 f586 	clz	r5, r6
 8014028:	096d      	lsrs	r5, r5, #5
 801402a:	2e00      	cmp	r6, #0
 801402c:	d0ca      	beq.n	8013fc4 <rcl_clock_init+0x1c>
 801402e:	46a6      	mov	lr, r4
 8014030:	7035      	strb	r5, [r6, #0]
 8014032:	f106 0c14 	add.w	ip, r6, #20
 8014036:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801403a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801403e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8014042:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014046:	f8de 3000 	ldr.w	r3, [lr]
 801404a:	2010      	movs	r0, #16
 801404c:	f8cc 3000 	str.w	r3, [ip]
 8014050:	6823      	ldr	r3, [r4, #0]
 8014052:	6921      	ldr	r1, [r4, #16]
 8014054:	4798      	blx	r3
 8014056:	6130      	str	r0, [r6, #16]
 8014058:	b320      	cbz	r0, 80140a4 <rcl_clock_init+0xfc>
 801405a:	2200      	movs	r2, #0
 801405c:	2300      	movs	r3, #0
 801405e:	46ac      	mov	ip, r5
 8014060:	7205      	strb	r5, [r0, #8]
 8014062:	e9c0 2300 	strd	r2, r3, [r0]
 8014066:	4a12      	ldr	r2, [pc, #72]	@ (80140b0 <rcl_clock_init+0x108>)
 8014068:	2301      	movs	r3, #1
 801406a:	4660      	mov	r0, ip
 801406c:	60f2      	str	r2, [r6, #12]
 801406e:	7033      	strb	r3, [r6, #0]
 8014070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014072:	2c00      	cmp	r4, #0
 8014074:	d0a6      	beq.n	8013fc4 <rcl_clock_init+0x1c>
 8014076:	fab6 f386 	clz	r3, r6
 801407a:	095b      	lsrs	r3, r3, #5
 801407c:	2e00      	cmp	r6, #0
 801407e:	d0a1      	beq.n	8013fc4 <rcl_clock_init+0x1c>
 8014080:	6133      	str	r3, [r6, #16]
 8014082:	469c      	mov	ip, r3
 8014084:	f106 0514 	add.w	r5, r6, #20
 8014088:	f8df e028 	ldr.w	lr, [pc, #40]	@ 80140b4 <rcl_clock_init+0x10c>
 801408c:	2702      	movs	r7, #2
 801408e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014096:	6823      	ldr	r3, [r4, #0]
 8014098:	4660      	mov	r0, ip
 801409a:	602b      	str	r3, [r5, #0]
 801409c:	f8c6 e00c 	str.w	lr, [r6, #12]
 80140a0:	7037      	strb	r7, [r6, #0]
 80140a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a4:	f04f 0c0a 	mov.w	ip, #10
 80140a8:	e78e      	b.n	8013fc8 <rcl_clock_init+0x20>
 80140aa:	bf00      	nop
 80140ac:	08013f7d 	.word	0x08013f7d
 80140b0:	08013f85 	.word	0x08013f85
 80140b4:	08013f75 	.word	0x08013f75

080140b8 <rcl_validate_enclave_name_with_size>:
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d049      	beq.n	8014150 <rcl_validate_enclave_name_with_size+0x98>
 80140bc:	b570      	push	{r4, r5, r6, lr}
 80140be:	4615      	mov	r5, r2
 80140c0:	b0c2      	sub	sp, #264	@ 0x108
 80140c2:	b19a      	cbz	r2, 80140ec <rcl_validate_enclave_name_with_size+0x34>
 80140c4:	461e      	mov	r6, r3
 80140c6:	466a      	mov	r2, sp
 80140c8:	ab01      	add	r3, sp, #4
 80140ca:	460c      	mov	r4, r1
 80140cc:	f000 fc58 	bl	8014980 <rmw_validate_namespace_with_size>
 80140d0:	4684      	mov	ip, r0
 80140d2:	b9b8      	cbnz	r0, 8014104 <rcl_validate_enclave_name_with_size+0x4c>
 80140d4:	9900      	ldr	r1, [sp, #0]
 80140d6:	b171      	cbz	r1, 80140f6 <rcl_validate_enclave_name_with_size+0x3e>
 80140d8:	2907      	cmp	r1, #7
 80140da:	d019      	beq.n	8014110 <rcl_validate_enclave_name_with_size+0x58>
 80140dc:	1e4b      	subs	r3, r1, #1
 80140de:	2b05      	cmp	r3, #5
 80140e0:	d83a      	bhi.n	8014158 <rcl_validate_enclave_name_with_size+0xa0>
 80140e2:	e8df f003 	tbb	[pc, r3]
 80140e6:	2926      	.short	0x2926
 80140e8:	1d322f2c 	.word	0x1d322f2c
 80140ec:	f04f 0c0b 	mov.w	ip, #11
 80140f0:	4660      	mov	r0, ip
 80140f2:	b042      	add	sp, #264	@ 0x108
 80140f4:	bd70      	pop	{r4, r5, r6, pc}
 80140f6:	2907      	cmp	r1, #7
 80140f8:	d00a      	beq.n	8014110 <rcl_validate_enclave_name_with_size+0x58>
 80140fa:	2300      	movs	r3, #0
 80140fc:	4660      	mov	r0, ip
 80140fe:	602b      	str	r3, [r5, #0]
 8014100:	b042      	add	sp, #264	@ 0x108
 8014102:	bd70      	pop	{r4, r5, r6, pc}
 8014104:	f7ff f90c 	bl	8013320 <rcl_convert_rmw_ret_to_rcl_ret>
 8014108:	4684      	mov	ip, r0
 801410a:	4660      	mov	r0, ip
 801410c:	b042      	add	sp, #264	@ 0x108
 801410e:	bd70      	pop	{r4, r5, r6, pc}
 8014110:	2cff      	cmp	r4, #255	@ 0xff
 8014112:	d9f2      	bls.n	80140fa <rcl_validate_enclave_name_with_size+0x42>
 8014114:	6029      	str	r1, [r5, #0]
 8014116:	2e00      	cmp	r6, #0
 8014118:	d0ea      	beq.n	80140f0 <rcl_validate_enclave_name_with_size+0x38>
 801411a:	23fe      	movs	r3, #254	@ 0xfe
 801411c:	6033      	str	r3, [r6, #0]
 801411e:	e7e7      	b.n	80140f0 <rcl_validate_enclave_name_with_size+0x38>
 8014120:	2306      	movs	r3, #6
 8014122:	602b      	str	r3, [r5, #0]
 8014124:	2e00      	cmp	r6, #0
 8014126:	d0e3      	beq.n	80140f0 <rcl_validate_enclave_name_with_size+0x38>
 8014128:	9b01      	ldr	r3, [sp, #4]
 801412a:	4660      	mov	r0, ip
 801412c:	6033      	str	r3, [r6, #0]
 801412e:	b042      	add	sp, #264	@ 0x108
 8014130:	bd70      	pop	{r4, r5, r6, pc}
 8014132:	2301      	movs	r3, #1
 8014134:	602b      	str	r3, [r5, #0]
 8014136:	e7f5      	b.n	8014124 <rcl_validate_enclave_name_with_size+0x6c>
 8014138:	2302      	movs	r3, #2
 801413a:	602b      	str	r3, [r5, #0]
 801413c:	e7f2      	b.n	8014124 <rcl_validate_enclave_name_with_size+0x6c>
 801413e:	2303      	movs	r3, #3
 8014140:	602b      	str	r3, [r5, #0]
 8014142:	e7ef      	b.n	8014124 <rcl_validate_enclave_name_with_size+0x6c>
 8014144:	2304      	movs	r3, #4
 8014146:	602b      	str	r3, [r5, #0]
 8014148:	e7ec      	b.n	8014124 <rcl_validate_enclave_name_with_size+0x6c>
 801414a:	2305      	movs	r3, #5
 801414c:	602b      	str	r3, [r5, #0]
 801414e:	e7e9      	b.n	8014124 <rcl_validate_enclave_name_with_size+0x6c>
 8014150:	f04f 0c0b 	mov.w	ip, #11
 8014154:	4660      	mov	r0, ip
 8014156:	4770      	bx	lr
 8014158:	460b      	mov	r3, r1
 801415a:	4a04      	ldr	r2, [pc, #16]	@ (801416c <rcl_validate_enclave_name_with_size+0xb4>)
 801415c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014160:	a802      	add	r0, sp, #8
 8014162:	f000 f961 	bl	8014428 <rcutils_snprintf>
 8014166:	f04f 0c01 	mov.w	ip, #1
 801416a:	e7c1      	b.n	80140f0 <rcl_validate_enclave_name_with_size+0x38>
 801416c:	080193f4 	.word	0x080193f4

08014170 <rcl_validate_enclave_name>:
 8014170:	b168      	cbz	r0, 801418e <rcl_validate_enclave_name+0x1e>
 8014172:	b570      	push	{r4, r5, r6, lr}
 8014174:	460d      	mov	r5, r1
 8014176:	4616      	mov	r6, r2
 8014178:	4604      	mov	r4, r0
 801417a:	f7ec f8bb 	bl	80002f4 <strlen>
 801417e:	4633      	mov	r3, r6
 8014180:	4601      	mov	r1, r0
 8014182:	462a      	mov	r2, r5
 8014184:	4620      	mov	r0, r4
 8014186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801418a:	f7ff bf95 	b.w	80140b8 <rcl_validate_enclave_name_with_size>
 801418e:	200b      	movs	r0, #11
 8014190:	4770      	bx	lr
 8014192:	bf00      	nop

08014194 <__atomic_load_8>:
 8014194:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014198:	4a16      	ldr	r2, [pc, #88]	@ (80141f4 <__atomic_load_8+0x60>)
 801419a:	4b17      	ldr	r3, [pc, #92]	@ (80141f8 <__atomic_load_8+0x64>)
 801419c:	f04f 0c01 	mov.w	ip, #1
 80141a0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80141a4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80141a8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80141ac:	fb02 f101 	mul.w	r1, r2, r1
 80141b0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80141b4:	fba3 2301 	umull	r2, r3, r3, r1
 80141b8:	091b      	lsrs	r3, r3, #4
 80141ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80141be:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80141c2:	b4d0      	push	{r4, r6, r7}
 80141c4:	1ac9      	subs	r1, r1, r3
 80141c6:	4c0d      	ldr	r4, [pc, #52]	@ (80141fc <__atomic_load_8+0x68>)
 80141c8:	1862      	adds	r2, r4, r1
 80141ca:	e8d2 3f4f 	ldrexb	r3, [r2]
 80141ce:	e8c2 cf46 	strexb	r6, ip, [r2]
 80141d2:	2e00      	cmp	r6, #0
 80141d4:	d1f9      	bne.n	80141ca <__atomic_load_8+0x36>
 80141d6:	b2db      	uxtb	r3, r3
 80141d8:	f3bf 8f5b 	dmb	ish
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d1f4      	bne.n	80141ca <__atomic_load_8+0x36>
 80141e0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80141e4:	f3bf 8f5b 	dmb	ish
 80141e8:	5463      	strb	r3, [r4, r1]
 80141ea:	4630      	mov	r0, r6
 80141ec:	4639      	mov	r1, r7
 80141ee:	bcd0      	pop	{r4, r6, r7}
 80141f0:	4770      	bx	lr
 80141f2:	bf00      	nop
 80141f4:	27d4eb2d 	.word	0x27d4eb2d
 80141f8:	b21642c9 	.word	0xb21642c9
 80141fc:	24068430 	.word	0x24068430

08014200 <rcutils_get_env>:
 8014200:	b168      	cbz	r0, 801421e <rcutils_get_env+0x1e>
 8014202:	b510      	push	{r4, lr}
 8014204:	460c      	mov	r4, r1
 8014206:	b129      	cbz	r1, 8014214 <rcutils_get_env+0x14>
 8014208:	f003 fb4c 	bl	80178a4 <getenv>
 801420c:	b120      	cbz	r0, 8014218 <rcutils_get_env+0x18>
 801420e:	6020      	str	r0, [r4, #0]
 8014210:	2000      	movs	r0, #0
 8014212:	bd10      	pop	{r4, pc}
 8014214:	4803      	ldr	r0, [pc, #12]	@ (8014224 <rcutils_get_env+0x24>)
 8014216:	bd10      	pop	{r4, pc}
 8014218:	4b03      	ldr	r3, [pc, #12]	@ (8014228 <rcutils_get_env+0x28>)
 801421a:	6023      	str	r3, [r4, #0]
 801421c:	bd10      	pop	{r4, pc}
 801421e:	4803      	ldr	r0, [pc, #12]	@ (801422c <rcutils_get_env+0x2c>)
 8014220:	4770      	bx	lr
 8014222:	bf00      	nop
 8014224:	08019470 	.word	0x08019470
 8014228:	08019594 	.word	0x08019594
 801422c:	08019454 	.word	0x08019454

08014230 <rcutils_is_directory>:
 8014230:	2000      	movs	r0, #0
 8014232:	4770      	bx	lr

08014234 <rcutils_join_path>:
 8014234:	b082      	sub	sp, #8
 8014236:	2000      	movs	r0, #0
 8014238:	e88d 000c 	stmia.w	sp, {r2, r3}
 801423c:	b002      	add	sp, #8
 801423e:	4770      	bx	lr

08014240 <rcutils_to_native_path>:
 8014240:	b084      	sub	sp, #16
 8014242:	2000      	movs	r0, #0
 8014244:	f10d 0c04 	add.w	ip, sp, #4
 8014248:	b004      	add	sp, #16
 801424a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801424e:	4770      	bx	lr

08014250 <rcutils_format_string_limit>:
 8014250:	b40f      	push	{r0, r1, r2, r3}
 8014252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014254:	b083      	sub	sp, #12
 8014256:	ac08      	add	r4, sp, #32
 8014258:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801425a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801425e:	b326      	cbz	r6, 80142aa <rcutils_format_string_limit+0x5a>
 8014260:	a808      	add	r0, sp, #32
 8014262:	f7fa fdbd 	bl	800ede0 <rcutils_allocator_is_valid>
 8014266:	b300      	cbz	r0, 80142aa <rcutils_format_string_limit+0x5a>
 8014268:	2100      	movs	r1, #0
 801426a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801426c:	4632      	mov	r2, r6
 801426e:	4608      	mov	r0, r1
 8014270:	e9cd 3300 	strd	r3, r3, [sp]
 8014274:	f000 f906 	bl	8014484 <rcutils_vsnprintf>
 8014278:	1c43      	adds	r3, r0, #1
 801427a:	4605      	mov	r5, r0
 801427c:	d015      	beq.n	80142aa <rcutils_format_string_limit+0x5a>
 801427e:	1c47      	adds	r7, r0, #1
 8014280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014282:	429f      	cmp	r7, r3
 8014284:	d901      	bls.n	801428a <rcutils_format_string_limit+0x3a>
 8014286:	1e5d      	subs	r5, r3, #1
 8014288:	461f      	mov	r7, r3
 801428a:	9b08      	ldr	r3, [sp, #32]
 801428c:	4638      	mov	r0, r7
 801428e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014290:	4798      	blx	r3
 8014292:	4604      	mov	r4, r0
 8014294:	b148      	cbz	r0, 80142aa <rcutils_format_string_limit+0x5a>
 8014296:	4632      	mov	r2, r6
 8014298:	4639      	mov	r1, r7
 801429a:	9b01      	ldr	r3, [sp, #4]
 801429c:	f000 f8f2 	bl	8014484 <rcutils_vsnprintf>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	db09      	blt.n	80142b8 <rcutils_format_string_limit+0x68>
 80142a4:	2300      	movs	r3, #0
 80142a6:	5563      	strb	r3, [r4, r5]
 80142a8:	e000      	b.n	80142ac <rcutils_format_string_limit+0x5c>
 80142aa:	2400      	movs	r4, #0
 80142ac:	4620      	mov	r0, r4
 80142ae:	b003      	add	sp, #12
 80142b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80142b4:	b004      	add	sp, #16
 80142b6:	4770      	bx	lr
 80142b8:	4620      	mov	r0, r4
 80142ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80142be:	2400      	movs	r4, #0
 80142c0:	4798      	blx	r3
 80142c2:	e7f3      	b.n	80142ac <rcutils_format_string_limit+0x5c>

080142c4 <rcutils_repl_str>:
 80142c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142c8:	ed2d 8b02 	vpush	{d8}
 80142cc:	b087      	sub	sp, #28
 80142ce:	2600      	movs	r6, #0
 80142d0:	4680      	mov	r8, r0
 80142d2:	468a      	mov	sl, r1
 80142d4:	9000      	str	r0, [sp, #0]
 80142d6:	4608      	mov	r0, r1
 80142d8:	ee08 2a10 	vmov	s16, r2
 80142dc:	4699      	mov	r9, r3
 80142de:	2510      	movs	r5, #16
 80142e0:	f7ec f808 	bl	80002f4 <strlen>
 80142e4:	4637      	mov	r7, r6
 80142e6:	46b3      	mov	fp, r6
 80142e8:	9001      	str	r0, [sp, #4]
 80142ea:	e01e      	b.n	801432a <rcutils_repl_str+0x66>
 80142ec:	f10b 0b01 	add.w	fp, fp, #1
 80142f0:	9b01      	ldr	r3, [sp, #4]
 80142f2:	455e      	cmp	r6, fp
 80142f4:	eb04 0803 	add.w	r8, r4, r3
 80142f8:	d211      	bcs.n	801431e <rcutils_repl_str+0x5a>
 80142fa:	442e      	add	r6, r5
 80142fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014300:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014308:	00b1      	lsls	r1, r6, #2
 801430a:	4798      	blx	r3
 801430c:	2800      	cmp	r0, #0
 801430e:	f000 8088 	beq.w	8014422 <rcutils_repl_str+0x15e>
 8014312:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014316:	4607      	mov	r7, r0
 8014318:	bf28      	it	cs
 801431a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801431e:	9a00      	ldr	r2, [sp, #0]
 8014320:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8014324:	1aa4      	subs	r4, r4, r2
 8014326:	f843 4c04 	str.w	r4, [r3, #-4]
 801432a:	4651      	mov	r1, sl
 801432c:	4640      	mov	r0, r8
 801432e:	f003 fe72 	bl	8018016 <strstr>
 8014332:	4604      	mov	r4, r0
 8014334:	4638      	mov	r0, r7
 8014336:	2c00      	cmp	r4, #0
 8014338:	d1d8      	bne.n	80142ec <rcutils_repl_str+0x28>
 801433a:	4640      	mov	r0, r8
 801433c:	f7eb ffda 	bl	80002f4 <strlen>
 8014340:	9b00      	ldr	r3, [sp, #0]
 8014342:	eba8 0803 	sub.w	r8, r8, r3
 8014346:	eb08 0400 	add.w	r4, r8, r0
 801434a:	9402      	str	r4, [sp, #8]
 801434c:	f1bb 0f00 	cmp.w	fp, #0
 8014350:	d045      	beq.n	80143de <rcutils_repl_str+0x11a>
 8014352:	ee18 0a10 	vmov	r0, s16
 8014356:	f7eb ffcd 	bl	80002f4 <strlen>
 801435a:	9a01      	ldr	r2, [sp, #4]
 801435c:	4606      	mov	r6, r0
 801435e:	f8d9 3000 	ldr.w	r3, [r9]
 8014362:	1a82      	subs	r2, r0, r2
 8014364:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014368:	fb0b 4202 	mla	r2, fp, r2, r4
 801436c:	1c50      	adds	r0, r2, #1
 801436e:	9205      	str	r2, [sp, #20]
 8014370:	4798      	blx	r3
 8014372:	4682      	mov	sl, r0
 8014374:	2800      	cmp	r0, #0
 8014376:	d054      	beq.n	8014422 <rcutils_repl_str+0x15e>
 8014378:	683a      	ldr	r2, [r7, #0]
 801437a:	463d      	mov	r5, r7
 801437c:	9900      	ldr	r1, [sp, #0]
 801437e:	2401      	movs	r4, #1
 8014380:	f003 ff41 	bl	8018206 <memcpy>
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801438a:	eb0a 0803 	add.w	r8, sl, r3
 801438e:	ee18 7a10 	vmov	r7, s16
 8014392:	f8dd a000 	ldr.w	sl, [sp]
 8014396:	f8cd 9000 	str.w	r9, [sp]
 801439a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801439e:	4632      	mov	r2, r6
 80143a0:	4639      	mov	r1, r7
 80143a2:	4640      	mov	r0, r8
 80143a4:	44b0      	add	r8, r6
 80143a6:	f003 ff2e 	bl	8018206 <memcpy>
 80143aa:	f855 2b04 	ldr.w	r2, [r5], #4
 80143ae:	45a3      	cmp	fp, r4
 80143b0:	444a      	add	r2, r9
 80143b2:	eb0a 0102 	add.w	r1, sl, r2
 80143b6:	d02a      	beq.n	801440e <rcutils_repl_str+0x14a>
 80143b8:	6828      	ldr	r0, [r5, #0]
 80143ba:	1a82      	subs	r2, r0, r2
 80143bc:	4640      	mov	r0, r8
 80143be:	4490      	add	r8, r2
 80143c0:	f003 ff21 	bl	8018206 <memcpy>
 80143c4:	1c62      	adds	r2, r4, #1
 80143c6:	45a3      	cmp	fp, r4
 80143c8:	4614      	mov	r4, r2
 80143ca:	d8e8      	bhi.n	801439e <rcutils_repl_str+0xda>
 80143cc:	f8dd 9000 	ldr.w	r9, [sp]
 80143d0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80143d4:	2300      	movs	r3, #0
 80143d6:	9a05      	ldr	r2, [sp, #20]
 80143d8:	f80a 3002 	strb.w	r3, [sl, r2]
 80143dc:	e00b      	b.n	80143f6 <rcutils_repl_str+0x132>
 80143de:	4620      	mov	r0, r4
 80143e0:	f8d9 3000 	ldr.w	r3, [r9]
 80143e4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80143e8:	3001      	adds	r0, #1
 80143ea:	4798      	blx	r3
 80143ec:	4682      	mov	sl, r0
 80143ee:	b110      	cbz	r0, 80143f6 <rcutils_repl_str+0x132>
 80143f0:	9900      	ldr	r1, [sp, #0]
 80143f2:	f003 ff00 	bl	80181f6 <strcpy>
 80143f6:	4638      	mov	r0, r7
 80143f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80143fc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014400:	4798      	blx	r3
 8014402:	4650      	mov	r0, sl
 8014404:	b007      	add	sp, #28
 8014406:	ecbd 8b02 	vpop	{d8}
 801440a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801440e:	9b02      	ldr	r3, [sp, #8]
 8014410:	4640      	mov	r0, r8
 8014412:	f8dd 9000 	ldr.w	r9, [sp]
 8014416:	1a9a      	subs	r2, r3, r2
 8014418:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801441c:	f003 fef3 	bl	8018206 <memcpy>
 8014420:	e7d8      	b.n	80143d4 <rcutils_repl_str+0x110>
 8014422:	f04f 0a00 	mov.w	sl, #0
 8014426:	e7e6      	b.n	80143f6 <rcutils_repl_str+0x132>

08014428 <rcutils_snprintf>:
 8014428:	b40c      	push	{r2, r3}
 801442a:	b530      	push	{r4, r5, lr}
 801442c:	b083      	sub	sp, #12
 801442e:	ab06      	add	r3, sp, #24
 8014430:	f853 2b04 	ldr.w	r2, [r3], #4
 8014434:	9301      	str	r3, [sp, #4]
 8014436:	b1e2      	cbz	r2, 8014472 <rcutils_snprintf+0x4a>
 8014438:	fab0 f480 	clz	r4, r0
 801443c:	fab1 f581 	clz	r5, r1
 8014440:	ea50 0c01 	orrs.w	ip, r0, r1
 8014444:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014448:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801444c:	d008      	beq.n	8014460 <rcutils_snprintf+0x38>
 801444e:	b984      	cbnz	r4, 8014472 <rcutils_snprintf+0x4a>
 8014450:	b97d      	cbnz	r5, 8014472 <rcutils_snprintf+0x4a>
 8014452:	f003 fdab 	bl	8017fac <vsniprintf>
 8014456:	b003      	add	sp, #12
 8014458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801445c:	b002      	add	sp, #8
 801445e:	4770      	bx	lr
 8014460:	4661      	mov	r1, ip
 8014462:	4660      	mov	r0, ip
 8014464:	f003 fda2 	bl	8017fac <vsniprintf>
 8014468:	b003      	add	sp, #12
 801446a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801446e:	b002      	add	sp, #8
 8014470:	4770      	bx	lr
 8014472:	f003 fe93 	bl	801819c <__errno>
 8014476:	2216      	movs	r2, #22
 8014478:	4603      	mov	r3, r0
 801447a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801447e:	601a      	str	r2, [r3, #0]
 8014480:	e7e9      	b.n	8014456 <rcutils_snprintf+0x2e>
 8014482:	bf00      	nop

08014484 <rcutils_vsnprintf>:
 8014484:	b570      	push	{r4, r5, r6, lr}
 8014486:	b1b2      	cbz	r2, 80144b6 <rcutils_vsnprintf+0x32>
 8014488:	fab0 f480 	clz	r4, r0
 801448c:	fab1 f581 	clz	r5, r1
 8014490:	ea50 0c01 	orrs.w	ip, r0, r1
 8014494:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014498:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801449c:	d005      	beq.n	80144aa <rcutils_vsnprintf+0x26>
 801449e:	b954      	cbnz	r4, 80144b6 <rcutils_vsnprintf+0x32>
 80144a0:	b94d      	cbnz	r5, 80144b6 <rcutils_vsnprintf+0x32>
 80144a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144a6:	f003 bd81 	b.w	8017fac <vsniprintf>
 80144aa:	4661      	mov	r1, ip
 80144ac:	4660      	mov	r0, ip
 80144ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144b2:	f003 bd7b 	b.w	8017fac <vsniprintf>
 80144b6:	f003 fe71 	bl	801819c <__errno>
 80144ba:	2316      	movs	r3, #22
 80144bc:	6003      	str	r3, [r0, #0]
 80144be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144c2:	bd70      	pop	{r4, r5, r6, pc}

080144c4 <rcutils_strdup>:
 80144c4:	b084      	sub	sp, #16
 80144c6:	b570      	push	{r4, r5, r6, lr}
 80144c8:	b082      	sub	sp, #8
 80144ca:	4605      	mov	r5, r0
 80144cc:	ac07      	add	r4, sp, #28
 80144ce:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80144d2:	b1b0      	cbz	r0, 8014502 <rcutils_strdup+0x3e>
 80144d4:	f7eb ff0e 	bl	80002f4 <strlen>
 80144d8:	1c42      	adds	r2, r0, #1
 80144da:	9b07      	ldr	r3, [sp, #28]
 80144dc:	4606      	mov	r6, r0
 80144de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80144e0:	4610      	mov	r0, r2
 80144e2:	9201      	str	r2, [sp, #4]
 80144e4:	4798      	blx	r3
 80144e6:	4604      	mov	r4, r0
 80144e8:	b128      	cbz	r0, 80144f6 <rcutils_strdup+0x32>
 80144ea:	9a01      	ldr	r2, [sp, #4]
 80144ec:	4629      	mov	r1, r5
 80144ee:	f003 fe8a 	bl	8018206 <memcpy>
 80144f2:	2300      	movs	r3, #0
 80144f4:	55a3      	strb	r3, [r4, r6]
 80144f6:	4620      	mov	r0, r4
 80144f8:	b002      	add	sp, #8
 80144fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144fe:	b004      	add	sp, #16
 8014500:	4770      	bx	lr
 8014502:	4604      	mov	r4, r0
 8014504:	e7f7      	b.n	80144f6 <rcutils_strdup+0x32>
 8014506:	bf00      	nop

08014508 <rcutils_strndup>:
 8014508:	b082      	sub	sp, #8
 801450a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801450c:	ac06      	add	r4, sp, #24
 801450e:	4605      	mov	r5, r0
 8014510:	e884 000c 	stmia.w	r4, {r2, r3}
 8014514:	b188      	cbz	r0, 801453a <rcutils_strndup+0x32>
 8014516:	1c4f      	adds	r7, r1, #1
 8014518:	460e      	mov	r6, r1
 801451a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801451c:	4638      	mov	r0, r7
 801451e:	4790      	blx	r2
 8014520:	4604      	mov	r4, r0
 8014522:	b128      	cbz	r0, 8014530 <rcutils_strndup+0x28>
 8014524:	463a      	mov	r2, r7
 8014526:	4629      	mov	r1, r5
 8014528:	f003 fe6d 	bl	8018206 <memcpy>
 801452c:	2300      	movs	r3, #0
 801452e:	55a3      	strb	r3, [r4, r6]
 8014530:	4620      	mov	r0, r4
 8014532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014536:	b002      	add	sp, #8
 8014538:	4770      	bx	lr
 801453a:	4604      	mov	r4, r0
 801453c:	e7f8      	b.n	8014530 <rcutils_strndup+0x28>
 801453e:	bf00      	nop

08014540 <rcutils_get_zero_initialized_string_map>:
 8014540:	2000      	movs	r0, #0
 8014542:	4b01      	ldr	r3, [pc, #4]	@ (8014548 <rcutils_get_zero_initialized_string_map+0x8>)
 8014544:	6018      	str	r0, [r3, #0]
 8014546:	4770      	bx	lr
 8014548:	24068448 	.word	0x24068448

0801454c <rcutils_string_map_reserve>:
 801454c:	2800      	cmp	r0, #0
 801454e:	d05e      	beq.n	801460e <rcutils_string_map_reserve+0xc2>
 8014550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014554:	460c      	mov	r4, r1
 8014556:	6801      	ldr	r1, [r0, #0]
 8014558:	b082      	sub	sp, #8
 801455a:	4605      	mov	r5, r0
 801455c:	b129      	cbz	r1, 801456a <rcutils_string_map_reserve+0x1e>
 801455e:	68cb      	ldr	r3, [r1, #12]
 8014560:	42a3      	cmp	r3, r4
 8014562:	d906      	bls.n	8014572 <rcutils_string_map_reserve+0x26>
 8014564:	461c      	mov	r4, r3
 8014566:	2900      	cmp	r1, #0
 8014568:	d1f9      	bne.n	801455e <rcutils_string_map_reserve+0x12>
 801456a:	201f      	movs	r0, #31
 801456c:	b002      	add	sp, #8
 801456e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014572:	688b      	ldr	r3, [r1, #8]
 8014574:	42a3      	cmp	r3, r4
 8014576:	d046      	beq.n	8014606 <rcutils_string_map_reserve+0xba>
 8014578:	6a0e      	ldr	r6, [r1, #32]
 801457a:	2c00      	cmp	r4, #0
 801457c:	d033      	beq.n	80145e6 <rcutils_string_map_reserve+0x9a>
 801457e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014582:	d242      	bcs.n	801460a <rcutils_string_map_reserve+0xbe>
 8014584:	00a7      	lsls	r7, r4, #2
 8014586:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801458a:	6808      	ldr	r0, [r1, #0]
 801458c:	4632      	mov	r2, r6
 801458e:	4639      	mov	r1, r7
 8014590:	47c0      	blx	r8
 8014592:	2800      	cmp	r0, #0
 8014594:	d039      	beq.n	801460a <rcutils_string_map_reserve+0xbe>
 8014596:	682b      	ldr	r3, [r5, #0]
 8014598:	4632      	mov	r2, r6
 801459a:	4639      	mov	r1, r7
 801459c:	6018      	str	r0, [r3, #0]
 801459e:	6858      	ldr	r0, [r3, #4]
 80145a0:	47c0      	blx	r8
 80145a2:	2800      	cmp	r0, #0
 80145a4:	d031      	beq.n	801460a <rcutils_string_map_reserve+0xbe>
 80145a6:	682d      	ldr	r5, [r5, #0]
 80145a8:	68ab      	ldr	r3, [r5, #8]
 80145aa:	6068      	str	r0, [r5, #4]
 80145ac:	42a3      	cmp	r3, r4
 80145ae:	d225      	bcs.n	80145fc <rcutils_string_map_reserve+0xb0>
 80145b0:	682a      	ldr	r2, [r5, #0]
 80145b2:	eb00 0c07 	add.w	ip, r0, r7
 80145b6:	0099      	lsls	r1, r3, #2
 80145b8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80145bc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80145c0:	45e6      	cmp	lr, ip
 80145c2:	d203      	bcs.n	80145cc <rcutils_string_map_reserve+0x80>
 80145c4:	eb02 0c07 	add.w	ip, r2, r7
 80145c8:	4566      	cmp	r6, ip
 80145ca:	d322      	bcc.n	8014612 <rcutils_string_map_reserve+0xc6>
 80145cc:	1ae3      	subs	r3, r4, r3
 80145ce:	4670      	mov	r0, lr
 80145d0:	2100      	movs	r1, #0
 80145d2:	009a      	lsls	r2, r3, #2
 80145d4:	9201      	str	r2, [sp, #4]
 80145d6:	f003 fcf7 	bl	8017fc8 <memset>
 80145da:	9a01      	ldr	r2, [sp, #4]
 80145dc:	2100      	movs	r1, #0
 80145de:	4630      	mov	r0, r6
 80145e0:	f003 fcf2 	bl	8017fc8 <memset>
 80145e4:	e00a      	b.n	80145fc <rcutils_string_map_reserve+0xb0>
 80145e6:	694f      	ldr	r7, [r1, #20]
 80145e8:	6808      	ldr	r0, [r1, #0]
 80145ea:	4631      	mov	r1, r6
 80145ec:	47b8      	blx	r7
 80145ee:	682b      	ldr	r3, [r5, #0]
 80145f0:	4631      	mov	r1, r6
 80145f2:	6858      	ldr	r0, [r3, #4]
 80145f4:	601c      	str	r4, [r3, #0]
 80145f6:	47b8      	blx	r7
 80145f8:	682d      	ldr	r5, [r5, #0]
 80145fa:	606c      	str	r4, [r5, #4]
 80145fc:	2000      	movs	r0, #0
 80145fe:	60ac      	str	r4, [r5, #8]
 8014600:	b002      	add	sp, #8
 8014602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014606:	2000      	movs	r0, #0
 8014608:	e7b0      	b.n	801456c <rcutils_string_map_reserve+0x20>
 801460a:	200a      	movs	r0, #10
 801460c:	e7ae      	b.n	801456c <rcutils_string_map_reserve+0x20>
 801460e:	200b      	movs	r0, #11
 8014610:	4770      	bx	lr
 8014612:	1f0b      	subs	r3, r1, #4
 8014614:	4418      	add	r0, r3
 8014616:	4413      	add	r3, r2
 8014618:	3a04      	subs	r2, #4
 801461a:	4417      	add	r7, r2
 801461c:	2200      	movs	r2, #0
 801461e:	f843 2f04 	str.w	r2, [r3, #4]!
 8014622:	42bb      	cmp	r3, r7
 8014624:	f840 2f04 	str.w	r2, [r0, #4]!
 8014628:	d1f9      	bne.n	801461e <rcutils_string_map_reserve+0xd2>
 801462a:	e7e7      	b.n	80145fc <rcutils_string_map_reserve+0xb0>

0801462c <rcutils_string_map_init>:
 801462c:	b082      	sub	sp, #8
 801462e:	b570      	push	{r4, r5, r6, lr}
 8014630:	ac04      	add	r4, sp, #16
 8014632:	e884 000c 	stmia.w	r4, {r2, r3}
 8014636:	b380      	cbz	r0, 801469a <rcutils_string_map_init+0x6e>
 8014638:	6806      	ldr	r6, [r0, #0]
 801463a:	4604      	mov	r4, r0
 801463c:	b12e      	cbz	r6, 801464a <rcutils_string_map_init+0x1e>
 801463e:	251e      	movs	r5, #30
 8014640:	4628      	mov	r0, r5
 8014642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014646:	b002      	add	sp, #8
 8014648:	4770      	bx	lr
 801464a:	a804      	add	r0, sp, #16
 801464c:	460d      	mov	r5, r1
 801464e:	f7fa fbc7 	bl	800ede0 <rcutils_allocator_is_valid>
 8014652:	b310      	cbz	r0, 801469a <rcutils_string_map_init+0x6e>
 8014654:	9b04      	ldr	r3, [sp, #16]
 8014656:	2024      	movs	r0, #36	@ 0x24
 8014658:	9908      	ldr	r1, [sp, #32]
 801465a:	4798      	blx	r3
 801465c:	6020      	str	r0, [r4, #0]
 801465e:	b310      	cbz	r0, 80146a6 <rcutils_string_map_init+0x7a>
 8014660:	f10d 0e10 	add.w	lr, sp, #16
 8014664:	f100 0c10 	add.w	ip, r0, #16
 8014668:	e9c0 6600 	strd	r6, r6, [r0]
 801466c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014670:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014674:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014678:	f8de 3000 	ldr.w	r3, [lr]
 801467c:	4629      	mov	r1, r5
 801467e:	4620      	mov	r0, r4
 8014680:	f8cc 3000 	str.w	r3, [ip]
 8014684:	f7ff ff62 	bl	801454c <rcutils_string_map_reserve>
 8014688:	4605      	mov	r5, r0
 801468a:	2800      	cmp	r0, #0
 801468c:	d0d8      	beq.n	8014640 <rcutils_string_map_init+0x14>
 801468e:	9b05      	ldr	r3, [sp, #20]
 8014690:	9908      	ldr	r1, [sp, #32]
 8014692:	6820      	ldr	r0, [r4, #0]
 8014694:	4798      	blx	r3
 8014696:	6026      	str	r6, [r4, #0]
 8014698:	e7d2      	b.n	8014640 <rcutils_string_map_init+0x14>
 801469a:	250b      	movs	r5, #11
 801469c:	4628      	mov	r0, r5
 801469e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146a2:	b002      	add	sp, #8
 80146a4:	4770      	bx	lr
 80146a6:	250a      	movs	r5, #10
 80146a8:	e7ca      	b.n	8014640 <rcutils_string_map_init+0x14>
 80146aa:	bf00      	nop

080146ac <rcutils_string_map_fini>:
 80146ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b0:	b082      	sub	sp, #8
 80146b2:	2800      	cmp	r0, #0
 80146b4:	d03a      	beq.n	801472c <rcutils_string_map_fini+0x80>
 80146b6:	6804      	ldr	r4, [r0, #0]
 80146b8:	4606      	mov	r6, r0
 80146ba:	2c00      	cmp	r4, #0
 80146bc:	d032      	beq.n	8014724 <rcutils_string_map_fini+0x78>
 80146be:	68a3      	ldr	r3, [r4, #8]
 80146c0:	b32b      	cbz	r3, 801470e <rcutils_string_map_fini+0x62>
 80146c2:	2500      	movs	r5, #0
 80146c4:	6822      	ldr	r2, [r4, #0]
 80146c6:	462f      	mov	r7, r5
 80146c8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80146cc:	b1e0      	cbz	r0, 8014708 <rcutils_string_map_fini+0x5c>
 80146ce:	6a21      	ldr	r1, [r4, #32]
 80146d0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80146d4:	9101      	str	r1, [sp, #4]
 80146d6:	47c0      	blx	r8
 80146d8:	9901      	ldr	r1, [sp, #4]
 80146da:	e9d4 3200 	ldrd	r3, r2, [r4]
 80146de:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80146e2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80146e6:	47c0      	blx	r8
 80146e8:	68e3      	ldr	r3, [r4, #12]
 80146ea:	6862      	ldr	r2, [r4, #4]
 80146ec:	3b01      	subs	r3, #1
 80146ee:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80146f2:	3501      	adds	r5, #1
 80146f4:	60e3      	str	r3, [r4, #12]
 80146f6:	6834      	ldr	r4, [r6, #0]
 80146f8:	68a3      	ldr	r3, [r4, #8]
 80146fa:	429d      	cmp	r5, r3
 80146fc:	d207      	bcs.n	801470e <rcutils_string_map_fini+0x62>
 80146fe:	6822      	ldr	r2, [r4, #0]
 8014700:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014704:	2800      	cmp	r0, #0
 8014706:	d1e2      	bne.n	80146ce <rcutils_string_map_fini+0x22>
 8014708:	3501      	adds	r5, #1
 801470a:	429d      	cmp	r5, r3
 801470c:	d3dc      	bcc.n	80146c8 <rcutils_string_map_fini+0x1c>
 801470e:	2100      	movs	r1, #0
 8014710:	4630      	mov	r0, r6
 8014712:	f7ff ff1b 	bl	801454c <rcutils_string_map_reserve>
 8014716:	4604      	mov	r4, r0
 8014718:	b920      	cbnz	r0, 8014724 <rcutils_string_map_fini+0x78>
 801471a:	6830      	ldr	r0, [r6, #0]
 801471c:	6943      	ldr	r3, [r0, #20]
 801471e:	6a01      	ldr	r1, [r0, #32]
 8014720:	4798      	blx	r3
 8014722:	6034      	str	r4, [r6, #0]
 8014724:	4620      	mov	r0, r4
 8014726:	b002      	add	sp, #8
 8014728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801472c:	240b      	movs	r4, #11
 801472e:	4620      	mov	r0, r4
 8014730:	b002      	add	sp, #8
 8014732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014736:	bf00      	nop

08014738 <rcutils_string_map_getn>:
 8014738:	b378      	cbz	r0, 801479a <rcutils_string_map_getn+0x62>
 801473a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801473e:	f8d0 b000 	ldr.w	fp, [r0]
 8014742:	f1bb 0f00 	cmp.w	fp, #0
 8014746:	d01f      	beq.n	8014788 <rcutils_string_map_getn+0x50>
 8014748:	fab1 f481 	clz	r4, r1
 801474c:	4688      	mov	r8, r1
 801474e:	0964      	lsrs	r4, r4, #5
 8014750:	b1d1      	cbz	r1, 8014788 <rcutils_string_map_getn+0x50>
 8014752:	f8db 7008 	ldr.w	r7, [fp, #8]
 8014756:	f8db 6000 	ldr.w	r6, [fp]
 801475a:	b1af      	cbz	r7, 8014788 <rcutils_string_map_getn+0x50>
 801475c:	4691      	mov	r9, r2
 801475e:	3e04      	subs	r6, #4
 8014760:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014764:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8014768:	3401      	adds	r4, #1
 801476a:	4628      	mov	r0, r5
 801476c:	b155      	cbz	r5, 8014784 <rcutils_string_map_getn+0x4c>
 801476e:	f7eb fdc1 	bl	80002f4 <strlen>
 8014772:	4602      	mov	r2, r0
 8014774:	4629      	mov	r1, r5
 8014776:	4640      	mov	r0, r8
 8014778:	454a      	cmp	r2, r9
 801477a:	bf38      	it	cc
 801477c:	464a      	movcc	r2, r9
 801477e:	f003 fc38 	bl	8017ff2 <strncmp>
 8014782:	b120      	cbz	r0, 801478e <rcutils_string_map_getn+0x56>
 8014784:	42a7      	cmp	r7, r4
 8014786:	d1eb      	bne.n	8014760 <rcutils_string_map_getn+0x28>
 8014788:	2000      	movs	r0, #0
 801478a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801478e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014792:	f853 000a 	ldr.w	r0, [r3, sl]
 8014796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801479a:	4770      	bx	lr

0801479c <rcutils_system_time_now>:
 801479c:	b300      	cbz	r0, 80147e0 <rcutils_system_time_now+0x44>
 801479e:	b570      	push	{r4, r5, r6, lr}
 80147a0:	b084      	sub	sp, #16
 80147a2:	4604      	mov	r4, r0
 80147a4:	2001      	movs	r0, #1
 80147a6:	4669      	mov	r1, sp
 80147a8:	f7ed f996 	bl	8001ad8 <clock_gettime>
 80147ac:	e9dd 3100 	ldrd	r3, r1, [sp]
 80147b0:	2900      	cmp	r1, #0
 80147b2:	db12      	blt.n	80147da <rcutils_system_time_now+0x3e>
 80147b4:	ea53 0201 	orrs.w	r2, r3, r1
 80147b8:	9d02      	ldr	r5, [sp, #8]
 80147ba:	d101      	bne.n	80147c0 <rcutils_system_time_now+0x24>
 80147bc:	2d00      	cmp	r5, #0
 80147be:	db0c      	blt.n	80147da <rcutils_system_time_now+0x3e>
 80147c0:	4e08      	ldr	r6, [pc, #32]	@ (80147e4 <rcutils_system_time_now+0x48>)
 80147c2:	2000      	movs	r0, #0
 80147c4:	fba3 3206 	umull	r3, r2, r3, r6
 80147c8:	195b      	adds	r3, r3, r5
 80147ca:	fb06 2201 	mla	r2, r6, r1, r2
 80147ce:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80147d2:	e9c4 3200 	strd	r3, r2, [r4]
 80147d6:	b004      	add	sp, #16
 80147d8:	bd70      	pop	{r4, r5, r6, pc}
 80147da:	2002      	movs	r0, #2
 80147dc:	b004      	add	sp, #16
 80147de:	bd70      	pop	{r4, r5, r6, pc}
 80147e0:	200b      	movs	r0, #11
 80147e2:	4770      	bx	lr
 80147e4:	3b9aca00 	.word	0x3b9aca00

080147e8 <rcutils_steady_time_now>:
 80147e8:	b300      	cbz	r0, 801482c <rcutils_steady_time_now+0x44>
 80147ea:	b570      	push	{r4, r5, r6, lr}
 80147ec:	b084      	sub	sp, #16
 80147ee:	4604      	mov	r4, r0
 80147f0:	2000      	movs	r0, #0
 80147f2:	4669      	mov	r1, sp
 80147f4:	f7ed f970 	bl	8001ad8 <clock_gettime>
 80147f8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80147fc:	2900      	cmp	r1, #0
 80147fe:	db12      	blt.n	8014826 <rcutils_steady_time_now+0x3e>
 8014800:	ea53 0201 	orrs.w	r2, r3, r1
 8014804:	9d02      	ldr	r5, [sp, #8]
 8014806:	d101      	bne.n	801480c <rcutils_steady_time_now+0x24>
 8014808:	2d00      	cmp	r5, #0
 801480a:	db0c      	blt.n	8014826 <rcutils_steady_time_now+0x3e>
 801480c:	4e08      	ldr	r6, [pc, #32]	@ (8014830 <rcutils_steady_time_now+0x48>)
 801480e:	2000      	movs	r0, #0
 8014810:	fba3 3206 	umull	r3, r2, r3, r6
 8014814:	195b      	adds	r3, r3, r5
 8014816:	fb06 2201 	mla	r2, r6, r1, r2
 801481a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801481e:	e9c4 3200 	strd	r3, r2, [r4]
 8014822:	b004      	add	sp, #16
 8014824:	bd70      	pop	{r4, r5, r6, pc}
 8014826:	2002      	movs	r0, #2
 8014828:	b004      	add	sp, #16
 801482a:	bd70      	pop	{r4, r5, r6, pc}
 801482c:	200b      	movs	r0, #11
 801482e:	4770      	bx	lr
 8014830:	3b9aca00 	.word	0x3b9aca00
 8014834:	00000000 	.word	0x00000000

08014838 <rmw_get_zero_initialized_context>:
 8014838:	b510      	push	{r4, lr}
 801483a:	4604      	mov	r4, r0
 801483c:	3010      	adds	r0, #16
 801483e:	f000 f80f 	bl	8014860 <rmw_get_zero_initialized_init_options>
 8014842:	2300      	movs	r3, #0
 8014844:	4620      	mov	r0, r4
 8014846:	60a3      	str	r3, [r4, #8]
 8014848:	64a3      	str	r3, [r4, #72]	@ 0x48
 801484a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801484c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8014858 <rmw_get_zero_initialized_context+0x20>
 8014850:	ed84 7b00 	vstr	d7, [r4]
 8014854:	bd10      	pop	{r4, pc}
 8014856:	bf00      	nop
	...

08014860 <rmw_get_zero_initialized_init_options>:
 8014860:	b510      	push	{r4, lr}
 8014862:	4604      	mov	r4, r0
 8014864:	2238      	movs	r2, #56	@ 0x38
 8014866:	2100      	movs	r1, #0
 8014868:	f003 fbae 	bl	8017fc8 <memset>
 801486c:	f104 0010 	add.w	r0, r4, #16
 8014870:	f000 f806 	bl	8014880 <rmw_get_default_security_options>
 8014874:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014878:	4620      	mov	r0, r4
 801487a:	60e3      	str	r3, [r4, #12]
 801487c:	bd10      	pop	{r4, pc}
 801487e:	bf00      	nop

08014880 <rmw_get_default_security_options>:
 8014880:	2200      	movs	r2, #0
 8014882:	7002      	strb	r2, [r0, #0]
 8014884:	6042      	str	r2, [r0, #4]
 8014886:	4770      	bx	lr

08014888 <rmw_validate_full_topic_name>:
 8014888:	2800      	cmp	r0, #0
 801488a:	d05d      	beq.n	8014948 <rmw_validate_full_topic_name+0xc0>
 801488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014890:	460d      	mov	r5, r1
 8014892:	2900      	cmp	r1, #0
 8014894:	d05a      	beq.n	801494c <rmw_validate_full_topic_name+0xc4>
 8014896:	4604      	mov	r4, r0
 8014898:	4616      	mov	r6, r2
 801489a:	f7eb fd2b 	bl	80002f4 <strlen>
 801489e:	b150      	cbz	r0, 80148b6 <rmw_validate_full_topic_name+0x2e>
 80148a0:	7823      	ldrb	r3, [r4, #0]
 80148a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80148a4:	d00e      	beq.n	80148c4 <rmw_validate_full_topic_name+0x3c>
 80148a6:	2302      	movs	r3, #2
 80148a8:	602b      	str	r3, [r5, #0]
 80148aa:	b146      	cbz	r6, 80148be <rmw_validate_full_topic_name+0x36>
 80148ac:	2300      	movs	r3, #0
 80148ae:	4618      	mov	r0, r3
 80148b0:	6033      	str	r3, [r6, #0]
 80148b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148b6:	2301      	movs	r3, #1
 80148b8:	602b      	str	r3, [r5, #0]
 80148ba:	2e00      	cmp	r6, #0
 80148bc:	d1f6      	bne.n	80148ac <rmw_validate_full_topic_name+0x24>
 80148be:	2000      	movs	r0, #0
 80148c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148c4:	1e43      	subs	r3, r0, #1
 80148c6:	5ce2      	ldrb	r2, [r4, r3]
 80148c8:	2a2f      	cmp	r2, #47	@ 0x2f
 80148ca:	d041      	beq.n	8014950 <rmw_validate_full_topic_name+0xc8>
 80148cc:	1e62      	subs	r2, r4, #1
 80148ce:	f1c4 0e01 	rsb	lr, r4, #1
 80148d2:	eb02 0800 	add.w	r8, r2, r0
 80148d6:	eb0e 0702 	add.w	r7, lr, r2
 80148da:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80148de:	f023 0120 	bic.w	r1, r3, #32
 80148e2:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 80148e6:	3941      	subs	r1, #65	@ 0x41
 80148e8:	2919      	cmp	r1, #25
 80148ea:	d90f      	bls.n	801490c <rmw_validate_full_topic_name+0x84>
 80148ec:	f1bc 0f0a 	cmp.w	ip, #10
 80148f0:	d90c      	bls.n	801490c <rmw_validate_full_topic_name+0x84>
 80148f2:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 80148f6:	fab3 f383 	clz	r3, r3
 80148fa:	095b      	lsrs	r3, r3, #5
 80148fc:	b933      	cbnz	r3, 801490c <rmw_validate_full_topic_name+0x84>
 80148fe:	2204      	movs	r2, #4
 8014900:	602a      	str	r2, [r5, #0]
 8014902:	2e00      	cmp	r6, #0
 8014904:	d0db      	beq.n	80148be <rmw_validate_full_topic_name+0x36>
 8014906:	4618      	mov	r0, r3
 8014908:	6037      	str	r7, [r6, #0]
 801490a:	e7d2      	b.n	80148b2 <rmw_validate_full_topic_name+0x2a>
 801490c:	4542      	cmp	r2, r8
 801490e:	d1e2      	bne.n	80148d6 <rmw_validate_full_topic_name+0x4e>
 8014910:	2301      	movs	r3, #1
 8014912:	4f1a      	ldr	r7, [pc, #104]	@ (801497c <rmw_validate_full_topic_name+0xf4>)
 8014914:	e004      	b.n	8014920 <rmw_validate_full_topic_name+0x98>
 8014916:	4298      	cmp	r0, r3
 8014918:	f104 0401 	add.w	r4, r4, #1
 801491c:	4613      	mov	r3, r2
 801491e:	d91c      	bls.n	801495a <rmw_validate_full_topic_name+0xd2>
 8014920:	4298      	cmp	r0, r3
 8014922:	f103 0201 	add.w	r2, r3, #1
 8014926:	d0f6      	beq.n	8014916 <rmw_validate_full_topic_name+0x8e>
 8014928:	7821      	ldrb	r1, [r4, #0]
 801492a:	292f      	cmp	r1, #47	@ 0x2f
 801492c:	d1f3      	bne.n	8014916 <rmw_validate_full_topic_name+0x8e>
 801492e:	7861      	ldrb	r1, [r4, #1]
 8014930:	292f      	cmp	r1, #47	@ 0x2f
 8014932:	d01e      	beq.n	8014972 <rmw_validate_full_topic_name+0xea>
 8014934:	5dc9      	ldrb	r1, [r1, r7]
 8014936:	0749      	lsls	r1, r1, #29
 8014938:	d5ed      	bpl.n	8014916 <rmw_validate_full_topic_name+0x8e>
 801493a:	2206      	movs	r2, #6
 801493c:	602a      	str	r2, [r5, #0]
 801493e:	2e00      	cmp	r6, #0
 8014940:	d0bd      	beq.n	80148be <rmw_validate_full_topic_name+0x36>
 8014942:	2000      	movs	r0, #0
 8014944:	6033      	str	r3, [r6, #0]
 8014946:	e7b4      	b.n	80148b2 <rmw_validate_full_topic_name+0x2a>
 8014948:	200b      	movs	r0, #11
 801494a:	4770      	bx	lr
 801494c:	200b      	movs	r0, #11
 801494e:	e7b0      	b.n	80148b2 <rmw_validate_full_topic_name+0x2a>
 8014950:	2203      	movs	r2, #3
 8014952:	602a      	str	r2, [r5, #0]
 8014954:	2e00      	cmp	r6, #0
 8014956:	d1f4      	bne.n	8014942 <rmw_validate_full_topic_name+0xba>
 8014958:	e7b1      	b.n	80148be <rmw_validate_full_topic_name+0x36>
 801495a:	28f7      	cmp	r0, #247	@ 0xf7
 801495c:	d803      	bhi.n	8014966 <rmw_validate_full_topic_name+0xde>
 801495e:	2300      	movs	r3, #0
 8014960:	4618      	mov	r0, r3
 8014962:	602b      	str	r3, [r5, #0]
 8014964:	e7a5      	b.n	80148b2 <rmw_validate_full_topic_name+0x2a>
 8014966:	2307      	movs	r3, #7
 8014968:	602b      	str	r3, [r5, #0]
 801496a:	2e00      	cmp	r6, #0
 801496c:	d0a7      	beq.n	80148be <rmw_validate_full_topic_name+0x36>
 801496e:	23f6      	movs	r3, #246	@ 0xf6
 8014970:	e7e7      	b.n	8014942 <rmw_validate_full_topic_name+0xba>
 8014972:	2205      	movs	r2, #5
 8014974:	602a      	str	r2, [r5, #0]
 8014976:	2e00      	cmp	r6, #0
 8014978:	d1e3      	bne.n	8014942 <rmw_validate_full_topic_name+0xba>
 801497a:	e7a0      	b.n	80148be <rmw_validate_full_topic_name+0x36>
 801497c:	08019a84 	.word	0x08019a84

08014980 <rmw_validate_namespace_with_size>:
 8014980:	2800      	cmp	r0, #0
 8014982:	d043      	beq.n	8014a0c <rmw_validate_namespace_with_size+0x8c>
 8014984:	b570      	push	{r4, r5, r6, lr}
 8014986:	4614      	mov	r4, r2
 8014988:	b0c2      	sub	sp, #264	@ 0x108
 801498a:	b32a      	cbz	r2, 80149d8 <rmw_validate_namespace_with_size+0x58>
 801498c:	2901      	cmp	r1, #1
 801498e:	460d      	mov	r5, r1
 8014990:	461e      	mov	r6, r3
 8014992:	d102      	bne.n	801499a <rmw_validate_namespace_with_size+0x1a>
 8014994:	7803      	ldrb	r3, [r0, #0]
 8014996:	2b2f      	cmp	r3, #47	@ 0x2f
 8014998:	d012      	beq.n	80149c0 <rmw_validate_namespace_with_size+0x40>
 801499a:	aa01      	add	r2, sp, #4
 801499c:	4669      	mov	r1, sp
 801499e:	f7ff ff73 	bl	8014888 <rmw_validate_full_topic_name>
 80149a2:	b980      	cbnz	r0, 80149c6 <rmw_validate_namespace_with_size+0x46>
 80149a4:	9a00      	ldr	r2, [sp, #0]
 80149a6:	b14a      	cbz	r2, 80149bc <rmw_validate_namespace_with_size+0x3c>
 80149a8:	2a07      	cmp	r2, #7
 80149aa:	d007      	beq.n	80149bc <rmw_validate_namespace_with_size+0x3c>
 80149ac:	1e53      	subs	r3, r2, #1
 80149ae:	2b05      	cmp	r3, #5
 80149b0:	d82e      	bhi.n	8014a10 <rmw_validate_namespace_with_size+0x90>
 80149b2:	e8df f003 	tbb	[pc, r3]
 80149b6:	1f1c      	.short	0x1f1c
 80149b8:	14282522 	.word	0x14282522
 80149bc:	2df5      	cmp	r5, #245	@ 0xf5
 80149be:	d804      	bhi.n	80149ca <rmw_validate_namespace_with_size+0x4a>
 80149c0:	2300      	movs	r3, #0
 80149c2:	4618      	mov	r0, r3
 80149c4:	6023      	str	r3, [r4, #0]
 80149c6:	b042      	add	sp, #264	@ 0x108
 80149c8:	bd70      	pop	{r4, r5, r6, pc}
 80149ca:	2307      	movs	r3, #7
 80149cc:	6023      	str	r3, [r4, #0]
 80149ce:	2e00      	cmp	r6, #0
 80149d0:	d0f9      	beq.n	80149c6 <rmw_validate_namespace_with_size+0x46>
 80149d2:	23f4      	movs	r3, #244	@ 0xf4
 80149d4:	6033      	str	r3, [r6, #0]
 80149d6:	e7f6      	b.n	80149c6 <rmw_validate_namespace_with_size+0x46>
 80149d8:	200b      	movs	r0, #11
 80149da:	b042      	add	sp, #264	@ 0x108
 80149dc:	bd70      	pop	{r4, r5, r6, pc}
 80149de:	2306      	movs	r3, #6
 80149e0:	6023      	str	r3, [r4, #0]
 80149e2:	2e00      	cmp	r6, #0
 80149e4:	d0ef      	beq.n	80149c6 <rmw_validate_namespace_with_size+0x46>
 80149e6:	9b01      	ldr	r3, [sp, #4]
 80149e8:	6033      	str	r3, [r6, #0]
 80149ea:	b042      	add	sp, #264	@ 0x108
 80149ec:	bd70      	pop	{r4, r5, r6, pc}
 80149ee:	2301      	movs	r3, #1
 80149f0:	6023      	str	r3, [r4, #0]
 80149f2:	e7f6      	b.n	80149e2 <rmw_validate_namespace_with_size+0x62>
 80149f4:	2302      	movs	r3, #2
 80149f6:	6023      	str	r3, [r4, #0]
 80149f8:	e7f3      	b.n	80149e2 <rmw_validate_namespace_with_size+0x62>
 80149fa:	2303      	movs	r3, #3
 80149fc:	6023      	str	r3, [r4, #0]
 80149fe:	e7f0      	b.n	80149e2 <rmw_validate_namespace_with_size+0x62>
 8014a00:	2304      	movs	r3, #4
 8014a02:	6023      	str	r3, [r4, #0]
 8014a04:	e7ed      	b.n	80149e2 <rmw_validate_namespace_with_size+0x62>
 8014a06:	2305      	movs	r3, #5
 8014a08:	6023      	str	r3, [r4, #0]
 8014a0a:	e7ea      	b.n	80149e2 <rmw_validate_namespace_with_size+0x62>
 8014a0c:	200b      	movs	r0, #11
 8014a0e:	4770      	bx	lr
 8014a10:	4613      	mov	r3, r2
 8014a12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014a16:	4a03      	ldr	r2, [pc, #12]	@ (8014a24 <rmw_validate_namespace_with_size+0xa4>)
 8014a18:	a802      	add	r0, sp, #8
 8014a1a:	f7ff fd05 	bl	8014428 <rcutils_snprintf>
 8014a1e:	2001      	movs	r0, #1
 8014a20:	e7d1      	b.n	80149c6 <rmw_validate_namespace_with_size+0x46>
 8014a22:	bf00      	nop
 8014a24:	0801948c 	.word	0x0801948c

08014a28 <rmw_validate_namespace>:
 8014a28:	b168      	cbz	r0, 8014a46 <rmw_validate_namespace+0x1e>
 8014a2a:	b570      	push	{r4, r5, r6, lr}
 8014a2c:	460d      	mov	r5, r1
 8014a2e:	4616      	mov	r6, r2
 8014a30:	4604      	mov	r4, r0
 8014a32:	f7eb fc5f 	bl	80002f4 <strlen>
 8014a36:	4633      	mov	r3, r6
 8014a38:	4601      	mov	r1, r0
 8014a3a:	462a      	mov	r2, r5
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a42:	f7ff bf9d 	b.w	8014980 <rmw_validate_namespace_with_size>
 8014a46:	200b      	movs	r0, #11
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop

08014a4c <rmw_namespace_validation_result_string>:
 8014a4c:	2807      	cmp	r0, #7
 8014a4e:	d803      	bhi.n	8014a58 <rmw_namespace_validation_result_string+0xc>
 8014a50:	4b02      	ldr	r3, [pc, #8]	@ (8014a5c <rmw_namespace_validation_result_string+0x10>)
 8014a52:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014a56:	4770      	bx	lr
 8014a58:	4801      	ldr	r0, [pc, #4]	@ (8014a60 <rmw_namespace_validation_result_string+0x14>)
 8014a5a:	4770      	bx	lr
 8014a5c:	08019684 	.word	0x08019684
 8014a60:	080194dc 	.word	0x080194dc

08014a64 <rmw_validate_node_name>:
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d042      	beq.n	8014aee <rmw_validate_node_name+0x8a>
 8014a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a6c:	460d      	mov	r5, r1
 8014a6e:	2900      	cmp	r1, #0
 8014a70:	d03f      	beq.n	8014af2 <rmw_validate_node_name+0x8e>
 8014a72:	4604      	mov	r4, r0
 8014a74:	4616      	mov	r6, r2
 8014a76:	f7eb fc3d 	bl	80002f4 <strlen>
 8014a7a:	b310      	cbz	r0, 8014ac2 <rmw_validate_node_name+0x5e>
 8014a7c:	1e63      	subs	r3, r4, #1
 8014a7e:	f1c4 0101 	rsb	r1, r4, #1
 8014a82:	eb03 0800 	add.w	r8, r3, r0
 8014a86:	18cf      	adds	r7, r1, r3
 8014a88:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8014a8c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8014a90:	f02e 0c20 	bic.w	ip, lr, #32
 8014a94:	2a09      	cmp	r2, #9
 8014a96:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8014a9a:	d905      	bls.n	8014aa8 <rmw_validate_node_name+0x44>
 8014a9c:	f1bc 0f19 	cmp.w	ip, #25
 8014aa0:	d902      	bls.n	8014aa8 <rmw_validate_node_name+0x44>
 8014aa2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014aa6:	d114      	bne.n	8014ad2 <rmw_validate_node_name+0x6e>
 8014aa8:	4598      	cmp	r8, r3
 8014aaa:	d1ec      	bne.n	8014a86 <rmw_validate_node_name+0x22>
 8014aac:	7822      	ldrb	r2, [r4, #0]
 8014aae:	4b16      	ldr	r3, [pc, #88]	@ (8014b08 <rmw_validate_node_name+0xa4>)
 8014ab0:	5cd3      	ldrb	r3, [r2, r3]
 8014ab2:	f013 0304 	ands.w	r3, r3, #4
 8014ab6:	d113      	bne.n	8014ae0 <rmw_validate_node_name+0x7c>
 8014ab8:	28ff      	cmp	r0, #255	@ 0xff
 8014aba:	d81c      	bhi.n	8014af6 <rmw_validate_node_name+0x92>
 8014abc:	4618      	mov	r0, r3
 8014abe:	602b      	str	r3, [r5, #0]
 8014ac0:	e00c      	b.n	8014adc <rmw_validate_node_name+0x78>
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	602b      	str	r3, [r5, #0]
 8014ac6:	b17e      	cbz	r6, 8014ae8 <rmw_validate_node_name+0x84>
 8014ac8:	2300      	movs	r3, #0
 8014aca:	4618      	mov	r0, r3
 8014acc:	6033      	str	r3, [r6, #0]
 8014ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ad2:	2302      	movs	r3, #2
 8014ad4:	602b      	str	r3, [r5, #0]
 8014ad6:	b13e      	cbz	r6, 8014ae8 <rmw_validate_node_name+0x84>
 8014ad8:	2000      	movs	r0, #0
 8014ada:	6037      	str	r7, [r6, #0]
 8014adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ae0:	2303      	movs	r3, #3
 8014ae2:	602b      	str	r3, [r5, #0]
 8014ae4:	2e00      	cmp	r6, #0
 8014ae6:	d1ef      	bne.n	8014ac8 <rmw_validate_node_name+0x64>
 8014ae8:	2000      	movs	r0, #0
 8014aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aee:	200b      	movs	r0, #11
 8014af0:	4770      	bx	lr
 8014af2:	200b      	movs	r0, #11
 8014af4:	e7f2      	b.n	8014adc <rmw_validate_node_name+0x78>
 8014af6:	2204      	movs	r2, #4
 8014af8:	602a      	str	r2, [r5, #0]
 8014afa:	2e00      	cmp	r6, #0
 8014afc:	d0f4      	beq.n	8014ae8 <rmw_validate_node_name+0x84>
 8014afe:	22fe      	movs	r2, #254	@ 0xfe
 8014b00:	4618      	mov	r0, r3
 8014b02:	6032      	str	r2, [r6, #0]
 8014b04:	e7ea      	b.n	8014adc <rmw_validate_node_name+0x78>
 8014b06:	bf00      	nop
 8014b08:	08019a84 	.word	0x08019a84

08014b0c <rmw_node_name_validation_result_string>:
 8014b0c:	2804      	cmp	r0, #4
 8014b0e:	d803      	bhi.n	8014b18 <rmw_node_name_validation_result_string+0xc>
 8014b10:	4b02      	ldr	r3, [pc, #8]	@ (8014b1c <rmw_node_name_validation_result_string+0x10>)
 8014b12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014b16:	4770      	bx	lr
 8014b18:	4801      	ldr	r0, [pc, #4]	@ (8014b20 <rmw_node_name_validation_result_string+0x14>)
 8014b1a:	4770      	bx	lr
 8014b1c:	08019790 	.word	0x08019790
 8014b20:	080196a4 	.word	0x080196a4

08014b24 <get_memory>:
 8014b24:	4603      	mov	r3, r0
 8014b26:	6840      	ldr	r0, [r0, #4]
 8014b28:	b158      	cbz	r0, 8014b42 <get_memory+0x1e>
 8014b2a:	6842      	ldr	r2, [r0, #4]
 8014b2c:	605a      	str	r2, [r3, #4]
 8014b2e:	b10a      	cbz	r2, 8014b34 <get_memory+0x10>
 8014b30:	2100      	movs	r1, #0
 8014b32:	6011      	str	r1, [r2, #0]
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	6042      	str	r2, [r0, #4]
 8014b38:	b102      	cbz	r2, 8014b3c <get_memory+0x18>
 8014b3a:	6010      	str	r0, [r2, #0]
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	6002      	str	r2, [r0, #0]
 8014b40:	6018      	str	r0, [r3, #0]
 8014b42:	4770      	bx	lr

08014b44 <put_memory>:
 8014b44:	680b      	ldr	r3, [r1, #0]
 8014b46:	b10b      	cbz	r3, 8014b4c <put_memory+0x8>
 8014b48:	684a      	ldr	r2, [r1, #4]
 8014b4a:	605a      	str	r2, [r3, #4]
 8014b4c:	684a      	ldr	r2, [r1, #4]
 8014b4e:	b102      	cbz	r2, 8014b52 <put_memory+0xe>
 8014b50:	6013      	str	r3, [r2, #0]
 8014b52:	6803      	ldr	r3, [r0, #0]
 8014b54:	428b      	cmp	r3, r1
 8014b56:	6843      	ldr	r3, [r0, #4]
 8014b58:	bf08      	it	eq
 8014b5a:	6002      	streq	r2, [r0, #0]
 8014b5c:	604b      	str	r3, [r1, #4]
 8014b5e:	b103      	cbz	r3, 8014b62 <put_memory+0x1e>
 8014b60:	6019      	str	r1, [r3, #0]
 8014b62:	2300      	movs	r3, #0
 8014b64:	600b      	str	r3, [r1, #0]
 8014b66:	6041      	str	r1, [r0, #4]
 8014b68:	4770      	bx	lr
 8014b6a:	bf00      	nop

08014b6c <rmw_get_implementation_identifier>:
 8014b6c:	4b01      	ldr	r3, [pc, #4]	@ (8014b74 <rmw_get_implementation_identifier+0x8>)
 8014b6e:	6818      	ldr	r0, [r3, #0]
 8014b70:	4770      	bx	lr
 8014b72:	bf00      	nop
 8014b74:	080197bc 	.word	0x080197bc

08014b78 <rmw_init_options_init>:
 8014b78:	b084      	sub	sp, #16
 8014b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b7c:	b083      	sub	sp, #12
 8014b7e:	ad09      	add	r5, sp, #36	@ 0x24
 8014b80:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014b84:	b130      	cbz	r0, 8014b94 <rmw_init_options_init+0x1c>
 8014b86:	4604      	mov	r4, r0
 8014b88:	4628      	mov	r0, r5
 8014b8a:	f7fa f929 	bl	800ede0 <rcutils_allocator_is_valid>
 8014b8e:	b108      	cbz	r0, 8014b94 <rmw_init_options_init+0x1c>
 8014b90:	68a6      	ldr	r6, [r4, #8]
 8014b92:	b12e      	cbz	r6, 8014ba0 <rmw_init_options_init+0x28>
 8014b94:	200b      	movs	r0, #11
 8014b96:	b003      	add	sp, #12
 8014b98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014b9c:	b004      	add	sp, #16
 8014b9e:	4770      	bx	lr
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	f104 0c20 	add.w	ip, r4, #32
 8014ba8:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8014c44 <rmw_init_options_init+0xcc>
 8014bac:	466f      	mov	r7, sp
 8014bae:	e9c4 2300 	strd	r2, r3, [r4]
 8014bb2:	4b20      	ldr	r3, [pc, #128]	@ (8014c34 <rmw_init_options_init+0xbc>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	60a3      	str	r3, [r4, #8]
 8014bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014bbe:	682b      	ldr	r3, [r5, #0]
 8014bc0:	4638      	mov	r0, r7
 8014bc2:	f8cc 3000 	str.w	r3, [ip]
 8014bc6:	f8c4 e01c 	str.w	lr, [r4, #28]
 8014bca:	60e6      	str	r6, [r4, #12]
 8014bcc:	f7ff fe58 	bl	8014880 <rmw_get_default_security_options>
 8014bd0:	f104 0310 	add.w	r3, r4, #16
 8014bd4:	2203      	movs	r2, #3
 8014bd6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014bda:	e883 0003 	stmia.w	r3, {r0, r1}
 8014bde:	4816      	ldr	r0, [pc, #88]	@ (8014c38 <rmw_init_options_init+0xc0>)
 8014be0:	4916      	ldr	r1, [pc, #88]	@ (8014c3c <rmw_init_options_init+0xc4>)
 8014be2:	7626      	strb	r6, [r4, #24]
 8014be4:	f7fa fc26 	bl	800f434 <rmw_uxrce_init_init_options_impl_memory>
 8014be8:	4813      	ldr	r0, [pc, #76]	@ (8014c38 <rmw_init_options_init+0xc0>)
 8014bea:	f7ff ff9b 	bl	8014b24 <get_memory>
 8014bee:	b1f0      	cbz	r0, 8014c2e <rmw_init_options_init+0xb6>
 8014bf0:	4a13      	ldr	r2, [pc, #76]	@ (8014c40 <rmw_init_options_init+0xc8>)
 8014bf2:	6883      	ldr	r3, [r0, #8]
 8014bf4:	6851      	ldr	r1, [r2, #4]
 8014bf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8014bf8:	7810      	ldrb	r0, [r2, #0]
 8014bfa:	6159      	str	r1, [r3, #20]
 8014bfc:	68d1      	ldr	r1, [r2, #12]
 8014bfe:	7418      	strb	r0, [r3, #16]
 8014c00:	61d9      	str	r1, [r3, #28]
 8014c02:	6911      	ldr	r1, [r2, #16]
 8014c04:	6219      	str	r1, [r3, #32]
 8014c06:	6951      	ldr	r1, [r2, #20]
 8014c08:	6892      	ldr	r2, [r2, #8]
 8014c0a:	6259      	str	r1, [r3, #36]	@ 0x24
 8014c0c:	619a      	str	r2, [r3, #24]
 8014c0e:	f7fd fa63 	bl	80120d8 <uxr_nanos>
 8014c12:	f002 ff4d 	bl	8017ab0 <srand>
 8014c16:	f002 ff79 	bl	8017b0c <rand>
 8014c1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014c1c:	6298      	str	r0, [r3, #40]	@ 0x28
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	d0f9      	beq.n	8014c16 <rmw_init_options_init+0x9e>
 8014c22:	2000      	movs	r0, #0
 8014c24:	b003      	add	sp, #12
 8014c26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014c2a:	b004      	add	sp, #16
 8014c2c:	4770      	bx	lr
 8014c2e:	2001      	movs	r0, #1
 8014c30:	e7b1      	b.n	8014b96 <rmw_init_options_init+0x1e>
 8014c32:	bf00      	nop
 8014c34:	080197bc 	.word	0x080197bc
 8014c38:	2406839c 	.word	0x2406839c
 8014c3c:	24063c38 	.word	0x24063c38
 8014c40:	24063ac4 	.word	0x24063ac4
 8014c44:	0801935c 	.word	0x0801935c

08014c48 <rmw_init_options_copy>:
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	d047      	beq.n	8014cdc <rmw_init_options_copy+0x94>
 8014c4c:	b570      	push	{r4, r5, r6, lr}
 8014c4e:	460d      	mov	r5, r1
 8014c50:	b149      	cbz	r1, 8014c66 <rmw_init_options_copy+0x1e>
 8014c52:	4604      	mov	r4, r0
 8014c54:	6880      	ldr	r0, [r0, #8]
 8014c56:	b120      	cbz	r0, 8014c62 <rmw_init_options_copy+0x1a>
 8014c58:	4b22      	ldr	r3, [pc, #136]	@ (8014ce4 <rmw_init_options_copy+0x9c>)
 8014c5a:	6819      	ldr	r1, [r3, #0]
 8014c5c:	f7eb fb40 	bl	80002e0 <strcmp>
 8014c60:	bba8      	cbnz	r0, 8014cce <rmw_init_options_copy+0x86>
 8014c62:	68ab      	ldr	r3, [r5, #8]
 8014c64:	b11b      	cbz	r3, 8014c6e <rmw_init_options_copy+0x26>
 8014c66:	f04f 0c0b 	mov.w	ip, #11
 8014c6a:	4660      	mov	r0, ip
 8014c6c:	bd70      	pop	{r4, r5, r6, pc}
 8014c6e:	4623      	mov	r3, r4
 8014c70:	462a      	mov	r2, r5
 8014c72:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8014c76:	f8d3 e000 	ldr.w	lr, [r3]
 8014c7a:	3310      	adds	r3, #16
 8014c7c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8014c80:	3210      	adds	r2, #16
 8014c82:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8014c86:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014c8a:	42b3      	cmp	r3, r6
 8014c8c:	f842 ec10 	str.w	lr, [r2, #-16]
 8014c90:	f842 cc0c 	str.w	ip, [r2, #-12]
 8014c94:	f842 0c08 	str.w	r0, [r2, #-8]
 8014c98:	f842 1c04 	str.w	r1, [r2, #-4]
 8014c9c:	d1eb      	bne.n	8014c76 <rmw_init_options_copy+0x2e>
 8014c9e:	6819      	ldr	r1, [r3, #0]
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	4811      	ldr	r0, [pc, #68]	@ (8014ce8 <rmw_init_options_copy+0xa0>)
 8014ca4:	6011      	str	r1, [r2, #0]
 8014ca6:	6053      	str	r3, [r2, #4]
 8014ca8:	f7ff ff3c 	bl	8014b24 <get_memory>
 8014cac:	b198      	cbz	r0, 8014cd6 <rmw_init_options_copy+0x8e>
 8014cae:	6883      	ldr	r3, [r0, #8]
 8014cb0:	f04f 0c00 	mov.w	ip, #0
 8014cb4:	636b      	str	r3, [r5, #52]	@ 0x34
 8014cb6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8014cb8:	f103 0410 	add.w	r4, r3, #16
 8014cbc:	3510      	adds	r5, #16
 8014cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014cca:	4660      	mov	r0, ip
 8014ccc:	bd70      	pop	{r4, r5, r6, pc}
 8014cce:	f04f 0c0c 	mov.w	ip, #12
 8014cd2:	4660      	mov	r0, ip
 8014cd4:	bd70      	pop	{r4, r5, r6, pc}
 8014cd6:	f04f 0c01 	mov.w	ip, #1
 8014cda:	e7c6      	b.n	8014c6a <rmw_init_options_copy+0x22>
 8014cdc:	f04f 0c0b 	mov.w	ip, #11
 8014ce0:	4660      	mov	r0, ip
 8014ce2:	4770      	bx	lr
 8014ce4:	080197bc 	.word	0x080197bc
 8014ce8:	2406839c 	.word	0x2406839c

08014cec <rmw_init_options_fini>:
 8014cec:	b510      	push	{r4, lr}
 8014cee:	b08e      	sub	sp, #56	@ 0x38
 8014cf0:	b388      	cbz	r0, 8014d56 <rmw_init_options_fini+0x6a>
 8014cf2:	4604      	mov	r4, r0
 8014cf4:	3020      	adds	r0, #32
 8014cf6:	f7fa f873 	bl	800ede0 <rcutils_allocator_is_valid>
 8014cfa:	b360      	cbz	r0, 8014d56 <rmw_init_options_fini+0x6a>
 8014cfc:	68a0      	ldr	r0, [r4, #8]
 8014cfe:	b120      	cbz	r0, 8014d0a <rmw_init_options_fini+0x1e>
 8014d00:	4b1a      	ldr	r3, [pc, #104]	@ (8014d6c <rmw_init_options_fini+0x80>)
 8014d02:	6819      	ldr	r1, [r3, #0]
 8014d04:	f7eb faec 	bl	80002e0 <strcmp>
 8014d08:	bb68      	cbnz	r0, 8014d66 <rmw_init_options_fini+0x7a>
 8014d0a:	4b19      	ldr	r3, [pc, #100]	@ (8014d70 <rmw_init_options_fini+0x84>)
 8014d0c:	6819      	ldr	r1, [r3, #0]
 8014d0e:	b331      	cbz	r1, 8014d5e <rmw_init_options_fini+0x72>
 8014d10:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8014d12:	e001      	b.n	8014d18 <rmw_init_options_fini+0x2c>
 8014d14:	6849      	ldr	r1, [r1, #4]
 8014d16:	b311      	cbz	r1, 8014d5e <rmw_init_options_fini+0x72>
 8014d18:	688b      	ldr	r3, [r1, #8]
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d1fa      	bne.n	8014d14 <rmw_init_options_fini+0x28>
 8014d1e:	4814      	ldr	r0, [pc, #80]	@ (8014d70 <rmw_init_options_fini+0x84>)
 8014d20:	f7ff ff10 	bl	8014b44 <put_memory>
 8014d24:	4668      	mov	r0, sp
 8014d26:	f7ff fd9b 	bl	8014860 <rmw_get_zero_initialized_init_options>
 8014d2a:	46ee      	mov	lr, sp
 8014d2c:	46a4      	mov	ip, r4
 8014d2e:	2400      	movs	r4, #0
 8014d30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014d4c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014d50:	4620      	mov	r0, r4
 8014d52:	b00e      	add	sp, #56	@ 0x38
 8014d54:	bd10      	pop	{r4, pc}
 8014d56:	240b      	movs	r4, #11
 8014d58:	4620      	mov	r0, r4
 8014d5a:	b00e      	add	sp, #56	@ 0x38
 8014d5c:	bd10      	pop	{r4, pc}
 8014d5e:	2401      	movs	r4, #1
 8014d60:	4620      	mov	r0, r4
 8014d62:	b00e      	add	sp, #56	@ 0x38
 8014d64:	bd10      	pop	{r4, pc}
 8014d66:	240c      	movs	r4, #12
 8014d68:	e7f2      	b.n	8014d50 <rmw_init_options_fini+0x64>
 8014d6a:	bf00      	nop
 8014d6c:	080197bc 	.word	0x080197bc
 8014d70:	2406839c 	.word	0x2406839c

08014d74 <rmw_init>:
 8014d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d78:	b083      	sub	sp, #12
 8014d7a:	2800      	cmp	r0, #0
 8014d7c:	f000 80d3 	beq.w	8014f26 <rmw_init+0x1b2>
 8014d80:	460e      	mov	r6, r1
 8014d82:	2900      	cmp	r1, #0
 8014d84:	f000 80cf 	beq.w	8014f26 <rmw_init+0x1b2>
 8014d88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014d8a:	4605      	mov	r5, r0
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	f000 80ca 	beq.w	8014f26 <rmw_init+0x1b2>
 8014d92:	4b78      	ldr	r3, [pc, #480]	@ (8014f74 <rmw_init+0x200>)
 8014d94:	6880      	ldr	r0, [r0, #8]
 8014d96:	681f      	ldr	r7, [r3, #0]
 8014d98:	b128      	cbz	r0, 8014da6 <rmw_init+0x32>
 8014d9a:	4639      	mov	r1, r7
 8014d9c:	f7eb faa0 	bl	80002e0 <strcmp>
 8014da0:	2800      	cmp	r0, #0
 8014da2:	f040 80ca 	bne.w	8014f3a <rmw_init+0x1c6>
 8014da6:	4c74      	ldr	r4, [pc, #464]	@ (8014f78 <rmw_init+0x204>)
 8014da8:	f04f 0800 	mov.w	r8, #0
 8014dac:	4973      	ldr	r1, [pc, #460]	@ (8014f7c <rmw_init+0x208>)
 8014dae:	4874      	ldr	r0, [pc, #464]	@ (8014f80 <rmw_init+0x20c>)
 8014db0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014db4:	60b7      	str	r7, [r6, #8]
 8014db6:	e9c6 2300 	strd	r2, r3, [r6]
 8014dba:	68eb      	ldr	r3, [r5, #12]
 8014dbc:	2201      	movs	r2, #1
 8014dbe:	64b3      	str	r3, [r6, #72]	@ 0x48
 8014dc0:	f7fa fad8 	bl	800f374 <rmw_uxrce_init_session_memory>
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	2204      	movs	r2, #4
 8014dc8:	496e      	ldr	r1, [pc, #440]	@ (8014f84 <rmw_init+0x210>)
 8014dca:	f7fa fb13 	bl	800f3f4 <rmw_uxrce_init_static_input_buffer_memory>
 8014dce:	486c      	ldr	r0, [pc, #432]	@ (8014f80 <rmw_init+0x20c>)
 8014dd0:	f884 800d 	strb.w	r8, [r4, #13]
 8014dd4:	f7ff fea6 	bl	8014b24 <get_memory>
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	f000 80a9 	beq.w	8014f30 <rmw_init+0x1bc>
 8014dde:	6884      	ldr	r4, [r0, #8]
 8014de0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8014de2:	f104 0910 	add.w	r9, r4, #16
 8014de6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8014de8:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014dec:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014df0:	9101      	str	r1, [sp, #4]
 8014df2:	4661      	mov	r1, ip
 8014df4:	6a00      	ldr	r0, [r0, #32]
 8014df6:	9000      	str	r0, [sp, #0]
 8014df8:	4648      	mov	r0, r9
 8014dfa:	f000 fdbb 	bl	8015974 <uxr_set_custom_transport_callbacks>
 8014dfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014e02:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8014e06:	4960      	ldr	r1, [pc, #384]	@ (8014f88 <rmw_init+0x214>)
 8014e08:	4860      	ldr	r0, [pc, #384]	@ (8014f8c <rmw_init+0x218>)
 8014e0a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8014e0e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8014e12:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8014e16:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8014e1a:	2201      	movs	r2, #1
 8014e1c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8014e20:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8014e24:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8014e28:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8014e2c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8014e2e:	f7fa fa81 	bl	800f334 <rmw_uxrce_init_node_memory>
 8014e32:	2205      	movs	r2, #5
 8014e34:	4956      	ldr	r1, [pc, #344]	@ (8014f90 <rmw_init+0x21c>)
 8014e36:	4857      	ldr	r0, [pc, #348]	@ (8014f94 <rmw_init+0x220>)
 8014e38:	f7fa fa5c 	bl	800f2f4 <rmw_uxrce_init_subscription_memory>
 8014e3c:	220a      	movs	r2, #10
 8014e3e:	4956      	ldr	r1, [pc, #344]	@ (8014f98 <rmw_init+0x224>)
 8014e40:	4856      	ldr	r0, [pc, #344]	@ (8014f9c <rmw_init+0x228>)
 8014e42:	f7fa fa37 	bl	800f2b4 <rmw_uxrce_init_publisher_memory>
 8014e46:	2201      	movs	r2, #1
 8014e48:	4955      	ldr	r1, [pc, #340]	@ (8014fa0 <rmw_init+0x22c>)
 8014e4a:	4856      	ldr	r0, [pc, #344]	@ (8014fa4 <rmw_init+0x230>)
 8014e4c:	f7fa f9f2 	bl	800f234 <rmw_uxrce_init_service_memory>
 8014e50:	2201      	movs	r2, #1
 8014e52:	4955      	ldr	r1, [pc, #340]	@ (8014fa8 <rmw_init+0x234>)
 8014e54:	4855      	ldr	r0, [pc, #340]	@ (8014fac <rmw_init+0x238>)
 8014e56:	f7fa fa0d 	bl	800f274 <rmw_uxrce_init_client_memory>
 8014e5a:	220f      	movs	r2, #15
 8014e5c:	4954      	ldr	r1, [pc, #336]	@ (8014fb0 <rmw_init+0x23c>)
 8014e5e:	4855      	ldr	r0, [pc, #340]	@ (8014fb4 <rmw_init+0x240>)
 8014e60:	f7fa faa8 	bl	800f3b4 <rmw_uxrce_init_topic_memory>
 8014e64:	2203      	movs	r2, #3
 8014e66:	4954      	ldr	r1, [pc, #336]	@ (8014fb8 <rmw_init+0x244>)
 8014e68:	4854      	ldr	r0, [pc, #336]	@ (8014fbc <rmw_init+0x248>)
 8014e6a:	f7fa fae3 	bl	800f434 <rmw_uxrce_init_init_options_impl_memory>
 8014e6e:	2204      	movs	r2, #4
 8014e70:	4953      	ldr	r1, [pc, #332]	@ (8014fc0 <rmw_init+0x24c>)
 8014e72:	4854      	ldr	r0, [pc, #336]	@ (8014fc4 <rmw_init+0x250>)
 8014e74:	f7fa fafe 	bl	800f474 <rmw_uxrce_init_wait_set_memory>
 8014e78:	4953      	ldr	r1, [pc, #332]	@ (8014fc8 <rmw_init+0x254>)
 8014e7a:	4854      	ldr	r0, [pc, #336]	@ (8014fcc <rmw_init+0x258>)
 8014e7c:	2204      	movs	r2, #4
 8014e7e:	f7fa fb19 	bl	800f4b4 <rmw_uxrce_init_guard_condition_memory>
 8014e82:	4642      	mov	r2, r8
 8014e84:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8014e86:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8014e88:	f000 fb0a 	bl	80154a0 <rmw_uxrce_transport_init>
 8014e8c:	4607      	mov	r7, r0
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d158      	bne.n	8014f44 <rmw_init+0x1d0>
 8014e92:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8014e94:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8014e98:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8014e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014e9e:	4628      	mov	r0, r5
 8014ea0:	f7fb ff56 	bl	8010d50 <uxr_init_session>
 8014ea4:	4622      	mov	r2, r4
 8014ea6:	494a      	ldr	r1, [pc, #296]	@ (8014fd0 <rmw_init+0x25c>)
 8014ea8:	4628      	mov	r0, r5
 8014eaa:	f7fb ff75 	bl	8010d98 <uxr_set_topic_callback>
 8014eae:	463a      	mov	r2, r7
 8014eb0:	4948      	ldr	r1, [pc, #288]	@ (8014fd4 <rmw_init+0x260>)
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	f7fb ff6c 	bl	8010d90 <uxr_set_status_callback>
 8014eb8:	463a      	mov	r2, r7
 8014eba:	4947      	ldr	r1, [pc, #284]	@ (8014fd8 <rmw_init+0x264>)
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	f7fb ff6f 	bl	8010da0 <uxr_set_request_callback>
 8014ec2:	463a      	mov	r2, r7
 8014ec4:	4945      	ldr	r1, [pc, #276]	@ (8014fdc <rmw_init+0x268>)
 8014ec6:	4628      	mov	r0, r5
 8014ec8:	f7fb ff6e 	bl	8010da8 <uxr_set_reply_callback>
 8014ecc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014ed0:	2304      	movs	r3, #4
 8014ed2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8014ed6:	0092      	lsls	r2, r2, #2
 8014ed8:	4628      	mov	r0, r5
 8014eda:	f7fb ffa5 	bl	8010e28 <uxr_create_input_reliable_stream>
 8014ede:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014ee2:	2304      	movs	r3, #4
 8014ee4:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8014ee8:	0092      	lsls	r2, r2, #2
 8014eea:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f7fb ff70 	bl	8010dd4 <uxr_create_output_reliable_stream>
 8014ef4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8014ef8:	4628      	mov	r0, r5
 8014efa:	f7fb ff8f 	bl	8010e1c <uxr_create_input_best_effort_stream>
 8014efe:	f241 3194 	movw	r1, #5012	@ 0x1394
 8014f02:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8014f06:	4628      	mov	r0, r5
 8014f08:	4421      	add	r1, r4
 8014f0a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014f0e:	f7fb ff4f 	bl	8010db0 <uxr_create_output_best_effort_stream>
 8014f12:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8014f16:	4628      	mov	r0, r5
 8014f18:	f7fc fcf2 	bl	8011900 <uxr_create_session>
 8014f1c:	b1f8      	cbz	r0, 8014f5e <rmw_init+0x1ea>
 8014f1e:	4638      	mov	r0, r7
 8014f20:	b003      	add	sp, #12
 8014f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f26:	270b      	movs	r7, #11
 8014f28:	4638      	mov	r0, r7
 8014f2a:	b003      	add	sp, #12
 8014f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f30:	2701      	movs	r7, #1
 8014f32:	4638      	mov	r0, r7
 8014f34:	b003      	add	sp, #12
 8014f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f3a:	270c      	movs	r7, #12
 8014f3c:	4638      	mov	r0, r7
 8014f3e:	b003      	add	sp, #12
 8014f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f44:	4648      	mov	r0, r9
 8014f46:	f000 fd53 	bl	80159f0 <uxr_close_custom_transport>
 8014f4a:	4621      	mov	r1, r4
 8014f4c:	480c      	ldr	r0, [pc, #48]	@ (8014f80 <rmw_init+0x20c>)
 8014f4e:	f7ff fdf9 	bl	8014b44 <put_memory>
 8014f52:	4638      	mov	r0, r7
 8014f54:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8014f58:	b003      	add	sp, #12
 8014f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f5e:	4648      	mov	r0, r9
 8014f60:	f000 fd46 	bl	80159f0 <uxr_close_custom_transport>
 8014f64:	4621      	mov	r1, r4
 8014f66:	4806      	ldr	r0, [pc, #24]	@ (8014f80 <rmw_init+0x20c>)
 8014f68:	f7ff fdec 	bl	8014b44 <put_memory>
 8014f6c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8014f6e:	2701      	movs	r7, #1
 8014f70:	e7d5      	b.n	8014f1e <rmw_init+0x1aa>
 8014f72:	bf00      	nop
 8014f74:	080197bc 	.word	0x080197bc
 8014f78:	240683ec 	.word	0x240683ec
 8014f7c:	24064698 	.word	0x24064698
 8014f80:	240683dc 	.word	0x240683dc
 8014f84:	24065c40 	.word	0x24065c40
 8014f88:	24063cbc 	.word	0x24063cbc
 8014f8c:	240683ac 	.word	0x240683ac
 8014f90:	24067d40 	.word	0x24067d40
 8014f94:	240683fc 	.word	0x240683fc
 8014f98:	24063d60 	.word	0x24063d60
 8014f9c:	240683bc 	.word	0x240683bc
 8014fa0:	240645d0 	.word	0x240645d0
 8014fa4:	240683cc 	.word	0x240683cc
 8014fa8:	24063af0 	.word	0x24063af0
 8014fac:	24063ae0 	.word	0x24063ae0
 8014fb0:	24068178 	.word	0x24068178
 8014fb4:	2406840c 	.word	0x2406840c
 8014fb8:	24063c38 	.word	0x24063c38
 8014fbc:	2406839c 	.word	0x2406839c
 8014fc0:	2406831c 	.word	0x2406831c
 8014fc4:	2406841c 	.word	0x2406841c
 8014fc8:	24063bb8 	.word	0x24063bb8
 8014fcc:	2406838c 	.word	0x2406838c
 8014fd0:	080175c9 	.word	0x080175c9
 8014fd4:	080175c1 	.word	0x080175c1
 8014fd8:	08017661 	.word	0x08017661
 8014fdc:	080176fd 	.word	0x080176fd

08014fe0 <rmw_context_fini>:
 8014fe0:	4b17      	ldr	r3, [pc, #92]	@ (8015040 <rmw_context_fini+0x60>)
 8014fe2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8014fe4:	b570      	push	{r4, r5, r6, lr}
 8014fe6:	681c      	ldr	r4, [r3, #0]
 8014fe8:	4605      	mov	r5, r0
 8014fea:	b334      	cbz	r4, 801503a <rmw_context_fini+0x5a>
 8014fec:	2600      	movs	r6, #0
 8014fee:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8014ff2:	6902      	ldr	r2, [r0, #16]
 8014ff4:	428a      	cmp	r2, r1
 8014ff6:	d018      	beq.n	801502a <rmw_context_fini+0x4a>
 8014ff8:	2c00      	cmp	r4, #0
 8014ffa:	d1f8      	bne.n	8014fee <rmw_context_fini+0xe>
 8014ffc:	b189      	cbz	r1, 8015022 <rmw_context_fini+0x42>
 8014ffe:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8015002:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8015006:	789b      	ldrb	r3, [r3, #2]
 8015008:	2b01      	cmp	r3, #1
 801500a:	bf14      	ite	ne
 801500c:	210a      	movne	r1, #10
 801500e:	2100      	moveq	r1, #0
 8015010:	f7fc fc4e 	bl	80118b0 <uxr_delete_session_retries>
 8015014:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015016:	f7fa fa6d 	bl	800f4f4 <rmw_uxrce_fini_session_memory>
 801501a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801501c:	3010      	adds	r0, #16
 801501e:	f000 fce7 	bl	80159f0 <uxr_close_custom_transport>
 8015022:	2300      	movs	r3, #0
 8015024:	4630      	mov	r0, r6
 8015026:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8015028:	bd70      	pop	{r4, r5, r6, pc}
 801502a:	3018      	adds	r0, #24
 801502c:	f000 f90e 	bl	801524c <rmw_destroy_node>
 8015030:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8015032:	4606      	mov	r6, r0
 8015034:	2c00      	cmp	r4, #0
 8015036:	d1da      	bne.n	8014fee <rmw_context_fini+0xe>
 8015038:	e7e0      	b.n	8014ffc <rmw_context_fini+0x1c>
 801503a:	4626      	mov	r6, r4
 801503c:	e7de      	b.n	8014ffc <rmw_context_fini+0x1c>
 801503e:	bf00      	nop
 8015040:	240683ac 	.word	0x240683ac

08015044 <create_topic>:
 8015044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015048:	4605      	mov	r5, r0
 801504a:	b084      	sub	sp, #16
 801504c:	4822      	ldr	r0, [pc, #136]	@ (80150d8 <create_topic+0x94>)
 801504e:	460f      	mov	r7, r1
 8015050:	4616      	mov	r6, r2
 8015052:	f7ff fd67 	bl	8014b24 <get_memory>
 8015056:	4604      	mov	r4, r0
 8015058:	2800      	cmp	r0, #0
 801505a:	d039      	beq.n	80150d0 <create_topic+0x8c>
 801505c:	692b      	ldr	r3, [r5, #16]
 801505e:	2102      	movs	r1, #2
 8015060:	6884      	ldr	r4, [r0, #8]
 8015062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015066:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 80150e0 <create_topic+0x9c>
 801506a:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801506e:	1c42      	adds	r2, r0, #1
 8015070:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015074:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015078:	f7fb fdac 	bl	8010bd4 <uxr_object_id>
 801507c:	223c      	movs	r2, #60	@ 0x3c
 801507e:	6120      	str	r0, [r4, #16]
 8015080:	4641      	mov	r1, r8
 8015082:	4638      	mov	r0, r7
 8015084:	f7fa fb74 	bl	800f770 <generate_topic_name>
 8015088:	b1f0      	cbz	r0, 80150c8 <create_topic+0x84>
 801508a:	4f14      	ldr	r7, [pc, #80]	@ (80150dc <create_topic+0x98>)
 801508c:	4630      	mov	r0, r6
 801508e:	2264      	movs	r2, #100	@ 0x64
 8015090:	4639      	mov	r1, r7
 8015092:	f7fa fb3f 	bl	800f714 <generate_type_name>
 8015096:	b1b8      	cbz	r0, 80150c8 <create_topic+0x84>
 8015098:	6928      	ldr	r0, [r5, #16]
 801509a:	2106      	movs	r1, #6
 801509c:	696b      	ldr	r3, [r5, #20]
 801509e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80150a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80150a6:	f8cd 8000 	str.w	r8, [sp]
 80150aa:	e9cd 7101 	strd	r7, r1, [sp, #4]
 80150ae:	6811      	ldr	r1, [r2, #0]
 80150b0:	6922      	ldr	r2, [r4, #16]
 80150b2:	f7fb fcb3 	bl	8010a1c <uxr_buffer_create_topic_bin>
 80150b6:	4602      	mov	r2, r0
 80150b8:	6928      	ldr	r0, [r5, #16]
 80150ba:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80150be:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80150c2:	f7fa faf3 	bl	800f6ac <run_xrce_session>
 80150c6:	b918      	cbnz	r0, 80150d0 <create_topic+0x8c>
 80150c8:	4620      	mov	r0, r4
 80150ca:	2400      	movs	r4, #0
 80150cc:	f7fa fa88 	bl	800f5e0 <rmw_uxrce_fini_topic_memory>
 80150d0:	4620      	mov	r0, r4
 80150d2:	b004      	add	sp, #16
 80150d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150d8:	2406840c 	.word	0x2406840c
 80150dc:	24068488 	.word	0x24068488
 80150e0:	2406844c 	.word	0x2406844c

080150e4 <destroy_topic>:
 80150e4:	b538      	push	{r3, r4, r5, lr}
 80150e6:	6985      	ldr	r5, [r0, #24]
 80150e8:	b1dd      	cbz	r5, 8015122 <destroy_topic+0x3e>
 80150ea:	4604      	mov	r4, r0
 80150ec:	6928      	ldr	r0, [r5, #16]
 80150ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80150f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80150f6:	6922      	ldr	r2, [r4, #16]
 80150f8:	6819      	ldr	r1, [r3, #0]
 80150fa:	f7fb fc11 	bl	8010920 <uxr_buffer_delete_entity>
 80150fe:	4602      	mov	r2, r0
 8015100:	6928      	ldr	r0, [r5, #16]
 8015102:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015106:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801510a:	f7fa facf 	bl	800f6ac <run_xrce_session>
 801510e:	4603      	mov	r3, r0
 8015110:	4620      	mov	r0, r4
 8015112:	2b00      	cmp	r3, #0
 8015114:	bf14      	ite	ne
 8015116:	2400      	movne	r4, #0
 8015118:	2402      	moveq	r4, #2
 801511a:	f7fa fa61 	bl	800f5e0 <rmw_uxrce_fini_topic_memory>
 801511e:	4620      	mov	r0, r4
 8015120:	bd38      	pop	{r3, r4, r5, pc}
 8015122:	2401      	movs	r4, #1
 8015124:	4620      	mov	r0, r4
 8015126:	bd38      	pop	{r3, r4, r5, pc}

08015128 <create_node>:
 8015128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801512c:	b083      	sub	sp, #12
 801512e:	2b00      	cmp	r3, #0
 8015130:	d064      	beq.n	80151fc <create_node+0xd4>
 8015132:	4606      	mov	r6, r0
 8015134:	4838      	ldr	r0, [pc, #224]	@ (8015218 <create_node+0xf0>)
 8015136:	460f      	mov	r7, r1
 8015138:	4690      	mov	r8, r2
 801513a:	461d      	mov	r5, r3
 801513c:	f7ff fcf2 	bl	8014b24 <get_memory>
 8015140:	2800      	cmp	r0, #0
 8015142:	d05b      	beq.n	80151fc <create_node+0xd4>
 8015144:	6884      	ldr	r4, [r0, #8]
 8015146:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015148:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801514c:	f104 0518 	add.w	r5, r4, #24
 8015150:	6123      	str	r3, [r4, #16]
 8015152:	f7ff fd0b 	bl	8014b6c <rmw_get_implementation_identifier>
 8015156:	f8c4 9020 	str.w	r9, [r4, #32]
 801515a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801515e:	4630      	mov	r0, r6
 8015160:	f7eb f8c8 	bl	80002f4 <strlen>
 8015164:	1c42      	adds	r2, r0, #1
 8015166:	2a3c      	cmp	r2, #60	@ 0x3c
 8015168:	d840      	bhi.n	80151ec <create_node+0xc4>
 801516a:	4648      	mov	r0, r9
 801516c:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8015170:	4631      	mov	r1, r6
 8015172:	f003 f848 	bl	8018206 <memcpy>
 8015176:	4638      	mov	r0, r7
 8015178:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801517c:	f7eb f8ba 	bl	80002f4 <strlen>
 8015180:	1c42      	adds	r2, r0, #1
 8015182:	2a3c      	cmp	r2, #60	@ 0x3c
 8015184:	d832      	bhi.n	80151ec <create_node+0xc4>
 8015186:	4639      	mov	r1, r7
 8015188:	4648      	mov	r0, r9
 801518a:	f003 f83c 	bl	8018206 <memcpy>
 801518e:	6923      	ldr	r3, [r4, #16]
 8015190:	2101      	movs	r1, #1
 8015192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015196:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801519a:	1842      	adds	r2, r0, r1
 801519c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80151a0:	f7fb fd18 	bl	8010bd4 <uxr_object_id>
 80151a4:	6160      	str	r0, [r4, #20]
 80151a6:	783b      	ldrb	r3, [r7, #0]
 80151a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80151aa:	d12c      	bne.n	8015206 <create_node+0xde>
 80151ac:	787b      	ldrb	r3, [r7, #1]
 80151ae:	bb53      	cbnz	r3, 8015206 <create_node+0xde>
 80151b0:	4633      	mov	r3, r6
 80151b2:	4a1a      	ldr	r2, [pc, #104]	@ (801521c <create_node+0xf4>)
 80151b4:	213c      	movs	r1, #60	@ 0x3c
 80151b6:	481a      	ldr	r0, [pc, #104]	@ (8015220 <create_node+0xf8>)
 80151b8:	f002 fe56 	bl	8017e68 <sniprintf>
 80151bc:	6920      	ldr	r0, [r4, #16]
 80151be:	2106      	movs	r1, #6
 80151c0:	fa1f f388 	uxth.w	r3, r8
 80151c4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80151c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80151cc:	9101      	str	r1, [sp, #4]
 80151ce:	4914      	ldr	r1, [pc, #80]	@ (8015220 <create_node+0xf8>)
 80151d0:	9100      	str	r1, [sp, #0]
 80151d2:	6811      	ldr	r1, [r2, #0]
 80151d4:	6962      	ldr	r2, [r4, #20]
 80151d6:	f7fb fbef 	bl	80109b8 <uxr_buffer_create_participant_bin>
 80151da:	4602      	mov	r2, r0
 80151dc:	6920      	ldr	r0, [r4, #16]
 80151de:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80151e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80151e6:	f7fa fa61 	bl	800f6ac <run_xrce_session>
 80151ea:	b918      	cbnz	r0, 80151f4 <create_node+0xcc>
 80151ec:	4628      	mov	r0, r5
 80151ee:	2500      	movs	r5, #0
 80151f0:	f7fa f986 	bl	800f500 <rmw_uxrce_fini_node_memory>
 80151f4:	4628      	mov	r0, r5
 80151f6:	b003      	add	sp, #12
 80151f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151fc:	2500      	movs	r5, #0
 80151fe:	4628      	mov	r0, r5
 8015200:	b003      	add	sp, #12
 8015202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015206:	463b      	mov	r3, r7
 8015208:	4a06      	ldr	r2, [pc, #24]	@ (8015224 <create_node+0xfc>)
 801520a:	213c      	movs	r1, #60	@ 0x3c
 801520c:	9600      	str	r6, [sp, #0]
 801520e:	4804      	ldr	r0, [pc, #16]	@ (8015220 <create_node+0xf8>)
 8015210:	f002 fe2a 	bl	8017e68 <sniprintf>
 8015214:	e7d2      	b.n	80151bc <create_node+0x94>
 8015216:	bf00      	nop
 8015218:	240683ac 	.word	0x240683ac
 801521c:	080191d4 	.word	0x080191d4
 8015220:	240684ec 	.word	0x240684ec
 8015224:	08019364 	.word	0x08019364

08015228 <rmw_create_node>:
 8015228:	468c      	mov	ip, r1
 801522a:	4611      	mov	r1, r2
 801522c:	f1bc 0f00 	cmp.w	ip, #0
 8015230:	d00a      	beq.n	8015248 <rmw_create_node+0x20>
 8015232:	f89c 3000 	ldrb.w	r3, [ip]
 8015236:	b13b      	cbz	r3, 8015248 <rmw_create_node+0x20>
 8015238:	b132      	cbz	r2, 8015248 <rmw_create_node+0x20>
 801523a:	7813      	ldrb	r3, [r2, #0]
 801523c:	b123      	cbz	r3, 8015248 <rmw_create_node+0x20>
 801523e:	4603      	mov	r3, r0
 8015240:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8015242:	4660      	mov	r0, ip
 8015244:	f7ff bf70 	b.w	8015128 <create_node>
 8015248:	2000      	movs	r0, #0
 801524a:	4770      	bx	lr

0801524c <rmw_destroy_node>:
 801524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801524e:	b328      	cbz	r0, 801529c <rmw_destroy_node+0x50>
 8015250:	4607      	mov	r7, r0
 8015252:	6800      	ldr	r0, [r0, #0]
 8015254:	b120      	cbz	r0, 8015260 <rmw_destroy_node+0x14>
 8015256:	4b37      	ldr	r3, [pc, #220]	@ (8015334 <rmw_destroy_node+0xe8>)
 8015258:	6819      	ldr	r1, [r3, #0]
 801525a:	f7eb f841 	bl	80002e0 <strcmp>
 801525e:	b9e8      	cbnz	r0, 801529c <rmw_destroy_node+0x50>
 8015260:	687d      	ldr	r5, [r7, #4]
 8015262:	b1dd      	cbz	r5, 801529c <rmw_destroy_node+0x50>
 8015264:	4b34      	ldr	r3, [pc, #208]	@ (8015338 <rmw_destroy_node+0xec>)
 8015266:	681c      	ldr	r4, [r3, #0]
 8015268:	2c00      	cmp	r4, #0
 801526a:	d060      	beq.n	801532e <rmw_destroy_node+0xe2>
 801526c:	2600      	movs	r6, #0
 801526e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015272:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8015276:	429d      	cmp	r5, r3
 8015278:	d013      	beq.n	80152a2 <rmw_destroy_node+0x56>
 801527a:	2c00      	cmp	r4, #0
 801527c:	d1f7      	bne.n	801526e <rmw_destroy_node+0x22>
 801527e:	4b2f      	ldr	r3, [pc, #188]	@ (801533c <rmw_destroy_node+0xf0>)
 8015280:	681c      	ldr	r4, [r3, #0]
 8015282:	b1c4      	cbz	r4, 80152b6 <rmw_destroy_node+0x6a>
 8015284:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015288:	6a0b      	ldr	r3, [r1, #32]
 801528a:	429d      	cmp	r5, r3
 801528c:	d1f9      	bne.n	8015282 <rmw_destroy_node+0x36>
 801528e:	317c      	adds	r1, #124	@ 0x7c
 8015290:	4638      	mov	r0, r7
 8015292:	f000 f8a3 	bl	80153dc <rmw_destroy_subscription>
 8015296:	2801      	cmp	r0, #1
 8015298:	4606      	mov	r6, r0
 801529a:	d1f2      	bne.n	8015282 <rmw_destroy_node+0x36>
 801529c:	2601      	movs	r6, #1
 801529e:	4630      	mov	r0, r6
 80152a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152a2:	3184      	adds	r1, #132	@ 0x84
 80152a4:	4638      	mov	r0, r7
 80152a6:	f7f9 ff51 	bl	800f14c <rmw_destroy_publisher>
 80152aa:	2801      	cmp	r0, #1
 80152ac:	4606      	mov	r6, r0
 80152ae:	d0f5      	beq.n	801529c <rmw_destroy_node+0x50>
 80152b0:	2c00      	cmp	r4, #0
 80152b2:	d1dc      	bne.n	801526e <rmw_destroy_node+0x22>
 80152b4:	e7e3      	b.n	801527e <rmw_destroy_node+0x32>
 80152b6:	4b22      	ldr	r3, [pc, #136]	@ (8015340 <rmw_destroy_node+0xf4>)
 80152b8:	681c      	ldr	r4, [r3, #0]
 80152ba:	b16c      	cbz	r4, 80152d8 <rmw_destroy_node+0x8c>
 80152bc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80152c0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80152c2:	429d      	cmp	r5, r3
 80152c4:	d1f9      	bne.n	80152ba <rmw_destroy_node+0x6e>
 80152c6:	317c      	adds	r1, #124	@ 0x7c
 80152c8:	4638      	mov	r0, r7
 80152ca:	f000 f843 	bl	8015354 <rmw_destroy_service>
 80152ce:	2801      	cmp	r0, #1
 80152d0:	4606      	mov	r6, r0
 80152d2:	d0e3      	beq.n	801529c <rmw_destroy_node+0x50>
 80152d4:	2c00      	cmp	r4, #0
 80152d6:	d1f1      	bne.n	80152bc <rmw_destroy_node+0x70>
 80152d8:	4b1a      	ldr	r3, [pc, #104]	@ (8015344 <rmw_destroy_node+0xf8>)
 80152da:	681c      	ldr	r4, [r3, #0]
 80152dc:	b16c      	cbz	r4, 80152fa <rmw_destroy_node+0xae>
 80152de:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80152e2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80152e4:	429d      	cmp	r5, r3
 80152e6:	d1f9      	bne.n	80152dc <rmw_destroy_node+0x90>
 80152e8:	317c      	adds	r1, #124	@ 0x7c
 80152ea:	4638      	mov	r0, r7
 80152ec:	f002 fa50 	bl	8017790 <rmw_destroy_client>
 80152f0:	2801      	cmp	r0, #1
 80152f2:	4606      	mov	r6, r0
 80152f4:	d0d2      	beq.n	801529c <rmw_destroy_node+0x50>
 80152f6:	2c00      	cmp	r4, #0
 80152f8:	d1f1      	bne.n	80152de <rmw_destroy_node+0x92>
 80152fa:	6928      	ldr	r0, [r5, #16]
 80152fc:	696a      	ldr	r2, [r5, #20]
 80152fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015302:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015306:	6819      	ldr	r1, [r3, #0]
 8015308:	f7fb fb0a 	bl	8010920 <uxr_buffer_delete_entity>
 801530c:	4602      	mov	r2, r0
 801530e:	6928      	ldr	r0, [r5, #16]
 8015310:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015314:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015318:	f7fa f9c8 	bl	800f6ac <run_xrce_session>
 801531c:	4603      	mov	r3, r0
 801531e:	4638      	mov	r0, r7
 8015320:	2b00      	cmp	r3, #0
 8015322:	bf08      	it	eq
 8015324:	2602      	moveq	r6, #2
 8015326:	f7fa f8eb 	bl	800f500 <rmw_uxrce_fini_node_memory>
 801532a:	4630      	mov	r0, r6
 801532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801532e:	4626      	mov	r6, r4
 8015330:	e7a5      	b.n	801527e <rmw_destroy_node+0x32>
 8015332:	bf00      	nop
 8015334:	080197bc 	.word	0x080197bc
 8015338:	240683bc 	.word	0x240683bc
 801533c:	240683fc 	.word	0x240683fc
 8015340:	240683cc 	.word	0x240683cc
 8015344:	24063ae0 	.word	0x24063ae0

08015348 <rmw_node_get_graph_guard_condition>:
 8015348:	6843      	ldr	r3, [r0, #4]
 801534a:	6918      	ldr	r0, [r3, #16]
 801534c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8015350:	4770      	bx	lr
 8015352:	bf00      	nop

08015354 <rmw_destroy_service>:
 8015354:	b570      	push	{r4, r5, r6, lr}
 8015356:	b128      	cbz	r0, 8015364 <rmw_destroy_service+0x10>
 8015358:	4604      	mov	r4, r0
 801535a:	6800      	ldr	r0, [r0, #0]
 801535c:	460d      	mov	r5, r1
 801535e:	f7fa fa1f 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 8015362:	b910      	cbnz	r0, 801536a <rmw_destroy_service+0x16>
 8015364:	2401      	movs	r4, #1
 8015366:	4620      	mov	r0, r4
 8015368:	bd70      	pop	{r4, r5, r6, pc}
 801536a:	6863      	ldr	r3, [r4, #4]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d0f9      	beq.n	8015364 <rmw_destroy_service+0x10>
 8015370:	2d00      	cmp	r5, #0
 8015372:	d0f7      	beq.n	8015364 <rmw_destroy_service+0x10>
 8015374:	6828      	ldr	r0, [r5, #0]
 8015376:	f7fa fa13 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 801537a:	2800      	cmp	r0, #0
 801537c:	d0f2      	beq.n	8015364 <rmw_destroy_service+0x10>
 801537e:	686e      	ldr	r6, [r5, #4]
 8015380:	2e00      	cmp	r6, #0
 8015382:	d0ef      	beq.n	8015364 <rmw_destroy_service+0x10>
 8015384:	6864      	ldr	r4, [r4, #4]
 8015386:	6932      	ldr	r2, [r6, #16]
 8015388:	6920      	ldr	r0, [r4, #16]
 801538a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801538e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015392:	6819      	ldr	r1, [r3, #0]
 8015394:	f001 f87c 	bl	8016490 <uxr_buffer_cancel_data>
 8015398:	4602      	mov	r2, r0
 801539a:	6920      	ldr	r0, [r4, #16]
 801539c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80153a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80153a4:	f7fa f982 	bl	800f6ac <run_xrce_session>
 80153a8:	6920      	ldr	r0, [r4, #16]
 80153aa:	6932      	ldr	r2, [r6, #16]
 80153ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80153b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153b4:	6819      	ldr	r1, [r3, #0]
 80153b6:	f7fb fab3 	bl	8010920 <uxr_buffer_delete_entity>
 80153ba:	4602      	mov	r2, r0
 80153bc:	6920      	ldr	r0, [r4, #16]
 80153be:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80153c2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80153c6:	f7fa f971 	bl	800f6ac <run_xrce_session>
 80153ca:	4603      	mov	r3, r0
 80153cc:	4628      	mov	r0, r5
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	bf14      	ite	ne
 80153d2:	2400      	movne	r4, #0
 80153d4:	2402      	moveq	r4, #2
 80153d6:	f7fa f8d7 	bl	800f588 <rmw_uxrce_fini_service_memory>
 80153da:	e7c4      	b.n	8015366 <rmw_destroy_service+0x12>

080153dc <rmw_destroy_subscription>:
 80153dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e0:	b128      	cbz	r0, 80153ee <rmw_destroy_subscription+0x12>
 80153e2:	4604      	mov	r4, r0
 80153e4:	6800      	ldr	r0, [r0, #0]
 80153e6:	460d      	mov	r5, r1
 80153e8:	f7fa f9da 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 80153ec:	b918      	cbnz	r0, 80153f6 <rmw_destroy_subscription+0x1a>
 80153ee:	2401      	movs	r4, #1
 80153f0:	4620      	mov	r0, r4
 80153f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153f6:	6863      	ldr	r3, [r4, #4]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d0f8      	beq.n	80153ee <rmw_destroy_subscription+0x12>
 80153fc:	fab5 f485 	clz	r4, r5
 8015400:	0964      	lsrs	r4, r4, #5
 8015402:	2d00      	cmp	r5, #0
 8015404:	d0f3      	beq.n	80153ee <rmw_destroy_subscription+0x12>
 8015406:	6828      	ldr	r0, [r5, #0]
 8015408:	f7fa f9ca 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 801540c:	2800      	cmp	r0, #0
 801540e:	d0ee      	beq.n	80153ee <rmw_destroy_subscription+0x12>
 8015410:	686e      	ldr	r6, [r5, #4]
 8015412:	2e00      	cmp	r6, #0
 8015414:	d0eb      	beq.n	80153ee <rmw_destroy_subscription+0x12>
 8015416:	6a37      	ldr	r7, [r6, #32]
 8015418:	6972      	ldr	r2, [r6, #20]
 801541a:	6938      	ldr	r0, [r7, #16]
 801541c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015420:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015424:	6819      	ldr	r1, [r3, #0]
 8015426:	f001 f833 	bl	8016490 <uxr_buffer_cancel_data>
 801542a:	4602      	mov	r2, r0
 801542c:	6938      	ldr	r0, [r7, #16]
 801542e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015432:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015436:	f7fa f939 	bl	800f6ac <run_xrce_session>
 801543a:	69f0      	ldr	r0, [r6, #28]
 801543c:	f7ff fe52 	bl	80150e4 <destroy_topic>
 8015440:	6a33      	ldr	r3, [r6, #32]
 8015442:	6972      	ldr	r2, [r6, #20]
 8015444:	6918      	ldr	r0, [r3, #16]
 8015446:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801544a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801544e:	6819      	ldr	r1, [r3, #0]
 8015450:	f7fb fa66 	bl	8010920 <uxr_buffer_delete_entity>
 8015454:	6a33      	ldr	r3, [r6, #32]
 8015456:	4680      	mov	r8, r0
 8015458:	6932      	ldr	r2, [r6, #16]
 801545a:	6918      	ldr	r0, [r3, #16]
 801545c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015460:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015464:	6819      	ldr	r1, [r3, #0]
 8015466:	f7fb fa5b 	bl	8010920 <uxr_buffer_delete_entity>
 801546a:	4606      	mov	r6, r0
 801546c:	6938      	ldr	r0, [r7, #16]
 801546e:	4642      	mov	r2, r8
 8015470:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015474:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015478:	f7fa f918 	bl	800f6ac <run_xrce_session>
 801547c:	693f      	ldr	r7, [r7, #16]
 801547e:	4632      	mov	r2, r6
 8015480:	4606      	mov	r6, r0
 8015482:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015486:	4638      	mov	r0, r7
 8015488:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801548c:	f7fa f90e 	bl	800f6ac <run_xrce_session>
 8015490:	b126      	cbz	r6, 801549c <rmw_destroy_subscription+0xc0>
 8015492:	b118      	cbz	r0, 801549c <rmw_destroy_subscription+0xc0>
 8015494:	4628      	mov	r0, r5
 8015496:	f7fa f861 	bl	800f55c <rmw_uxrce_fini_subscription_memory>
 801549a:	e7a9      	b.n	80153f0 <rmw_destroy_subscription+0x14>
 801549c:	2402      	movs	r4, #2
 801549e:	e7f9      	b.n	8015494 <rmw_destroy_subscription+0xb8>

080154a0 <rmw_uxrce_transport_init>:
 80154a0:	b508      	push	{r3, lr}
 80154a2:	b108      	cbz	r0, 80154a8 <rmw_uxrce_transport_init+0x8>
 80154a4:	f100 0210 	add.w	r2, r0, #16
 80154a8:	b139      	cbz	r1, 80154ba <rmw_uxrce_transport_init+0x1a>
 80154aa:	6949      	ldr	r1, [r1, #20]
 80154ac:	4610      	mov	r0, r2
 80154ae:	f000 fa6b 	bl	8015988 <uxr_init_custom_transport>
 80154b2:	f080 0001 	eor.w	r0, r0, #1
 80154b6:	b2c0      	uxtb	r0, r0
 80154b8:	bd08      	pop	{r3, pc}
 80154ba:	4b04      	ldr	r3, [pc, #16]	@ (80154cc <rmw_uxrce_transport_init+0x2c>)
 80154bc:	4610      	mov	r0, r2
 80154be:	6859      	ldr	r1, [r3, #4]
 80154c0:	f000 fa62 	bl	8015988 <uxr_init_custom_transport>
 80154c4:	f080 0001 	eor.w	r0, r0, #1
 80154c8:	b2c0      	uxtb	r0, r0
 80154ca:	bd08      	pop	{r3, pc}
 80154cc:	24063ac4 	.word	0x24063ac4

080154d0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80154d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154d4:	6805      	ldr	r5, [r0, #0]
 80154d6:	4604      	mov	r4, r0
 80154d8:	460e      	mov	r6, r1
 80154da:	4628      	mov	r0, r5
 80154dc:	f7ea ff00 	bl	80002e0 <strcmp>
 80154e0:	b1c8      	cbz	r0, 8015516 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80154e2:	4b11      	ldr	r3, [pc, #68]	@ (8015528 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	429d      	cmp	r5, r3
 80154e8:	d112      	bne.n	8015510 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80154ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80154ee:	f8d8 4000 	ldr.w	r4, [r8]
 80154f2:	b16c      	cbz	r4, 8015510 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80154f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80154f8:	2700      	movs	r7, #0
 80154fa:	3d04      	subs	r5, #4
 80154fc:	4631      	mov	r1, r6
 80154fe:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015502:	f7ea feed 	bl	80002e0 <strcmp>
 8015506:	00bb      	lsls	r3, r7, #2
 8015508:	b140      	cbz	r0, 801551c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801550a:	3701      	adds	r7, #1
 801550c:	42bc      	cmp	r4, r7
 801550e:	d1f5      	bne.n	80154fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015510:	2000      	movs	r0, #0
 8015512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015516:	4620      	mov	r0, r4
 8015518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801551c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015524:	58d3      	ldr	r3, [r2, r3]
 8015526:	4718      	bx	r3
 8015528:	240000b0 	.word	0x240000b0

0801552c <std_msgs__msg__Int32__init>:
 801552c:	3800      	subs	r0, #0
 801552e:	bf18      	it	ne
 8015530:	2001      	movne	r0, #1
 8015532:	4770      	bx	lr

08015534 <std_msgs__msg__Int32__fini>:
 8015534:	4770      	bx	lr
 8015536:	bf00      	nop

08015538 <ucdr_serialize_endian_array_char>:
 8015538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801553c:	4619      	mov	r1, r3
 801553e:	461f      	mov	r7, r3
 8015540:	4605      	mov	r5, r0
 8015542:	4690      	mov	r8, r2
 8015544:	f7fb f924 	bl	8010790 <ucdr_check_buffer_available_for>
 8015548:	b9e0      	cbnz	r0, 8015584 <ucdr_serialize_endian_array_char+0x4c>
 801554a:	463e      	mov	r6, r7
 801554c:	e00b      	b.n	8015566 <ucdr_serialize_endian_array_char+0x2e>
 801554e:	4441      	add	r1, r8
 8015550:	68a8      	ldr	r0, [r5, #8]
 8015552:	4622      	mov	r2, r4
 8015554:	1b36      	subs	r6, r6, r4
 8015556:	f002 fe56 	bl	8018206 <memcpy>
 801555a:	68ab      	ldr	r3, [r5, #8]
 801555c:	6928      	ldr	r0, [r5, #16]
 801555e:	4423      	add	r3, r4
 8015560:	4420      	add	r0, r4
 8015562:	60ab      	str	r3, [r5, #8]
 8015564:	6128      	str	r0, [r5, #16]
 8015566:	4631      	mov	r1, r6
 8015568:	2201      	movs	r2, #1
 801556a:	4628      	mov	r0, r5
 801556c:	f7fb f99a 	bl	80108a4 <ucdr_check_final_buffer_behavior_array>
 8015570:	1bb9      	subs	r1, r7, r6
 8015572:	4604      	mov	r4, r0
 8015574:	2800      	cmp	r0, #0
 8015576:	d1ea      	bne.n	801554e <ucdr_serialize_endian_array_char+0x16>
 8015578:	2301      	movs	r3, #1
 801557a:	7da8      	ldrb	r0, [r5, #22]
 801557c:	756b      	strb	r3, [r5, #21]
 801557e:	4058      	eors	r0, r3
 8015580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015584:	463a      	mov	r2, r7
 8015586:	4641      	mov	r1, r8
 8015588:	68a8      	ldr	r0, [r5, #8]
 801558a:	f002 fe3c 	bl	8018206 <memcpy>
 801558e:	68aa      	ldr	r2, [r5, #8]
 8015590:	692b      	ldr	r3, [r5, #16]
 8015592:	443a      	add	r2, r7
 8015594:	443b      	add	r3, r7
 8015596:	60aa      	str	r2, [r5, #8]
 8015598:	612b      	str	r3, [r5, #16]
 801559a:	e7ed      	b.n	8015578 <ucdr_serialize_endian_array_char+0x40>

0801559c <ucdr_deserialize_endian_array_char>:
 801559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a0:	4619      	mov	r1, r3
 80155a2:	461f      	mov	r7, r3
 80155a4:	4605      	mov	r5, r0
 80155a6:	4690      	mov	r8, r2
 80155a8:	f7fb f8f2 	bl	8010790 <ucdr_check_buffer_available_for>
 80155ac:	b9e8      	cbnz	r0, 80155ea <ucdr_deserialize_endian_array_char+0x4e>
 80155ae:	463e      	mov	r6, r7
 80155b0:	e00c      	b.n	80155cc <ucdr_deserialize_endian_array_char+0x30>
 80155b2:	eb08 0003 	add.w	r0, r8, r3
 80155b6:	68a9      	ldr	r1, [r5, #8]
 80155b8:	4622      	mov	r2, r4
 80155ba:	1b36      	subs	r6, r6, r4
 80155bc:	f002 fe23 	bl	8018206 <memcpy>
 80155c0:	68ab      	ldr	r3, [r5, #8]
 80155c2:	6928      	ldr	r0, [r5, #16]
 80155c4:	4423      	add	r3, r4
 80155c6:	4420      	add	r0, r4
 80155c8:	60ab      	str	r3, [r5, #8]
 80155ca:	6128      	str	r0, [r5, #16]
 80155cc:	4631      	mov	r1, r6
 80155ce:	2201      	movs	r2, #1
 80155d0:	4628      	mov	r0, r5
 80155d2:	f7fb f967 	bl	80108a4 <ucdr_check_final_buffer_behavior_array>
 80155d6:	1bbb      	subs	r3, r7, r6
 80155d8:	4604      	mov	r4, r0
 80155da:	2800      	cmp	r0, #0
 80155dc:	d1e9      	bne.n	80155b2 <ucdr_deserialize_endian_array_char+0x16>
 80155de:	2301      	movs	r3, #1
 80155e0:	7da8      	ldrb	r0, [r5, #22]
 80155e2:	756b      	strb	r3, [r5, #21]
 80155e4:	4058      	eors	r0, r3
 80155e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ea:	463a      	mov	r2, r7
 80155ec:	68a9      	ldr	r1, [r5, #8]
 80155ee:	4640      	mov	r0, r8
 80155f0:	f002 fe09 	bl	8018206 <memcpy>
 80155f4:	68aa      	ldr	r2, [r5, #8]
 80155f6:	692b      	ldr	r3, [r5, #16]
 80155f8:	443a      	add	r2, r7
 80155fa:	443b      	add	r3, r7
 80155fc:	60aa      	str	r2, [r5, #8]
 80155fe:	612b      	str	r3, [r5, #16]
 8015600:	e7ed      	b.n	80155de <ucdr_deserialize_endian_array_char+0x42>
 8015602:	bf00      	nop

08015604 <ucdr_serialize_array_uint8_t>:
 8015604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015608:	4688      	mov	r8, r1
 801560a:	4611      	mov	r1, r2
 801560c:	4617      	mov	r7, r2
 801560e:	4605      	mov	r5, r0
 8015610:	f7fb f8be 	bl	8010790 <ucdr_check_buffer_available_for>
 8015614:	b9e0      	cbnz	r0, 8015650 <ucdr_serialize_array_uint8_t+0x4c>
 8015616:	463e      	mov	r6, r7
 8015618:	e00b      	b.n	8015632 <ucdr_serialize_array_uint8_t+0x2e>
 801561a:	4441      	add	r1, r8
 801561c:	68a8      	ldr	r0, [r5, #8]
 801561e:	4622      	mov	r2, r4
 8015620:	1b36      	subs	r6, r6, r4
 8015622:	f002 fdf0 	bl	8018206 <memcpy>
 8015626:	68ab      	ldr	r3, [r5, #8]
 8015628:	6928      	ldr	r0, [r5, #16]
 801562a:	4423      	add	r3, r4
 801562c:	4420      	add	r0, r4
 801562e:	60ab      	str	r3, [r5, #8]
 8015630:	6128      	str	r0, [r5, #16]
 8015632:	4631      	mov	r1, r6
 8015634:	2201      	movs	r2, #1
 8015636:	4628      	mov	r0, r5
 8015638:	f7fb f934 	bl	80108a4 <ucdr_check_final_buffer_behavior_array>
 801563c:	1bb9      	subs	r1, r7, r6
 801563e:	4604      	mov	r4, r0
 8015640:	2800      	cmp	r0, #0
 8015642:	d1ea      	bne.n	801561a <ucdr_serialize_array_uint8_t+0x16>
 8015644:	2301      	movs	r3, #1
 8015646:	7da8      	ldrb	r0, [r5, #22]
 8015648:	756b      	strb	r3, [r5, #21]
 801564a:	4058      	eors	r0, r3
 801564c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015650:	463a      	mov	r2, r7
 8015652:	4641      	mov	r1, r8
 8015654:	68a8      	ldr	r0, [r5, #8]
 8015656:	f002 fdd6 	bl	8018206 <memcpy>
 801565a:	68aa      	ldr	r2, [r5, #8]
 801565c:	692b      	ldr	r3, [r5, #16]
 801565e:	443a      	add	r2, r7
 8015660:	443b      	add	r3, r7
 8015662:	60aa      	str	r2, [r5, #8]
 8015664:	612b      	str	r3, [r5, #16]
 8015666:	e7ed      	b.n	8015644 <ucdr_serialize_array_uint8_t+0x40>

08015668 <ucdr_serialize_endian_array_uint8_t>:
 8015668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801566c:	4619      	mov	r1, r3
 801566e:	461f      	mov	r7, r3
 8015670:	4605      	mov	r5, r0
 8015672:	4690      	mov	r8, r2
 8015674:	f7fb f88c 	bl	8010790 <ucdr_check_buffer_available_for>
 8015678:	b9e0      	cbnz	r0, 80156b4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801567a:	463e      	mov	r6, r7
 801567c:	e00b      	b.n	8015696 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801567e:	4441      	add	r1, r8
 8015680:	68a8      	ldr	r0, [r5, #8]
 8015682:	4622      	mov	r2, r4
 8015684:	1b36      	subs	r6, r6, r4
 8015686:	f002 fdbe 	bl	8018206 <memcpy>
 801568a:	68ab      	ldr	r3, [r5, #8]
 801568c:	6928      	ldr	r0, [r5, #16]
 801568e:	4423      	add	r3, r4
 8015690:	4420      	add	r0, r4
 8015692:	60ab      	str	r3, [r5, #8]
 8015694:	6128      	str	r0, [r5, #16]
 8015696:	4631      	mov	r1, r6
 8015698:	2201      	movs	r2, #1
 801569a:	4628      	mov	r0, r5
 801569c:	f7fb f902 	bl	80108a4 <ucdr_check_final_buffer_behavior_array>
 80156a0:	1bb9      	subs	r1, r7, r6
 80156a2:	4604      	mov	r4, r0
 80156a4:	2800      	cmp	r0, #0
 80156a6:	d1ea      	bne.n	801567e <ucdr_serialize_endian_array_uint8_t+0x16>
 80156a8:	2301      	movs	r3, #1
 80156aa:	7da8      	ldrb	r0, [r5, #22]
 80156ac:	756b      	strb	r3, [r5, #21]
 80156ae:	4058      	eors	r0, r3
 80156b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156b4:	463a      	mov	r2, r7
 80156b6:	4641      	mov	r1, r8
 80156b8:	68a8      	ldr	r0, [r5, #8]
 80156ba:	f002 fda4 	bl	8018206 <memcpy>
 80156be:	68aa      	ldr	r2, [r5, #8]
 80156c0:	692b      	ldr	r3, [r5, #16]
 80156c2:	443a      	add	r2, r7
 80156c4:	443b      	add	r3, r7
 80156c6:	60aa      	str	r2, [r5, #8]
 80156c8:	612b      	str	r3, [r5, #16]
 80156ca:	e7ed      	b.n	80156a8 <ucdr_serialize_endian_array_uint8_t+0x40>

080156cc <ucdr_deserialize_array_uint8_t>:
 80156cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156d0:	4688      	mov	r8, r1
 80156d2:	4611      	mov	r1, r2
 80156d4:	4617      	mov	r7, r2
 80156d6:	4605      	mov	r5, r0
 80156d8:	f7fb f85a 	bl	8010790 <ucdr_check_buffer_available_for>
 80156dc:	b9e8      	cbnz	r0, 801571a <ucdr_deserialize_array_uint8_t+0x4e>
 80156de:	463e      	mov	r6, r7
 80156e0:	e00c      	b.n	80156fc <ucdr_deserialize_array_uint8_t+0x30>
 80156e2:	eb08 0003 	add.w	r0, r8, r3
 80156e6:	68a9      	ldr	r1, [r5, #8]
 80156e8:	4622      	mov	r2, r4
 80156ea:	1b36      	subs	r6, r6, r4
 80156ec:	f002 fd8b 	bl	8018206 <memcpy>
 80156f0:	68ab      	ldr	r3, [r5, #8]
 80156f2:	6928      	ldr	r0, [r5, #16]
 80156f4:	4423      	add	r3, r4
 80156f6:	4420      	add	r0, r4
 80156f8:	60ab      	str	r3, [r5, #8]
 80156fa:	6128      	str	r0, [r5, #16]
 80156fc:	4631      	mov	r1, r6
 80156fe:	2201      	movs	r2, #1
 8015700:	4628      	mov	r0, r5
 8015702:	f7fb f8cf 	bl	80108a4 <ucdr_check_final_buffer_behavior_array>
 8015706:	1bbb      	subs	r3, r7, r6
 8015708:	4604      	mov	r4, r0
 801570a:	2800      	cmp	r0, #0
 801570c:	d1e9      	bne.n	80156e2 <ucdr_deserialize_array_uint8_t+0x16>
 801570e:	2301      	movs	r3, #1
 8015710:	7da8      	ldrb	r0, [r5, #22]
 8015712:	756b      	strb	r3, [r5, #21]
 8015714:	4058      	eors	r0, r3
 8015716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801571a:	463a      	mov	r2, r7
 801571c:	68a9      	ldr	r1, [r5, #8]
 801571e:	4640      	mov	r0, r8
 8015720:	f002 fd71 	bl	8018206 <memcpy>
 8015724:	68aa      	ldr	r2, [r5, #8]
 8015726:	692b      	ldr	r3, [r5, #16]
 8015728:	443a      	add	r2, r7
 801572a:	443b      	add	r3, r7
 801572c:	60aa      	str	r2, [r5, #8]
 801572e:	612b      	str	r3, [r5, #16]
 8015730:	e7ed      	b.n	801570e <ucdr_deserialize_array_uint8_t+0x42>
 8015732:	bf00      	nop

08015734 <ucdr_deserialize_endian_array_uint8_t>:
 8015734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015738:	4619      	mov	r1, r3
 801573a:	461f      	mov	r7, r3
 801573c:	4605      	mov	r5, r0
 801573e:	4690      	mov	r8, r2
 8015740:	f7fb f826 	bl	8010790 <ucdr_check_buffer_available_for>
 8015744:	b9e8      	cbnz	r0, 8015782 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8015746:	463e      	mov	r6, r7
 8015748:	e00c      	b.n	8015764 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801574a:	eb08 0003 	add.w	r0, r8, r3
 801574e:	68a9      	ldr	r1, [r5, #8]
 8015750:	4622      	mov	r2, r4
 8015752:	1b36      	subs	r6, r6, r4
 8015754:	f002 fd57 	bl	8018206 <memcpy>
 8015758:	68ab      	ldr	r3, [r5, #8]
 801575a:	6928      	ldr	r0, [r5, #16]
 801575c:	4423      	add	r3, r4
 801575e:	4420      	add	r0, r4
 8015760:	60ab      	str	r3, [r5, #8]
 8015762:	6128      	str	r0, [r5, #16]
 8015764:	4631      	mov	r1, r6
 8015766:	2201      	movs	r2, #1
 8015768:	4628      	mov	r0, r5
 801576a:	f7fb f89b 	bl	80108a4 <ucdr_check_final_buffer_behavior_array>
 801576e:	1bbb      	subs	r3, r7, r6
 8015770:	4604      	mov	r4, r0
 8015772:	2800      	cmp	r0, #0
 8015774:	d1e9      	bne.n	801574a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015776:	2301      	movs	r3, #1
 8015778:	7da8      	ldrb	r0, [r5, #22]
 801577a:	756b      	strb	r3, [r5, #21]
 801577c:	4058      	eors	r0, r3
 801577e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015782:	463a      	mov	r2, r7
 8015784:	68a9      	ldr	r1, [r5, #8]
 8015786:	4640      	mov	r0, r8
 8015788:	f002 fd3d 	bl	8018206 <memcpy>
 801578c:	68aa      	ldr	r2, [r5, #8]
 801578e:	692b      	ldr	r3, [r5, #16]
 8015790:	443a      	add	r2, r7
 8015792:	443b      	add	r3, r7
 8015794:	60aa      	str	r2, [r5, #8]
 8015796:	612b      	str	r3, [r5, #16]
 8015798:	e7ed      	b.n	8015776 <ucdr_deserialize_endian_array_uint8_t+0x42>
 801579a:	bf00      	nop

0801579c <ucdr_serialize_sequence_char>:
 801579c:	b570      	push	{r4, r5, r6, lr}
 801579e:	4615      	mov	r5, r2
 80157a0:	460e      	mov	r6, r1
 80157a2:	7d01      	ldrb	r1, [r0, #20]
 80157a4:	4604      	mov	r4, r0
 80157a6:	f7fa fb49 	bl	800fe3c <ucdr_serialize_endian_uint32_t>
 80157aa:	b90d      	cbnz	r5, 80157b0 <ucdr_serialize_sequence_char+0x14>
 80157ac:	2001      	movs	r0, #1
 80157ae:	bd70      	pop	{r4, r5, r6, pc}
 80157b0:	462b      	mov	r3, r5
 80157b2:	4632      	mov	r2, r6
 80157b4:	7d21      	ldrb	r1, [r4, #20]
 80157b6:	4620      	mov	r0, r4
 80157b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157bc:	f7ff bebc 	b.w	8015538 <ucdr_serialize_endian_array_char>

080157c0 <ucdr_deserialize_sequence_char>:
 80157c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157c4:	461d      	mov	r5, r3
 80157c6:	4616      	mov	r6, r2
 80157c8:	460f      	mov	r7, r1
 80157ca:	461a      	mov	r2, r3
 80157cc:	7d01      	ldrb	r1, [r0, #20]
 80157ce:	4604      	mov	r4, r0
 80157d0:	f7fa fc5c 	bl	801008c <ucdr_deserialize_endian_uint32_t>
 80157d4:	682b      	ldr	r3, [r5, #0]
 80157d6:	429e      	cmp	r6, r3
 80157d8:	d201      	bcs.n	80157de <ucdr_deserialize_sequence_char+0x1e>
 80157da:	2201      	movs	r2, #1
 80157dc:	75a2      	strb	r2, [r4, #22]
 80157de:	b913      	cbnz	r3, 80157e6 <ucdr_deserialize_sequence_char+0x26>
 80157e0:	2001      	movs	r0, #1
 80157e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157e6:	463a      	mov	r2, r7
 80157e8:	7d21      	ldrb	r1, [r4, #20]
 80157ea:	4620      	mov	r0, r4
 80157ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157f0:	f7ff bed4 	b.w	801559c <ucdr_deserialize_endian_array_char>

080157f4 <ucdr_serialize_sequence_uint8_t>:
 80157f4:	b570      	push	{r4, r5, r6, lr}
 80157f6:	4615      	mov	r5, r2
 80157f8:	460e      	mov	r6, r1
 80157fa:	7d01      	ldrb	r1, [r0, #20]
 80157fc:	4604      	mov	r4, r0
 80157fe:	f7fa fb1d 	bl	800fe3c <ucdr_serialize_endian_uint32_t>
 8015802:	b90d      	cbnz	r5, 8015808 <ucdr_serialize_sequence_uint8_t+0x14>
 8015804:	2001      	movs	r0, #1
 8015806:	bd70      	pop	{r4, r5, r6, pc}
 8015808:	462b      	mov	r3, r5
 801580a:	4632      	mov	r2, r6
 801580c:	7d21      	ldrb	r1, [r4, #20]
 801580e:	4620      	mov	r0, r4
 8015810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015814:	f7ff bf28 	b.w	8015668 <ucdr_serialize_endian_array_uint8_t>

08015818 <ucdr_deserialize_sequence_uint8_t>:
 8015818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801581c:	461d      	mov	r5, r3
 801581e:	4616      	mov	r6, r2
 8015820:	460f      	mov	r7, r1
 8015822:	461a      	mov	r2, r3
 8015824:	7d01      	ldrb	r1, [r0, #20]
 8015826:	4604      	mov	r4, r0
 8015828:	f7fa fc30 	bl	801008c <ucdr_deserialize_endian_uint32_t>
 801582c:	682b      	ldr	r3, [r5, #0]
 801582e:	429e      	cmp	r6, r3
 8015830:	d201      	bcs.n	8015836 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8015832:	2201      	movs	r2, #1
 8015834:	75a2      	strb	r2, [r4, #22]
 8015836:	b913      	cbnz	r3, 801583e <ucdr_deserialize_sequence_uint8_t+0x26>
 8015838:	2001      	movs	r0, #1
 801583a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801583e:	463a      	mov	r2, r7
 8015840:	7d21      	ldrb	r1, [r4, #20]
 8015842:	4620      	mov	r0, r4
 8015844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015848:	f7ff bf74 	b.w	8015734 <ucdr_deserialize_endian_array_uint8_t>

0801584c <ucdr_serialize_string>:
 801584c:	b510      	push	{r4, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	4604      	mov	r4, r0
 8015852:	4608      	mov	r0, r1
 8015854:	9101      	str	r1, [sp, #4]
 8015856:	f7ea fd4d 	bl	80002f4 <strlen>
 801585a:	4602      	mov	r2, r0
 801585c:	9901      	ldr	r1, [sp, #4]
 801585e:	4620      	mov	r0, r4
 8015860:	3201      	adds	r2, #1
 8015862:	b002      	add	sp, #8
 8015864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015868:	f7ff bf98 	b.w	801579c <ucdr_serialize_sequence_char>

0801586c <ucdr_deserialize_string>:
 801586c:	b500      	push	{lr}
 801586e:	b083      	sub	sp, #12
 8015870:	ab01      	add	r3, sp, #4
 8015872:	f7ff ffa5 	bl	80157c0 <ucdr_deserialize_sequence_char>
 8015876:	b003      	add	sp, #12
 8015878:	f85d fb04 	ldr.w	pc, [sp], #4

0801587c <get_custom_error>:
 801587c:	4b01      	ldr	r3, [pc, #4]	@ (8015884 <get_custom_error+0x8>)
 801587e:	7818      	ldrb	r0, [r3, #0]
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	24068528 	.word	0x24068528

08015888 <recv_custom_msg>:
 8015888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801588c:	4693      	mov	fp, r2
 801588e:	b089      	sub	sp, #36	@ 0x24
 8015890:	2200      	movs	r2, #0
 8015892:	4604      	mov	r4, r0
 8015894:	468a      	mov	sl, r1
 8015896:	9305      	str	r3, [sp, #20]
 8015898:	f88d 201e 	strb.w	r2, [sp, #30]
 801589c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80158a0:	b322      	cbz	r2, 80158ec <recv_custom_msg+0x64>
 80158a2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80158a6:	f10d 081f 	add.w	r8, sp, #31
 80158aa:	af05      	add	r7, sp, #20
 80158ac:	f10d 061e 	add.w	r6, sp, #30
 80158b0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80158b4:	e002      	b.n	80158bc <recv_custom_msg+0x34>
 80158b6:	9b05      	ldr	r3, [sp, #20]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	dd0f      	ble.n	80158dc <recv_custom_msg+0x54>
 80158bc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80158c0:	4623      	mov	r3, r4
 80158c2:	4622      	mov	r2, r4
 80158c4:	4648      	mov	r0, r9
 80158c6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80158ca:	e9cd 5600 	strd	r5, r6, [sp]
 80158ce:	f001 f8d9 	bl	8016a84 <uxr_read_framed_msg>
 80158d2:	2800      	cmp	r0, #0
 80158d4:	d0ef      	beq.n	80158b6 <recv_custom_msg+0x2e>
 80158d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80158da:	b1b3      	cbz	r3, 801590a <recv_custom_msg+0x82>
 80158dc:	4b0f      	ldr	r3, [pc, #60]	@ (801591c <recv_custom_msg+0x94>)
 80158de:	2000      	movs	r0, #0
 80158e0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80158e4:	701a      	strb	r2, [r3, #0]
 80158e6:	b009      	add	sp, #36	@ 0x24
 80158e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ec:	f10d 021f 	add.w	r2, sp, #31
 80158f0:	4601      	mov	r1, r0
 80158f2:	9200      	str	r2, [sp, #0]
 80158f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80158f8:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80158fc:	47a8      	blx	r5
 80158fe:	2800      	cmp	r0, #0
 8015900:	d0ec      	beq.n	80158dc <recv_custom_msg+0x54>
 8015902:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d1e8      	bne.n	80158dc <recv_custom_msg+0x54>
 801590a:	f8cb 0000 	str.w	r0, [fp]
 801590e:	2001      	movs	r0, #1
 8015910:	f8ca 4000 	str.w	r4, [sl]
 8015914:	b009      	add	sp, #36	@ 0x24
 8015916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801591a:	bf00      	nop
 801591c:	24068528 	.word	0x24068528

08015920 <send_custom_msg>:
 8015920:	b530      	push	{r4, r5, lr}
 8015922:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8015926:	b087      	sub	sp, #28
 8015928:	4614      	mov	r4, r2
 801592a:	b995      	cbnz	r5, 8015952 <send_custom_msg+0x32>
 801592c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8015930:	f10d 0317 	add.w	r3, sp, #23
 8015934:	47a8      	blx	r5
 8015936:	1e03      	subs	r3, r0, #0
 8015938:	bf18      	it	ne
 801593a:	2301      	movne	r3, #1
 801593c:	42a0      	cmp	r0, r4
 801593e:	bf18      	it	ne
 8015940:	2300      	movne	r3, #0
 8015942:	b91b      	cbnz	r3, 801594c <send_custom_msg+0x2c>
 8015944:	4a0a      	ldr	r2, [pc, #40]	@ (8015970 <send_custom_msg+0x50>)
 8015946:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801594a:	7011      	strb	r1, [r2, #0]
 801594c:	4618      	mov	r0, r3
 801594e:	b007      	add	sp, #28
 8015950:	bd30      	pop	{r4, r5, pc}
 8015952:	460b      	mov	r3, r1
 8015954:	2200      	movs	r2, #0
 8015956:	f10d 0117 	add.w	r1, sp, #23
 801595a:	9400      	str	r4, [sp, #0]
 801595c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015960:	4602      	mov	r2, r0
 8015962:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8015966:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801596a:	f000 fead 	bl	80166c8 <uxr_write_framed_msg>
 801596e:	e7e2      	b.n	8015936 <send_custom_msg+0x16>
 8015970:	24068528 	.word	0x24068528

08015974 <uxr_set_custom_transport_callbacks>:
 8015974:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8015978:	9901      	ldr	r1, [sp, #4]
 801597a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801597e:	9b00      	ldr	r3, [sp, #0]
 8015980:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8015984:	4770      	bx	lr
 8015986:	bf00      	nop

08015988 <uxr_init_custom_transport>:
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801598e:	b303      	cbz	r3, 80159d2 <uxr_init_custom_transport+0x4a>
 8015990:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8015994:	4604      	mov	r4, r0
 8015996:	b1e2      	cbz	r2, 80159d2 <uxr_init_custom_transport+0x4a>
 8015998:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801599c:	b1ca      	cbz	r2, 80159d2 <uxr_init_custom_transport+0x4a>
 801599e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80159a2:	b1b2      	cbz	r2, 80159d2 <uxr_init_custom_transport+0x4a>
 80159a4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80159a8:	4798      	blx	r3
 80159aa:	4605      	mov	r5, r0
 80159ac:	b188      	cbz	r0, 80159d2 <uxr_init_custom_transport+0x4a>
 80159ae:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80159b2:	b98b      	cbnz	r3, 80159d8 <uxr_init_custom_transport+0x50>
 80159b4:	4b0b      	ldr	r3, [pc, #44]	@ (80159e4 <uxr_init_custom_transport+0x5c>)
 80159b6:	4628      	mov	r0, r5
 80159b8:	490b      	ldr	r1, [pc, #44]	@ (80159e8 <uxr_init_custom_transport+0x60>)
 80159ba:	4a0c      	ldr	r2, [pc, #48]	@ (80159ec <uxr_init_custom_transport+0x64>)
 80159bc:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80159c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80159c4:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80159c8:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80159cc:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80159d0:	bd38      	pop	{r3, r4, r5, pc}
 80159d2:	2500      	movs	r5, #0
 80159d4:	4628      	mov	r0, r5
 80159d6:	bd38      	pop	{r3, r4, r5, pc}
 80159d8:	2100      	movs	r1, #0
 80159da:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80159de:	f000 fe6d 	bl	80166bc <uxr_init_framing_io>
 80159e2:	e7e7      	b.n	80159b4 <uxr_init_custom_transport+0x2c>
 80159e4:	08015889 	.word	0x08015889
 80159e8:	08015921 	.word	0x08015921
 80159ec:	0801587d 	.word	0x0801587d

080159f0 <uxr_close_custom_transport>:
 80159f0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80159f4:	4718      	bx	r3
 80159f6:	bf00      	nop

080159f8 <uxr_init_input_best_effort_stream>:
 80159f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80159fc:	8003      	strh	r3, [r0, #0]
 80159fe:	4770      	bx	lr

08015a00 <uxr_reset_input_best_effort_stream>:
 8015a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015a04:	8003      	strh	r3, [r0, #0]
 8015a06:	4770      	bx	lr

08015a08 <uxr_receive_best_effort_message>:
 8015a08:	b538      	push	{r3, r4, r5, lr}
 8015a0a:	4604      	mov	r4, r0
 8015a0c:	8800      	ldrh	r0, [r0, #0]
 8015a0e:	460d      	mov	r5, r1
 8015a10:	f000 fe3c 	bl	801668c <uxr_seq_num_cmp>
 8015a14:	4603      	mov	r3, r0
 8015a16:	0fc0      	lsrs	r0, r0, #31
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	bfb8      	it	lt
 8015a1c:	8025      	strhlt	r5, [r4, #0]
 8015a1e:	bd38      	pop	{r3, r4, r5, pc}

08015a20 <on_full_input_buffer>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	460c      	mov	r4, r1
 8015a24:	4605      	mov	r5, r0
 8015a26:	8908      	ldrh	r0, [r1, #8]
 8015a28:	682b      	ldr	r3, [r5, #0]
 8015a2a:	7d26      	ldrb	r6, [r4, #20]
 8015a2c:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015a30:	fbb2 f2f0 	udiv	r2, r2, r0
 8015a34:	eba3 0c01 	sub.w	ip, r3, r1
 8015a38:	fbbc fcf2 	udiv	ip, ip, r2
 8015a3c:	f10c 0c01 	add.w	ip, ip, #1
 8015a40:	fa1f f38c 	uxth.w	r3, ip
 8015a44:	fbb3 fcf0 	udiv	ip, r3, r0
 8015a48:	fb00 331c 	mls	r3, r0, ip, r3
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	fb02 f303 	mul.w	r3, r2, r3
 8015a52:	1d18      	adds	r0, r3, #4
 8015a54:	4408      	add	r0, r1
 8015a56:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015a5a:	b116      	cbz	r6, 8015a62 <on_full_input_buffer+0x42>
 8015a5c:	2600      	movs	r6, #0
 8015a5e:	f840 6c04 	str.w	r6, [r0, #-4]
 8015a62:	2a03      	cmp	r2, #3
 8015a64:	d801      	bhi.n	8015a6a <on_full_input_buffer+0x4a>
 8015a66:	2001      	movs	r0, #1
 8015a68:	bd70      	pop	{r4, r5, r6, pc}
 8015a6a:	3308      	adds	r3, #8
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	3a04      	subs	r2, #4
 8015a70:	4419      	add	r1, r3
 8015a72:	692b      	ldr	r3, [r5, #16]
 8015a74:	f7fa fed8 	bl	8010828 <ucdr_init_buffer_origin>
 8015a78:	4628      	mov	r0, r5
 8015a7a:	4622      	mov	r2, r4
 8015a7c:	4902      	ldr	r1, [pc, #8]	@ (8015a88 <on_full_input_buffer+0x68>)
 8015a7e:	f7fa feaf 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 8015a82:	2000      	movs	r0, #0
 8015a84:	bd70      	pop	{r4, r5, r6, pc}
 8015a86:	bf00      	nop
 8015a88:	08015a21 	.word	0x08015a21

08015a8c <uxr_init_input_reliable_stream>:
 8015a8c:	b510      	push	{r4, lr}
 8015a8e:	e9c0 1200 	strd	r1, r2, [r0]
 8015a92:	2400      	movs	r4, #0
 8015a94:	9a02      	ldr	r2, [sp, #8]
 8015a96:	8103      	strh	r3, [r0, #8]
 8015a98:	6102      	str	r2, [r0, #16]
 8015a9a:	7504      	strb	r4, [r0, #20]
 8015a9c:	b1c3      	cbz	r3, 8015ad0 <uxr_init_input_reliable_stream+0x44>
 8015a9e:	600c      	str	r4, [r1, #0]
 8015aa0:	8901      	ldrh	r1, [r0, #8]
 8015aa2:	2901      	cmp	r1, #1
 8015aa4:	d914      	bls.n	8015ad0 <uxr_init_input_reliable_stream+0x44>
 8015aa6:	f04f 0c01 	mov.w	ip, #1
 8015aaa:	6843      	ldr	r3, [r0, #4]
 8015aac:	f10c 0e01 	add.w	lr, ip, #1
 8015ab0:	fbbc f2f1 	udiv	r2, ip, r1
 8015ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8015ab8:	fb01 c212 	mls	r2, r1, r2, ip
 8015abc:	fa1f fc8e 	uxth.w	ip, lr
 8015ac0:	b292      	uxth	r2, r2
 8015ac2:	fb02 f303 	mul.w	r3, r2, r3
 8015ac6:	6802      	ldr	r2, [r0, #0]
 8015ac8:	50d4      	str	r4, [r2, r3]
 8015aca:	8901      	ldrh	r1, [r0, #8]
 8015acc:	4561      	cmp	r1, ip
 8015ace:	d8ec      	bhi.n	8015aaa <uxr_init_input_reliable_stream+0x1e>
 8015ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015ad4:	60c3      	str	r3, [r0, #12]
 8015ad6:	bd10      	pop	{r4, pc}

08015ad8 <uxr_reset_input_reliable_stream>:
 8015ad8:	8901      	ldrh	r1, [r0, #8]
 8015ada:	b1d9      	cbz	r1, 8015b14 <uxr_reset_input_reliable_stream+0x3c>
 8015adc:	b510      	push	{r4, lr}
 8015ade:	f04f 0e00 	mov.w	lr, #0
 8015ae2:	46f4      	mov	ip, lr
 8015ae4:	4674      	mov	r4, lr
 8015ae6:	6843      	ldr	r3, [r0, #4]
 8015ae8:	f10e 0e01 	add.w	lr, lr, #1
 8015aec:	fbbc f2f1 	udiv	r2, ip, r1
 8015af0:	fbb3 f3f1 	udiv	r3, r3, r1
 8015af4:	fb01 c212 	mls	r2, r1, r2, ip
 8015af8:	fa1f fc8e 	uxth.w	ip, lr
 8015afc:	b292      	uxth	r2, r2
 8015afe:	fb02 f303 	mul.w	r3, r2, r3
 8015b02:	6802      	ldr	r2, [r0, #0]
 8015b04:	50d4      	str	r4, [r2, r3]
 8015b06:	8901      	ldrh	r1, [r0, #8]
 8015b08:	4561      	cmp	r1, ip
 8015b0a:	d8ec      	bhi.n	8015ae6 <uxr_reset_input_reliable_stream+0xe>
 8015b0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015b10:	60c3      	str	r3, [r0, #12]
 8015b12:	bd10      	pop	{r4, pc}
 8015b14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015b18:	60c3      	str	r3, [r0, #12]
 8015b1a:	4770      	bx	lr

08015b1c <uxr_receive_reliable_message>:
 8015b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b20:	4604      	mov	r4, r0
 8015b22:	460d      	mov	r5, r1
 8015b24:	8901      	ldrh	r1, [r0, #8]
 8015b26:	4617      	mov	r7, r2
 8015b28:	8980      	ldrh	r0, [r0, #12]
 8015b2a:	4698      	mov	r8, r3
 8015b2c:	f000 fda6 	bl	801667c <uxr_seq_num_add>
 8015b30:	4629      	mov	r1, r5
 8015b32:	4606      	mov	r6, r0
 8015b34:	89a0      	ldrh	r0, [r4, #12]
 8015b36:	f000 fda9 	bl	801668c <uxr_seq_num_cmp>
 8015b3a:	2800      	cmp	r0, #0
 8015b3c:	db0a      	blt.n	8015b54 <uxr_receive_reliable_message+0x38>
 8015b3e:	2600      	movs	r6, #0
 8015b40:	4629      	mov	r1, r5
 8015b42:	89e0      	ldrh	r0, [r4, #14]
 8015b44:	f000 fda2 	bl	801668c <uxr_seq_num_cmp>
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	da00      	bge.n	8015b4e <uxr_receive_reliable_message+0x32>
 8015b4c:	81e5      	strh	r5, [r4, #14]
 8015b4e:	4630      	mov	r0, r6
 8015b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b54:	4630      	mov	r0, r6
 8015b56:	4629      	mov	r1, r5
 8015b58:	f000 fd98 	bl	801668c <uxr_seq_num_cmp>
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	dbee      	blt.n	8015b3e <uxr_receive_reliable_message+0x22>
 8015b60:	6923      	ldr	r3, [r4, #16]
 8015b62:	4638      	mov	r0, r7
 8015b64:	4798      	blx	r3
 8015b66:	4681      	mov	r9, r0
 8015b68:	2101      	movs	r1, #1
 8015b6a:	89a0      	ldrh	r0, [r4, #12]
 8015b6c:	f000 fd86 	bl	801667c <uxr_seq_num_add>
 8015b70:	f1b9 0f00 	cmp.w	r9, #0
 8015b74:	bf08      	it	eq
 8015b76:	4285      	cmpeq	r5, r0
 8015b78:	bf0c      	ite	eq
 8015b7a:	2601      	moveq	r6, #1
 8015b7c:	2600      	movne	r6, #0
 8015b7e:	d104      	bne.n	8015b8a <uxr_receive_reliable_message+0x6e>
 8015b80:	2300      	movs	r3, #0
 8015b82:	9a08      	ldr	r2, [sp, #32]
 8015b84:	81a0      	strh	r0, [r4, #12]
 8015b86:	7013      	strb	r3, [r2, #0]
 8015b88:	e7da      	b.n	8015b40 <uxr_receive_reliable_message+0x24>
 8015b8a:	8922      	ldrh	r2, [r4, #8]
 8015b8c:	6863      	ldr	r3, [r4, #4]
 8015b8e:	fbb5 f0f2 	udiv	r0, r5, r2
 8015b92:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b96:	fb02 5010 	mls	r0, r2, r0, r5
 8015b9a:	b280      	uxth	r0, r0
 8015b9c:	fb03 f000 	mul.w	r0, r3, r0
 8015ba0:	6823      	ldr	r3, [r4, #0]
 8015ba2:	3004      	adds	r0, #4
 8015ba4:	4418      	add	r0, r3
 8015ba6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d1c7      	bne.n	8015b3e <uxr_receive_reliable_message+0x22>
 8015bae:	4639      	mov	r1, r7
 8015bb0:	4642      	mov	r2, r8
 8015bb2:	f002 fb28 	bl	8018206 <memcpy>
 8015bb6:	8921      	ldrh	r1, [r4, #8]
 8015bb8:	6863      	ldr	r3, [r4, #4]
 8015bba:	fbb5 f2f1 	udiv	r2, r5, r1
 8015bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8015bc2:	fb01 5212 	mls	r2, r1, r2, r5
 8015bc6:	b292      	uxth	r2, r2
 8015bc8:	fb02 f303 	mul.w	r3, r2, r3
 8015bcc:	6822      	ldr	r2, [r4, #0]
 8015bce:	f842 8003 	str.w	r8, [r2, r3]
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	9a08      	ldr	r2, [sp, #32]
 8015bd6:	7013      	strb	r3, [r2, #0]
 8015bd8:	f1b9 0f00 	cmp.w	r9, #0
 8015bdc:	d0af      	beq.n	8015b3e <uxr_receive_reliable_message+0x22>
 8015bde:	89a6      	ldrh	r6, [r4, #12]
 8015be0:	2101      	movs	r1, #1
 8015be2:	4630      	mov	r0, r6
 8015be4:	f000 fd4a 	bl	801667c <uxr_seq_num_add>
 8015be8:	8921      	ldrh	r1, [r4, #8]
 8015bea:	6863      	ldr	r3, [r4, #4]
 8015bec:	4606      	mov	r6, r0
 8015bee:	fbb0 f2f1 	udiv	r2, r0, r1
 8015bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8015bf6:	fb01 0212 	mls	r2, r1, r2, r0
 8015bfa:	6820      	ldr	r0, [r4, #0]
 8015bfc:	b292      	uxth	r2, r2
 8015bfe:	fb02 f303 	mul.w	r3, r2, r3
 8015c02:	3304      	adds	r3, #4
 8015c04:	4418      	add	r0, r3
 8015c06:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d097      	beq.n	8015b3e <uxr_receive_reliable_message+0x22>
 8015c0e:	6923      	ldr	r3, [r4, #16]
 8015c10:	4798      	blx	r3
 8015c12:	2802      	cmp	r0, #2
 8015c14:	d002      	beq.n	8015c1c <uxr_receive_reliable_message+0x100>
 8015c16:	2801      	cmp	r0, #1
 8015c18:	d0e2      	beq.n	8015be0 <uxr_receive_reliable_message+0xc4>
 8015c1a:	e790      	b.n	8015b3e <uxr_receive_reliable_message+0x22>
 8015c1c:	2601      	movs	r6, #1
 8015c1e:	e78f      	b.n	8015b40 <uxr_receive_reliable_message+0x24>

08015c20 <uxr_next_input_reliable_buffer_available>:
 8015c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c24:	4604      	mov	r4, r0
 8015c26:	460f      	mov	r7, r1
 8015c28:	8980      	ldrh	r0, [r0, #12]
 8015c2a:	2101      	movs	r1, #1
 8015c2c:	4690      	mov	r8, r2
 8015c2e:	f000 fd25 	bl	801667c <uxr_seq_num_add>
 8015c32:	8922      	ldrh	r2, [r4, #8]
 8015c34:	6866      	ldr	r6, [r4, #4]
 8015c36:	fbb0 f3f2 	udiv	r3, r0, r2
 8015c3a:	fbb6 f6f2 	udiv	r6, r6, r2
 8015c3e:	fb02 0313 	mls	r3, r2, r3, r0
 8015c42:	b29b      	uxth	r3, r3
 8015c44:	fb03 f606 	mul.w	r6, r3, r6
 8015c48:	6823      	ldr	r3, [r4, #0]
 8015c4a:	3604      	adds	r6, #4
 8015c4c:	441e      	add	r6, r3
 8015c4e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015c52:	f1b9 0f00 	cmp.w	r9, #0
 8015c56:	d023      	beq.n	8015ca0 <uxr_next_input_reliable_buffer_available+0x80>
 8015c58:	4605      	mov	r5, r0
 8015c5a:	6923      	ldr	r3, [r4, #16]
 8015c5c:	4630      	mov	r0, r6
 8015c5e:	4798      	blx	r3
 8015c60:	4682      	mov	sl, r0
 8015c62:	b300      	cbz	r0, 8015ca6 <uxr_next_input_reliable_buffer_available+0x86>
 8015c64:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015c68:	2101      	movs	r1, #1
 8015c6a:	4650      	mov	r0, sl
 8015c6c:	f000 fd06 	bl	801667c <uxr_seq_num_add>
 8015c70:	8921      	ldrh	r1, [r4, #8]
 8015c72:	4682      	mov	sl, r0
 8015c74:	6863      	ldr	r3, [r4, #4]
 8015c76:	6820      	ldr	r0, [r4, #0]
 8015c78:	fbba f2f1 	udiv	r2, sl, r1
 8015c7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015c80:	fb01 a212 	mls	r2, r1, r2, sl
 8015c84:	b292      	uxth	r2, r2
 8015c86:	fb02 f303 	mul.w	r3, r2, r3
 8015c8a:	3304      	adds	r3, #4
 8015c8c:	4418      	add	r0, r3
 8015c8e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015c92:	b12b      	cbz	r3, 8015ca0 <uxr_next_input_reliable_buffer_available+0x80>
 8015c94:	6923      	ldr	r3, [r4, #16]
 8015c96:	4798      	blx	r3
 8015c98:	2802      	cmp	r0, #2
 8015c9a:	d01b      	beq.n	8015cd4 <uxr_next_input_reliable_buffer_available+0xb4>
 8015c9c:	2801      	cmp	r0, #1
 8015c9e:	d0e3      	beq.n	8015c68 <uxr_next_input_reliable_buffer_available+0x48>
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ca6:	464a      	mov	r2, r9
 8015ca8:	4631      	mov	r1, r6
 8015caa:	4638      	mov	r0, r7
 8015cac:	f7fa fdc4 	bl	8010838 <ucdr_init_buffer>
 8015cb0:	8921      	ldrh	r1, [r4, #8]
 8015cb2:	6863      	ldr	r3, [r4, #4]
 8015cb4:	2001      	movs	r0, #1
 8015cb6:	fbb5 f2f1 	udiv	r2, r5, r1
 8015cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8015cbe:	fb01 5212 	mls	r2, r1, r2, r5
 8015cc2:	b292      	uxth	r2, r2
 8015cc4:	fb02 f303 	mul.w	r3, r2, r3
 8015cc8:	6822      	ldr	r2, [r4, #0]
 8015cca:	f842 a003 	str.w	sl, [r2, r3]
 8015cce:	81a5      	strh	r5, [r4, #12]
 8015cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cd4:	8920      	ldrh	r0, [r4, #8]
 8015cd6:	eb06 0108 	add.w	r1, r6, r8
 8015cda:	6863      	ldr	r3, [r4, #4]
 8015cdc:	eba9 0208 	sub.w	r2, r9, r8
 8015ce0:	fbb5 f6f0 	udiv	r6, r5, r0
 8015ce4:	fbb3 f3f0 	udiv	r3, r3, r0
 8015ce8:	fb00 5516 	mls	r5, r0, r6, r5
 8015cec:	2000      	movs	r0, #0
 8015cee:	b2ad      	uxth	r5, r5
 8015cf0:	fb03 f505 	mul.w	r5, r3, r5
 8015cf4:	6823      	ldr	r3, [r4, #0]
 8015cf6:	5158      	str	r0, [r3, r5]
 8015cf8:	4638      	mov	r0, r7
 8015cfa:	f7fa fd9d 	bl	8010838 <ucdr_init_buffer>
 8015cfe:	4638      	mov	r0, r7
 8015d00:	4622      	mov	r2, r4
 8015d02:	4903      	ldr	r1, [pc, #12]	@ (8015d10 <uxr_next_input_reliable_buffer_available+0xf0>)
 8015d04:	f7fa fd6c 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 8015d08:	2001      	movs	r0, #1
 8015d0a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015d0e:	e7c8      	b.n	8015ca2 <uxr_next_input_reliable_buffer_available+0x82>
 8015d10:	08015a21 	.word	0x08015a21

08015d14 <uxr_process_heartbeat>:
 8015d14:	b538      	push	{r3, r4, r5, lr}
 8015d16:	4611      	mov	r1, r2
 8015d18:	4604      	mov	r4, r0
 8015d1a:	89c0      	ldrh	r0, [r0, #14]
 8015d1c:	4615      	mov	r5, r2
 8015d1e:	f000 fcb5 	bl	801668c <uxr_seq_num_cmp>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	bfb8      	it	lt
 8015d26:	81e5      	strhlt	r5, [r4, #14]
 8015d28:	bd38      	pop	{r3, r4, r5, pc}
 8015d2a:	bf00      	nop

08015d2c <uxr_compute_acknack>:
 8015d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d30:	8903      	ldrh	r3, [r0, #8]
 8015d32:	4604      	mov	r4, r0
 8015d34:	460f      	mov	r7, r1
 8015d36:	8985      	ldrh	r5, [r0, #12]
 8015d38:	b1db      	cbz	r3, 8015d72 <uxr_compute_acknack+0x46>
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	2601      	movs	r6, #1
 8015d3e:	e004      	b.n	8015d4a <uxr_compute_acknack+0x1e>
 8015d40:	4566      	cmp	r6, ip
 8015d42:	f106 0601 	add.w	r6, r6, #1
 8015d46:	d214      	bcs.n	8015d72 <uxr_compute_acknack+0x46>
 8015d48:	89a0      	ldrh	r0, [r4, #12]
 8015d4a:	b2b1      	uxth	r1, r6
 8015d4c:	f000 fc96 	bl	801667c <uxr_seq_num_add>
 8015d50:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015d54:	fbb0 f2fc 	udiv	r2, r0, ip
 8015d58:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015d5c:	fb0c 0212 	mls	r2, ip, r2, r0
 8015d60:	fbb3 f3fc 	udiv	r3, r3, ip
 8015d64:	b292      	uxth	r2, r2
 8015d66:	fb02 f303 	mul.w	r3, r2, r3
 8015d6a:	58cb      	ldr	r3, [r1, r3]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d1e7      	bne.n	8015d40 <uxr_compute_acknack+0x14>
 8015d70:	4605      	mov	r5, r0
 8015d72:	803d      	strh	r5, [r7, #0]
 8015d74:	2101      	movs	r1, #1
 8015d76:	89e6      	ldrh	r6, [r4, #14]
 8015d78:	4628      	mov	r0, r5
 8015d7a:	f000 fc83 	bl	8016684 <uxr_seq_num_sub>
 8015d7e:	4601      	mov	r1, r0
 8015d80:	4630      	mov	r0, r6
 8015d82:	f000 fc7f 	bl	8016684 <uxr_seq_num_sub>
 8015d86:	4606      	mov	r6, r0
 8015d88:	b328      	cbz	r0, 8015dd6 <uxr_compute_acknack+0xaa>
 8015d8a:	f04f 0900 	mov.w	r9, #0
 8015d8e:	f04f 0801 	mov.w	r8, #1
 8015d92:	464d      	mov	r5, r9
 8015d94:	fa1f f189 	uxth.w	r1, r9
 8015d98:	8838      	ldrh	r0, [r7, #0]
 8015d9a:	f000 fc6f 	bl	801667c <uxr_seq_num_add>
 8015d9e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015da2:	6861      	ldr	r1, [r4, #4]
 8015da4:	fa08 fe09 	lsl.w	lr, r8, r9
 8015da8:	6822      	ldr	r2, [r4, #0]
 8015daa:	f109 0901 	add.w	r9, r9, #1
 8015dae:	ea4e 0e05 	orr.w	lr, lr, r5
 8015db2:	fbb0 f3fc 	udiv	r3, r0, ip
 8015db6:	fbb1 f1fc 	udiv	r1, r1, ip
 8015dba:	fb03 001c 	mls	r0, r3, ip, r0
 8015dbe:	b283      	uxth	r3, r0
 8015dc0:	fb01 f303 	mul.w	r3, r1, r3
 8015dc4:	58d3      	ldr	r3, [r2, r3]
 8015dc6:	b90b      	cbnz	r3, 8015dcc <uxr_compute_acknack+0xa0>
 8015dc8:	fa1f f58e 	uxth.w	r5, lr
 8015dcc:	454e      	cmp	r6, r9
 8015dce:	d1e1      	bne.n	8015d94 <uxr_compute_acknack+0x68>
 8015dd0:	4628      	mov	r0, r5
 8015dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dd6:	4605      	mov	r5, r0
 8015dd8:	4628      	mov	r0, r5
 8015dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dde:	bf00      	nop

08015de0 <uxr_init_output_best_effort_stream>:
 8015de0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015de4:	6001      	str	r1, [r0, #0]
 8015de6:	7303      	strb	r3, [r0, #12]
 8015de8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015dec:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015df0:	4770      	bx	lr
 8015df2:	bf00      	nop

08015df4 <uxr_reset_output_best_effort_stream>:
 8015df4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015df8:	7b03      	ldrb	r3, [r0, #12]
 8015dfa:	81c2      	strh	r2, [r0, #14]
 8015dfc:	6043      	str	r3, [r0, #4]
 8015dfe:	4770      	bx	lr

08015e00 <uxr_prepare_best_effort_buffer_to_write>:
 8015e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e02:	4604      	mov	r4, r0
 8015e04:	b083      	sub	sp, #12
 8015e06:	6840      	ldr	r0, [r0, #4]
 8015e08:	460d      	mov	r5, r1
 8015e0a:	4616      	mov	r6, r2
 8015e0c:	f7fc f942 	bl	8012094 <uxr_submessage_padding>
 8015e10:	6863      	ldr	r3, [r4, #4]
 8015e12:	4418      	add	r0, r3
 8015e14:	68a3      	ldr	r3, [r4, #8]
 8015e16:	1942      	adds	r2, r0, r5
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	bf2c      	ite	cs
 8015e1c:	2701      	movcs	r7, #1
 8015e1e:	2700      	movcc	r7, #0
 8015e20:	d202      	bcs.n	8015e28 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015e22:	4638      	mov	r0, r7
 8015e24:	b003      	add	sp, #12
 8015e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e28:	9000      	str	r0, [sp, #0]
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	4630      	mov	r0, r6
 8015e2e:	6821      	ldr	r1, [r4, #0]
 8015e30:	f7fa fcf0 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8015e34:	6861      	ldr	r1, [r4, #4]
 8015e36:	4638      	mov	r0, r7
 8015e38:	4429      	add	r1, r5
 8015e3a:	6061      	str	r1, [r4, #4]
 8015e3c:	b003      	add	sp, #12
 8015e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015e40 <uxr_prepare_best_effort_buffer_to_send>:
 8015e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e44:	4604      	mov	r4, r0
 8015e46:	461d      	mov	r5, r3
 8015e48:	6840      	ldr	r0, [r0, #4]
 8015e4a:	7b23      	ldrb	r3, [r4, #12]
 8015e4c:	4298      	cmp	r0, r3
 8015e4e:	bf8c      	ite	hi
 8015e50:	2601      	movhi	r6, #1
 8015e52:	2600      	movls	r6, #0
 8015e54:	d802      	bhi.n	8015e5c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015e56:	4630      	mov	r0, r6
 8015e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e5c:	4688      	mov	r8, r1
 8015e5e:	89e0      	ldrh	r0, [r4, #14]
 8015e60:	2101      	movs	r1, #1
 8015e62:	4617      	mov	r7, r2
 8015e64:	f000 fc0a 	bl	801667c <uxr_seq_num_add>
 8015e68:	6823      	ldr	r3, [r4, #0]
 8015e6a:	81e0      	strh	r0, [r4, #14]
 8015e6c:	8028      	strh	r0, [r5, #0]
 8015e6e:	4630      	mov	r0, r6
 8015e70:	f8c8 3000 	str.w	r3, [r8]
 8015e74:	6863      	ldr	r3, [r4, #4]
 8015e76:	603b      	str	r3, [r7, #0]
 8015e78:	7b23      	ldrb	r3, [r4, #12]
 8015e7a:	6063      	str	r3, [r4, #4]
 8015e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e80 <on_full_output_buffer>:
 8015e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e82:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8015e86:	460c      	mov	r4, r1
 8015e88:	6803      	ldr	r3, [r0, #0]
 8015e8a:	4605      	mov	r5, r0
 8015e8c:	7b26      	ldrb	r6, [r4, #12]
 8015e8e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015e92:	fbb2 f2fc 	udiv	r2, r2, ip
 8015e96:	eba3 0e01 	sub.w	lr, r3, r1
 8015e9a:	6903      	ldr	r3, [r0, #16]
 8015e9c:	fbbe fef2 	udiv	lr, lr, r2
 8015ea0:	f10e 0e01 	add.w	lr, lr, #1
 8015ea4:	fa1f fe8e 	uxth.w	lr, lr
 8015ea8:	fbbe f7fc 	udiv	r7, lr, ip
 8015eac:	fb0c ec17 	mls	ip, ip, r7, lr
 8015eb0:	fa1f fc8c 	uxth.w	ip, ip
 8015eb4:	fb02 fc0c 	mul.w	ip, r2, ip
 8015eb8:	f851 200c 	ldr.w	r2, [r1, ip]
 8015ebc:	44b4      	add	ip, r6
 8015ebe:	1b92      	subs	r2, r2, r6
 8015ec0:	f10c 0c08 	add.w	ip, ip, #8
 8015ec4:	3a04      	subs	r2, #4
 8015ec6:	4461      	add	r1, ip
 8015ec8:	f7fa fcae 	bl	8010828 <ucdr_init_buffer_origin>
 8015ecc:	4628      	mov	r0, r5
 8015ece:	4622      	mov	r2, r4
 8015ed0:	4902      	ldr	r1, [pc, #8]	@ (8015edc <on_full_output_buffer+0x5c>)
 8015ed2:	f7fa fc85 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 8015ed6:	2000      	movs	r0, #0
 8015ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015eda:	bf00      	nop
 8015edc:	08015e81 	.word	0x08015e81

08015ee0 <uxr_init_output_reliable_stream>:
 8015ee0:	b530      	push	{r4, r5, lr}
 8015ee2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8015ee6:	8103      	strh	r3, [r0, #8]
 8015ee8:	7304      	strb	r4, [r0, #12]
 8015eea:	e9c0 1200 	strd	r1, r2, [r0]
 8015eee:	b1e3      	cbz	r3, 8015f2a <uxr_init_output_reliable_stream+0x4a>
 8015ef0:	600c      	str	r4, [r1, #0]
 8015ef2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015ef6:	f1bc 0f01 	cmp.w	ip, #1
 8015efa:	d916      	bls.n	8015f2a <uxr_init_output_reliable_stream+0x4a>
 8015efc:	f04f 0e01 	mov.w	lr, #1
 8015f00:	6843      	ldr	r3, [r0, #4]
 8015f02:	f10e 0501 	add.w	r5, lr, #1
 8015f06:	7b04      	ldrb	r4, [r0, #12]
 8015f08:	6801      	ldr	r1, [r0, #0]
 8015f0a:	fbbe f2fc 	udiv	r2, lr, ip
 8015f0e:	fbb3 f3fc 	udiv	r3, r3, ip
 8015f12:	fb0c e212 	mls	r2, ip, r2, lr
 8015f16:	fa1f fe85 	uxth.w	lr, r5
 8015f1a:	b292      	uxth	r2, r2
 8015f1c:	fb02 f303 	mul.w	r3, r2, r3
 8015f20:	50cc      	str	r4, [r1, r3]
 8015f22:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015f26:	45f4      	cmp	ip, lr
 8015f28:	d8ea      	bhi.n	8015f00 <uxr_init_output_reliable_stream+0x20>
 8015f2a:	4b07      	ldr	r3, [pc, #28]	@ (8015f48 <uxr_init_output_reliable_stream+0x68>)
 8015f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015f30:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015f34:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8015f38:	f8c0 300e 	str.w	r3, [r0, #14]
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	8242      	strh	r2, [r0, #18]
 8015f40:	8403      	strh	r3, [r0, #32]
 8015f42:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8015f46:	bd30      	pop	{r4, r5, pc}
 8015f48:	ffff0000 	.word	0xffff0000
 8015f4c:	00000000 	.word	0x00000000

08015f50 <uxr_reset_output_reliable_stream>:
 8015f50:	8901      	ldrh	r1, [r0, #8]
 8015f52:	b510      	push	{r4, lr}
 8015f54:	b1b1      	cbz	r1, 8015f84 <uxr_reset_output_reliable_stream+0x34>
 8015f56:	f04f 0e00 	mov.w	lr, #0
 8015f5a:	46f4      	mov	ip, lr
 8015f5c:	6843      	ldr	r3, [r0, #4]
 8015f5e:	f10e 0e01 	add.w	lr, lr, #1
 8015f62:	7b04      	ldrb	r4, [r0, #12]
 8015f64:	fbbc f2f1 	udiv	r2, ip, r1
 8015f68:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f6c:	fb01 c212 	mls	r2, r1, r2, ip
 8015f70:	fa1f fc8e 	uxth.w	ip, lr
 8015f74:	b292      	uxth	r2, r2
 8015f76:	fb02 f303 	mul.w	r3, r2, r3
 8015f7a:	6802      	ldr	r2, [r0, #0]
 8015f7c:	50d4      	str	r4, [r2, r3]
 8015f7e:	8901      	ldrh	r1, [r0, #8]
 8015f80:	4561      	cmp	r1, ip
 8015f82:	d8eb      	bhi.n	8015f5c <uxr_reset_output_reliable_stream+0xc>
 8015f84:	4b08      	ldr	r3, [pc, #32]	@ (8015fa8 <uxr_reset_output_reliable_stream+0x58>)
 8015f86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015f8a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8015fa0 <uxr_reset_output_reliable_stream+0x50>
 8015f8e:	f8c0 300e 	str.w	r3, [r0, #14]
 8015f92:	2300      	movs	r3, #0
 8015f94:	8242      	strh	r2, [r0, #18]
 8015f96:	8403      	strh	r3, [r0, #32]
 8015f98:	ed80 7b06 	vstr	d7, [r0, #24]
 8015f9c:	bd10      	pop	{r4, pc}
 8015f9e:	bf00      	nop
 8015fa0:	ffffffff 	.word	0xffffffff
 8015fa4:	7fffffff 	.word	0x7fffffff
 8015fa8:	ffff0000 	.word	0xffff0000

08015fac <uxr_prepare_reliable_buffer_to_write>:
 8015fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fb0:	4604      	mov	r4, r0
 8015fb2:	b091      	sub	sp, #68	@ 0x44
 8015fb4:	8900      	ldrh	r0, [r0, #8]
 8015fb6:	468b      	mov	fp, r1
 8015fb8:	89e6      	ldrh	r6, [r4, #14]
 8015fba:	9204      	str	r2, [sp, #16]
 8015fbc:	6865      	ldr	r5, [r4, #4]
 8015fbe:	6823      	ldr	r3, [r4, #0]
 8015fc0:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015fc4:	fbb6 f2f0 	udiv	r2, r6, r0
 8015fc8:	fbb5 f5f0 	udiv	r5, r5, r0
 8015fcc:	fb00 6212 	mls	r2, r0, r2, r6
 8015fd0:	1f2f      	subs	r7, r5, #4
 8015fd2:	b292      	uxth	r2, r2
 8015fd4:	fb05 3202 	mla	r2, r5, r2, r3
 8015fd8:	1d11      	adds	r1, r2, #4
 8015fda:	f8d2 8000 	ldr.w	r8, [r2]
 8015fde:	9103      	str	r1, [sp, #12]
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	f000 814a 	beq.w	801627a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8015fe6:	f04f 0c00 	mov.w	ip, #0
 8015fea:	46e2      	mov	sl, ip
 8015fec:	4661      	mov	r1, ip
 8015fee:	f10c 0c01 	add.w	ip, ip, #1
 8015ff2:	fbb1 f2f0 	udiv	r2, r1, r0
 8015ff6:	fb00 1212 	mls	r2, r0, r2, r1
 8015ffa:	fa1f f18c 	uxth.w	r1, ip
 8015ffe:	b292      	uxth	r2, r2
 8016000:	fb05 f202 	mul.w	r2, r5, r2
 8016004:	589a      	ldr	r2, [r3, r2]
 8016006:	454a      	cmp	r2, r9
 8016008:	d103      	bne.n	8016012 <uxr_prepare_reliable_buffer_to_write+0x66>
 801600a:	f10a 0a01 	add.w	sl, sl, #1
 801600e:	fa1f fa8a 	uxth.w	sl, sl
 8016012:	4281      	cmp	r1, r0
 8016014:	d3eb      	bcc.n	8015fee <uxr_prepare_reliable_buffer_to_write+0x42>
 8016016:	4640      	mov	r0, r8
 8016018:	2104      	movs	r1, #4
 801601a:	f8cd a014 	str.w	sl, [sp, #20]
 801601e:	f7fa fc0f 	bl	8010840 <ucdr_alignment>
 8016022:	4480      	add	r8, r0
 8016024:	eb08 020b 	add.w	r2, r8, fp
 8016028:	42ba      	cmp	r2, r7
 801602a:	f240 80ca 	bls.w	80161c2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801602e:	7b22      	ldrb	r2, [r4, #12]
 8016030:	445a      	add	r2, fp
 8016032:	42ba      	cmp	r2, r7
 8016034:	f240 80b2 	bls.w	801619c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8016038:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801603c:	b2bb      	uxth	r3, r7
 801603e:	eba2 0209 	sub.w	r2, r2, r9
 8016042:	441a      	add	r2, r3
 8016044:	b292      	uxth	r2, r2
 8016046:	fb0a f902 	mul.w	r9, sl, r2
 801604a:	9205      	str	r2, [sp, #20]
 801604c:	45d9      	cmp	r9, fp
 801604e:	9206      	str	r2, [sp, #24]
 8016050:	f0c0 80b3 	bcc.w	80161ba <uxr_prepare_reliable_buffer_to_write+0x20e>
 8016054:	f108 0204 	add.w	r2, r8, #4
 8016058:	42ba      	cmp	r2, r7
 801605a:	f080 80da 	bcs.w	8016212 <uxr_prepare_reliable_buffer_to_write+0x266>
 801605e:	f1a3 0904 	sub.w	r9, r3, #4
 8016062:	9b05      	ldr	r3, [sp, #20]
 8016064:	eba9 0908 	sub.w	r9, r9, r8
 8016068:	fa1f f989 	uxth.w	r9, r9
 801606c:	ebab 0b09 	sub.w	fp, fp, r9
 8016070:	fbbb f2f3 	udiv	r2, fp, r3
 8016074:	fb03 b312 	mls	r3, r3, r2, fp
 8016078:	2b00      	cmp	r3, #0
 801607a:	f040 80c4 	bne.w	8016206 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801607e:	b293      	uxth	r3, r2
 8016080:	4553      	cmp	r3, sl
 8016082:	f200 809a 	bhi.w	80161ba <uxr_prepare_reliable_buffer_to_write+0x20e>
 8016086:	2b00      	cmp	r3, #0
 8016088:	f000 80f9 	beq.w	801627e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801608c:	f8cd 801c 	str.w	r8, [sp, #28]
 8016090:	f04f 0a00 	mov.w	sl, #0
 8016094:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016098:	f10d 0b20 	add.w	fp, sp, #32
 801609c:	9505      	str	r5, [sp, #20]
 801609e:	461d      	mov	r5, r3
 80160a0:	e000      	b.n	80160a4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 80160a2:	46c1      	mov	r9, r8
 80160a4:	8922      	ldrh	r2, [r4, #8]
 80160a6:	4658      	mov	r0, fp
 80160a8:	6863      	ldr	r3, [r4, #4]
 80160aa:	f10a 0a01 	add.w	sl, sl, #1
 80160ae:	fbb6 f1f2 	udiv	r1, r6, r2
 80160b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80160b6:	fb02 6111 	mls	r1, r2, r1, r6
 80160ba:	463a      	mov	r2, r7
 80160bc:	b289      	uxth	r1, r1
 80160be:	fb03 f101 	mul.w	r1, r3, r1
 80160c2:	6823      	ldr	r3, [r4, #0]
 80160c4:	3104      	adds	r1, #4
 80160c6:	4419      	add	r1, r3
 80160c8:	2300      	movs	r3, #0
 80160ca:	f851 cc04 	ldr.w	ip, [r1, #-4]
 80160ce:	f8cd c000 	str.w	ip, [sp]
 80160d2:	f7fa fb9f 	bl	8010814 <ucdr_init_buffer_origin_offset>
 80160d6:	464a      	mov	r2, r9
 80160d8:	2300      	movs	r3, #0
 80160da:	210d      	movs	r1, #13
 80160dc:	4658      	mov	r0, fp
 80160de:	f7fb ff99 	bl	8012014 <uxr_buffer_submessage_header>
 80160e2:	8921      	ldrh	r1, [r4, #8]
 80160e4:	6863      	ldr	r3, [r4, #4]
 80160e6:	4630      	mov	r0, r6
 80160e8:	fbb6 f2f1 	udiv	r2, r6, r1
 80160ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80160f0:	fb01 6212 	mls	r2, r1, r2, r6
 80160f4:	2101      	movs	r1, #1
 80160f6:	b292      	uxth	r2, r2
 80160f8:	fb02 f303 	mul.w	r3, r2, r3
 80160fc:	6822      	ldr	r2, [r4, #0]
 80160fe:	50d7      	str	r7, [r2, r3]
 8016100:	f000 fabc 	bl	801667c <uxr_seq_num_add>
 8016104:	4606      	mov	r6, r0
 8016106:	fa1f f38a 	uxth.w	r3, sl
 801610a:	429d      	cmp	r5, r3
 801610c:	d8c9      	bhi.n	80160a2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801610e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016112:	9d05      	ldr	r5, [sp, #20]
 8016114:	8920      	ldrh	r0, [r4, #8]
 8016116:	463a      	mov	r2, r7
 8016118:	6863      	ldr	r3, [r4, #4]
 801611a:	fbb6 f1f0 	udiv	r1, r6, r0
 801611e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016122:	fb00 6111 	mls	r1, r0, r1, r6
 8016126:	4658      	mov	r0, fp
 8016128:	b289      	uxth	r1, r1
 801612a:	fb01 f303 	mul.w	r3, r1, r3
 801612e:	6821      	ldr	r1, [r4, #0]
 8016130:	3304      	adds	r3, #4
 8016132:	4419      	add	r1, r3
 8016134:	2300      	movs	r3, #0
 8016136:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801613a:	9700      	str	r7, [sp, #0]
 801613c:	f7fa fb6a 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8016140:	9f06      	ldr	r7, [sp, #24]
 8016142:	4658      	mov	r0, fp
 8016144:	2302      	movs	r3, #2
 8016146:	b2ba      	uxth	r2, r7
 8016148:	210d      	movs	r1, #13
 801614a:	f7fb ff63 	bl	8012014 <uxr_buffer_submessage_header>
 801614e:	f108 0104 	add.w	r1, r8, #4
 8016152:	9b03      	ldr	r3, [sp, #12]
 8016154:	f1a5 0208 	sub.w	r2, r5, #8
 8016158:	8925      	ldrh	r5, [r4, #8]
 801615a:	440b      	add	r3, r1
 801615c:	eba2 0208 	sub.w	r2, r2, r8
 8016160:	fbb6 f0f5 	udiv	r0, r6, r5
 8016164:	4619      	mov	r1, r3
 8016166:	6863      	ldr	r3, [r4, #4]
 8016168:	fb05 6010 	mls	r0, r5, r0, r6
 801616c:	fbb3 f3f5 	udiv	r3, r3, r5
 8016170:	b280      	uxth	r0, r0
 8016172:	6825      	ldr	r5, [r4, #0]
 8016174:	fb00 f303 	mul.w	r3, r0, r3
 8016178:	7b20      	ldrb	r0, [r4, #12]
 801617a:	3004      	adds	r0, #4
 801617c:	4438      	add	r0, r7
 801617e:	50e8      	str	r0, [r5, r3]
 8016180:	9d04      	ldr	r5, [sp, #16]
 8016182:	4628      	mov	r0, r5
 8016184:	f7fa fb58 	bl	8010838 <ucdr_init_buffer>
 8016188:	4628      	mov	r0, r5
 801618a:	4622      	mov	r2, r4
 801618c:	493d      	ldr	r1, [pc, #244]	@ (8016284 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801618e:	f7fa fb27 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 8016192:	2001      	movs	r0, #1
 8016194:	81e6      	strh	r6, [r4, #14]
 8016196:	b011      	add	sp, #68	@ 0x44
 8016198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801619c:	2101      	movs	r1, #1
 801619e:	89e0      	ldrh	r0, [r4, #14]
 80161a0:	f000 fa6c 	bl	801667c <uxr_seq_num_add>
 80161a4:	4605      	mov	r5, r0
 80161a6:	8921      	ldrh	r1, [r4, #8]
 80161a8:	8a60      	ldrh	r0, [r4, #18]
 80161aa:	f000 fa67 	bl	801667c <uxr_seq_num_add>
 80161ae:	4601      	mov	r1, r0
 80161b0:	4628      	mov	r0, r5
 80161b2:	f000 fa6b 	bl	801668c <uxr_seq_num_cmp>
 80161b6:	2800      	cmp	r0, #0
 80161b8:	dd44      	ble.n	8016244 <uxr_prepare_reliable_buffer_to_write+0x298>
 80161ba:	2000      	movs	r0, #0
 80161bc:	b011      	add	sp, #68	@ 0x44
 80161be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c2:	8921      	ldrh	r1, [r4, #8]
 80161c4:	8a60      	ldrh	r0, [r4, #18]
 80161c6:	9205      	str	r2, [sp, #20]
 80161c8:	f000 fa58 	bl	801667c <uxr_seq_num_add>
 80161cc:	4601      	mov	r1, r0
 80161ce:	4630      	mov	r0, r6
 80161d0:	f000 fa5c 	bl	801668c <uxr_seq_num_cmp>
 80161d4:	2800      	cmp	r0, #0
 80161d6:	9a05      	ldr	r2, [sp, #20]
 80161d8:	dcef      	bgt.n	80161ba <uxr_prepare_reliable_buffer_to_write+0x20e>
 80161da:	8925      	ldrh	r5, [r4, #8]
 80161dc:	e9d4 7300 	ldrd	r7, r3, [r4]
 80161e0:	fbb6 f4f5 	udiv	r4, r6, r5
 80161e4:	fbb3 f3f5 	udiv	r3, r3, r5
 80161e8:	fb05 6414 	mls	r4, r5, r4, r6
 80161ec:	b2a4      	uxth	r4, r4
 80161ee:	fb04 f303 	mul.w	r3, r4, r3
 80161f2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80161f6:	50fa      	str	r2, [r7, r3]
 80161f8:	2300      	movs	r3, #0
 80161fa:	f8cd 8000 	str.w	r8, [sp]
 80161fe:	f7fa fb09 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8016202:	2001      	movs	r0, #1
 8016204:	e7da      	b.n	80161bc <uxr_prepare_reliable_buffer_to_write+0x210>
 8016206:	3201      	adds	r2, #1
 8016208:	9306      	str	r3, [sp, #24]
 801620a:	b293      	uxth	r3, r2
 801620c:	4553      	cmp	r3, sl
 801620e:	d8d4      	bhi.n	80161ba <uxr_prepare_reliable_buffer_to_write+0x20e>
 8016210:	e739      	b.n	8016086 <uxr_prepare_reliable_buffer_to_write+0xda>
 8016212:	4630      	mov	r0, r6
 8016214:	2101      	movs	r1, #1
 8016216:	9307      	str	r3, [sp, #28]
 8016218:	f000 fa30 	bl	801667c <uxr_seq_num_add>
 801621c:	4606      	mov	r6, r0
 801621e:	8920      	ldrh	r0, [r4, #8]
 8016220:	6862      	ldr	r2, [r4, #4]
 8016222:	fbb6 f1f0 	udiv	r1, r6, r0
 8016226:	fbb2 f2f0 	udiv	r2, r2, r0
 801622a:	fb00 6111 	mls	r1, r0, r1, r6
 801622e:	b289      	uxth	r1, r1
 8016230:	fb01 f202 	mul.w	r2, r1, r2
 8016234:	6821      	ldr	r1, [r4, #0]
 8016236:	3204      	adds	r2, #4
 8016238:	188b      	adds	r3, r1, r2
 801623a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801623e:	9303      	str	r3, [sp, #12]
 8016240:	9b07      	ldr	r3, [sp, #28]
 8016242:	e70c      	b.n	801605e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016244:	8921      	ldrh	r1, [r4, #8]
 8016246:	6863      	ldr	r3, [r4, #4]
 8016248:	9804      	ldr	r0, [sp, #16]
 801624a:	fbb5 f2f1 	udiv	r2, r5, r1
 801624e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016252:	fb01 5212 	mls	r2, r1, r2, r5
 8016256:	6821      	ldr	r1, [r4, #0]
 8016258:	b292      	uxth	r2, r2
 801625a:	fb02 f303 	mul.w	r3, r2, r3
 801625e:	7b22      	ldrb	r2, [r4, #12]
 8016260:	3304      	adds	r3, #4
 8016262:	445a      	add	r2, fp
 8016264:	4419      	add	r1, r3
 8016266:	f841 2c04 	str.w	r2, [r1, #-4]
 801626a:	7b23      	ldrb	r3, [r4, #12]
 801626c:	9300      	str	r3, [sp, #0]
 801626e:	2300      	movs	r3, #0
 8016270:	f7fa fad0 	bl	8010814 <ucdr_init_buffer_origin_offset>
 8016274:	2001      	movs	r0, #1
 8016276:	81e5      	strh	r5, [r4, #14]
 8016278:	e7a0      	b.n	80161bc <uxr_prepare_reliable_buffer_to_write+0x210>
 801627a:	4682      	mov	sl, r0
 801627c:	e6cb      	b.n	8016016 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801627e:	f10d 0b20 	add.w	fp, sp, #32
 8016282:	e747      	b.n	8016114 <uxr_prepare_reliable_buffer_to_write+0x168>
 8016284:	08015e81 	.word	0x08015e81

08016288 <uxr_prepare_next_reliable_buffer_to_send>:
 8016288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801628a:	4604      	mov	r4, r0
 801628c:	461d      	mov	r5, r3
 801628e:	460f      	mov	r7, r1
 8016290:	8a00      	ldrh	r0, [r0, #16]
 8016292:	2101      	movs	r1, #1
 8016294:	4616      	mov	r6, r2
 8016296:	f000 f9f1 	bl	801667c <uxr_seq_num_add>
 801629a:	8028      	strh	r0, [r5, #0]
 801629c:	8922      	ldrh	r2, [r4, #8]
 801629e:	6863      	ldr	r3, [r4, #4]
 80162a0:	fbb0 f1f2 	udiv	r1, r0, r2
 80162a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80162a8:	fb02 0c11 	mls	ip, r2, r1, r0
 80162ac:	89e1      	ldrh	r1, [r4, #14]
 80162ae:	fa1f fc8c 	uxth.w	ip, ip
 80162b2:	fb0c fc03 	mul.w	ip, ip, r3
 80162b6:	6823      	ldr	r3, [r4, #0]
 80162b8:	f10c 0c04 	add.w	ip, ip, #4
 80162bc:	4463      	add	r3, ip
 80162be:	603b      	str	r3, [r7, #0]
 80162c0:	6823      	ldr	r3, [r4, #0]
 80162c2:	449c      	add	ip, r3
 80162c4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80162c8:	6033      	str	r3, [r6, #0]
 80162ca:	f000 f9df 	bl	801668c <uxr_seq_num_cmp>
 80162ce:	2800      	cmp	r0, #0
 80162d0:	dd01      	ble.n	80162d6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80162d2:	2000      	movs	r0, #0
 80162d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162d6:	7b23      	ldrb	r3, [r4, #12]
 80162d8:	6832      	ldr	r2, [r6, #0]
 80162da:	429a      	cmp	r2, r3
 80162dc:	d9f9      	bls.n	80162d2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80162de:	8a61      	ldrh	r1, [r4, #18]
 80162e0:	8a20      	ldrh	r0, [r4, #16]
 80162e2:	f000 f9cf 	bl	8016684 <uxr_seq_num_sub>
 80162e6:	8923      	ldrh	r3, [r4, #8]
 80162e8:	4283      	cmp	r3, r0
 80162ea:	d0f2      	beq.n	80162d2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80162ec:	8828      	ldrh	r0, [r5, #0]
 80162ee:	89e3      	ldrh	r3, [r4, #14]
 80162f0:	8220      	strh	r0, [r4, #16]
 80162f2:	4298      	cmp	r0, r3
 80162f4:	d001      	beq.n	80162fa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80162f6:	2001      	movs	r0, #1
 80162f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162fa:	2101      	movs	r1, #1
 80162fc:	f000 f9be 	bl	801667c <uxr_seq_num_add>
 8016300:	4603      	mov	r3, r0
 8016302:	2001      	movs	r0, #1
 8016304:	81e3      	strh	r3, [r4, #14]
 8016306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016308 <uxr_update_output_stream_heartbeat_timestamp>:
 8016308:	b570      	push	{r4, r5, r6, lr}
 801630a:	8a01      	ldrh	r1, [r0, #16]
 801630c:	4604      	mov	r4, r0
 801630e:	8a40      	ldrh	r0, [r0, #18]
 8016310:	4615      	mov	r5, r2
 8016312:	461e      	mov	r6, r3
 8016314:	f000 f9ba 	bl	801668c <uxr_seq_num_cmp>
 8016318:	2800      	cmp	r0, #0
 801631a:	db07      	blt.n	801632c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801631c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016320:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016324:	2000      	movs	r0, #0
 8016326:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801632a:	bd70      	pop	{r4, r5, r6, pc}
 801632c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016330:	b940      	cbnz	r0, 8016344 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016332:	2301      	movs	r3, #1
 8016334:	f884 3020 	strb.w	r3, [r4, #32]
 8016338:	3564      	adds	r5, #100	@ 0x64
 801633a:	f146 0600 	adc.w	r6, r6, #0
 801633e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016342:	bd70      	pop	{r4, r5, r6, pc}
 8016344:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016348:	4295      	cmp	r5, r2
 801634a:	eb76 0303 	sbcs.w	r3, r6, r3
 801634e:	db04      	blt.n	801635a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8016350:	1c43      	adds	r3, r0, #1
 8016352:	2001      	movs	r0, #1
 8016354:	f884 3020 	strb.w	r3, [r4, #32]
 8016358:	e7ee      	b.n	8016338 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801635a:	2000      	movs	r0, #0
 801635c:	e7ec      	b.n	8016338 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801635e:	bf00      	nop

08016360 <uxr_begin_output_nack_buffer_it>:
 8016360:	8a40      	ldrh	r0, [r0, #18]
 8016362:	4770      	bx	lr

08016364 <uxr_next_reliable_nack_buffer_to_send>:
 8016364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016368:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801636c:	b197      	cbz	r7, 8016394 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801636e:	4680      	mov	r8, r0
 8016370:	460d      	mov	r5, r1
 8016372:	4616      	mov	r6, r2
 8016374:	461c      	mov	r4, r3
 8016376:	8818      	ldrh	r0, [r3, #0]
 8016378:	2101      	movs	r1, #1
 801637a:	f000 f97f 	bl	801667c <uxr_seq_num_add>
 801637e:	8020      	strh	r0, [r4, #0]
 8016380:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8016384:	f000 f982 	bl	801668c <uxr_seq_num_cmp>
 8016388:	2800      	cmp	r0, #0
 801638a:	dd06      	ble.n	801639a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801638c:	2300      	movs	r3, #0
 801638e:	461f      	mov	r7, r3
 8016390:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8016394:	4638      	mov	r0, r7
 8016396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801639a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801639e:	8820      	ldrh	r0, [r4, #0]
 80163a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80163a4:	fbb0 f3f2 	udiv	r3, r0, r2
 80163a8:	fbb1 fcf2 	udiv	ip, r1, r2
 80163ac:	fb02 0313 	mls	r3, r2, r3, r0
 80163b0:	b29b      	uxth	r3, r3
 80163b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80163b6:	f8d8 3000 	ldr.w	r3, [r8]
 80163ba:	f10c 0c04 	add.w	ip, ip, #4
 80163be:	4463      	add	r3, ip
 80163c0:	602b      	str	r3, [r5, #0]
 80163c2:	f8d8 3000 	ldr.w	r3, [r8]
 80163c6:	4463      	add	r3, ip
 80163c8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80163cc:	6033      	str	r3, [r6, #0]
 80163ce:	f898 200c 	ldrb.w	r2, [r8, #12]
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d0d0      	beq.n	8016378 <uxr_next_reliable_nack_buffer_to_send+0x14>
 80163d6:	e7dd      	b.n	8016394 <uxr_next_reliable_nack_buffer_to_send+0x30>

080163d8 <uxr_process_acknack>:
 80163d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163da:	4604      	mov	r4, r0
 80163dc:	460e      	mov	r6, r1
 80163de:	4610      	mov	r0, r2
 80163e0:	2101      	movs	r1, #1
 80163e2:	f000 f94f 	bl	8016684 <uxr_seq_num_sub>
 80163e6:	8a61      	ldrh	r1, [r4, #18]
 80163e8:	f000 f94c 	bl	8016684 <uxr_seq_num_sub>
 80163ec:	b1c8      	cbz	r0, 8016422 <uxr_process_acknack+0x4a>
 80163ee:	4605      	mov	r5, r0
 80163f0:	2700      	movs	r7, #0
 80163f2:	2101      	movs	r1, #1
 80163f4:	8a60      	ldrh	r0, [r4, #18]
 80163f6:	f000 f941 	bl	801667c <uxr_seq_num_add>
 80163fa:	8923      	ldrh	r3, [r4, #8]
 80163fc:	6862      	ldr	r2, [r4, #4]
 80163fe:	3701      	adds	r7, #1
 8016400:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016404:	6821      	ldr	r1, [r4, #0]
 8016406:	42bd      	cmp	r5, r7
 8016408:	8260      	strh	r0, [r4, #18]
 801640a:	fbb0 fef3 	udiv	lr, r0, r3
 801640e:	fbb2 f2f3 	udiv	r2, r2, r3
 8016412:	fb03 031e 	mls	r3, r3, lr, r0
 8016416:	b29b      	uxth	r3, r3
 8016418:	fb02 f303 	mul.w	r3, r2, r3
 801641c:	f841 c003 	str.w	ip, [r1, r3]
 8016420:	d1e7      	bne.n	80163f2 <uxr_process_acknack+0x1a>
 8016422:	3e00      	subs	r6, #0
 8016424:	f04f 0300 	mov.w	r3, #0
 8016428:	bf18      	it	ne
 801642a:	2601      	movne	r6, #1
 801642c:	f884 3020 	strb.w	r3, [r4, #32]
 8016430:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016436:	bf00      	nop

08016438 <uxr_is_output_up_to_date>:
 8016438:	8a01      	ldrh	r1, [r0, #16]
 801643a:	8a40      	ldrh	r0, [r0, #18]
 801643c:	b508      	push	{r3, lr}
 801643e:	f000 f925 	bl	801668c <uxr_seq_num_cmp>
 8016442:	fab0 f080 	clz	r0, r0
 8016446:	0940      	lsrs	r0, r0, #5
 8016448:	bd08      	pop	{r3, pc}
 801644a:	bf00      	nop

0801644c <get_available_free_slots>:
 801644c:	8901      	ldrh	r1, [r0, #8]
 801644e:	b1e1      	cbz	r1, 801648a <get_available_free_slots+0x3e>
 8016450:	6843      	ldr	r3, [r0, #4]
 8016452:	f04f 0c00 	mov.w	ip, #0
 8016456:	b530      	push	{r4, r5, lr}
 8016458:	fbb3 fef1 	udiv	lr, r3, r1
 801645c:	6805      	ldr	r5, [r0, #0]
 801645e:	4662      	mov	r2, ip
 8016460:	7b04      	ldrb	r4, [r0, #12]
 8016462:	4660      	mov	r0, ip
 8016464:	f10c 0c01 	add.w	ip, ip, #1
 8016468:	fbb2 f3f1 	udiv	r3, r2, r1
 801646c:	fb01 2313 	mls	r3, r1, r3, r2
 8016470:	fa1f f28c 	uxth.w	r2, ip
 8016474:	b29b      	uxth	r3, r3
 8016476:	fb0e f303 	mul.w	r3, lr, r3
 801647a:	58eb      	ldr	r3, [r5, r3]
 801647c:	429c      	cmp	r4, r3
 801647e:	d101      	bne.n	8016484 <get_available_free_slots+0x38>
 8016480:	3001      	adds	r0, #1
 8016482:	b280      	uxth	r0, r0
 8016484:	428a      	cmp	r2, r1
 8016486:	d3ed      	bcc.n	8016464 <get_available_free_slots+0x18>
 8016488:	bd30      	pop	{r4, r5, pc}
 801648a:	4608      	mov	r0, r1
 801648c:	4770      	bx	lr
 801648e:	bf00      	nop

08016490 <uxr_buffer_cancel_data>:
 8016490:	b510      	push	{r4, lr}
 8016492:	2300      	movs	r3, #0
 8016494:	b094      	sub	sp, #80	@ 0x50
 8016496:	4604      	mov	r4, r0
 8016498:	9205      	str	r2, [sp, #20]
 801649a:	9301      	str	r3, [sp, #4]
 801649c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80164a0:	f88d 301e 	strb.w	r3, [sp, #30]
 80164a4:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80164a8:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80164ac:	2308      	movs	r3, #8
 80164ae:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80164b2:	2201      	movs	r2, #1
 80164b4:	9300      	str	r3, [sp, #0]
 80164b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80164b8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80164bc:	2210      	movs	r2, #16
 80164be:	f7fb fafd 	bl	8011abc <uxr_prepare_stream_to_write_submessage>
 80164c2:	b918      	cbnz	r0, 80164cc <uxr_buffer_cancel_data+0x3c>
 80164c4:	4604      	mov	r4, r0
 80164c6:	4620      	mov	r0, r4
 80164c8:	b014      	add	sp, #80	@ 0x50
 80164ca:	bd10      	pop	{r4, pc}
 80164cc:	9905      	ldr	r1, [sp, #20]
 80164ce:	aa06      	add	r2, sp, #24
 80164d0:	4620      	mov	r0, r4
 80164d2:	f7fb fc2f 	bl	8011d34 <uxr_init_base_object_request>
 80164d6:	4604      	mov	r4, r0
 80164d8:	a906      	add	r1, sp, #24
 80164da:	a80c      	add	r0, sp, #48	@ 0x30
 80164dc:	f7fc fe42 	bl	8013164 <uxr_serialize_READ_DATA_Payload>
 80164e0:	4620      	mov	r0, r4
 80164e2:	b014      	add	sp, #80	@ 0x50
 80164e4:	bd10      	pop	{r4, pc}
 80164e6:	bf00      	nop

080164e8 <read_submessage_format>:
 80164e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164ec:	b095      	sub	sp, #84	@ 0x54
 80164ee:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80164f2:	b113      	cbz	r3, 80164fa <read_submessage_format+0x12>
 80164f4:	b015      	add	sp, #84	@ 0x54
 80164f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164fa:	4606      	mov	r6, r0
 80164fc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80164fe:	460c      	mov	r4, r1
 8016500:	4615      	mov	r5, r2
 8016502:	9004      	str	r0, [sp, #16]
 8016504:	4699      	mov	r9, r3
 8016506:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8016508:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801650c:	9005      	str	r0, [sp, #20]
 801650e:	a80c      	add	r0, sp, #48	@ 0x30
 8016510:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016514:	1a52      	subs	r2, r2, r1
 8016516:	f7fa f98f 	bl	8010838 <ucdr_init_buffer>
 801651a:	a80c      	add	r0, sp, #48	@ 0x30
 801651c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016520:	f7fa f95e 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 8016524:	69e2      	ldr	r2, [r4, #28]
 8016526:	b19a      	cbz	r2, 8016550 <read_submessage_format+0x68>
 8016528:	f1b8 0f07 	cmp.w	r8, #7
 801652c:	f882 9014 	strb.w	r9, [r2, #20]
 8016530:	d040      	beq.n	80165b4 <read_submessage_format+0xcc>
 8016532:	f1b8 0f08 	cmp.w	r8, #8
 8016536:	d02e      	beq.n	8016596 <read_submessage_format+0xae>
 8016538:	f1b8 0f06 	cmp.w	r8, #6
 801653c:	d011      	beq.n	8016562 <read_submessage_format+0x7a>
 801653e:	2301      	movs	r3, #1
 8016540:	7513      	strb	r3, [r2, #20]
 8016542:	4629      	mov	r1, r5
 8016544:	4620      	mov	r0, r4
 8016546:	f7fa f9cb 	bl	80108e0 <ucdr_advance_buffer>
 801654a:	b015      	add	sp, #84	@ 0x54
 801654c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016550:	f1b8 0f07 	cmp.w	r8, #7
 8016554:	d02e      	beq.n	80165b4 <read_submessage_format+0xcc>
 8016556:	f1b8 0f08 	cmp.w	r8, #8
 801655a:	d01c      	beq.n	8016596 <read_submessage_format+0xae>
 801655c:	f1b8 0f06 	cmp.w	r8, #6
 8016560:	d1ef      	bne.n	8016542 <read_submessage_format+0x5a>
 8016562:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8016566:	f1b8 0f00 	cmp.w	r8, #0
 801656a:	d011      	beq.n	8016590 <read_submessage_format+0xa8>
 801656c:	ab0c      	add	r3, sp, #48	@ 0x30
 801656e:	9501      	str	r5, [sp, #4]
 8016570:	463a      	mov	r2, r7
 8016572:	4630      	mov	r0, r6
 8016574:	9300      	str	r3, [sp, #0]
 8016576:	2306      	movs	r3, #6
 8016578:	f88d 3016 	strb.w	r3, [sp, #22]
 801657c:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8016580:	9302      	str	r3, [sp, #8]
 8016582:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016586:	47c0      	blx	r8
 8016588:	2301      	movs	r3, #1
 801658a:	69e2      	ldr	r2, [r4, #28]
 801658c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8016590:	2a00      	cmp	r2, #0
 8016592:	d1d4      	bne.n	801653e <read_submessage_format+0x56>
 8016594:	e7d5      	b.n	8016542 <read_submessage_format+0x5a>
 8016596:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 801659a:	2b00      	cmp	r3, #0
 801659c:	d0f8      	beq.n	8016590 <read_submessage_format+0xa8>
 801659e:	a80c      	add	r0, sp, #48	@ 0x30
 80165a0:	a906      	add	r1, sp, #24
 80165a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80165a6:	f7fc fe91 	bl	80132cc <uxr_deserialize_SampleIdentity>
 80165aa:	b9a0      	cbnz	r0, 80165d6 <read_submessage_format+0xee>
 80165ac:	69e2      	ldr	r2, [r4, #28]
 80165ae:	2a00      	cmp	r2, #0
 80165b0:	d1c5      	bne.n	801653e <read_submessage_format+0x56>
 80165b2:	e7c6      	b.n	8016542 <read_submessage_format+0x5a>
 80165b4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 80165b8:	b13b      	cbz	r3, 80165ca <read_submessage_format+0xe2>
 80165ba:	a906      	add	r1, sp, #24
 80165bc:	a80c      	add	r0, sp, #48	@ 0x30
 80165be:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80165c2:	f7fc fb6f 	bl	8012ca4 <uxr_deserialize_BaseObjectRequest>
 80165c6:	bb60      	cbnz	r0, 8016622 <read_submessage_format+0x13a>
 80165c8:	69e2      	ldr	r2, [r4, #28]
 80165ca:	68a3      	ldr	r3, [r4, #8]
 80165cc:	442b      	add	r3, r5
 80165ce:	60a3      	str	r3, [r4, #8]
 80165d0:	2a00      	cmp	r2, #0
 80165d2:	d1b4      	bne.n	801653e <read_submessage_format+0x56>
 80165d4:	e7b5      	b.n	8016542 <read_submessage_format+0x5a>
 80165d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80165d8:	a80c      	add	r0, sp, #48	@ 0x30
 80165da:	eba8 0803 	sub.w	r8, r8, r3
 80165de:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80165e2:	44a8      	add	r8, r5
 80165e4:	1a52      	subs	r2, r2, r1
 80165e6:	f7fa f927 	bl	8010838 <ucdr_init_buffer>
 80165ea:	a80c      	add	r0, sp, #48	@ 0x30
 80165ec:	fa1f f888 	uxth.w	r8, r8
 80165f0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80165f4:	f7fa f8f4 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 80165f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80165fa:	2108      	movs	r1, #8
 80165fc:	f8cd 8004 	str.w	r8, [sp, #4]
 8016600:	9300      	str	r3, [sp, #0]
 8016602:	463a      	mov	r2, r7
 8016604:	f88d 1016 	strb.w	r1, [sp, #22]
 8016608:	ab06      	add	r3, sp, #24
 801660a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 801660e:	4630      	mov	r0, r6
 8016610:	9102      	str	r1, [sp, #8]
 8016612:	9905      	ldr	r1, [sp, #20]
 8016614:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8016618:	47b8      	blx	r7
 801661a:	2301      	movs	r3, #1
 801661c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8016620:	e7c4      	b.n	80165ac <read_submessage_format+0xc4>
 8016622:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016626:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016628:	a80c      	add	r0, sp, #48	@ 0x30
 801662a:	1a52      	subs	r2, r2, r1
 801662c:	eba8 0803 	sub.w	r8, r8, r3
 8016630:	f7fa f902 	bl	8010838 <ucdr_init_buffer>
 8016634:	a80c      	add	r0, sp, #48	@ 0x30
 8016636:	44a8      	add	r8, r5
 8016638:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801663c:	f7fa f8d0 	bl	80107e0 <ucdr_set_on_full_buffer_callback>
 8016640:	ab0c      	add	r3, sp, #48	@ 0x30
 8016642:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8016646:	fa1f f888 	uxth.w	r8, r8
 801664a:	9300      	str	r3, [sp, #0]
 801664c:	463a      	mov	r2, r7
 801664e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016652:	4630      	mov	r0, r6
 8016654:	f8cd 8004 	str.w	r8, [sp, #4]
 8016658:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801665c:	2107      	movs	r1, #7
 801665e:	f88d 1016 	strb.w	r1, [sp, #22]
 8016662:	b29b      	uxth	r3, r3
 8016664:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8016668:	9102      	str	r1, [sp, #8]
 801666a:	9905      	ldr	r1, [sp, #20]
 801666c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8016670:	47b8      	blx	r7
 8016672:	2301      	movs	r3, #1
 8016674:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8016678:	e7a6      	b.n	80165c8 <read_submessage_format+0xe0>
 801667a:	bf00      	nop

0801667c <uxr_seq_num_add>:
 801667c:	4408      	add	r0, r1
 801667e:	b280      	uxth	r0, r0
 8016680:	4770      	bx	lr
 8016682:	bf00      	nop

08016684 <uxr_seq_num_sub>:
 8016684:	1a40      	subs	r0, r0, r1
 8016686:	b280      	uxth	r0, r0
 8016688:	4770      	bx	lr
 801668a:	bf00      	nop

0801668c <uxr_seq_num_cmp>:
 801668c:	4288      	cmp	r0, r1
 801668e:	d011      	beq.n	80166b4 <uxr_seq_num_cmp+0x28>
 8016690:	d309      	bcc.n	80166a6 <uxr_seq_num_cmp+0x1a>
 8016692:	4288      	cmp	r0, r1
 8016694:	d910      	bls.n	80166b8 <uxr_seq_num_cmp+0x2c>
 8016696:	1a40      	subs	r0, r0, r1
 8016698:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801669c:	bfd4      	ite	le
 801669e:	2001      	movle	r0, #1
 80166a0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80166a4:	4770      	bx	lr
 80166a6:	1a0b      	subs	r3, r1, r0
 80166a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80166ac:	daf1      	bge.n	8016692 <uxr_seq_num_cmp+0x6>
 80166ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80166b2:	4770      	bx	lr
 80166b4:	2000      	movs	r0, #0
 80166b6:	4770      	bx	lr
 80166b8:	2001      	movs	r0, #1
 80166ba:	4770      	bx	lr

080166bc <uxr_init_framing_io>:
 80166bc:	2300      	movs	r3, #0
 80166be:	7041      	strb	r1, [r0, #1]
 80166c0:	7003      	strb	r3, [r0, #0]
 80166c2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80166c4:	4770      	bx	lr
 80166c6:	bf00      	nop

080166c8 <uxr_write_framed_msg>:
 80166c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166cc:	4617      	mov	r7, r2
 80166ce:	7842      	ldrb	r2, [r0, #1]
 80166d0:	460e      	mov	r6, r1
 80166d2:	b083      	sub	sp, #12
 80166d4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80166d8:	469b      	mov	fp, r3
 80166da:	237e      	movs	r3, #126	@ 0x7e
 80166dc:	4604      	mov	r4, r0
 80166de:	2901      	cmp	r1, #1
 80166e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80166e4:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80166e8:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80166ec:	f240 8115 	bls.w	801691a <uxr_write_framed_msg+0x252>
 80166f0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80166f4:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80166f8:	2202      	movs	r2, #2
 80166fa:	2901      	cmp	r1, #1
 80166fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016700:	d952      	bls.n	80167a8 <uxr_write_framed_msg+0xe0>
 8016702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016704:	2103      	movs	r1, #3
 8016706:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801670a:	b2dd      	uxtb	r5, r3
 801670c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8016710:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8016714:	2a01      	cmp	r2, #1
 8016716:	d95c      	bls.n	80167d2 <uxr_write_framed_msg+0x10a>
 8016718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801671a:	1862      	adds	r2, r4, r1
 801671c:	3101      	adds	r1, #1
 801671e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8016722:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8016726:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801672a:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801672e:	2a01      	cmp	r2, #1
 8016730:	d961      	bls.n	80167f6 <uxr_write_framed_msg+0x12e>
 8016732:	1c4a      	adds	r2, r1, #1
 8016734:	4421      	add	r1, r4
 8016736:	b2d2      	uxtb	r2, r2
 8016738:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801673c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016740:	2b00      	cmp	r3, #0
 8016742:	d06a      	beq.n	801681a <uxr_write_framed_msg+0x152>
 8016744:	f04f 0800 	mov.w	r8, #0
 8016748:	46c1      	mov	r9, r8
 801674a:	e016      	b.n	801677a <uxr_write_framed_msg+0xb2>
 801674c:	2a29      	cmp	r2, #41	@ 0x29
 801674e:	d868      	bhi.n	8016822 <uxr_write_framed_msg+0x15a>
 8016750:	18a0      	adds	r0, r4, r2
 8016752:	3201      	adds	r2, #1
 8016754:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016758:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801675c:	ea88 0101 	eor.w	r1, r8, r1
 8016760:	4b7d      	ldr	r3, [pc, #500]	@ (8016958 <uxr_write_framed_msg+0x290>)
 8016762:	f109 0901 	add.w	r9, r9, #1
 8016766:	b2c9      	uxtb	r1, r1
 8016768:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801676c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8016770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016772:	454b      	cmp	r3, r9
 8016774:	d969      	bls.n	801684a <uxr_write_framed_msg+0x182>
 8016776:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801677a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801677e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8016782:	2801      	cmp	r0, #1
 8016784:	d8e2      	bhi.n	801674c <uxr_write_framed_msg+0x84>
 8016786:	1c50      	adds	r0, r2, #1
 8016788:	b2c0      	uxtb	r0, r0
 801678a:	2829      	cmp	r0, #41	@ 0x29
 801678c:	d849      	bhi.n	8016822 <uxr_write_framed_msg+0x15a>
 801678e:	18a0      	adds	r0, r4, r2
 8016790:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8016794:	3202      	adds	r2, #2
 8016796:	f081 0520 	eor.w	r5, r1, #32
 801679a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801679e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80167a2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80167a6:	e7d9      	b.n	801675c <uxr_write_framed_msg+0x94>
 80167a8:	2104      	movs	r1, #4
 80167aa:	f04f 0c03 	mov.w	ip, #3
 80167ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80167b0:	4422      	add	r2, r4
 80167b2:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80167b6:	44a4      	add	ip, r4
 80167b8:	b2dd      	uxtb	r5, r3
 80167ba:	f080 0020 	eor.w	r0, r0, #32
 80167be:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 80167c2:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80167c6:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80167ca:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80167ce:	2a01      	cmp	r2, #1
 80167d0:	d8a2      	bhi.n	8016718 <uxr_write_framed_msg+0x50>
 80167d2:	1862      	adds	r2, r4, r1
 80167d4:	207d      	movs	r0, #125	@ 0x7d
 80167d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80167d8:	f085 0520 	eor.w	r5, r5, #32
 80167dc:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80167e0:	3102      	adds	r1, #2
 80167e2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80167e6:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80167ea:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80167ee:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80167f2:	2a01      	cmp	r2, #1
 80167f4:	d89d      	bhi.n	8016732 <uxr_write_framed_msg+0x6a>
 80167f6:	1c4d      	adds	r5, r1, #1
 80167f8:	1c8a      	adds	r2, r1, #2
 80167fa:	f080 0020 	eor.w	r0, r0, #32
 80167fe:	4421      	add	r1, r4
 8016800:	fa54 f585 	uxtab	r5, r4, r5
 8016804:	b2d2      	uxtb	r2, r2
 8016806:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801680a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801680e:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8016812:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016816:	2b00      	cmp	r3, #0
 8016818:	d194      	bne.n	8016744 <uxr_write_framed_msg+0x7c>
 801681a:	4619      	mov	r1, r3
 801681c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016820:	e019      	b.n	8016856 <uxr_write_framed_msg+0x18e>
 8016822:	2500      	movs	r5, #0
 8016824:	e000      	b.n	8016828 <uxr_write_framed_msg+0x160>
 8016826:	b160      	cbz	r0, 8016842 <uxr_write_framed_msg+0x17a>
 8016828:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801682c:	1b52      	subs	r2, r2, r5
 801682e:	4653      	mov	r3, sl
 8016830:	4638      	mov	r0, r7
 8016832:	4421      	add	r1, r4
 8016834:	47b0      	blx	r6
 8016836:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801683a:	4405      	add	r5, r0
 801683c:	4295      	cmp	r5, r2
 801683e:	d3f2      	bcc.n	8016826 <uxr_write_framed_msg+0x15e>
 8016840:	d066      	beq.n	8016910 <uxr_write_framed_msg+0x248>
 8016842:	2000      	movs	r0, #0
 8016844:	b003      	add	sp, #12
 8016846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801684a:	fa5f f188 	uxtb.w	r1, r8
 801684e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016852:	f8ad 8004 	strh.w	r8, [sp, #4]
 8016856:	f04f 0900 	mov.w	r9, #0
 801685a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801685e:	46c8      	mov	r8, r9
 8016860:	e013      	b.n	801688a <uxr_write_framed_msg+0x1c2>
 8016862:	2a29      	cmp	r2, #41	@ 0x29
 8016864:	d824      	bhi.n	80168b0 <uxr_write_framed_msg+0x1e8>
 8016866:	18a3      	adds	r3, r4, r2
 8016868:	3201      	adds	r2, #1
 801686a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801686e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016872:	f109 0901 	add.w	r9, r9, #1
 8016876:	f1b9 0f02 	cmp.w	r9, #2
 801687a:	d02d      	beq.n	80168d8 <uxr_write_framed_msg+0x210>
 801687c:	f109 0308 	add.w	r3, r9, #8
 8016880:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016884:	446b      	add	r3, sp
 8016886:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801688a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801688e:	2b01      	cmp	r3, #1
 8016890:	d8e7      	bhi.n	8016862 <uxr_write_framed_msg+0x19a>
 8016892:	1c53      	adds	r3, r2, #1
 8016894:	b2db      	uxtb	r3, r3
 8016896:	2b29      	cmp	r3, #41	@ 0x29
 8016898:	d80a      	bhi.n	80168b0 <uxr_write_framed_msg+0x1e8>
 801689a:	18a3      	adds	r3, r4, r2
 801689c:	f081 0120 	eor.w	r1, r1, #32
 80168a0:	3202      	adds	r2, #2
 80168a2:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 80168a6:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 80168aa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80168ae:	e7e0      	b.n	8016872 <uxr_write_framed_msg+0x1aa>
 80168b0:	2500      	movs	r5, #0
 80168b2:	e001      	b.n	80168b8 <uxr_write_framed_msg+0x1f0>
 80168b4:	2800      	cmp	r0, #0
 80168b6:	d0c4      	beq.n	8016842 <uxr_write_framed_msg+0x17a>
 80168b8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80168bc:	1b52      	subs	r2, r2, r5
 80168be:	4653      	mov	r3, sl
 80168c0:	4638      	mov	r0, r7
 80168c2:	4421      	add	r1, r4
 80168c4:	47b0      	blx	r6
 80168c6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80168ca:	4405      	add	r5, r0
 80168cc:	4295      	cmp	r5, r2
 80168ce:	d3f1      	bcc.n	80168b4 <uxr_write_framed_msg+0x1ec>
 80168d0:	d1b7      	bne.n	8016842 <uxr_write_framed_msg+0x17a>
 80168d2:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 80168d6:	e7d1      	b.n	801687c <uxr_write_framed_msg+0x1b4>
 80168d8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80168dc:	b19a      	cbz	r2, 8016906 <uxr_write_framed_msg+0x23e>
 80168de:	2500      	movs	r5, #0
 80168e0:	e001      	b.n	80168e6 <uxr_write_framed_msg+0x21e>
 80168e2:	2800      	cmp	r0, #0
 80168e4:	d0ad      	beq.n	8016842 <uxr_write_framed_msg+0x17a>
 80168e6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80168ea:	1b52      	subs	r2, r2, r5
 80168ec:	4653      	mov	r3, sl
 80168ee:	4638      	mov	r0, r7
 80168f0:	4421      	add	r1, r4
 80168f2:	47b0      	blx	r6
 80168f4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80168f8:	4405      	add	r5, r0
 80168fa:	4295      	cmp	r5, r2
 80168fc:	d3f1      	bcc.n	80168e2 <uxr_write_framed_msg+0x21a>
 80168fe:	d1a0      	bne.n	8016842 <uxr_write_framed_msg+0x17a>
 8016900:	2300      	movs	r3, #0
 8016902:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016908:	b298      	uxth	r0, r3
 801690a:	b003      	add	sp, #12
 801690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016910:	f04f 0300 	mov.w	r3, #0
 8016914:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016918:	e72a      	b.n	8016770 <uxr_write_framed_msg+0xa8>
 801691a:	217d      	movs	r1, #125	@ 0x7d
 801691c:	f082 0220 	eor.w	r2, r2, #32
 8016920:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8016924:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016928:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801692c:	2203      	movs	r2, #3
 801692e:	2901      	cmp	r1, #1
 8016930:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016934:	d803      	bhi.n	801693e <uxr_write_framed_msg+0x276>
 8016936:	2105      	movs	r1, #5
 8016938:	f04f 0c04 	mov.w	ip, #4
 801693c:	e737      	b.n	80167ae <uxr_write_framed_msg+0xe6>
 801693e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016940:	2104      	movs	r1, #4
 8016942:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8016946:	b2dd      	uxtb	r5, r3
 8016948:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801694c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8016950:	2a01      	cmp	r2, #1
 8016952:	f63f aee1 	bhi.w	8016718 <uxr_write_framed_msg+0x50>
 8016956:	e73c      	b.n	80167d2 <uxr_write_framed_msg+0x10a>
 8016958:	080197d8 	.word	0x080197d8

0801695c <uxr_framing_read_transport>:
 801695c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016960:	4604      	mov	r4, r0
 8016962:	b085      	sub	sp, #20
 8016964:	4692      	mov	sl, r2
 8016966:	4689      	mov	r9, r1
 8016968:	461d      	mov	r5, r3
 801696a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801696c:	f7fb fb98 	bl	80120a0 <uxr_millis>
 8016970:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8016974:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8016978:	4680      	mov	r8, r0
 801697a:	42ba      	cmp	r2, r7
 801697c:	d05f      	beq.n	8016a3e <uxr_framing_read_transport+0xe2>
 801697e:	d817      	bhi.n	80169b0 <uxr_framing_read_transport+0x54>
 8016980:	3f01      	subs	r7, #1
 8016982:	1aba      	subs	r2, r7, r2
 8016984:	2700      	movs	r7, #0
 8016986:	b2d2      	uxtb	r2, r2
 8016988:	42b2      	cmp	r2, r6
 801698a:	d81a      	bhi.n	80169c2 <uxr_framing_read_transport+0x66>
 801698c:	19d3      	adds	r3, r2, r7
 801698e:	42b3      	cmp	r3, r6
 8016990:	d852      	bhi.n	8016a38 <uxr_framing_read_transport+0xdc>
 8016992:	b9d2      	cbnz	r2, 80169ca <uxr_framing_read_transport+0x6e>
 8016994:	2600      	movs	r6, #0
 8016996:	f7fb fb83 	bl	80120a0 <uxr_millis>
 801699a:	682b      	ldr	r3, [r5, #0]
 801699c:	eba0 0008 	sub.w	r0, r0, r8
 80169a0:	1a1b      	subs	r3, r3, r0
 80169a2:	4630      	mov	r0, r6
 80169a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80169a8:	602b      	str	r3, [r5, #0]
 80169aa:	b005      	add	sp, #20
 80169ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169b0:	2f00      	cmp	r7, #0
 80169b2:	d060      	beq.n	8016a76 <uxr_framing_read_transport+0x11a>
 80169b4:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 80169b8:	3f01      	subs	r7, #1
 80169ba:	b2d2      	uxtb	r2, r2
 80169bc:	b2ff      	uxtb	r7, r7
 80169be:	42b2      	cmp	r2, r6
 80169c0:	d9e4      	bls.n	801698c <uxr_framing_read_transport+0x30>
 80169c2:	b2f2      	uxtb	r2, r6
 80169c4:	2700      	movs	r7, #0
 80169c6:	2a00      	cmp	r2, #0
 80169c8:	d0e4      	beq.n	8016994 <uxr_framing_read_transport+0x38>
 80169ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80169cc:	4650      	mov	r0, sl
 80169ce:	9203      	str	r2, [sp, #12]
 80169d0:	9300      	str	r3, [sp, #0]
 80169d2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80169d6:	682b      	ldr	r3, [r5, #0]
 80169d8:	3102      	adds	r1, #2
 80169da:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8016a80 <uxr_framing_read_transport+0x124>
 80169de:	4421      	add	r1, r4
 80169e0:	47c8      	blx	r9
 80169e2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80169e6:	4606      	mov	r6, r0
 80169e8:	4403      	add	r3, r0
 80169ea:	0859      	lsrs	r1, r3, #1
 80169ec:	fbab 2101 	umull	r2, r1, fp, r1
 80169f0:	222a      	movs	r2, #42	@ 0x2a
 80169f2:	0889      	lsrs	r1, r1, #2
 80169f4:	fb02 3111 	mls	r1, r2, r1, r3
 80169f8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80169fc:	2800      	cmp	r0, #0
 80169fe:	d0c9      	beq.n	8016994 <uxr_framing_read_transport+0x38>
 8016a00:	9a03      	ldr	r2, [sp, #12]
 8016a02:	4290      	cmp	r0, r2
 8016a04:	d1c7      	bne.n	8016996 <uxr_framing_read_transport+0x3a>
 8016a06:	2f00      	cmp	r7, #0
 8016a08:	d0c5      	beq.n	8016996 <uxr_framing_read_transport+0x3a>
 8016a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a0c:	3102      	adds	r1, #2
 8016a0e:	463a      	mov	r2, r7
 8016a10:	4650      	mov	r0, sl
 8016a12:	4421      	add	r1, r4
 8016a14:	9300      	str	r3, [sp, #0]
 8016a16:	2300      	movs	r3, #0
 8016a18:	47c8      	blx	r9
 8016a1a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8016a1e:	4406      	add	r6, r0
 8016a20:	1813      	adds	r3, r2, r0
 8016a22:	085a      	lsrs	r2, r3, #1
 8016a24:	fbab 1b02 	umull	r1, fp, fp, r2
 8016a28:	222a      	movs	r2, #42	@ 0x2a
 8016a2a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8016a2e:	fb02 331b 	mls	r3, r2, fp, r3
 8016a32:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016a36:	e7ae      	b.n	8016996 <uxr_framing_read_transport+0x3a>
 8016a38:	1ab6      	subs	r6, r6, r2
 8016a3a:	b2f7      	uxtb	r7, r6
 8016a3c:	e7a9      	b.n	8016992 <uxr_framing_read_transport+0x36>
 8016a3e:	2300      	movs	r3, #0
 8016a40:	2e28      	cmp	r6, #40	@ 0x28
 8016a42:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8016a44:	d9bd      	bls.n	80169c2 <uxr_framing_read_transport+0x66>
 8016a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a48:	2229      	movs	r2, #41	@ 0x29
 8016a4a:	1ca1      	adds	r1, r4, #2
 8016a4c:	4650      	mov	r0, sl
 8016a4e:	9300      	str	r3, [sp, #0]
 8016a50:	682b      	ldr	r3, [r5, #0]
 8016a52:	47c8      	blx	r9
 8016a54:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016a58:	4606      	mov	r6, r0
 8016a5a:	212a      	movs	r1, #42	@ 0x2a
 8016a5c:	4403      	add	r3, r0
 8016a5e:	4808      	ldr	r0, [pc, #32]	@ (8016a80 <uxr_framing_read_transport+0x124>)
 8016a60:	085a      	lsrs	r2, r3, #1
 8016a62:	fba0 0202 	umull	r0, r2, r0, r2
 8016a66:	0892      	lsrs	r2, r2, #2
 8016a68:	fb01 3312 	mls	r3, r1, r2, r3
 8016a6c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016a70:	2e00      	cmp	r6, #0
 8016a72:	d08f      	beq.n	8016994 <uxr_framing_read_transport+0x38>
 8016a74:	e78f      	b.n	8016996 <uxr_framing_read_transport+0x3a>
 8016a76:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8016a7a:	b2d2      	uxtb	r2, r2
 8016a7c:	e784      	b.n	8016988 <uxr_framing_read_transport+0x2c>
 8016a7e:	bf00      	nop
 8016a80:	30c30c31 	.word	0x30c30c31

08016a84 <uxr_read_framed_msg>:
 8016a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a88:	461e      	mov	r6, r3
 8016a8a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8016a8e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8016a92:	b083      	sub	sp, #12
 8016a94:	4604      	mov	r4, r0
 8016a96:	4688      	mov	r8, r1
 8016a98:	429d      	cmp	r5, r3
 8016a9a:	4691      	mov	r9, r2
 8016a9c:	f000 818c 	beq.w	8016db8 <uxr_read_framed_msg+0x334>
 8016aa0:	7823      	ldrb	r3, [r4, #0]
 8016aa2:	4dc3      	ldr	r5, [pc, #780]	@ (8016db0 <uxr_read_framed_msg+0x32c>)
 8016aa4:	4fc3      	ldr	r7, [pc, #780]	@ (8016db4 <uxr_read_framed_msg+0x330>)
 8016aa6:	2b07      	cmp	r3, #7
 8016aa8:	d8fd      	bhi.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016aaa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016aae:	011c      	.short	0x011c
 8016ab0:	00d900fb 	.word	0x00d900fb
 8016ab4:	008f00ba 	.word	0x008f00ba
 8016ab8:	00320051 	.word	0x00320051
 8016abc:	0008      	.short	0x0008
 8016abe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016ac2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016ac6:	4299      	cmp	r1, r3
 8016ac8:	f000 814d 	beq.w	8016d66 <uxr_read_framed_msg+0x2e2>
 8016acc:	18e2      	adds	r2, r4, r3
 8016ace:	7892      	ldrb	r2, [r2, #2]
 8016ad0:	2a7d      	cmp	r2, #125	@ 0x7d
 8016ad2:	f000 81b8 	beq.w	8016e46 <uxr_read_framed_msg+0x3c2>
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	212a      	movs	r1, #42	@ 0x2a
 8016ada:	2a7e      	cmp	r2, #126	@ 0x7e
 8016adc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8016ae0:	fba5 c000 	umull	ip, r0, r5, r0
 8016ae4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016ae8:	fb01 3310 	mls	r3, r1, r0, r3
 8016aec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016af0:	f000 8257 	beq.w	8016fa2 <uxr_read_framed_msg+0x51e>
 8016af4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016af6:	2000      	movs	r0, #0
 8016af8:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8016afa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016afe:	7020      	strb	r0, [r4, #0]
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	4299      	cmp	r1, r3
 8016b04:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016b06:	f000 8178 	beq.w	8016dfa <uxr_read_framed_msg+0x376>
 8016b0a:	2000      	movs	r0, #0
 8016b0c:	b003      	add	sp, #12
 8016b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b12:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016b16:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016b1a:	4298      	cmp	r0, r3
 8016b1c:	f000 8132 	beq.w	8016d84 <uxr_read_framed_msg+0x300>
 8016b20:	18e2      	adds	r2, r4, r3
 8016b22:	7891      	ldrb	r1, [r2, #2]
 8016b24:	297d      	cmp	r1, #125	@ 0x7d
 8016b26:	f000 8170 	beq.w	8016e0a <uxr_read_framed_msg+0x386>
 8016b2a:	3301      	adds	r3, #1
 8016b2c:	202a      	movs	r0, #42	@ 0x2a
 8016b2e:	297e      	cmp	r1, #126	@ 0x7e
 8016b30:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016b34:	fba5 c202 	umull	ip, r2, r5, r2
 8016b38:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016b3c:	fb00 3312 	mls	r3, r0, r2, r3
 8016b40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016b44:	f000 821d 	beq.w	8016f82 <uxr_read_framed_msg+0x4fe>
 8016b48:	2307      	movs	r3, #7
 8016b4a:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8016b4c:	7023      	strb	r3, [r4, #0]
 8016b4e:	e7aa      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016b50:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016b52:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016b56:	459e      	cmp	lr, r3
 8016b58:	d827      	bhi.n	8016baa <uxr_read_framed_msg+0x126>
 8016b5a:	e032      	b.n	8016bc2 <uxr_read_framed_msg+0x13e>
 8016b5c:	fba5 b101 	umull	fp, r1, r5, r1
 8016b60:	f89c c002 	ldrb.w	ip, [ip, #2]
 8016b64:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8016b68:	0889      	lsrs	r1, r1, #2
 8016b6a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8016b6e:	fb0b 0111 	mls	r1, fp, r1, r0
 8016b72:	f000 80d4 	beq.w	8016d1e <uxr_read_framed_msg+0x29a>
 8016b76:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016b7a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8016b7e:	f000 80cb 	beq.w	8016d18 <uxr_read_framed_msg+0x294>
 8016b82:	f806 c003 	strb.w	ip, [r6, r3]
 8016b86:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8016b88:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016b8a:	ea80 010c 	eor.w	r1, r0, ip
 8016b8e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016b92:	3301      	adds	r3, #1
 8016b94:	b2c9      	uxtb	r1, r1
 8016b96:	b29b      	uxth	r3, r3
 8016b98:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8016b9c:	4573      	cmp	r3, lr
 8016b9e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8016ba0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8016ba4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8016ba6:	f080 811d 	bcs.w	8016de4 <uxr_read_framed_msg+0x360>
 8016baa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016bae:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8016bb2:	1c50      	adds	r0, r2, #1
 8016bb4:	eb04 0c02 	add.w	ip, r4, r2
 8016bb8:	4592      	cmp	sl, r2
 8016bba:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8016bbe:	d1cd      	bne.n	8016b5c <uxr_read_framed_msg+0xd8>
 8016bc0:	459e      	cmp	lr, r3
 8016bc2:	f040 8114 	bne.w	8016dee <uxr_read_framed_msg+0x36a>
 8016bc6:	2306      	movs	r3, #6
 8016bc8:	7023      	strb	r3, [r4, #0]
 8016bca:	e76c      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016bcc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016bd0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016bd4:	4298      	cmp	r0, r3
 8016bd6:	f000 80c6 	beq.w	8016d66 <uxr_read_framed_msg+0x2e2>
 8016bda:	18e2      	adds	r2, r4, r3
 8016bdc:	7891      	ldrb	r1, [r2, #2]
 8016bde:	297d      	cmp	r1, #125	@ 0x7d
 8016be0:	f000 8193 	beq.w	8016f0a <uxr_read_framed_msg+0x486>
 8016be4:	3301      	adds	r3, #1
 8016be6:	202a      	movs	r0, #42	@ 0x2a
 8016be8:	297e      	cmp	r1, #126	@ 0x7e
 8016bea:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016bee:	fba5 c202 	umull	ip, r2, r5, r2
 8016bf2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016bf6:	fb00 3312 	mls	r3, r0, r2, r3
 8016bfa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016bfe:	f000 81d0 	beq.w	8016fa2 <uxr_read_framed_msg+0x51e>
 8016c02:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016c04:	2000      	movs	r0, #0
 8016c06:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016c0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016c0c:	8660      	strh	r0, [r4, #50]	@ 0x32
 8016c0e:	b29b      	uxth	r3, r3
 8016c10:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8016c12:	428b      	cmp	r3, r1
 8016c14:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016c16:	f240 80e2 	bls.w	8016dde <uxr_read_framed_msg+0x35a>
 8016c1a:	7020      	strb	r0, [r4, #0]
 8016c1c:	b003      	add	sp, #12
 8016c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c22:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016c26:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016c2a:	4298      	cmp	r0, r3
 8016c2c:	f000 80aa 	beq.w	8016d84 <uxr_read_framed_msg+0x300>
 8016c30:	18e2      	adds	r2, r4, r3
 8016c32:	7891      	ldrb	r1, [r2, #2]
 8016c34:	297d      	cmp	r1, #125	@ 0x7d
 8016c36:	f000 8186 	beq.w	8016f46 <uxr_read_framed_msg+0x4c2>
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	202a      	movs	r0, #42	@ 0x2a
 8016c3e:	297e      	cmp	r1, #126	@ 0x7e
 8016c40:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016c44:	fba5 c202 	umull	ip, r2, r5, r2
 8016c48:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016c4c:	fb00 3312 	mls	r3, r0, r2, r3
 8016c50:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016c54:	f000 8195 	beq.w	8016f82 <uxr_read_framed_msg+0x4fe>
 8016c58:	2304      	movs	r3, #4
 8016c5a:	8621      	strh	r1, [r4, #48]	@ 0x30
 8016c5c:	7023      	strb	r3, [r4, #0]
 8016c5e:	e722      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016c60:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016c64:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016c68:	4290      	cmp	r0, r2
 8016c6a:	f000 80b4 	beq.w	8016dd6 <uxr_read_framed_msg+0x352>
 8016c6e:	18a3      	adds	r3, r4, r2
 8016c70:	7899      	ldrb	r1, [r3, #2]
 8016c72:	297d      	cmp	r1, #125	@ 0x7d
 8016c74:	f000 8107 	beq.w	8016e86 <uxr_read_framed_msg+0x402>
 8016c78:	3201      	adds	r2, #1
 8016c7a:	232a      	movs	r3, #42	@ 0x2a
 8016c7c:	297e      	cmp	r1, #126	@ 0x7e
 8016c7e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8016c82:	fba5 c000 	umull	ip, r0, r5, r0
 8016c86:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016c8a:	fb03 2210 	mls	r2, r3, r0, r2
 8016c8e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016c92:	f000 818a 	beq.w	8016faa <uxr_read_framed_msg+0x526>
 8016c96:	7863      	ldrb	r3, [r4, #1]
 8016c98:	428b      	cmp	r3, r1
 8016c9a:	bf0c      	ite	eq
 8016c9c:	2303      	moveq	r3, #3
 8016c9e:	2300      	movne	r3, #0
 8016ca0:	7023      	strb	r3, [r4, #0]
 8016ca2:	e700      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016caa:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8016cae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016cb2:	4299      	cmp	r1, r3
 8016cb4:	d06a      	beq.n	8016d8c <uxr_read_framed_msg+0x308>
 8016cb6:	18e2      	adds	r2, r4, r3
 8016cb8:	7890      	ldrb	r0, [r2, #2]
 8016cba:	287d      	cmp	r0, #125	@ 0x7d
 8016cbc:	f000 8100 	beq.w	8016ec0 <uxr_read_framed_msg+0x43c>
 8016cc0:	3301      	adds	r3, #1
 8016cc2:	212a      	movs	r1, #42	@ 0x2a
 8016cc4:	287e      	cmp	r0, #126	@ 0x7e
 8016cc6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016cca:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016cce:	fba5 c202 	umull	ip, r2, r5, r2
 8016cd2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016cd6:	fb01 3312 	mls	r3, r1, r2, r3
 8016cda:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016cde:	d055      	beq.n	8016d8c <uxr_read_framed_msg+0x308>
 8016ce0:	2302      	movs	r3, #2
 8016ce2:	7023      	strb	r3, [r4, #0]
 8016ce4:	e6df      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016ce6:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8016cea:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8016cee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016cf2:	1c5a      	adds	r2, r3, #1
 8016cf4:	459c      	cmp	ip, r3
 8016cf6:	eb04 0103 	add.w	r1, r4, r3
 8016cfa:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8016cfe:	f43f af04 	beq.w	8016b0a <uxr_read_framed_msg+0x86>
 8016d02:	fba5 0303 	umull	r0, r3, r5, r3
 8016d06:	7889      	ldrb	r1, [r1, #2]
 8016d08:	089b      	lsrs	r3, r3, #2
 8016d0a:	297e      	cmp	r1, #126	@ 0x7e
 8016d0c:	fb0e 2313 	mls	r3, lr, r3, r2
 8016d10:	b2db      	uxtb	r3, r3
 8016d12:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016d16:	d1ec      	bne.n	8016cf2 <uxr_read_framed_msg+0x26e>
 8016d18:	2301      	movs	r3, #1
 8016d1a:	7023      	strb	r3, [r4, #0]
 8016d1c:	e6c3      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016d1e:	1c50      	adds	r0, r2, #1
 8016d20:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8016d24:	3202      	adds	r2, #2
 8016d26:	0841      	lsrs	r1, r0, #1
 8016d28:	fba5 c101 	umull	ip, r1, r5, r1
 8016d2c:	0889      	lsrs	r1, r1, #2
 8016d2e:	fb0b 0111 	mls	r1, fp, r1, r0
 8016d32:	1860      	adds	r0, r4, r1
 8016d34:	b2c9      	uxtb	r1, r1
 8016d36:	458a      	cmp	sl, r1
 8016d38:	f43f af42 	beq.w	8016bc0 <uxr_read_framed_msg+0x13c>
 8016d3c:	0851      	lsrs	r1, r2, #1
 8016d3e:	7880      	ldrb	r0, [r0, #2]
 8016d40:	fba5 a101 	umull	sl, r1, r5, r1
 8016d44:	287e      	cmp	r0, #126	@ 0x7e
 8016d46:	f080 0c20 	eor.w	ip, r0, #32
 8016d4a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8016d4e:	fb0b 2211 	mls	r2, fp, r1, r2
 8016d52:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016d56:	f47f af14 	bne.w	8016b82 <uxr_read_framed_msg+0xfe>
 8016d5a:	459e      	cmp	lr, r3
 8016d5c:	f43f af33 	beq.w	8016bc6 <uxr_read_framed_msg+0x142>
 8016d60:	2301      	movs	r3, #1
 8016d62:	7023      	strb	r3, [r4, #0]
 8016d64:	e69f      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016d66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d68:	9300      	str	r3, [sp, #0]
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	9301      	str	r3, [sp, #4]
 8016d6e:	464a      	mov	r2, r9
 8016d70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d72:	4641      	mov	r1, r8
 8016d74:	4620      	mov	r0, r4
 8016d76:	f7ff fdf1 	bl	801695c <uxr_framing_read_transport>
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	f43f aec5 	beq.w	8016b0a <uxr_read_framed_msg+0x86>
 8016d80:	7823      	ldrb	r3, [r4, #0]
 8016d82:	e690      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d86:	9300      	str	r3, [sp, #0]
 8016d88:	2302      	movs	r3, #2
 8016d8a:	e7ef      	b.n	8016d6c <uxr_read_framed_msg+0x2e8>
 8016d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d8e:	464a      	mov	r2, r9
 8016d90:	4641      	mov	r1, r8
 8016d92:	4620      	mov	r0, r4
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	2304      	movs	r3, #4
 8016d98:	9301      	str	r3, [sp, #4]
 8016d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d9c:	f7ff fdde 	bl	801695c <uxr_framing_read_transport>
 8016da0:	2800      	cmp	r0, #0
 8016da2:	d1ed      	bne.n	8016d80 <uxr_read_framed_msg+0x2fc>
 8016da4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016da8:	2b7e      	cmp	r3, #126	@ 0x7e
 8016daa:	d0e9      	beq.n	8016d80 <uxr_read_framed_msg+0x2fc>
 8016dac:	e6ad      	b.n	8016b0a <uxr_read_framed_msg+0x86>
 8016dae:	bf00      	nop
 8016db0:	30c30c31 	.word	0x30c30c31
 8016db4:	080197d8 	.word	0x080197d8
 8016db8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dba:	9300      	str	r3, [sp, #0]
 8016dbc:	2305      	movs	r3, #5
 8016dbe:	9301      	str	r3, [sp, #4]
 8016dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016dc2:	f7ff fdcb 	bl	801695c <uxr_framing_read_transport>
 8016dc6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016dca:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	f43f ae9b 	beq.w	8016b0a <uxr_read_framed_msg+0x86>
 8016dd4:	e664      	b.n	8016aa0 <uxr_read_framed_msg+0x1c>
 8016dd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dd8:	9300      	str	r3, [sp, #0]
 8016dda:	2303      	movs	r3, #3
 8016ddc:	e7c6      	b.n	8016d6c <uxr_read_framed_msg+0x2e8>
 8016dde:	2305      	movs	r3, #5
 8016de0:	7023      	strb	r3, [r4, #0]
 8016de2:	e660      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016de4:	f43f aeef 	beq.w	8016bc6 <uxr_read_framed_msg+0x142>
 8016de8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016dec:	d094      	beq.n	8016d18 <uxr_read_framed_msg+0x294>
 8016dee:	ebae 0303 	sub.w	r3, lr, r3
 8016df2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016df4:	3302      	adds	r3, #2
 8016df6:	9200      	str	r2, [sp, #0]
 8016df8:	e7b8      	b.n	8016d6c <uxr_read_framed_msg+0x2e8>
 8016dfa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016dfe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016e00:	7013      	strb	r3, [r2, #0]
 8016e02:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016e04:	b003      	add	sp, #12
 8016e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e0a:	1c59      	adds	r1, r3, #1
 8016e0c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016e10:	084a      	lsrs	r2, r1, #1
 8016e12:	fba5 e202 	umull	lr, r2, r5, r2
 8016e16:	0892      	lsrs	r2, r2, #2
 8016e18:	fb0c 1212 	mls	r2, ip, r2, r1
 8016e1c:	b2d1      	uxtb	r1, r2
 8016e1e:	4288      	cmp	r0, r1
 8016e20:	d0b0      	beq.n	8016d84 <uxr_read_framed_msg+0x300>
 8016e22:	3302      	adds	r3, #2
 8016e24:	4422      	add	r2, r4
 8016e26:	7891      	ldrb	r1, [r2, #2]
 8016e28:	085a      	lsrs	r2, r3, #1
 8016e2a:	fba5 0202 	umull	r0, r2, r5, r2
 8016e2e:	297e      	cmp	r1, #126	@ 0x7e
 8016e30:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016e34:	fb0c 3312 	mls	r3, ip, r2, r3
 8016e38:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016e3c:	f000 80a1 	beq.w	8016f82 <uxr_read_framed_msg+0x4fe>
 8016e40:	f081 0120 	eor.w	r1, r1, #32
 8016e44:	e680      	b.n	8016b48 <uxr_read_framed_msg+0xc4>
 8016e46:	f103 0c01 	add.w	ip, r3, #1
 8016e4a:	202a      	movs	r0, #42	@ 0x2a
 8016e4c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016e50:	fba5 e202 	umull	lr, r2, r5, r2
 8016e54:	0892      	lsrs	r2, r2, #2
 8016e56:	fb00 c212 	mls	r2, r0, r2, ip
 8016e5a:	fa5f fc82 	uxtb.w	ip, r2
 8016e5e:	4561      	cmp	r1, ip
 8016e60:	d081      	beq.n	8016d66 <uxr_read_framed_msg+0x2e2>
 8016e62:	3302      	adds	r3, #2
 8016e64:	4422      	add	r2, r4
 8016e66:	0859      	lsrs	r1, r3, #1
 8016e68:	7892      	ldrb	r2, [r2, #2]
 8016e6a:	fba5 c101 	umull	ip, r1, r5, r1
 8016e6e:	2a7e      	cmp	r2, #126	@ 0x7e
 8016e70:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8016e74:	fb00 3311 	mls	r3, r0, r1, r3
 8016e78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016e7c:	f000 8091 	beq.w	8016fa2 <uxr_read_framed_msg+0x51e>
 8016e80:	f082 0220 	eor.w	r2, r2, #32
 8016e84:	e636      	b.n	8016af4 <uxr_read_framed_msg+0x70>
 8016e86:	1c51      	adds	r1, r2, #1
 8016e88:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016e8c:	084b      	lsrs	r3, r1, #1
 8016e8e:	fba5 e303 	umull	lr, r3, r5, r3
 8016e92:	089b      	lsrs	r3, r3, #2
 8016e94:	fb0c 1313 	mls	r3, ip, r3, r1
 8016e98:	b2d9      	uxtb	r1, r3
 8016e9a:	4288      	cmp	r0, r1
 8016e9c:	d09b      	beq.n	8016dd6 <uxr_read_framed_msg+0x352>
 8016e9e:	3202      	adds	r2, #2
 8016ea0:	4423      	add	r3, r4
 8016ea2:	0850      	lsrs	r0, r2, #1
 8016ea4:	789b      	ldrb	r3, [r3, #2]
 8016ea6:	fba5 1000 	umull	r1, r0, r5, r0
 8016eaa:	2b7e      	cmp	r3, #126	@ 0x7e
 8016eac:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016eb0:	fb0c 2210 	mls	r2, ip, r0, r2
 8016eb4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016eb8:	d077      	beq.n	8016faa <uxr_read_framed_msg+0x526>
 8016eba:	f083 0120 	eor.w	r1, r3, #32
 8016ebe:	e6ea      	b.n	8016c96 <uxr_read_framed_msg+0x212>
 8016ec0:	f103 0c01 	add.w	ip, r3, #1
 8016ec4:	202a      	movs	r0, #42	@ 0x2a
 8016ec6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016eca:	fba5 e202 	umull	lr, r2, r5, r2
 8016ece:	0892      	lsrs	r2, r2, #2
 8016ed0:	fb00 c212 	mls	r2, r0, r2, ip
 8016ed4:	fa5f fc82 	uxtb.w	ip, r2
 8016ed8:	4561      	cmp	r1, ip
 8016eda:	f43f af57 	beq.w	8016d8c <uxr_read_framed_msg+0x308>
 8016ede:	3302      	adds	r3, #2
 8016ee0:	4422      	add	r2, r4
 8016ee2:	7891      	ldrb	r1, [r2, #2]
 8016ee4:	085a      	lsrs	r2, r3, #1
 8016ee6:	fba5 c202 	umull	ip, r2, r5, r2
 8016eea:	297e      	cmp	r1, #126	@ 0x7e
 8016eec:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016ef0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016ef4:	fb00 3312 	mls	r3, r0, r2, r3
 8016ef8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016efc:	f43f af46 	beq.w	8016d8c <uxr_read_framed_msg+0x308>
 8016f00:	f081 0120 	eor.w	r1, r1, #32
 8016f04:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016f08:	e6ea      	b.n	8016ce0 <uxr_read_framed_msg+0x25c>
 8016f0a:	1c59      	adds	r1, r3, #1
 8016f0c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016f10:	084a      	lsrs	r2, r1, #1
 8016f12:	fba5 e202 	umull	lr, r2, r5, r2
 8016f16:	0892      	lsrs	r2, r2, #2
 8016f18:	fb0c 1212 	mls	r2, ip, r2, r1
 8016f1c:	b2d1      	uxtb	r1, r2
 8016f1e:	4288      	cmp	r0, r1
 8016f20:	f43f af21 	beq.w	8016d66 <uxr_read_framed_msg+0x2e2>
 8016f24:	3302      	adds	r3, #2
 8016f26:	4422      	add	r2, r4
 8016f28:	7891      	ldrb	r1, [r2, #2]
 8016f2a:	085a      	lsrs	r2, r3, #1
 8016f2c:	fba5 0202 	umull	r0, r2, r5, r2
 8016f30:	297e      	cmp	r1, #126	@ 0x7e
 8016f32:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016f36:	fb0c 3312 	mls	r3, ip, r2, r3
 8016f3a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016f3e:	d030      	beq.n	8016fa2 <uxr_read_framed_msg+0x51e>
 8016f40:	f081 0120 	eor.w	r1, r1, #32
 8016f44:	e65d      	b.n	8016c02 <uxr_read_framed_msg+0x17e>
 8016f46:	1c59      	adds	r1, r3, #1
 8016f48:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016f4c:	084a      	lsrs	r2, r1, #1
 8016f4e:	fba5 e202 	umull	lr, r2, r5, r2
 8016f52:	0892      	lsrs	r2, r2, #2
 8016f54:	fb0c 1212 	mls	r2, ip, r2, r1
 8016f58:	b2d1      	uxtb	r1, r2
 8016f5a:	4288      	cmp	r0, r1
 8016f5c:	f43f af12 	beq.w	8016d84 <uxr_read_framed_msg+0x300>
 8016f60:	3302      	adds	r3, #2
 8016f62:	4422      	add	r2, r4
 8016f64:	7891      	ldrb	r1, [r2, #2]
 8016f66:	085a      	lsrs	r2, r3, #1
 8016f68:	fba5 0202 	umull	r0, r2, r5, r2
 8016f6c:	297e      	cmp	r1, #126	@ 0x7e
 8016f6e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016f72:	fb0c 3312 	mls	r3, ip, r2, r3
 8016f76:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016f7a:	d002      	beq.n	8016f82 <uxr_read_framed_msg+0x4fe>
 8016f7c:	f081 0120 	eor.w	r1, r1, #32
 8016f80:	e66a      	b.n	8016c58 <uxr_read_framed_msg+0x1d4>
 8016f82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f84:	9300      	str	r3, [sp, #0]
 8016f86:	2302      	movs	r3, #2
 8016f88:	9301      	str	r3, [sp, #4]
 8016f8a:	464a      	mov	r2, r9
 8016f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f8e:	4641      	mov	r1, r8
 8016f90:	4620      	mov	r0, r4
 8016f92:	f7ff fce3 	bl	801695c <uxr_framing_read_transport>
 8016f96:	2800      	cmp	r0, #0
 8016f98:	f47f aef2 	bne.w	8016d80 <uxr_read_framed_msg+0x2fc>
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	7023      	strb	r3, [r4, #0]
 8016fa0:	e581      	b.n	8016aa6 <uxr_read_framed_msg+0x22>
 8016fa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fa4:	9300      	str	r3, [sp, #0]
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	e7ee      	b.n	8016f88 <uxr_read_framed_msg+0x504>
 8016faa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fac:	9300      	str	r3, [sp, #0]
 8016fae:	2303      	movs	r3, #3
 8016fb0:	e7ea      	b.n	8016f88 <uxr_read_framed_msg+0x504>
 8016fb2:	bf00      	nop

08016fb4 <rcl_get_default_domain_id>:
 8016fb4:	b530      	push	{r4, r5, lr}
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	b083      	sub	sp, #12
 8016fba:	9300      	str	r3, [sp, #0]
 8016fbc:	b1d0      	cbz	r0, 8016ff4 <rcl_get_default_domain_id+0x40>
 8016fbe:	4604      	mov	r4, r0
 8016fc0:	4669      	mov	r1, sp
 8016fc2:	4815      	ldr	r0, [pc, #84]	@ (8017018 <rcl_get_default_domain_id+0x64>)
 8016fc4:	f7fd f91c 	bl	8014200 <rcutils_get_env>
 8016fc8:	4602      	mov	r2, r0
 8016fca:	b110      	cbz	r0, 8016fd2 <rcl_get_default_domain_id+0x1e>
 8016fcc:	2001      	movs	r0, #1
 8016fce:	b003      	add	sp, #12
 8016fd0:	bd30      	pop	{r4, r5, pc}
 8016fd2:	9b00      	ldr	r3, [sp, #0]
 8016fd4:	b18b      	cbz	r3, 8016ffa <rcl_get_default_domain_id+0x46>
 8016fd6:	7818      	ldrb	r0, [r3, #0]
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d0f8      	beq.n	8016fce <rcl_get_default_domain_id+0x1a>
 8016fdc:	a901      	add	r1, sp, #4
 8016fde:	4618      	mov	r0, r3
 8016fe0:	9201      	str	r2, [sp, #4]
 8016fe2:	f000 fe75 	bl	8017cd0 <strtoul>
 8016fe6:	4605      	mov	r5, r0
 8016fe8:	b150      	cbz	r0, 8017000 <rcl_get_default_domain_id+0x4c>
 8016fea:	1c43      	adds	r3, r0, #1
 8016fec:	d00d      	beq.n	801700a <rcl_get_default_domain_id+0x56>
 8016fee:	2000      	movs	r0, #0
 8016ff0:	6025      	str	r5, [r4, #0]
 8016ff2:	e7ec      	b.n	8016fce <rcl_get_default_domain_id+0x1a>
 8016ff4:	200b      	movs	r0, #11
 8016ff6:	b003      	add	sp, #12
 8016ff8:	bd30      	pop	{r4, r5, pc}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	b003      	add	sp, #12
 8016ffe:	bd30      	pop	{r4, r5, pc}
 8017000:	9b01      	ldr	r3, [sp, #4]
 8017002:	781b      	ldrb	r3, [r3, #0]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d0f2      	beq.n	8016fee <rcl_get_default_domain_id+0x3a>
 8017008:	e7e0      	b.n	8016fcc <rcl_get_default_domain_id+0x18>
 801700a:	f001 f8c7 	bl	801819c <__errno>
 801700e:	6803      	ldr	r3, [r0, #0]
 8017010:	2b22      	cmp	r3, #34	@ 0x22
 8017012:	d1ec      	bne.n	8016fee <rcl_get_default_domain_id+0x3a>
 8017014:	e7da      	b.n	8016fcc <rcl_get_default_domain_id+0x18>
 8017016:	bf00      	nop
 8017018:	080199d8 	.word	0x080199d8

0801701c <rcl_expand_topic_name>:
 801701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017020:	b08d      	sub	sp, #52	@ 0x34
 8017022:	4698      	mov	r8, r3
 8017024:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8017026:	9207      	str	r2, [sp, #28]
 8017028:	2b00      	cmp	r3, #0
 801702a:	bf18      	it	ne
 801702c:	f1b8 0f00 	cmpne.w	r8, #0
 8017030:	bf0c      	ite	eq
 8017032:	2301      	moveq	r3, #1
 8017034:	2300      	movne	r3, #0
 8017036:	2a00      	cmp	r2, #0
 8017038:	bf08      	it	eq
 801703a:	f043 0301 	orreq.w	r3, r3, #1
 801703e:	2900      	cmp	r1, #0
 8017040:	bf08      	it	eq
 8017042:	f043 0301 	orreq.w	r3, r3, #1
 8017046:	2b00      	cmp	r3, #0
 8017048:	d13d      	bne.n	80170c6 <rcl_expand_topic_name+0xaa>
 801704a:	fab0 f280 	clz	r2, r0
 801704e:	4604      	mov	r4, r0
 8017050:	0952      	lsrs	r2, r2, #5
 8017052:	2800      	cmp	r0, #0
 8017054:	d037      	beq.n	80170c6 <rcl_expand_topic_name+0xaa>
 8017056:	460f      	mov	r7, r1
 8017058:	a90b      	add	r1, sp, #44	@ 0x2c
 801705a:	f000 f9ed 	bl	8017438 <rcl_validate_topic_name>
 801705e:	4605      	mov	r5, r0
 8017060:	bb68      	cbnz	r0, 80170be <rcl_expand_topic_name+0xa2>
 8017062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017064:	2b00      	cmp	r3, #0
 8017066:	d137      	bne.n	80170d8 <rcl_expand_topic_name+0xbc>
 8017068:	4602      	mov	r2, r0
 801706a:	a90b      	add	r1, sp, #44	@ 0x2c
 801706c:	4638      	mov	r0, r7
 801706e:	f7fd fcf9 	bl	8014a64 <rmw_validate_node_name>
 8017072:	bb68      	cbnz	r0, 80170d0 <rcl_expand_topic_name+0xb4>
 8017074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017076:	2b00      	cmp	r3, #0
 8017078:	d133      	bne.n	80170e2 <rcl_expand_topic_name+0xc6>
 801707a:	462a      	mov	r2, r5
 801707c:	a90b      	add	r1, sp, #44	@ 0x2c
 801707e:	9807      	ldr	r0, [sp, #28]
 8017080:	f7fd fcd2 	bl	8014a28 <rmw_validate_namespace>
 8017084:	bb20      	cbnz	r0, 80170d0 <rcl_expand_topic_name+0xb4>
 8017086:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8017088:	2d00      	cmp	r5, #0
 801708a:	f040 80a2 	bne.w	80171d2 <rcl_expand_topic_name+0x1b6>
 801708e:	217b      	movs	r1, #123	@ 0x7b
 8017090:	4620      	mov	r0, r4
 8017092:	f000 ffa1 	bl	8017fd8 <strchr>
 8017096:	7823      	ldrb	r3, [r4, #0]
 8017098:	4681      	mov	r9, r0
 801709a:	bb20      	cbnz	r0, 80170e6 <rcl_expand_topic_name+0xca>
 801709c:	2b2f      	cmp	r3, #47	@ 0x2f
 801709e:	d122      	bne.n	80170e6 <rcl_expand_topic_name+0xca>
 80170a0:	ab19      	add	r3, sp, #100	@ 0x64
 80170a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80170a6:	ab16      	add	r3, sp, #88	@ 0x58
 80170a8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80170ac:	4620      	mov	r0, r4
 80170ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80170b0:	f7fd fa08 	bl	80144c4 <rcutils_strdup>
 80170b4:	2800      	cmp	r0, #0
 80170b6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80170b8:	bf08      	it	eq
 80170ba:	250a      	moveq	r5, #10
 80170bc:	6018      	str	r0, [r3, #0]
 80170be:	4628      	mov	r0, r5
 80170c0:	b00d      	add	sp, #52	@ 0x34
 80170c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170c6:	250b      	movs	r5, #11
 80170c8:	4628      	mov	r0, r5
 80170ca:	b00d      	add	sp, #52	@ 0x34
 80170cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d0:	f7fc f926 	bl	8013320 <rcl_convert_rmw_ret_to_rcl_ret>
 80170d4:	4605      	mov	r5, r0
 80170d6:	e7f2      	b.n	80170be <rcl_expand_topic_name+0xa2>
 80170d8:	2567      	movs	r5, #103	@ 0x67
 80170da:	4628      	mov	r0, r5
 80170dc:	b00d      	add	sp, #52	@ 0x34
 80170de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170e2:	25c9      	movs	r5, #201	@ 0xc9
 80170e4:	e7eb      	b.n	80170be <rcl_expand_topic_name+0xa2>
 80170e6:	2b7e      	cmp	r3, #126	@ 0x7e
 80170e8:	d075      	beq.n	80171d6 <rcl_expand_topic_name+0x1ba>
 80170ea:	f1b9 0f00 	cmp.w	r9, #0
 80170ee:	f000 80c2 	beq.w	8017276 <rcl_expand_topic_name+0x25a>
 80170f2:	2300      	movs	r3, #0
 80170f4:	46a2      	mov	sl, r4
 80170f6:	461e      	mov	r6, r3
 80170f8:	9508      	str	r5, [sp, #32]
 80170fa:	4655      	mov	r5, sl
 80170fc:	9409      	str	r4, [sp, #36]	@ 0x24
 80170fe:	46b2      	mov	sl, r6
 8017100:	464c      	mov	r4, r9
 8017102:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8017106:	2c00      	cmp	r4, #0
 8017108:	f000 80ae 	beq.w	8017268 <rcl_expand_topic_name+0x24c>
 801710c:	217d      	movs	r1, #125	@ 0x7d
 801710e:	4628      	mov	r0, r5
 8017110:	f000 ff62 	bl	8017fd8 <strchr>
 8017114:	eba0 0904 	sub.w	r9, r0, r4
 8017118:	4621      	mov	r1, r4
 801711a:	4869      	ldr	r0, [pc, #420]	@ (80172c0 <rcl_expand_topic_name+0x2a4>)
 801711c:	f109 0601 	add.w	r6, r9, #1
 8017120:	4632      	mov	r2, r6
 8017122:	f000 ff66 	bl	8017ff2 <strncmp>
 8017126:	2800      	cmp	r0, #0
 8017128:	d051      	beq.n	80171ce <rcl_expand_topic_name+0x1b2>
 801712a:	4632      	mov	r2, r6
 801712c:	4621      	mov	r1, r4
 801712e:	4865      	ldr	r0, [pc, #404]	@ (80172c4 <rcl_expand_topic_name+0x2a8>)
 8017130:	f000 ff5f 	bl	8017ff2 <strncmp>
 8017134:	b128      	cbz	r0, 8017142 <rcl_expand_topic_name+0x126>
 8017136:	4632      	mov	r2, r6
 8017138:	4621      	mov	r1, r4
 801713a:	4863      	ldr	r0, [pc, #396]	@ (80172c8 <rcl_expand_topic_name+0x2ac>)
 801713c:	f000 ff59 	bl	8017ff2 <strncmp>
 8017140:	bb38      	cbnz	r0, 8017192 <rcl_expand_topic_name+0x176>
 8017142:	46d9      	mov	r9, fp
 8017144:	ab18      	add	r3, sp, #96	@ 0x60
 8017146:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801714a:	ab16      	add	r3, sp, #88	@ 0x58
 801714c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017150:	4620      	mov	r0, r4
 8017152:	4631      	mov	r1, r6
 8017154:	cb0c      	ldmia	r3, {r2, r3}
 8017156:	f7fd f9d7 	bl	8014508 <rcutils_strndup>
 801715a:	4604      	mov	r4, r0
 801715c:	2800      	cmp	r0, #0
 801715e:	f000 80a3 	beq.w	80172a8 <rcl_expand_topic_name+0x28c>
 8017162:	464a      	mov	r2, r9
 8017164:	4628      	mov	r0, r5
 8017166:	ab16      	add	r3, sp, #88	@ 0x58
 8017168:	4621      	mov	r1, r4
 801716a:	f7fd f8ab 	bl	80142c4 <rcutils_repl_str>
 801716e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017170:	4605      	mov	r5, r0
 8017172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017174:	4620      	mov	r0, r4
 8017176:	4798      	blx	r3
 8017178:	4650      	mov	r0, sl
 801717a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801717c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801717e:	4798      	blx	r3
 8017180:	2d00      	cmp	r5, #0
 8017182:	d06c      	beq.n	801725e <rcl_expand_topic_name+0x242>
 8017184:	217b      	movs	r1, #123	@ 0x7b
 8017186:	4628      	mov	r0, r5
 8017188:	f000 ff26 	bl	8017fd8 <strchr>
 801718c:	46aa      	mov	sl, r5
 801718e:	4604      	mov	r4, r0
 8017190:	e7b9      	b.n	8017106 <rcl_expand_topic_name+0xea>
 8017192:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8017196:	1c61      	adds	r1, r4, #1
 8017198:	4640      	mov	r0, r8
 801719a:	f7fd facd 	bl	8014738 <rcutils_string_map_getn>
 801719e:	4681      	mov	r9, r0
 80171a0:	2800      	cmp	r0, #0
 80171a2:	d1cf      	bne.n	8017144 <rcl_expand_topic_name+0x128>
 80171a4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80171a6:	aa18      	add	r2, sp, #96	@ 0x60
 80171a8:	2569      	movs	r5, #105	@ 0x69
 80171aa:	6018      	str	r0, [r3, #0]
 80171ac:	ab16      	add	r3, sp, #88	@ 0x58
 80171ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80171b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80171b4:	4631      	mov	r1, r6
 80171b6:	4620      	mov	r0, r4
 80171b8:	cb0c      	ldmia	r3, {r2, r3}
 80171ba:	f7fd f9a5 	bl	8014508 <rcutils_strndup>
 80171be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80171c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80171c2:	4798      	blx	r3
 80171c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80171c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80171c8:	4650      	mov	r0, sl
 80171ca:	4798      	blx	r3
 80171cc:	e777      	b.n	80170be <rcl_expand_topic_name+0xa2>
 80171ce:	46b9      	mov	r9, r7
 80171d0:	e7b8      	b.n	8017144 <rcl_expand_topic_name+0x128>
 80171d2:	25ca      	movs	r5, #202	@ 0xca
 80171d4:	e773      	b.n	80170be <rcl_expand_topic_name+0xa2>
 80171d6:	9e07      	ldr	r6, [sp, #28]
 80171d8:	4630      	mov	r0, r6
 80171da:	f7e9 f88b 	bl	80002f4 <strlen>
 80171de:	4a3b      	ldr	r2, [pc, #236]	@ (80172cc <rcl_expand_topic_name+0x2b0>)
 80171e0:	4b3b      	ldr	r3, [pc, #236]	@ (80172d0 <rcl_expand_topic_name+0x2b4>)
 80171e2:	9603      	str	r6, [sp, #12]
 80171e4:	2801      	cmp	r0, #1
 80171e6:	bf18      	it	ne
 80171e8:	4613      	movne	r3, r2
 80171ea:	9704      	str	r7, [sp, #16]
 80171ec:	9302      	str	r3, [sp, #8]
 80171ee:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80171f0:	9300      	str	r3, [sp, #0]
 80171f2:	1c63      	adds	r3, r4, #1
 80171f4:	9305      	str	r3, [sp, #20]
 80171f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80171fa:	9301      	str	r3, [sp, #4]
 80171fc:	ab16      	add	r3, sp, #88	@ 0x58
 80171fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017200:	f7fd f826 	bl	8014250 <rcutils_format_string_limit>
 8017204:	4606      	mov	r6, r0
 8017206:	b350      	cbz	r0, 801725e <rcl_expand_topic_name+0x242>
 8017208:	f1b9 0f00 	cmp.w	r9, #0
 801720c:	d005      	beq.n	801721a <rcl_expand_topic_name+0x1fe>
 801720e:	217b      	movs	r1, #123	@ 0x7b
 8017210:	46b2      	mov	sl, r6
 8017212:	f000 fee1 	bl	8017fd8 <strchr>
 8017216:	4681      	mov	r9, r0
 8017218:	e76e      	b.n	80170f8 <rcl_expand_topic_name+0xdc>
 801721a:	7833      	ldrb	r3, [r6, #0]
 801721c:	2b2f      	cmp	r3, #47	@ 0x2f
 801721e:	d01b      	beq.n	8017258 <rcl_expand_topic_name+0x23c>
 8017220:	9c07      	ldr	r4, [sp, #28]
 8017222:	4620      	mov	r0, r4
 8017224:	f7e9 f866 	bl	80002f4 <strlen>
 8017228:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801722c:	4a29      	ldr	r2, [pc, #164]	@ (80172d4 <rcl_expand_topic_name+0x2b8>)
 801722e:	9301      	str	r3, [sp, #4]
 8017230:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8017232:	9604      	str	r6, [sp, #16]
 8017234:	9300      	str	r3, [sp, #0]
 8017236:	4b28      	ldr	r3, [pc, #160]	@ (80172d8 <rcl_expand_topic_name+0x2bc>)
 8017238:	9403      	str	r4, [sp, #12]
 801723a:	2801      	cmp	r0, #1
 801723c:	bf18      	it	ne
 801723e:	4613      	movne	r3, r2
 8017240:	9302      	str	r3, [sp, #8]
 8017242:	ab16      	add	r3, sp, #88	@ 0x58
 8017244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017246:	f7fd f803 	bl	8014250 <rcutils_format_string_limit>
 801724a:	4603      	mov	r3, r0
 801724c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801724e:	4630      	mov	r0, r6
 8017250:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017252:	461e      	mov	r6, r3
 8017254:	4790      	blx	r2
 8017256:	b116      	cbz	r6, 801725e <rcl_expand_topic_name+0x242>
 8017258:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801725a:	601e      	str	r6, [r3, #0]
 801725c:	e72f      	b.n	80170be <rcl_expand_topic_name+0xa2>
 801725e:	2300      	movs	r3, #0
 8017260:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017262:	250a      	movs	r5, #10
 8017264:	6013      	str	r3, [r2, #0]
 8017266:	e72a      	b.n	80170be <rcl_expand_topic_name+0xa2>
 8017268:	4653      	mov	r3, sl
 801726a:	4656      	mov	r6, sl
 801726c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d1d2      	bne.n	801721a <rcl_expand_topic_name+0x1fe>
 8017274:	7823      	ldrb	r3, [r4, #0]
 8017276:	2b2f      	cmp	r3, #47	@ 0x2f
 8017278:	d01e      	beq.n	80172b8 <rcl_expand_topic_name+0x29c>
 801727a:	9e07      	ldr	r6, [sp, #28]
 801727c:	4630      	mov	r0, r6
 801727e:	f7e9 f839 	bl	80002f4 <strlen>
 8017282:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017284:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017288:	9603      	str	r6, [sp, #12]
 801728a:	9404      	str	r4, [sp, #16]
 801728c:	e9cd 2300 	strd	r2, r3, [sp]
 8017290:	4a10      	ldr	r2, [pc, #64]	@ (80172d4 <rcl_expand_topic_name+0x2b8>)
 8017292:	4b11      	ldr	r3, [pc, #68]	@ (80172d8 <rcl_expand_topic_name+0x2bc>)
 8017294:	2801      	cmp	r0, #1
 8017296:	bf18      	it	ne
 8017298:	4613      	movne	r3, r2
 801729a:	9302      	str	r3, [sp, #8]
 801729c:	ab16      	add	r3, sp, #88	@ 0x58
 801729e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80172a0:	f7fc ffd6 	bl	8014250 <rcutils_format_string_limit>
 80172a4:	4606      	mov	r6, r0
 80172a6:	e7d6      	b.n	8017256 <rcl_expand_topic_name+0x23a>
 80172a8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 80172ac:	4650      	mov	r0, sl
 80172ae:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80172b0:	6014      	str	r4, [r2, #0]
 80172b2:	250a      	movs	r5, #10
 80172b4:	4798      	blx	r3
 80172b6:	e702      	b.n	80170be <rcl_expand_topic_name+0xa2>
 80172b8:	2300      	movs	r3, #0
 80172ba:	461e      	mov	r6, r3
 80172bc:	e7cc      	b.n	8017258 <rcl_expand_topic_name+0x23c>
 80172be:	bf00      	nop
 80172c0:	080199f0 	.word	0x080199f0
 80172c4:	080199f8 	.word	0x080199f8
 80172c8:	08019a00 	.word	0x08019a00
 80172cc:	080199e8 	.word	0x080199e8
 80172d0:	080191d0 	.word	0x080191d0
 80172d4:	08019364 	.word	0x08019364
 80172d8:	080191e0 	.word	0x080191e0

080172dc <rcl_get_default_topic_name_substitutions>:
 80172dc:	2800      	cmp	r0, #0
 80172de:	bf0c      	ite	eq
 80172e0:	200b      	moveq	r0, #11
 80172e2:	2000      	movne	r0, #0
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop

080172e8 <rcl_get_zero_initialized_guard_condition>:
 80172e8:	4a03      	ldr	r2, [pc, #12]	@ (80172f8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80172ea:	4603      	mov	r3, r0
 80172ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80172f4:	4618      	mov	r0, r3
 80172f6:	4770      	bx	lr
 80172f8:	08019a0c 	.word	0x08019a0c

080172fc <rcl_guard_condition_init_from_rmw>:
 80172fc:	b082      	sub	sp, #8
 80172fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017302:	b086      	sub	sp, #24
 8017304:	4604      	mov	r4, r0
 8017306:	460e      	mov	r6, r1
 8017308:	4615      	mov	r5, r2
 801730a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801730e:	f10d 0e04 	add.w	lr, sp, #4
 8017312:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017316:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801731a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801731e:	f8dc 3000 	ldr.w	r3, [ip]
 8017322:	a801      	add	r0, sp, #4
 8017324:	f8ce 3000 	str.w	r3, [lr]
 8017328:	f7f7 fd5a 	bl	800ede0 <rcutils_allocator_is_valid>
 801732c:	f080 0301 	eor.w	r3, r0, #1
 8017330:	b2db      	uxtb	r3, r3
 8017332:	bb3b      	cbnz	r3, 8017384 <rcl_guard_condition_init_from_rmw+0x88>
 8017334:	b334      	cbz	r4, 8017384 <rcl_guard_condition_init_from_rmw+0x88>
 8017336:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801733a:	f1b8 0f00 	cmp.w	r8, #0
 801733e:	d11a      	bne.n	8017376 <rcl_guard_condition_init_from_rmw+0x7a>
 8017340:	b305      	cbz	r5, 8017384 <rcl_guard_condition_init_from_rmw+0x88>
 8017342:	4628      	mov	r0, r5
 8017344:	f7fc f80a 	bl	801335c <rcl_context_is_valid>
 8017348:	b1f0      	cbz	r0, 8017388 <rcl_guard_condition_init_from_rmw+0x8c>
 801734a:	9b01      	ldr	r3, [sp, #4]
 801734c:	201c      	movs	r0, #28
 801734e:	9905      	ldr	r1, [sp, #20]
 8017350:	4798      	blx	r3
 8017352:	4607      	mov	r7, r0
 8017354:	6060      	str	r0, [r4, #4]
 8017356:	b320      	cbz	r0, 80173a2 <rcl_guard_condition_init_from_rmw+0xa6>
 8017358:	b1c6      	cbz	r6, 801738c <rcl_guard_condition_init_from_rmw+0x90>
 801735a:	6006      	str	r6, [r0, #0]
 801735c:	f880 8004 	strb.w	r8, [r0, #4]
 8017360:	ac01      	add	r4, sp, #4
 8017362:	f107 0c08 	add.w	ip, r7, #8
 8017366:	2500      	movs	r5, #0
 8017368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801736a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801736e:	6823      	ldr	r3, [r4, #0]
 8017370:	f8cc 3000 	str.w	r3, [ip]
 8017374:	e000      	b.n	8017378 <rcl_guard_condition_init_from_rmw+0x7c>
 8017376:	2564      	movs	r5, #100	@ 0x64
 8017378:	4628      	mov	r0, r5
 801737a:	b006      	add	sp, #24
 801737c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017380:	b002      	add	sp, #8
 8017382:	4770      	bx	lr
 8017384:	250b      	movs	r5, #11
 8017386:	e7f7      	b.n	8017378 <rcl_guard_condition_init_from_rmw+0x7c>
 8017388:	2565      	movs	r5, #101	@ 0x65
 801738a:	e7f5      	b.n	8017378 <rcl_guard_condition_init_from_rmw+0x7c>
 801738c:	6828      	ldr	r0, [r5, #0]
 801738e:	3028      	adds	r0, #40	@ 0x28
 8017390:	f000 fa42 	bl	8017818 <rmw_create_guard_condition>
 8017394:	6038      	str	r0, [r7, #0]
 8017396:	6867      	ldr	r7, [r4, #4]
 8017398:	683e      	ldr	r6, [r7, #0]
 801739a:	b126      	cbz	r6, 80173a6 <rcl_guard_condition_init_from_rmw+0xaa>
 801739c:	2301      	movs	r3, #1
 801739e:	713b      	strb	r3, [r7, #4]
 80173a0:	e7de      	b.n	8017360 <rcl_guard_condition_init_from_rmw+0x64>
 80173a2:	250a      	movs	r5, #10
 80173a4:	e7e8      	b.n	8017378 <rcl_guard_condition_init_from_rmw+0x7c>
 80173a6:	9b02      	ldr	r3, [sp, #8]
 80173a8:	4638      	mov	r0, r7
 80173aa:	9905      	ldr	r1, [sp, #20]
 80173ac:	2501      	movs	r5, #1
 80173ae:	4798      	blx	r3
 80173b0:	6066      	str	r6, [r4, #4]
 80173b2:	e7e1      	b.n	8017378 <rcl_guard_condition_init_from_rmw+0x7c>

080173b4 <rcl_guard_condition_fini>:
 80173b4:	b570      	push	{r4, r5, r6, lr}
 80173b6:	b082      	sub	sp, #8
 80173b8:	b1f0      	cbz	r0, 80173f8 <rcl_guard_condition_fini+0x44>
 80173ba:	6843      	ldr	r3, [r0, #4]
 80173bc:	4604      	mov	r4, r0
 80173be:	b163      	cbz	r3, 80173da <rcl_guard_condition_fini+0x26>
 80173c0:	6818      	ldr	r0, [r3, #0]
 80173c2:	68de      	ldr	r6, [r3, #12]
 80173c4:	6999      	ldr	r1, [r3, #24]
 80173c6:	b160      	cbz	r0, 80173e2 <rcl_guard_condition_fini+0x2e>
 80173c8:	791d      	ldrb	r5, [r3, #4]
 80173ca:	b965      	cbnz	r5, 80173e6 <rcl_guard_condition_fini+0x32>
 80173cc:	4618      	mov	r0, r3
 80173ce:	47b0      	blx	r6
 80173d0:	2300      	movs	r3, #0
 80173d2:	4628      	mov	r0, r5
 80173d4:	6063      	str	r3, [r4, #4]
 80173d6:	b002      	add	sp, #8
 80173d8:	bd70      	pop	{r4, r5, r6, pc}
 80173da:	461d      	mov	r5, r3
 80173dc:	4628      	mov	r0, r5
 80173de:	b002      	add	sp, #8
 80173e0:	bd70      	pop	{r4, r5, r6, pc}
 80173e2:	4605      	mov	r5, r0
 80173e4:	e7f2      	b.n	80173cc <rcl_guard_condition_fini+0x18>
 80173e6:	9101      	str	r1, [sp, #4]
 80173e8:	f000 fa2c 	bl	8017844 <rmw_destroy_guard_condition>
 80173ec:	1e05      	subs	r5, r0, #0
 80173ee:	6863      	ldr	r3, [r4, #4]
 80173f0:	9901      	ldr	r1, [sp, #4]
 80173f2:	bf18      	it	ne
 80173f4:	2501      	movne	r5, #1
 80173f6:	e7e9      	b.n	80173cc <rcl_guard_condition_fini+0x18>
 80173f8:	250b      	movs	r5, #11
 80173fa:	4628      	mov	r0, r5
 80173fc:	b002      	add	sp, #8
 80173fe:	bd70      	pop	{r4, r5, r6, pc}

08017400 <rcl_guard_condition_get_default_options>:
 8017400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017402:	b087      	sub	sp, #28
 8017404:	4606      	mov	r6, r0
 8017406:	4c0b      	ldr	r4, [pc, #44]	@ (8017434 <rcl_guard_condition_get_default_options+0x34>)
 8017408:	4668      	mov	r0, sp
 801740a:	f7f7 fcdb 	bl	800edc4 <rcutils_get_default_allocator>
 801740e:	46ee      	mov	lr, sp
 8017410:	46a4      	mov	ip, r4
 8017412:	4625      	mov	r5, r4
 8017414:	4634      	mov	r4, r6
 8017416:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801741a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801741e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017420:	f8de 7000 	ldr.w	r7, [lr]
 8017424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017426:	4630      	mov	r0, r6
 8017428:	f8cc 7000 	str.w	r7, [ip]
 801742c:	6027      	str	r7, [r4, #0]
 801742e:	b007      	add	sp, #28
 8017430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017432:	bf00      	nop
 8017434:	2406852c 	.word	0x2406852c

08017438 <rcl_validate_topic_name>:
 8017438:	2800      	cmp	r0, #0
 801743a:	f000 8089 	beq.w	8017550 <rcl_validate_topic_name+0x118>
 801743e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017442:	460e      	mov	r6, r1
 8017444:	2900      	cmp	r1, #0
 8017446:	f000 8085 	beq.w	8017554 <rcl_validate_topic_name+0x11c>
 801744a:	4604      	mov	r4, r0
 801744c:	4617      	mov	r7, r2
 801744e:	f7e8 ff51 	bl	80002f4 <strlen>
 8017452:	b1b0      	cbz	r0, 8017482 <rcl_validate_topic_name+0x4a>
 8017454:	f894 e000 	ldrb.w	lr, [r4]
 8017458:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80175bc <rcl_validate_topic_name+0x184>
 801745c:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8017460:	f013 0304 	ands.w	r3, r3, #4
 8017464:	d139      	bne.n	80174da <rcl_validate_topic_name+0xa2>
 8017466:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801746a:	f814 2008 	ldrb.w	r2, [r4, r8]
 801746e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017470:	d10f      	bne.n	8017492 <rcl_validate_topic_name+0x5a>
 8017472:	2202      	movs	r2, #2
 8017474:	6032      	str	r2, [r6, #0]
 8017476:	b3a7      	cbz	r7, 80174e2 <rcl_validate_topic_name+0xaa>
 8017478:	4618      	mov	r0, r3
 801747a:	f8c7 8000 	str.w	r8, [r7]
 801747e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017482:	2301      	movs	r3, #1
 8017484:	6033      	str	r3, [r6, #0]
 8017486:	b367      	cbz	r7, 80174e2 <rcl_validate_topic_name+0xaa>
 8017488:	2300      	movs	r3, #0
 801748a:	4618      	mov	r0, r3
 801748c:	603b      	str	r3, [r7, #0]
 801748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017492:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 8017496:	461d      	mov	r5, r3
 8017498:	4619      	mov	r1, r3
 801749a:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801749e:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 80174a2:	f1b9 0f09 	cmp.w	r9, #9
 80174a6:	d91f      	bls.n	80174e8 <rcl_validate_topic_name+0xb0>
 80174a8:	f022 0920 	bic.w	r9, r2, #32
 80174ac:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 80174b0:	f1b9 0f19 	cmp.w	r9, #25
 80174b4:	d918      	bls.n	80174e8 <rcl_validate_topic_name+0xb0>
 80174b6:	2a5f      	cmp	r2, #95	@ 0x5f
 80174b8:	d024      	beq.n	8017504 <rcl_validate_topic_name+0xcc>
 80174ba:	2a2f      	cmp	r2, #47	@ 0x2f
 80174bc:	d058      	beq.n	8017570 <rcl_validate_topic_name+0x138>
 80174be:	2a7e      	cmp	r2, #126	@ 0x7e
 80174c0:	d04a      	beq.n	8017558 <rcl_validate_topic_name+0x120>
 80174c2:	2a7b      	cmp	r2, #123	@ 0x7b
 80174c4:	d05b      	beq.n	801757e <rcl_validate_topic_name+0x146>
 80174c6:	2a7d      	cmp	r2, #125	@ 0x7d
 80174c8:	d169      	bne.n	801759e <rcl_validate_topic_name+0x166>
 80174ca:	2d00      	cmp	r5, #0
 80174cc:	d15c      	bne.n	8017588 <rcl_validate_topic_name+0x150>
 80174ce:	2305      	movs	r3, #5
 80174d0:	6033      	str	r3, [r6, #0]
 80174d2:	b137      	cbz	r7, 80174e2 <rcl_validate_topic_name+0xaa>
 80174d4:	2000      	movs	r0, #0
 80174d6:	6039      	str	r1, [r7, #0]
 80174d8:	e7d9      	b.n	801748e <rcl_validate_topic_name+0x56>
 80174da:	2304      	movs	r3, #4
 80174dc:	6033      	str	r3, [r6, #0]
 80174de:	2f00      	cmp	r7, #0
 80174e0:	d1d2      	bne.n	8017488 <rcl_validate_topic_name+0x50>
 80174e2:	2000      	movs	r0, #0
 80174e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174e8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80174ec:	0752      	lsls	r2, r2, #29
 80174ee:	d509      	bpl.n	8017504 <rcl_validate_topic_name+0xcc>
 80174f0:	2900      	cmp	r1, #0
 80174f2:	bf0c      	ite	eq
 80174f4:	2200      	moveq	r2, #0
 80174f6:	f005 0201 	andne.w	r2, r5, #1
 80174fa:	b11a      	cbz	r2, 8017504 <rcl_validate_topic_name+0xcc>
 80174fc:	1e4d      	subs	r5, r1, #1
 80174fe:	429d      	cmp	r5, r3
 8017500:	d031      	beq.n	8017566 <rcl_validate_topic_name+0x12e>
 8017502:	4615      	mov	r5, r2
 8017504:	3101      	adds	r1, #1
 8017506:	4288      	cmp	r0, r1
 8017508:	d1c7      	bne.n	801749a <rcl_validate_topic_name+0x62>
 801750a:	2d00      	cmp	r5, #0
 801750c:	d142      	bne.n	8017594 <rcl_validate_topic_name+0x15c>
 801750e:	4628      	mov	r0, r5
 8017510:	2301      	movs	r3, #1
 8017512:	e00c      	b.n	801752e <rcl_validate_topic_name+0xf6>
 8017514:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8017518:	d101      	bne.n	801751e <rcl_validate_topic_name+0xe6>
 801751a:	2801      	cmp	r0, #1
 801751c:	d047      	beq.n	80175ae <rcl_validate_topic_name+0x176>
 801751e:	1c5a      	adds	r2, r3, #1
 8017520:	428b      	cmp	r3, r1
 8017522:	f100 0001 	add.w	r0, r0, #1
 8017526:	f104 0401 	add.w	r4, r4, #1
 801752a:	4613      	mov	r3, r2
 801752c:	d22e      	bcs.n	801758c <rcl_validate_topic_name+0x154>
 801752e:	4580      	cmp	r8, r0
 8017530:	d0f5      	beq.n	801751e <rcl_validate_topic_name+0xe6>
 8017532:	7822      	ldrb	r2, [r4, #0]
 8017534:	2a2f      	cmp	r2, #47	@ 0x2f
 8017536:	d1ed      	bne.n	8017514 <rcl_validate_topic_name+0xdc>
 8017538:	7862      	ldrb	r2, [r4, #1]
 801753a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801753e:	0752      	lsls	r2, r2, #29
 8017540:	d5ed      	bpl.n	801751e <rcl_validate_topic_name+0xe6>
 8017542:	2204      	movs	r2, #4
 8017544:	6032      	str	r2, [r6, #0]
 8017546:	2f00      	cmp	r7, #0
 8017548:	d0cb      	beq.n	80174e2 <rcl_validate_topic_name+0xaa>
 801754a:	2000      	movs	r0, #0
 801754c:	603b      	str	r3, [r7, #0]
 801754e:	e79e      	b.n	801748e <rcl_validate_topic_name+0x56>
 8017550:	200b      	movs	r0, #11
 8017552:	4770      	bx	lr
 8017554:	200b      	movs	r0, #11
 8017556:	e79a      	b.n	801748e <rcl_validate_topic_name+0x56>
 8017558:	2900      	cmp	r1, #0
 801755a:	d0d3      	beq.n	8017504 <rcl_validate_topic_name+0xcc>
 801755c:	2306      	movs	r3, #6
 801755e:	6033      	str	r3, [r6, #0]
 8017560:	2f00      	cmp	r7, #0
 8017562:	d1b7      	bne.n	80174d4 <rcl_validate_topic_name+0x9c>
 8017564:	e7bd      	b.n	80174e2 <rcl_validate_topic_name+0xaa>
 8017566:	2309      	movs	r3, #9
 8017568:	6033      	str	r3, [r6, #0]
 801756a:	2f00      	cmp	r7, #0
 801756c:	d1b2      	bne.n	80174d4 <rcl_validate_topic_name+0x9c>
 801756e:	e7b8      	b.n	80174e2 <rcl_validate_topic_name+0xaa>
 8017570:	2d00      	cmp	r5, #0
 8017572:	d0c7      	beq.n	8017504 <rcl_validate_topic_name+0xcc>
 8017574:	2308      	movs	r3, #8
 8017576:	6033      	str	r3, [r6, #0]
 8017578:	2f00      	cmp	r7, #0
 801757a:	d1ab      	bne.n	80174d4 <rcl_validate_topic_name+0x9c>
 801757c:	e7b1      	b.n	80174e2 <rcl_validate_topic_name+0xaa>
 801757e:	2d00      	cmp	r5, #0
 8017580:	d1f8      	bne.n	8017574 <rcl_validate_topic_name+0x13c>
 8017582:	460b      	mov	r3, r1
 8017584:	2501      	movs	r5, #1
 8017586:	e7bd      	b.n	8017504 <rcl_validate_topic_name+0xcc>
 8017588:	2500      	movs	r5, #0
 801758a:	e7bb      	b.n	8017504 <rcl_validate_topic_name+0xcc>
 801758c:	2300      	movs	r3, #0
 801758e:	4618      	mov	r0, r3
 8017590:	6033      	str	r3, [r6, #0]
 8017592:	e77c      	b.n	801748e <rcl_validate_topic_name+0x56>
 8017594:	2205      	movs	r2, #5
 8017596:	6032      	str	r2, [r6, #0]
 8017598:	2f00      	cmp	r7, #0
 801759a:	d1d6      	bne.n	801754a <rcl_validate_topic_name+0x112>
 801759c:	e7a1      	b.n	80174e2 <rcl_validate_topic_name+0xaa>
 801759e:	2d00      	cmp	r5, #0
 80175a0:	bf14      	ite	ne
 80175a2:	2308      	movne	r3, #8
 80175a4:	2303      	moveq	r3, #3
 80175a6:	6033      	str	r3, [r6, #0]
 80175a8:	2f00      	cmp	r7, #0
 80175aa:	d193      	bne.n	80174d4 <rcl_validate_topic_name+0x9c>
 80175ac:	e799      	b.n	80174e2 <rcl_validate_topic_name+0xaa>
 80175ae:	2307      	movs	r3, #7
 80175b0:	6033      	str	r3, [r6, #0]
 80175b2:	2f00      	cmp	r7, #0
 80175b4:	d095      	beq.n	80174e2 <rcl_validate_topic_name+0xaa>
 80175b6:	2301      	movs	r3, #1
 80175b8:	e7c7      	b.n	801754a <rcl_validate_topic_name+0x112>
 80175ba:	bf00      	nop
 80175bc:	08019a84 	.word	0x08019a84

080175c0 <on_status>:
 80175c0:	b082      	sub	sp, #8
 80175c2:	b002      	add	sp, #8
 80175c4:	4770      	bx	lr
 80175c6:	bf00      	nop

080175c8 <on_topic>:
 80175c8:	4a23      	ldr	r2, [pc, #140]	@ (8017658 <on_topic+0x90>)
 80175ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175ce:	6812      	ldr	r2, [r2, #0]
 80175d0:	b094      	sub	sp, #80	@ 0x50
 80175d2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80175d4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80175d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80175da:	9312      	str	r3, [sp, #72]	@ 0x48
 80175dc:	b3c2      	cbz	r2, 8017650 <on_topic+0x88>
 80175de:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80175e2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80175e6:	e001      	b.n	80175ec <on_topic+0x24>
 80175e8:	6852      	ldr	r2, [r2, #4]
 80175ea:	b38a      	cbz	r2, 8017650 <on_topic+0x88>
 80175ec:	6894      	ldr	r4, [r2, #8]
 80175ee:	8aa3      	ldrh	r3, [r4, #20]
 80175f0:	428b      	cmp	r3, r1
 80175f2:	d1f9      	bne.n	80175e8 <on_topic+0x20>
 80175f4:	7da3      	ldrb	r3, [r4, #22]
 80175f6:	4283      	cmp	r3, r0
 80175f8:	d1f6      	bne.n	80175e8 <on_topic+0x20>
 80175fa:	2248      	movs	r2, #72	@ 0x48
 80175fc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017600:	4668      	mov	r0, sp
 8017602:	f000 fe00 	bl	8018206 <memcpy>
 8017606:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801760a:	4620      	mov	r0, r4
 801760c:	cb0c      	ldmia	r3, {r2, r3}
 801760e:	f7f7 fff3 	bl	800f5f8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017612:	4607      	mov	r7, r0
 8017614:	b1e0      	cbz	r0, 8017650 <on_topic+0x88>
 8017616:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801761a:	462a      	mov	r2, r5
 801761c:	4630      	mov	r0, r6
 801761e:	f108 0110 	add.w	r1, r8, #16
 8017622:	f7fe f853 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 8017626:	b930      	cbnz	r0, 8017636 <on_topic+0x6e>
 8017628:	4639      	mov	r1, r7
 801762a:	480c      	ldr	r0, [pc, #48]	@ (801765c <on_topic+0x94>)
 801762c:	b014      	add	sp, #80	@ 0x50
 801762e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017632:	f7fd ba87 	b.w	8014b44 <put_memory>
 8017636:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801763a:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801763e:	f7f7 fdd9 	bl	800f1f4 <rmw_uros_epoch_nanos>
 8017642:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017646:	2305      	movs	r3, #5
 8017648:	e942 0102 	strd	r0, r1, [r2, #-8]
 801764c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017650:	b014      	add	sp, #80	@ 0x50
 8017652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017656:	bf00      	nop
 8017658:	240683fc 	.word	0x240683fc
 801765c:	240683ec 	.word	0x240683ec

08017660 <on_request>:
 8017660:	4824      	ldr	r0, [pc, #144]	@ (80176f4 <on_request+0x94>)
 8017662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017666:	6800      	ldr	r0, [r0, #0]
 8017668:	b094      	sub	sp, #80	@ 0x50
 801766a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801766c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8017670:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017672:	2800      	cmp	r0, #0
 8017674:	d03b      	beq.n	80176ee <on_request+0x8e>
 8017676:	461d      	mov	r5, r3
 8017678:	e001      	b.n	801767e <on_request+0x1e>
 801767a:	6840      	ldr	r0, [r0, #4]
 801767c:	b3b8      	cbz	r0, 80176ee <on_request+0x8e>
 801767e:	6884      	ldr	r4, [r0, #8]
 8017680:	8b21      	ldrh	r1, [r4, #24]
 8017682:	4291      	cmp	r1, r2
 8017684:	d1f9      	bne.n	801767a <on_request+0x1a>
 8017686:	2248      	movs	r2, #72	@ 0x48
 8017688:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801768c:	4668      	mov	r0, sp
 801768e:	f000 fdba 	bl	8018206 <memcpy>
 8017692:	f104 0320 	add.w	r3, r4, #32
 8017696:	4620      	mov	r0, r4
 8017698:	cb0c      	ldmia	r3, {r2, r3}
 801769a:	f7f7 ffad 	bl	800f5f8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801769e:	4680      	mov	r8, r0
 80176a0:	b328      	cbz	r0, 80176ee <on_request+0x8e>
 80176a2:	4630      	mov	r0, r6
 80176a4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80176a8:	463a      	mov	r2, r7
 80176aa:	f106 0110 	add.w	r1, r6, #16
 80176ae:	f7fe f80d 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 80176b2:	b930      	cbnz	r0, 80176c2 <on_request+0x62>
 80176b4:	4641      	mov	r1, r8
 80176b6:	4810      	ldr	r0, [pc, #64]	@ (80176f8 <on_request+0x98>)
 80176b8:	b014      	add	sp, #80	@ 0x50
 80176ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176be:	f7fd ba41 	b.w	8014b44 <put_memory>
 80176c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80176c4:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 80176c8:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80176cc:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80176d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80176d8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80176dc:	f7f7 fd8a 	bl	800f1f4 <rmw_uros_epoch_nanos>
 80176e0:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80176e4:	2303      	movs	r3, #3
 80176e6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80176ea:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80176ee:	b014      	add	sp, #80	@ 0x50
 80176f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176f4:	240683cc 	.word	0x240683cc
 80176f8:	240683ec 	.word	0x240683ec

080176fc <on_reply>:
 80176fc:	4822      	ldr	r0, [pc, #136]	@ (8017788 <on_reply+0x8c>)
 80176fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017702:	6800      	ldr	r0, [r0, #0]
 8017704:	b094      	sub	sp, #80	@ 0x50
 8017706:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8017708:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801770c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801770e:	b3b8      	cbz	r0, 8017780 <on_reply+0x84>
 8017710:	461d      	mov	r5, r3
 8017712:	e001      	b.n	8017718 <on_reply+0x1c>
 8017714:	6840      	ldr	r0, [r0, #4]
 8017716:	b398      	cbz	r0, 8017780 <on_reply+0x84>
 8017718:	6884      	ldr	r4, [r0, #8]
 801771a:	8b21      	ldrh	r1, [r4, #24]
 801771c:	4291      	cmp	r1, r2
 801771e:	d1f9      	bne.n	8017714 <on_reply+0x18>
 8017720:	2248      	movs	r2, #72	@ 0x48
 8017722:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017726:	4668      	mov	r0, sp
 8017728:	f000 fd6d 	bl	8018206 <memcpy>
 801772c:	f104 0320 	add.w	r3, r4, #32
 8017730:	4620      	mov	r0, r4
 8017732:	cb0c      	ldmia	r3, {r2, r3}
 8017734:	f7f7 ff60 	bl	800f5f8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017738:	4680      	mov	r8, r0
 801773a:	b308      	cbz	r0, 8017780 <on_reply+0x84>
 801773c:	4630      	mov	r0, r6
 801773e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8017742:	463a      	mov	r2, r7
 8017744:	f106 0110 	add.w	r1, r6, #16
 8017748:	f7fd ffc0 	bl	80156cc <ucdr_deserialize_array_uint8_t>
 801774c:	b930      	cbnz	r0, 801775c <on_reply+0x60>
 801774e:	4641      	mov	r1, r8
 8017750:	480e      	ldr	r0, [pc, #56]	@ (801778c <on_reply+0x90>)
 8017752:	b014      	add	sp, #80	@ 0x50
 8017754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017758:	f7fd b9f4 	b.w	8014b44 <put_memory>
 801775c:	2200      	movs	r2, #0
 801775e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8017762:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8017766:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801776a:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801776e:	f7f7 fd41 	bl	800f1f4 <rmw_uros_epoch_nanos>
 8017772:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8017776:	2304      	movs	r3, #4
 8017778:	e942 0102 	strd	r0, r1, [r2, #-8]
 801777c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8017780:	b014      	add	sp, #80	@ 0x50
 8017782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017786:	bf00      	nop
 8017788:	24063ae0 	.word	0x24063ae0
 801778c:	240683ec 	.word	0x240683ec

08017790 <rmw_destroy_client>:
 8017790:	b570      	push	{r4, r5, r6, lr}
 8017792:	b128      	cbz	r0, 80177a0 <rmw_destroy_client+0x10>
 8017794:	4604      	mov	r4, r0
 8017796:	6800      	ldr	r0, [r0, #0]
 8017798:	460d      	mov	r5, r1
 801779a:	f7f8 f801 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 801779e:	b910      	cbnz	r0, 80177a6 <rmw_destroy_client+0x16>
 80177a0:	2401      	movs	r4, #1
 80177a2:	4620      	mov	r0, r4
 80177a4:	bd70      	pop	{r4, r5, r6, pc}
 80177a6:	6863      	ldr	r3, [r4, #4]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d0f9      	beq.n	80177a0 <rmw_destroy_client+0x10>
 80177ac:	2d00      	cmp	r5, #0
 80177ae:	d0f7      	beq.n	80177a0 <rmw_destroy_client+0x10>
 80177b0:	6828      	ldr	r0, [r5, #0]
 80177b2:	f7f7 fff5 	bl	800f7a0 <is_uxrce_rmw_identifier_valid>
 80177b6:	2800      	cmp	r0, #0
 80177b8:	d0f2      	beq.n	80177a0 <rmw_destroy_client+0x10>
 80177ba:	686e      	ldr	r6, [r5, #4]
 80177bc:	2e00      	cmp	r6, #0
 80177be:	d0ef      	beq.n	80177a0 <rmw_destroy_client+0x10>
 80177c0:	6864      	ldr	r4, [r4, #4]
 80177c2:	6932      	ldr	r2, [r6, #16]
 80177c4:	6920      	ldr	r0, [r4, #16]
 80177c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80177ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80177ce:	6819      	ldr	r1, [r3, #0]
 80177d0:	f7fe fe5e 	bl	8016490 <uxr_buffer_cancel_data>
 80177d4:	4602      	mov	r2, r0
 80177d6:	6920      	ldr	r0, [r4, #16]
 80177d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80177dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80177e0:	f7f7 ff64 	bl	800f6ac <run_xrce_session>
 80177e4:	6920      	ldr	r0, [r4, #16]
 80177e6:	6932      	ldr	r2, [r6, #16]
 80177e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80177ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80177f0:	6819      	ldr	r1, [r3, #0]
 80177f2:	f7f9 f895 	bl	8010920 <uxr_buffer_delete_entity>
 80177f6:	4602      	mov	r2, r0
 80177f8:	6920      	ldr	r0, [r4, #16]
 80177fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80177fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017802:	f7f7 ff53 	bl	800f6ac <run_xrce_session>
 8017806:	4603      	mov	r3, r0
 8017808:	4628      	mov	r0, r5
 801780a:	2b00      	cmp	r3, #0
 801780c:	bf14      	ite	ne
 801780e:	2400      	movne	r4, #0
 8017810:	2402      	moveq	r4, #2
 8017812:	f7f7 fecf 	bl	800f5b4 <rmw_uxrce_fini_client_memory>
 8017816:	e7c4      	b.n	80177a2 <rmw_destroy_client+0x12>

08017818 <rmw_create_guard_condition>:
 8017818:	b538      	push	{r3, r4, r5, lr}
 801781a:	4605      	mov	r5, r0
 801781c:	4808      	ldr	r0, [pc, #32]	@ (8017840 <rmw_create_guard_condition+0x28>)
 801781e:	f7fd f981 	bl	8014b24 <get_memory>
 8017822:	4603      	mov	r3, r0
 8017824:	b148      	cbz	r0, 801783a <rmw_create_guard_condition+0x22>
 8017826:	6884      	ldr	r4, [r0, #8]
 8017828:	2300      	movs	r3, #0
 801782a:	61e5      	str	r5, [r4, #28]
 801782c:	7423      	strb	r3, [r4, #16]
 801782e:	f7fd f99d 	bl	8014b6c <rmw_get_implementation_identifier>
 8017832:	f104 0314 	add.w	r3, r4, #20
 8017836:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801783a:	4618      	mov	r0, r3
 801783c:	bd38      	pop	{r3, r4, r5, pc}
 801783e:	bf00      	nop
 8017840:	2406838c 	.word	0x2406838c

08017844 <rmw_destroy_guard_condition>:
 8017844:	b508      	push	{r3, lr}
 8017846:	4b08      	ldr	r3, [pc, #32]	@ (8017868 <rmw_destroy_guard_condition+0x24>)
 8017848:	6819      	ldr	r1, [r3, #0]
 801784a:	b911      	cbnz	r1, 8017852 <rmw_destroy_guard_condition+0xe>
 801784c:	e00a      	b.n	8017864 <rmw_destroy_guard_condition+0x20>
 801784e:	6849      	ldr	r1, [r1, #4]
 8017850:	b141      	cbz	r1, 8017864 <rmw_destroy_guard_condition+0x20>
 8017852:	688b      	ldr	r3, [r1, #8]
 8017854:	3314      	adds	r3, #20
 8017856:	4298      	cmp	r0, r3
 8017858:	d1f9      	bne.n	801784e <rmw_destroy_guard_condition+0xa>
 801785a:	4803      	ldr	r0, [pc, #12]	@ (8017868 <rmw_destroy_guard_condition+0x24>)
 801785c:	f7fd f972 	bl	8014b44 <put_memory>
 8017860:	2000      	movs	r0, #0
 8017862:	bd08      	pop	{r3, pc}
 8017864:	2001      	movs	r0, #1
 8017866:	bd08      	pop	{r3, pc}
 8017868:	2406838c 	.word	0x2406838c

0801786c <calloc>:
 801786c:	4b02      	ldr	r3, [pc, #8]	@ (8017878 <calloc+0xc>)
 801786e:	460a      	mov	r2, r1
 8017870:	4601      	mov	r1, r0
 8017872:	6818      	ldr	r0, [r3, #0]
 8017874:	f000 b802 	b.w	801787c <_calloc_r>
 8017878:	240000c4 	.word	0x240000c4

0801787c <_calloc_r>:
 801787c:	b570      	push	{r4, r5, r6, lr}
 801787e:	fba1 5402 	umull	r5, r4, r1, r2
 8017882:	b93c      	cbnz	r4, 8017894 <_calloc_r+0x18>
 8017884:	4629      	mov	r1, r5
 8017886:	f000 f887 	bl	8017998 <_malloc_r>
 801788a:	4606      	mov	r6, r0
 801788c:	b928      	cbnz	r0, 801789a <_calloc_r+0x1e>
 801788e:	2600      	movs	r6, #0
 8017890:	4630      	mov	r0, r6
 8017892:	bd70      	pop	{r4, r5, r6, pc}
 8017894:	220c      	movs	r2, #12
 8017896:	6002      	str	r2, [r0, #0]
 8017898:	e7f9      	b.n	801788e <_calloc_r+0x12>
 801789a:	462a      	mov	r2, r5
 801789c:	4621      	mov	r1, r4
 801789e:	f000 fb93 	bl	8017fc8 <memset>
 80178a2:	e7f5      	b.n	8017890 <_calloc_r+0x14>

080178a4 <getenv>:
 80178a4:	b507      	push	{r0, r1, r2, lr}
 80178a6:	4b04      	ldr	r3, [pc, #16]	@ (80178b8 <getenv+0x14>)
 80178a8:	4601      	mov	r1, r0
 80178aa:	aa01      	add	r2, sp, #4
 80178ac:	6818      	ldr	r0, [r3, #0]
 80178ae:	f000 f805 	bl	80178bc <_findenv_r>
 80178b2:	b003      	add	sp, #12
 80178b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80178b8:	240000c4 	.word	0x240000c4

080178bc <_findenv_r>:
 80178bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178c0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017930 <_findenv_r+0x74>
 80178c4:	4606      	mov	r6, r0
 80178c6:	4689      	mov	r9, r1
 80178c8:	4617      	mov	r7, r2
 80178ca:	f000 fcc9 	bl	8018260 <__env_lock>
 80178ce:	f8da 4000 	ldr.w	r4, [sl]
 80178d2:	b134      	cbz	r4, 80178e2 <_findenv_r+0x26>
 80178d4:	464b      	mov	r3, r9
 80178d6:	4698      	mov	r8, r3
 80178d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178dc:	b13a      	cbz	r2, 80178ee <_findenv_r+0x32>
 80178de:	2a3d      	cmp	r2, #61	@ 0x3d
 80178e0:	d1f9      	bne.n	80178d6 <_findenv_r+0x1a>
 80178e2:	4630      	mov	r0, r6
 80178e4:	f000 fcc2 	bl	801826c <__env_unlock>
 80178e8:	2000      	movs	r0, #0
 80178ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178ee:	eba8 0809 	sub.w	r8, r8, r9
 80178f2:	46a3      	mov	fp, r4
 80178f4:	f854 0b04 	ldr.w	r0, [r4], #4
 80178f8:	2800      	cmp	r0, #0
 80178fa:	d0f2      	beq.n	80178e2 <_findenv_r+0x26>
 80178fc:	4642      	mov	r2, r8
 80178fe:	4649      	mov	r1, r9
 8017900:	f000 fb77 	bl	8017ff2 <strncmp>
 8017904:	2800      	cmp	r0, #0
 8017906:	d1f4      	bne.n	80178f2 <_findenv_r+0x36>
 8017908:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801790c:	eb03 0508 	add.w	r5, r3, r8
 8017910:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017914:	2b3d      	cmp	r3, #61	@ 0x3d
 8017916:	d1ec      	bne.n	80178f2 <_findenv_r+0x36>
 8017918:	f8da 3000 	ldr.w	r3, [sl]
 801791c:	ebab 0303 	sub.w	r3, fp, r3
 8017920:	109b      	asrs	r3, r3, #2
 8017922:	4630      	mov	r0, r6
 8017924:	603b      	str	r3, [r7, #0]
 8017926:	f000 fca1 	bl	801826c <__env_unlock>
 801792a:	1c68      	adds	r0, r5, #1
 801792c:	e7dd      	b.n	80178ea <_findenv_r+0x2e>
 801792e:	bf00      	nop
 8017930:	24000000 	.word	0x24000000

08017934 <malloc>:
 8017934:	4b02      	ldr	r3, [pc, #8]	@ (8017940 <malloc+0xc>)
 8017936:	4601      	mov	r1, r0
 8017938:	6818      	ldr	r0, [r3, #0]
 801793a:	f000 b82d 	b.w	8017998 <_malloc_r>
 801793e:	bf00      	nop
 8017940:	240000c4 	.word	0x240000c4

08017944 <free>:
 8017944:	4b02      	ldr	r3, [pc, #8]	@ (8017950 <free+0xc>)
 8017946:	4601      	mov	r1, r0
 8017948:	6818      	ldr	r0, [r3, #0]
 801794a:	f000 bc95 	b.w	8018278 <_free_r>
 801794e:	bf00      	nop
 8017950:	240000c4 	.word	0x240000c4

08017954 <sbrk_aligned>:
 8017954:	b570      	push	{r4, r5, r6, lr}
 8017956:	4e0f      	ldr	r6, [pc, #60]	@ (8017994 <sbrk_aligned+0x40>)
 8017958:	460c      	mov	r4, r1
 801795a:	6831      	ldr	r1, [r6, #0]
 801795c:	4605      	mov	r5, r0
 801795e:	b911      	cbnz	r1, 8017966 <sbrk_aligned+0x12>
 8017960:	f000 fbfa 	bl	8018158 <_sbrk_r>
 8017964:	6030      	str	r0, [r6, #0]
 8017966:	4621      	mov	r1, r4
 8017968:	4628      	mov	r0, r5
 801796a:	f000 fbf5 	bl	8018158 <_sbrk_r>
 801796e:	1c43      	adds	r3, r0, #1
 8017970:	d103      	bne.n	801797a <sbrk_aligned+0x26>
 8017972:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017976:	4620      	mov	r0, r4
 8017978:	bd70      	pop	{r4, r5, r6, pc}
 801797a:	1cc4      	adds	r4, r0, #3
 801797c:	f024 0403 	bic.w	r4, r4, #3
 8017980:	42a0      	cmp	r0, r4
 8017982:	d0f8      	beq.n	8017976 <sbrk_aligned+0x22>
 8017984:	1a21      	subs	r1, r4, r0
 8017986:	4628      	mov	r0, r5
 8017988:	f000 fbe6 	bl	8018158 <_sbrk_r>
 801798c:	3001      	adds	r0, #1
 801798e:	d1f2      	bne.n	8017976 <sbrk_aligned+0x22>
 8017990:	e7ef      	b.n	8017972 <sbrk_aligned+0x1e>
 8017992:	bf00      	nop
 8017994:	24068540 	.word	0x24068540

08017998 <_malloc_r>:
 8017998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801799c:	1ccd      	adds	r5, r1, #3
 801799e:	f025 0503 	bic.w	r5, r5, #3
 80179a2:	3508      	adds	r5, #8
 80179a4:	2d0c      	cmp	r5, #12
 80179a6:	bf38      	it	cc
 80179a8:	250c      	movcc	r5, #12
 80179aa:	2d00      	cmp	r5, #0
 80179ac:	4606      	mov	r6, r0
 80179ae:	db01      	blt.n	80179b4 <_malloc_r+0x1c>
 80179b0:	42a9      	cmp	r1, r5
 80179b2:	d904      	bls.n	80179be <_malloc_r+0x26>
 80179b4:	230c      	movs	r3, #12
 80179b6:	6033      	str	r3, [r6, #0]
 80179b8:	2000      	movs	r0, #0
 80179ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017a94 <_malloc_r+0xfc>
 80179c2:	f000 f869 	bl	8017a98 <__malloc_lock>
 80179c6:	f8d8 3000 	ldr.w	r3, [r8]
 80179ca:	461c      	mov	r4, r3
 80179cc:	bb44      	cbnz	r4, 8017a20 <_malloc_r+0x88>
 80179ce:	4629      	mov	r1, r5
 80179d0:	4630      	mov	r0, r6
 80179d2:	f7ff ffbf 	bl	8017954 <sbrk_aligned>
 80179d6:	1c43      	adds	r3, r0, #1
 80179d8:	4604      	mov	r4, r0
 80179da:	d158      	bne.n	8017a8e <_malloc_r+0xf6>
 80179dc:	f8d8 4000 	ldr.w	r4, [r8]
 80179e0:	4627      	mov	r7, r4
 80179e2:	2f00      	cmp	r7, #0
 80179e4:	d143      	bne.n	8017a6e <_malloc_r+0xd6>
 80179e6:	2c00      	cmp	r4, #0
 80179e8:	d04b      	beq.n	8017a82 <_malloc_r+0xea>
 80179ea:	6823      	ldr	r3, [r4, #0]
 80179ec:	4639      	mov	r1, r7
 80179ee:	4630      	mov	r0, r6
 80179f0:	eb04 0903 	add.w	r9, r4, r3
 80179f4:	f000 fbb0 	bl	8018158 <_sbrk_r>
 80179f8:	4581      	cmp	r9, r0
 80179fa:	d142      	bne.n	8017a82 <_malloc_r+0xea>
 80179fc:	6821      	ldr	r1, [r4, #0]
 80179fe:	1a6d      	subs	r5, r5, r1
 8017a00:	4629      	mov	r1, r5
 8017a02:	4630      	mov	r0, r6
 8017a04:	f7ff ffa6 	bl	8017954 <sbrk_aligned>
 8017a08:	3001      	adds	r0, #1
 8017a0a:	d03a      	beq.n	8017a82 <_malloc_r+0xea>
 8017a0c:	6823      	ldr	r3, [r4, #0]
 8017a0e:	442b      	add	r3, r5
 8017a10:	6023      	str	r3, [r4, #0]
 8017a12:	f8d8 3000 	ldr.w	r3, [r8]
 8017a16:	685a      	ldr	r2, [r3, #4]
 8017a18:	bb62      	cbnz	r2, 8017a74 <_malloc_r+0xdc>
 8017a1a:	f8c8 7000 	str.w	r7, [r8]
 8017a1e:	e00f      	b.n	8017a40 <_malloc_r+0xa8>
 8017a20:	6822      	ldr	r2, [r4, #0]
 8017a22:	1b52      	subs	r2, r2, r5
 8017a24:	d420      	bmi.n	8017a68 <_malloc_r+0xd0>
 8017a26:	2a0b      	cmp	r2, #11
 8017a28:	d917      	bls.n	8017a5a <_malloc_r+0xc2>
 8017a2a:	1961      	adds	r1, r4, r5
 8017a2c:	42a3      	cmp	r3, r4
 8017a2e:	6025      	str	r5, [r4, #0]
 8017a30:	bf18      	it	ne
 8017a32:	6059      	strne	r1, [r3, #4]
 8017a34:	6863      	ldr	r3, [r4, #4]
 8017a36:	bf08      	it	eq
 8017a38:	f8c8 1000 	streq.w	r1, [r8]
 8017a3c:	5162      	str	r2, [r4, r5]
 8017a3e:	604b      	str	r3, [r1, #4]
 8017a40:	4630      	mov	r0, r6
 8017a42:	f000 f82f 	bl	8017aa4 <__malloc_unlock>
 8017a46:	f104 000b 	add.w	r0, r4, #11
 8017a4a:	1d23      	adds	r3, r4, #4
 8017a4c:	f020 0007 	bic.w	r0, r0, #7
 8017a50:	1ac2      	subs	r2, r0, r3
 8017a52:	bf1c      	itt	ne
 8017a54:	1a1b      	subne	r3, r3, r0
 8017a56:	50a3      	strne	r3, [r4, r2]
 8017a58:	e7af      	b.n	80179ba <_malloc_r+0x22>
 8017a5a:	6862      	ldr	r2, [r4, #4]
 8017a5c:	42a3      	cmp	r3, r4
 8017a5e:	bf0c      	ite	eq
 8017a60:	f8c8 2000 	streq.w	r2, [r8]
 8017a64:	605a      	strne	r2, [r3, #4]
 8017a66:	e7eb      	b.n	8017a40 <_malloc_r+0xa8>
 8017a68:	4623      	mov	r3, r4
 8017a6a:	6864      	ldr	r4, [r4, #4]
 8017a6c:	e7ae      	b.n	80179cc <_malloc_r+0x34>
 8017a6e:	463c      	mov	r4, r7
 8017a70:	687f      	ldr	r7, [r7, #4]
 8017a72:	e7b6      	b.n	80179e2 <_malloc_r+0x4a>
 8017a74:	461a      	mov	r2, r3
 8017a76:	685b      	ldr	r3, [r3, #4]
 8017a78:	42a3      	cmp	r3, r4
 8017a7a:	d1fb      	bne.n	8017a74 <_malloc_r+0xdc>
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	6053      	str	r3, [r2, #4]
 8017a80:	e7de      	b.n	8017a40 <_malloc_r+0xa8>
 8017a82:	230c      	movs	r3, #12
 8017a84:	6033      	str	r3, [r6, #0]
 8017a86:	4630      	mov	r0, r6
 8017a88:	f000 f80c 	bl	8017aa4 <__malloc_unlock>
 8017a8c:	e794      	b.n	80179b8 <_malloc_r+0x20>
 8017a8e:	6005      	str	r5, [r0, #0]
 8017a90:	e7d6      	b.n	8017a40 <_malloc_r+0xa8>
 8017a92:	bf00      	nop
 8017a94:	24068544 	.word	0x24068544

08017a98 <__malloc_lock>:
 8017a98:	4801      	ldr	r0, [pc, #4]	@ (8017aa0 <__malloc_lock+0x8>)
 8017a9a:	f000 bbaa 	b.w	80181f2 <__retarget_lock_acquire_recursive>
 8017a9e:	bf00      	nop
 8017aa0:	24068689 	.word	0x24068689

08017aa4 <__malloc_unlock>:
 8017aa4:	4801      	ldr	r0, [pc, #4]	@ (8017aac <__malloc_unlock+0x8>)
 8017aa6:	f000 bba5 	b.w	80181f4 <__retarget_lock_release_recursive>
 8017aaa:	bf00      	nop
 8017aac:	24068689 	.word	0x24068689

08017ab0 <srand>:
 8017ab0:	b538      	push	{r3, r4, r5, lr}
 8017ab2:	4b10      	ldr	r3, [pc, #64]	@ (8017af4 <srand+0x44>)
 8017ab4:	681d      	ldr	r5, [r3, #0]
 8017ab6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017ab8:	4604      	mov	r4, r0
 8017aba:	b9b3      	cbnz	r3, 8017aea <srand+0x3a>
 8017abc:	2018      	movs	r0, #24
 8017abe:	f7ff ff39 	bl	8017934 <malloc>
 8017ac2:	4602      	mov	r2, r0
 8017ac4:	6328      	str	r0, [r5, #48]	@ 0x30
 8017ac6:	b920      	cbnz	r0, 8017ad2 <srand+0x22>
 8017ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8017af8 <srand+0x48>)
 8017aca:	480c      	ldr	r0, [pc, #48]	@ (8017afc <srand+0x4c>)
 8017acc:	2146      	movs	r1, #70	@ 0x46
 8017ace:	f000 fba9 	bl	8018224 <__assert_func>
 8017ad2:	490b      	ldr	r1, [pc, #44]	@ (8017b00 <srand+0x50>)
 8017ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8017b04 <srand+0x54>)
 8017ad6:	e9c0 1300 	strd	r1, r3, [r0]
 8017ada:	4b0b      	ldr	r3, [pc, #44]	@ (8017b08 <srand+0x58>)
 8017adc:	6083      	str	r3, [r0, #8]
 8017ade:	230b      	movs	r3, #11
 8017ae0:	8183      	strh	r3, [r0, #12]
 8017ae2:	2100      	movs	r1, #0
 8017ae4:	2001      	movs	r0, #1
 8017ae6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017aea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017aec:	2200      	movs	r2, #0
 8017aee:	611c      	str	r4, [r3, #16]
 8017af0:	615a      	str	r2, [r3, #20]
 8017af2:	bd38      	pop	{r3, r4, r5, pc}
 8017af4:	240000c4 	.word	0x240000c4
 8017af8:	08019a14 	.word	0x08019a14
 8017afc:	08019a2b 	.word	0x08019a2b
 8017b00:	abcd330e 	.word	0xabcd330e
 8017b04:	e66d1234 	.word	0xe66d1234
 8017b08:	0005deec 	.word	0x0005deec

08017b0c <rand>:
 8017b0c:	4b16      	ldr	r3, [pc, #88]	@ (8017b68 <rand+0x5c>)
 8017b0e:	b510      	push	{r4, lr}
 8017b10:	681c      	ldr	r4, [r3, #0]
 8017b12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b14:	b9b3      	cbnz	r3, 8017b44 <rand+0x38>
 8017b16:	2018      	movs	r0, #24
 8017b18:	f7ff ff0c 	bl	8017934 <malloc>
 8017b1c:	4602      	mov	r2, r0
 8017b1e:	6320      	str	r0, [r4, #48]	@ 0x30
 8017b20:	b920      	cbnz	r0, 8017b2c <rand+0x20>
 8017b22:	4b12      	ldr	r3, [pc, #72]	@ (8017b6c <rand+0x60>)
 8017b24:	4812      	ldr	r0, [pc, #72]	@ (8017b70 <rand+0x64>)
 8017b26:	2152      	movs	r1, #82	@ 0x52
 8017b28:	f000 fb7c 	bl	8018224 <__assert_func>
 8017b2c:	4911      	ldr	r1, [pc, #68]	@ (8017b74 <rand+0x68>)
 8017b2e:	4b12      	ldr	r3, [pc, #72]	@ (8017b78 <rand+0x6c>)
 8017b30:	e9c0 1300 	strd	r1, r3, [r0]
 8017b34:	4b11      	ldr	r3, [pc, #68]	@ (8017b7c <rand+0x70>)
 8017b36:	6083      	str	r3, [r0, #8]
 8017b38:	230b      	movs	r3, #11
 8017b3a:	8183      	strh	r3, [r0, #12]
 8017b3c:	2100      	movs	r1, #0
 8017b3e:	2001      	movs	r0, #1
 8017b40:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017b44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017b46:	480e      	ldr	r0, [pc, #56]	@ (8017b80 <rand+0x74>)
 8017b48:	690b      	ldr	r3, [r1, #16]
 8017b4a:	694c      	ldr	r4, [r1, #20]
 8017b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8017b84 <rand+0x78>)
 8017b4e:	4358      	muls	r0, r3
 8017b50:	fb02 0004 	mla	r0, r2, r4, r0
 8017b54:	fba3 3202 	umull	r3, r2, r3, r2
 8017b58:	3301      	adds	r3, #1
 8017b5a:	eb40 0002 	adc.w	r0, r0, r2
 8017b5e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017b62:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017b66:	bd10      	pop	{r4, pc}
 8017b68:	240000c4 	.word	0x240000c4
 8017b6c:	08019a14 	.word	0x08019a14
 8017b70:	08019a2b 	.word	0x08019a2b
 8017b74:	abcd330e 	.word	0xabcd330e
 8017b78:	e66d1234 	.word	0xe66d1234
 8017b7c:	0005deec 	.word	0x0005deec
 8017b80:	5851f42d 	.word	0x5851f42d
 8017b84:	4c957f2d 	.word	0x4c957f2d

08017b88 <realloc>:
 8017b88:	4b02      	ldr	r3, [pc, #8]	@ (8017b94 <realloc+0xc>)
 8017b8a:	460a      	mov	r2, r1
 8017b8c:	4601      	mov	r1, r0
 8017b8e:	6818      	ldr	r0, [r3, #0]
 8017b90:	f000 b802 	b.w	8017b98 <_realloc_r>
 8017b94:	240000c4 	.word	0x240000c4

08017b98 <_realloc_r>:
 8017b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b9c:	4680      	mov	r8, r0
 8017b9e:	4615      	mov	r5, r2
 8017ba0:	460c      	mov	r4, r1
 8017ba2:	b921      	cbnz	r1, 8017bae <_realloc_r+0x16>
 8017ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ba8:	4611      	mov	r1, r2
 8017baa:	f7ff bef5 	b.w	8017998 <_malloc_r>
 8017bae:	b92a      	cbnz	r2, 8017bbc <_realloc_r+0x24>
 8017bb0:	f000 fb62 	bl	8018278 <_free_r>
 8017bb4:	2400      	movs	r4, #0
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bbc:	f000 fba6 	bl	801830c <_malloc_usable_size_r>
 8017bc0:	4285      	cmp	r5, r0
 8017bc2:	4606      	mov	r6, r0
 8017bc4:	d802      	bhi.n	8017bcc <_realloc_r+0x34>
 8017bc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017bca:	d8f4      	bhi.n	8017bb6 <_realloc_r+0x1e>
 8017bcc:	4629      	mov	r1, r5
 8017bce:	4640      	mov	r0, r8
 8017bd0:	f7ff fee2 	bl	8017998 <_malloc_r>
 8017bd4:	4607      	mov	r7, r0
 8017bd6:	2800      	cmp	r0, #0
 8017bd8:	d0ec      	beq.n	8017bb4 <_realloc_r+0x1c>
 8017bda:	42b5      	cmp	r5, r6
 8017bdc:	462a      	mov	r2, r5
 8017bde:	4621      	mov	r1, r4
 8017be0:	bf28      	it	cs
 8017be2:	4632      	movcs	r2, r6
 8017be4:	f000 fb0f 	bl	8018206 <memcpy>
 8017be8:	4621      	mov	r1, r4
 8017bea:	4640      	mov	r0, r8
 8017bec:	f000 fb44 	bl	8018278 <_free_r>
 8017bf0:	463c      	mov	r4, r7
 8017bf2:	e7e0      	b.n	8017bb6 <_realloc_r+0x1e>

08017bf4 <_strtoul_l.constprop.0>:
 8017bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bf8:	4e34      	ldr	r6, [pc, #208]	@ (8017ccc <_strtoul_l.constprop.0+0xd8>)
 8017bfa:	4686      	mov	lr, r0
 8017bfc:	460d      	mov	r5, r1
 8017bfe:	4628      	mov	r0, r5
 8017c00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c04:	5d37      	ldrb	r7, [r6, r4]
 8017c06:	f017 0708 	ands.w	r7, r7, #8
 8017c0a:	d1f8      	bne.n	8017bfe <_strtoul_l.constprop.0+0xa>
 8017c0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8017c0e:	d12f      	bne.n	8017c70 <_strtoul_l.constprop.0+0x7c>
 8017c10:	782c      	ldrb	r4, [r5, #0]
 8017c12:	2701      	movs	r7, #1
 8017c14:	1c85      	adds	r5, r0, #2
 8017c16:	f033 0010 	bics.w	r0, r3, #16
 8017c1a:	d109      	bne.n	8017c30 <_strtoul_l.constprop.0+0x3c>
 8017c1c:	2c30      	cmp	r4, #48	@ 0x30
 8017c1e:	d12c      	bne.n	8017c7a <_strtoul_l.constprop.0+0x86>
 8017c20:	7828      	ldrb	r0, [r5, #0]
 8017c22:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017c26:	2858      	cmp	r0, #88	@ 0x58
 8017c28:	d127      	bne.n	8017c7a <_strtoul_l.constprop.0+0x86>
 8017c2a:	786c      	ldrb	r4, [r5, #1]
 8017c2c:	2310      	movs	r3, #16
 8017c2e:	3502      	adds	r5, #2
 8017c30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017c34:	2600      	movs	r6, #0
 8017c36:	fbb8 f8f3 	udiv	r8, r8, r3
 8017c3a:	fb03 f908 	mul.w	r9, r3, r8
 8017c3e:	ea6f 0909 	mvn.w	r9, r9
 8017c42:	4630      	mov	r0, r6
 8017c44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017c48:	f1bc 0f09 	cmp.w	ip, #9
 8017c4c:	d81c      	bhi.n	8017c88 <_strtoul_l.constprop.0+0x94>
 8017c4e:	4664      	mov	r4, ip
 8017c50:	42a3      	cmp	r3, r4
 8017c52:	dd2a      	ble.n	8017caa <_strtoul_l.constprop.0+0xb6>
 8017c54:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017c58:	d007      	beq.n	8017c6a <_strtoul_l.constprop.0+0x76>
 8017c5a:	4580      	cmp	r8, r0
 8017c5c:	d322      	bcc.n	8017ca4 <_strtoul_l.constprop.0+0xb0>
 8017c5e:	d101      	bne.n	8017c64 <_strtoul_l.constprop.0+0x70>
 8017c60:	45a1      	cmp	r9, r4
 8017c62:	db1f      	blt.n	8017ca4 <_strtoul_l.constprop.0+0xb0>
 8017c64:	fb00 4003 	mla	r0, r0, r3, r4
 8017c68:	2601      	movs	r6, #1
 8017c6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c6e:	e7e9      	b.n	8017c44 <_strtoul_l.constprop.0+0x50>
 8017c70:	2c2b      	cmp	r4, #43	@ 0x2b
 8017c72:	bf04      	itt	eq
 8017c74:	782c      	ldrbeq	r4, [r5, #0]
 8017c76:	1c85      	addeq	r5, r0, #2
 8017c78:	e7cd      	b.n	8017c16 <_strtoul_l.constprop.0+0x22>
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d1d8      	bne.n	8017c30 <_strtoul_l.constprop.0+0x3c>
 8017c7e:	2c30      	cmp	r4, #48	@ 0x30
 8017c80:	bf0c      	ite	eq
 8017c82:	2308      	moveq	r3, #8
 8017c84:	230a      	movne	r3, #10
 8017c86:	e7d3      	b.n	8017c30 <_strtoul_l.constprop.0+0x3c>
 8017c88:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017c8c:	f1bc 0f19 	cmp.w	ip, #25
 8017c90:	d801      	bhi.n	8017c96 <_strtoul_l.constprop.0+0xa2>
 8017c92:	3c37      	subs	r4, #55	@ 0x37
 8017c94:	e7dc      	b.n	8017c50 <_strtoul_l.constprop.0+0x5c>
 8017c96:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017c9a:	f1bc 0f19 	cmp.w	ip, #25
 8017c9e:	d804      	bhi.n	8017caa <_strtoul_l.constprop.0+0xb6>
 8017ca0:	3c57      	subs	r4, #87	@ 0x57
 8017ca2:	e7d5      	b.n	8017c50 <_strtoul_l.constprop.0+0x5c>
 8017ca4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017ca8:	e7df      	b.n	8017c6a <_strtoul_l.constprop.0+0x76>
 8017caa:	1c73      	adds	r3, r6, #1
 8017cac:	d106      	bne.n	8017cbc <_strtoul_l.constprop.0+0xc8>
 8017cae:	2322      	movs	r3, #34	@ 0x22
 8017cb0:	f8ce 3000 	str.w	r3, [lr]
 8017cb4:	4630      	mov	r0, r6
 8017cb6:	b932      	cbnz	r2, 8017cc6 <_strtoul_l.constprop.0+0xd2>
 8017cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cbc:	b107      	cbz	r7, 8017cc0 <_strtoul_l.constprop.0+0xcc>
 8017cbe:	4240      	negs	r0, r0
 8017cc0:	2a00      	cmp	r2, #0
 8017cc2:	d0f9      	beq.n	8017cb8 <_strtoul_l.constprop.0+0xc4>
 8017cc4:	b106      	cbz	r6, 8017cc8 <_strtoul_l.constprop.0+0xd4>
 8017cc6:	1e69      	subs	r1, r5, #1
 8017cc8:	6011      	str	r1, [r2, #0]
 8017cca:	e7f5      	b.n	8017cb8 <_strtoul_l.constprop.0+0xc4>
 8017ccc:	08019a84 	.word	0x08019a84

08017cd0 <strtoul>:
 8017cd0:	4613      	mov	r3, r2
 8017cd2:	460a      	mov	r2, r1
 8017cd4:	4601      	mov	r1, r0
 8017cd6:	4802      	ldr	r0, [pc, #8]	@ (8017ce0 <strtoul+0x10>)
 8017cd8:	6800      	ldr	r0, [r0, #0]
 8017cda:	f7ff bf8b 	b.w	8017bf4 <_strtoul_l.constprop.0>
 8017cde:	bf00      	nop
 8017ce0:	240000c4 	.word	0x240000c4

08017ce4 <std>:
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	b510      	push	{r4, lr}
 8017ce8:	4604      	mov	r4, r0
 8017cea:	e9c0 3300 	strd	r3, r3, [r0]
 8017cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017cf2:	6083      	str	r3, [r0, #8]
 8017cf4:	8181      	strh	r1, [r0, #12]
 8017cf6:	6643      	str	r3, [r0, #100]	@ 0x64
 8017cf8:	81c2      	strh	r2, [r0, #14]
 8017cfa:	6183      	str	r3, [r0, #24]
 8017cfc:	4619      	mov	r1, r3
 8017cfe:	2208      	movs	r2, #8
 8017d00:	305c      	adds	r0, #92	@ 0x5c
 8017d02:	f000 f961 	bl	8017fc8 <memset>
 8017d06:	4b0d      	ldr	r3, [pc, #52]	@ (8017d3c <std+0x58>)
 8017d08:	6263      	str	r3, [r4, #36]	@ 0x24
 8017d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8017d40 <std+0x5c>)
 8017d0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8017d44 <std+0x60>)
 8017d10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017d12:	4b0d      	ldr	r3, [pc, #52]	@ (8017d48 <std+0x64>)
 8017d14:	6323      	str	r3, [r4, #48]	@ 0x30
 8017d16:	4b0d      	ldr	r3, [pc, #52]	@ (8017d4c <std+0x68>)
 8017d18:	6224      	str	r4, [r4, #32]
 8017d1a:	429c      	cmp	r4, r3
 8017d1c:	d006      	beq.n	8017d2c <std+0x48>
 8017d1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017d22:	4294      	cmp	r4, r2
 8017d24:	d002      	beq.n	8017d2c <std+0x48>
 8017d26:	33d0      	adds	r3, #208	@ 0xd0
 8017d28:	429c      	cmp	r4, r3
 8017d2a:	d105      	bne.n	8017d38 <std+0x54>
 8017d2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d34:	f000 ba5c 	b.w	80181f0 <__retarget_lock_init_recursive>
 8017d38:	bd10      	pop	{r4, pc}
 8017d3a:	bf00      	nop
 8017d3c:	08017ed1 	.word	0x08017ed1
 8017d40:	08017ef3 	.word	0x08017ef3
 8017d44:	08017f2b 	.word	0x08017f2b
 8017d48:	08017f4f 	.word	0x08017f4f
 8017d4c:	24068548 	.word	0x24068548

08017d50 <stdio_exit_handler>:
 8017d50:	4a02      	ldr	r2, [pc, #8]	@ (8017d5c <stdio_exit_handler+0xc>)
 8017d52:	4903      	ldr	r1, [pc, #12]	@ (8017d60 <stdio_exit_handler+0x10>)
 8017d54:	4803      	ldr	r0, [pc, #12]	@ (8017d64 <stdio_exit_handler+0x14>)
 8017d56:	f000 b869 	b.w	8017e2c <_fwalk_sglue>
 8017d5a:	bf00      	nop
 8017d5c:	240000b8 	.word	0x240000b8
 8017d60:	080189f1 	.word	0x080189f1
 8017d64:	240000c8 	.word	0x240000c8

08017d68 <cleanup_stdio>:
 8017d68:	6841      	ldr	r1, [r0, #4]
 8017d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8017d9c <cleanup_stdio+0x34>)
 8017d6c:	4299      	cmp	r1, r3
 8017d6e:	b510      	push	{r4, lr}
 8017d70:	4604      	mov	r4, r0
 8017d72:	d001      	beq.n	8017d78 <cleanup_stdio+0x10>
 8017d74:	f000 fe3c 	bl	80189f0 <_fflush_r>
 8017d78:	68a1      	ldr	r1, [r4, #8]
 8017d7a:	4b09      	ldr	r3, [pc, #36]	@ (8017da0 <cleanup_stdio+0x38>)
 8017d7c:	4299      	cmp	r1, r3
 8017d7e:	d002      	beq.n	8017d86 <cleanup_stdio+0x1e>
 8017d80:	4620      	mov	r0, r4
 8017d82:	f000 fe35 	bl	80189f0 <_fflush_r>
 8017d86:	68e1      	ldr	r1, [r4, #12]
 8017d88:	4b06      	ldr	r3, [pc, #24]	@ (8017da4 <cleanup_stdio+0x3c>)
 8017d8a:	4299      	cmp	r1, r3
 8017d8c:	d004      	beq.n	8017d98 <cleanup_stdio+0x30>
 8017d8e:	4620      	mov	r0, r4
 8017d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d94:	f000 be2c 	b.w	80189f0 <_fflush_r>
 8017d98:	bd10      	pop	{r4, pc}
 8017d9a:	bf00      	nop
 8017d9c:	24068548 	.word	0x24068548
 8017da0:	240685b0 	.word	0x240685b0
 8017da4:	24068618 	.word	0x24068618

08017da8 <global_stdio_init.part.0>:
 8017da8:	b510      	push	{r4, lr}
 8017daa:	4b0b      	ldr	r3, [pc, #44]	@ (8017dd8 <global_stdio_init.part.0+0x30>)
 8017dac:	4c0b      	ldr	r4, [pc, #44]	@ (8017ddc <global_stdio_init.part.0+0x34>)
 8017dae:	4a0c      	ldr	r2, [pc, #48]	@ (8017de0 <global_stdio_init.part.0+0x38>)
 8017db0:	601a      	str	r2, [r3, #0]
 8017db2:	4620      	mov	r0, r4
 8017db4:	2200      	movs	r2, #0
 8017db6:	2104      	movs	r1, #4
 8017db8:	f7ff ff94 	bl	8017ce4 <std>
 8017dbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017dc0:	2201      	movs	r2, #1
 8017dc2:	2109      	movs	r1, #9
 8017dc4:	f7ff ff8e 	bl	8017ce4 <std>
 8017dc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017dcc:	2202      	movs	r2, #2
 8017dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dd2:	2112      	movs	r1, #18
 8017dd4:	f7ff bf86 	b.w	8017ce4 <std>
 8017dd8:	24068680 	.word	0x24068680
 8017ddc:	24068548 	.word	0x24068548
 8017de0:	08017d51 	.word	0x08017d51

08017de4 <__sfp_lock_acquire>:
 8017de4:	4801      	ldr	r0, [pc, #4]	@ (8017dec <__sfp_lock_acquire+0x8>)
 8017de6:	f000 ba04 	b.w	80181f2 <__retarget_lock_acquire_recursive>
 8017dea:	bf00      	nop
 8017dec:	2406868a 	.word	0x2406868a

08017df0 <__sfp_lock_release>:
 8017df0:	4801      	ldr	r0, [pc, #4]	@ (8017df8 <__sfp_lock_release+0x8>)
 8017df2:	f000 b9ff 	b.w	80181f4 <__retarget_lock_release_recursive>
 8017df6:	bf00      	nop
 8017df8:	2406868a 	.word	0x2406868a

08017dfc <__sinit>:
 8017dfc:	b510      	push	{r4, lr}
 8017dfe:	4604      	mov	r4, r0
 8017e00:	f7ff fff0 	bl	8017de4 <__sfp_lock_acquire>
 8017e04:	6a23      	ldr	r3, [r4, #32]
 8017e06:	b11b      	cbz	r3, 8017e10 <__sinit+0x14>
 8017e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e0c:	f7ff bff0 	b.w	8017df0 <__sfp_lock_release>
 8017e10:	4b04      	ldr	r3, [pc, #16]	@ (8017e24 <__sinit+0x28>)
 8017e12:	6223      	str	r3, [r4, #32]
 8017e14:	4b04      	ldr	r3, [pc, #16]	@ (8017e28 <__sinit+0x2c>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d1f5      	bne.n	8017e08 <__sinit+0xc>
 8017e1c:	f7ff ffc4 	bl	8017da8 <global_stdio_init.part.0>
 8017e20:	e7f2      	b.n	8017e08 <__sinit+0xc>
 8017e22:	bf00      	nop
 8017e24:	08017d69 	.word	0x08017d69
 8017e28:	24068680 	.word	0x24068680

08017e2c <_fwalk_sglue>:
 8017e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e30:	4607      	mov	r7, r0
 8017e32:	4688      	mov	r8, r1
 8017e34:	4614      	mov	r4, r2
 8017e36:	2600      	movs	r6, #0
 8017e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8017e40:	d505      	bpl.n	8017e4e <_fwalk_sglue+0x22>
 8017e42:	6824      	ldr	r4, [r4, #0]
 8017e44:	2c00      	cmp	r4, #0
 8017e46:	d1f7      	bne.n	8017e38 <_fwalk_sglue+0xc>
 8017e48:	4630      	mov	r0, r6
 8017e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e4e:	89ab      	ldrh	r3, [r5, #12]
 8017e50:	2b01      	cmp	r3, #1
 8017e52:	d907      	bls.n	8017e64 <_fwalk_sglue+0x38>
 8017e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e58:	3301      	adds	r3, #1
 8017e5a:	d003      	beq.n	8017e64 <_fwalk_sglue+0x38>
 8017e5c:	4629      	mov	r1, r5
 8017e5e:	4638      	mov	r0, r7
 8017e60:	47c0      	blx	r8
 8017e62:	4306      	orrs	r6, r0
 8017e64:	3568      	adds	r5, #104	@ 0x68
 8017e66:	e7e9      	b.n	8017e3c <_fwalk_sglue+0x10>

08017e68 <sniprintf>:
 8017e68:	b40c      	push	{r2, r3}
 8017e6a:	b530      	push	{r4, r5, lr}
 8017e6c:	4b17      	ldr	r3, [pc, #92]	@ (8017ecc <sniprintf+0x64>)
 8017e6e:	1e0c      	subs	r4, r1, #0
 8017e70:	681d      	ldr	r5, [r3, #0]
 8017e72:	b09d      	sub	sp, #116	@ 0x74
 8017e74:	da08      	bge.n	8017e88 <sniprintf+0x20>
 8017e76:	238b      	movs	r3, #139	@ 0x8b
 8017e78:	602b      	str	r3, [r5, #0]
 8017e7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e7e:	b01d      	add	sp, #116	@ 0x74
 8017e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e84:	b002      	add	sp, #8
 8017e86:	4770      	bx	lr
 8017e88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017e90:	bf14      	ite	ne
 8017e92:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017e96:	4623      	moveq	r3, r4
 8017e98:	9304      	str	r3, [sp, #16]
 8017e9a:	9307      	str	r3, [sp, #28]
 8017e9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ea0:	9002      	str	r0, [sp, #8]
 8017ea2:	9006      	str	r0, [sp, #24]
 8017ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ea8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017eaa:	ab21      	add	r3, sp, #132	@ 0x84
 8017eac:	a902      	add	r1, sp, #8
 8017eae:	4628      	mov	r0, r5
 8017eb0:	9301      	str	r3, [sp, #4]
 8017eb2:	f000 fa8f 	bl	80183d4 <_svfiprintf_r>
 8017eb6:	1c43      	adds	r3, r0, #1
 8017eb8:	bfbc      	itt	lt
 8017eba:	238b      	movlt	r3, #139	@ 0x8b
 8017ebc:	602b      	strlt	r3, [r5, #0]
 8017ebe:	2c00      	cmp	r4, #0
 8017ec0:	d0dd      	beq.n	8017e7e <sniprintf+0x16>
 8017ec2:	9b02      	ldr	r3, [sp, #8]
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	701a      	strb	r2, [r3, #0]
 8017ec8:	e7d9      	b.n	8017e7e <sniprintf+0x16>
 8017eca:	bf00      	nop
 8017ecc:	240000c4 	.word	0x240000c4

08017ed0 <__sread>:
 8017ed0:	b510      	push	{r4, lr}
 8017ed2:	460c      	mov	r4, r1
 8017ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ed8:	f000 f92c 	bl	8018134 <_read_r>
 8017edc:	2800      	cmp	r0, #0
 8017ede:	bfab      	itete	ge
 8017ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8017ee4:	181b      	addge	r3, r3, r0
 8017ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017eea:	bfac      	ite	ge
 8017eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017eee:	81a3      	strhlt	r3, [r4, #12]
 8017ef0:	bd10      	pop	{r4, pc}

08017ef2 <__swrite>:
 8017ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ef6:	461f      	mov	r7, r3
 8017ef8:	898b      	ldrh	r3, [r1, #12]
 8017efa:	05db      	lsls	r3, r3, #23
 8017efc:	4605      	mov	r5, r0
 8017efe:	460c      	mov	r4, r1
 8017f00:	4616      	mov	r6, r2
 8017f02:	d505      	bpl.n	8017f10 <__swrite+0x1e>
 8017f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f08:	2302      	movs	r3, #2
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	f000 f900 	bl	8018110 <_lseek_r>
 8017f10:	89a3      	ldrh	r3, [r4, #12]
 8017f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017f1a:	81a3      	strh	r3, [r4, #12]
 8017f1c:	4632      	mov	r2, r6
 8017f1e:	463b      	mov	r3, r7
 8017f20:	4628      	mov	r0, r5
 8017f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f26:	f000 b927 	b.w	8018178 <_write_r>

08017f2a <__sseek>:
 8017f2a:	b510      	push	{r4, lr}
 8017f2c:	460c      	mov	r4, r1
 8017f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f32:	f000 f8ed 	bl	8018110 <_lseek_r>
 8017f36:	1c43      	adds	r3, r0, #1
 8017f38:	89a3      	ldrh	r3, [r4, #12]
 8017f3a:	bf15      	itete	ne
 8017f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017f46:	81a3      	strheq	r3, [r4, #12]
 8017f48:	bf18      	it	ne
 8017f4a:	81a3      	strhne	r3, [r4, #12]
 8017f4c:	bd10      	pop	{r4, pc}

08017f4e <__sclose>:
 8017f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f52:	f000 b877 	b.w	8018044 <_close_r>

08017f56 <_vsniprintf_r>:
 8017f56:	b530      	push	{r4, r5, lr}
 8017f58:	4614      	mov	r4, r2
 8017f5a:	2c00      	cmp	r4, #0
 8017f5c:	b09b      	sub	sp, #108	@ 0x6c
 8017f5e:	4605      	mov	r5, r0
 8017f60:	461a      	mov	r2, r3
 8017f62:	da05      	bge.n	8017f70 <_vsniprintf_r+0x1a>
 8017f64:	238b      	movs	r3, #139	@ 0x8b
 8017f66:	6003      	str	r3, [r0, #0]
 8017f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f6c:	b01b      	add	sp, #108	@ 0x6c
 8017f6e:	bd30      	pop	{r4, r5, pc}
 8017f70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017f74:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017f78:	bf14      	ite	ne
 8017f7a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017f7e:	4623      	moveq	r3, r4
 8017f80:	9302      	str	r3, [sp, #8]
 8017f82:	9305      	str	r3, [sp, #20]
 8017f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f88:	9100      	str	r1, [sp, #0]
 8017f8a:	9104      	str	r1, [sp, #16]
 8017f8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017f90:	4669      	mov	r1, sp
 8017f92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017f94:	f000 fa1e 	bl	80183d4 <_svfiprintf_r>
 8017f98:	1c43      	adds	r3, r0, #1
 8017f9a:	bfbc      	itt	lt
 8017f9c:	238b      	movlt	r3, #139	@ 0x8b
 8017f9e:	602b      	strlt	r3, [r5, #0]
 8017fa0:	2c00      	cmp	r4, #0
 8017fa2:	d0e3      	beq.n	8017f6c <_vsniprintf_r+0x16>
 8017fa4:	9b00      	ldr	r3, [sp, #0]
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	701a      	strb	r2, [r3, #0]
 8017faa:	e7df      	b.n	8017f6c <_vsniprintf_r+0x16>

08017fac <vsniprintf>:
 8017fac:	b507      	push	{r0, r1, r2, lr}
 8017fae:	9300      	str	r3, [sp, #0]
 8017fb0:	4613      	mov	r3, r2
 8017fb2:	460a      	mov	r2, r1
 8017fb4:	4601      	mov	r1, r0
 8017fb6:	4803      	ldr	r0, [pc, #12]	@ (8017fc4 <vsniprintf+0x18>)
 8017fb8:	6800      	ldr	r0, [r0, #0]
 8017fba:	f7ff ffcc 	bl	8017f56 <_vsniprintf_r>
 8017fbe:	b003      	add	sp, #12
 8017fc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8017fc4:	240000c4 	.word	0x240000c4

08017fc8 <memset>:
 8017fc8:	4402      	add	r2, r0
 8017fca:	4603      	mov	r3, r0
 8017fcc:	4293      	cmp	r3, r2
 8017fce:	d100      	bne.n	8017fd2 <memset+0xa>
 8017fd0:	4770      	bx	lr
 8017fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8017fd6:	e7f9      	b.n	8017fcc <memset+0x4>

08017fd8 <strchr>:
 8017fd8:	b2c9      	uxtb	r1, r1
 8017fda:	4603      	mov	r3, r0
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fe2:	b112      	cbz	r2, 8017fea <strchr+0x12>
 8017fe4:	428a      	cmp	r2, r1
 8017fe6:	d1f9      	bne.n	8017fdc <strchr+0x4>
 8017fe8:	4770      	bx	lr
 8017fea:	2900      	cmp	r1, #0
 8017fec:	bf18      	it	ne
 8017fee:	2000      	movne	r0, #0
 8017ff0:	4770      	bx	lr

08017ff2 <strncmp>:
 8017ff2:	b510      	push	{r4, lr}
 8017ff4:	b16a      	cbz	r2, 8018012 <strncmp+0x20>
 8017ff6:	3901      	subs	r1, #1
 8017ff8:	1884      	adds	r4, r0, r2
 8017ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ffe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018002:	429a      	cmp	r2, r3
 8018004:	d103      	bne.n	801800e <strncmp+0x1c>
 8018006:	42a0      	cmp	r0, r4
 8018008:	d001      	beq.n	801800e <strncmp+0x1c>
 801800a:	2a00      	cmp	r2, #0
 801800c:	d1f5      	bne.n	8017ffa <strncmp+0x8>
 801800e:	1ad0      	subs	r0, r2, r3
 8018010:	bd10      	pop	{r4, pc}
 8018012:	4610      	mov	r0, r2
 8018014:	e7fc      	b.n	8018010 <strncmp+0x1e>

08018016 <strstr>:
 8018016:	780a      	ldrb	r2, [r1, #0]
 8018018:	b570      	push	{r4, r5, r6, lr}
 801801a:	b96a      	cbnz	r2, 8018038 <strstr+0x22>
 801801c:	bd70      	pop	{r4, r5, r6, pc}
 801801e:	429a      	cmp	r2, r3
 8018020:	d109      	bne.n	8018036 <strstr+0x20>
 8018022:	460c      	mov	r4, r1
 8018024:	4605      	mov	r5, r0
 8018026:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801802a:	2b00      	cmp	r3, #0
 801802c:	d0f6      	beq.n	801801c <strstr+0x6>
 801802e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018032:	429e      	cmp	r6, r3
 8018034:	d0f7      	beq.n	8018026 <strstr+0x10>
 8018036:	3001      	adds	r0, #1
 8018038:	7803      	ldrb	r3, [r0, #0]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d1ef      	bne.n	801801e <strstr+0x8>
 801803e:	4618      	mov	r0, r3
 8018040:	e7ec      	b.n	801801c <strstr+0x6>
	...

08018044 <_close_r>:
 8018044:	b538      	push	{r3, r4, r5, lr}
 8018046:	4d06      	ldr	r5, [pc, #24]	@ (8018060 <_close_r+0x1c>)
 8018048:	2300      	movs	r3, #0
 801804a:	4604      	mov	r4, r0
 801804c:	4608      	mov	r0, r1
 801804e:	602b      	str	r3, [r5, #0]
 8018050:	f7e9 fee4 	bl	8001e1c <_close>
 8018054:	1c43      	adds	r3, r0, #1
 8018056:	d102      	bne.n	801805e <_close_r+0x1a>
 8018058:	682b      	ldr	r3, [r5, #0]
 801805a:	b103      	cbz	r3, 801805e <_close_r+0x1a>
 801805c:	6023      	str	r3, [r4, #0]
 801805e:	bd38      	pop	{r3, r4, r5, pc}
 8018060:	24068684 	.word	0x24068684

08018064 <_reclaim_reent>:
 8018064:	4b29      	ldr	r3, [pc, #164]	@ (801810c <_reclaim_reent+0xa8>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	4283      	cmp	r3, r0
 801806a:	b570      	push	{r4, r5, r6, lr}
 801806c:	4604      	mov	r4, r0
 801806e:	d04b      	beq.n	8018108 <_reclaim_reent+0xa4>
 8018070:	69c3      	ldr	r3, [r0, #28]
 8018072:	b1ab      	cbz	r3, 80180a0 <_reclaim_reent+0x3c>
 8018074:	68db      	ldr	r3, [r3, #12]
 8018076:	b16b      	cbz	r3, 8018094 <_reclaim_reent+0x30>
 8018078:	2500      	movs	r5, #0
 801807a:	69e3      	ldr	r3, [r4, #28]
 801807c:	68db      	ldr	r3, [r3, #12]
 801807e:	5959      	ldr	r1, [r3, r5]
 8018080:	2900      	cmp	r1, #0
 8018082:	d13b      	bne.n	80180fc <_reclaim_reent+0x98>
 8018084:	3504      	adds	r5, #4
 8018086:	2d80      	cmp	r5, #128	@ 0x80
 8018088:	d1f7      	bne.n	801807a <_reclaim_reent+0x16>
 801808a:	69e3      	ldr	r3, [r4, #28]
 801808c:	4620      	mov	r0, r4
 801808e:	68d9      	ldr	r1, [r3, #12]
 8018090:	f000 f8f2 	bl	8018278 <_free_r>
 8018094:	69e3      	ldr	r3, [r4, #28]
 8018096:	6819      	ldr	r1, [r3, #0]
 8018098:	b111      	cbz	r1, 80180a0 <_reclaim_reent+0x3c>
 801809a:	4620      	mov	r0, r4
 801809c:	f000 f8ec 	bl	8018278 <_free_r>
 80180a0:	6961      	ldr	r1, [r4, #20]
 80180a2:	b111      	cbz	r1, 80180aa <_reclaim_reent+0x46>
 80180a4:	4620      	mov	r0, r4
 80180a6:	f000 f8e7 	bl	8018278 <_free_r>
 80180aa:	69e1      	ldr	r1, [r4, #28]
 80180ac:	b111      	cbz	r1, 80180b4 <_reclaim_reent+0x50>
 80180ae:	4620      	mov	r0, r4
 80180b0:	f000 f8e2 	bl	8018278 <_free_r>
 80180b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80180b6:	b111      	cbz	r1, 80180be <_reclaim_reent+0x5a>
 80180b8:	4620      	mov	r0, r4
 80180ba:	f000 f8dd 	bl	8018278 <_free_r>
 80180be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80180c0:	b111      	cbz	r1, 80180c8 <_reclaim_reent+0x64>
 80180c2:	4620      	mov	r0, r4
 80180c4:	f000 f8d8 	bl	8018278 <_free_r>
 80180c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80180ca:	b111      	cbz	r1, 80180d2 <_reclaim_reent+0x6e>
 80180cc:	4620      	mov	r0, r4
 80180ce:	f000 f8d3 	bl	8018278 <_free_r>
 80180d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80180d4:	b111      	cbz	r1, 80180dc <_reclaim_reent+0x78>
 80180d6:	4620      	mov	r0, r4
 80180d8:	f000 f8ce 	bl	8018278 <_free_r>
 80180dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80180de:	b111      	cbz	r1, 80180e6 <_reclaim_reent+0x82>
 80180e0:	4620      	mov	r0, r4
 80180e2:	f000 f8c9 	bl	8018278 <_free_r>
 80180e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80180e8:	b111      	cbz	r1, 80180f0 <_reclaim_reent+0x8c>
 80180ea:	4620      	mov	r0, r4
 80180ec:	f000 f8c4 	bl	8018278 <_free_r>
 80180f0:	6a23      	ldr	r3, [r4, #32]
 80180f2:	b14b      	cbz	r3, 8018108 <_reclaim_reent+0xa4>
 80180f4:	4620      	mov	r0, r4
 80180f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180fa:	4718      	bx	r3
 80180fc:	680e      	ldr	r6, [r1, #0]
 80180fe:	4620      	mov	r0, r4
 8018100:	f000 f8ba 	bl	8018278 <_free_r>
 8018104:	4631      	mov	r1, r6
 8018106:	e7bb      	b.n	8018080 <_reclaim_reent+0x1c>
 8018108:	bd70      	pop	{r4, r5, r6, pc}
 801810a:	bf00      	nop
 801810c:	240000c4 	.word	0x240000c4

08018110 <_lseek_r>:
 8018110:	b538      	push	{r3, r4, r5, lr}
 8018112:	4d07      	ldr	r5, [pc, #28]	@ (8018130 <_lseek_r+0x20>)
 8018114:	4604      	mov	r4, r0
 8018116:	4608      	mov	r0, r1
 8018118:	4611      	mov	r1, r2
 801811a:	2200      	movs	r2, #0
 801811c:	602a      	str	r2, [r5, #0]
 801811e:	461a      	mov	r2, r3
 8018120:	f7e9 fea3 	bl	8001e6a <_lseek>
 8018124:	1c43      	adds	r3, r0, #1
 8018126:	d102      	bne.n	801812e <_lseek_r+0x1e>
 8018128:	682b      	ldr	r3, [r5, #0]
 801812a:	b103      	cbz	r3, 801812e <_lseek_r+0x1e>
 801812c:	6023      	str	r3, [r4, #0]
 801812e:	bd38      	pop	{r3, r4, r5, pc}
 8018130:	24068684 	.word	0x24068684

08018134 <_read_r>:
 8018134:	b538      	push	{r3, r4, r5, lr}
 8018136:	4d07      	ldr	r5, [pc, #28]	@ (8018154 <_read_r+0x20>)
 8018138:	4604      	mov	r4, r0
 801813a:	4608      	mov	r0, r1
 801813c:	4611      	mov	r1, r2
 801813e:	2200      	movs	r2, #0
 8018140:	602a      	str	r2, [r5, #0]
 8018142:	461a      	mov	r2, r3
 8018144:	f7e9 fe31 	bl	8001daa <_read>
 8018148:	1c43      	adds	r3, r0, #1
 801814a:	d102      	bne.n	8018152 <_read_r+0x1e>
 801814c:	682b      	ldr	r3, [r5, #0]
 801814e:	b103      	cbz	r3, 8018152 <_read_r+0x1e>
 8018150:	6023      	str	r3, [r4, #0]
 8018152:	bd38      	pop	{r3, r4, r5, pc}
 8018154:	24068684 	.word	0x24068684

08018158 <_sbrk_r>:
 8018158:	b538      	push	{r3, r4, r5, lr}
 801815a:	4d06      	ldr	r5, [pc, #24]	@ (8018174 <_sbrk_r+0x1c>)
 801815c:	2300      	movs	r3, #0
 801815e:	4604      	mov	r4, r0
 8018160:	4608      	mov	r0, r1
 8018162:	602b      	str	r3, [r5, #0]
 8018164:	f7e9 fe8e 	bl	8001e84 <_sbrk>
 8018168:	1c43      	adds	r3, r0, #1
 801816a:	d102      	bne.n	8018172 <_sbrk_r+0x1a>
 801816c:	682b      	ldr	r3, [r5, #0]
 801816e:	b103      	cbz	r3, 8018172 <_sbrk_r+0x1a>
 8018170:	6023      	str	r3, [r4, #0]
 8018172:	bd38      	pop	{r3, r4, r5, pc}
 8018174:	24068684 	.word	0x24068684

08018178 <_write_r>:
 8018178:	b538      	push	{r3, r4, r5, lr}
 801817a:	4d07      	ldr	r5, [pc, #28]	@ (8018198 <_write_r+0x20>)
 801817c:	4604      	mov	r4, r0
 801817e:	4608      	mov	r0, r1
 8018180:	4611      	mov	r1, r2
 8018182:	2200      	movs	r2, #0
 8018184:	602a      	str	r2, [r5, #0]
 8018186:	461a      	mov	r2, r3
 8018188:	f7e9 fe2c 	bl	8001de4 <_write>
 801818c:	1c43      	adds	r3, r0, #1
 801818e:	d102      	bne.n	8018196 <_write_r+0x1e>
 8018190:	682b      	ldr	r3, [r5, #0]
 8018192:	b103      	cbz	r3, 8018196 <_write_r+0x1e>
 8018194:	6023      	str	r3, [r4, #0]
 8018196:	bd38      	pop	{r3, r4, r5, pc}
 8018198:	24068684 	.word	0x24068684

0801819c <__errno>:
 801819c:	4b01      	ldr	r3, [pc, #4]	@ (80181a4 <__errno+0x8>)
 801819e:	6818      	ldr	r0, [r3, #0]
 80181a0:	4770      	bx	lr
 80181a2:	bf00      	nop
 80181a4:	240000c4 	.word	0x240000c4

080181a8 <__libc_init_array>:
 80181a8:	b570      	push	{r4, r5, r6, lr}
 80181aa:	4d0d      	ldr	r5, [pc, #52]	@ (80181e0 <__libc_init_array+0x38>)
 80181ac:	4c0d      	ldr	r4, [pc, #52]	@ (80181e4 <__libc_init_array+0x3c>)
 80181ae:	1b64      	subs	r4, r4, r5
 80181b0:	10a4      	asrs	r4, r4, #2
 80181b2:	2600      	movs	r6, #0
 80181b4:	42a6      	cmp	r6, r4
 80181b6:	d109      	bne.n	80181cc <__libc_init_array+0x24>
 80181b8:	4d0b      	ldr	r5, [pc, #44]	@ (80181e8 <__libc_init_array+0x40>)
 80181ba:	4c0c      	ldr	r4, [pc, #48]	@ (80181ec <__libc_init_array+0x44>)
 80181bc:	f000 ff10 	bl	8018fe0 <_init>
 80181c0:	1b64      	subs	r4, r4, r5
 80181c2:	10a4      	asrs	r4, r4, #2
 80181c4:	2600      	movs	r6, #0
 80181c6:	42a6      	cmp	r6, r4
 80181c8:	d105      	bne.n	80181d6 <__libc_init_array+0x2e>
 80181ca:	bd70      	pop	{r4, r5, r6, pc}
 80181cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80181d0:	4798      	blx	r3
 80181d2:	3601      	adds	r6, #1
 80181d4:	e7ee      	b.n	80181b4 <__libc_init_array+0xc>
 80181d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80181da:	4798      	blx	r3
 80181dc:	3601      	adds	r6, #1
 80181de:	e7f2      	b.n	80181c6 <__libc_init_array+0x1e>
 80181e0:	08019bfc 	.word	0x08019bfc
 80181e4:	08019bfc 	.word	0x08019bfc
 80181e8:	08019bfc 	.word	0x08019bfc
 80181ec:	08019c04 	.word	0x08019c04

080181f0 <__retarget_lock_init_recursive>:
 80181f0:	4770      	bx	lr

080181f2 <__retarget_lock_acquire_recursive>:
 80181f2:	4770      	bx	lr

080181f4 <__retarget_lock_release_recursive>:
 80181f4:	4770      	bx	lr

080181f6 <strcpy>:
 80181f6:	4603      	mov	r3, r0
 80181f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80181fc:	f803 2b01 	strb.w	r2, [r3], #1
 8018200:	2a00      	cmp	r2, #0
 8018202:	d1f9      	bne.n	80181f8 <strcpy+0x2>
 8018204:	4770      	bx	lr

08018206 <memcpy>:
 8018206:	440a      	add	r2, r1
 8018208:	4291      	cmp	r1, r2
 801820a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801820e:	d100      	bne.n	8018212 <memcpy+0xc>
 8018210:	4770      	bx	lr
 8018212:	b510      	push	{r4, lr}
 8018214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018218:	f803 4f01 	strb.w	r4, [r3, #1]!
 801821c:	4291      	cmp	r1, r2
 801821e:	d1f9      	bne.n	8018214 <memcpy+0xe>
 8018220:	bd10      	pop	{r4, pc}
	...

08018224 <__assert_func>:
 8018224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018226:	4614      	mov	r4, r2
 8018228:	461a      	mov	r2, r3
 801822a:	4b09      	ldr	r3, [pc, #36]	@ (8018250 <__assert_func+0x2c>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	4605      	mov	r5, r0
 8018230:	68d8      	ldr	r0, [r3, #12]
 8018232:	b954      	cbnz	r4, 801824a <__assert_func+0x26>
 8018234:	4b07      	ldr	r3, [pc, #28]	@ (8018254 <__assert_func+0x30>)
 8018236:	461c      	mov	r4, r3
 8018238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801823c:	9100      	str	r1, [sp, #0]
 801823e:	462b      	mov	r3, r5
 8018240:	4905      	ldr	r1, [pc, #20]	@ (8018258 <__assert_func+0x34>)
 8018242:	f000 fbfd 	bl	8018a40 <fiprintf>
 8018246:	f000 fc27 	bl	8018a98 <abort>
 801824a:	4b04      	ldr	r3, [pc, #16]	@ (801825c <__assert_func+0x38>)
 801824c:	e7f4      	b.n	8018238 <__assert_func+0x14>
 801824e:	bf00      	nop
 8018250:	240000c4 	.word	0x240000c4
 8018254:	08019bbf 	.word	0x08019bbf
 8018258:	08019b91 	.word	0x08019b91
 801825c:	08019b84 	.word	0x08019b84

08018260 <__env_lock>:
 8018260:	4801      	ldr	r0, [pc, #4]	@ (8018268 <__env_lock+0x8>)
 8018262:	f7ff bfc6 	b.w	80181f2 <__retarget_lock_acquire_recursive>
 8018266:	bf00      	nop
 8018268:	24068688 	.word	0x24068688

0801826c <__env_unlock>:
 801826c:	4801      	ldr	r0, [pc, #4]	@ (8018274 <__env_unlock+0x8>)
 801826e:	f7ff bfc1 	b.w	80181f4 <__retarget_lock_release_recursive>
 8018272:	bf00      	nop
 8018274:	24068688 	.word	0x24068688

08018278 <_free_r>:
 8018278:	b538      	push	{r3, r4, r5, lr}
 801827a:	4605      	mov	r5, r0
 801827c:	2900      	cmp	r1, #0
 801827e:	d041      	beq.n	8018304 <_free_r+0x8c>
 8018280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018284:	1f0c      	subs	r4, r1, #4
 8018286:	2b00      	cmp	r3, #0
 8018288:	bfb8      	it	lt
 801828a:	18e4      	addlt	r4, r4, r3
 801828c:	f7ff fc04 	bl	8017a98 <__malloc_lock>
 8018290:	4a1d      	ldr	r2, [pc, #116]	@ (8018308 <_free_r+0x90>)
 8018292:	6813      	ldr	r3, [r2, #0]
 8018294:	b933      	cbnz	r3, 80182a4 <_free_r+0x2c>
 8018296:	6063      	str	r3, [r4, #4]
 8018298:	6014      	str	r4, [r2, #0]
 801829a:	4628      	mov	r0, r5
 801829c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182a0:	f7ff bc00 	b.w	8017aa4 <__malloc_unlock>
 80182a4:	42a3      	cmp	r3, r4
 80182a6:	d908      	bls.n	80182ba <_free_r+0x42>
 80182a8:	6820      	ldr	r0, [r4, #0]
 80182aa:	1821      	adds	r1, r4, r0
 80182ac:	428b      	cmp	r3, r1
 80182ae:	bf01      	itttt	eq
 80182b0:	6819      	ldreq	r1, [r3, #0]
 80182b2:	685b      	ldreq	r3, [r3, #4]
 80182b4:	1809      	addeq	r1, r1, r0
 80182b6:	6021      	streq	r1, [r4, #0]
 80182b8:	e7ed      	b.n	8018296 <_free_r+0x1e>
 80182ba:	461a      	mov	r2, r3
 80182bc:	685b      	ldr	r3, [r3, #4]
 80182be:	b10b      	cbz	r3, 80182c4 <_free_r+0x4c>
 80182c0:	42a3      	cmp	r3, r4
 80182c2:	d9fa      	bls.n	80182ba <_free_r+0x42>
 80182c4:	6811      	ldr	r1, [r2, #0]
 80182c6:	1850      	adds	r0, r2, r1
 80182c8:	42a0      	cmp	r0, r4
 80182ca:	d10b      	bne.n	80182e4 <_free_r+0x6c>
 80182cc:	6820      	ldr	r0, [r4, #0]
 80182ce:	4401      	add	r1, r0
 80182d0:	1850      	adds	r0, r2, r1
 80182d2:	4283      	cmp	r3, r0
 80182d4:	6011      	str	r1, [r2, #0]
 80182d6:	d1e0      	bne.n	801829a <_free_r+0x22>
 80182d8:	6818      	ldr	r0, [r3, #0]
 80182da:	685b      	ldr	r3, [r3, #4]
 80182dc:	6053      	str	r3, [r2, #4]
 80182de:	4408      	add	r0, r1
 80182e0:	6010      	str	r0, [r2, #0]
 80182e2:	e7da      	b.n	801829a <_free_r+0x22>
 80182e4:	d902      	bls.n	80182ec <_free_r+0x74>
 80182e6:	230c      	movs	r3, #12
 80182e8:	602b      	str	r3, [r5, #0]
 80182ea:	e7d6      	b.n	801829a <_free_r+0x22>
 80182ec:	6820      	ldr	r0, [r4, #0]
 80182ee:	1821      	adds	r1, r4, r0
 80182f0:	428b      	cmp	r3, r1
 80182f2:	bf04      	itt	eq
 80182f4:	6819      	ldreq	r1, [r3, #0]
 80182f6:	685b      	ldreq	r3, [r3, #4]
 80182f8:	6063      	str	r3, [r4, #4]
 80182fa:	bf04      	itt	eq
 80182fc:	1809      	addeq	r1, r1, r0
 80182fe:	6021      	streq	r1, [r4, #0]
 8018300:	6054      	str	r4, [r2, #4]
 8018302:	e7ca      	b.n	801829a <_free_r+0x22>
 8018304:	bd38      	pop	{r3, r4, r5, pc}
 8018306:	bf00      	nop
 8018308:	24068544 	.word	0x24068544

0801830c <_malloc_usable_size_r>:
 801830c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018310:	1f18      	subs	r0, r3, #4
 8018312:	2b00      	cmp	r3, #0
 8018314:	bfbc      	itt	lt
 8018316:	580b      	ldrlt	r3, [r1, r0]
 8018318:	18c0      	addlt	r0, r0, r3
 801831a:	4770      	bx	lr

0801831c <__ssputs_r>:
 801831c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018320:	688e      	ldr	r6, [r1, #8]
 8018322:	461f      	mov	r7, r3
 8018324:	42be      	cmp	r6, r7
 8018326:	680b      	ldr	r3, [r1, #0]
 8018328:	4682      	mov	sl, r0
 801832a:	460c      	mov	r4, r1
 801832c:	4690      	mov	r8, r2
 801832e:	d82d      	bhi.n	801838c <__ssputs_r+0x70>
 8018330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018334:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018338:	d026      	beq.n	8018388 <__ssputs_r+0x6c>
 801833a:	6965      	ldr	r5, [r4, #20]
 801833c:	6909      	ldr	r1, [r1, #16]
 801833e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018342:	eba3 0901 	sub.w	r9, r3, r1
 8018346:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801834a:	1c7b      	adds	r3, r7, #1
 801834c:	444b      	add	r3, r9
 801834e:	106d      	asrs	r5, r5, #1
 8018350:	429d      	cmp	r5, r3
 8018352:	bf38      	it	cc
 8018354:	461d      	movcc	r5, r3
 8018356:	0553      	lsls	r3, r2, #21
 8018358:	d527      	bpl.n	80183aa <__ssputs_r+0x8e>
 801835a:	4629      	mov	r1, r5
 801835c:	f7ff fb1c 	bl	8017998 <_malloc_r>
 8018360:	4606      	mov	r6, r0
 8018362:	b360      	cbz	r0, 80183be <__ssputs_r+0xa2>
 8018364:	6921      	ldr	r1, [r4, #16]
 8018366:	464a      	mov	r2, r9
 8018368:	f7ff ff4d 	bl	8018206 <memcpy>
 801836c:	89a3      	ldrh	r3, [r4, #12]
 801836e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018376:	81a3      	strh	r3, [r4, #12]
 8018378:	6126      	str	r6, [r4, #16]
 801837a:	6165      	str	r5, [r4, #20]
 801837c:	444e      	add	r6, r9
 801837e:	eba5 0509 	sub.w	r5, r5, r9
 8018382:	6026      	str	r6, [r4, #0]
 8018384:	60a5      	str	r5, [r4, #8]
 8018386:	463e      	mov	r6, r7
 8018388:	42be      	cmp	r6, r7
 801838a:	d900      	bls.n	801838e <__ssputs_r+0x72>
 801838c:	463e      	mov	r6, r7
 801838e:	6820      	ldr	r0, [r4, #0]
 8018390:	4632      	mov	r2, r6
 8018392:	4641      	mov	r1, r8
 8018394:	f000 fb66 	bl	8018a64 <memmove>
 8018398:	68a3      	ldr	r3, [r4, #8]
 801839a:	1b9b      	subs	r3, r3, r6
 801839c:	60a3      	str	r3, [r4, #8]
 801839e:	6823      	ldr	r3, [r4, #0]
 80183a0:	4433      	add	r3, r6
 80183a2:	6023      	str	r3, [r4, #0]
 80183a4:	2000      	movs	r0, #0
 80183a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183aa:	462a      	mov	r2, r5
 80183ac:	f7ff fbf4 	bl	8017b98 <_realloc_r>
 80183b0:	4606      	mov	r6, r0
 80183b2:	2800      	cmp	r0, #0
 80183b4:	d1e0      	bne.n	8018378 <__ssputs_r+0x5c>
 80183b6:	6921      	ldr	r1, [r4, #16]
 80183b8:	4650      	mov	r0, sl
 80183ba:	f7ff ff5d 	bl	8018278 <_free_r>
 80183be:	230c      	movs	r3, #12
 80183c0:	f8ca 3000 	str.w	r3, [sl]
 80183c4:	89a3      	ldrh	r3, [r4, #12]
 80183c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80183ca:	81a3      	strh	r3, [r4, #12]
 80183cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183d0:	e7e9      	b.n	80183a6 <__ssputs_r+0x8a>
	...

080183d4 <_svfiprintf_r>:
 80183d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183d8:	4698      	mov	r8, r3
 80183da:	898b      	ldrh	r3, [r1, #12]
 80183dc:	061b      	lsls	r3, r3, #24
 80183de:	b09d      	sub	sp, #116	@ 0x74
 80183e0:	4607      	mov	r7, r0
 80183e2:	460d      	mov	r5, r1
 80183e4:	4614      	mov	r4, r2
 80183e6:	d510      	bpl.n	801840a <_svfiprintf_r+0x36>
 80183e8:	690b      	ldr	r3, [r1, #16]
 80183ea:	b973      	cbnz	r3, 801840a <_svfiprintf_r+0x36>
 80183ec:	2140      	movs	r1, #64	@ 0x40
 80183ee:	f7ff fad3 	bl	8017998 <_malloc_r>
 80183f2:	6028      	str	r0, [r5, #0]
 80183f4:	6128      	str	r0, [r5, #16]
 80183f6:	b930      	cbnz	r0, 8018406 <_svfiprintf_r+0x32>
 80183f8:	230c      	movs	r3, #12
 80183fa:	603b      	str	r3, [r7, #0]
 80183fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018400:	b01d      	add	sp, #116	@ 0x74
 8018402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018406:	2340      	movs	r3, #64	@ 0x40
 8018408:	616b      	str	r3, [r5, #20]
 801840a:	2300      	movs	r3, #0
 801840c:	9309      	str	r3, [sp, #36]	@ 0x24
 801840e:	2320      	movs	r3, #32
 8018410:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018414:	f8cd 800c 	str.w	r8, [sp, #12]
 8018418:	2330      	movs	r3, #48	@ 0x30
 801841a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80185b8 <_svfiprintf_r+0x1e4>
 801841e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018422:	f04f 0901 	mov.w	r9, #1
 8018426:	4623      	mov	r3, r4
 8018428:	469a      	mov	sl, r3
 801842a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801842e:	b10a      	cbz	r2, 8018434 <_svfiprintf_r+0x60>
 8018430:	2a25      	cmp	r2, #37	@ 0x25
 8018432:	d1f9      	bne.n	8018428 <_svfiprintf_r+0x54>
 8018434:	ebba 0b04 	subs.w	fp, sl, r4
 8018438:	d00b      	beq.n	8018452 <_svfiprintf_r+0x7e>
 801843a:	465b      	mov	r3, fp
 801843c:	4622      	mov	r2, r4
 801843e:	4629      	mov	r1, r5
 8018440:	4638      	mov	r0, r7
 8018442:	f7ff ff6b 	bl	801831c <__ssputs_r>
 8018446:	3001      	adds	r0, #1
 8018448:	f000 80a7 	beq.w	801859a <_svfiprintf_r+0x1c6>
 801844c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801844e:	445a      	add	r2, fp
 8018450:	9209      	str	r2, [sp, #36]	@ 0x24
 8018452:	f89a 3000 	ldrb.w	r3, [sl]
 8018456:	2b00      	cmp	r3, #0
 8018458:	f000 809f 	beq.w	801859a <_svfiprintf_r+0x1c6>
 801845c:	2300      	movs	r3, #0
 801845e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018466:	f10a 0a01 	add.w	sl, sl, #1
 801846a:	9304      	str	r3, [sp, #16]
 801846c:	9307      	str	r3, [sp, #28]
 801846e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018472:	931a      	str	r3, [sp, #104]	@ 0x68
 8018474:	4654      	mov	r4, sl
 8018476:	2205      	movs	r2, #5
 8018478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801847c:	484e      	ldr	r0, [pc, #312]	@ (80185b8 <_svfiprintf_r+0x1e4>)
 801847e:	f7e7 ff47 	bl	8000310 <memchr>
 8018482:	9a04      	ldr	r2, [sp, #16]
 8018484:	b9d8      	cbnz	r0, 80184be <_svfiprintf_r+0xea>
 8018486:	06d0      	lsls	r0, r2, #27
 8018488:	bf44      	itt	mi
 801848a:	2320      	movmi	r3, #32
 801848c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018490:	0711      	lsls	r1, r2, #28
 8018492:	bf44      	itt	mi
 8018494:	232b      	movmi	r3, #43	@ 0x2b
 8018496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801849a:	f89a 3000 	ldrb.w	r3, [sl]
 801849e:	2b2a      	cmp	r3, #42	@ 0x2a
 80184a0:	d015      	beq.n	80184ce <_svfiprintf_r+0xfa>
 80184a2:	9a07      	ldr	r2, [sp, #28]
 80184a4:	4654      	mov	r4, sl
 80184a6:	2000      	movs	r0, #0
 80184a8:	f04f 0c0a 	mov.w	ip, #10
 80184ac:	4621      	mov	r1, r4
 80184ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80184b2:	3b30      	subs	r3, #48	@ 0x30
 80184b4:	2b09      	cmp	r3, #9
 80184b6:	d94b      	bls.n	8018550 <_svfiprintf_r+0x17c>
 80184b8:	b1b0      	cbz	r0, 80184e8 <_svfiprintf_r+0x114>
 80184ba:	9207      	str	r2, [sp, #28]
 80184bc:	e014      	b.n	80184e8 <_svfiprintf_r+0x114>
 80184be:	eba0 0308 	sub.w	r3, r0, r8
 80184c2:	fa09 f303 	lsl.w	r3, r9, r3
 80184c6:	4313      	orrs	r3, r2
 80184c8:	9304      	str	r3, [sp, #16]
 80184ca:	46a2      	mov	sl, r4
 80184cc:	e7d2      	b.n	8018474 <_svfiprintf_r+0xa0>
 80184ce:	9b03      	ldr	r3, [sp, #12]
 80184d0:	1d19      	adds	r1, r3, #4
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	9103      	str	r1, [sp, #12]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	bfbb      	ittet	lt
 80184da:	425b      	neglt	r3, r3
 80184dc:	f042 0202 	orrlt.w	r2, r2, #2
 80184e0:	9307      	strge	r3, [sp, #28]
 80184e2:	9307      	strlt	r3, [sp, #28]
 80184e4:	bfb8      	it	lt
 80184e6:	9204      	strlt	r2, [sp, #16]
 80184e8:	7823      	ldrb	r3, [r4, #0]
 80184ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80184ec:	d10a      	bne.n	8018504 <_svfiprintf_r+0x130>
 80184ee:	7863      	ldrb	r3, [r4, #1]
 80184f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80184f2:	d132      	bne.n	801855a <_svfiprintf_r+0x186>
 80184f4:	9b03      	ldr	r3, [sp, #12]
 80184f6:	1d1a      	adds	r2, r3, #4
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	9203      	str	r2, [sp, #12]
 80184fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018500:	3402      	adds	r4, #2
 8018502:	9305      	str	r3, [sp, #20]
 8018504:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80185c8 <_svfiprintf_r+0x1f4>
 8018508:	7821      	ldrb	r1, [r4, #0]
 801850a:	2203      	movs	r2, #3
 801850c:	4650      	mov	r0, sl
 801850e:	f7e7 feff 	bl	8000310 <memchr>
 8018512:	b138      	cbz	r0, 8018524 <_svfiprintf_r+0x150>
 8018514:	9b04      	ldr	r3, [sp, #16]
 8018516:	eba0 000a 	sub.w	r0, r0, sl
 801851a:	2240      	movs	r2, #64	@ 0x40
 801851c:	4082      	lsls	r2, r0
 801851e:	4313      	orrs	r3, r2
 8018520:	3401      	adds	r4, #1
 8018522:	9304      	str	r3, [sp, #16]
 8018524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018528:	4824      	ldr	r0, [pc, #144]	@ (80185bc <_svfiprintf_r+0x1e8>)
 801852a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801852e:	2206      	movs	r2, #6
 8018530:	f7e7 feee 	bl	8000310 <memchr>
 8018534:	2800      	cmp	r0, #0
 8018536:	d036      	beq.n	80185a6 <_svfiprintf_r+0x1d2>
 8018538:	4b21      	ldr	r3, [pc, #132]	@ (80185c0 <_svfiprintf_r+0x1ec>)
 801853a:	bb1b      	cbnz	r3, 8018584 <_svfiprintf_r+0x1b0>
 801853c:	9b03      	ldr	r3, [sp, #12]
 801853e:	3307      	adds	r3, #7
 8018540:	f023 0307 	bic.w	r3, r3, #7
 8018544:	3308      	adds	r3, #8
 8018546:	9303      	str	r3, [sp, #12]
 8018548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801854a:	4433      	add	r3, r6
 801854c:	9309      	str	r3, [sp, #36]	@ 0x24
 801854e:	e76a      	b.n	8018426 <_svfiprintf_r+0x52>
 8018550:	fb0c 3202 	mla	r2, ip, r2, r3
 8018554:	460c      	mov	r4, r1
 8018556:	2001      	movs	r0, #1
 8018558:	e7a8      	b.n	80184ac <_svfiprintf_r+0xd8>
 801855a:	2300      	movs	r3, #0
 801855c:	3401      	adds	r4, #1
 801855e:	9305      	str	r3, [sp, #20]
 8018560:	4619      	mov	r1, r3
 8018562:	f04f 0c0a 	mov.w	ip, #10
 8018566:	4620      	mov	r0, r4
 8018568:	f810 2b01 	ldrb.w	r2, [r0], #1
 801856c:	3a30      	subs	r2, #48	@ 0x30
 801856e:	2a09      	cmp	r2, #9
 8018570:	d903      	bls.n	801857a <_svfiprintf_r+0x1a6>
 8018572:	2b00      	cmp	r3, #0
 8018574:	d0c6      	beq.n	8018504 <_svfiprintf_r+0x130>
 8018576:	9105      	str	r1, [sp, #20]
 8018578:	e7c4      	b.n	8018504 <_svfiprintf_r+0x130>
 801857a:	fb0c 2101 	mla	r1, ip, r1, r2
 801857e:	4604      	mov	r4, r0
 8018580:	2301      	movs	r3, #1
 8018582:	e7f0      	b.n	8018566 <_svfiprintf_r+0x192>
 8018584:	ab03      	add	r3, sp, #12
 8018586:	9300      	str	r3, [sp, #0]
 8018588:	462a      	mov	r2, r5
 801858a:	4b0e      	ldr	r3, [pc, #56]	@ (80185c4 <_svfiprintf_r+0x1f0>)
 801858c:	a904      	add	r1, sp, #16
 801858e:	4638      	mov	r0, r7
 8018590:	f3af 8000 	nop.w
 8018594:	1c42      	adds	r2, r0, #1
 8018596:	4606      	mov	r6, r0
 8018598:	d1d6      	bne.n	8018548 <_svfiprintf_r+0x174>
 801859a:	89ab      	ldrh	r3, [r5, #12]
 801859c:	065b      	lsls	r3, r3, #25
 801859e:	f53f af2d 	bmi.w	80183fc <_svfiprintf_r+0x28>
 80185a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80185a4:	e72c      	b.n	8018400 <_svfiprintf_r+0x2c>
 80185a6:	ab03      	add	r3, sp, #12
 80185a8:	9300      	str	r3, [sp, #0]
 80185aa:	462a      	mov	r2, r5
 80185ac:	4b05      	ldr	r3, [pc, #20]	@ (80185c4 <_svfiprintf_r+0x1f0>)
 80185ae:	a904      	add	r1, sp, #16
 80185b0:	4638      	mov	r0, r7
 80185b2:	f000 f879 	bl	80186a8 <_printf_i>
 80185b6:	e7ed      	b.n	8018594 <_svfiprintf_r+0x1c0>
 80185b8:	08019bc0 	.word	0x08019bc0
 80185bc:	08019bca 	.word	0x08019bca
 80185c0:	00000000 	.word	0x00000000
 80185c4:	0801831d 	.word	0x0801831d
 80185c8:	08019bc6 	.word	0x08019bc6

080185cc <_printf_common>:
 80185cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185d0:	4616      	mov	r6, r2
 80185d2:	4698      	mov	r8, r3
 80185d4:	688a      	ldr	r2, [r1, #8]
 80185d6:	690b      	ldr	r3, [r1, #16]
 80185d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80185dc:	4293      	cmp	r3, r2
 80185de:	bfb8      	it	lt
 80185e0:	4613      	movlt	r3, r2
 80185e2:	6033      	str	r3, [r6, #0]
 80185e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80185e8:	4607      	mov	r7, r0
 80185ea:	460c      	mov	r4, r1
 80185ec:	b10a      	cbz	r2, 80185f2 <_printf_common+0x26>
 80185ee:	3301      	adds	r3, #1
 80185f0:	6033      	str	r3, [r6, #0]
 80185f2:	6823      	ldr	r3, [r4, #0]
 80185f4:	0699      	lsls	r1, r3, #26
 80185f6:	bf42      	ittt	mi
 80185f8:	6833      	ldrmi	r3, [r6, #0]
 80185fa:	3302      	addmi	r3, #2
 80185fc:	6033      	strmi	r3, [r6, #0]
 80185fe:	6825      	ldr	r5, [r4, #0]
 8018600:	f015 0506 	ands.w	r5, r5, #6
 8018604:	d106      	bne.n	8018614 <_printf_common+0x48>
 8018606:	f104 0a19 	add.w	sl, r4, #25
 801860a:	68e3      	ldr	r3, [r4, #12]
 801860c:	6832      	ldr	r2, [r6, #0]
 801860e:	1a9b      	subs	r3, r3, r2
 8018610:	42ab      	cmp	r3, r5
 8018612:	dc26      	bgt.n	8018662 <_printf_common+0x96>
 8018614:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018618:	6822      	ldr	r2, [r4, #0]
 801861a:	3b00      	subs	r3, #0
 801861c:	bf18      	it	ne
 801861e:	2301      	movne	r3, #1
 8018620:	0692      	lsls	r2, r2, #26
 8018622:	d42b      	bmi.n	801867c <_printf_common+0xb0>
 8018624:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018628:	4641      	mov	r1, r8
 801862a:	4638      	mov	r0, r7
 801862c:	47c8      	blx	r9
 801862e:	3001      	adds	r0, #1
 8018630:	d01e      	beq.n	8018670 <_printf_common+0xa4>
 8018632:	6823      	ldr	r3, [r4, #0]
 8018634:	6922      	ldr	r2, [r4, #16]
 8018636:	f003 0306 	and.w	r3, r3, #6
 801863a:	2b04      	cmp	r3, #4
 801863c:	bf02      	ittt	eq
 801863e:	68e5      	ldreq	r5, [r4, #12]
 8018640:	6833      	ldreq	r3, [r6, #0]
 8018642:	1aed      	subeq	r5, r5, r3
 8018644:	68a3      	ldr	r3, [r4, #8]
 8018646:	bf0c      	ite	eq
 8018648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801864c:	2500      	movne	r5, #0
 801864e:	4293      	cmp	r3, r2
 8018650:	bfc4      	itt	gt
 8018652:	1a9b      	subgt	r3, r3, r2
 8018654:	18ed      	addgt	r5, r5, r3
 8018656:	2600      	movs	r6, #0
 8018658:	341a      	adds	r4, #26
 801865a:	42b5      	cmp	r5, r6
 801865c:	d11a      	bne.n	8018694 <_printf_common+0xc8>
 801865e:	2000      	movs	r0, #0
 8018660:	e008      	b.n	8018674 <_printf_common+0xa8>
 8018662:	2301      	movs	r3, #1
 8018664:	4652      	mov	r2, sl
 8018666:	4641      	mov	r1, r8
 8018668:	4638      	mov	r0, r7
 801866a:	47c8      	blx	r9
 801866c:	3001      	adds	r0, #1
 801866e:	d103      	bne.n	8018678 <_printf_common+0xac>
 8018670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018678:	3501      	adds	r5, #1
 801867a:	e7c6      	b.n	801860a <_printf_common+0x3e>
 801867c:	18e1      	adds	r1, r4, r3
 801867e:	1c5a      	adds	r2, r3, #1
 8018680:	2030      	movs	r0, #48	@ 0x30
 8018682:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018686:	4422      	add	r2, r4
 8018688:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801868c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018690:	3302      	adds	r3, #2
 8018692:	e7c7      	b.n	8018624 <_printf_common+0x58>
 8018694:	2301      	movs	r3, #1
 8018696:	4622      	mov	r2, r4
 8018698:	4641      	mov	r1, r8
 801869a:	4638      	mov	r0, r7
 801869c:	47c8      	blx	r9
 801869e:	3001      	adds	r0, #1
 80186a0:	d0e6      	beq.n	8018670 <_printf_common+0xa4>
 80186a2:	3601      	adds	r6, #1
 80186a4:	e7d9      	b.n	801865a <_printf_common+0x8e>
	...

080186a8 <_printf_i>:
 80186a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80186ac:	7e0f      	ldrb	r7, [r1, #24]
 80186ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80186b0:	2f78      	cmp	r7, #120	@ 0x78
 80186b2:	4691      	mov	r9, r2
 80186b4:	4680      	mov	r8, r0
 80186b6:	460c      	mov	r4, r1
 80186b8:	469a      	mov	sl, r3
 80186ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80186be:	d807      	bhi.n	80186d0 <_printf_i+0x28>
 80186c0:	2f62      	cmp	r7, #98	@ 0x62
 80186c2:	d80a      	bhi.n	80186da <_printf_i+0x32>
 80186c4:	2f00      	cmp	r7, #0
 80186c6:	f000 80d2 	beq.w	801886e <_printf_i+0x1c6>
 80186ca:	2f58      	cmp	r7, #88	@ 0x58
 80186cc:	f000 80b9 	beq.w	8018842 <_printf_i+0x19a>
 80186d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80186d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80186d8:	e03a      	b.n	8018750 <_printf_i+0xa8>
 80186da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80186de:	2b15      	cmp	r3, #21
 80186e0:	d8f6      	bhi.n	80186d0 <_printf_i+0x28>
 80186e2:	a101      	add	r1, pc, #4	@ (adr r1, 80186e8 <_printf_i+0x40>)
 80186e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80186e8:	08018741 	.word	0x08018741
 80186ec:	08018755 	.word	0x08018755
 80186f0:	080186d1 	.word	0x080186d1
 80186f4:	080186d1 	.word	0x080186d1
 80186f8:	080186d1 	.word	0x080186d1
 80186fc:	080186d1 	.word	0x080186d1
 8018700:	08018755 	.word	0x08018755
 8018704:	080186d1 	.word	0x080186d1
 8018708:	080186d1 	.word	0x080186d1
 801870c:	080186d1 	.word	0x080186d1
 8018710:	080186d1 	.word	0x080186d1
 8018714:	08018855 	.word	0x08018855
 8018718:	0801877f 	.word	0x0801877f
 801871c:	0801880f 	.word	0x0801880f
 8018720:	080186d1 	.word	0x080186d1
 8018724:	080186d1 	.word	0x080186d1
 8018728:	08018877 	.word	0x08018877
 801872c:	080186d1 	.word	0x080186d1
 8018730:	0801877f 	.word	0x0801877f
 8018734:	080186d1 	.word	0x080186d1
 8018738:	080186d1 	.word	0x080186d1
 801873c:	08018817 	.word	0x08018817
 8018740:	6833      	ldr	r3, [r6, #0]
 8018742:	1d1a      	adds	r2, r3, #4
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	6032      	str	r2, [r6, #0]
 8018748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801874c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018750:	2301      	movs	r3, #1
 8018752:	e09d      	b.n	8018890 <_printf_i+0x1e8>
 8018754:	6833      	ldr	r3, [r6, #0]
 8018756:	6820      	ldr	r0, [r4, #0]
 8018758:	1d19      	adds	r1, r3, #4
 801875a:	6031      	str	r1, [r6, #0]
 801875c:	0606      	lsls	r6, r0, #24
 801875e:	d501      	bpl.n	8018764 <_printf_i+0xbc>
 8018760:	681d      	ldr	r5, [r3, #0]
 8018762:	e003      	b.n	801876c <_printf_i+0xc4>
 8018764:	0645      	lsls	r5, r0, #25
 8018766:	d5fb      	bpl.n	8018760 <_printf_i+0xb8>
 8018768:	f9b3 5000 	ldrsh.w	r5, [r3]
 801876c:	2d00      	cmp	r5, #0
 801876e:	da03      	bge.n	8018778 <_printf_i+0xd0>
 8018770:	232d      	movs	r3, #45	@ 0x2d
 8018772:	426d      	negs	r5, r5
 8018774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018778:	4859      	ldr	r0, [pc, #356]	@ (80188e0 <_printf_i+0x238>)
 801877a:	230a      	movs	r3, #10
 801877c:	e011      	b.n	80187a2 <_printf_i+0xfa>
 801877e:	6821      	ldr	r1, [r4, #0]
 8018780:	6833      	ldr	r3, [r6, #0]
 8018782:	0608      	lsls	r0, r1, #24
 8018784:	f853 5b04 	ldr.w	r5, [r3], #4
 8018788:	d402      	bmi.n	8018790 <_printf_i+0xe8>
 801878a:	0649      	lsls	r1, r1, #25
 801878c:	bf48      	it	mi
 801878e:	b2ad      	uxthmi	r5, r5
 8018790:	2f6f      	cmp	r7, #111	@ 0x6f
 8018792:	4853      	ldr	r0, [pc, #332]	@ (80188e0 <_printf_i+0x238>)
 8018794:	6033      	str	r3, [r6, #0]
 8018796:	bf14      	ite	ne
 8018798:	230a      	movne	r3, #10
 801879a:	2308      	moveq	r3, #8
 801879c:	2100      	movs	r1, #0
 801879e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80187a2:	6866      	ldr	r6, [r4, #4]
 80187a4:	60a6      	str	r6, [r4, #8]
 80187a6:	2e00      	cmp	r6, #0
 80187a8:	bfa2      	ittt	ge
 80187aa:	6821      	ldrge	r1, [r4, #0]
 80187ac:	f021 0104 	bicge.w	r1, r1, #4
 80187b0:	6021      	strge	r1, [r4, #0]
 80187b2:	b90d      	cbnz	r5, 80187b8 <_printf_i+0x110>
 80187b4:	2e00      	cmp	r6, #0
 80187b6:	d04b      	beq.n	8018850 <_printf_i+0x1a8>
 80187b8:	4616      	mov	r6, r2
 80187ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80187be:	fb03 5711 	mls	r7, r3, r1, r5
 80187c2:	5dc7      	ldrb	r7, [r0, r7]
 80187c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80187c8:	462f      	mov	r7, r5
 80187ca:	42bb      	cmp	r3, r7
 80187cc:	460d      	mov	r5, r1
 80187ce:	d9f4      	bls.n	80187ba <_printf_i+0x112>
 80187d0:	2b08      	cmp	r3, #8
 80187d2:	d10b      	bne.n	80187ec <_printf_i+0x144>
 80187d4:	6823      	ldr	r3, [r4, #0]
 80187d6:	07df      	lsls	r7, r3, #31
 80187d8:	d508      	bpl.n	80187ec <_printf_i+0x144>
 80187da:	6923      	ldr	r3, [r4, #16]
 80187dc:	6861      	ldr	r1, [r4, #4]
 80187de:	4299      	cmp	r1, r3
 80187e0:	bfde      	ittt	le
 80187e2:	2330      	movle	r3, #48	@ 0x30
 80187e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80187e8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80187ec:	1b92      	subs	r2, r2, r6
 80187ee:	6122      	str	r2, [r4, #16]
 80187f0:	f8cd a000 	str.w	sl, [sp]
 80187f4:	464b      	mov	r3, r9
 80187f6:	aa03      	add	r2, sp, #12
 80187f8:	4621      	mov	r1, r4
 80187fa:	4640      	mov	r0, r8
 80187fc:	f7ff fee6 	bl	80185cc <_printf_common>
 8018800:	3001      	adds	r0, #1
 8018802:	d14a      	bne.n	801889a <_printf_i+0x1f2>
 8018804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018808:	b004      	add	sp, #16
 801880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801880e:	6823      	ldr	r3, [r4, #0]
 8018810:	f043 0320 	orr.w	r3, r3, #32
 8018814:	6023      	str	r3, [r4, #0]
 8018816:	4833      	ldr	r0, [pc, #204]	@ (80188e4 <_printf_i+0x23c>)
 8018818:	2778      	movs	r7, #120	@ 0x78
 801881a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801881e:	6823      	ldr	r3, [r4, #0]
 8018820:	6831      	ldr	r1, [r6, #0]
 8018822:	061f      	lsls	r7, r3, #24
 8018824:	f851 5b04 	ldr.w	r5, [r1], #4
 8018828:	d402      	bmi.n	8018830 <_printf_i+0x188>
 801882a:	065f      	lsls	r7, r3, #25
 801882c:	bf48      	it	mi
 801882e:	b2ad      	uxthmi	r5, r5
 8018830:	6031      	str	r1, [r6, #0]
 8018832:	07d9      	lsls	r1, r3, #31
 8018834:	bf44      	itt	mi
 8018836:	f043 0320 	orrmi.w	r3, r3, #32
 801883a:	6023      	strmi	r3, [r4, #0]
 801883c:	b11d      	cbz	r5, 8018846 <_printf_i+0x19e>
 801883e:	2310      	movs	r3, #16
 8018840:	e7ac      	b.n	801879c <_printf_i+0xf4>
 8018842:	4827      	ldr	r0, [pc, #156]	@ (80188e0 <_printf_i+0x238>)
 8018844:	e7e9      	b.n	801881a <_printf_i+0x172>
 8018846:	6823      	ldr	r3, [r4, #0]
 8018848:	f023 0320 	bic.w	r3, r3, #32
 801884c:	6023      	str	r3, [r4, #0]
 801884e:	e7f6      	b.n	801883e <_printf_i+0x196>
 8018850:	4616      	mov	r6, r2
 8018852:	e7bd      	b.n	80187d0 <_printf_i+0x128>
 8018854:	6833      	ldr	r3, [r6, #0]
 8018856:	6825      	ldr	r5, [r4, #0]
 8018858:	6961      	ldr	r1, [r4, #20]
 801885a:	1d18      	adds	r0, r3, #4
 801885c:	6030      	str	r0, [r6, #0]
 801885e:	062e      	lsls	r6, r5, #24
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	d501      	bpl.n	8018868 <_printf_i+0x1c0>
 8018864:	6019      	str	r1, [r3, #0]
 8018866:	e002      	b.n	801886e <_printf_i+0x1c6>
 8018868:	0668      	lsls	r0, r5, #25
 801886a:	d5fb      	bpl.n	8018864 <_printf_i+0x1bc>
 801886c:	8019      	strh	r1, [r3, #0]
 801886e:	2300      	movs	r3, #0
 8018870:	6123      	str	r3, [r4, #16]
 8018872:	4616      	mov	r6, r2
 8018874:	e7bc      	b.n	80187f0 <_printf_i+0x148>
 8018876:	6833      	ldr	r3, [r6, #0]
 8018878:	1d1a      	adds	r2, r3, #4
 801887a:	6032      	str	r2, [r6, #0]
 801887c:	681e      	ldr	r6, [r3, #0]
 801887e:	6862      	ldr	r2, [r4, #4]
 8018880:	2100      	movs	r1, #0
 8018882:	4630      	mov	r0, r6
 8018884:	f7e7 fd44 	bl	8000310 <memchr>
 8018888:	b108      	cbz	r0, 801888e <_printf_i+0x1e6>
 801888a:	1b80      	subs	r0, r0, r6
 801888c:	6060      	str	r0, [r4, #4]
 801888e:	6863      	ldr	r3, [r4, #4]
 8018890:	6123      	str	r3, [r4, #16]
 8018892:	2300      	movs	r3, #0
 8018894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018898:	e7aa      	b.n	80187f0 <_printf_i+0x148>
 801889a:	6923      	ldr	r3, [r4, #16]
 801889c:	4632      	mov	r2, r6
 801889e:	4649      	mov	r1, r9
 80188a0:	4640      	mov	r0, r8
 80188a2:	47d0      	blx	sl
 80188a4:	3001      	adds	r0, #1
 80188a6:	d0ad      	beq.n	8018804 <_printf_i+0x15c>
 80188a8:	6823      	ldr	r3, [r4, #0]
 80188aa:	079b      	lsls	r3, r3, #30
 80188ac:	d413      	bmi.n	80188d6 <_printf_i+0x22e>
 80188ae:	68e0      	ldr	r0, [r4, #12]
 80188b0:	9b03      	ldr	r3, [sp, #12]
 80188b2:	4298      	cmp	r0, r3
 80188b4:	bfb8      	it	lt
 80188b6:	4618      	movlt	r0, r3
 80188b8:	e7a6      	b.n	8018808 <_printf_i+0x160>
 80188ba:	2301      	movs	r3, #1
 80188bc:	4632      	mov	r2, r6
 80188be:	4649      	mov	r1, r9
 80188c0:	4640      	mov	r0, r8
 80188c2:	47d0      	blx	sl
 80188c4:	3001      	adds	r0, #1
 80188c6:	d09d      	beq.n	8018804 <_printf_i+0x15c>
 80188c8:	3501      	adds	r5, #1
 80188ca:	68e3      	ldr	r3, [r4, #12]
 80188cc:	9903      	ldr	r1, [sp, #12]
 80188ce:	1a5b      	subs	r3, r3, r1
 80188d0:	42ab      	cmp	r3, r5
 80188d2:	dcf2      	bgt.n	80188ba <_printf_i+0x212>
 80188d4:	e7eb      	b.n	80188ae <_printf_i+0x206>
 80188d6:	2500      	movs	r5, #0
 80188d8:	f104 0619 	add.w	r6, r4, #25
 80188dc:	e7f5      	b.n	80188ca <_printf_i+0x222>
 80188de:	bf00      	nop
 80188e0:	08019bd1 	.word	0x08019bd1
 80188e4:	08019be2 	.word	0x08019be2

080188e8 <__sflush_r>:
 80188e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80188ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188f0:	0716      	lsls	r6, r2, #28
 80188f2:	4605      	mov	r5, r0
 80188f4:	460c      	mov	r4, r1
 80188f6:	d454      	bmi.n	80189a2 <__sflush_r+0xba>
 80188f8:	684b      	ldr	r3, [r1, #4]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	dc02      	bgt.n	8018904 <__sflush_r+0x1c>
 80188fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018900:	2b00      	cmp	r3, #0
 8018902:	dd48      	ble.n	8018996 <__sflush_r+0xae>
 8018904:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018906:	2e00      	cmp	r6, #0
 8018908:	d045      	beq.n	8018996 <__sflush_r+0xae>
 801890a:	2300      	movs	r3, #0
 801890c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018910:	682f      	ldr	r7, [r5, #0]
 8018912:	6a21      	ldr	r1, [r4, #32]
 8018914:	602b      	str	r3, [r5, #0]
 8018916:	d030      	beq.n	801897a <__sflush_r+0x92>
 8018918:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801891a:	89a3      	ldrh	r3, [r4, #12]
 801891c:	0759      	lsls	r1, r3, #29
 801891e:	d505      	bpl.n	801892c <__sflush_r+0x44>
 8018920:	6863      	ldr	r3, [r4, #4]
 8018922:	1ad2      	subs	r2, r2, r3
 8018924:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018926:	b10b      	cbz	r3, 801892c <__sflush_r+0x44>
 8018928:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801892a:	1ad2      	subs	r2, r2, r3
 801892c:	2300      	movs	r3, #0
 801892e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018930:	6a21      	ldr	r1, [r4, #32]
 8018932:	4628      	mov	r0, r5
 8018934:	47b0      	blx	r6
 8018936:	1c43      	adds	r3, r0, #1
 8018938:	89a3      	ldrh	r3, [r4, #12]
 801893a:	d106      	bne.n	801894a <__sflush_r+0x62>
 801893c:	6829      	ldr	r1, [r5, #0]
 801893e:	291d      	cmp	r1, #29
 8018940:	d82b      	bhi.n	801899a <__sflush_r+0xb2>
 8018942:	4a2a      	ldr	r2, [pc, #168]	@ (80189ec <__sflush_r+0x104>)
 8018944:	410a      	asrs	r2, r1
 8018946:	07d6      	lsls	r6, r2, #31
 8018948:	d427      	bmi.n	801899a <__sflush_r+0xb2>
 801894a:	2200      	movs	r2, #0
 801894c:	6062      	str	r2, [r4, #4]
 801894e:	04d9      	lsls	r1, r3, #19
 8018950:	6922      	ldr	r2, [r4, #16]
 8018952:	6022      	str	r2, [r4, #0]
 8018954:	d504      	bpl.n	8018960 <__sflush_r+0x78>
 8018956:	1c42      	adds	r2, r0, #1
 8018958:	d101      	bne.n	801895e <__sflush_r+0x76>
 801895a:	682b      	ldr	r3, [r5, #0]
 801895c:	b903      	cbnz	r3, 8018960 <__sflush_r+0x78>
 801895e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018962:	602f      	str	r7, [r5, #0]
 8018964:	b1b9      	cbz	r1, 8018996 <__sflush_r+0xae>
 8018966:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801896a:	4299      	cmp	r1, r3
 801896c:	d002      	beq.n	8018974 <__sflush_r+0x8c>
 801896e:	4628      	mov	r0, r5
 8018970:	f7ff fc82 	bl	8018278 <_free_r>
 8018974:	2300      	movs	r3, #0
 8018976:	6363      	str	r3, [r4, #52]	@ 0x34
 8018978:	e00d      	b.n	8018996 <__sflush_r+0xae>
 801897a:	2301      	movs	r3, #1
 801897c:	4628      	mov	r0, r5
 801897e:	47b0      	blx	r6
 8018980:	4602      	mov	r2, r0
 8018982:	1c50      	adds	r0, r2, #1
 8018984:	d1c9      	bne.n	801891a <__sflush_r+0x32>
 8018986:	682b      	ldr	r3, [r5, #0]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d0c6      	beq.n	801891a <__sflush_r+0x32>
 801898c:	2b1d      	cmp	r3, #29
 801898e:	d001      	beq.n	8018994 <__sflush_r+0xac>
 8018990:	2b16      	cmp	r3, #22
 8018992:	d11e      	bne.n	80189d2 <__sflush_r+0xea>
 8018994:	602f      	str	r7, [r5, #0]
 8018996:	2000      	movs	r0, #0
 8018998:	e022      	b.n	80189e0 <__sflush_r+0xf8>
 801899a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801899e:	b21b      	sxth	r3, r3
 80189a0:	e01b      	b.n	80189da <__sflush_r+0xf2>
 80189a2:	690f      	ldr	r7, [r1, #16]
 80189a4:	2f00      	cmp	r7, #0
 80189a6:	d0f6      	beq.n	8018996 <__sflush_r+0xae>
 80189a8:	0793      	lsls	r3, r2, #30
 80189aa:	680e      	ldr	r6, [r1, #0]
 80189ac:	bf08      	it	eq
 80189ae:	694b      	ldreq	r3, [r1, #20]
 80189b0:	600f      	str	r7, [r1, #0]
 80189b2:	bf18      	it	ne
 80189b4:	2300      	movne	r3, #0
 80189b6:	eba6 0807 	sub.w	r8, r6, r7
 80189ba:	608b      	str	r3, [r1, #8]
 80189bc:	f1b8 0f00 	cmp.w	r8, #0
 80189c0:	dde9      	ble.n	8018996 <__sflush_r+0xae>
 80189c2:	6a21      	ldr	r1, [r4, #32]
 80189c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80189c6:	4643      	mov	r3, r8
 80189c8:	463a      	mov	r2, r7
 80189ca:	4628      	mov	r0, r5
 80189cc:	47b0      	blx	r6
 80189ce:	2800      	cmp	r0, #0
 80189d0:	dc08      	bgt.n	80189e4 <__sflush_r+0xfc>
 80189d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80189da:	81a3      	strh	r3, [r4, #12]
 80189dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189e4:	4407      	add	r7, r0
 80189e6:	eba8 0800 	sub.w	r8, r8, r0
 80189ea:	e7e7      	b.n	80189bc <__sflush_r+0xd4>
 80189ec:	dfbffffe 	.word	0xdfbffffe

080189f0 <_fflush_r>:
 80189f0:	b538      	push	{r3, r4, r5, lr}
 80189f2:	690b      	ldr	r3, [r1, #16]
 80189f4:	4605      	mov	r5, r0
 80189f6:	460c      	mov	r4, r1
 80189f8:	b913      	cbnz	r3, 8018a00 <_fflush_r+0x10>
 80189fa:	2500      	movs	r5, #0
 80189fc:	4628      	mov	r0, r5
 80189fe:	bd38      	pop	{r3, r4, r5, pc}
 8018a00:	b118      	cbz	r0, 8018a0a <_fflush_r+0x1a>
 8018a02:	6a03      	ldr	r3, [r0, #32]
 8018a04:	b90b      	cbnz	r3, 8018a0a <_fflush_r+0x1a>
 8018a06:	f7ff f9f9 	bl	8017dfc <__sinit>
 8018a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d0f3      	beq.n	80189fa <_fflush_r+0xa>
 8018a12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018a14:	07d0      	lsls	r0, r2, #31
 8018a16:	d404      	bmi.n	8018a22 <_fflush_r+0x32>
 8018a18:	0599      	lsls	r1, r3, #22
 8018a1a:	d402      	bmi.n	8018a22 <_fflush_r+0x32>
 8018a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a1e:	f7ff fbe8 	bl	80181f2 <__retarget_lock_acquire_recursive>
 8018a22:	4628      	mov	r0, r5
 8018a24:	4621      	mov	r1, r4
 8018a26:	f7ff ff5f 	bl	80188e8 <__sflush_r>
 8018a2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018a2c:	07da      	lsls	r2, r3, #31
 8018a2e:	4605      	mov	r5, r0
 8018a30:	d4e4      	bmi.n	80189fc <_fflush_r+0xc>
 8018a32:	89a3      	ldrh	r3, [r4, #12]
 8018a34:	059b      	lsls	r3, r3, #22
 8018a36:	d4e1      	bmi.n	80189fc <_fflush_r+0xc>
 8018a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a3a:	f7ff fbdb 	bl	80181f4 <__retarget_lock_release_recursive>
 8018a3e:	e7dd      	b.n	80189fc <_fflush_r+0xc>

08018a40 <fiprintf>:
 8018a40:	b40e      	push	{r1, r2, r3}
 8018a42:	b503      	push	{r0, r1, lr}
 8018a44:	4601      	mov	r1, r0
 8018a46:	ab03      	add	r3, sp, #12
 8018a48:	4805      	ldr	r0, [pc, #20]	@ (8018a60 <fiprintf+0x20>)
 8018a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a4e:	6800      	ldr	r0, [r0, #0]
 8018a50:	9301      	str	r3, [sp, #4]
 8018a52:	f000 f851 	bl	8018af8 <_vfiprintf_r>
 8018a56:	b002      	add	sp, #8
 8018a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a5c:	b003      	add	sp, #12
 8018a5e:	4770      	bx	lr
 8018a60:	240000c4 	.word	0x240000c4

08018a64 <memmove>:
 8018a64:	4288      	cmp	r0, r1
 8018a66:	b510      	push	{r4, lr}
 8018a68:	eb01 0402 	add.w	r4, r1, r2
 8018a6c:	d902      	bls.n	8018a74 <memmove+0x10>
 8018a6e:	4284      	cmp	r4, r0
 8018a70:	4623      	mov	r3, r4
 8018a72:	d807      	bhi.n	8018a84 <memmove+0x20>
 8018a74:	1e43      	subs	r3, r0, #1
 8018a76:	42a1      	cmp	r1, r4
 8018a78:	d008      	beq.n	8018a8c <memmove+0x28>
 8018a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018a82:	e7f8      	b.n	8018a76 <memmove+0x12>
 8018a84:	4402      	add	r2, r0
 8018a86:	4601      	mov	r1, r0
 8018a88:	428a      	cmp	r2, r1
 8018a8a:	d100      	bne.n	8018a8e <memmove+0x2a>
 8018a8c:	bd10      	pop	{r4, pc}
 8018a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018a96:	e7f7      	b.n	8018a88 <memmove+0x24>

08018a98 <abort>:
 8018a98:	b508      	push	{r3, lr}
 8018a9a:	2006      	movs	r0, #6
 8018a9c:	f000 fa00 	bl	8018ea0 <raise>
 8018aa0:	2001      	movs	r0, #1
 8018aa2:	f7e9 f977 	bl	8001d94 <_exit>

08018aa6 <__sfputc_r>:
 8018aa6:	6893      	ldr	r3, [r2, #8]
 8018aa8:	3b01      	subs	r3, #1
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	b410      	push	{r4}
 8018aae:	6093      	str	r3, [r2, #8]
 8018ab0:	da08      	bge.n	8018ac4 <__sfputc_r+0x1e>
 8018ab2:	6994      	ldr	r4, [r2, #24]
 8018ab4:	42a3      	cmp	r3, r4
 8018ab6:	db01      	blt.n	8018abc <__sfputc_r+0x16>
 8018ab8:	290a      	cmp	r1, #10
 8018aba:	d103      	bne.n	8018ac4 <__sfputc_r+0x1e>
 8018abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ac0:	f000 b932 	b.w	8018d28 <__swbuf_r>
 8018ac4:	6813      	ldr	r3, [r2, #0]
 8018ac6:	1c58      	adds	r0, r3, #1
 8018ac8:	6010      	str	r0, [r2, #0]
 8018aca:	7019      	strb	r1, [r3, #0]
 8018acc:	4608      	mov	r0, r1
 8018ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ad2:	4770      	bx	lr

08018ad4 <__sfputs_r>:
 8018ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ad6:	4606      	mov	r6, r0
 8018ad8:	460f      	mov	r7, r1
 8018ada:	4614      	mov	r4, r2
 8018adc:	18d5      	adds	r5, r2, r3
 8018ade:	42ac      	cmp	r4, r5
 8018ae0:	d101      	bne.n	8018ae6 <__sfputs_r+0x12>
 8018ae2:	2000      	movs	r0, #0
 8018ae4:	e007      	b.n	8018af6 <__sfputs_r+0x22>
 8018ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018aea:	463a      	mov	r2, r7
 8018aec:	4630      	mov	r0, r6
 8018aee:	f7ff ffda 	bl	8018aa6 <__sfputc_r>
 8018af2:	1c43      	adds	r3, r0, #1
 8018af4:	d1f3      	bne.n	8018ade <__sfputs_r+0xa>
 8018af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018af8 <_vfiprintf_r>:
 8018af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018afc:	460d      	mov	r5, r1
 8018afe:	b09d      	sub	sp, #116	@ 0x74
 8018b00:	4614      	mov	r4, r2
 8018b02:	4698      	mov	r8, r3
 8018b04:	4606      	mov	r6, r0
 8018b06:	b118      	cbz	r0, 8018b10 <_vfiprintf_r+0x18>
 8018b08:	6a03      	ldr	r3, [r0, #32]
 8018b0a:	b90b      	cbnz	r3, 8018b10 <_vfiprintf_r+0x18>
 8018b0c:	f7ff f976 	bl	8017dfc <__sinit>
 8018b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b12:	07d9      	lsls	r1, r3, #31
 8018b14:	d405      	bmi.n	8018b22 <_vfiprintf_r+0x2a>
 8018b16:	89ab      	ldrh	r3, [r5, #12]
 8018b18:	059a      	lsls	r2, r3, #22
 8018b1a:	d402      	bmi.n	8018b22 <_vfiprintf_r+0x2a>
 8018b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b1e:	f7ff fb68 	bl	80181f2 <__retarget_lock_acquire_recursive>
 8018b22:	89ab      	ldrh	r3, [r5, #12]
 8018b24:	071b      	lsls	r3, r3, #28
 8018b26:	d501      	bpl.n	8018b2c <_vfiprintf_r+0x34>
 8018b28:	692b      	ldr	r3, [r5, #16]
 8018b2a:	b99b      	cbnz	r3, 8018b54 <_vfiprintf_r+0x5c>
 8018b2c:	4629      	mov	r1, r5
 8018b2e:	4630      	mov	r0, r6
 8018b30:	f000 f938 	bl	8018da4 <__swsetup_r>
 8018b34:	b170      	cbz	r0, 8018b54 <_vfiprintf_r+0x5c>
 8018b36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b38:	07dc      	lsls	r4, r3, #31
 8018b3a:	d504      	bpl.n	8018b46 <_vfiprintf_r+0x4e>
 8018b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018b40:	b01d      	add	sp, #116	@ 0x74
 8018b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b46:	89ab      	ldrh	r3, [r5, #12]
 8018b48:	0598      	lsls	r0, r3, #22
 8018b4a:	d4f7      	bmi.n	8018b3c <_vfiprintf_r+0x44>
 8018b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b4e:	f7ff fb51 	bl	80181f4 <__retarget_lock_release_recursive>
 8018b52:	e7f3      	b.n	8018b3c <_vfiprintf_r+0x44>
 8018b54:	2300      	movs	r3, #0
 8018b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b58:	2320      	movs	r3, #32
 8018b5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b62:	2330      	movs	r3, #48	@ 0x30
 8018b64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018d14 <_vfiprintf_r+0x21c>
 8018b68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018b6c:	f04f 0901 	mov.w	r9, #1
 8018b70:	4623      	mov	r3, r4
 8018b72:	469a      	mov	sl, r3
 8018b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b78:	b10a      	cbz	r2, 8018b7e <_vfiprintf_r+0x86>
 8018b7a:	2a25      	cmp	r2, #37	@ 0x25
 8018b7c:	d1f9      	bne.n	8018b72 <_vfiprintf_r+0x7a>
 8018b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8018b82:	d00b      	beq.n	8018b9c <_vfiprintf_r+0xa4>
 8018b84:	465b      	mov	r3, fp
 8018b86:	4622      	mov	r2, r4
 8018b88:	4629      	mov	r1, r5
 8018b8a:	4630      	mov	r0, r6
 8018b8c:	f7ff ffa2 	bl	8018ad4 <__sfputs_r>
 8018b90:	3001      	adds	r0, #1
 8018b92:	f000 80a7 	beq.w	8018ce4 <_vfiprintf_r+0x1ec>
 8018b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b98:	445a      	add	r2, fp
 8018b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	f000 809f 	beq.w	8018ce4 <_vfiprintf_r+0x1ec>
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018bb0:	f10a 0a01 	add.w	sl, sl, #1
 8018bb4:	9304      	str	r3, [sp, #16]
 8018bb6:	9307      	str	r3, [sp, #28]
 8018bb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018bbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8018bbe:	4654      	mov	r4, sl
 8018bc0:	2205      	movs	r2, #5
 8018bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bc6:	4853      	ldr	r0, [pc, #332]	@ (8018d14 <_vfiprintf_r+0x21c>)
 8018bc8:	f7e7 fba2 	bl	8000310 <memchr>
 8018bcc:	9a04      	ldr	r2, [sp, #16]
 8018bce:	b9d8      	cbnz	r0, 8018c08 <_vfiprintf_r+0x110>
 8018bd0:	06d1      	lsls	r1, r2, #27
 8018bd2:	bf44      	itt	mi
 8018bd4:	2320      	movmi	r3, #32
 8018bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018bda:	0713      	lsls	r3, r2, #28
 8018bdc:	bf44      	itt	mi
 8018bde:	232b      	movmi	r3, #43	@ 0x2b
 8018be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018be4:	f89a 3000 	ldrb.w	r3, [sl]
 8018be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8018bea:	d015      	beq.n	8018c18 <_vfiprintf_r+0x120>
 8018bec:	9a07      	ldr	r2, [sp, #28]
 8018bee:	4654      	mov	r4, sl
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	f04f 0c0a 	mov.w	ip, #10
 8018bf6:	4621      	mov	r1, r4
 8018bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018bfc:	3b30      	subs	r3, #48	@ 0x30
 8018bfe:	2b09      	cmp	r3, #9
 8018c00:	d94b      	bls.n	8018c9a <_vfiprintf_r+0x1a2>
 8018c02:	b1b0      	cbz	r0, 8018c32 <_vfiprintf_r+0x13a>
 8018c04:	9207      	str	r2, [sp, #28]
 8018c06:	e014      	b.n	8018c32 <_vfiprintf_r+0x13a>
 8018c08:	eba0 0308 	sub.w	r3, r0, r8
 8018c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8018c10:	4313      	orrs	r3, r2
 8018c12:	9304      	str	r3, [sp, #16]
 8018c14:	46a2      	mov	sl, r4
 8018c16:	e7d2      	b.n	8018bbe <_vfiprintf_r+0xc6>
 8018c18:	9b03      	ldr	r3, [sp, #12]
 8018c1a:	1d19      	adds	r1, r3, #4
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	9103      	str	r1, [sp, #12]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	bfbb      	ittet	lt
 8018c24:	425b      	neglt	r3, r3
 8018c26:	f042 0202 	orrlt.w	r2, r2, #2
 8018c2a:	9307      	strge	r3, [sp, #28]
 8018c2c:	9307      	strlt	r3, [sp, #28]
 8018c2e:	bfb8      	it	lt
 8018c30:	9204      	strlt	r2, [sp, #16]
 8018c32:	7823      	ldrb	r3, [r4, #0]
 8018c34:	2b2e      	cmp	r3, #46	@ 0x2e
 8018c36:	d10a      	bne.n	8018c4e <_vfiprintf_r+0x156>
 8018c38:	7863      	ldrb	r3, [r4, #1]
 8018c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c3c:	d132      	bne.n	8018ca4 <_vfiprintf_r+0x1ac>
 8018c3e:	9b03      	ldr	r3, [sp, #12]
 8018c40:	1d1a      	adds	r2, r3, #4
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	9203      	str	r2, [sp, #12]
 8018c46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018c4a:	3402      	adds	r4, #2
 8018c4c:	9305      	str	r3, [sp, #20]
 8018c4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018d24 <_vfiprintf_r+0x22c>
 8018c52:	7821      	ldrb	r1, [r4, #0]
 8018c54:	2203      	movs	r2, #3
 8018c56:	4650      	mov	r0, sl
 8018c58:	f7e7 fb5a 	bl	8000310 <memchr>
 8018c5c:	b138      	cbz	r0, 8018c6e <_vfiprintf_r+0x176>
 8018c5e:	9b04      	ldr	r3, [sp, #16]
 8018c60:	eba0 000a 	sub.w	r0, r0, sl
 8018c64:	2240      	movs	r2, #64	@ 0x40
 8018c66:	4082      	lsls	r2, r0
 8018c68:	4313      	orrs	r3, r2
 8018c6a:	3401      	adds	r4, #1
 8018c6c:	9304      	str	r3, [sp, #16]
 8018c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c72:	4829      	ldr	r0, [pc, #164]	@ (8018d18 <_vfiprintf_r+0x220>)
 8018c74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018c78:	2206      	movs	r2, #6
 8018c7a:	f7e7 fb49 	bl	8000310 <memchr>
 8018c7e:	2800      	cmp	r0, #0
 8018c80:	d03f      	beq.n	8018d02 <_vfiprintf_r+0x20a>
 8018c82:	4b26      	ldr	r3, [pc, #152]	@ (8018d1c <_vfiprintf_r+0x224>)
 8018c84:	bb1b      	cbnz	r3, 8018cce <_vfiprintf_r+0x1d6>
 8018c86:	9b03      	ldr	r3, [sp, #12]
 8018c88:	3307      	adds	r3, #7
 8018c8a:	f023 0307 	bic.w	r3, r3, #7
 8018c8e:	3308      	adds	r3, #8
 8018c90:	9303      	str	r3, [sp, #12]
 8018c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c94:	443b      	add	r3, r7
 8018c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c98:	e76a      	b.n	8018b70 <_vfiprintf_r+0x78>
 8018c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c9e:	460c      	mov	r4, r1
 8018ca0:	2001      	movs	r0, #1
 8018ca2:	e7a8      	b.n	8018bf6 <_vfiprintf_r+0xfe>
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	3401      	adds	r4, #1
 8018ca8:	9305      	str	r3, [sp, #20]
 8018caa:	4619      	mov	r1, r3
 8018cac:	f04f 0c0a 	mov.w	ip, #10
 8018cb0:	4620      	mov	r0, r4
 8018cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cb6:	3a30      	subs	r2, #48	@ 0x30
 8018cb8:	2a09      	cmp	r2, #9
 8018cba:	d903      	bls.n	8018cc4 <_vfiprintf_r+0x1cc>
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d0c6      	beq.n	8018c4e <_vfiprintf_r+0x156>
 8018cc0:	9105      	str	r1, [sp, #20]
 8018cc2:	e7c4      	b.n	8018c4e <_vfiprintf_r+0x156>
 8018cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8018cc8:	4604      	mov	r4, r0
 8018cca:	2301      	movs	r3, #1
 8018ccc:	e7f0      	b.n	8018cb0 <_vfiprintf_r+0x1b8>
 8018cce:	ab03      	add	r3, sp, #12
 8018cd0:	9300      	str	r3, [sp, #0]
 8018cd2:	462a      	mov	r2, r5
 8018cd4:	4b12      	ldr	r3, [pc, #72]	@ (8018d20 <_vfiprintf_r+0x228>)
 8018cd6:	a904      	add	r1, sp, #16
 8018cd8:	4630      	mov	r0, r6
 8018cda:	f3af 8000 	nop.w
 8018cde:	4607      	mov	r7, r0
 8018ce0:	1c78      	adds	r0, r7, #1
 8018ce2:	d1d6      	bne.n	8018c92 <_vfiprintf_r+0x19a>
 8018ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018ce6:	07d9      	lsls	r1, r3, #31
 8018ce8:	d405      	bmi.n	8018cf6 <_vfiprintf_r+0x1fe>
 8018cea:	89ab      	ldrh	r3, [r5, #12]
 8018cec:	059a      	lsls	r2, r3, #22
 8018cee:	d402      	bmi.n	8018cf6 <_vfiprintf_r+0x1fe>
 8018cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018cf2:	f7ff fa7f 	bl	80181f4 <__retarget_lock_release_recursive>
 8018cf6:	89ab      	ldrh	r3, [r5, #12]
 8018cf8:	065b      	lsls	r3, r3, #25
 8018cfa:	f53f af1f 	bmi.w	8018b3c <_vfiprintf_r+0x44>
 8018cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d00:	e71e      	b.n	8018b40 <_vfiprintf_r+0x48>
 8018d02:	ab03      	add	r3, sp, #12
 8018d04:	9300      	str	r3, [sp, #0]
 8018d06:	462a      	mov	r2, r5
 8018d08:	4b05      	ldr	r3, [pc, #20]	@ (8018d20 <_vfiprintf_r+0x228>)
 8018d0a:	a904      	add	r1, sp, #16
 8018d0c:	4630      	mov	r0, r6
 8018d0e:	f7ff fccb 	bl	80186a8 <_printf_i>
 8018d12:	e7e4      	b.n	8018cde <_vfiprintf_r+0x1e6>
 8018d14:	08019bc0 	.word	0x08019bc0
 8018d18:	08019bca 	.word	0x08019bca
 8018d1c:	00000000 	.word	0x00000000
 8018d20:	08018ad5 	.word	0x08018ad5
 8018d24:	08019bc6 	.word	0x08019bc6

08018d28 <__swbuf_r>:
 8018d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d2a:	460e      	mov	r6, r1
 8018d2c:	4614      	mov	r4, r2
 8018d2e:	4605      	mov	r5, r0
 8018d30:	b118      	cbz	r0, 8018d3a <__swbuf_r+0x12>
 8018d32:	6a03      	ldr	r3, [r0, #32]
 8018d34:	b90b      	cbnz	r3, 8018d3a <__swbuf_r+0x12>
 8018d36:	f7ff f861 	bl	8017dfc <__sinit>
 8018d3a:	69a3      	ldr	r3, [r4, #24]
 8018d3c:	60a3      	str	r3, [r4, #8]
 8018d3e:	89a3      	ldrh	r3, [r4, #12]
 8018d40:	071a      	lsls	r2, r3, #28
 8018d42:	d501      	bpl.n	8018d48 <__swbuf_r+0x20>
 8018d44:	6923      	ldr	r3, [r4, #16]
 8018d46:	b943      	cbnz	r3, 8018d5a <__swbuf_r+0x32>
 8018d48:	4621      	mov	r1, r4
 8018d4a:	4628      	mov	r0, r5
 8018d4c:	f000 f82a 	bl	8018da4 <__swsetup_r>
 8018d50:	b118      	cbz	r0, 8018d5a <__swbuf_r+0x32>
 8018d52:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018d56:	4638      	mov	r0, r7
 8018d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d5a:	6823      	ldr	r3, [r4, #0]
 8018d5c:	6922      	ldr	r2, [r4, #16]
 8018d5e:	1a98      	subs	r0, r3, r2
 8018d60:	6963      	ldr	r3, [r4, #20]
 8018d62:	b2f6      	uxtb	r6, r6
 8018d64:	4283      	cmp	r3, r0
 8018d66:	4637      	mov	r7, r6
 8018d68:	dc05      	bgt.n	8018d76 <__swbuf_r+0x4e>
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	4628      	mov	r0, r5
 8018d6e:	f7ff fe3f 	bl	80189f0 <_fflush_r>
 8018d72:	2800      	cmp	r0, #0
 8018d74:	d1ed      	bne.n	8018d52 <__swbuf_r+0x2a>
 8018d76:	68a3      	ldr	r3, [r4, #8]
 8018d78:	3b01      	subs	r3, #1
 8018d7a:	60a3      	str	r3, [r4, #8]
 8018d7c:	6823      	ldr	r3, [r4, #0]
 8018d7e:	1c5a      	adds	r2, r3, #1
 8018d80:	6022      	str	r2, [r4, #0]
 8018d82:	701e      	strb	r6, [r3, #0]
 8018d84:	6962      	ldr	r2, [r4, #20]
 8018d86:	1c43      	adds	r3, r0, #1
 8018d88:	429a      	cmp	r2, r3
 8018d8a:	d004      	beq.n	8018d96 <__swbuf_r+0x6e>
 8018d8c:	89a3      	ldrh	r3, [r4, #12]
 8018d8e:	07db      	lsls	r3, r3, #31
 8018d90:	d5e1      	bpl.n	8018d56 <__swbuf_r+0x2e>
 8018d92:	2e0a      	cmp	r6, #10
 8018d94:	d1df      	bne.n	8018d56 <__swbuf_r+0x2e>
 8018d96:	4621      	mov	r1, r4
 8018d98:	4628      	mov	r0, r5
 8018d9a:	f7ff fe29 	bl	80189f0 <_fflush_r>
 8018d9e:	2800      	cmp	r0, #0
 8018da0:	d0d9      	beq.n	8018d56 <__swbuf_r+0x2e>
 8018da2:	e7d6      	b.n	8018d52 <__swbuf_r+0x2a>

08018da4 <__swsetup_r>:
 8018da4:	b538      	push	{r3, r4, r5, lr}
 8018da6:	4b29      	ldr	r3, [pc, #164]	@ (8018e4c <__swsetup_r+0xa8>)
 8018da8:	4605      	mov	r5, r0
 8018daa:	6818      	ldr	r0, [r3, #0]
 8018dac:	460c      	mov	r4, r1
 8018dae:	b118      	cbz	r0, 8018db8 <__swsetup_r+0x14>
 8018db0:	6a03      	ldr	r3, [r0, #32]
 8018db2:	b90b      	cbnz	r3, 8018db8 <__swsetup_r+0x14>
 8018db4:	f7ff f822 	bl	8017dfc <__sinit>
 8018db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dbc:	0719      	lsls	r1, r3, #28
 8018dbe:	d422      	bmi.n	8018e06 <__swsetup_r+0x62>
 8018dc0:	06da      	lsls	r2, r3, #27
 8018dc2:	d407      	bmi.n	8018dd4 <__swsetup_r+0x30>
 8018dc4:	2209      	movs	r2, #9
 8018dc6:	602a      	str	r2, [r5, #0]
 8018dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018dcc:	81a3      	strh	r3, [r4, #12]
 8018dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018dd2:	e033      	b.n	8018e3c <__swsetup_r+0x98>
 8018dd4:	0758      	lsls	r0, r3, #29
 8018dd6:	d512      	bpl.n	8018dfe <__swsetup_r+0x5a>
 8018dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018dda:	b141      	cbz	r1, 8018dee <__swsetup_r+0x4a>
 8018ddc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018de0:	4299      	cmp	r1, r3
 8018de2:	d002      	beq.n	8018dea <__swsetup_r+0x46>
 8018de4:	4628      	mov	r0, r5
 8018de6:	f7ff fa47 	bl	8018278 <_free_r>
 8018dea:	2300      	movs	r3, #0
 8018dec:	6363      	str	r3, [r4, #52]	@ 0x34
 8018dee:	89a3      	ldrh	r3, [r4, #12]
 8018df0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018df4:	81a3      	strh	r3, [r4, #12]
 8018df6:	2300      	movs	r3, #0
 8018df8:	6063      	str	r3, [r4, #4]
 8018dfa:	6923      	ldr	r3, [r4, #16]
 8018dfc:	6023      	str	r3, [r4, #0]
 8018dfe:	89a3      	ldrh	r3, [r4, #12]
 8018e00:	f043 0308 	orr.w	r3, r3, #8
 8018e04:	81a3      	strh	r3, [r4, #12]
 8018e06:	6923      	ldr	r3, [r4, #16]
 8018e08:	b94b      	cbnz	r3, 8018e1e <__swsetup_r+0x7a>
 8018e0a:	89a3      	ldrh	r3, [r4, #12]
 8018e0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018e14:	d003      	beq.n	8018e1e <__swsetup_r+0x7a>
 8018e16:	4621      	mov	r1, r4
 8018e18:	4628      	mov	r0, r5
 8018e1a:	f000 f883 	bl	8018f24 <__smakebuf_r>
 8018e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e22:	f013 0201 	ands.w	r2, r3, #1
 8018e26:	d00a      	beq.n	8018e3e <__swsetup_r+0x9a>
 8018e28:	2200      	movs	r2, #0
 8018e2a:	60a2      	str	r2, [r4, #8]
 8018e2c:	6962      	ldr	r2, [r4, #20]
 8018e2e:	4252      	negs	r2, r2
 8018e30:	61a2      	str	r2, [r4, #24]
 8018e32:	6922      	ldr	r2, [r4, #16]
 8018e34:	b942      	cbnz	r2, 8018e48 <__swsetup_r+0xa4>
 8018e36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018e3a:	d1c5      	bne.n	8018dc8 <__swsetup_r+0x24>
 8018e3c:	bd38      	pop	{r3, r4, r5, pc}
 8018e3e:	0799      	lsls	r1, r3, #30
 8018e40:	bf58      	it	pl
 8018e42:	6962      	ldrpl	r2, [r4, #20]
 8018e44:	60a2      	str	r2, [r4, #8]
 8018e46:	e7f4      	b.n	8018e32 <__swsetup_r+0x8e>
 8018e48:	2000      	movs	r0, #0
 8018e4a:	e7f7      	b.n	8018e3c <__swsetup_r+0x98>
 8018e4c:	240000c4 	.word	0x240000c4

08018e50 <_raise_r>:
 8018e50:	291f      	cmp	r1, #31
 8018e52:	b538      	push	{r3, r4, r5, lr}
 8018e54:	4605      	mov	r5, r0
 8018e56:	460c      	mov	r4, r1
 8018e58:	d904      	bls.n	8018e64 <_raise_r+0x14>
 8018e5a:	2316      	movs	r3, #22
 8018e5c:	6003      	str	r3, [r0, #0]
 8018e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e62:	bd38      	pop	{r3, r4, r5, pc}
 8018e64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018e66:	b112      	cbz	r2, 8018e6e <_raise_r+0x1e>
 8018e68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018e6c:	b94b      	cbnz	r3, 8018e82 <_raise_r+0x32>
 8018e6e:	4628      	mov	r0, r5
 8018e70:	f000 f830 	bl	8018ed4 <_getpid_r>
 8018e74:	4622      	mov	r2, r4
 8018e76:	4601      	mov	r1, r0
 8018e78:	4628      	mov	r0, r5
 8018e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e7e:	f000 b817 	b.w	8018eb0 <_kill_r>
 8018e82:	2b01      	cmp	r3, #1
 8018e84:	d00a      	beq.n	8018e9c <_raise_r+0x4c>
 8018e86:	1c59      	adds	r1, r3, #1
 8018e88:	d103      	bne.n	8018e92 <_raise_r+0x42>
 8018e8a:	2316      	movs	r3, #22
 8018e8c:	6003      	str	r3, [r0, #0]
 8018e8e:	2001      	movs	r0, #1
 8018e90:	e7e7      	b.n	8018e62 <_raise_r+0x12>
 8018e92:	2100      	movs	r1, #0
 8018e94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018e98:	4620      	mov	r0, r4
 8018e9a:	4798      	blx	r3
 8018e9c:	2000      	movs	r0, #0
 8018e9e:	e7e0      	b.n	8018e62 <_raise_r+0x12>

08018ea0 <raise>:
 8018ea0:	4b02      	ldr	r3, [pc, #8]	@ (8018eac <raise+0xc>)
 8018ea2:	4601      	mov	r1, r0
 8018ea4:	6818      	ldr	r0, [r3, #0]
 8018ea6:	f7ff bfd3 	b.w	8018e50 <_raise_r>
 8018eaa:	bf00      	nop
 8018eac:	240000c4 	.word	0x240000c4

08018eb0 <_kill_r>:
 8018eb0:	b538      	push	{r3, r4, r5, lr}
 8018eb2:	4d07      	ldr	r5, [pc, #28]	@ (8018ed0 <_kill_r+0x20>)
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	4604      	mov	r4, r0
 8018eb8:	4608      	mov	r0, r1
 8018eba:	4611      	mov	r1, r2
 8018ebc:	602b      	str	r3, [r5, #0]
 8018ebe:	f7e8 ff59 	bl	8001d74 <_kill>
 8018ec2:	1c43      	adds	r3, r0, #1
 8018ec4:	d102      	bne.n	8018ecc <_kill_r+0x1c>
 8018ec6:	682b      	ldr	r3, [r5, #0]
 8018ec8:	b103      	cbz	r3, 8018ecc <_kill_r+0x1c>
 8018eca:	6023      	str	r3, [r4, #0]
 8018ecc:	bd38      	pop	{r3, r4, r5, pc}
 8018ece:	bf00      	nop
 8018ed0:	24068684 	.word	0x24068684

08018ed4 <_getpid_r>:
 8018ed4:	f7e8 bf46 	b.w	8001d64 <_getpid>

08018ed8 <__swhatbuf_r>:
 8018ed8:	b570      	push	{r4, r5, r6, lr}
 8018eda:	460c      	mov	r4, r1
 8018edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ee0:	2900      	cmp	r1, #0
 8018ee2:	b096      	sub	sp, #88	@ 0x58
 8018ee4:	4615      	mov	r5, r2
 8018ee6:	461e      	mov	r6, r3
 8018ee8:	da0d      	bge.n	8018f06 <__swhatbuf_r+0x2e>
 8018eea:	89a3      	ldrh	r3, [r4, #12]
 8018eec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018ef0:	f04f 0100 	mov.w	r1, #0
 8018ef4:	bf14      	ite	ne
 8018ef6:	2340      	movne	r3, #64	@ 0x40
 8018ef8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018efc:	2000      	movs	r0, #0
 8018efe:	6031      	str	r1, [r6, #0]
 8018f00:	602b      	str	r3, [r5, #0]
 8018f02:	b016      	add	sp, #88	@ 0x58
 8018f04:	bd70      	pop	{r4, r5, r6, pc}
 8018f06:	466a      	mov	r2, sp
 8018f08:	f000 f848 	bl	8018f9c <_fstat_r>
 8018f0c:	2800      	cmp	r0, #0
 8018f0e:	dbec      	blt.n	8018eea <__swhatbuf_r+0x12>
 8018f10:	9901      	ldr	r1, [sp, #4]
 8018f12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018f16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018f1a:	4259      	negs	r1, r3
 8018f1c:	4159      	adcs	r1, r3
 8018f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018f22:	e7eb      	b.n	8018efc <__swhatbuf_r+0x24>

08018f24 <__smakebuf_r>:
 8018f24:	898b      	ldrh	r3, [r1, #12]
 8018f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f28:	079d      	lsls	r5, r3, #30
 8018f2a:	4606      	mov	r6, r0
 8018f2c:	460c      	mov	r4, r1
 8018f2e:	d507      	bpl.n	8018f40 <__smakebuf_r+0x1c>
 8018f30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018f34:	6023      	str	r3, [r4, #0]
 8018f36:	6123      	str	r3, [r4, #16]
 8018f38:	2301      	movs	r3, #1
 8018f3a:	6163      	str	r3, [r4, #20]
 8018f3c:	b003      	add	sp, #12
 8018f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f40:	ab01      	add	r3, sp, #4
 8018f42:	466a      	mov	r2, sp
 8018f44:	f7ff ffc8 	bl	8018ed8 <__swhatbuf_r>
 8018f48:	9f00      	ldr	r7, [sp, #0]
 8018f4a:	4605      	mov	r5, r0
 8018f4c:	4639      	mov	r1, r7
 8018f4e:	4630      	mov	r0, r6
 8018f50:	f7fe fd22 	bl	8017998 <_malloc_r>
 8018f54:	b948      	cbnz	r0, 8018f6a <__smakebuf_r+0x46>
 8018f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f5a:	059a      	lsls	r2, r3, #22
 8018f5c:	d4ee      	bmi.n	8018f3c <__smakebuf_r+0x18>
 8018f5e:	f023 0303 	bic.w	r3, r3, #3
 8018f62:	f043 0302 	orr.w	r3, r3, #2
 8018f66:	81a3      	strh	r3, [r4, #12]
 8018f68:	e7e2      	b.n	8018f30 <__smakebuf_r+0xc>
 8018f6a:	89a3      	ldrh	r3, [r4, #12]
 8018f6c:	6020      	str	r0, [r4, #0]
 8018f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018f72:	81a3      	strh	r3, [r4, #12]
 8018f74:	9b01      	ldr	r3, [sp, #4]
 8018f76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018f7a:	b15b      	cbz	r3, 8018f94 <__smakebuf_r+0x70>
 8018f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f80:	4630      	mov	r0, r6
 8018f82:	f000 f81d 	bl	8018fc0 <_isatty_r>
 8018f86:	b128      	cbz	r0, 8018f94 <__smakebuf_r+0x70>
 8018f88:	89a3      	ldrh	r3, [r4, #12]
 8018f8a:	f023 0303 	bic.w	r3, r3, #3
 8018f8e:	f043 0301 	orr.w	r3, r3, #1
 8018f92:	81a3      	strh	r3, [r4, #12]
 8018f94:	89a3      	ldrh	r3, [r4, #12]
 8018f96:	431d      	orrs	r5, r3
 8018f98:	81a5      	strh	r5, [r4, #12]
 8018f9a:	e7cf      	b.n	8018f3c <__smakebuf_r+0x18>

08018f9c <_fstat_r>:
 8018f9c:	b538      	push	{r3, r4, r5, lr}
 8018f9e:	4d07      	ldr	r5, [pc, #28]	@ (8018fbc <_fstat_r+0x20>)
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	4604      	mov	r4, r0
 8018fa4:	4608      	mov	r0, r1
 8018fa6:	4611      	mov	r1, r2
 8018fa8:	602b      	str	r3, [r5, #0]
 8018faa:	f7e8 ff43 	bl	8001e34 <_fstat>
 8018fae:	1c43      	adds	r3, r0, #1
 8018fb0:	d102      	bne.n	8018fb8 <_fstat_r+0x1c>
 8018fb2:	682b      	ldr	r3, [r5, #0]
 8018fb4:	b103      	cbz	r3, 8018fb8 <_fstat_r+0x1c>
 8018fb6:	6023      	str	r3, [r4, #0]
 8018fb8:	bd38      	pop	{r3, r4, r5, pc}
 8018fba:	bf00      	nop
 8018fbc:	24068684 	.word	0x24068684

08018fc0 <_isatty_r>:
 8018fc0:	b538      	push	{r3, r4, r5, lr}
 8018fc2:	4d06      	ldr	r5, [pc, #24]	@ (8018fdc <_isatty_r+0x1c>)
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	4604      	mov	r4, r0
 8018fc8:	4608      	mov	r0, r1
 8018fca:	602b      	str	r3, [r5, #0]
 8018fcc:	f7e8 ff42 	bl	8001e54 <_isatty>
 8018fd0:	1c43      	adds	r3, r0, #1
 8018fd2:	d102      	bne.n	8018fda <_isatty_r+0x1a>
 8018fd4:	682b      	ldr	r3, [r5, #0]
 8018fd6:	b103      	cbz	r3, 8018fda <_isatty_r+0x1a>
 8018fd8:	6023      	str	r3, [r4, #0]
 8018fda:	bd38      	pop	{r3, r4, r5, pc}
 8018fdc:	24068684 	.word	0x24068684

08018fe0 <_init>:
 8018fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fe2:	bf00      	nop
 8018fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fe6:	bc08      	pop	{r3}
 8018fe8:	469e      	mov	lr, r3
 8018fea:	4770      	bx	lr

08018fec <_fini>:
 8018fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fee:	bf00      	nop
 8018ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ff2:	bc08      	pop	{r3}
 8018ff4:	469e      	mov	lr, r3
 8018ff6:	4770      	bx	lr
