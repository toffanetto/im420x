
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002302c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029cc  080232d0  080232d0  000242d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025c9c  08025c9c  00026c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000044  08025ca4  08025ca4  00026ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025ce8  08025ce8  00026ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00001474  24000000  08025cec  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000683e0  24001478  08027160  00028478  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24069858  08027160  00028858  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00028474  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fad1  00000000  00000000  000284a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d69  00000000  00000000  00057f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fe0  00000000  00000000  0005dce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001883  00000000  00000000  0005fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000445cc  00000000  00000000  00061543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037374  00000000  00000000  000a5b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00192642  00000000  00000000  000dce83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  0026f4c5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009354  00000000  00000000  0026f53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00278890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001478 	.word	0x24001478
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080232b4 	.word	0x080232b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400147c 	.word	0x2400147c
 80002dc:	080232b4 	.word	0x080232b4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f003 f874 	bl	80038b0 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f001 f9d1 	bl	8001b74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f004 f897 	bl	8004910 <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f001 f9c4 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f003 fad2 	bl	8003db8 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f001 f9ab 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f003 fac4 	bl	8003db8 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f001 f99d 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	24001494 	.word	0x24001494
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f021 fdbf 	bl	80223f8 <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f008 fa72 	bl	8008da8 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f001 f953 	bl	8001b74 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f006 fff9 	bl	800791c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f004 f98b 	bl	8004c8c <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f001 f8fa 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	240014f8 	.word	0x240014f8
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00f f834 	bl	800fa20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00e ffa3 	bl	800fa3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	240322b8 	.word	0x240322b8
 8000b28:	240322c4 	.word	0x240322c4
 8000b2c:	240322bc 	.word	0x240322bc
 8000b30:	240322b0 	.word	0x240322b0
 8000b34:	240322c0 	.word	0x240322c0

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00e ff2c 	bl	800fa20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00e ff2e 	bl	800fa3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	240322c4 	.word	0x240322c4
 8000bec:	240322bc 	.word	0x240322bc

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	240322c4 	.word	0x240322c4

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00e fef3 	bl	800fa20 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f021 fce2 	bl	8022636 <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00e fee0 	bl	800fa3c <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00e fec6 	bl	800fa20 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00e febc 	bl	800fa3c <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	24001570 	.word	0x24001570
 8000d84:	240322b0 	.word	0x240322b0
 8000d88:	240322b8 	.word	0x240322b8
 8000d8c:	240322c0 	.word	0x240322c0
 8000d90:	240322bc 	.word	0x240322bc
 8000d94:	240322c4 	.word	0x240322c4

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	240322b0 	.word	0x240322b0
 8000e48:	240322b8 	.word	0x240322b8

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f003 fed2 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f003 fee9 	bl	8004c70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f003 feca 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f003 fee1 	bl	8004c70 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2039      	movs	r0, #57	@ 0x39
 8000eb4:	f003 fec2 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000eb8:	2039      	movs	r0, #57	@ 0x39
 8000eba:	f003 fed9 	bl	8004c70 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	203a      	movs	r0, #58	@ 0x3a
 8000ec4:	f003 feba 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ec8:	203a      	movs	r0, #58	@ 0x3a
 8000eca:	f003 fed1 	bl	8004c70 <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400

08000edc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ef0:	4904      	ldr	r1, [pc, #16]	@ (8000f04 <cubemx_transport_open+0x28>)
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f00a fff4 	bl	800bee0 <HAL_UART_Receive_DMA>
    return true;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	240322c8 	.word	0x240322c8

08000f08 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f16:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00b f82d 	bl	800bf78 <HAL_UART_DMAStop>
    return true;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f3c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d11b      	bne.n	8000f80 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f00a ff45 	bl	800bde0 <HAL_UART_Transmit_DMA>
 8000f56:	4603      	mov	r3, r0
 8000f58:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f00d f9d3 	bl	800e308 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <cubemx_transport_write+0x4a>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d1f4      	bne.n	8000f5c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <cubemx_transport_write+0x54>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e002      	b.n	8000f82 <cubemx_transport_write+0x5a>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e000      	b.n	8000f82 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f80:	2300      	movs	r3, #0
    }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000fa0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
}
 8000fa8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <cubemx_transport_read+0x190>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d068      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <cubemx_transport_read+0x194>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d061      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a55      	ldr	r2, [pc, #340]	@ (8001124 <cubemx_transport_read+0x198>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05a      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <cubemx_transport_read+0x19c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d053      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a50      	ldr	r2, [pc, #320]	@ (800112c <cubemx_transport_read+0x1a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <cubemx_transport_read+0x1a4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d045      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <cubemx_transport_read+0x1a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03e      	beq.n	800108a <cubemx_transport_read+0xfe>
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a48      	ldr	r2, [pc, #288]	@ (8001138 <cubemx_transport_read+0x1ac>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d037      	beq.n	800108a <cubemx_transport_read+0xfe>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a46      	ldr	r2, [pc, #280]	@ (800113c <cubemx_transport_read+0x1b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d030      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a43      	ldr	r2, [pc, #268]	@ (8001140 <cubemx_transport_read+0x1b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a41      	ldr	r2, [pc, #260]	@ (8001144 <cubemx_transport_read+0x1b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d022      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <cubemx_transport_read+0x1bc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01b      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3c      	ldr	r2, [pc, #240]	@ (800114c <cubemx_transport_read+0x1c0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d014      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <cubemx_transport_read+0x1c4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <cubemx_transport_read+0xfe>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <cubemx_transport_read+0x1c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d006      	beq.n	800108a <cubemx_transport_read+0xfe>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a34      	ldr	r2, [pc, #208]	@ (8001158 <cubemx_transport_read+0x1cc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d107      	bne.n	800109a <cubemx_transport_read+0x10e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001098:	e006      	b.n	80010a8 <cubemx_transport_read+0x11c>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a8:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010ac:	b662      	cpsie	i
}
 80010ae:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00d f926 	bl	800e308 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d104      	bne.n	80010d2 <cubemx_transport_read+0x146>
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f6ff af6a 	blt.w	8000fa6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d6:	e011      	b.n	80010fc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d8:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	440b      	add	r3, r1
 80010e2:	4920      	ldr	r1, [pc, #128]	@ (8001164 <cubemx_transport_read+0x1d8>)
 80010e4:	5c8a      	ldrb	r2, [r1, r2]
 80010e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <cubemx_transport_read+0x1d0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d003      	beq.n	8001110 <cubemx_transport_read+0x184>
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3e3      	bcc.n	80010d8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001110:	69bb      	ldr	r3, [r7, #24]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020010 	.word	0x40020010
 8001120:	40020028 	.word	0x40020028
 8001124:	40020040 	.word	0x40020040
 8001128:	40020058 	.word	0x40020058
 800112c:	40020070 	.word	0x40020070
 8001130:	40020088 	.word	0x40020088
 8001134:	400200a0 	.word	0x400200a0
 8001138:	400200b8 	.word	0x400200b8
 800113c:	40020410 	.word	0x40020410
 8001140:	40020428 	.word	0x40020428
 8001144:	40020440 	.word	0x40020440
 8001148:	40020458 	.word	0x40020458
 800114c:	40020470 	.word	0x40020470
 8001150:	40020488 	.word	0x40020488
 8001154:	400204a0 	.word	0x400204a0
 8001158:	400204b8 	.word	0x400204b8
 800115c:	24032acc 	.word	0x24032acc
 8001160:	24032ac8 	.word	0x24032ac8
 8001164:	240322c8 	.word	0x240322c8

08001168 <timer_watchdog_agent_callback>:
extern osThreadId_t TaskMicroAutowaHandle;

// Timer callbacks

void timer_watchdog_agent_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	e9c7 2300 	strd	r2, r3, [r7]
	
  if(RMW_RET_OK != rmw_uros_ping_agent(20, 1)) 
 8001174:	2101      	movs	r1, #1
 8001176:	2014      	movs	r0, #20
 8001178:	f014 faa8 	bl	80156cc <rmw_uros_ping_agent>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <timer_watchdog_agent_callback+0x32>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <timer_watchdog_agent_callback+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f00c ffcd 	bl	800e128 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <timer_watchdog_agent_callback+0x40>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2110      	movs	r1, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f00c ffc7 	bl	800e128 <osThreadFlagsSet>
  } 

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24032ad0 	.word	0x24032ad0
 80011a8:	24032ad4 	.word	0x24032ad4

080011ac <clock_callback>:
  * @brief  ROS topic subscriber callback to recieve current timestamp
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void clock_callback(const void * xMsgIn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  const rosgraph_msgs__msg__Clock * clock_msg_ = (const rosgraph_msgs__msg__Clock * )xMsgIn;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 0);
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <clock_callback+0x28>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <clock_callback+0x28>)
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	24032b53 	.word	0x24032b53

080011d8 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  const autoware_control_msgs__msg__Control * control_cmd_msg_ = (const autoware_control_msgs__msg__Control * )xMsgIn;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 1);
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <control_cmd_callback+0x28>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <control_cmd_callback+0x28>)
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	24032b53 	.word	0x24032b53

08001204 <gear_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the gear command and save in gear_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void gear_cmd_callback(const void * xMsgIn)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__GearCommand * gear_cmd_msg_ = (const autoware_vehicle_msgs__msg__GearCommand * )xMsgIn;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 2);
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <gear_cmd_callback+0x28>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <gear_cmd_callback+0x28>)
 800121c:	701a      	strb	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	24032b53 	.word	0x24032b53

08001230 <turn_indicators_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the turn lights commands and save in turn_indicators_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void turn_indicators_cmd_callback(const void * xMsgIn)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * turn_indicators_cmd_msg_ = (const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * )xMsgIn;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 3);
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <turn_indicators_cmd_callback+0x28>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <turn_indicators_cmd_callback+0x28>)
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	24032b53 	.word	0x24032b53

0800125c <hazard_lights_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the hazard lights commands and save in hazard_lights_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void hazard_lights_cmd_callback(const void * xMsgIn)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__HazardLightsCommand * hazard_lights_cmd_msg_ = (const autoware_vehicle_msgs__msg__HazardLightsCommand * )xMsgIn;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 4);
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <hazard_lights_cmd_callback+0x28>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <hazard_lights_cmd_callback+0x28>)
 8001274:	701a      	strb	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	24032b53 	.word	0x24032b53

08001288 <actuation_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in actuation_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void actuation_cmd_callback(const void * xMsgIn)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__ActuationCommandStamped * actuation_cmd_msg_ = (const tier4_vehicle_msgs__msg__ActuationCommandStamped * )xMsgIn;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 5);
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <actuation_cmd_callback+0x28>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <actuation_cmd_callback+0x28>)
 80012a0:	701a      	strb	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	24032b53 	.word	0x24032b53

080012b4 <emergency_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in emergency_msg_ 
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void emergency_callback(const void * xMsgIn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * emergency_msg_ = (const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * )xMsgIn;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 6);
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <emergency_callback+0x28>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <emergency_callback+0x28>)
 80012cc:	701a      	strb	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	24032b53 	.word	0x24032b53

080012e0 <control_mode_cmd_callback>:
  * @param  xRequestMsg: pointer to the request made for the server.
  * @param  xResponseMsg: pointer to the response gave by the server.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, autoware_vehicle_msgs__srv__ControlModeCommand_Response * xResponseMsg)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  const autoware_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  if(AUTOWARE == control_mode_request_msg_->mode)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	7a1b      	ldrb	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10c      	bne.n	8001310 <control_mode_cmd_callback+0x30>
  {
    osThreadFlagsSet(TaskControleHandle, TO_AUTOWARE_MODE_FLAG);
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <control_mode_cmd_callback+0x60>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00c ff13 	bl	800e128 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <control_mode_cmd_callback+0x64>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f00c ff0d 	bl	800e128 <osThreadFlagsSet>
 800130e:	e00f      	b.n	8001330 <control_mode_cmd_callback+0x50>
  }
  else if(MANUAL == control_mode_request_msg_->mode)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	7a1b      	ldrb	r3, [r3, #8]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d10b      	bne.n	8001330 <control_mode_cmd_callback+0x50>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <control_mode_cmd_callback+0x60>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2110      	movs	r1, #16
 800131e:	4618      	mov	r0, r3
 8001320:	f00c ff02 	bl	800e128 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <control_mode_cmd_callback+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2110      	movs	r1, #16
 800132a:	4618      	mov	r0, r3
 800132c:	f00c fefc 	bl	800e128 <osThreadFlagsSet>
  }

  xResponseMsg->success = true;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24032ad0 	.word	0x24032ad0
 8001344:	24032ad4 	.word	0x24032ad4

08001348 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 800134c:	480e      	ldr	r0, [pc, #56]	@ (8001388 <MX_FREERTOS_Init+0x40>)
 800134e:	f00c fff6 	bl	800e33e <osMutexNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <MX_FREERTOS_Init+0x44>)
 8001356:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8001358:	480d      	ldr	r0, [pc, #52]	@ (8001390 <MX_FREERTOS_Init+0x48>)
 800135a:	f00c fff0 	bl	800e33e <osMutexNew>
 800135e:	4603      	mov	r3, r0
 8001360:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <MX_FREERTOS_Init+0x4c>)
 8001362:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001364:	4a0c      	ldr	r2, [pc, #48]	@ (8001398 <MX_FREERTOS_Init+0x50>)
 8001366:	2100      	movs	r1, #0
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <MX_FREERTOS_Init+0x54>)
 800136a:	f00c fe4a 	bl	800e002 <osThreadNew>
 800136e:	4603      	mov	r3, r0
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <MX_FREERTOS_Init+0x58>)
 8001372:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 8001374:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <MX_FREERTOS_Init+0x5c>)
 8001376:	2100      	movs	r1, #0
 8001378:	480b      	ldr	r0, [pc, #44]	@ (80013a8 <MX_FREERTOS_Init+0x60>)
 800137a:	f00c fe42 	bl	800e002 <osThreadNew>
 800137e:	4603      	mov	r3, r0
 8001380:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <MX_FREERTOS_Init+0x64>)
 8001382:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	080235c8 	.word	0x080235c8
 800138c:	24032ad8 	.word	0x24032ad8
 8001390:	080235d8 	.word	0x080235d8
 8001394:	24032adc 	.word	0x24032adc
 8001398:	08023580 	.word	0x08023580
 800139c:	080028bd 	.word	0x080028bd
 80013a0:	24032ad0 	.word	0x24032ad0
 80013a4:	080235a4 	.word	0x080235a4
 80013a8:	08001b81 	.word	0x08001b81
 80013ac:	24032ad4 	.word	0x24032ad4

080013b0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	@ 0x38
 80013b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b9e      	ldr	r3, [pc, #632]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d6:	4b9a      	ldr	r3, [pc, #616]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e4:	4b96      	ldr	r3, [pc, #600]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	4a95      	ldr	r2, [pc, #596]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f4:	4b92      	ldr	r3, [pc, #584]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b8f      	ldr	r3, [pc, #572]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001408:	4a8d      	ldr	r2, [pc, #564]	@ (8001640 <MX_GPIO_Init+0x290>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001412:	4b8b      	ldr	r3, [pc, #556]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b87      	ldr	r3, [pc, #540]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	4a86      	ldr	r2, [pc, #536]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001430:	4b83      	ldr	r3, [pc, #524]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143e:	4b80      	ldr	r3, [pc, #512]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001444:	4a7e      	ldr	r2, [pc, #504]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144e:	4b7c      	ldr	r3, [pc, #496]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145c:	4b78      	ldr	r3, [pc, #480]	@ (8001640 <MX_GPIO_Init+0x290>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	4a77      	ldr	r2, [pc, #476]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146c:	4b74      	ldr	r3, [pc, #464]	@ (8001640 <MX_GPIO_Init+0x290>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147a:	4b71      	ldr	r3, [pc, #452]	@ (8001640 <MX_GPIO_Init+0x290>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001480:	4a6f      	ldr	r2, [pc, #444]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800148a:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <MX_GPIO_Init+0x290>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001498:	4b69      	ldr	r3, [pc, #420]	@ (8001640 <MX_GPIO_Init+0x290>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	4a68      	ldr	r2, [pc, #416]	@ (8001640 <MX_GPIO_Init+0x290>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a8:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <MX_GPIO_Init+0x290>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80014bc:	4861      	ldr	r0, [pc, #388]	@ (8001644 <MX_GPIO_Init+0x294>)
 80014be:	f006 fbdd 	bl	8007c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014c8:	485f      	ldr	r0, [pc, #380]	@ (8001648 <MX_GPIO_Init+0x298>)
 80014ca:	f006 fbd7 	bl	8007c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2102      	movs	r1, #2
 80014d2:	485e      	ldr	r0, [pc, #376]	@ (800164c <MX_GPIO_Init+0x29c>)
 80014d4:	f006 fbd2 	bl	8007c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4858      	ldr	r0, [pc, #352]	@ (8001650 <MX_GPIO_Init+0x2a0>)
 80014ee:	f006 fa15 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014f2:	2332      	movs	r3, #50	@ 0x32
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001502:	230b      	movs	r3, #11
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4850      	ldr	r0, [pc, #320]	@ (8001650 <MX_GPIO_Init+0x2a0>)
 800150e:	f006 fa05 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001512:	2386      	movs	r3, #134	@ 0x86
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001522:	230b      	movs	r3, #11
 8001524:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4849      	ldr	r0, [pc, #292]	@ (8001654 <MX_GPIO_Init+0x2a4>)
 800152e:	f006 f9f5 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001532:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	483e      	ldr	r0, [pc, #248]	@ (8001644 <MX_GPIO_Init+0x294>)
 800154c:	f006 f9e6 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8001550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001556:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155c:	2301      	movs	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	483c      	ldr	r0, [pc, #240]	@ (8001658 <MX_GPIO_Init+0x2a8>)
 8001568:	f006 f9d8 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800156c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800157e:	230b      	movs	r3, #11
 8001580:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	482e      	ldr	r0, [pc, #184]	@ (8001644 <MX_GPIO_Init+0x294>)
 800158a:	f006 f9c7 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800158e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4828      	ldr	r0, [pc, #160]	@ (8001648 <MX_GPIO_Init+0x298>)
 80015a8:	f006 f9b8 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4826      	ldr	r0, [pc, #152]	@ (800165c <MX_GPIO_Init+0x2ac>)
 80015c2:	f006 f9ab 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015c6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015d8:	230a      	movs	r3, #10
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	481c      	ldr	r0, [pc, #112]	@ (8001654 <MX_GPIO_Init+0x2a4>)
 80015e4:	f006 f99a 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80015e8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fa:	230b      	movs	r3, #11
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4815      	ldr	r0, [pc, #84]	@ (800165c <MX_GPIO_Init+0x2ac>)
 8001606:	f006 f989 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800160a:	2302      	movs	r3, #2
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	480a      	ldr	r0, [pc, #40]	@ (800164c <MX_GPIO_Init+0x29c>)
 8001622:	f006 f97b 	bl	800791c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2107      	movs	r1, #7
 800162a:	2028      	movs	r0, #40	@ 0x28
 800162c:	f003 fb06 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001630:	2028      	movs	r0, #40	@ 0x28
 8001632:	f003 fb1d 	bl	8004c70 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3738      	adds	r7, #56	@ 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	58024400 	.word	0x58024400
 8001644:	58020400 	.word	0x58020400
 8001648:	58020c00 	.word	0x58020c00
 800164c:	58021000 	.word	0x58021000
 8001650:	58020800 	.word	0x58020800
 8001654:	58020000 	.word	0x58020000
 8001658:	58021400 	.word	0x58021400
 800165c:	58021800 	.word	0x58021800

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001664:	f001 feb0 	bl	80033c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001668:	f000 f81c 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166c:	f7ff fea0 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001670:	f7ff fbec 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001674:	f001 fb70 	bl	8002d58 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001678:	f7ff f862 	bl	8000740 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800167c:	f001 fb20 	bl	8002cc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8001680:	2202      	movs	r2, #2
 8001682:	4906      	ldr	r1, [pc, #24]	@ (800169c <main+0x3c>)
 8001684:	4806      	ldr	r0, [pc, #24]	@ (80016a0 <main+0x40>)
 8001686:	f002 fab5 	bl	8003bf4 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800168a:	f00c fc5b 	bl	800df44 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800168e:	f7ff fe5b 	bl	8001348 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001692:	f00c fc7b 	bl	800df8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001696:	bf00      	nop
 8001698:	e7fd      	b.n	8001696 <main+0x36>
 800169a:	bf00      	nop
 800169c:	24032ae4 	.word	0x24032ae4
 80016a0:	24001494 	.word	0x24001494

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b09e      	sub	sp, #120	@ 0x78
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ae:	224c      	movs	r2, #76	@ 0x4c
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f020 fea0 	bl	80223f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2220      	movs	r2, #32
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f020 fe99 	bl	80223f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016c6:	2002      	movs	r0, #2
 80016c8:	f006 fb0c 	bl	8007ce4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b49      	ldr	r3, [pc, #292]	@ (80017f8 <SystemClock_Config+0x154>)
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	4a48      	ldr	r2, [pc, #288]	@ (80017f8 <SystemClock_Config+0x154>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016dc:	4b46      	ldr	r3, [pc, #280]	@ (80017f8 <SystemClock_Config+0x154>)
 80016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b45      	ldr	r3, [pc, #276]	@ (80017fc <SystemClock_Config+0x158>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4a44      	ldr	r2, [pc, #272]	@ (80017fc <SystemClock_Config+0x158>)
 80016ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016f0:	6193      	str	r3, [r2, #24]
 80016f2:	4b42      	ldr	r3, [pc, #264]	@ (80017fc <SystemClock_Config+0x158>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016fe:	bf00      	nop
 8001700:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <SystemClock_Config+0x158>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800170c:	d1f8      	bne.n	8001700 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b3c      	ldr	r3, [pc, #240]	@ (8001800 <SystemClock_Config+0x15c>)
 8001710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001714:	4a3a      	ldr	r2, [pc, #232]	@ (8001800 <SystemClock_Config+0x15c>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800171e:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <SystemClock_Config+0x15c>)
 8001720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800172c:	2300      	movs	r3, #0
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	4b32      	ldr	r3, [pc, #200]	@ (80017fc <SystemClock_Config+0x158>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <SystemClock_Config+0x158>)
 8001736:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <SystemClock_Config+0x158>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b2c      	ldr	r3, [pc, #176]	@ (80017f8 <SystemClock_Config+0x154>)
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	4a2b      	ldr	r2, [pc, #172]	@ (80017f8 <SystemClock_Config+0x154>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001752:	4b29      	ldr	r3, [pc, #164]	@ (80017f8 <SystemClock_Config+0x154>)
 8001754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800175e:	bf00      	nop
 8001760:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <SystemClock_Config+0x158>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800176c:	d1f8      	bne.n	8001760 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800176e:	2310      	movs	r3, #16
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001776:	2320      	movs	r3, #32
 8001778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 800177e:	2301      	movs	r3, #1
 8001780:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001786:	23f0      	movs	r3, #240	@ 0xf0
 8001788:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800178a:	2302      	movs	r3, #2
 800178c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800178e:	2304      	movs	r3, #4
 8001790:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001796:	2308      	movs	r3, #8
 8001798:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800179a:	2300      	movs	r3, #0
 800179c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 fad6 	bl	8007d58 <HAL_RCC_OscConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80017b2:	f000 f9df 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b6:	233f      	movs	r3, #63	@ 0x3f
 80017b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ba:	2303      	movs	r3, #3
 80017bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017c2:	2308      	movs	r3, #8
 80017c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017c6:	2340      	movs	r3, #64	@ 0x40
 80017c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017ca:	2340      	movs	r3, #64	@ 0x40
 80017cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017d4:	2340      	movs	r3, #64	@ 0x40
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2104      	movs	r1, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 ff14 	bl	800860c <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80017ea:	f000 f9c3 	bl	8001b74 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3778      	adds	r7, #120	@ 0x78
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	58000400 	.word	0x58000400
 80017fc:	58024800 	.word	0x58024800
 8001800:	58024400 	.word	0x58024400

08001804 <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001814:	d11a      	bne.n	800184c <HAL_GPIO_EXTI_Callback+0x48>

    unsigned int uiTick = osKernelGetTickCount();
 8001816:	f00c fbdf 	bl	800dfd8 <osKernelGetTickCount>
 800181a:	60f8      	str	r0, [r7, #12]

    if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 800181c:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x50>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	429a      	cmp	r2, r3
 8001828:	d910      	bls.n	800184c <HAL_GPIO_EXTI_Callback+0x48>
    {
      ucButtonState ^= 1;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x54>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x54>)
 8001836:	701a      	strb	r2, [r3, #0]
      uiJoySWTickOnPress = uiTick;
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x50>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6013      	str	r3, [r2, #0]
      osThreadFlagsSet(TaskControleHandle, 0x1000);
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_GPIO_EXTI_Callback+0x58>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001846:	4618      	mov	r0, r3
 8001848:	f00c fc6e 	bl	800e128 <osThreadFlagsSet>
    }
  }
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	24032aec 	.word	0x24032aec
 8001858:	24032ae0 	.word	0x24032ae0
 800185c:	24032ad0 	.word	0x24032ad0

08001860 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4ab5      	ldr	r2, [pc, #724]	@ (8001b40 <HAL_UART_RxCpltCallback+0x2e0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	f040 8163 	bne.w	8001b38 <HAL_UART_RxCpltCallback+0x2d8>
  {

    // State machine state
    unsigned int ucSmState = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	72fb      	strb	r3, [r7, #11]
 800187a:	e154      	b.n	8001b26 <HAL_UART_RxCpltCallback+0x2c6>
    {
      switch (ucSmState)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b2b      	cmp	r3, #43	@ 0x2b
 8001880:	f200 814a 	bhi.w	8001b18 <HAL_UART_RxCpltCallback+0x2b8>
 8001884:	a201      	add	r2, pc, #4	@ (adr r2, 800188c <HAL_UART_RxCpltCallback+0x2c>)
 8001886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188a:	bf00      	nop
 800188c:	0800193d 	.word	0x0800193d
 8001890:	0800194f 	.word	0x0800194f
 8001894:	08001b19 	.word	0x08001b19
 8001898:	08001b19 	.word	0x08001b19
 800189c:	08001b19 	.word	0x08001b19
 80018a0:	08001b19 	.word	0x08001b19
 80018a4:	08001b19 	.word	0x08001b19
 80018a8:	08001b19 	.word	0x08001b19
 80018ac:	08001b19 	.word	0x08001b19
 80018b0:	08001b19 	.word	0x08001b19
 80018b4:	08001a19 	.word	0x08001a19
 80018b8:	08001a29 	.word	0x08001a29
 80018bc:	08001a39 	.word	0x08001a39
 80018c0:	08001a49 	.word	0x08001a49
 80018c4:	08001b19 	.word	0x08001b19
 80018c8:	08001b19 	.word	0x08001b19
 80018cc:	08001b19 	.word	0x08001b19
 80018d0:	08001b19 	.word	0x08001b19
 80018d4:	08001b19 	.word	0x08001b19
 80018d8:	08001b19 	.word	0x08001b19
 80018dc:	08001a59 	.word	0x08001a59
 80018e0:	08001a69 	.word	0x08001a69
 80018e4:	08001a79 	.word	0x08001a79
 80018e8:	08001a89 	.word	0x08001a89
 80018ec:	08001b19 	.word	0x08001b19
 80018f0:	08001b19 	.word	0x08001b19
 80018f4:	08001b19 	.word	0x08001b19
 80018f8:	08001b19 	.word	0x08001b19
 80018fc:	08001b19 	.word	0x08001b19
 8001900:	08001b19 	.word	0x08001b19
 8001904:	08001a99 	.word	0x08001a99
 8001908:	08001aa9 	.word	0x08001aa9
 800190c:	08001ab9 	.word	0x08001ab9
 8001910:	08001ac9 	.word	0x08001ac9
 8001914:	08001b19 	.word	0x08001b19
 8001918:	08001b19 	.word	0x08001b19
 800191c:	08001b19 	.word	0x08001b19
 8001920:	08001b19 	.word	0x08001b19
 8001924:	08001b19 	.word	0x08001b19
 8001928:	08001b19 	.word	0x08001b19
 800192c:	08001ad9 	.word	0x08001ad9
 8001930:	08001ae9 	.word	0x08001ae9
 8001934:	08001af9 	.word	0x08001af9
 8001938:	08001b09 	.word	0x08001b09
      {
        case 0:
          if('#' == ucDmaBuffer[i])
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	4a81      	ldr	r2, [pc, #516]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	2b23      	cmp	r3, #35	@ 0x23
 8001944:	f040 80eb 	bne.w	8001b1e <HAL_UART_RxCpltCallback+0x2be>
          {
            ucSmState = 1;
 8001948:	2301      	movs	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800194c:	e0e7      	b.n	8001b1e <HAL_UART_RxCpltCallback+0x2be>

        case 1:
          switch (ucDmaBuffer[i])
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	4a7c      	ldr	r2, [pc, #496]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	3b24      	subs	r3, #36	@ 0x24
 8001956:	2b20      	cmp	r3, #32
 8001958:	d85a      	bhi.n	8001a10 <HAL_UART_RxCpltCallback+0x1b0>
 800195a:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <HAL_UART_RxCpltCallback+0x100>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	080019fd 	.word	0x080019fd
 8001964:	08001a11 	.word	0x08001a11
 8001968:	08001a11 	.word	0x08001a11
 800196c:	08001a11 	.word	0x08001a11
 8001970:	08001a11 	.word	0x08001a11
 8001974:	08001a11 	.word	0x08001a11
 8001978:	08001a11 	.word	0x08001a11
 800197c:	08001a11 	.word	0x08001a11
 8001980:	08001a11 	.word	0x08001a11
 8001984:	08001a11 	.word	0x08001a11
 8001988:	08001a11 	.word	0x08001a11
 800198c:	08001a11 	.word	0x08001a11
 8001990:	08001a11 	.word	0x08001a11
 8001994:	08001a11 	.word	0x08001a11
 8001998:	08001a11 	.word	0x08001a11
 800199c:	08001a11 	.word	0x08001a11
 80019a0:	08001a11 	.word	0x08001a11
 80019a4:	08001a11 	.word	0x08001a11
 80019a8:	08001a11 	.word	0x08001a11
 80019ac:	08001a11 	.word	0x08001a11
 80019b0:	08001a11 	.word	0x08001a11
 80019b4:	08001a11 	.word	0x08001a11
 80019b8:	08001a11 	.word	0x08001a11
 80019bc:	08001a11 	.word	0x08001a11
 80019c0:	08001a11 	.word	0x08001a11
 80019c4:	08001a11 	.word	0x08001a11
 80019c8:	08001a11 	.word	0x08001a11
 80019cc:	08001a11 	.word	0x08001a11
 80019d0:	08001a11 	.word	0x08001a11
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019eb 	.word	0x080019eb
 80019dc:	080019f1 	.word	0x080019f1
 80019e0:	080019f7 	.word	0x080019f7
          {
            case 'A':
            ucSmState = 10;
 80019e4:	230a      	movs	r3, #10
 80019e6:	60fb      	str	r3, [r7, #12]
            break;
 80019e8:	e015      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case 'B':
            ucSmState = 20;
 80019ea:	2314      	movs	r3, #20
 80019ec:	60fb      	str	r3, [r7, #12]
            break;
 80019ee:	e012      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case 'C':
            ucSmState = 30;
 80019f0:	231e      	movs	r3, #30
 80019f2:	60fb      	str	r3, [r7, #12]
            break;
 80019f4:	e00f      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case 'D':
            ucSmState = 40;
 80019f6:	2328      	movs	r3, #40	@ 0x28
 80019f8:	60fb      	str	r3, [r7, #12]
            break;
 80019fa:	e00c      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case '$':
            ucSmState = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]

            // Message fully received, setting TaskControle ThreadFlag for sync.
            osThreadFlagsSet(TaskControleHandle, 0x10000);
 8001a00:	4b51      	ldr	r3, [pc, #324]	@ (8001b48 <HAL_UART_RxCpltCallback+0x2e8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fb8d 	bl	800e128 <osThreadFlagsSet>
            break;
 8001a0e:	e002      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            default:
              ucSmState = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
              break;
 8001a14:	bf00      	nop
          }
          break;
 8001a16:	e083      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 10:
          xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a1c:	5cd2      	ldrb	r2, [r2, r3]
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a20:	701a      	strb	r2, [r3, #0]
          ucSmState = 11;
 8001a22:	230b      	movs	r3, #11
 8001a24:	60fb      	str	r3, [r7, #12]
          break;
 8001a26:	e07b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 11:
          xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	4a46      	ldr	r2, [pc, #280]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a2c:	5cd2      	ldrb	r2, [r2, r3]
 8001a2e:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a30:	705a      	strb	r2, [r3, #1]
          ucSmState = 12;
 8001a32:	230c      	movs	r3, #12
 8001a34:	60fb      	str	r3, [r7, #12]
          break;
 8001a36:	e073      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 12:
          xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	4a42      	ldr	r2, [pc, #264]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a3c:	5cd2      	ldrb	r2, [r2, r3]
 8001a3e:	4b43      	ldr	r3, [pc, #268]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a40:	709a      	strb	r2, [r3, #2]
          ucSmState = 13;
 8001a42:	230d      	movs	r3, #13
 8001a44:	60fb      	str	r3, [r7, #12]
          break;
 8001a46:	e06b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 13:
          xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001a48:	7afb      	ldrb	r3, [r7, #11]
 8001a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a4c:	5cd2      	ldrb	r2, [r2, r3]
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a50:	70da      	strb	r2, [r3, #3]
          ucSmState = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
          break;
 8001a56:	e063      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 20:
          xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a5c:	5cd2      	ldrb	r2, [r2, r3]
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a60:	711a      	strb	r2, [r3, #4]
          ucSmState = 21;
 8001a62:	2315      	movs	r3, #21
 8001a64:	60fb      	str	r3, [r7, #12]
          break;
 8001a66:	e05b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 21:
          xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001a68:	7afb      	ldrb	r3, [r7, #11]
 8001a6a:	4a36      	ldr	r2, [pc, #216]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a6c:	5cd2      	ldrb	r2, [r2, r3]
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a70:	715a      	strb	r2, [r3, #5]
          ucSmState = 22;
 8001a72:	2316      	movs	r3, #22
 8001a74:	60fb      	str	r3, [r7, #12]
          break;
 8001a76:	e053      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 22:
          xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	4a32      	ldr	r2, [pc, #200]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a7c:	5cd2      	ldrb	r2, [r2, r3]
 8001a7e:	4b33      	ldr	r3, [pc, #204]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a80:	719a      	strb	r2, [r3, #6]
          ucSmState = 23;
 8001a82:	2317      	movs	r3, #23
 8001a84:	60fb      	str	r3, [r7, #12]
          break;
 8001a86:	e04b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 23:
          xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001a88:	7afb      	ldrb	r3, [r7, #11]
 8001a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a8c:	5cd2      	ldrb	r2, [r2, r3]
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a90:	71da      	strb	r2, [r3, #7]
          ucSmState = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
          break;
 8001a96:	e043      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 30:
          xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a9c:	5cd2      	ldrb	r2, [r2, r3]
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001aa0:	721a      	strb	r2, [r3, #8]
          ucSmState = 31;
 8001aa2:	231f      	movs	r3, #31
 8001aa4:	60fb      	str	r3, [r7, #12]
          break;
 8001aa6:	e03b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 31:
          xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001aac:	5cd2      	ldrb	r2, [r2, r3]
 8001aae:	4b27      	ldr	r3, [pc, #156]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ab0:	725a      	strb	r2, [r3, #9]
          ucSmState = 32;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	60fb      	str	r3, [r7, #12]
          break;
 8001ab6:	e033      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 32:
          xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	4a22      	ldr	r2, [pc, #136]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001abc:	5cd2      	ldrb	r2, [r2, r3]
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ac0:	729a      	strb	r2, [r3, #10]
          ucSmState = 33;
 8001ac2:	2321      	movs	r3, #33	@ 0x21
 8001ac4:	60fb      	str	r3, [r7, #12]
          break;
 8001ac6:	e02b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 33:
          xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001acc:	5cd2      	ldrb	r2, [r2, r3]
 8001ace:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ad0:	72da      	strb	r2, [r3, #11]
          ucSmState = 1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
          break;
 8001ad6:	e023      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 40:
          xVehicleStatus.xSteeringStatus.ucBytes[0] = ucDmaBuffer[i];
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	4a1a      	ldr	r2, [pc, #104]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001adc:	5cd2      	ldrb	r2, [r2, r3]
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ae0:	731a      	strb	r2, [r3, #12]
          ucSmState = 41;
 8001ae2:	2329      	movs	r3, #41	@ 0x29
 8001ae4:	60fb      	str	r3, [r7, #12]
          break;
 8001ae6:	e01b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 41:
          xVehicleStatus.xSteeringStatus.ucBytes[1] = ucDmaBuffer[i];
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	4a16      	ldr	r2, [pc, #88]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001aec:	5cd2      	ldrb	r2, [r2, r3]
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001af0:	735a      	strb	r2, [r3, #13]
          ucSmState = 42;
 8001af2:	232a      	movs	r3, #42	@ 0x2a
 8001af4:	60fb      	str	r3, [r7, #12]
          break;
 8001af6:	e013      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 42:
          xVehicleStatus.xSteeringStatus.ucBytes[2] = ucDmaBuffer[i];
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001afc:	5cd2      	ldrb	r2, [r2, r3]
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001b00:	739a      	strb	r2, [r3, #14]
          ucSmState = 43;
 8001b02:	232b      	movs	r3, #43	@ 0x2b
 8001b04:	60fb      	str	r3, [r7, #12]
          break;
 8001b06:	e00b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 43:
          xVehicleStatus.xSteeringStatus.ucBytes[3] = ucDmaBuffer[i];
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001b0c:	5cd2      	ldrb	r2, [r2, r3]
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001b10:	73da      	strb	r2, [r3, #15]
          ucSmState = 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
          break;
 8001b16:	e003      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        default:
		      ucSmState = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
          break;
 8001b1c:	e000      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>
          break;
 8001b1e:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	3301      	adds	r3, #1
 8001b24:	72fb      	strb	r3, [r7, #11]
 8001b26:	7afb      	ldrb	r3, [r7, #11]
 8001b28:	2b16      	cmp	r3, #22
 8001b2a:	f67f aea7 	bls.w	800187c <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001b2e:	2217      	movs	r2, #23
 8001b30:	4904      	ldr	r1, [pc, #16]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001b32:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <HAL_UART_RxCpltCallback+0x2e0>)
 8001b34:	f00a f9d4 	bl	800bee0 <HAL_UART_Receive_DMA>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	24032bb0 	.word	0x24032bb0
 8001b44:	24032b3c 	.word	0x24032b3c
 8001b48:	24032ad0 	.word	0x24032ad0
 8001b4c:	24032b2c 	.word	0x24032b2c

08001b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b62:	f001 fc6d 	bl	8003440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40001000 	.word	0x40001000

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <Error_Handler+0x8>

08001b80 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void * argument)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8001b86:	af02      	add	r7, sp, #8
 8001b88:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b8c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001b90:	6018      	str	r0, [r3, #0]

  // Variables -- START

  unsigned int uiFlags;
  unsigned char ucControlMode = AUTOWARE;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337

  // micro-ros QoS
  const rmw_qos_profile_t * qos_autoware = &rmw_qos_profile_autoware;
 8001b98:	4bd5      	ldr	r3, [pc, #852]	@ (8001ef0 <StartMicroAutoware+0x370>)
 8001b9a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001b9e:	4bd5      	ldr	r3, [pc, #852]	@ (8001ef4 <StartMicroAutoware+0x374>)
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	4bd5      	ldr	r3, [pc, #852]	@ (8001ef8 <StartMicroAutoware+0x378>)
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4bd5      	ldr	r3, [pc, #852]	@ (8001efc <StartMicroAutoware+0x37c>)
 8001ba8:	4ad5      	ldr	r2, [pc, #852]	@ (8001f00 <StartMicroAutoware+0x380>)
 8001baa:	49d6      	ldr	r1, [pc, #856]	@ (8001f04 <StartMicroAutoware+0x384>)
 8001bac:	2001      	movs	r0, #1
 8001bae:	f013 fd77 	bl	80156a0 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001bb2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bb6:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f013 fcc4 	bl	8015548 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001bc0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bc4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001bc8:	4acf      	ldr	r2, [pc, #828]	@ (8001f08 <StartMicroAutoware+0x388>)
 8001bca:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001bcc:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bd0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001bd4:	4acd      	ldr	r2, [pc, #820]	@ (8001f0c <StartMicroAutoware+0x38c>)
 8001bd6:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001bd8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bdc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001be0:	4acb      	ldr	r2, [pc, #812]	@ (8001f10 <StartMicroAutoware+0x390>)
 8001be2:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001be4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001be8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001bec:	4ac9      	ldr	r2, [pc, #804]	@ (8001f14 <StartMicroAutoware+0x394>)
 8001bee:	60da      	str	r2, [r3, #12]

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 8001bf0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bf4:	f5a3 7424 	sub.w	r4, r3, #656	@ 0x290
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f012 fff2 	bl	8014be4 <rclc_executor_get_zero_initialized_executor>
 8001c00:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c04:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	2388      	movs	r3, #136	@ 0x88
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f020 fd11 	bl	8022636 <memcpy>

  allocator = rcl_get_default_allocator();
 8001c14:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c18:	f5a3 7401 	sub.w	r4, r3, #516	@ 0x204
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f013 fca0 	bl	8015564 <rcutils_get_default_allocator>
 8001c24:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c28:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c32:	682b      	ldr	r3, [r5, #0]
 8001c34:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001c36:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001c3a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	f013 fafd 	bl	8015240 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "microautoware", &support);
 8001c46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001c4a:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001c4e:	4ab2      	ldr	r2, [pc, #712]	@ (8001f18 <StartMicroAutoware+0x398>)
 8001c50:	49b2      	ldr	r1, [pc, #712]	@ (8001f1c <StartMicroAutoware+0x39c>)
 8001c52:	f013 fb3f 	bl	80152d4 <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001c56:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001c5a:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001c5e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001c62:	2201      	movs	r2, #1
 8001c64:	f012 ffc8 	bl	8014bf8 <rclc_executor_init>

  // create timers
  rclc_timer_init_default(&timer_watchdog_agent, &support, WATCHDOG_AGENT_TIMEOUT, timer_watchdog_agent_callback);
 8001c68:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001c6c:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001c70:	4bab      	ldr	r3, [pc, #684]	@ (8001f20 <StartMicroAutoware+0x3a0>)
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	f013 fc2c 	bl	80154d8 <rclc_timer_init_default>

  // create subscribers
  rclc_subscription_init(
 8001c80:	f014 fb54 	bl	801632c <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001c8a:	f507 7049 	add.w	r0, r7, #804	@ 0x324
 8001c8e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4ba3      	ldr	r3, [pc, #652]	@ (8001f24 <StartMicroAutoware+0x3a4>)
 8001c96:	f013 fbdf 	bl	8015458 <rclc_subscription_init>
    		&clock_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(rosgraph_msgs, msg, Clock),
    		"/clock", qos_autoware);
        
  rclc_subscription_init(
 8001c9a:	f00f fe87 	bl	80119ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001ca4:	f507 7048 	add.w	r0, r7, #800	@ 0x320
 8001ca8:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4b9e      	ldr	r3, [pc, #632]	@ (8001f28 <StartMicroAutoware+0x3a8>)
 8001cb0:	f013 fbd2 	bl	8015458 <rclc_subscription_init>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_control_msgs, msg, Control),
    		"/control/command/control_cmd", qos_autoware);

  rclc_subscription_init(
 8001cb4:	f010 f990 	bl	8011fd8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001cbe:	f507 7047 	add.w	r0, r7, #796	@ 0x31c
 8001cc2:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b98      	ldr	r3, [pc, #608]	@ (8001f2c <StartMicroAutoware+0x3ac>)
 8001cca:	f013 fbc5 	bl	8015458 <rclc_subscription_init>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd", qos_autoware);

  rclc_subscription_init(
 8001cce:	f010 f9fb 	bl	80120c8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001cd8:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 8001cdc:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	4b93      	ldr	r3, [pc, #588]	@ (8001f30 <StartMicroAutoware+0x3b0>)
 8001ce4:	f013 fbb8 	bl	8015458 <rclc_subscription_init>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd", qos_autoware);

  rclc_subscription_init(
 8001ce8:	f010 f9a6 	bl	8012038 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001cf2:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001cf6:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4b8d      	ldr	r3, [pc, #564]	@ (8001f34 <StartMicroAutoware+0x3b4>)
 8001cfe:	f013 fbab 	bl	8015458 <rclc_subscription_init>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd", qos_autoware);

  rclc_subscription_init(
 8001d02:	f014 fca5 	bl	8016650 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d0c:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001d10:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <StartMicroAutoware+0x3b8>)
 8001d18:	f013 fb9e 	bl	8015458 <rclc_subscription_init>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd", qos_autoware);

  rclc_subscription_init(
 8001d1c:	f014 fce0 	bl	80166e0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d26:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001d2a:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4b82      	ldr	r3, [pc, #520]	@ (8001f3c <StartMicroAutoware+0x3bc>)
 8001d32:	f013 fb91 	bl	8015458 <rclc_subscription_init>
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd", qos_autoware);

  // create publishers
  rclc_publisher_init(
 8001d36:	f010 f937 	bl	8011fa8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d40:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001d44:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f40 <StartMicroAutoware+0x3c0>)
 8001d4c:	f013 fb04 	bl	8015358 <rclc_publisher_init>
        &control_mode_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, ControlModeReport),
        "/vehicle/status/control_mode", qos_autoware);

  rclc_publisher_init(
 8001d50:	f010 f9ea 	bl	8012128 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d5a:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 8001d5e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4b77      	ldr	r3, [pc, #476]	@ (8001f44 <StartMicroAutoware+0x3c4>)
 8001d66:	f013 faf7 	bl	8015358 <rclc_publisher_init>
		    &vehicle_twist_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, VelocityReport),
        "/vehicle/status/velocity_status", qos_autoware);

  rclc_publisher_init(
 8001d6a:	f010 f995 	bl	8012098 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d74:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8001d78:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	4b72      	ldr	r3, [pc, #456]	@ (8001f48 <StartMicroAutoware+0x3c8>)
 8001d80:	f013 faea 	bl	8015358 <rclc_publisher_init>
        &steering_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, SteeringReport),
        "/vehicle/status/steering_status", qos_autoware);

  rclc_publisher_init(
 8001d84:	f010 f940 	bl	8012008 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d8e:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8001d92:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4b6c      	ldr	r3, [pc, #432]	@ (8001f4c <StartMicroAutoware+0x3cc>)
 8001d9a:	f013 fadd 	bl	8015358 <rclc_publisher_init>
        &gear_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearReport),
        "/vehicle/status/gear_status", qos_autoware);

  rclc_publisher_init(
 8001d9e:	f010 f9ab 	bl	80120f8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001da8:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001dac:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	4b67      	ldr	r3, [pc, #412]	@ (8001f50 <StartMicroAutoware+0x3d0>)
 8001db4:	f013 fad0 	bl	8015358 <rclc_publisher_init>
        &turn_indicators_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsReport),
        "/vehicle/status/turn_indicators_status", qos_autoware);

  rclc_publisher_init(
 8001db8:	f010 f956 	bl	8012068 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001dc2:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 8001dc6:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4b61      	ldr	r3, [pc, #388]	@ (8001f54 <StartMicroAutoware+0x3d4>)
 8001dce:	f013 fac3 	bl	8015358 <rclc_publisher_init>
        &hazard_lights_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsReport),
        "/vehicle/status/hazard_lights_status", qos_autoware);

  rclc_publisher_init(
 8001dd2:	f014 fc55 	bl	8016680 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001ddc:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001de0:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f58 <StartMicroAutoware+0x3d8>)
 8001de8:	f013 fab6 	bl	8015358 <rclc_publisher_init>
        &actuation_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
        "/vehicle/status/actuation_status", qos_autoware);

  rclc_publisher_init(
 8001dec:	f014 fc60 	bl	80166b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001df6:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8001dfa:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4b56      	ldr	r3, [pc, #344]	@ (8001f5c <StartMicroAutoware+0x3dc>)
 8001e02:	f013 faa9 	bl	8015358 <rclc_publisher_init>
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
        "/vehicle/status/steering_wheel_status", qos_autoware);

  // creating servers
  rclc_service_init(
 8001e06:	f010 f8af 	bl	8011f68 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001e10:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001e14:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4b51      	ldr	r3, [pc, #324]	@ (8001f60 <StartMicroAutoware+0x3e0>)
 8001e1c:	f013 fadc 	bl	80153d8 <rclc_service_init>
        ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_vehicle_msgs, srv, ControlModeCommand),
        "/control/control_mode_request", qos_autoware);


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &clock_sub_, &clock_msg_, &clock_callback, ON_NEW_DATA);
 8001e20:	f507 7237 	add.w	r2, r7, #732	@ 0x2dc
 8001e24:	f507 7149 	add.w	r1, r7, #804	@ 0x324
 8001e28:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	4b4c      	ldr	r3, [pc, #304]	@ (8001f64 <StartMicroAutoware+0x3e4>)
 8001e32:	f012 ff5d 	bl	8014cf0 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001e36:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8001e3a:	f507 7148 	add.w	r1, r7, #800	@ 0x320
 8001e3e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e42:	2300      	movs	r3, #0
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4b48      	ldr	r3, [pc, #288]	@ (8001f68 <StartMicroAutoware+0x3e8>)
 8001e48:	f012 ff52 	bl	8014cf0 <rclc_executor_add_subscription>
  
  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 8001e4c:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001e50:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001e54:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 8001e58:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e5c:	4c43      	ldr	r4, [pc, #268]	@ (8001f6c <StartMicroAutoware+0x3ec>)
 8001e5e:	9400      	str	r4, [sp, #0]
 8001e60:	f012 ff84 	bl	8014d6c <rclc_executor_add_service>

  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 8001e64:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 8001e68:	f507 7147 	add.w	r1, r7, #796	@ 0x31c
 8001e6c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e70:	2300      	movs	r3, #0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	4b3e      	ldr	r3, [pc, #248]	@ (8001f70 <StartMicroAutoware+0x3f0>)
 8001e76:	f012 ff3b 	bl	8014cf0 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 8001e7a:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 8001e7e:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8001e82:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e86:	2300      	movs	r3, #0
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f74 <StartMicroAutoware+0x3f4>)
 8001e8c:	f012 ff30 	bl	8014cf0 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 8001e90:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 8001e94:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 8001e98:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <StartMicroAutoware+0x3f8>)
 8001ea2:	f012 ff25 	bl	8014cf0 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 8001ea6:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001eaa:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8001eae:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <StartMicroAutoware+0x3fc>)
 8001eb8:	f012 ff1a 	bl	8014cf0 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 8001ebc:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001ec0:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 8001ec4:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f80 <StartMicroAutoware+0x400>)
 8001ece:	f012 ff0f 	bl	8014cf0 <rclc_executor_add_subscription>


  // pinging micro-ros agent
  rmw_ret_t xPingResult = rmw_uros_ping_agent(1000, 20);
 8001ed2:	2114      	movs	r1, #20
 8001ed4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed8:	f013 fbf8 	bl	80156cc <rmw_uros_ping_agent>
 8001edc:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c

  // Setting flag on TaskControle to enable autonomus mode
  osThreadFlagsSet(TaskControleHandle, MICRO_ROS_AGENT_ONLINE_FLAG);
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <StartMicroAutoware+0x404>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00c f91d 	bl	800e128 <osThreadFlagsSet>
 8001eee:	e04b      	b.n	8001f88 <StartMicroAutoware+0x408>
 8001ef0:	080235e8 	.word	0x080235e8
 8001ef4:	08000f8d 	.word	0x08000f8d
 8001ef8:	08000f29 	.word	0x08000f29
 8001efc:	08000f09 	.word	0x08000f09
 8001f00:	08000edd 	.word	0x08000edd
 8001f04:	24032c44 	.word	0x24032c44
 8001f08:	08002171 	.word	0x08002171
 8001f0c:	080021b5 	.word	0x080021b5
 8001f10:	080021ed 	.word	0x080021ed
 8001f14:	08002259 	.word	0x08002259
 8001f18:	08023318 	.word	0x08023318
 8001f1c:	08023328 	.word	0x08023328
 8001f20:	08001169 	.word	0x08001169
 8001f24:	0802333c 	.word	0x0802333c
 8001f28:	08023344 	.word	0x08023344
 8001f2c:	08023364 	.word	0x08023364
 8001f30:	08023380 	.word	0x08023380
 8001f34:	080233a8 	.word	0x080233a8
 8001f38:	080233cc 	.word	0x080233cc
 8001f3c:	080233ec 	.word	0x080233ec
 8001f40:	0802340c 	.word	0x0802340c
 8001f44:	0802342c 	.word	0x0802342c
 8001f48:	0802344c 	.word	0x0802344c
 8001f4c:	0802346c 	.word	0x0802346c
 8001f50:	08023488 	.word	0x08023488
 8001f54:	080234b0 	.word	0x080234b0
 8001f58:	080234d8 	.word	0x080234d8
 8001f5c:	080234fc 	.word	0x080234fc
 8001f60:	08023524 	.word	0x08023524
 8001f64:	080011ad 	.word	0x080011ad
 8001f68:	080011d9 	.word	0x080011d9
 8001f6c:	080012e1 	.word	0x080012e1
 8001f70:	08001205 	.word	0x08001205
 8001f74:	08001231 	.word	0x08001231
 8001f78:	0800125d 	.word	0x0800125d
 8001f7c:	08001289 	.word	0x08001289
 8001f80:	080012b5 	.word	0x080012b5
 8001f84:	24032ad0 	.word	0x24032ad0
  // Task loop
  for (;;)
  {

    // Sync time with ROS
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 8001f88:	2064      	movs	r0, #100	@ 0x64
 8001f8a:	f013 fdb9 	bl	8015b00 <rmw_uros_sync_session>

    rclc_executor_spin_some(&executor, EXECUTOR_SPIN_PERIOD * (1000 * 1000)); // Spinning executor for EXECUTOR_SPIN_PERIOD * (1000 * 1000) ns.
 8001f8e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001f92:	a375      	add	r3, pc, #468	@ (adr r3, 8002168 <StartMicroAutoware+0x5e8>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	f013 f917 	bl	80151cc <rclc_executor_spin_some>

    // Checking if control mode has changed by vehicle or Autoware.
    uiFlags = osThreadFlagsGet();
 8001f9e:	f00c f911 	bl	800e1c4 <osThreadFlagsGet>
 8001fa2:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2011      	movs	r0, #17
 8001fac:	f00c f92b 	bl	800e206 <osThreadFlagsWait>
 8001fb0:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328

    if(TO_AUTOWARE_MODE_FLAG == uiFlags)
 8001fb4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d103      	bne.n	8001fc4 <StartMicroAutoware+0x444>
    {
      ucControlMode = AUTOWARE;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 8001fc2:	e00e      	b.n	8001fe2 <StartMicroAutoware+0x462>
    }
    else if(TO_MANUAL_MODE_FLAG == uiFlags)
 8001fc4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d103      	bne.n	8001fd4 <StartMicroAutoware+0x454>
    {
      ucControlMode = MANUAL;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 8001fd2:	e006      	b.n	8001fe2 <StartMicroAutoware+0x462>
    }
    else if((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG) == uiFlags)
 8001fd4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001fd8:	2b11      	cmp	r3, #17
 8001fda:	d102      	bne.n	8001fe2 <StartMicroAutoware+0x462>
    {
      ucControlMode = MANUAL;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
    }

    control_mode_msg_.stamp = clock_msg_.clock;
 8001fe2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001fe6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fea:	461a      	mov	r2, r3
 8001fec:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8001ff0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ff4:	e882 0003 	stmia.w	r2, {r0, r1}
    control_mode_msg_.mode = ucControlMode;
 8001ff8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001ffc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002000:	f897 2337 	ldrb.w	r2, [r7, #823]	@ 0x337
 8002004:	721a      	strb	r2, [r3, #8]
    rcl_publish(&control_mode_pub_, &control_mode_msg_, NULL);
 8002006:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800200a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800200e:	2200      	movs	r2, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f012 fa59 	bl	80144c8 <rcl_publish>

    // All topics are recieved (maybe not all...)
    if(0b1 & (ucSubscribersRecieved >> 1)) // Checking if control_cmd_sub_ data arrives (second bit of ucSubscribersRecieved)
 8002016:	4b4e      	ldr	r3, [pc, #312]	@ (8002150 <StartMicroAutoware+0x5d0>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0b1      	beq.n	8001f88 <StartMicroAutoware+0x408>
    {
      // Autonomous mode: Gather all subs data, then compact and send to TaskControle.
      if(AUTOWARE == ucControlMode)
 8002024:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8002028:	2b01      	cmp	r3, #1
 800202a:	d129      	bne.n	8002080 <StartMicroAutoware+0x500>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 800202c:	4b49      	ldr	r3, [pc, #292]	@ (8002154 <StartMicroAutoware+0x5d4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002034:	4618      	mov	r0, r3
 8002036:	f00c fa08 	bl	800e44a <osMutexAcquire>
        xControlAction.xSteeringAngle.fFloat = control_cmd_msg_.lateral.steering_tire_angle;
 800203a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800203e:	4a46      	ldr	r2, [pc, #280]	@ (8002158 <StartMicroAutoware+0x5d8>)
 8002040:	6013      	str	r3, [r2, #0]
        xControlAction.xSteeringVelocity.fFloat = control_cmd_msg_.lateral.steering_tire_rotation_rate;
 8002042:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002046:	4a44      	ldr	r2, [pc, #272]	@ (8002158 <StartMicroAutoware+0x5d8>)
 8002048:	6053      	str	r3, [r2, #4]
        xControlAction.xSpeed.fFloat = control_cmd_msg_.longitudinal.velocity;
 800204a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800204e:	4a42      	ldr	r2, [pc, #264]	@ (8002158 <StartMicroAutoware+0x5d8>)
 8002050:	6093      	str	r3, [r2, #8]
        xControlAction.xAcceleration.fFloat = control_cmd_msg_.longitudinal.acceleration;
 8002052:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8002056:	4a40      	ldr	r2, [pc, #256]	@ (8002158 <StartMicroAutoware+0x5d8>)
 8002058:	60d3      	str	r3, [r2, #12]
        xControlAction.xJerk.fFloat = control_cmd_msg_.longitudinal.jerk;
 800205a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800205e:	4a3e      	ldr	r2, [pc, #248]	@ (8002158 <StartMicroAutoware+0x5d8>)
 8002060:	6113      	str	r3, [r2, #16]
        xControlAction.ucControlMode = AUTOWARE;
 8002062:	4b3d      	ldr	r3, [pc, #244]	@ (8002158 <StartMicroAutoware+0x5d8>)
 8002064:	2201      	movs	r2, #1
 8002066:	751a      	strb	r2, [r3, #20]
        osMutexRelease(MutexControlSignalHandle);
 8002068:	4b3c      	ldr	r3, [pc, #240]	@ (800215c <StartMicroAutoware+0x5dc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f00c fa37 	bl	800e4e0 <osMutexRelease>

        osThreadFlagsSet(TaskControleHandle, DATA_UPDATED_FLAG);
 8002072:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <StartMicroAutoware+0x5e0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800207a:	4618      	mov	r0, r3
 800207c:	f00c f854 	bl	800e128 <osThreadFlagsSet>
      }

      // WAIT for flag to sync xControlSignal update
      uiFlags = osThreadFlagsGet();
 8002080:	f00c f8a0 	bl	800e1c4 <osThreadFlagsGet>
 8002084:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_SIGNAL);
 8002088:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800208c:	2101      	movs	r1, #1
 800208e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002092:	f00c f8b8 	bl	800e206 <osThreadFlagsWait>
 8002096:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
      {

      }

      // xControlSignal updated
      if(0x100 == uiFlags)
 800209a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800209e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a2:	f47f af71 	bne.w	8001f88 <StartMicroAutoware+0x408>
      {
        // Assembling microAutoware msgs
        osMutexAcquire(MutexControlSignalHandle, osWaitForever);  
 80020a6:	4b2d      	ldr	r3, [pc, #180]	@ (800215c <StartMicroAutoware+0x5dc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020ae:	4618      	mov	r0, r3
 80020b0:	f00c f9cb 	bl	800e44a <osMutexAcquire>

        // vehicle_twist_msg_ data
        vehicle_twist_msg_.header.stamp = clock_msg_.clock;
 80020b4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020bc:	461a      	mov	r2, r3
 80020be:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 80020c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020c6:	e882 0003 	stmia.w	r2, {r0, r1}
        vehicle_twist_msg_.heading_rate = xControlSignal.fHeadingRate;
 80020ca:	4b26      	ldr	r3, [pc, #152]	@ (8002164 <StartMicroAutoware+0x5e4>)
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020d2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020d6:	61da      	str	r2, [r3, #28]
        vehicle_twist_msg_.lateral_velocity = xControlSignal.fLatSpeed;
 80020d8:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <StartMicroAutoware+0x5e4>)
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020e4:	619a      	str	r2, [r3, #24]
        vehicle_twist_msg_.longitudinal_velocity = xControlSignal.fLongSpeed;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <StartMicroAutoware+0x5e4>)
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020f2:	615a      	str	r2, [r3, #20]

        // steering_status_msg_ data
        steering_status_msg_.stamp = clock_msg_.clock;
 80020f4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020f8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020fc:	461a      	mov	r2, r3
 80020fe:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8002102:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002106:	e882 0003 	stmia.w	r2, {r0, r1}
        steering_status_msg_.steering_tire_angle = xControlSignal.fSteeringStatus;
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <StartMicroAutoware+0x5e4>)
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002112:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002116:	609a      	str	r2, [r3, #8]

        osMutexRelease(MutexControlSignalHandle);
 8002118:	4b10      	ldr	r3, [pc, #64]	@ (800215c <StartMicroAutoware+0x5dc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f00c f9df 	bl	800e4e0 <osMutexRelease>

        // Publishing in Autoware topics
        rcl_publish(&vehicle_twist_pub_, &vehicle_twist_msg_, NULL);
 8002122:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8002126:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 800212a:	2200      	movs	r2, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f012 f9cb 	bl	80144c8 <rcl_publish>
        rcl_publish(&steering_status_pub_, &steering_status_msg_, NULL);
 8002132:	f507 71f2 	add.w	r1, r7, #484	@ 0x1e4
 8002136:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 800213a:	2200      	movs	r2, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f012 f9c3 	bl	80144c8 <rcl_publish>
        // Reseting subscribers flags
        ucSubscribersRecieved = 0;
 8002142:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <StartMicroAutoware+0x5d0>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 8002148:	e71e      	b.n	8001f88 <StartMicroAutoware+0x408>
 800214a:	bf00      	nop
 800214c:	f3af 8000 	nop.w
 8002150:	24032b53 	.word	0x24032b53
 8002154:	24032adc 	.word	0x24032adc
 8002158:	24032af0 	.word	0x24032af0
 800215c:	24032ad8 	.word	0x24032ad8
 8002160:	24032ad0 	.word	0x24032ad0
 8002164:	24032b08 	.word	0x24032b08
 8002168:	0bebc200 	.word	0x0bebc200
 800216c:	00000000 	.word	0x00000000

08002170 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800217a:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <microros_allocate+0x3c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <microros_allocate+0x3c>)
 8002188:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <microros_allocate+0x40>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <microros_allocate+0x40>)
 8002198:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fc04 	bl	80009a8 <pvPortMallocMicroROS>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	24032b54 	.word	0x24032b54
 80021b0:	24032b58 	.word	0x24032b58

080021b4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00c      	beq.n	80021de <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7fe fd13 	bl	8000bf0 <getBlockSize>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4a06      	ldr	r2, [pc, #24]	@ (80021e8 <microros_deallocate+0x34>)
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <microros_deallocate+0x34>)
 80021d6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe fcad 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	24032b58 	.word	0x24032b58

080021ec <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80021f8:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <microros_reallocate+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4413      	add	r3, r2
 8002202:	461a      	mov	r2, r3
 8002204:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <microros_reallocate+0x64>)
 8002206:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <microros_reallocate+0x68>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4413      	add	r3, r2
 8002212:	461a      	mov	r2, r3
 8002214:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <microros_reallocate+0x68>)
 8002216:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d104      	bne.n	8002228 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800221e:	68b8      	ldr	r0, [r7, #8]
 8002220:	f7fe fbc2 	bl	80009a8 <pvPortMallocMicroROS>
 8002224:	4603      	mov	r3, r0
 8002226:	e00e      	b.n	8002246 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7fe fce1 	bl	8000bf0 <getBlockSize>
 800222e:	4603      	mov	r3, r0
 8002230:	4a08      	ldr	r2, [pc, #32]	@ (8002254 <microros_reallocate+0x68>)
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	461a      	mov	r2, r3
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <microros_reallocate+0x68>)
 800223a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7fe fcf4 	bl	8000c2c <pvPortReallocMicroROS>
 8002244:	4603      	mov	r3, r0
  }
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	24032b54 	.word	0x24032b54
 8002254:	24032b58 	.word	0x24032b58

08002258 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	4a0c      	ldr	r2, [pc, #48]	@ (80022a0 <microros_zero_allocate+0x48>)
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	4413      	add	r3, r2
 8002272:	461a      	mov	r2, r3
 8002274:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <microros_zero_allocate+0x48>)
 8002276:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	4a08      	ldr	r2, [pc, #32]	@ (80022a4 <microros_zero_allocate+0x4c>)
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	4413      	add	r3, r2
 8002286:	461a      	mov	r2, r3
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <microros_zero_allocate+0x4c>)
 800228a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f7fe fcf9 	bl	8000c86 <pvPortCallocMicroROS>
 8002294:	4603      	mov	r3, r0
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	24032b54 	.word	0x24032b54
 80022a4:	24032b58 	.word	0x24032b58

080022a8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80022a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80022ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022be:	a320      	add	r3, pc, #128	@ (adr r3, 8002340 <UTILS_NanosecondsToTimespec+0x98>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fe f874 	bl	80003b0 <__aeabi_ldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80022d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002340 <UTILS_NanosecondsToTimespec+0x98>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f7fe f868 	bl	80003b0 <__aeabi_ldivmod>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	da20      	bge.n	800232e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a11      	ldr	r2, [pc, #68]	@ (8002338 <UTILS_NanosecondsToTimespec+0x90>)
 80022f2:	fb82 1203 	smull	r1, r2, r2, r3
 80022f6:	1712      	asrs	r2, r2, #28
 80022f8:	17db      	asrs	r3, r3, #31
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	6979      	ldr	r1, [r7, #20]
 8002308:	17c8      	asrs	r0, r1, #31
 800230a:	460c      	mov	r4, r1
 800230c:	4605      	mov	r5, r0
 800230e:	ebb2 0804 	subs.w	r8, r2, r4
 8002312:	eb63 0905 	sbc.w	r9, r3, r5
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4906      	ldr	r1, [pc, #24]	@ (800233c <UTILS_NanosecondsToTimespec+0x94>)
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	441a      	add	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	609a      	str	r2, [r3, #8]
    }
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002338:	44b82fa1 	.word	0x44b82fa1
 800233c:	3b9aca00 	.word	0x3b9aca00
 8002340:	3b9aca00 	.word	0x3b9aca00
 8002344:	00000000 	.word	0x00000000

08002348 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800234c:	b08e      	sub	sp, #56	@ 0x38
 800234e:	af00      	add	r7, sp, #0
 8002350:	6278      	str	r0, [r7, #36]	@ 0x24
 8002352:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002354:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002358:	2300      	movs	r3, #0
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800236a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800236e:	4618      	mov	r0, r3
 8002370:	f00d fdfa 	bl	800ff68 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002376:	17da      	asrs	r2, r3, #31
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	61fa      	str	r2, [r7, #28]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	69b9      	ldr	r1, [r7, #24]
 8002386:	000b      	movs	r3, r1
 8002388:	2200      	movs	r2, #0
 800238a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800238e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002390:	2200      	movs	r2, #0
 8002392:	461c      	mov	r4, r3
 8002394:	4615      	mov	r5, r2
 8002396:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800239a:	1911      	adds	r1, r2, r4
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	416b      	adcs	r3, r5
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023a6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80023aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	f04f 0400 	mov.w	r4, #0
 80023b6:	f04f 0500 	mov.w	r5, #0
 80023ba:	015d      	lsls	r5, r3, #5
 80023bc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80023c0:	0154      	lsls	r4, r2, #5
 80023c2:	4622      	mov	r2, r4
 80023c4:	462b      	mov	r3, r5
 80023c6:	ebb2 0800 	subs.w	r8, r2, r0
 80023ca:	eb63 0901 	sbc.w	r9, r3, r1
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80023da:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80023de:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80023e2:	4690      	mov	r8, r2
 80023e4:	4699      	mov	r9, r3
 80023e6:	eb18 0a00 	adds.w	sl, r8, r0
 80023ea:	eb49 0b01 	adc.w	fp, r9, r1
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023fa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023fe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002402:	ebb2 040a 	subs.w	r4, r2, sl
 8002406:	603c      	str	r4, [r7, #0]
 8002408:	eb63 030b 	sbc.w	r3, r3, fp
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002412:	4623      	mov	r3, r4
 8002414:	181b      	adds	r3, r3, r0
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	462b      	mov	r3, r5
 800241a:	eb41 0303 	adc.w	r3, r1, r3
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	6a3a      	ldr	r2, [r7, #32]
 8002422:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002426:	f7ff ff3f 	bl	80022a8 <UTILS_NanosecondsToTimespec>

    return 0;
 800242a:	2300      	movs	r3, #0
 800242c:	4618      	mov	r0, r3
 800242e:	3738      	adds	r7, #56	@ 0x38
 8002430:	46bd      	mov	sp, r7
 8002432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_MspInit+0x38>)
 8002440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002444:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <HAL_MspInit+0x38>)
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800244e:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_MspInit+0x38>)
 8002450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	210f      	movs	r1, #15
 8002460:	f06f 0001 	mvn.w	r0, #1
 8002464:	f002 fbea 	bl	8004c3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58024400 	.word	0x58024400

08002474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b090      	sub	sp, #64	@ 0x40
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	d827      	bhi.n	80024d2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002482:	2200      	movs	r2, #0
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	2036      	movs	r0, #54	@ 0x36
 8002488:	f002 fbd8 	bl	8004c3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800248c:	2036      	movs	r0, #54	@ 0x36
 800248e:	f002 fbef 	bl	8004c70 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002492:	4a29      	ldr	r2, [pc, #164]	@ (8002538 <HAL_InitTick+0xc4>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_InitTick+0xc8>)
 800249a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800249e:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_InitTick+0xc8>)
 80024a0:	f043 0310 	orr.w	r3, r3, #16
 80024a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024a8:	4b24      	ldr	r3, [pc, #144]	@ (800253c <HAL_InitTick+0xc8>)
 80024aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024b6:	f107 0210 	add.w	r2, r7, #16
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f006 fc2f 	bl	8008d24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_InitTick+0x6a>
 80024d0:	e001      	b.n	80024d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e02b      	b.n	800252e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024d6:	f006 fbf9 	bl	8008ccc <HAL_RCC_GetPCLK1Freq>
 80024da:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80024dc:	e004      	b.n	80024e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024de:	f006 fbf5 	bl	8008ccc <HAL_RCC_GetPCLK1Freq>
 80024e2:	4603      	mov	r3, r0
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ea:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <HAL_InitTick+0xcc>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	0c9b      	lsrs	r3, r3, #18
 80024f2:	3b01      	subs	r3, #1
 80024f4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024f6:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <HAL_InitTick+0xd0>)
 80024f8:	4a13      	ldr	r2, [pc, #76]	@ (8002548 <HAL_InitTick+0xd4>)
 80024fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_InitTick+0xd0>)
 80024fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002502:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002504:	4a0f      	ldr	r2, [pc, #60]	@ (8002544 <HAL_InitTick+0xd0>)
 8002506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002508:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800250a:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_InitTick+0xd0>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <HAL_InitTick+0xd0>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002516:	480b      	ldr	r0, [pc, #44]	@ (8002544 <HAL_InitTick+0xd0>)
 8002518:	f009 f944 	bl	800b7a4 <HAL_TIM_Base_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d104      	bne.n	800252c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002522:	4808      	ldr	r0, [pc, #32]	@ (8002544 <HAL_InitTick+0xd0>)
 8002524:	f009 f9a0 	bl	800b868 <HAL_TIM_Base_Start_IT>
 8002528:	4603      	mov	r3, r0
 800252a:	e000      	b.n	800252e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	3740      	adds	r7, #64	@ 0x40
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2400000c 	.word	0x2400000c
 800253c:	58024400 	.word	0x58024400
 8002540:	431bde83 	.word	0x431bde83
 8002544:	24032b5c 	.word	0x24032b5c
 8002548:	40001000 	.word	0x40001000

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <NMI_Handler+0x4>

08002554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <MemManage_Handler+0x4>

08002564 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <UsageFault_Handler+0x4>

08002574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002588:	4802      	ldr	r0, [pc, #8]	@ (8002594 <DMA1_Stream0_IRQHandler+0x10>)
 800258a:	f003 fea9 	bl	80062e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	24032dc8 	.word	0x24032dc8

08002598 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800259c:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <DMA1_Stream1_IRQHandler+0x10>)
 800259e:	f003 fe9f 	bl	80062e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	24032e40 	.word	0x24032e40

080025ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <USART2_IRQHandler+0x10>)
 80025b2:	f009 fd77 	bl	800c0a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	24032bb0 	.word	0x24032bb0

080025c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <USART3_IRQHandler+0x10>)
 80025c6:	f009 fd6d 	bl	800c0a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	24032c44 	.word	0x24032c44

080025d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 80025d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025dc:	f005 fb67 	bl	8007cae <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <TIM6_DAC_IRQHandler+0x10>)
 80025ea:	f009 f9b5 	bl	800b958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	24032b5c 	.word	0x24032b5c

080025f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <DMA2_Stream1_IRQHandler+0x10>)
 80025fe:	f003 fe6f 	bl	80062e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	24032cd8 	.word	0x24032cd8

0800260c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <DMA2_Stream2_IRQHandler+0x10>)
 8002612:	f003 fe65 	bl	80062e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	24032d50 	.word	0x24032d50

08002620 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return 1;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <_kill>:

int _kill(int pid, int sig)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800263a:	f01f ffc7 	bl	80225cc <__errno>
 800263e:	4603      	mov	r3, r0
 8002640:	2216      	movs	r2, #22
 8002642:	601a      	str	r2, [r3, #0]
  return -1;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_exit>:

void _exit (int status)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002658:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ffe7 	bl	8002630 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002662:	bf00      	nop
 8002664:	e7fd      	b.n	8002662 <_exit+0x12>

08002666 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e00a      	b.n	800268e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002678:	f3af 8000 	nop.w
 800267c:	4601      	mov	r1, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	60ba      	str	r2, [r7, #8]
 8002684:	b2ca      	uxtb	r2, r1
 8002686:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3301      	adds	r3, #1
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	dbf0      	blt.n	8002678 <_read+0x12>
  }

  return len;
 8002696:	687b      	ldr	r3, [r7, #4]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e009      	b.n	80026c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	60ba      	str	r2, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dbf1      	blt.n	80026b2 <_write+0x12>
  }
  return len;
 80026ce:	687b      	ldr	r3, [r7, #4]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_close>:

int _close(int file)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002700:	605a      	str	r2, [r3, #4]
  return 0;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_isatty>:

int _isatty(int file)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002748:	4a14      	ldr	r2, [pc, #80]	@ (800279c <_sbrk+0x5c>)
 800274a:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <_sbrk+0x60>)
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002754:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <_sbrk+0x64>)
 800275e:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <_sbrk+0x68>)
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	d207      	bcs.n	8002780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002770:	f01f ff2c 	bl	80225cc <__errno>
 8002774:	4603      	mov	r3, r0
 8002776:	220c      	movs	r2, #12
 8002778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800277e:	e009      	b.n	8002794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	4a05      	ldr	r2, [pc, #20]	@ (80027a4 <_sbrk+0x64>)
 8002790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	24080000 	.word	0x24080000
 80027a0:	00000400 	.word	0x00000400
 80027a4:	24032bac 	.word	0x24032bac
 80027a8:	24069858 	.word	0x24069858

080027ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027b0:	4b37      	ldr	r3, [pc, #220]	@ (8002890 <SystemInit+0xe4>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b6:	4a36      	ldr	r2, [pc, #216]	@ (8002890 <SystemInit+0xe4>)
 80027b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027c0:	4b34      	ldr	r3, [pc, #208]	@ (8002894 <SystemInit+0xe8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d807      	bhi.n	80027dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <SystemInit+0xe8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 030f 	bic.w	r3, r3, #15
 80027d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002894 <SystemInit+0xe8>)
 80027d6:	f043 0307 	orr.w	r3, r3, #7
 80027da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002898 <SystemInit+0xec>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002898 <SystemInit+0xec>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002898 <SystemInit+0xec>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002898 <SystemInit+0xec>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4929      	ldr	r1, [pc, #164]	@ (8002898 <SystemInit+0xec>)
 80027f4:	4b29      	ldr	r3, [pc, #164]	@ (800289c <SystemInit+0xf0>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027fa:	4b26      	ldr	r3, [pc, #152]	@ (8002894 <SystemInit+0xe8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002806:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <SystemInit+0xe8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 030f 	bic.w	r3, r3, #15
 800280e:	4a21      	ldr	r2, [pc, #132]	@ (8002894 <SystemInit+0xe8>)
 8002810:	f043 0307 	orr.w	r3, r3, #7
 8002814:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <SystemInit+0xec>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <SystemInit+0xec>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <SystemInit+0xec>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <SystemInit+0xec>)
 800282a:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <SystemInit+0xf4>)
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800282e:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <SystemInit+0xec>)
 8002830:	4a1c      	ldr	r2, [pc, #112]	@ (80028a4 <SystemInit+0xf8>)
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002834:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <SystemInit+0xec>)
 8002836:	4a1c      	ldr	r2, [pc, #112]	@ (80028a8 <SystemInit+0xfc>)
 8002838:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800283a:	4b17      	ldr	r3, [pc, #92]	@ (8002898 <SystemInit+0xec>)
 800283c:	2200      	movs	r2, #0
 800283e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002840:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <SystemInit+0xec>)
 8002842:	4a19      	ldr	r2, [pc, #100]	@ (80028a8 <SystemInit+0xfc>)
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002846:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <SystemInit+0xec>)
 8002848:	2200      	movs	r2, #0
 800284a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <SystemInit+0xec>)
 800284e:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <SystemInit+0xfc>)
 8002850:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <SystemInit+0xec>)
 8002854:	2200      	movs	r2, #0
 8002856:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002858:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <SystemInit+0xec>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0e      	ldr	r2, [pc, #56]	@ (8002898 <SystemInit+0xec>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002862:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <SystemInit+0xec>)
 8002866:	2200      	movs	r2, #0
 8002868:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <SystemInit+0x100>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <SystemInit+0x104>)
 8002870:	4013      	ands	r3, r2
 8002872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002876:	d202      	bcs.n	800287e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002878:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <SystemInit+0x108>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <SystemInit+0x10c>)
 8002880:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002884:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00
 8002894:	52002000 	.word	0x52002000
 8002898:	58024400 	.word	0x58024400
 800289c:	eaf6ed7f 	.word	0xeaf6ed7f
 80028a0:	02020200 	.word	0x02020200
 80028a4:	01ff0000 	.word	0x01ff0000
 80028a8:	01010280 	.word	0x01010280
 80028ac:	5c001000 	.word	0x5c001000
 80028b0:	ffff0000 	.word	0xffff0000
 80028b4:	51008108 	.word	0x51008108
 80028b8:	52004000 	.word	0x52004000

080028bc <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void * argument)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b099      	sub	sp, #100	@ 0x64
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 80028c4:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 80028c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned int uiXMin = 1057;
 80028ca:	f240 4321 	movw	r3, #1057	@ 0x421
 80028ce:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMax = 65535;
 80028d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028d4:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiY0   = 33580;
 80028d6:	f248 332c 	movw	r3, #33580	@ 0x832c
 80028da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiYMin = 1062;
 80028dc:	f240 4326 	movw	r3, #1062	@ 0x426
 80028e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMax = 65535;
 80028e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028e6:	637b      	str	r3, [r7, #52]	@ 0x34

  // Return flags
  unsigned int uiFlags = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 80028ec:	2217      	movs	r2, #23
 80028ee:	4993      	ldr	r1, [pc, #588]	@ (8002b3c <StartTaskControle+0x280>)
 80028f0:	4893      	ldr	r0, [pc, #588]	@ (8002b40 <StartTaskControle+0x284>)
 80028f2:	f009 faf5 	bl	800bee0 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = AUTOWARE;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  
  uiFlags = osThreadFlagsGet();
 80028fc:	f00b fc62 	bl	800e1c4 <osThreadFlagsGet>
 8002900:	6338      	str	r0, [r7, #48]	@ 0x30
  uiFlags = osThreadFlagsWait(MICRO_ROS_AGENT_ONLINE_FLAG, osFlagsWaitAny, 1000 * 20); // Wait 20 seconds for uROS init
 8002902:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002906:	2100      	movs	r1, #0
 8002908:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800290c:	f00b fc7b 	bl	800e206 <osThreadFlagsWait>
 8002910:	6338      	str	r0, [r7, #48]	@ 0x30

  if(osFlagsErrorTimeout == uiFlags)
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	f113 0f02 	cmn.w	r3, #2
 8002918:	d102      	bne.n	8002920 <StartTaskControle+0x64>
  {
   ucControlMode = MANUAL;
 800291a:	2304      	movs	r3, #4
 800291c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  // Task loop
  for(;;)
  {

    // Looking fot operation mode change by Autoware -- START
	  uiFlags = osThreadFlagsGet();
 8002920:	f00b fc50 	bl	800e1c4 <osThreadFlagsGet>
 8002924:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	2011      	movs	r0, #17
 800292c:	f00b fc6b 	bl	800e206 <osThreadFlagsWait>
 8002930:	6338      	str	r0, [r7, #48]	@ 0x30

    if(TO_AUTOWARE_MODE_FLAG == uiFlags)
 8002932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002934:	2b01      	cmp	r3, #1
 8002936:	d103      	bne.n	8002940 <StartTaskControle+0x84>
    {
      ucControlMode = AUTOWARE;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800293e:	e00c      	b.n	800295a <StartTaskControle+0x9e>
    }
    else if(TO_MANUAL_MODE_FLAG == uiFlags)
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	2b10      	cmp	r3, #16
 8002944:	d103      	bne.n	800294e <StartTaskControle+0x92>
    {
      ucControlMode = MANUAL;
 8002946:	2304      	movs	r3, #4
 8002948:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800294c:	e005      	b.n	800295a <StartTaskControle+0x9e>
    }
    else if((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG) == uiFlags)
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	2b11      	cmp	r3, #17
 8002952:	d102      	bne.n	800295a <StartTaskControle+0x9e>
    {
      ucControlMode = MANUAL;
 8002954:	2304      	movs	r3, #4
 8002956:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    // Looking for operation mode change by Autoware -- END

    // Looking for operation mode change by JoySW -- START
    uiFlags = osThreadFlagsGet();
 800295a:	f00b fc33 	bl	800e1c4 <osThreadFlagsGet>
 800295e:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(JOYSW_FLAG, osFlagsWaitAll, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2101      	movs	r1, #1
 8002964:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002968:	f00b fc4d 	bl	800e206 <osThreadFlagsWait>
 800296c:	6338      	str	r0, [r7, #48]	@ 0x30

    if(JOYSW_FLAG == uiFlags)
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002974:	d11a      	bne.n	80029ac <StartTaskControle+0xf0>
    {
      if(AUTOWARE == ucControlMode)
 8002976:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800297a:	2b01      	cmp	r3, #1
 800297c:	d109      	bne.n	8002992 <StartTaskControle+0xd6>
      {
        ucControlMode = MANUAL;
 800297e:	2304      	movs	r3, #4
 8002980:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8002984:	4b6f      	ldr	r3, [pc, #444]	@ (8002b44 <StartTaskControle+0x288>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2110      	movs	r1, #16
 800298a:	4618      	mov	r0, r3
 800298c:	f00b fbcc 	bl	800e128 <osThreadFlagsSet>
 8002990:	e00c      	b.n	80029ac <StartTaskControle+0xf0>
      }
      else if(MANUAL == ucControlMode)
 8002992:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002996:	2b04      	cmp	r3, #4
 8002998:	d108      	bne.n	80029ac <StartTaskControle+0xf0>
      {
        ucControlMode = AUTOWARE;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 80029a0:	4b68      	ldr	r3, [pc, #416]	@ (8002b44 <StartTaskControle+0x288>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f00b fbbe 	bl	800e128 <osThreadFlagsSet>
      }
    }
    // Looking for operation mode change by JoySW -- END

    // Autonomous mode (AUTOWARE) routine -- START
    if(AUTOWARE == ucControlMode)
 80029ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d17b      	bne.n	8002aac <StartTaskControle+0x1f0>
    {
      // Setting driving mode lights
	    vDrivingModeLights(ucControlMode);
 80029b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fc91 	bl	80032e0 <vDrivingModeLights>

      // WAIT for flag to sync xControlAction update
  	  uiFlags = osThreadFlagsGet();
 80029be:	f00b fc01 	bl	800e1c4 <osThreadFlagsGet>
 80029c2:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 80029c4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029c8:	2101      	movs	r1, #1
 80029ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80029ce:	f00b fc1a 	bl	800e206 <osThreadFlagsWait>
 80029d2:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 80029d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d6:	f113 0f02 	cmn.w	r3, #2
 80029da:	d108      	bne.n	80029ee <StartTaskControle+0x132>
      {
        ucControlMode = MANUAL;
 80029dc:	2304      	movs	r3, #4
 80029de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 80029e2:	4b58      	ldr	r3, [pc, #352]	@ (8002b44 <StartTaskControle+0x288>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2110      	movs	r1, #16
 80029e8:	4618      	mov	r0, r3
 80029ea:	f00b fb9d 	bl	800e128 <osThreadFlagsSet>
      }

      if(DATA_UPDATED_FLAG == uiFlags)
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029f4:	d15a      	bne.n	8002aac <StartTaskControle+0x1f0>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 80029f6:	4b54      	ldr	r3, [pc, #336]	@ (8002b48 <StartTaskControle+0x28c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029fe:	4618      	mov	r0, r3
 8002a00:	f00b fd23 	bl	800e44a <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002a04:	4b51      	ldr	r3, [pc, #324]	@ (8002b4c <StartTaskControle+0x290>)
 8002a06:	f107 0208 	add.w	r2, r7, #8
 8002a0a:	9202      	str	r2, [sp, #8]
 8002a0c:	466c      	mov	r4, sp
 8002a0e:	f103 0210 	add.w	r2, r3, #16
 8002a12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a16:	e884 0003 	stmia.w	r4, {r0, r1}
 8002a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a1c:	f000 fbdc 	bl	80031d8 <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 8002a20:	4b49      	ldr	r3, [pc, #292]	@ (8002b48 <StartTaskControle+0x28c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00b fd5b 	bl	800e4e0 <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla));
 8002a2a:	f107 0308 	add.w	r3, r7, #8
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fc60 	bl	80002f4 <strlen>
 8002a34:	4603      	mov	r3, r0
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4840      	ldr	r0, [pc, #256]	@ (8002b40 <StartTaskControle+0x284>)
 8002a40:	f009 f9ce 	bl	800bde0 <HAL_UART_Transmit_DMA>

        // Wait CARLA full msg xVehicleStatusRx
        uiFlags = osThreadFlagsGet();
 8002a44:	f00b fbbe 	bl	800e1c4 <osThreadFlagsGet>
 8002a48:	6338      	str	r0, [r7, #48]	@ 0x30
        uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002a4a:	22c8      	movs	r2, #200	@ 0xc8
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002a52:	f00b fbd8 	bl	800e206 <osThreadFlagsWait>
 8002a56:	6338      	str	r0, [r7, #48]	@ 0x30

        // Timeout error
        if(osFlagsErrorTimeout == uiFlags)
 8002a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5a:	f113 0f02 	cmn.w	r3, #2
 8002a5e:	d102      	bne.n	8002a66 <StartTaskControle+0x1aa>
        {
          ucControlMode = EMERGENCY;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }

        osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002a66:	4b3a      	ldr	r3, [pc, #232]	@ (8002b50 <StartTaskControle+0x294>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f00b fceb 	bl	800e44a <osMutexAcquire>

        xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002a74:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <StartTaskControle+0x298>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a37      	ldr	r2, [pc, #220]	@ (8002b58 <StartTaskControle+0x29c>)
 8002a7a:	6153      	str	r3, [r2, #20]
        xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002a7c:	4b35      	ldr	r3, [pc, #212]	@ (8002b54 <StartTaskControle+0x298>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a35      	ldr	r2, [pc, #212]	@ (8002b58 <StartTaskControle+0x29c>)
 8002a82:	6193      	str	r3, [r2, #24]
        xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002a84:	4b33      	ldr	r3, [pc, #204]	@ (8002b54 <StartTaskControle+0x298>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a33      	ldr	r2, [pc, #204]	@ (8002b58 <StartTaskControle+0x29c>)
 8002a8a:	61d3      	str	r3, [r2, #28]
        xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002a8c:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <StartTaskControle+0x298>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a31      	ldr	r2, [pc, #196]	@ (8002b58 <StartTaskControle+0x29c>)
 8002a92:	6213      	str	r3, [r2, #32]

        osMutexRelease(MutexControlSignalHandle);
 8002a94:	4b2e      	ldr	r3, [pc, #184]	@ (8002b50 <StartTaskControle+0x294>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f00b fd21 	bl	800e4e0 <osMutexRelease>

        osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002a9e:	4b29      	ldr	r3, [pc, #164]	@ (8002b44 <StartTaskControle+0x288>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f00b fb3e 	bl	800e128 <osThreadFlagsSet>
    }
    // Autonomous mode (AUTOWARE) routine -- END


    // Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 8002aac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	f040 80b4 	bne.w	8002c1e <StartTaskControle+0x362>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002ab6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fc10 	bl	80032e0 <vDrivingModeLights>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 8002ac0:	4b26      	ldr	r3, [pc, #152]	@ (8002b5c <StartTaskControle+0x2a0>)
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ac8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002aca:	f000 fb51 	bl	8003170 <fGetJoyPostition>
 8002ace:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8002ad2:	4b22      	ldr	r3, [pc, #136]	@ (8002b5c <StartTaskControle+0x2a0>)
 8002ad4:	6858      	ldr	r0, [r3, #4]
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002adc:	f000 fb48 	bl	8003170 <fGetJoyPostition>
 8002ae0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      // Assembling xControlAction
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002ae4:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <StartTaskControle+0x28c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002aec:	4618      	mov	r0, r3
 8002aee:	f00b fcac 	bl	800e44a <osMutexAcquire>
      xControlAction.xSteeringAngle.fFloat = -fJoyXAxis*MAX_STEERING_ANGLE;
 8002af2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002af6:	eef1 7a67 	vneg.f32	s15, s15
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <StartTaskControle+0x290>)
 8002afc:	edc3 7a00 	vstr	s15, [r3]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002b00:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <StartTaskControle+0x290>)
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0.0;
 8002b08:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b14:	dd01      	ble.n	8002b1a <StartTaskControle+0x25e>
 8002b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b18:	e001      	b.n	8002b1e <StartTaskControle+0x262>
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b4c <StartTaskControle+0x290>)
 8002b20:	6093      	str	r3, [r2, #8]
      xControlAction.xAcceleration.fFloat = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0;
 8002b22:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2e:	d519      	bpl.n	8002b64 <StartTaskControle+0x2a8>
 8002b30:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b34:	eef1 7a67 	vneg.f32	s15, s15
 8002b38:	e016      	b.n	8002b68 <StartTaskControle+0x2ac>
 8002b3a:	bf00      	nop
 8002b3c:	24032b3c 	.word	0x24032b3c
 8002b40:	24032bb0 	.word	0x24032bb0
 8002b44:	24032ad4 	.word	0x24032ad4
 8002b48:	24032adc 	.word	0x24032adc
 8002b4c:	24032af0 	.word	0x24032af0
 8002b50:	24032ad8 	.word	0x24032ad8
 8002b54:	24032b2c 	.word	0x24032b2c
 8002b58:	24032b08 	.word	0x24032b08
 8002b5c:	24032ae4 	.word	0x24032ae4
 8002b60:	00000000 	.word	0x00000000
 8002b64:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8002b60 <StartTaskControle+0x2a4>
 8002b68:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002b6a:	edc3 7a03 	vstr	s15, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = MANUAL;
 8002b76:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002b78:	2204      	movs	r2, #4
 8002b7a:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002b7c:	4b49      	ldr	r3, [pc, #292]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002b7e:	f107 0208 	add.w	r2, r7, #8
 8002b82:	9202      	str	r2, [sp, #8]
 8002b84:	466c      	mov	r4, sp
 8002b86:	f103 0210 	add.w	r2, r3, #16
 8002b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b94:	f000 fb20 	bl	80031d8 <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 8002b98:	4b43      	ldr	r3, [pc, #268]	@ (8002ca8 <StartTaskControle+0x3ec>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00b fc9f 	bl	800e4e0 <osMutexRelease>

      // Send cTxMsgToCarla to CARLA
      HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	221e      	movs	r2, #30
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4840      	ldr	r0, [pc, #256]	@ (8002cac <StartTaskControle+0x3f0>)
 8002bac:	f009 f918 	bl	800bde0 <HAL_UART_Transmit_DMA>

      // Wait CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 8002bb0:	f00b fb08 	bl	800e1c4 <osThreadFlagsGet>
 8002bb4:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002bb6:	22c8      	movs	r2, #200	@ 0xc8
 8002bb8:	2101      	movs	r1, #1
 8002bba:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002bbe:	f00b fb22 	bl	800e206 <osThreadFlagsWait>
 8002bc2:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	f113 0f02 	cmn.w	r3, #2
 8002bca:	d102      	bne.n	8002bd2 <StartTaskControle+0x316>
      {
        ucControlMode = EMERGENCY;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      }

      // Assembling xControlSignal
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002bd2:	4b37      	ldr	r3, [pc, #220]	@ (8002cb0 <StartTaskControle+0x3f4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f00b fc35 	bl	800e44a <osMutexAcquire>

      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002be0:	4b34      	ldr	r3, [pc, #208]	@ (8002cb4 <StartTaskControle+0x3f8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a34      	ldr	r2, [pc, #208]	@ (8002cb8 <StartTaskControle+0x3fc>)
 8002be6:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002be8:	4b32      	ldr	r3, [pc, #200]	@ (8002cb4 <StartTaskControle+0x3f8>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a32      	ldr	r2, [pc, #200]	@ (8002cb8 <StartTaskControle+0x3fc>)
 8002bee:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002bf0:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <StartTaskControle+0x3f8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4a30      	ldr	r2, [pc, #192]	@ (8002cb8 <StartTaskControle+0x3fc>)
 8002bf6:	61d3      	str	r3, [r2, #28]
      xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb4 <StartTaskControle+0x3f8>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8002cb8 <StartTaskControle+0x3fc>)
 8002bfe:	6213      	str	r3, [r2, #32]

      osMutexRelease(MutexControlSignalHandle);
 8002c00:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb0 <StartTaskControle+0x3f4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f00b fc6b 	bl	800e4e0 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <StartTaskControle+0x400>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c12:	4618      	mov	r0, r3
 8002c14:	f00b fa88 	bl	800e128 <osThreadFlagsSet>

      // WAIT
      osDelay(MANUAL_CONTROL_TIME_COMMAND);
 8002c18:	20c8      	movs	r0, #200	@ 0xc8
 8002c1a:	f00b fb75 	bl	800e308 <osDelay>
    }
    // Manual mode (MANUAL) routine -- END

    // Emergency mode (EMERGENCY) routine -- START
    if(EMERGENCY == ucControlMode)
 8002c1e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f47f ae7c 	bne.w	8002920 <StartTaskControle+0x64>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002c28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fb57 	bl	80032e0 <vDrivingModeLights>
    
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002c32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <StartTaskControle+0x3ec>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f00b fc05 	bl	800e44a <osMutexAcquire>

      xControlAction.xSteeringAngle.fFloat = 0;
 8002c40:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002c48:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = 0;
 8002c50:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
      xControlAction.xAcceleration.fFloat = 0;
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	60da      	str	r2, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002c60:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = EMERGENCY;
 8002c68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca4 <StartTaskControle+0x3e8>)
 8002c70:	f107 0208 	add.w	r2, r7, #8
 8002c74:	9202      	str	r2, [sp, #8]
 8002c76:	466c      	mov	r4, sp
 8002c78:	f103 0210 	add.w	r2, r3, #16
 8002c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c80:	e884 0003 	stmia.w	r4, {r0, r1}
 8002c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c86:	f000 faa7 	bl	80031d8 <vGetStringFromControlAction>

      // Try to stop the car whatever it takes
      while(1)
      {

        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	221e      	movs	r2, #30
 8002c90:	4619      	mov	r1, r3
 8002c92:	4806      	ldr	r0, [pc, #24]	@ (8002cac <StartTaskControle+0x3f0>)
 8002c94:	f009 f8a4 	bl	800bde0 <HAL_UART_Transmit_DMA>

        HAL_Delay(MANUAL_CONTROL_TIME_COMMAND);
 8002c98:	20c8      	movs	r0, #200	@ 0xc8
 8002c9a:	f000 fbf1 	bl	8003480 <HAL_Delay>
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002c9e:	bf00      	nop
 8002ca0:	e7f3      	b.n	8002c8a <StartTaskControle+0x3ce>
 8002ca2:	bf00      	nop
 8002ca4:	24032af0 	.word	0x24032af0
 8002ca8:	24032adc 	.word	0x24032adc
 8002cac:	24032bb0 	.word	0x24032bb0
 8002cb0:	24032ad8 	.word	0x24032ad8
 8002cb4:	24032b2c 	.word	0x24032b2c
 8002cb8:	24032b08 	.word	0x24032b08
 8002cbc:	24032ad4 	.word	0x24032ad4

08002cc0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc4:	4b22      	ldr	r3, [pc, #136]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002cc6:	4a23      	ldr	r2, [pc, #140]	@ (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002cca:	4b21      	ldr	r3, [pc, #132]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002ccc:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cde:	4b1c      	ldr	r3, [pc, #112]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cea:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf0:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf6:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cfc:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d02:	4b13      	ldr	r3, [pc, #76]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d08:	4811      	ldr	r0, [pc, #68]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002d0a:	f009 f819 	bl	800bd40 <HAL_UART_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d14:	f7fe ff2e 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	480d      	ldr	r0, [pc, #52]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002d1c:	f00b f804 	bl	800dd28 <HAL_UARTEx_SetTxFifoThreshold>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d26:	f7fe ff25 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4808      	ldr	r0, [pc, #32]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002d2e:	f00b f839 	bl	800dda4 <HAL_UARTEx_SetRxFifoThreshold>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d38:	f7fe ff1c 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d3c:	4804      	ldr	r0, [pc, #16]	@ (8002d50 <MX_USART2_UART_Init+0x90>)
 8002d3e:	f00a ffba 	bl	800dcb6 <HAL_UARTEx_DisableFifoMode>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d48:	f7fe ff14 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	24032bb0 	.word	0x24032bb0
 8002d54:	40004400 	.word	0x40004400

08002d58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d5c:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d5e:	4a23      	ldr	r2, [pc, #140]	@ (8002dec <MX_USART3_UART_Init+0x94>)
 8002d60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002d62:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d64:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002d68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d70:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d76:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d7e:	220c      	movs	r2, #12
 8002d80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d82:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d88:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d9a:	4b13      	ldr	r3, [pc, #76]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002da0:	4811      	ldr	r0, [pc, #68]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002da2:	f008 ffcd 	bl	800bd40 <HAL_UART_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002dac:	f7fe fee2 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db0:	2100      	movs	r1, #0
 8002db2:	480d      	ldr	r0, [pc, #52]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002db4:	f00a ffb8 	bl	800dd28 <HAL_UARTEx_SetTxFifoThreshold>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002dbe:	f7fe fed9 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4808      	ldr	r0, [pc, #32]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002dc6:	f00a ffed 	bl	800dda4 <HAL_UARTEx_SetRxFifoThreshold>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002dd0:	f7fe fed0 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002dd4:	4804      	ldr	r0, [pc, #16]	@ (8002de8 <MX_USART3_UART_Init+0x90>)
 8002dd6:	f00a ff6e 	bl	800dcb6 <HAL_UARTEx_DisableFifoMode>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002de0:	f7fe fec8 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	24032c44 	.word	0x24032c44
 8002dec:	40004800 	.word	0x40004800

08002df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b0be      	sub	sp, #248	@ 0xf8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e08:	f107 0320 	add.w	r3, r7, #32
 8002e0c:	22c0      	movs	r2, #192	@ 0xc0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f01f faf1 	bl	80223f8 <memset>
  if(uartHandle->Instance==USART2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8002fc4 <HAL_UART_MspInit+0x1d4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	f040 80e1 	bne.w	8002fe4 <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e22:	f04f 0202 	mov.w	r2, #2
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e34:	f107 0320 	add.w	r3, r7, #32
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f005 ffb5 	bl	8008da8 <HAL_RCCEx_PeriphCLKConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002e44:	f7fe fe96 	bl	8001b74 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e48:	4b5f      	ldr	r3, [pc, #380]	@ (8002fc8 <HAL_UART_MspInit+0x1d8>)
 8002e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8002fc8 <HAL_UART_MspInit+0x1d8>)
 8002e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e58:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc8 <HAL_UART_MspInit+0x1d8>)
 8002e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e66:	4b58      	ldr	r3, [pc, #352]	@ (8002fc8 <HAL_UART_MspInit+0x1d8>)
 8002e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e6c:	4a56      	ldr	r2, [pc, #344]	@ (8002fc8 <HAL_UART_MspInit+0x1d8>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e76:	4b54      	ldr	r3, [pc, #336]	@ (8002fc8 <HAL_UART_MspInit+0x1d8>)
 8002e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e84:	4b50      	ldr	r3, [pc, #320]	@ (8002fc8 <HAL_UART_MspInit+0x1d8>)
 8002e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e8a:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc8 <HAL_UART_MspInit+0x1d8>)
 8002e8c:	f043 0308 	orr.w	r3, r3, #8
 8002e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e94:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc8 <HAL_UART_MspInit+0x1d8>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eba:	2307      	movs	r3, #7
 8002ebc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4841      	ldr	r0, [pc, #260]	@ (8002fcc <HAL_UART_MspInit+0x1dc>)
 8002ec8:	f004 fd28 	bl	800791c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ee4:	2307      	movs	r3, #7
 8002ee6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4837      	ldr	r0, [pc, #220]	@ (8002fd0 <HAL_UART_MspInit+0x1e0>)
 8002ef2:	f004 fd13 	bl	800791c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8002ef6:	4b37      	ldr	r3, [pc, #220]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002ef8:	4a37      	ldr	r2, [pc, #220]	@ (8002fd8 <HAL_UART_MspInit+0x1e8>)
 8002efa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002efc:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002efe:	222b      	movs	r2, #43	@ 0x2b
 8002f00:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f02:	4b34      	ldr	r3, [pc, #208]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f08:	4b32      	ldr	r3, [pc, #200]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	4b31      	ldr	r3, [pc, #196]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f16:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f22:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f28:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f2e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f30:	4b28      	ldr	r3, [pc, #160]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f36:	4827      	ldr	r0, [pc, #156]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f38:	f001 fea8 	bl	8004c8c <HAL_DMA_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8002f42:	f7fe fe17 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a22      	ldr	r2, [pc, #136]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002f4e:	4a21      	ldr	r2, [pc, #132]	@ (8002fd4 <HAL_UART_MspInit+0x1e4>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8002f54:	4b21      	ldr	r3, [pc, #132]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f56:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <HAL_UART_MspInit+0x1f0>)
 8002f58:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f5c:	222c      	movs	r2, #44	@ 0x2c
 8002f5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f60:	4b1e      	ldr	r3, [pc, #120]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f62:	2240      	movs	r2, #64	@ 0x40
 8002f64:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f66:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f72:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f74:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f7a:	4b18      	ldr	r3, [pc, #96]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f80:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f88:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f8c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f8e:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f94:	4811      	ldr	r0, [pc, #68]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002f96:	f001 fe79 	bl	8004c8c <HAL_DMA_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8002fa0:	f7fe fde8 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002fa8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002faa:	4a0c      	ldr	r2, [pc, #48]	@ (8002fdc <HAL_UART_MspInit+0x1ec>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2105      	movs	r1, #5
 8002fb4:	2026      	movs	r0, #38	@ 0x26
 8002fb6:	f001 fe41 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fba:	2026      	movs	r0, #38	@ 0x26
 8002fbc:	f001 fe58 	bl	8004c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002fc0:	e0c3      	b.n	800314a <HAL_UART_MspInit+0x35a>
 8002fc2:	bf00      	nop
 8002fc4:	40004400 	.word	0x40004400
 8002fc8:	58024400 	.word	0x58024400
 8002fcc:	58020000 	.word	0x58020000
 8002fd0:	58020c00 	.word	0x58020c00
 8002fd4:	24032cd8 	.word	0x24032cd8
 8002fd8:	40020428 	.word	0x40020428
 8002fdc:	24032d50 	.word	0x24032d50
 8002fe0:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8003154 <HAL_UART_MspInit+0x364>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	f040 80ad 	bne.w	800314a <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ff0:	f04f 0202 	mov.w	r2, #2
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003002:	f107 0320 	add.w	r3, r7, #32
 8003006:	4618      	mov	r0, r3
 8003008:	f005 fece 	bl	8008da8 <HAL_RCCEx_PeriphCLKConfig>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003012:	f7fe fdaf 	bl	8001b74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003016:	4b50      	ldr	r3, [pc, #320]	@ (8003158 <HAL_UART_MspInit+0x368>)
 8003018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800301c:	4a4e      	ldr	r2, [pc, #312]	@ (8003158 <HAL_UART_MspInit+0x368>)
 800301e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003022:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003026:	4b4c      	ldr	r3, [pc, #304]	@ (8003158 <HAL_UART_MspInit+0x368>)
 8003028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800302c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003034:	4b48      	ldr	r3, [pc, #288]	@ (8003158 <HAL_UART_MspInit+0x368>)
 8003036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800303a:	4a47      	ldr	r2, [pc, #284]	@ (8003158 <HAL_UART_MspInit+0x368>)
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003044:	4b44      	ldr	r3, [pc, #272]	@ (8003158 <HAL_UART_MspInit+0x368>)
 8003046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003052:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800306c:	2307      	movs	r3, #7
 800306e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003072:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003076:	4619      	mov	r1, r3
 8003078:	4838      	ldr	r0, [pc, #224]	@ (800315c <HAL_UART_MspInit+0x36c>)
 800307a:	f004 fc4f 	bl	800791c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800307e:	4b38      	ldr	r3, [pc, #224]	@ (8003160 <HAL_UART_MspInit+0x370>)
 8003080:	4a38      	ldr	r2, [pc, #224]	@ (8003164 <HAL_UART_MspInit+0x374>)
 8003082:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003084:	4b36      	ldr	r3, [pc, #216]	@ (8003160 <HAL_UART_MspInit+0x370>)
 8003086:	222d      	movs	r2, #45	@ 0x2d
 8003088:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800308a:	4b35      	ldr	r3, [pc, #212]	@ (8003160 <HAL_UART_MspInit+0x370>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003090:	4b33      	ldr	r3, [pc, #204]	@ (8003160 <HAL_UART_MspInit+0x370>)
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003096:	4b32      	ldr	r3, [pc, #200]	@ (8003160 <HAL_UART_MspInit+0x370>)
 8003098:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800309c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800309e:	4b30      	ldr	r3, [pc, #192]	@ (8003160 <HAL_UART_MspInit+0x370>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003160 <HAL_UART_MspInit+0x370>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80030aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003160 <HAL_UART_MspInit+0x370>)
 80030ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030b0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80030b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003160 <HAL_UART_MspInit+0x370>)
 80030b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80030b8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ba:	4b29      	ldr	r3, [pc, #164]	@ (8003160 <HAL_UART_MspInit+0x370>)
 80030bc:	2200      	movs	r2, #0
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80030c0:	4827      	ldr	r0, [pc, #156]	@ (8003160 <HAL_UART_MspInit+0x370>)
 80030c2:	f001 fde3 	bl	8004c8c <HAL_DMA_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 80030cc:	f7fe fd52 	bl	8001b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a23      	ldr	r2, [pc, #140]	@ (8003160 <HAL_UART_MspInit+0x370>)
 80030d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80030d8:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_UART_MspInit+0x370>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80030de:	4b22      	ldr	r3, [pc, #136]	@ (8003168 <HAL_UART_MspInit+0x378>)
 80030e0:	4a22      	ldr	r2, [pc, #136]	@ (800316c <HAL_UART_MspInit+0x37c>)
 80030e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80030e4:	4b20      	ldr	r3, [pc, #128]	@ (8003168 <HAL_UART_MspInit+0x378>)
 80030e6:	222e      	movs	r2, #46	@ 0x2e
 80030e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <HAL_UART_MspInit+0x378>)
 80030ec:	2240      	movs	r2, #64	@ 0x40
 80030ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <HAL_UART_MspInit+0x378>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <HAL_UART_MspInit+0x378>)
 80030f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003168 <HAL_UART_MspInit+0x378>)
 8003100:	2200      	movs	r2, #0
 8003102:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003104:	4b18      	ldr	r3, [pc, #96]	@ (8003168 <HAL_UART_MspInit+0x378>)
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800310a:	4b17      	ldr	r3, [pc, #92]	@ (8003168 <HAL_UART_MspInit+0x378>)
 800310c:	2200      	movs	r2, #0
 800310e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003110:	4b15      	ldr	r3, [pc, #84]	@ (8003168 <HAL_UART_MspInit+0x378>)
 8003112:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003116:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003118:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <HAL_UART_MspInit+0x378>)
 800311a:	2200      	movs	r2, #0
 800311c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800311e:	4812      	ldr	r0, [pc, #72]	@ (8003168 <HAL_UART_MspInit+0x378>)
 8003120:	f001 fdb4 	bl	8004c8c <HAL_DMA_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_UART_MspInit+0x33e>
      Error_Handler();
 800312a:	f7fe fd23 	bl	8001b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <HAL_UART_MspInit+0x378>)
 8003132:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003134:	4a0c      	ldr	r2, [pc, #48]	@ (8003168 <HAL_UART_MspInit+0x378>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	2108      	movs	r1, #8
 800313e:	2027      	movs	r0, #39	@ 0x27
 8003140:	f001 fd7c 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003144:	2027      	movs	r0, #39	@ 0x27
 8003146:	f001 fd93 	bl	8004c70 <HAL_NVIC_EnableIRQ>
}
 800314a:	bf00      	nop
 800314c:	37f8      	adds	r7, #248	@ 0xf8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40004800 	.word	0x40004800
 8003158:	58024400 	.word	0x58024400
 800315c:	58020c00 	.word	0x58020c00
 8003160:	24032dc8 	.word	0x24032dc8
 8003164:	40020010 	.word	0x40020010
 8003168:	24032e40 	.word	0x24032e40
 800316c:	40020028 	.word	0x40020028

08003170 <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
  return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0))/((float)(uiRefMax - uiRef0)) : ((int)(uiValue - uiRef0))/((float)(uiRef0 - uiRefMin));
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	dd10      	ble.n	80031aa <fGetJoyPostition+0x3a>
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a8:	e00f      	b.n	80031ca <fGetJoyPostition+0x5a>
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80031ca:	eeb0 0a67 	vmov.f32	s0, s15
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 80031d8:	b084      	sub	sp, #16
 80031da:	b490      	push	{r4, r7}
 80031dc:	af00      	add	r7, sp, #0
 80031de:	f107 0408 	add.w	r4, r7, #8
 80031e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ucTxMsg[0]  = (unsigned char)'#';
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	2223      	movs	r2, #35	@ 0x23
 80031ea:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'S';
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	3301      	adds	r3, #1
 80031f0:	2253      	movs	r2, #83	@ 0x53
 80031f2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xControlActionTx.xSteeringAngle.ucBytes[0];
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	3302      	adds	r3, #2
 80031f8:	7a3a      	ldrb	r2, [r7, #8]
 80031fa:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xControlActionTx.xSteeringAngle.ucBytes[1];
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	3303      	adds	r3, #3
 8003200:	7a7a      	ldrb	r2, [r7, #9]
 8003202:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xControlActionTx.xSteeringAngle.ucBytes[2];
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	3304      	adds	r3, #4
 8003208:	7aba      	ldrb	r2, [r7, #10]
 800320a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xControlActionTx.xSteeringAngle.ucBytes[3];
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	3305      	adds	r3, #5
 8003210:	7afa      	ldrb	r2, [r7, #11]
 8003212:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'W';
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	3306      	adds	r3, #6
 8003218:	2257      	movs	r2, #87	@ 0x57
 800321a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xControlActionTx.xSteeringVelocity.ucBytes[0];
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	3307      	adds	r3, #7
 8003220:	7b3a      	ldrb	r2, [r7, #12]
 8003222:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xControlActionTx.xSteeringVelocity.ucBytes[1];
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	3308      	adds	r3, #8
 8003228:	7b7a      	ldrb	r2, [r7, #13]
 800322a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xControlActionTx.xSteeringVelocity.ucBytes[2];
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	3309      	adds	r3, #9
 8003230:	7bba      	ldrb	r2, [r7, #14]
 8003232:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xControlActionTx.xSteeringVelocity.ucBytes[3];
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	330a      	adds	r3, #10
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'V';
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	330b      	adds	r3, #11
 8003240:	2256      	movs	r2, #86	@ 0x56
 8003242:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xControlActionTx.xSpeed.ucBytes[0];
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	330c      	adds	r3, #12
 8003248:	7c3a      	ldrb	r2, [r7, #16]
 800324a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xControlActionTx.xSpeed.ucBytes[1];
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	330d      	adds	r3, #13
 8003250:	7c7a      	ldrb	r2, [r7, #17]
 8003252:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xControlActionTx.xSpeed.ucBytes[2];
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	330e      	adds	r3, #14
 8003258:	7cba      	ldrb	r2, [r7, #18]
 800325a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xControlActionTx.xSpeed.ucBytes[3];
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	330f      	adds	r3, #15
 8003260:	7cfa      	ldrb	r2, [r7, #19]
 8003262:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'A';
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	3310      	adds	r3, #16
 8003268:	2241      	movs	r2, #65	@ 0x41
 800326a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.xAcceleration.ucBytes[0];
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	3311      	adds	r3, #17
 8003270:	7d3a      	ldrb	r2, [r7, #20]
 8003272:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = xControlActionTx.xAcceleration.ucBytes[1];
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	3312      	adds	r3, #18
 8003278:	7d7a      	ldrb	r2, [r7, #21]
 800327a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.xAcceleration.ucBytes[2];
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	3313      	adds	r3, #19
 8003280:	7dba      	ldrb	r2, [r7, #22]
 8003282:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = xControlActionTx.xAcceleration.ucBytes[3];
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	3314      	adds	r3, #20
 8003288:	7dfa      	ldrb	r2, [r7, #23]
 800328a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = (unsigned char)'J';
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	3315      	adds	r3, #21
 8003290:	224a      	movs	r2, #74	@ 0x4a
 8003292:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = xControlActionTx.xJerk.ucBytes[0];
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	3316      	adds	r3, #22
 8003298:	7e3a      	ldrb	r2, [r7, #24]
 800329a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.xJerk.ucBytes[1];
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	3317      	adds	r3, #23
 80032a0:	7e7a      	ldrb	r2, [r7, #25]
 80032a2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = xControlActionTx.xJerk.ucBytes[2];
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	3318      	adds	r3, #24
 80032a8:	7eba      	ldrb	r2, [r7, #26]
 80032aa:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = xControlActionTx.xJerk.ucBytes[3];
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	3319      	adds	r3, #25
 80032b0:	7efa      	ldrb	r2, [r7, #27]
 80032b2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[26] = (unsigned char)'M';
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	331a      	adds	r3, #26
 80032b8:	224d      	movs	r2, #77	@ 0x4d
 80032ba:	701a      	strb	r2, [r3, #0]
  ucTxMsg[27] = xControlActionTx.ucControlMode;
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	331b      	adds	r3, #27
 80032c0:	7f3a      	ldrb	r2, [r7, #28]
 80032c2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[28] = (unsigned char)'$';
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	331c      	adds	r3, #28
 80032c8:	2224      	movs	r2, #36	@ 0x24
 80032ca:	701a      	strb	r2, [r3, #0]
  ucTxMsg[29] = (unsigned char)'\0';
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	331d      	adds	r3, #29
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc90      	pop	{r4, r7}
 80032da:	b004      	add	sp, #16
 80032dc:	4770      	bx	lr
	...

080032e0 <vDrivingModeLights>:
  * @brief  Update driving mode signaling lights
  * @param  ucDrivingMode:  Driving mode
  * @retval None
  */
void vDrivingModeLights(unsigned char ucDrivingMode)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
  switch (ucDrivingMode)
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d016      	beq.n	800331e <vDrivingModeLights+0x3e>
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	dc36      	bgt.n	8003362 <vDrivingModeLights+0x82>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d023      	beq.n	8003340 <vDrivingModeLights+0x60>
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d132      	bne.n	8003362 <vDrivingModeLights+0x82>
  {
    case AUTOWARE:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Green LED
 80032fc:	2200      	movs	r2, #0
 80032fe:	2101      	movs	r1, #1
 8003300:	481a      	ldr	r0, [pc, #104]	@ (800336c <vDrivingModeLights+0x8c>)
 8003302:	f004 fcbb 	bl	8007c7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1); // Ambar LED
 8003306:	2201      	movs	r2, #1
 8003308:	2102      	movs	r1, #2
 800330a:	4819      	ldr	r0, [pc, #100]	@ (8003370 <vDrivingModeLights+0x90>)
 800330c:	f004 fcb6 	bl	8007c7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8003310:	2200      	movs	r2, #0
 8003312:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003316:	4815      	ldr	r0, [pc, #84]	@ (800336c <vDrivingModeLights+0x8c>)
 8003318:	f004 fcb0 	bl	8007c7c <HAL_GPIO_WritePin>
      break;
 800331c:	e022      	b.n	8003364 <vDrivingModeLights+0x84>

    case MANUAL:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 1); // Green LED
 800331e:	2201      	movs	r2, #1
 8003320:	2101      	movs	r1, #1
 8003322:	4812      	ldr	r0, [pc, #72]	@ (800336c <vDrivingModeLights+0x8c>)
 8003324:	f004 fcaa 	bl	8007c7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Ambar LED
 8003328:	2200      	movs	r2, #0
 800332a:	2102      	movs	r1, #2
 800332c:	4810      	ldr	r0, [pc, #64]	@ (8003370 <vDrivingModeLights+0x90>)
 800332e:	f004 fca5 	bl	8007c7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8003332:	2200      	movs	r2, #0
 8003334:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003338:	480c      	ldr	r0, [pc, #48]	@ (800336c <vDrivingModeLights+0x8c>)
 800333a:	f004 fc9f 	bl	8007c7c <HAL_GPIO_WritePin>
      break;
 800333e:	e011      	b.n	8003364 <vDrivingModeLights+0x84>

    case EMERGENCY:
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Green LED
 8003340:	2200      	movs	r2, #0
 8003342:	2102      	movs	r1, #2
 8003344:	480a      	ldr	r0, [pc, #40]	@ (8003370 <vDrivingModeLights+0x90>)
 8003346:	f004 fc99 	bl	8007c7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Ambar LED
 800334a:	2200      	movs	r2, #0
 800334c:	2101      	movs	r1, #1
 800334e:	4807      	ldr	r0, [pc, #28]	@ (800336c <vDrivingModeLights+0x8c>)
 8003350:	f004 fc94 	bl	8007c7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1); // Red LED
 8003354:	2201      	movs	r2, #1
 8003356:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800335a:	4804      	ldr	r0, [pc, #16]	@ (800336c <vDrivingModeLights+0x8c>)
 800335c:	f004 fc8e 	bl	8007c7c <HAL_GPIO_WritePin>
      break;
 8003360:	e000      	b.n	8003364 <vDrivingModeLights+0x84>

    default:
      break;
 8003362:	bf00      	nop
  }

}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	58020400 	.word	0x58020400
 8003370:	58021000 	.word	0x58021000

08003374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003374:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003378:	f7ff fa18 	bl	80027ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800337c:	480c      	ldr	r0, [pc, #48]	@ (80033b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800337e:	490d      	ldr	r1, [pc, #52]	@ (80033b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003380:	4a0d      	ldr	r2, [pc, #52]	@ (80033b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003384:	e002      	b.n	800338c <LoopCopyDataInit>

08003386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800338a:	3304      	adds	r3, #4

0800338c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800338c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800338e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003390:	d3f9      	bcc.n	8003386 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003392:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003394:	4c0a      	ldr	r4, [pc, #40]	@ (80033c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003398:	e001      	b.n	800339e <LoopFillZerobss>

0800339a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800339a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800339c:	3204      	adds	r2, #4

0800339e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800339e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a0:	d3fb      	bcc.n	800339a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033a2:	f01f f919 	bl	80225d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033a6:	f7fe f95b 	bl	8001660 <main>
  bx  lr
 80033aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80033b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80033b4:	24001474 	.word	0x24001474
  ldr r2, =_sidata
 80033b8:	08025cec 	.word	0x08025cec
  ldr r2, =_sbss
 80033bc:	24001478 	.word	0x24001478
  ldr r4, =_ebss
 80033c0:	24069858 	.word	0x24069858

080033c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033c4:	e7fe      	b.n	80033c4 <ADC3_IRQHandler>
	...

080033c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ce:	2003      	movs	r0, #3
 80033d0:	f001 fc29 	bl	8004c26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033d4:	f005 fad0 	bl	8008978 <HAL_RCC_GetSysClockFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <HAL_Init+0x68>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	4913      	ldr	r1, [pc, #76]	@ (8003434 <HAL_Init+0x6c>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <HAL_Init+0x68>)
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003434 <HAL_Init+0x6c>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	4a0b      	ldr	r2, [pc, #44]	@ (8003438 <HAL_Init+0x70>)
 800340a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800340c:	4a0b      	ldr	r2, [pc, #44]	@ (800343c <HAL_Init+0x74>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003412:	200f      	movs	r0, #15
 8003414:	f7ff f82e 	bl	8002474 <HAL_InitTick>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e002      	b.n	8003428 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003422:	f7ff f809 	bl	8002438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	58024400 	.word	0x58024400
 8003434:	08023638 	.word	0x08023638
 8003438:	24000008 	.word	0x24000008
 800343c:	24000004 	.word	0x24000004

08003440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003444:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_IncTick+0x20>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_IncTick+0x24>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4413      	add	r3, r2
 8003450:	4a04      	ldr	r2, [pc, #16]	@ (8003464 <HAL_IncTick+0x24>)
 8003452:	6013      	str	r3, [r2, #0]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	24000010 	.word	0x24000010
 8003464:	24032eb8 	.word	0x24032eb8

08003468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return uwTick;
 800346c:	4b03      	ldr	r3, [pc, #12]	@ (800347c <HAL_GetTick+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	24032eb8 	.word	0x24032eb8

08003480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003488:	f7ff ffee 	bl	8003468 <HAL_GetTick>
 800348c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003498:	d005      	beq.n	80034a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <HAL_Delay+0x44>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034a6:	bf00      	nop
 80034a8:	f7ff ffde 	bl	8003468 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d8f7      	bhi.n	80034a8 <HAL_Delay+0x28>
  {
  }
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	24000010 	.word	0x24000010

080034c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_GetREVID+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0c1b      	lsrs	r3, r3, #16
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	5c001000 	.word	0x5c001000

080034e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	609a      	str	r2, [r3, #8]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3360      	adds	r3, #96	@ 0x60
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	430b      	orrs	r3, r1
 8003576:	431a      	orrs	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	611a      	str	r2, [r3, #16]
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b087      	sub	sp, #28
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3360      	adds	r3, #96	@ 0x60
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	431a      	orrs	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	601a      	str	r2, [r3, #0]
  }
}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3330      	adds	r3, #48	@ 0x30
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	4413      	add	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	211f      	movs	r1, #31
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	0e9b      	lsrs	r3, r3, #26
 800364e:	f003 011f 	and.w	r1, r3, #31
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	431a      	orrs	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f023 0203 	bic.w	r2, r3, #3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3314      	adds	r3, #20
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0e5b      	lsrs	r3, r3, #25
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	4413      	add	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	0d1b      	lsrs	r3, r3, #20
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	2107      	movs	r1, #7
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	401a      	ands	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	0d1b      	lsrs	r3, r3, #20
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	431a      	orrs	r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003704:	43db      	mvns	r3, r3
 8003706:	401a      	ands	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f003 0318 	and.w	r3, r3, #24
 800370e:	4908      	ldr	r1, [pc, #32]	@ (8003730 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003710:	40d9      	lsrs	r1, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	400b      	ands	r3, r1
 8003716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800371a:	431a      	orrs	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	000fffff 	.word	0x000fffff

08003734 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 031f 	and.w	r3, r3, #31
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <LL_ADC_DisableDeepPowerDown+0x20>)
 800375e:	4013      	ands	r3, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6093      	str	r3, [r2, #8]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	5fffffc0 	.word	0x5fffffc0

08003774 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003788:	d101      	bne.n	800378e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	6fffffc0 	.word	0x6fffffc0

080037c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037d8:	d101      	bne.n	80037de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <LL_ADC_Enable+0x24>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	7fffffc0 	.word	0x7fffffc0

08003814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <LL_ADC_IsEnabled+0x18>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <LL_ADC_IsEnabled+0x1a>
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <LL_ADC_REG_StartConversion+0x24>)
 800384a:	4013      	ands	r3, r2
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	7fffffc0 	.word	0x7fffffc0

08003864 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b04      	cmp	r3, #4
 8003876:	d101      	bne.n	800387c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b08      	cmp	r3, #8
 800389c:	d101      	bne.n	80038a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b089      	sub	sp, #36	@ 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e18f      	b.n	8003bea <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fc ffbb 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff3f 	bl	8003774 <LL_ADC_IsDeepPowerDownEnabled>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff25 	bl	8003750 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff5a 	bl	80037c4 <LL_ADC_IsInternalRegulatorEnabled>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d114      	bne.n	8003940 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ff3e 	bl	800379c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003920:	4b87      	ldr	r3, [pc, #540]	@ (8003b40 <HAL_ADC_Init+0x290>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	4a87      	ldr	r2, [pc, #540]	@ (8003b44 <HAL_ADC_Init+0x294>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	3301      	adds	r3, #1
 8003930:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003932:	e002      	b.n	800393a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	3b01      	subs	r3, #1
 8003938:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f9      	bne.n	8003934 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff3d 	bl	80037c4 <LL_ADC_IsInternalRegulatorEnabled>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003954:	f043 0210 	orr.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff77 	bl	8003864 <LL_ADC_REG_IsConversionOngoing>
 8003976:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	f040 8129 	bne.w	8003bd8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f040 8125 	bne.w	8003bd8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003992:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003996:	f043 0202 	orr.w	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff36 	bl	8003814 <LL_ADC_IsEnabled>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d136      	bne.n	8003a1c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a65      	ldr	r2, [pc, #404]	@ (8003b48 <HAL_ADC_Init+0x298>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_ADC_Init+0x112>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a63      	ldr	r2, [pc, #396]	@ (8003b4c <HAL_ADC_Init+0x29c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10e      	bne.n	80039e0 <HAL_ADC_Init+0x130>
 80039c2:	4861      	ldr	r0, [pc, #388]	@ (8003b48 <HAL_ADC_Init+0x298>)
 80039c4:	f7ff ff26 	bl	8003814 <LL_ADC_IsEnabled>
 80039c8:	4604      	mov	r4, r0
 80039ca:	4860      	ldr	r0, [pc, #384]	@ (8003b4c <HAL_ADC_Init+0x29c>)
 80039cc:	f7ff ff22 	bl	8003814 <LL_ADC_IsEnabled>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4323      	orrs	r3, r4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e008      	b.n	80039f2 <HAL_ADC_Init+0x142>
 80039e0:	485b      	ldr	r0, [pc, #364]	@ (8003b50 <HAL_ADC_Init+0x2a0>)
 80039e2:	f7ff ff17 	bl	8003814 <LL_ADC_IsEnabled>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a53      	ldr	r2, [pc, #332]	@ (8003b48 <HAL_ADC_Init+0x298>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d004      	beq.n	8003a0a <HAL_ADC_Init+0x15a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a51      	ldr	r2, [pc, #324]	@ (8003b4c <HAL_ADC_Init+0x29c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_Init+0x15e>
 8003a0a:	4a52      	ldr	r2, [pc, #328]	@ (8003b54 <HAL_ADC_Init+0x2a4>)
 8003a0c:	e000      	b.n	8003a10 <HAL_ADC_Init+0x160>
 8003a0e:	4a52      	ldr	r2, [pc, #328]	@ (8003b58 <HAL_ADC_Init+0x2a8>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7ff fd62 	bl	80034e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003a1c:	f7ff fd54 	bl	80034c8 <HAL_GetREVID>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d914      	bls.n	8003a54 <HAL_ADC_Init+0x1a4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d110      	bne.n	8003a54 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7d5b      	ldrb	r3, [r3, #21]
 8003a36:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a3c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a42:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7f1b      	ldrb	r3, [r3, #28]
 8003a48:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a4a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a4c:	f043 030c 	orr.w	r3, r3, #12
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e00d      	b.n	8003a70 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	7d5b      	ldrb	r3, [r3, #21]
 8003a58:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a5e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a64:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	7f1b      	ldrb	r3, [r3, #28]
 8003a6a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	7f1b      	ldrb	r3, [r3, #28]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	045b      	lsls	r3, r3, #17
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b5c <HAL_ADC_Init+0x2ac>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fed2 	bl	8003864 <LL_ADC_REG_IsConversionOngoing>
 8003ac0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fedf 	bl	800388a <LL_ADC_INJ_IsConversionOngoing>
 8003acc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d15f      	bne.n	8003b94 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d15c      	bne.n	8003b94 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7d1b      	ldrb	r3, [r3, #20]
 8003ade:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	4b1c      	ldr	r3, [pc, #112]	@ (8003b60 <HAL_ADC_Init+0x2b0>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	69b9      	ldr	r1, [r7, #24]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d130      	bne.n	8003b68 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <HAL_ADC_Init+0x2b4>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b1a:	3a01      	subs	r2, #1
 8003b1c:	0411      	lsls	r1, r2, #16
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b28:	4311      	orrs	r1, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	611a      	str	r2, [r3, #16]
 8003b3c:	e01c      	b.n	8003b78 <HAL_ADC_Init+0x2c8>
 8003b3e:	bf00      	nop
 8003b40:	24000004 	.word	0x24000004
 8003b44:	053e2d63 	.word	0x053e2d63
 8003b48:	40022000 	.word	0x40022000
 8003b4c:	40022100 	.word	0x40022100
 8003b50:	58026000 	.word	0x58026000
 8003b54:	40022300 	.word	0x40022300
 8003b58:	58026300 	.word	0x58026300
 8003b5c:	fff0c003 	.word	0xfff0c003
 8003b60:	ffffbffc 	.word	0xffffbffc
 8003b64:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fd8c 	bl	80046ac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f023 010f 	bic.w	r1, r3, #15
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	1e5a      	subs	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bb4:	e007      	b.n	8003bc6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 020f 	bic.w	r2, r2, #15
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bd6:	e007      	b.n	8003be8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	f043 0210 	orr.w	r2, r3, #16
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	@ 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd90      	pop	{r4, r7, pc}
 8003bf2:	bf00      	nop

08003bf4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a55      	ldr	r2, [pc, #340]	@ (8003d5c <HAL_ADC_Start_DMA+0x168>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_ADC_Start_DMA+0x20>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a54      	ldr	r2, [pc, #336]	@ (8003d60 <HAL_ADC_Start_DMA+0x16c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d101      	bne.n	8003c18 <HAL_ADC_Start_DMA+0x24>
 8003c14:	4b53      	ldr	r3, [pc, #332]	@ (8003d64 <HAL_ADC_Start_DMA+0x170>)
 8003c16:	e000      	b.n	8003c1a <HAL_ADC_Start_DMA+0x26>
 8003c18:	4b53      	ldr	r3, [pc, #332]	@ (8003d68 <HAL_ADC_Start_DMA+0x174>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fd8a 	bl	8003734 <LL_ADC_GetMultimode>
 8003c20:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fe1c 	bl	8003864 <LL_ADC_REG_IsConversionOngoing>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 808c 	bne.w	8003d4c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_Start_DMA+0x4e>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e087      	b.n	8003d52 <HAL_ADC_Start_DMA+0x15e>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d002      	beq.n	8003c5c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b09      	cmp	r3, #9
 8003c5a:	d170      	bne.n	8003d3e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fc07 	bl	8004470 <ADC_Enable>
 8003c62:	4603      	mov	r3, r0
 8003c64:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d163      	bne.n	8003d34 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c70:	4b3e      	ldr	r3, [pc, #248]	@ (8003d6c <HAL_ADC_Start_DMA+0x178>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a37      	ldr	r2, [pc, #220]	@ (8003d60 <HAL_ADC_Start_DMA+0x16c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d002      	beq.n	8003c8c <HAL_ADC_Start_DMA+0x98>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	e000      	b.n	8003c8e <HAL_ADC_Start_DMA+0x9a>
 8003c8c:	4b33      	ldr	r3, [pc, #204]	@ (8003d5c <HAL_ADC_Start_DMA+0x168>)
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d002      	beq.n	8003c9c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d006      	beq.n	8003cc2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	f023 0206 	bic.w	r2, r3, #6
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cc0:	e002      	b.n	8003cc8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ccc:	4a28      	ldr	r2, [pc, #160]	@ (8003d70 <HAL_ADC_Start_DMA+0x17c>)
 8003cce:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd4:	4a27      	ldr	r2, [pc, #156]	@ (8003d74 <HAL_ADC_Start_DMA+0x180>)
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cdc:	4a26      	ldr	r2, [pc, #152]	@ (8003d78 <HAL_ADC_Start_DMA+0x184>)
 8003cde:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	221c      	movs	r2, #28
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0210 	orr.w	r2, r2, #16
 8003cfe:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f7ff fcaf 	bl	800366e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3340      	adds	r3, #64	@ 0x40
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f001 fb10 	bl	8005344 <HAL_DMA_Start_IT>
 8003d24:	4603      	mov	r3, r0
 8003d26:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fd85 	bl	800383c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d32:	e00d      	b.n	8003d50 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003d3c:	e008      	b.n	8003d50 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003d4a:	e001      	b.n	8003d50 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40022000 	.word	0x40022000
 8003d60:	40022100 	.word	0x40022100
 8003d64:	40022300 	.word	0x40022300
 8003d68:	58026300 	.word	0x58026300
 8003d6c:	fffff0fe 	.word	0xfffff0fe
 8003d70:	08004585 	.word	0x08004585
 8003d74:	0800465d 	.word	0x0800465d
 8003d78:	08004679 	.word	0x08004679

08003d7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b0a1      	sub	sp, #132	@ 0x84
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a65      	ldr	r2, [pc, #404]	@ (8003f68 <HAL_ADC_ConfigChannel+0x1b0>)
 8003dd2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x2a>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e32e      	b.n	8004440 <HAL_ADC_ConfigChannel+0x688>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fd38 	bl	8003864 <LL_ADC_REG_IsConversionOngoing>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f040 8313 	bne.w	8004422 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	db2c      	blt.n	8003e5e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d108      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x6a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0e9b      	lsrs	r3, r3, #26
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	e016      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x98>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e32:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003e3a:	2320      	movs	r3, #32
 8003e3c:	e003      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e40:	fab3 f383 	clz	r3, r3
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	69d1      	ldr	r1, [r2, #28]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6859      	ldr	r1, [r3, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f7ff fbd3 	bl	8003616 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fcf5 	bl	8003864 <LL_ADC_REG_IsConversionOngoing>
 8003e7a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fd02 	bl	800388a <LL_ADC_INJ_IsConversionOngoing>
 8003e86:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 80b8 	bne.w	8004000 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 80b4 	bne.w	8004000 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f7ff fbf5 	bl	8003694 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003eaa:	4b30      	ldr	r3, [pc, #192]	@ (8003f6c <HAL_ADC_ConfigChannel+0x1b4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003eb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x118>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	e01d      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x154>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10b      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x13e>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	e00a      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x154>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d02c      	beq.n	8003f70 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6919      	ldr	r1, [r3, #16]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f24:	f7ff fb10 	bl	8003548 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6919      	ldr	r1, [r3, #16]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	7e5b      	ldrb	r3, [r3, #25]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d102      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x186>
 8003f38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f3c:	e000      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x188>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	461a      	mov	r2, r3
 8003f42:	f7ff fb3a 	bl	80035ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6919      	ldr	r1, [r3, #16]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	7e1b      	ldrb	r3, [r3, #24]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d102      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x1a4>
 8003f56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f5a:	e000      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x1a6>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f7ff fb12 	bl	8003588 <LL_ADC_SetDataRightShift>
 8003f64:	e04c      	b.n	8004000 <HAL_ADC_ConfigChannel+0x248>
 8003f66:	bf00      	nop
 8003f68:	47ff0000 	.word	0x47ff0000
 8003f6c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	069b      	lsls	r3, r3, #26
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d107      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f92:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	069b      	lsls	r3, r3, #26
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d107      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fb6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	069b      	lsls	r3, r3, #26
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d107      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fda:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fe2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	069b      	lsls	r3, r3, #26
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d107      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fc05 	bl	8003814 <LL_ADC_IsEnabled>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 8211 	bne.w	8004434 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	461a      	mov	r2, r3
 8004020:	f7ff fb64 	bl	80036ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4aa1      	ldr	r2, [pc, #644]	@ (80042b0 <HAL_ADC_ConfigChannel+0x4f8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	f040 812e 	bne.w	800428c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x2a0>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0e9b      	lsrs	r3, r3, #26
 8004046:	3301      	adds	r3, #1
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2b09      	cmp	r3, #9
 800404e:	bf94      	ite	ls
 8004050:	2301      	movls	r3, #1
 8004052:	2300      	movhi	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e019      	b.n	800408c <HAL_ADC_ConfigChannel+0x2d4>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004068:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800406a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004070:	2320      	movs	r3, #32
 8004072:	e003      	b.n	800407c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2b09      	cmp	r3, #9
 8004084:	bf94      	ite	ls
 8004086:	2301      	movls	r3, #1
 8004088:	2300      	movhi	r3, #0
 800408a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800408c:	2b00      	cmp	r3, #0
 800408e:	d079      	beq.n	8004184 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x2f4>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0e9b      	lsrs	r3, r3, #26
 80040a2:	3301      	adds	r3, #1
 80040a4:	069b      	lsls	r3, r3, #26
 80040a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040aa:	e015      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x320>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80040ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80040be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80040c4:	2320      	movs	r3, #32
 80040c6:	e003      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80040c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	069b      	lsls	r3, r3, #26
 80040d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x340>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0e9b      	lsrs	r3, r3, #26
 80040ea:	3301      	adds	r3, #1
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	e017      	b.n	8004128 <HAL_ADC_ConfigChannel+0x370>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004108:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800410a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004110:	2320      	movs	r3, #32
 8004112:	e003      	b.n	800411c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3301      	adds	r3, #1
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2101      	movs	r1, #1
 8004124:	fa01 f303 	lsl.w	r3, r1, r3
 8004128:	ea42 0103 	orr.w	r1, r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <HAL_ADC_ConfigChannel+0x396>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0e9b      	lsrs	r3, r3, #26
 800413e:	3301      	adds	r3, #1
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	051b      	lsls	r3, r3, #20
 800414c:	e018      	b.n	8004180 <HAL_ADC_ConfigChannel+0x3c8>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004166:	2320      	movs	r3, #32
 8004168:	e003      	b.n	8004172 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416c:	fab3 f383 	clz	r3, r3
 8004170:	b2db      	uxtb	r3, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f003 021f 	and.w	r2, r3, #31
 8004178:	4613      	mov	r3, r2
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4413      	add	r3, r2
 800417e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004180:	430b      	orrs	r3, r1
 8004182:	e07e      	b.n	8004282 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x3e8>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0e9b      	lsrs	r3, r3, #26
 8004196:	3301      	adds	r3, #1
 8004198:	069b      	lsls	r3, r3, #26
 800419a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800419e:	e015      	b.n	80041cc <HAL_ADC_ConfigChannel+0x414>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80041b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80041b8:	2320      	movs	r3, #32
 80041ba:	e003      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80041bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	069b      	lsls	r3, r3, #26
 80041c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x434>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0e9b      	lsrs	r3, r3, #26
 80041de:	3301      	adds	r3, #1
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	e017      	b.n	800421c <HAL_ADC_ConfigChannel+0x464>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	61bb      	str	r3, [r7, #24]
  return result;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004204:	2320      	movs	r3, #32
 8004206:	e003      	b.n	8004210 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3301      	adds	r3, #1
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2101      	movs	r1, #1
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x490>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	3301      	adds	r3, #1
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	3b1e      	subs	r3, #30
 8004240:	051b      	lsls	r3, r3, #20
 8004242:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004246:	e01b      	b.n	8004280 <HAL_ADC_ConfigChannel+0x4c8>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	60fb      	str	r3, [r7, #12]
  return result;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e003      	b.n	800426c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f003 021f 	and.w	r2, r3, #31
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	3b1e      	subs	r3, #30
 800427a:	051b      	lsls	r3, r3, #20
 800427c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004280:	430b      	orrs	r3, r1
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	6892      	ldr	r2, [r2, #8]
 8004286:	4619      	mov	r1, r3
 8004288:	f7ff fa04 	bl	8003694 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f280 80cf 	bge.w	8004434 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a06      	ldr	r2, [pc, #24]	@ (80042b4 <HAL_ADC_ConfigChannel+0x4fc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_ADC_ConfigChannel+0x4f2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a04      	ldr	r2, [pc, #16]	@ (80042b8 <HAL_ADC_ConfigChannel+0x500>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10a      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x508>
 80042aa:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <HAL_ADC_ConfigChannel+0x504>)
 80042ac:	e009      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x50a>
 80042ae:	bf00      	nop
 80042b0:	47ff0000 	.word	0x47ff0000
 80042b4:	40022000 	.word	0x40022000
 80042b8:	40022100 	.word	0x40022100
 80042bc:	40022300 	.word	0x40022300
 80042c0:	4b61      	ldr	r3, [pc, #388]	@ (8004448 <HAL_ADC_ConfigChannel+0x690>)
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff f932 	bl	800352c <LL_ADC_GetCommonPathInternalCh>
 80042c8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a5f      	ldr	r2, [pc, #380]	@ (800444c <HAL_ADC_ConfigChannel+0x694>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <HAL_ADC_ConfigChannel+0x526>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004450 <HAL_ADC_ConfigChannel+0x698>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10e      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x544>
 80042de:	485b      	ldr	r0, [pc, #364]	@ (800444c <HAL_ADC_ConfigChannel+0x694>)
 80042e0:	f7ff fa98 	bl	8003814 <LL_ADC_IsEnabled>
 80042e4:	4604      	mov	r4, r0
 80042e6:	485a      	ldr	r0, [pc, #360]	@ (8004450 <HAL_ADC_ConfigChannel+0x698>)
 80042e8:	f7ff fa94 	bl	8003814 <LL_ADC_IsEnabled>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4323      	orrs	r3, r4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e008      	b.n	800430e <HAL_ADC_ConfigChannel+0x556>
 80042fc:	4855      	ldr	r0, [pc, #340]	@ (8004454 <HAL_ADC_ConfigChannel+0x69c>)
 80042fe:	f7ff fa89 	bl	8003814 <LL_ADC_IsEnabled>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d07d      	beq.n	800440e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a50      	ldr	r2, [pc, #320]	@ (8004458 <HAL_ADC_ConfigChannel+0x6a0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d130      	bne.n	800437e <HAL_ADC_ConfigChannel+0x5c6>
 800431c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800431e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d12b      	bne.n	800437e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4a      	ldr	r2, [pc, #296]	@ (8004454 <HAL_ADC_ConfigChannel+0x69c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	f040 8081 	bne.w	8004434 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a45      	ldr	r2, [pc, #276]	@ (800444c <HAL_ADC_ConfigChannel+0x694>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_ADC_ConfigChannel+0x58e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a43      	ldr	r2, [pc, #268]	@ (8004450 <HAL_ADC_ConfigChannel+0x698>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_ADC_ConfigChannel+0x592>
 8004346:	4a45      	ldr	r2, [pc, #276]	@ (800445c <HAL_ADC_ConfigChannel+0x6a4>)
 8004348:	e000      	b.n	800434c <HAL_ADC_ConfigChannel+0x594>
 800434a:	4a3f      	ldr	r2, [pc, #252]	@ (8004448 <HAL_ADC_ConfigChannel+0x690>)
 800434c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800434e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7ff f8d6 	bl	8003506 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800435a:	4b41      	ldr	r3, [pc, #260]	@ (8004460 <HAL_ADC_ConfigChannel+0x6a8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	099b      	lsrs	r3, r3, #6
 8004360:	4a40      	ldr	r2, [pc, #256]	@ (8004464 <HAL_ADC_ConfigChannel+0x6ac>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	3301      	adds	r3, #1
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800436e:	e002      	b.n	8004376 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	3b01      	subs	r3, #1
 8004374:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f9      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800437c:	e05a      	b.n	8004434 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a39      	ldr	r2, [pc, #228]	@ (8004468 <HAL_ADC_ConfigChannel+0x6b0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d11e      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x60e>
 8004388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800438a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d119      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2f      	ldr	r2, [pc, #188]	@ (8004454 <HAL_ADC_ConfigChannel+0x69c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d14b      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2a      	ldr	r2, [pc, #168]	@ (800444c <HAL_ADC_ConfigChannel+0x694>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_ADC_ConfigChannel+0x5f8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a29      	ldr	r2, [pc, #164]	@ (8004450 <HAL_ADC_ConfigChannel+0x698>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d101      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x5fc>
 80043b0:	4a2a      	ldr	r2, [pc, #168]	@ (800445c <HAL_ADC_ConfigChannel+0x6a4>)
 80043b2:	e000      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x5fe>
 80043b4:	4a24      	ldr	r2, [pc, #144]	@ (8004448 <HAL_ADC_ConfigChannel+0x690>)
 80043b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f7ff f8a1 	bl	8003506 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043c4:	e036      	b.n	8004434 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a28      	ldr	r2, [pc, #160]	@ (800446c <HAL_ADC_ConfigChannel+0x6b4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d131      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x67c>
 80043d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d12c      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1d      	ldr	r2, [pc, #116]	@ (8004454 <HAL_ADC_ConfigChannel+0x69c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d127      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a18      	ldr	r2, [pc, #96]	@ (800444c <HAL_ADC_ConfigChannel+0x694>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_ADC_ConfigChannel+0x640>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a17      	ldr	r2, [pc, #92]	@ (8004450 <HAL_ADC_ConfigChannel+0x698>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d101      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x644>
 80043f8:	4a18      	ldr	r2, [pc, #96]	@ (800445c <HAL_ADC_ConfigChannel+0x6a4>)
 80043fa:	e000      	b.n	80043fe <HAL_ADC_ConfigChannel+0x646>
 80043fc:	4a12      	ldr	r2, [pc, #72]	@ (8004448 <HAL_ADC_ConfigChannel+0x690>)
 80043fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004400:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f7ff f87d 	bl	8003506 <LL_ADC_SetCommonPathInternalCh>
 800440c:	e012      	b.n	8004434 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004412:	f043 0220 	orr.w	r2, r3, #32
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004420:	e008      	b.n	8004434 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004426:	f043 0220 	orr.w	r2, r3, #32
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800443c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004440:	4618      	mov	r0, r3
 8004442:	3784      	adds	r7, #132	@ 0x84
 8004444:	46bd      	mov	sp, r7
 8004446:	bd90      	pop	{r4, r7, pc}
 8004448:	58026300 	.word	0x58026300
 800444c:	40022000 	.word	0x40022000
 8004450:	40022100 	.word	0x40022100
 8004454:	58026000 	.word	0x58026000
 8004458:	cb840000 	.word	0xcb840000
 800445c:	40022300 	.word	0x40022300
 8004460:	24000004 	.word	0x24000004
 8004464:	053e2d63 	.word	0x053e2d63
 8004468:	c7520000 	.word	0xc7520000
 800446c:	cfb80000 	.word	0xcfb80000

08004470 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff f9c9 	bl	8003814 <LL_ADC_IsEnabled>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d16e      	bne.n	8004566 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	4b38      	ldr	r3, [pc, #224]	@ (8004570 <ADC_Enable+0x100>)
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449a:	f043 0210 	orr.w	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a6:	f043 0201 	orr.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e05a      	b.n	8004568 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff f998 	bl	80037ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044bc:	f7fe ffd4 	bl	8003468 <HAL_GetTick>
 80044c0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004574 <ADC_Enable+0x104>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <ADC_Enable+0x66>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a29      	ldr	r2, [pc, #164]	@ (8004578 <ADC_Enable+0x108>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <ADC_Enable+0x6a>
 80044d6:	4b29      	ldr	r3, [pc, #164]	@ (800457c <ADC_Enable+0x10c>)
 80044d8:	e000      	b.n	80044dc <ADC_Enable+0x6c>
 80044da:	4b29      	ldr	r3, [pc, #164]	@ (8004580 <ADC_Enable+0x110>)
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff f929 	bl	8003734 <LL_ADC_GetMultimode>
 80044e2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a23      	ldr	r2, [pc, #140]	@ (8004578 <ADC_Enable+0x108>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d002      	beq.n	80044f4 <ADC_Enable+0x84>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	e000      	b.n	80044f6 <ADC_Enable+0x86>
 80044f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004574 <ADC_Enable+0x104>)
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d02c      	beq.n	8004558 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d130      	bne.n	8004566 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004504:	e028      	b.n	8004558 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff f982 	bl	8003814 <LL_ADC_IsEnabled>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff f966 	bl	80037ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004520:	f7fe ffa2 	bl	8003468 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d914      	bls.n	8004558 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b01      	cmp	r3, #1
 800453a:	d00d      	beq.n	8004558 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004540:	f043 0210 	orr.w	r2, r3, #16
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	f043 0201 	orr.w	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e007      	b.n	8004568 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d1cf      	bne.n	8004506 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	8000003f 	.word	0x8000003f
 8004574:	40022000 	.word	0x40022000
 8004578:	40022100 	.word	0x40022100
 800457c:	40022300 	.word	0x40022300
 8004580:	58026300 	.word	0x58026300

08004584 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004590:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800459a:	2b00      	cmp	r3, #0
 800459c:	d14b      	bne.n	8004636 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d021      	beq.n	80045fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff f817 	bl	80035f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d032      	beq.n	800462e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d12b      	bne.n	800462e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11f      	bne.n	800462e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80045fa:	e018      	b.n	800462e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d111      	bne.n	800462e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	f043 0201 	orr.w	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff fba4 	bl	8003d7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004634:	e00e      	b.n	8004654 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff fbae 	bl	8003da4 <HAL_ADC_ErrorCallback>
}
 8004648:	e004      	b.n	8004654 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff fb90 	bl	8003d90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004696:	f043 0204 	orr.w	r2, r3, #4
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fb80 	bl	8003da4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a7a      	ldr	r2, [pc, #488]	@ (80048a4 <ADC_ConfigureBoostMode+0x1f8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <ADC_ConfigureBoostMode+0x1c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a79      	ldr	r2, [pc, #484]	@ (80048a8 <ADC_ConfigureBoostMode+0x1fc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d109      	bne.n	80046dc <ADC_ConfigureBoostMode+0x30>
 80046c8:	4b78      	ldr	r3, [pc, #480]	@ (80048ac <ADC_ConfigureBoostMode+0x200>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e008      	b.n	80046ee <ADC_ConfigureBoostMode+0x42>
 80046dc:	4b74      	ldr	r3, [pc, #464]	@ (80048b0 <ADC_ConfigureBoostMode+0x204>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01c      	beq.n	800472c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80046f2:	f004 fabb 	bl	8008c6c <HAL_RCC_GetHCLKFreq>
 80046f6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004700:	d010      	beq.n	8004724 <ADC_ConfigureBoostMode+0x78>
 8004702:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004706:	d873      	bhi.n	80047f0 <ADC_ConfigureBoostMode+0x144>
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470c:	d002      	beq.n	8004714 <ADC_ConfigureBoostMode+0x68>
 800470e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004712:	d16d      	bne.n	80047f0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	60fb      	str	r3, [r7, #12]
        break;
 8004722:	e068      	b.n	80047f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	60fb      	str	r3, [r7, #12]
        break;
 800472a:	e064      	b.n	80047f6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800472c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	f005 fd42 	bl	800a1bc <HAL_RCCEx_GetPeriphCLKFreq>
 8004738:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004742:	d051      	beq.n	80047e8 <ADC_ConfigureBoostMode+0x13c>
 8004744:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004748:	d854      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x148>
 800474a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800474e:	d047      	beq.n	80047e0 <ADC_ConfigureBoostMode+0x134>
 8004750:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004754:	d84e      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x148>
 8004756:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800475a:	d03d      	beq.n	80047d8 <ADC_ConfigureBoostMode+0x12c>
 800475c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004760:	d848      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x148>
 8004762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004766:	d033      	beq.n	80047d0 <ADC_ConfigureBoostMode+0x124>
 8004768:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800476c:	d842      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x148>
 800476e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004772:	d029      	beq.n	80047c8 <ADC_ConfigureBoostMode+0x11c>
 8004774:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004778:	d83c      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x148>
 800477a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800477e:	d01a      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x10a>
 8004780:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004784:	d836      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x148>
 8004786:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800478a:	d014      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x10a>
 800478c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004790:	d830      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x148>
 8004792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004796:	d00e      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x10a>
 8004798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800479c:	d82a      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x148>
 800479e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047a2:	d008      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x10a>
 80047a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047a8:	d824      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x148>
 80047aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047ae:	d002      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x10a>
 80047b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047b4:	d11e      	bne.n	80047f4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	0c9b      	lsrs	r3, r3, #18
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	60fb      	str	r3, [r7, #12]
        break;
 80047c6:	e016      	b.n	80047f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	60fb      	str	r3, [r7, #12]
        break;
 80047ce:	e012      	b.n	80047f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	60fb      	str	r3, [r7, #12]
        break;
 80047d6:	e00e      	b.n	80047f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	60fb      	str	r3, [r7, #12]
        break;
 80047de:	e00a      	b.n	80047f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	09db      	lsrs	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]
        break;
 80047e6:	e006      	b.n	80047f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	60fb      	str	r3, [r7, #12]
        break;
 80047ee:	e002      	b.n	80047f6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80047f0:	bf00      	nop
 80047f2:	e000      	b.n	80047f6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80047f4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80047f6:	f7fe fe67 	bl	80034c8 <HAL_GetREVID>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004800:	4293      	cmp	r3, r2
 8004802:	d815      	bhi.n	8004830 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a2b      	ldr	r2, [pc, #172]	@ (80048b4 <ADC_ConfigureBoostMode+0x208>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d908      	bls.n	800481e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800481a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800481c:	e03e      	b.n	800489c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	e035      	b.n	800489c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4a1f      	ldr	r2, [pc, #124]	@ (80048b8 <ADC_ConfigureBoostMode+0x20c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d808      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800484c:	609a      	str	r2, [r3, #8]
}
 800484e:	e025      	b.n	800489c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a1a      	ldr	r2, [pc, #104]	@ (80048bc <ADC_ConfigureBoostMode+0x210>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d80a      	bhi.n	800486e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	e016      	b.n	800489c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4a13      	ldr	r2, [pc, #76]	@ (80048c0 <ADC_ConfigureBoostMode+0x214>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d80a      	bhi.n	800488c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004888:	609a      	str	r2, [r3, #8]
}
 800488a:	e007      	b.n	800489c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40022100 	.word	0x40022100
 80048ac:	40022300 	.word	0x40022300
 80048b0:	58026300 	.word	0x58026300
 80048b4:	01312d00 	.word	0x01312d00
 80048b8:	005f5e10 	.word	0x005f5e10
 80048bc:	00bebc20 	.word	0x00bebc20
 80048c0:	017d7840 	.word	0x017d7840

080048c4 <LL_ADC_IsEnabled>:
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <LL_ADC_IsEnabled+0x18>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <LL_ADC_IsEnabled+0x1a>
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <LL_ADC_REG_IsConversionOngoing>:
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d101      	bne.n	8004902 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b09f      	sub	sp, #124	@ 0x7c
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800492a:	2302      	movs	r3, #2
 800492c:	e0be      	b.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800493a:	2300      	movs	r3, #0
 800493c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a5c      	ldr	r2, [pc, #368]	@ (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d102      	bne.n	800494e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004948:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	e001      	b.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e09d      	b.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff ffb9 	bl	80048ea <LL_ADC_REG_IsConversionOngoing>
 8004978:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff ffb3 	bl	80048ea <LL_ADC_REG_IsConversionOngoing>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d17f      	bne.n	8004a8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800498a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800498c:	2b00      	cmp	r3, #0
 800498e:	d17c      	bne.n	8004a8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a47      	ldr	r2, [pc, #284]	@ (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a46      	ldr	r2, [pc, #280]	@ (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d101      	bne.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80049a4:	4b45      	ldr	r3, [pc, #276]	@ (8004abc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049a6:	e000      	b.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80049a8:	4b45      	ldr	r3, [pc, #276]	@ (8004ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d039      	beq.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80049b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3a      	ldr	r2, [pc, #232]	@ (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a38      	ldr	r2, [pc, #224]	@ (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10e      	bne.n	80049f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80049da:	4836      	ldr	r0, [pc, #216]	@ (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049dc:	f7ff ff72 	bl	80048c4 <LL_ADC_IsEnabled>
 80049e0:	4604      	mov	r4, r0
 80049e2:	4835      	ldr	r0, [pc, #212]	@ (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049e4:	f7ff ff6e 	bl	80048c4 <LL_ADC_IsEnabled>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4323      	orrs	r3, r4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e008      	b.n	8004a0a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80049f8:	4832      	ldr	r0, [pc, #200]	@ (8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049fa:	f7ff ff63 	bl	80048c4 <LL_ADC_IsEnabled>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d047      	beq.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	6811      	ldr	r1, [r2, #0]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	6892      	ldr	r2, [r2, #8]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	431a      	orrs	r2, r3
 8004a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a24:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a26:	e03a      	b.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10e      	bne.n	8004a66 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004a48:	481a      	ldr	r0, [pc, #104]	@ (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a4a:	f7ff ff3b 	bl	80048c4 <LL_ADC_IsEnabled>
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4819      	ldr	r0, [pc, #100]	@ (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a52:	f7ff ff37 	bl	80048c4 <LL_ADC_IsEnabled>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4323      	orrs	r3, r4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e008      	b.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004a66:	4817      	ldr	r0, [pc, #92]	@ (8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a68:	f7ff ff2c 	bl	80048c4 <LL_ADC_IsEnabled>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d010      	beq.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a86:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a88:	e009      	b.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004a9c:	e000      	b.n	8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a9e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004aa8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	377c      	adds	r7, #124	@ 0x7c
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd90      	pop	{r4, r7, pc}
 8004ab4:	40022000 	.word	0x40022000
 8004ab8:	40022100 	.word	0x40022100
 8004abc:	40022300 	.word	0x40022300
 8004ac0:	58026300 	.word	0x58026300
 8004ac4:	58026000 	.word	0x58026000
 8004ac8:	fffff0e0 	.word	0xfffff0e0

08004acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <__NVIC_SetPriorityGrouping+0x40>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004af4:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <__NVIC_SetPriorityGrouping+0x44>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004afa:	4a04      	ldr	r2, [pc, #16]	@ (8004b0c <__NVIC_SetPriorityGrouping+0x40>)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	60d3      	str	r3, [r2, #12]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	e000ed00 	.word	0xe000ed00
 8004b10:	05fa0000 	.word	0x05fa0000

08004b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b18:	4b04      	ldr	r3, [pc, #16]	@ (8004b2c <__NVIC_GetPriorityGrouping+0x18>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	f003 0307 	and.w	r3, r3, #7
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	e000ed00 	.word	0xe000ed00

08004b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	db0b      	blt.n	8004b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	f003 021f 	and.w	r2, r3, #31
 8004b48:	4907      	ldr	r1, [pc, #28]	@ (8004b68 <__NVIC_EnableIRQ+0x38>)
 8004b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2001      	movs	r0, #1
 8004b52:	fa00 f202 	lsl.w	r2, r0, r2
 8004b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e000e100 	.word	0xe000e100

08004b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db0a      	blt.n	8004b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	490c      	ldr	r1, [pc, #48]	@ (8004bb8 <__NVIC_SetPriority+0x4c>)
 8004b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8a:	0112      	lsls	r2, r2, #4
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b94:	e00a      	b.n	8004bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	4908      	ldr	r1, [pc, #32]	@ (8004bbc <__NVIC_SetPriority+0x50>)
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	0112      	lsls	r2, r2, #4
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	440b      	add	r3, r1
 8004baa:	761a      	strb	r2, [r3, #24]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000e100 	.word	0xe000e100
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	@ 0x24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f1c3 0307 	rsb	r3, r3, #7
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	bf28      	it	cs
 8004bde:	2304      	movcs	r3, #4
 8004be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3304      	adds	r3, #4
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d902      	bls.n	8004bf0 <NVIC_EncodePriority+0x30>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3b03      	subs	r3, #3
 8004bee:	e000      	b.n	8004bf2 <NVIC_EncodePriority+0x32>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	401a      	ands	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	43d9      	mvns	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c18:	4313      	orrs	r3, r2
         );
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3724      	adds	r7, #36	@ 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ff4c 	bl	8004acc <__NVIC_SetPriorityGrouping>
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c4a:	f7ff ff63 	bl	8004b14 <__NVIC_GetPriorityGrouping>
 8004c4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	6978      	ldr	r0, [r7, #20]
 8004c56:	f7ff ffb3 	bl	8004bc0 <NVIC_EncodePriority>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff ff82 	bl	8004b6c <__NVIC_SetPriority>
}
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff ff56 	bl	8004b30 <__NVIC_EnableIRQ>
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c94:	f7fe fbe8 	bl	8003468 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e316      	b.n	80052d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a66      	ldr	r2, [pc, #408]	@ (8004e44 <HAL_DMA_Init+0x1b8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d04a      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a65      	ldr	r2, [pc, #404]	@ (8004e48 <HAL_DMA_Init+0x1bc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d045      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a63      	ldr	r2, [pc, #396]	@ (8004e4c <HAL_DMA_Init+0x1c0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d040      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a62      	ldr	r2, [pc, #392]	@ (8004e50 <HAL_DMA_Init+0x1c4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d03b      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a60      	ldr	r2, [pc, #384]	@ (8004e54 <HAL_DMA_Init+0x1c8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d036      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a5f      	ldr	r2, [pc, #380]	@ (8004e58 <HAL_DMA_Init+0x1cc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d031      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8004e5c <HAL_DMA_Init+0x1d0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02c      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a5c      	ldr	r2, [pc, #368]	@ (8004e60 <HAL_DMA_Init+0x1d4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d027      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a5a      	ldr	r2, [pc, #360]	@ (8004e64 <HAL_DMA_Init+0x1d8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d022      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a59      	ldr	r2, [pc, #356]	@ (8004e68 <HAL_DMA_Init+0x1dc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d01d      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a57      	ldr	r2, [pc, #348]	@ (8004e6c <HAL_DMA_Init+0x1e0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d018      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a56      	ldr	r2, [pc, #344]	@ (8004e70 <HAL_DMA_Init+0x1e4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d013      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a54      	ldr	r2, [pc, #336]	@ (8004e74 <HAL_DMA_Init+0x1e8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00e      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a53      	ldr	r2, [pc, #332]	@ (8004e78 <HAL_DMA_Init+0x1ec>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d009      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a51      	ldr	r2, [pc, #324]	@ (8004e7c <HAL_DMA_Init+0x1f0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <HAL_DMA_Init+0xb8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a50      	ldr	r2, [pc, #320]	@ (8004e80 <HAL_DMA_Init+0x1f4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d101      	bne.n	8004d48 <HAL_DMA_Init+0xbc>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <HAL_DMA_Init+0xbe>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 813b 	beq.w	8004fc6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a37      	ldr	r2, [pc, #220]	@ (8004e44 <HAL_DMA_Init+0x1b8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d04a      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a36      	ldr	r2, [pc, #216]	@ (8004e48 <HAL_DMA_Init+0x1bc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d045      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a34      	ldr	r2, [pc, #208]	@ (8004e4c <HAL_DMA_Init+0x1c0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d040      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a33      	ldr	r2, [pc, #204]	@ (8004e50 <HAL_DMA_Init+0x1c4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d03b      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a31      	ldr	r2, [pc, #196]	@ (8004e54 <HAL_DMA_Init+0x1c8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d036      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a30      	ldr	r2, [pc, #192]	@ (8004e58 <HAL_DMA_Init+0x1cc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d031      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e5c <HAL_DMA_Init+0x1d0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d02c      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a2d      	ldr	r2, [pc, #180]	@ (8004e60 <HAL_DMA_Init+0x1d4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d027      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e64 <HAL_DMA_Init+0x1d8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d022      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8004e68 <HAL_DMA_Init+0x1dc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d01d      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <HAL_DMA_Init+0x1e0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d018      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a27      	ldr	r2, [pc, #156]	@ (8004e70 <HAL_DMA_Init+0x1e4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a25      	ldr	r2, [pc, #148]	@ (8004e74 <HAL_DMA_Init+0x1e8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00e      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a24      	ldr	r2, [pc, #144]	@ (8004e78 <HAL_DMA_Init+0x1ec>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d009      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a22      	ldr	r2, [pc, #136]	@ (8004e7c <HAL_DMA_Init+0x1f0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_DMA_Init+0x174>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a21      	ldr	r2, [pc, #132]	@ (8004e80 <HAL_DMA_Init+0x1f4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <HAL_DMA_Init+0x186>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e007      	b.n	8004e22 <HAL_DMA_Init+0x196>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e22:	e02f      	b.n	8004e84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e24:	f7fe fb20 	bl	8003468 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b05      	cmp	r3, #5
 8004e30:	d928      	bls.n	8004e84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e246      	b.n	80052d2 <HAL_DMA_Init+0x646>
 8004e44:	40020010 	.word	0x40020010
 8004e48:	40020028 	.word	0x40020028
 8004e4c:	40020040 	.word	0x40020040
 8004e50:	40020058 	.word	0x40020058
 8004e54:	40020070 	.word	0x40020070
 8004e58:	40020088 	.word	0x40020088
 8004e5c:	400200a0 	.word	0x400200a0
 8004e60:	400200b8 	.word	0x400200b8
 8004e64:	40020410 	.word	0x40020410
 8004e68:	40020428 	.word	0x40020428
 8004e6c:	40020440 	.word	0x40020440
 8004e70:	40020458 	.word	0x40020458
 8004e74:	40020470 	.word	0x40020470
 8004e78:	40020488 	.word	0x40020488
 8004e7c:	400204a0 	.word	0x400204a0
 8004e80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1c8      	bne.n	8004e24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4b83      	ldr	r3, [pc, #524]	@ (80050ac <HAL_DMA_Init+0x420>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004eaa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ec2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d107      	bne.n	8004ee8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004ee8:	4b71      	ldr	r3, [pc, #452]	@ (80050b0 <HAL_DMA_Init+0x424>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b71      	ldr	r3, [pc, #452]	@ (80050b4 <HAL_DMA_Init+0x428>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ef4:	d328      	bcc.n	8004f48 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b28      	cmp	r3, #40	@ 0x28
 8004efc:	d903      	bls.n	8004f06 <HAL_DMA_Init+0x27a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f04:	d917      	bls.n	8004f36 <HAL_DMA_Init+0x2aa>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f0c:	d903      	bls.n	8004f16 <HAL_DMA_Init+0x28a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b42      	cmp	r3, #66	@ 0x42
 8004f14:	d90f      	bls.n	8004f36 <HAL_DMA_Init+0x2aa>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b46      	cmp	r3, #70	@ 0x46
 8004f1c:	d903      	bls.n	8004f26 <HAL_DMA_Init+0x29a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b48      	cmp	r3, #72	@ 0x48
 8004f24:	d907      	bls.n	8004f36 <HAL_DMA_Init+0x2aa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f2c:	d905      	bls.n	8004f3a <HAL_DMA_Init+0x2ae>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b52      	cmp	r3, #82	@ 0x52
 8004f34:	d801      	bhi.n	8004f3a <HAL_DMA_Init+0x2ae>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <HAL_DMA_Init+0x2b0>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f46:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f023 0307 	bic.w	r3, r3, #7
 8004f5e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d117      	bne.n	8004fa2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f002 fb3f 	bl	8007608 <DMA_CheckFifoParam>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2240      	movs	r2, #64	@ 0x40
 8004f94:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e197      	b.n	80052d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f002 fa7a 	bl	80074a4 <DMA_CalcBaseAndBitshift>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	223f      	movs	r2, #63	@ 0x3f
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]
 8004fc4:	e0cd      	b.n	8005162 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3b      	ldr	r2, [pc, #236]	@ (80050b8 <HAL_DMA_Init+0x42c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_DMA_Init+0x38a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a39      	ldr	r2, [pc, #228]	@ (80050bc <HAL_DMA_Init+0x430>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01d      	beq.n	8005016 <HAL_DMA_Init+0x38a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a38      	ldr	r2, [pc, #224]	@ (80050c0 <HAL_DMA_Init+0x434>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d018      	beq.n	8005016 <HAL_DMA_Init+0x38a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a36      	ldr	r2, [pc, #216]	@ (80050c4 <HAL_DMA_Init+0x438>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_DMA_Init+0x38a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a35      	ldr	r2, [pc, #212]	@ (80050c8 <HAL_DMA_Init+0x43c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_DMA_Init+0x38a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a33      	ldr	r2, [pc, #204]	@ (80050cc <HAL_DMA_Init+0x440>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_DMA_Init+0x38a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a32      	ldr	r2, [pc, #200]	@ (80050d0 <HAL_DMA_Init+0x444>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_DMA_Init+0x38a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a30      	ldr	r2, [pc, #192]	@ (80050d4 <HAL_DMA_Init+0x448>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d101      	bne.n	800501a <HAL_DMA_Init+0x38e>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_DMA_Init+0x390>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8097 	beq.w	8005150 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a24      	ldr	r2, [pc, #144]	@ (80050b8 <HAL_DMA_Init+0x42c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d021      	beq.n	8005070 <HAL_DMA_Init+0x3e4>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a22      	ldr	r2, [pc, #136]	@ (80050bc <HAL_DMA_Init+0x430>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01c      	beq.n	8005070 <HAL_DMA_Init+0x3e4>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a21      	ldr	r2, [pc, #132]	@ (80050c0 <HAL_DMA_Init+0x434>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d017      	beq.n	8005070 <HAL_DMA_Init+0x3e4>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1f      	ldr	r2, [pc, #124]	@ (80050c4 <HAL_DMA_Init+0x438>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d012      	beq.n	8005070 <HAL_DMA_Init+0x3e4>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <HAL_DMA_Init+0x43c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00d      	beq.n	8005070 <HAL_DMA_Init+0x3e4>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1c      	ldr	r2, [pc, #112]	@ (80050cc <HAL_DMA_Init+0x440>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d008      	beq.n	8005070 <HAL_DMA_Init+0x3e4>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1b      	ldr	r2, [pc, #108]	@ (80050d0 <HAL_DMA_Init+0x444>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <HAL_DMA_Init+0x3e4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a19      	ldr	r2, [pc, #100]	@ (80050d4 <HAL_DMA_Init+0x448>)
 800506e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4b13      	ldr	r3, [pc, #76]	@ (80050d8 <HAL_DMA_Init+0x44c>)
 800508c:	4013      	ands	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	d021      	beq.n	80050dc <HAL_DMA_Init+0x450>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b80      	cmp	r3, #128	@ 0x80
 800509e:	d102      	bne.n	80050a6 <HAL_DMA_Init+0x41a>
 80050a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050a4:	e01b      	b.n	80050de <HAL_DMA_Init+0x452>
 80050a6:	2300      	movs	r3, #0
 80050a8:	e019      	b.n	80050de <HAL_DMA_Init+0x452>
 80050aa:	bf00      	nop
 80050ac:	fe10803f 	.word	0xfe10803f
 80050b0:	5c001000 	.word	0x5c001000
 80050b4:	ffff0000 	.word	0xffff0000
 80050b8:	58025408 	.word	0x58025408
 80050bc:	5802541c 	.word	0x5802541c
 80050c0:	58025430 	.word	0x58025430
 80050c4:	58025444 	.word	0x58025444
 80050c8:	58025458 	.word	0x58025458
 80050cc:	5802546c 	.word	0x5802546c
 80050d0:	58025480 	.word	0x58025480
 80050d4:	58025494 	.word	0x58025494
 80050d8:	fffe000f 	.word	0xfffe000f
 80050dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68d2      	ldr	r2, [r2, #12]
 80050e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800510c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	4b6e      	ldr	r3, [pc, #440]	@ (80052dc <HAL_DMA_Init+0x650>)
 8005124:	4413      	add	r3, r2
 8005126:	4a6e      	ldr	r2, [pc, #440]	@ (80052e0 <HAL_DMA_Init+0x654>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	009a      	lsls	r2, r3, #2
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f002 f9b5 	bl	80074a4 <DMA_CalcBaseAndBitshift>
 800513a:	4603      	mov	r3, r0
 800513c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2201      	movs	r2, #1
 8005148:	409a      	lsls	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	e008      	b.n	8005162 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2240      	movs	r2, #64	@ 0x40
 8005154:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2203      	movs	r2, #3
 800515a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0b7      	b.n	80052d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a5f      	ldr	r2, [pc, #380]	@ (80052e4 <HAL_DMA_Init+0x658>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d072      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a5d      	ldr	r2, [pc, #372]	@ (80052e8 <HAL_DMA_Init+0x65c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d06d      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a5c      	ldr	r2, [pc, #368]	@ (80052ec <HAL_DMA_Init+0x660>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d068      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a5a      	ldr	r2, [pc, #360]	@ (80052f0 <HAL_DMA_Init+0x664>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d063      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a59      	ldr	r2, [pc, #356]	@ (80052f4 <HAL_DMA_Init+0x668>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d05e      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a57      	ldr	r2, [pc, #348]	@ (80052f8 <HAL_DMA_Init+0x66c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d059      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a56      	ldr	r2, [pc, #344]	@ (80052fc <HAL_DMA_Init+0x670>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d054      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a54      	ldr	r2, [pc, #336]	@ (8005300 <HAL_DMA_Init+0x674>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d04f      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a53      	ldr	r2, [pc, #332]	@ (8005304 <HAL_DMA_Init+0x678>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d04a      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a51      	ldr	r2, [pc, #324]	@ (8005308 <HAL_DMA_Init+0x67c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d045      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a50      	ldr	r2, [pc, #320]	@ (800530c <HAL_DMA_Init+0x680>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d040      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a4e      	ldr	r2, [pc, #312]	@ (8005310 <HAL_DMA_Init+0x684>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d03b      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a4d      	ldr	r2, [pc, #308]	@ (8005314 <HAL_DMA_Init+0x688>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d036      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005318 <HAL_DMA_Init+0x68c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d031      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a4a      	ldr	r2, [pc, #296]	@ (800531c <HAL_DMA_Init+0x690>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d02c      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a48      	ldr	r2, [pc, #288]	@ (8005320 <HAL_DMA_Init+0x694>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d027      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a47      	ldr	r2, [pc, #284]	@ (8005324 <HAL_DMA_Init+0x698>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d022      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a45      	ldr	r2, [pc, #276]	@ (8005328 <HAL_DMA_Init+0x69c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a44      	ldr	r2, [pc, #272]	@ (800532c <HAL_DMA_Init+0x6a0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d018      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a42      	ldr	r2, [pc, #264]	@ (8005330 <HAL_DMA_Init+0x6a4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a41      	ldr	r2, [pc, #260]	@ (8005334 <HAL_DMA_Init+0x6a8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a3f      	ldr	r2, [pc, #252]	@ (8005338 <HAL_DMA_Init+0x6ac>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3e      	ldr	r2, [pc, #248]	@ (800533c <HAL_DMA_Init+0x6b0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_DMA_Init+0x5c6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3c      	ldr	r2, [pc, #240]	@ (8005340 <HAL_DMA_Init+0x6b4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d101      	bne.n	8005256 <HAL_DMA_Init+0x5ca>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_DMA_Init+0x5cc>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d032      	beq.n	80052c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f002 fa4f 	bl	8007700 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b80      	cmp	r3, #128	@ 0x80
 8005268:	d102      	bne.n	8005270 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005284:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d010      	beq.n	80052b0 <HAL_DMA_Init+0x624>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b08      	cmp	r3, #8
 8005294:	d80c      	bhi.n	80052b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f002 facc 	bl	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	e008      	b.n	80052c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	a7fdabf8 	.word	0xa7fdabf8
 80052e0:	cccccccd 	.word	0xcccccccd
 80052e4:	40020010 	.word	0x40020010
 80052e8:	40020028 	.word	0x40020028
 80052ec:	40020040 	.word	0x40020040
 80052f0:	40020058 	.word	0x40020058
 80052f4:	40020070 	.word	0x40020070
 80052f8:	40020088 	.word	0x40020088
 80052fc:	400200a0 	.word	0x400200a0
 8005300:	400200b8 	.word	0x400200b8
 8005304:	40020410 	.word	0x40020410
 8005308:	40020428 	.word	0x40020428
 800530c:	40020440 	.word	0x40020440
 8005310:	40020458 	.word	0x40020458
 8005314:	40020470 	.word	0x40020470
 8005318:	40020488 	.word	0x40020488
 800531c:	400204a0 	.word	0x400204a0
 8005320:	400204b8 	.word	0x400204b8
 8005324:	58025408 	.word	0x58025408
 8005328:	5802541c 	.word	0x5802541c
 800532c:	58025430 	.word	0x58025430
 8005330:	58025444 	.word	0x58025444
 8005334:	58025458 	.word	0x58025458
 8005338:	5802546c 	.word	0x5802546c
 800533c:	58025480 	.word	0x58025480
 8005340:	58025494 	.word	0x58025494

08005344 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e226      	b.n	80057ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_DMA_Start_IT+0x2a>
 800536a:	2302      	movs	r3, #2
 800536c:	e21f      	b.n	80057ae <HAL_DMA_Start_IT+0x46a>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	f040 820a 	bne.w	8005798 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a68      	ldr	r2, [pc, #416]	@ (8005538 <HAL_DMA_Start_IT+0x1f4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d04a      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a66      	ldr	r2, [pc, #408]	@ (800553c <HAL_DMA_Start_IT+0x1f8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d045      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a65      	ldr	r2, [pc, #404]	@ (8005540 <HAL_DMA_Start_IT+0x1fc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d040      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a63      	ldr	r2, [pc, #396]	@ (8005544 <HAL_DMA_Start_IT+0x200>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d03b      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a62      	ldr	r2, [pc, #392]	@ (8005548 <HAL_DMA_Start_IT+0x204>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d036      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a60      	ldr	r2, [pc, #384]	@ (800554c <HAL_DMA_Start_IT+0x208>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d031      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a5f      	ldr	r2, [pc, #380]	@ (8005550 <HAL_DMA_Start_IT+0x20c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d02c      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005554 <HAL_DMA_Start_IT+0x210>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d027      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a5c      	ldr	r2, [pc, #368]	@ (8005558 <HAL_DMA_Start_IT+0x214>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d022      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a5a      	ldr	r2, [pc, #360]	@ (800555c <HAL_DMA_Start_IT+0x218>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01d      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a59      	ldr	r2, [pc, #356]	@ (8005560 <HAL_DMA_Start_IT+0x21c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d018      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a57      	ldr	r2, [pc, #348]	@ (8005564 <HAL_DMA_Start_IT+0x220>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a56      	ldr	r2, [pc, #344]	@ (8005568 <HAL_DMA_Start_IT+0x224>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00e      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a54      	ldr	r2, [pc, #336]	@ (800556c <HAL_DMA_Start_IT+0x228>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d009      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a53      	ldr	r2, [pc, #332]	@ (8005570 <HAL_DMA_Start_IT+0x22c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <HAL_DMA_Start_IT+0xee>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a51      	ldr	r2, [pc, #324]	@ (8005574 <HAL_DMA_Start_IT+0x230>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d108      	bne.n	8005444 <HAL_DMA_Start_IT+0x100>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e007      	b.n	8005454 <HAL_DMA_Start_IT+0x110>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f001 fe76 	bl	800714c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a34      	ldr	r2, [pc, #208]	@ (8005538 <HAL_DMA_Start_IT+0x1f4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d04a      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a33      	ldr	r2, [pc, #204]	@ (800553c <HAL_DMA_Start_IT+0x1f8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d045      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a31      	ldr	r2, [pc, #196]	@ (8005540 <HAL_DMA_Start_IT+0x1fc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d040      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a30      	ldr	r2, [pc, #192]	@ (8005544 <HAL_DMA_Start_IT+0x200>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d03b      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a2e      	ldr	r2, [pc, #184]	@ (8005548 <HAL_DMA_Start_IT+0x204>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d036      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2d      	ldr	r2, [pc, #180]	@ (800554c <HAL_DMA_Start_IT+0x208>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d031      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005550 <HAL_DMA_Start_IT+0x20c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d02c      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005554 <HAL_DMA_Start_IT+0x210>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d027      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a28      	ldr	r2, [pc, #160]	@ (8005558 <HAL_DMA_Start_IT+0x214>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d022      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a27      	ldr	r2, [pc, #156]	@ (800555c <HAL_DMA_Start_IT+0x218>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d01d      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a25      	ldr	r2, [pc, #148]	@ (8005560 <HAL_DMA_Start_IT+0x21c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d018      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a24      	ldr	r2, [pc, #144]	@ (8005564 <HAL_DMA_Start_IT+0x220>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a22      	ldr	r2, [pc, #136]	@ (8005568 <HAL_DMA_Start_IT+0x224>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00e      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a21      	ldr	r2, [pc, #132]	@ (800556c <HAL_DMA_Start_IT+0x228>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d009      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005570 <HAL_DMA_Start_IT+0x22c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_DMA_Start_IT+0x1bc>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005574 <HAL_DMA_Start_IT+0x230>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_DMA_Start_IT+0x1c0>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_DMA_Start_IT+0x1c2>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d036      	beq.n	8005578 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f023 021e 	bic.w	r2, r3, #30
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0216 	orr.w	r2, r2, #22
 800551c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d03e      	beq.n	80055a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0208 	orr.w	r2, r2, #8
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e035      	b.n	80055a4 <HAL_DMA_Start_IT+0x260>
 8005538:	40020010 	.word	0x40020010
 800553c:	40020028 	.word	0x40020028
 8005540:	40020040 	.word	0x40020040
 8005544:	40020058 	.word	0x40020058
 8005548:	40020070 	.word	0x40020070
 800554c:	40020088 	.word	0x40020088
 8005550:	400200a0 	.word	0x400200a0
 8005554:	400200b8 	.word	0x400200b8
 8005558:	40020410 	.word	0x40020410
 800555c:	40020428 	.word	0x40020428
 8005560:	40020440 	.word	0x40020440
 8005564:	40020458 	.word	0x40020458
 8005568:	40020470 	.word	0x40020470
 800556c:	40020488 	.word	0x40020488
 8005570:	400204a0 	.word	0x400204a0
 8005574:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 020e 	bic.w	r2, r3, #14
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 020a 	orr.w	r2, r2, #10
 800558a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0204 	orr.w	r2, r2, #4
 80055a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a83      	ldr	r2, [pc, #524]	@ (80057b8 <HAL_DMA_Start_IT+0x474>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d072      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a82      	ldr	r2, [pc, #520]	@ (80057bc <HAL_DMA_Start_IT+0x478>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d06d      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a80      	ldr	r2, [pc, #512]	@ (80057c0 <HAL_DMA_Start_IT+0x47c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d068      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a7f      	ldr	r2, [pc, #508]	@ (80057c4 <HAL_DMA_Start_IT+0x480>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d063      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a7d      	ldr	r2, [pc, #500]	@ (80057c8 <HAL_DMA_Start_IT+0x484>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d05e      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a7c      	ldr	r2, [pc, #496]	@ (80057cc <HAL_DMA_Start_IT+0x488>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d059      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a7a      	ldr	r2, [pc, #488]	@ (80057d0 <HAL_DMA_Start_IT+0x48c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d054      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a79      	ldr	r2, [pc, #484]	@ (80057d4 <HAL_DMA_Start_IT+0x490>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d04f      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a77      	ldr	r2, [pc, #476]	@ (80057d8 <HAL_DMA_Start_IT+0x494>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d04a      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a76      	ldr	r2, [pc, #472]	@ (80057dc <HAL_DMA_Start_IT+0x498>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d045      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a74      	ldr	r2, [pc, #464]	@ (80057e0 <HAL_DMA_Start_IT+0x49c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d040      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a73      	ldr	r2, [pc, #460]	@ (80057e4 <HAL_DMA_Start_IT+0x4a0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d03b      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a71      	ldr	r2, [pc, #452]	@ (80057e8 <HAL_DMA_Start_IT+0x4a4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d036      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a70      	ldr	r2, [pc, #448]	@ (80057ec <HAL_DMA_Start_IT+0x4a8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d031      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a6e      	ldr	r2, [pc, #440]	@ (80057f0 <HAL_DMA_Start_IT+0x4ac>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d02c      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a6d      	ldr	r2, [pc, #436]	@ (80057f4 <HAL_DMA_Start_IT+0x4b0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d027      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a6b      	ldr	r2, [pc, #428]	@ (80057f8 <HAL_DMA_Start_IT+0x4b4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d022      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a6a      	ldr	r2, [pc, #424]	@ (80057fc <HAL_DMA_Start_IT+0x4b8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d01d      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a68      	ldr	r2, [pc, #416]	@ (8005800 <HAL_DMA_Start_IT+0x4bc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d018      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a67      	ldr	r2, [pc, #412]	@ (8005804 <HAL_DMA_Start_IT+0x4c0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a65      	ldr	r2, [pc, #404]	@ (8005808 <HAL_DMA_Start_IT+0x4c4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a64      	ldr	r2, [pc, #400]	@ (800580c <HAL_DMA_Start_IT+0x4c8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a62      	ldr	r2, [pc, #392]	@ (8005810 <HAL_DMA_Start_IT+0x4cc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_DMA_Start_IT+0x350>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a61      	ldr	r2, [pc, #388]	@ (8005814 <HAL_DMA_Start_IT+0x4d0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d101      	bne.n	8005698 <HAL_DMA_Start_IT+0x354>
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <HAL_DMA_Start_IT+0x356>
 8005698:	2300      	movs	r3, #0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01a      	beq.n	80056d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a37      	ldr	r2, [pc, #220]	@ (80057b8 <HAL_DMA_Start_IT+0x474>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d04a      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a36      	ldr	r2, [pc, #216]	@ (80057bc <HAL_DMA_Start_IT+0x478>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d045      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a34      	ldr	r2, [pc, #208]	@ (80057c0 <HAL_DMA_Start_IT+0x47c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d040      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a33      	ldr	r2, [pc, #204]	@ (80057c4 <HAL_DMA_Start_IT+0x480>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d03b      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a31      	ldr	r2, [pc, #196]	@ (80057c8 <HAL_DMA_Start_IT+0x484>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d036      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a30      	ldr	r2, [pc, #192]	@ (80057cc <HAL_DMA_Start_IT+0x488>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d031      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2e      	ldr	r2, [pc, #184]	@ (80057d0 <HAL_DMA_Start_IT+0x48c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d02c      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2d      	ldr	r2, [pc, #180]	@ (80057d4 <HAL_DMA_Start_IT+0x490>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d027      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2b      	ldr	r2, [pc, #172]	@ (80057d8 <HAL_DMA_Start_IT+0x494>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d022      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2a      	ldr	r2, [pc, #168]	@ (80057dc <HAL_DMA_Start_IT+0x498>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d01d      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a28      	ldr	r2, [pc, #160]	@ (80057e0 <HAL_DMA_Start_IT+0x49c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d018      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a27      	ldr	r2, [pc, #156]	@ (80057e4 <HAL_DMA_Start_IT+0x4a0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a25      	ldr	r2, [pc, #148]	@ (80057e8 <HAL_DMA_Start_IT+0x4a4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00e      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a24      	ldr	r2, [pc, #144]	@ (80057ec <HAL_DMA_Start_IT+0x4a8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d009      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a22      	ldr	r2, [pc, #136]	@ (80057f0 <HAL_DMA_Start_IT+0x4ac>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <HAL_DMA_Start_IT+0x430>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a21      	ldr	r2, [pc, #132]	@ (80057f4 <HAL_DMA_Start_IT+0x4b0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d108      	bne.n	8005786 <HAL_DMA_Start_IT+0x442>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e012      	b.n	80057ac <HAL_DMA_Start_IT+0x468>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e009      	b.n	80057ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800579e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40020010 	.word	0x40020010
 80057bc:	40020028 	.word	0x40020028
 80057c0:	40020040 	.word	0x40020040
 80057c4:	40020058 	.word	0x40020058
 80057c8:	40020070 	.word	0x40020070
 80057cc:	40020088 	.word	0x40020088
 80057d0:	400200a0 	.word	0x400200a0
 80057d4:	400200b8 	.word	0x400200b8
 80057d8:	40020410 	.word	0x40020410
 80057dc:	40020428 	.word	0x40020428
 80057e0:	40020440 	.word	0x40020440
 80057e4:	40020458 	.word	0x40020458
 80057e8:	40020470 	.word	0x40020470
 80057ec:	40020488 	.word	0x40020488
 80057f0:	400204a0 	.word	0x400204a0
 80057f4:	400204b8 	.word	0x400204b8
 80057f8:	58025408 	.word	0x58025408
 80057fc:	5802541c 	.word	0x5802541c
 8005800:	58025430 	.word	0x58025430
 8005804:	58025444 	.word	0x58025444
 8005808:	58025458 	.word	0x58025458
 800580c:	5802546c 	.word	0x5802546c
 8005810:	58025480 	.word	0x58025480
 8005814:	58025494 	.word	0x58025494

08005818 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005820:	f7fd fe22 	bl	8003468 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e2dc      	b.n	8005dea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d008      	beq.n	800584e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2280      	movs	r2, #128	@ 0x80
 8005840:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e2cd      	b.n	8005dea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a76      	ldr	r2, [pc, #472]	@ (8005a2c <HAL_DMA_Abort+0x214>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d04a      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a74      	ldr	r2, [pc, #464]	@ (8005a30 <HAL_DMA_Abort+0x218>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d045      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a73      	ldr	r2, [pc, #460]	@ (8005a34 <HAL_DMA_Abort+0x21c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d040      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a71      	ldr	r2, [pc, #452]	@ (8005a38 <HAL_DMA_Abort+0x220>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d03b      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a70      	ldr	r2, [pc, #448]	@ (8005a3c <HAL_DMA_Abort+0x224>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d036      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6e      	ldr	r2, [pc, #440]	@ (8005a40 <HAL_DMA_Abort+0x228>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d031      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a6d      	ldr	r2, [pc, #436]	@ (8005a44 <HAL_DMA_Abort+0x22c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d02c      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a6b      	ldr	r2, [pc, #428]	@ (8005a48 <HAL_DMA_Abort+0x230>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d027      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6a      	ldr	r2, [pc, #424]	@ (8005a4c <HAL_DMA_Abort+0x234>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a68      	ldr	r2, [pc, #416]	@ (8005a50 <HAL_DMA_Abort+0x238>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01d      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a67      	ldr	r2, [pc, #412]	@ (8005a54 <HAL_DMA_Abort+0x23c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a65      	ldr	r2, [pc, #404]	@ (8005a58 <HAL_DMA_Abort+0x240>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a64      	ldr	r2, [pc, #400]	@ (8005a5c <HAL_DMA_Abort+0x244>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a62      	ldr	r2, [pc, #392]	@ (8005a60 <HAL_DMA_Abort+0x248>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a61      	ldr	r2, [pc, #388]	@ (8005a64 <HAL_DMA_Abort+0x24c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_DMA_Abort+0xd6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a5f      	ldr	r2, [pc, #380]	@ (8005a68 <HAL_DMA_Abort+0x250>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d101      	bne.n	80058f2 <HAL_DMA_Abort+0xda>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <HAL_DMA_Abort+0xdc>
 80058f2:	2300      	movs	r3, #0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d013      	beq.n	8005920 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 021e 	bic.w	r2, r2, #30
 8005906:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005916:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e00a      	b.n	8005936 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 020e 	bic.w	r2, r2, #14
 800592e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a3c      	ldr	r2, [pc, #240]	@ (8005a2c <HAL_DMA_Abort+0x214>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d072      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a3a      	ldr	r2, [pc, #232]	@ (8005a30 <HAL_DMA_Abort+0x218>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d06d      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a39      	ldr	r2, [pc, #228]	@ (8005a34 <HAL_DMA_Abort+0x21c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d068      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a37      	ldr	r2, [pc, #220]	@ (8005a38 <HAL_DMA_Abort+0x220>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d063      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a36      	ldr	r2, [pc, #216]	@ (8005a3c <HAL_DMA_Abort+0x224>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d05e      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a34      	ldr	r2, [pc, #208]	@ (8005a40 <HAL_DMA_Abort+0x228>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d059      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a33      	ldr	r2, [pc, #204]	@ (8005a44 <HAL_DMA_Abort+0x22c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d054      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a31      	ldr	r2, [pc, #196]	@ (8005a48 <HAL_DMA_Abort+0x230>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d04f      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a30      	ldr	r2, [pc, #192]	@ (8005a4c <HAL_DMA_Abort+0x234>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d04a      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2e      	ldr	r2, [pc, #184]	@ (8005a50 <HAL_DMA_Abort+0x238>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d045      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2d      	ldr	r2, [pc, #180]	@ (8005a54 <HAL_DMA_Abort+0x23c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d040      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a58 <HAL_DMA_Abort+0x240>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d03b      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a5c <HAL_DMA_Abort+0x244>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d036      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a28      	ldr	r2, [pc, #160]	@ (8005a60 <HAL_DMA_Abort+0x248>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d031      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a27      	ldr	r2, [pc, #156]	@ (8005a64 <HAL_DMA_Abort+0x24c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d02c      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a25      	ldr	r2, [pc, #148]	@ (8005a68 <HAL_DMA_Abort+0x250>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d027      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a24      	ldr	r2, [pc, #144]	@ (8005a6c <HAL_DMA_Abort+0x254>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a22      	ldr	r2, [pc, #136]	@ (8005a70 <HAL_DMA_Abort+0x258>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01d      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a21      	ldr	r2, [pc, #132]	@ (8005a74 <HAL_DMA_Abort+0x25c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d018      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a78 <HAL_DMA_Abort+0x260>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1e      	ldr	r2, [pc, #120]	@ (8005a7c <HAL_DMA_Abort+0x264>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005a80 <HAL_DMA_Abort+0x268>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <HAL_DMA_Abort+0x26c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_DMA_Abort+0x20e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a19      	ldr	r2, [pc, #100]	@ (8005a88 <HAL_DMA_Abort+0x270>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d132      	bne.n	8005a8c <HAL_DMA_Abort+0x274>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e031      	b.n	8005a8e <HAL_DMA_Abort+0x276>
 8005a2a:	bf00      	nop
 8005a2c:	40020010 	.word	0x40020010
 8005a30:	40020028 	.word	0x40020028
 8005a34:	40020040 	.word	0x40020040
 8005a38:	40020058 	.word	0x40020058
 8005a3c:	40020070 	.word	0x40020070
 8005a40:	40020088 	.word	0x40020088
 8005a44:	400200a0 	.word	0x400200a0
 8005a48:	400200b8 	.word	0x400200b8
 8005a4c:	40020410 	.word	0x40020410
 8005a50:	40020428 	.word	0x40020428
 8005a54:	40020440 	.word	0x40020440
 8005a58:	40020458 	.word	0x40020458
 8005a5c:	40020470 	.word	0x40020470
 8005a60:	40020488 	.word	0x40020488
 8005a64:	400204a0 	.word	0x400204a0
 8005a68:	400204b8 	.word	0x400204b8
 8005a6c:	58025408 	.word	0x58025408
 8005a70:	5802541c 	.word	0x5802541c
 8005a74:	58025430 	.word	0x58025430
 8005a78:	58025444 	.word	0x58025444
 8005a7c:	58025458 	.word	0x58025458
 8005a80:	5802546c 	.word	0x5802546c
 8005a84:	58025480 	.word	0x58025480
 8005a88:	58025494 	.word	0x58025494
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005aa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a6d      	ldr	r2, [pc, #436]	@ (8005c5c <HAL_DMA_Abort+0x444>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d04a      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8005c60 <HAL_DMA_Abort+0x448>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d045      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a6a      	ldr	r2, [pc, #424]	@ (8005c64 <HAL_DMA_Abort+0x44c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d040      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a68      	ldr	r2, [pc, #416]	@ (8005c68 <HAL_DMA_Abort+0x450>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d03b      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a67      	ldr	r2, [pc, #412]	@ (8005c6c <HAL_DMA_Abort+0x454>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d036      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a65      	ldr	r2, [pc, #404]	@ (8005c70 <HAL_DMA_Abort+0x458>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d031      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a64      	ldr	r2, [pc, #400]	@ (8005c74 <HAL_DMA_Abort+0x45c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d02c      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a62      	ldr	r2, [pc, #392]	@ (8005c78 <HAL_DMA_Abort+0x460>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d027      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a61      	ldr	r2, [pc, #388]	@ (8005c7c <HAL_DMA_Abort+0x464>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a5f      	ldr	r2, [pc, #380]	@ (8005c80 <HAL_DMA_Abort+0x468>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01d      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8005c84 <HAL_DMA_Abort+0x46c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d018      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a5c      	ldr	r2, [pc, #368]	@ (8005c88 <HAL_DMA_Abort+0x470>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a5b      	ldr	r2, [pc, #364]	@ (8005c8c <HAL_DMA_Abort+0x474>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a59      	ldr	r2, [pc, #356]	@ (8005c90 <HAL_DMA_Abort+0x478>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a58      	ldr	r2, [pc, #352]	@ (8005c94 <HAL_DMA_Abort+0x47c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_DMA_Abort+0x32a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a56      	ldr	r2, [pc, #344]	@ (8005c98 <HAL_DMA_Abort+0x480>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d108      	bne.n	8005b54 <HAL_DMA_Abort+0x33c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e007      	b.n	8005b64 <HAL_DMA_Abort+0x34c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0201 	bic.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b64:	e013      	b.n	8005b8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b66:	f7fd fc7f 	bl	8003468 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b05      	cmp	r3, #5
 8005b72:	d90c      	bls.n	8005b8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e12d      	b.n	8005dea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e5      	bne.n	8005b66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8005c5c <HAL_DMA_Abort+0x444>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d04a      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8005c60 <HAL_DMA_Abort+0x448>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d045      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005c64 <HAL_DMA_Abort+0x44c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d040      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8005c68 <HAL_DMA_Abort+0x450>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d03b      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a29      	ldr	r2, [pc, #164]	@ (8005c6c <HAL_DMA_Abort+0x454>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d036      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a27      	ldr	r2, [pc, #156]	@ (8005c70 <HAL_DMA_Abort+0x458>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d031      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a26      	ldr	r2, [pc, #152]	@ (8005c74 <HAL_DMA_Abort+0x45c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d02c      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a24      	ldr	r2, [pc, #144]	@ (8005c78 <HAL_DMA_Abort+0x460>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d027      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a23      	ldr	r2, [pc, #140]	@ (8005c7c <HAL_DMA_Abort+0x464>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d022      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a21      	ldr	r2, [pc, #132]	@ (8005c80 <HAL_DMA_Abort+0x468>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d01d      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a20      	ldr	r2, [pc, #128]	@ (8005c84 <HAL_DMA_Abort+0x46c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d018      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005c88 <HAL_DMA_Abort+0x470>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1d      	ldr	r2, [pc, #116]	@ (8005c8c <HAL_DMA_Abort+0x474>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00e      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1b      	ldr	r2, [pc, #108]	@ (8005c90 <HAL_DMA_Abort+0x478>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005c94 <HAL_DMA_Abort+0x47c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d004      	beq.n	8005c3a <HAL_DMA_Abort+0x422>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a18      	ldr	r2, [pc, #96]	@ (8005c98 <HAL_DMA_Abort+0x480>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d101      	bne.n	8005c3e <HAL_DMA_Abort+0x426>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <HAL_DMA_Abort+0x428>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d02b      	beq.n	8005c9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	223f      	movs	r2, #63	@ 0x3f
 8005c54:	409a      	lsls	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	609a      	str	r2, [r3, #8]
 8005c5a:	e02a      	b.n	8005cb2 <HAL_DMA_Abort+0x49a>
 8005c5c:	40020010 	.word	0x40020010
 8005c60:	40020028 	.word	0x40020028
 8005c64:	40020040 	.word	0x40020040
 8005c68:	40020058 	.word	0x40020058
 8005c6c:	40020070 	.word	0x40020070
 8005c70:	40020088 	.word	0x40020088
 8005c74:	400200a0 	.word	0x400200a0
 8005c78:	400200b8 	.word	0x400200b8
 8005c7c:	40020410 	.word	0x40020410
 8005c80:	40020428 	.word	0x40020428
 8005c84:	40020440 	.word	0x40020440
 8005c88:	40020458 	.word	0x40020458
 8005c8c:	40020470 	.word	0x40020470
 8005c90:	40020488 	.word	0x40020488
 8005c94:	400204a0 	.word	0x400204a0
 8005c98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2201      	movs	r2, #1
 8005cac:	409a      	lsls	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a4f      	ldr	r2, [pc, #316]	@ (8005df4 <HAL_DMA_Abort+0x5dc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d072      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8005df8 <HAL_DMA_Abort+0x5e0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d06d      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a4c      	ldr	r2, [pc, #304]	@ (8005dfc <HAL_DMA_Abort+0x5e4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d068      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8005e00 <HAL_DMA_Abort+0x5e8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d063      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a49      	ldr	r2, [pc, #292]	@ (8005e04 <HAL_DMA_Abort+0x5ec>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d05e      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a47      	ldr	r2, [pc, #284]	@ (8005e08 <HAL_DMA_Abort+0x5f0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d059      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a46      	ldr	r2, [pc, #280]	@ (8005e0c <HAL_DMA_Abort+0x5f4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d054      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a44      	ldr	r2, [pc, #272]	@ (8005e10 <HAL_DMA_Abort+0x5f8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d04f      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a43      	ldr	r2, [pc, #268]	@ (8005e14 <HAL_DMA_Abort+0x5fc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d04a      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a41      	ldr	r2, [pc, #260]	@ (8005e18 <HAL_DMA_Abort+0x600>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d045      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a40      	ldr	r2, [pc, #256]	@ (8005e1c <HAL_DMA_Abort+0x604>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d040      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a3e      	ldr	r2, [pc, #248]	@ (8005e20 <HAL_DMA_Abort+0x608>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d03b      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8005e24 <HAL_DMA_Abort+0x60c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d036      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a3b      	ldr	r2, [pc, #236]	@ (8005e28 <HAL_DMA_Abort+0x610>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d031      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3a      	ldr	r2, [pc, #232]	@ (8005e2c <HAL_DMA_Abort+0x614>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d02c      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a38      	ldr	r2, [pc, #224]	@ (8005e30 <HAL_DMA_Abort+0x618>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d027      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a37      	ldr	r2, [pc, #220]	@ (8005e34 <HAL_DMA_Abort+0x61c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d022      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a35      	ldr	r2, [pc, #212]	@ (8005e38 <HAL_DMA_Abort+0x620>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01d      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a34      	ldr	r2, [pc, #208]	@ (8005e3c <HAL_DMA_Abort+0x624>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d018      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a32      	ldr	r2, [pc, #200]	@ (8005e40 <HAL_DMA_Abort+0x628>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a31      	ldr	r2, [pc, #196]	@ (8005e44 <HAL_DMA_Abort+0x62c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a2f      	ldr	r2, [pc, #188]	@ (8005e48 <HAL_DMA_Abort+0x630>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a2e      	ldr	r2, [pc, #184]	@ (8005e4c <HAL_DMA_Abort+0x634>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_DMA_Abort+0x58a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e50 <HAL_DMA_Abort+0x638>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d101      	bne.n	8005da6 <HAL_DMA_Abort+0x58e>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <HAL_DMA_Abort+0x590>
 8005da6:	2300      	movs	r3, #0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d015      	beq.n	8005dd8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005db4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dcc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005dd6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40020010 	.word	0x40020010
 8005df8:	40020028 	.word	0x40020028
 8005dfc:	40020040 	.word	0x40020040
 8005e00:	40020058 	.word	0x40020058
 8005e04:	40020070 	.word	0x40020070
 8005e08:	40020088 	.word	0x40020088
 8005e0c:	400200a0 	.word	0x400200a0
 8005e10:	400200b8 	.word	0x400200b8
 8005e14:	40020410 	.word	0x40020410
 8005e18:	40020428 	.word	0x40020428
 8005e1c:	40020440 	.word	0x40020440
 8005e20:	40020458 	.word	0x40020458
 8005e24:	40020470 	.word	0x40020470
 8005e28:	40020488 	.word	0x40020488
 8005e2c:	400204a0 	.word	0x400204a0
 8005e30:	400204b8 	.word	0x400204b8
 8005e34:	58025408 	.word	0x58025408
 8005e38:	5802541c 	.word	0x5802541c
 8005e3c:	58025430 	.word	0x58025430
 8005e40:	58025444 	.word	0x58025444
 8005e44:	58025458 	.word	0x58025458
 8005e48:	5802546c 	.word	0x5802546c
 8005e4c:	58025480 	.word	0x58025480
 8005e50:	58025494 	.word	0x58025494

08005e54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e237      	b.n	80062d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d004      	beq.n	8005e7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2280      	movs	r2, #128	@ 0x80
 8005e76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e22c      	b.n	80062d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a5c      	ldr	r2, [pc, #368]	@ (8005ff4 <HAL_DMA_Abort_IT+0x1a0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d04a      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ff8 <HAL_DMA_Abort_IT+0x1a4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d045      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a59      	ldr	r2, [pc, #356]	@ (8005ffc <HAL_DMA_Abort_IT+0x1a8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d040      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a58      	ldr	r2, [pc, #352]	@ (8006000 <HAL_DMA_Abort_IT+0x1ac>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d03b      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a56      	ldr	r2, [pc, #344]	@ (8006004 <HAL_DMA_Abort_IT+0x1b0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d036      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a55      	ldr	r2, [pc, #340]	@ (8006008 <HAL_DMA_Abort_IT+0x1b4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d031      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a53      	ldr	r2, [pc, #332]	@ (800600c <HAL_DMA_Abort_IT+0x1b8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d02c      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a52      	ldr	r2, [pc, #328]	@ (8006010 <HAL_DMA_Abort_IT+0x1bc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d027      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a50      	ldr	r2, [pc, #320]	@ (8006014 <HAL_DMA_Abort_IT+0x1c0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d022      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a4f      	ldr	r2, [pc, #316]	@ (8006018 <HAL_DMA_Abort_IT+0x1c4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d01d      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a4d      	ldr	r2, [pc, #308]	@ (800601c <HAL_DMA_Abort_IT+0x1c8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d018      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a4c      	ldr	r2, [pc, #304]	@ (8006020 <HAL_DMA_Abort_IT+0x1cc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d013      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8006024 <HAL_DMA_Abort_IT+0x1d0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00e      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a49      	ldr	r2, [pc, #292]	@ (8006028 <HAL_DMA_Abort_IT+0x1d4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d009      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a47      	ldr	r2, [pc, #284]	@ (800602c <HAL_DMA_Abort_IT+0x1d8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d004      	beq.n	8005f1c <HAL_DMA_Abort_IT+0xc8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a46      	ldr	r2, [pc, #280]	@ (8006030 <HAL_DMA_Abort_IT+0x1dc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d101      	bne.n	8005f20 <HAL_DMA_Abort_IT+0xcc>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <HAL_DMA_Abort_IT+0xce>
 8005f20:	2300      	movs	r3, #0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8086 	beq.w	8006034 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2f      	ldr	r2, [pc, #188]	@ (8005ff4 <HAL_DMA_Abort_IT+0x1a0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d04a      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ff8 <HAL_DMA_Abort_IT+0x1a4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d045      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a2c      	ldr	r2, [pc, #176]	@ (8005ffc <HAL_DMA_Abort_IT+0x1a8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d040      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2b      	ldr	r2, [pc, #172]	@ (8006000 <HAL_DMA_Abort_IT+0x1ac>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d03b      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a29      	ldr	r2, [pc, #164]	@ (8006004 <HAL_DMA_Abort_IT+0x1b0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d036      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a28      	ldr	r2, [pc, #160]	@ (8006008 <HAL_DMA_Abort_IT+0x1b4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d031      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a26      	ldr	r2, [pc, #152]	@ (800600c <HAL_DMA_Abort_IT+0x1b8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d02c      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a25      	ldr	r2, [pc, #148]	@ (8006010 <HAL_DMA_Abort_IT+0x1bc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d027      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a23      	ldr	r2, [pc, #140]	@ (8006014 <HAL_DMA_Abort_IT+0x1c0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d022      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a22      	ldr	r2, [pc, #136]	@ (8006018 <HAL_DMA_Abort_IT+0x1c4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d01d      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a20      	ldr	r2, [pc, #128]	@ (800601c <HAL_DMA_Abort_IT+0x1c8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <HAL_DMA_Abort_IT+0x1cc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1d      	ldr	r2, [pc, #116]	@ (8006024 <HAL_DMA_Abort_IT+0x1d0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8006028 <HAL_DMA_Abort_IT+0x1d4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800602c <HAL_DMA_Abort_IT+0x1d8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x17c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a19      	ldr	r2, [pc, #100]	@ (8006030 <HAL_DMA_Abort_IT+0x1dc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d108      	bne.n	8005fe2 <HAL_DMA_Abort_IT+0x18e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0201 	bic.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e178      	b.n	80062d4 <HAL_DMA_Abort_IT+0x480>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0201 	bic.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e16f      	b.n	80062d4 <HAL_DMA_Abort_IT+0x480>
 8005ff4:	40020010 	.word	0x40020010
 8005ff8:	40020028 	.word	0x40020028
 8005ffc:	40020040 	.word	0x40020040
 8006000:	40020058 	.word	0x40020058
 8006004:	40020070 	.word	0x40020070
 8006008:	40020088 	.word	0x40020088
 800600c:	400200a0 	.word	0x400200a0
 8006010:	400200b8 	.word	0x400200b8
 8006014:	40020410 	.word	0x40020410
 8006018:	40020428 	.word	0x40020428
 800601c:	40020440 	.word	0x40020440
 8006020:	40020458 	.word	0x40020458
 8006024:	40020470 	.word	0x40020470
 8006028:	40020488 	.word	0x40020488
 800602c:	400204a0 	.word	0x400204a0
 8006030:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 020e 	bic.w	r2, r2, #14
 8006042:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6c      	ldr	r2, [pc, #432]	@ (80061fc <HAL_DMA_Abort_IT+0x3a8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d04a      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a6b      	ldr	r2, [pc, #428]	@ (8006200 <HAL_DMA_Abort_IT+0x3ac>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d045      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a69      	ldr	r2, [pc, #420]	@ (8006204 <HAL_DMA_Abort_IT+0x3b0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d040      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a68      	ldr	r2, [pc, #416]	@ (8006208 <HAL_DMA_Abort_IT+0x3b4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d03b      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a66      	ldr	r2, [pc, #408]	@ (800620c <HAL_DMA_Abort_IT+0x3b8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d036      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a65      	ldr	r2, [pc, #404]	@ (8006210 <HAL_DMA_Abort_IT+0x3bc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d031      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a63      	ldr	r2, [pc, #396]	@ (8006214 <HAL_DMA_Abort_IT+0x3c0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02c      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a62      	ldr	r2, [pc, #392]	@ (8006218 <HAL_DMA_Abort_IT+0x3c4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d027      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a60      	ldr	r2, [pc, #384]	@ (800621c <HAL_DMA_Abort_IT+0x3c8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d022      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a5f      	ldr	r2, [pc, #380]	@ (8006220 <HAL_DMA_Abort_IT+0x3cc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d01d      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006224 <HAL_DMA_Abort_IT+0x3d0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a5c      	ldr	r2, [pc, #368]	@ (8006228 <HAL_DMA_Abort_IT+0x3d4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a5a      	ldr	r2, [pc, #360]	@ (800622c <HAL_DMA_Abort_IT+0x3d8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a59      	ldr	r2, [pc, #356]	@ (8006230 <HAL_DMA_Abort_IT+0x3dc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a57      	ldr	r2, [pc, #348]	@ (8006234 <HAL_DMA_Abort_IT+0x3e0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_DMA_Abort_IT+0x290>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a56      	ldr	r2, [pc, #344]	@ (8006238 <HAL_DMA_Abort_IT+0x3e4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d108      	bne.n	80060f6 <HAL_DMA_Abort_IT+0x2a2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0201 	bic.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e007      	b.n	8006106 <HAL_DMA_Abort_IT+0x2b2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0201 	bic.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3c      	ldr	r2, [pc, #240]	@ (80061fc <HAL_DMA_Abort_IT+0x3a8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d072      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a3a      	ldr	r2, [pc, #232]	@ (8006200 <HAL_DMA_Abort_IT+0x3ac>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d06d      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a39      	ldr	r2, [pc, #228]	@ (8006204 <HAL_DMA_Abort_IT+0x3b0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d068      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a37      	ldr	r2, [pc, #220]	@ (8006208 <HAL_DMA_Abort_IT+0x3b4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d063      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a36      	ldr	r2, [pc, #216]	@ (800620c <HAL_DMA_Abort_IT+0x3b8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d05e      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a34      	ldr	r2, [pc, #208]	@ (8006210 <HAL_DMA_Abort_IT+0x3bc>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d059      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a33      	ldr	r2, [pc, #204]	@ (8006214 <HAL_DMA_Abort_IT+0x3c0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d054      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a31      	ldr	r2, [pc, #196]	@ (8006218 <HAL_DMA_Abort_IT+0x3c4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d04f      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a30      	ldr	r2, [pc, #192]	@ (800621c <HAL_DMA_Abort_IT+0x3c8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d04a      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2e      	ldr	r2, [pc, #184]	@ (8006220 <HAL_DMA_Abort_IT+0x3cc>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d045      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2d      	ldr	r2, [pc, #180]	@ (8006224 <HAL_DMA_Abort_IT+0x3d0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d040      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a2b      	ldr	r2, [pc, #172]	@ (8006228 <HAL_DMA_Abort_IT+0x3d4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d03b      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a2a      	ldr	r2, [pc, #168]	@ (800622c <HAL_DMA_Abort_IT+0x3d8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d036      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a28      	ldr	r2, [pc, #160]	@ (8006230 <HAL_DMA_Abort_IT+0x3dc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d031      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a27      	ldr	r2, [pc, #156]	@ (8006234 <HAL_DMA_Abort_IT+0x3e0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d02c      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a25      	ldr	r2, [pc, #148]	@ (8006238 <HAL_DMA_Abort_IT+0x3e4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d027      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a24      	ldr	r2, [pc, #144]	@ (800623c <HAL_DMA_Abort_IT+0x3e8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d022      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a22      	ldr	r2, [pc, #136]	@ (8006240 <HAL_DMA_Abort_IT+0x3ec>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01d      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a21      	ldr	r2, [pc, #132]	@ (8006244 <HAL_DMA_Abort_IT+0x3f0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d018      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006248 <HAL_DMA_Abort_IT+0x3f4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1e      	ldr	r2, [pc, #120]	@ (800624c <HAL_DMA_Abort_IT+0x3f8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006250 <HAL_DMA_Abort_IT+0x3fc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d009      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006254 <HAL_DMA_Abort_IT+0x400>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_DMA_Abort_IT+0x3a2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a19      	ldr	r2, [pc, #100]	@ (8006258 <HAL_DMA_Abort_IT+0x404>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d132      	bne.n	800625c <HAL_DMA_Abort_IT+0x408>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e031      	b.n	800625e <HAL_DMA_Abort_IT+0x40a>
 80061fa:	bf00      	nop
 80061fc:	40020010 	.word	0x40020010
 8006200:	40020028 	.word	0x40020028
 8006204:	40020040 	.word	0x40020040
 8006208:	40020058 	.word	0x40020058
 800620c:	40020070 	.word	0x40020070
 8006210:	40020088 	.word	0x40020088
 8006214:	400200a0 	.word	0x400200a0
 8006218:	400200b8 	.word	0x400200b8
 800621c:	40020410 	.word	0x40020410
 8006220:	40020428 	.word	0x40020428
 8006224:	40020440 	.word	0x40020440
 8006228:	40020458 	.word	0x40020458
 800622c:	40020470 	.word	0x40020470
 8006230:	40020488 	.word	0x40020488
 8006234:	400204a0 	.word	0x400204a0
 8006238:	400204b8 	.word	0x400204b8
 800623c:	58025408 	.word	0x58025408
 8006240:	5802541c 	.word	0x5802541c
 8006244:	58025430 	.word	0x58025430
 8006248:	58025444 	.word	0x58025444
 800624c:	58025458 	.word	0x58025458
 8006250:	5802546c 	.word	0x5802546c
 8006254:	58025480 	.word	0x58025480
 8006258:	58025494 	.word	0x58025494
 800625c:	2300      	movs	r3, #0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d028      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800626c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006270:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006276:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	2201      	movs	r2, #1
 8006282:	409a      	lsls	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006290:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00c      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80062b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop

080062e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08a      	sub	sp, #40	@ 0x28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062ec:	4b67      	ldr	r3, [pc, #412]	@ (800648c <HAL_DMA_IRQHandler+0x1ac>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a67      	ldr	r2, [pc, #412]	@ (8006490 <HAL_DMA_IRQHandler+0x1b0>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	0a9b      	lsrs	r3, r3, #10
 80062f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006304:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5f      	ldr	r2, [pc, #380]	@ (8006494 <HAL_DMA_IRQHandler+0x1b4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d04a      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5d      	ldr	r2, [pc, #372]	@ (8006498 <HAL_DMA_IRQHandler+0x1b8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d045      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a5c      	ldr	r2, [pc, #368]	@ (800649c <HAL_DMA_IRQHandler+0x1bc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d040      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a5a      	ldr	r2, [pc, #360]	@ (80064a0 <HAL_DMA_IRQHandler+0x1c0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d03b      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a59      	ldr	r2, [pc, #356]	@ (80064a4 <HAL_DMA_IRQHandler+0x1c4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d036      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a57      	ldr	r2, [pc, #348]	@ (80064a8 <HAL_DMA_IRQHandler+0x1c8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d031      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a56      	ldr	r2, [pc, #344]	@ (80064ac <HAL_DMA_IRQHandler+0x1cc>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d02c      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a54      	ldr	r2, [pc, #336]	@ (80064b0 <HAL_DMA_IRQHandler+0x1d0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d027      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a53      	ldr	r2, [pc, #332]	@ (80064b4 <HAL_DMA_IRQHandler+0x1d4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d022      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a51      	ldr	r2, [pc, #324]	@ (80064b8 <HAL_DMA_IRQHandler+0x1d8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d01d      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a50      	ldr	r2, [pc, #320]	@ (80064bc <HAL_DMA_IRQHandler+0x1dc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d018      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a4e      	ldr	r2, [pc, #312]	@ (80064c0 <HAL_DMA_IRQHandler+0x1e0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a4d      	ldr	r2, [pc, #308]	@ (80064c4 <HAL_DMA_IRQHandler+0x1e4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a4b      	ldr	r2, [pc, #300]	@ (80064c8 <HAL_DMA_IRQHandler+0x1e8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a4a      	ldr	r2, [pc, #296]	@ (80064cc <HAL_DMA_IRQHandler+0x1ec>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xd2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a48      	ldr	r2, [pc, #288]	@ (80064d0 <HAL_DMA_IRQHandler+0x1f0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d101      	bne.n	80063b6 <HAL_DMA_IRQHandler+0xd6>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <HAL_DMA_IRQHandler+0xd8>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 842b 	beq.w	8006c14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	2208      	movs	r2, #8
 80063c8:	409a      	lsls	r2, r3
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80a2 	beq.w	8006518 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006494 <HAL_DMA_IRQHandler+0x1b4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d04a      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2d      	ldr	r2, [pc, #180]	@ (8006498 <HAL_DMA_IRQHandler+0x1b8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d045      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2b      	ldr	r2, [pc, #172]	@ (800649c <HAL_DMA_IRQHandler+0x1bc>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d040      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2a      	ldr	r2, [pc, #168]	@ (80064a0 <HAL_DMA_IRQHandler+0x1c0>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d03b      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a28      	ldr	r2, [pc, #160]	@ (80064a4 <HAL_DMA_IRQHandler+0x1c4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d036      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a27      	ldr	r2, [pc, #156]	@ (80064a8 <HAL_DMA_IRQHandler+0x1c8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d031      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a25      	ldr	r2, [pc, #148]	@ (80064ac <HAL_DMA_IRQHandler+0x1cc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d02c      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a24      	ldr	r2, [pc, #144]	@ (80064b0 <HAL_DMA_IRQHandler+0x1d0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d027      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a22      	ldr	r2, [pc, #136]	@ (80064b4 <HAL_DMA_IRQHandler+0x1d4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d022      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a21      	ldr	r2, [pc, #132]	@ (80064b8 <HAL_DMA_IRQHandler+0x1d8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d01d      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1f      	ldr	r2, [pc, #124]	@ (80064bc <HAL_DMA_IRQHandler+0x1dc>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d018      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1e      	ldr	r2, [pc, #120]	@ (80064c0 <HAL_DMA_IRQHandler+0x1e0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1c      	ldr	r2, [pc, #112]	@ (80064c4 <HAL_DMA_IRQHandler+0x1e4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00e      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1b      	ldr	r2, [pc, #108]	@ (80064c8 <HAL_DMA_IRQHandler+0x1e8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d009      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a19      	ldr	r2, [pc, #100]	@ (80064cc <HAL_DMA_IRQHandler+0x1ec>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <HAL_DMA_IRQHandler+0x194>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a18      	ldr	r2, [pc, #96]	@ (80064d0 <HAL_DMA_IRQHandler+0x1f0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d12f      	bne.n	80064d4 <HAL_DMA_IRQHandler+0x1f4>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	bf14      	ite	ne
 8006482:	2301      	movne	r3, #1
 8006484:	2300      	moveq	r3, #0
 8006486:	b2db      	uxtb	r3, r3
 8006488:	e02e      	b.n	80064e8 <HAL_DMA_IRQHandler+0x208>
 800648a:	bf00      	nop
 800648c:	24000004 	.word	0x24000004
 8006490:	1b4e81b5 	.word	0x1b4e81b5
 8006494:	40020010 	.word	0x40020010
 8006498:	40020028 	.word	0x40020028
 800649c:	40020040 	.word	0x40020040
 80064a0:	40020058 	.word	0x40020058
 80064a4:	40020070 	.word	0x40020070
 80064a8:	40020088 	.word	0x40020088
 80064ac:	400200a0 	.word	0x400200a0
 80064b0:	400200b8 	.word	0x400200b8
 80064b4:	40020410 	.word	0x40020410
 80064b8:	40020428 	.word	0x40020428
 80064bc:	40020440 	.word	0x40020440
 80064c0:	40020458 	.word	0x40020458
 80064c4:	40020470 	.word	0x40020470
 80064c8:	40020488 	.word	0x40020488
 80064cc:	400204a0 	.word	0x400204a0
 80064d0:	400204b8 	.word	0x400204b8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d015      	beq.n	8006518 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0204 	bic.w	r2, r2, #4
 80064fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2208      	movs	r2, #8
 8006506:	409a      	lsls	r2, r3
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006510:	f043 0201 	orr.w	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	fa22 f303 	lsr.w	r3, r2, r3
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d06e      	beq.n	800660c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a69      	ldr	r2, [pc, #420]	@ (80066d8 <HAL_DMA_IRQHandler+0x3f8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d04a      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a67      	ldr	r2, [pc, #412]	@ (80066dc <HAL_DMA_IRQHandler+0x3fc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d045      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a66      	ldr	r2, [pc, #408]	@ (80066e0 <HAL_DMA_IRQHandler+0x400>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d040      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a64      	ldr	r2, [pc, #400]	@ (80066e4 <HAL_DMA_IRQHandler+0x404>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d03b      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a63      	ldr	r2, [pc, #396]	@ (80066e8 <HAL_DMA_IRQHandler+0x408>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d036      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a61      	ldr	r2, [pc, #388]	@ (80066ec <HAL_DMA_IRQHandler+0x40c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d031      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a60      	ldr	r2, [pc, #384]	@ (80066f0 <HAL_DMA_IRQHandler+0x410>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d02c      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5e      	ldr	r2, [pc, #376]	@ (80066f4 <HAL_DMA_IRQHandler+0x414>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d027      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a5d      	ldr	r2, [pc, #372]	@ (80066f8 <HAL_DMA_IRQHandler+0x418>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d022      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a5b      	ldr	r2, [pc, #364]	@ (80066fc <HAL_DMA_IRQHandler+0x41c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01d      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a5a      	ldr	r2, [pc, #360]	@ (8006700 <HAL_DMA_IRQHandler+0x420>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d018      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a58      	ldr	r2, [pc, #352]	@ (8006704 <HAL_DMA_IRQHandler+0x424>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a57      	ldr	r2, [pc, #348]	@ (8006708 <HAL_DMA_IRQHandler+0x428>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a55      	ldr	r2, [pc, #340]	@ (800670c <HAL_DMA_IRQHandler+0x42c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a54      	ldr	r2, [pc, #336]	@ (8006710 <HAL_DMA_IRQHandler+0x430>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2ee>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a52      	ldr	r2, [pc, #328]	@ (8006714 <HAL_DMA_IRQHandler+0x434>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d10a      	bne.n	80065e4 <HAL_DMA_IRQHandler+0x304>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf14      	ite	ne
 80065dc:	2301      	movne	r3, #1
 80065de:	2300      	moveq	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	e003      	b.n	80065ec <HAL_DMA_IRQHandler+0x30c>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2300      	movs	r3, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00d      	beq.n	800660c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2201      	movs	r2, #1
 80065fa:	409a      	lsls	r2, r3
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006604:	f043 0202 	orr.w	r2, r3, #2
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	2204      	movs	r2, #4
 8006616:	409a      	lsls	r2, r3
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	4013      	ands	r3, r2
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 808f 	beq.w	8006740 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a2c      	ldr	r2, [pc, #176]	@ (80066d8 <HAL_DMA_IRQHandler+0x3f8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d04a      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a2a      	ldr	r2, [pc, #168]	@ (80066dc <HAL_DMA_IRQHandler+0x3fc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d045      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a29      	ldr	r2, [pc, #164]	@ (80066e0 <HAL_DMA_IRQHandler+0x400>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d040      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a27      	ldr	r2, [pc, #156]	@ (80066e4 <HAL_DMA_IRQHandler+0x404>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d03b      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a26      	ldr	r2, [pc, #152]	@ (80066e8 <HAL_DMA_IRQHandler+0x408>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d036      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a24      	ldr	r2, [pc, #144]	@ (80066ec <HAL_DMA_IRQHandler+0x40c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d031      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a23      	ldr	r2, [pc, #140]	@ (80066f0 <HAL_DMA_IRQHandler+0x410>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d02c      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a21      	ldr	r2, [pc, #132]	@ (80066f4 <HAL_DMA_IRQHandler+0x414>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d027      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a20      	ldr	r2, [pc, #128]	@ (80066f8 <HAL_DMA_IRQHandler+0x418>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d022      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1e      	ldr	r2, [pc, #120]	@ (80066fc <HAL_DMA_IRQHandler+0x41c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01d      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1d      	ldr	r2, [pc, #116]	@ (8006700 <HAL_DMA_IRQHandler+0x420>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d018      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1b      	ldr	r2, [pc, #108]	@ (8006704 <HAL_DMA_IRQHandler+0x424>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1a      	ldr	r2, [pc, #104]	@ (8006708 <HAL_DMA_IRQHandler+0x428>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00e      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a18      	ldr	r2, [pc, #96]	@ (800670c <HAL_DMA_IRQHandler+0x42c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a17      	ldr	r2, [pc, #92]	@ (8006710 <HAL_DMA_IRQHandler+0x430>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x3e2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a15      	ldr	r2, [pc, #84]	@ (8006714 <HAL_DMA_IRQHandler+0x434>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d12a      	bne.n	8006718 <HAL_DMA_IRQHandler+0x438>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	e023      	b.n	8006720 <HAL_DMA_IRQHandler+0x440>
 80066d8:	40020010 	.word	0x40020010
 80066dc:	40020028 	.word	0x40020028
 80066e0:	40020040 	.word	0x40020040
 80066e4:	40020058 	.word	0x40020058
 80066e8:	40020070 	.word	0x40020070
 80066ec:	40020088 	.word	0x40020088
 80066f0:	400200a0 	.word	0x400200a0
 80066f4:	400200b8 	.word	0x400200b8
 80066f8:	40020410 	.word	0x40020410
 80066fc:	40020428 	.word	0x40020428
 8006700:	40020440 	.word	0x40020440
 8006704:	40020458 	.word	0x40020458
 8006708:	40020470 	.word	0x40020470
 800670c:	40020488 	.word	0x40020488
 8006710:	400204a0 	.word	0x400204a0
 8006714:	400204b8 	.word	0x400204b8
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00d      	beq.n	8006740 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	2204      	movs	r2, #4
 800672e:	409a      	lsls	r2, r3
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006738:	f043 0204 	orr.w	r2, r3, #4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2210      	movs	r2, #16
 800674a:	409a      	lsls	r2, r3
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	4013      	ands	r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80a6 	beq.w	80068a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a85      	ldr	r2, [pc, #532]	@ (8006970 <HAL_DMA_IRQHandler+0x690>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d04a      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a83      	ldr	r2, [pc, #524]	@ (8006974 <HAL_DMA_IRQHandler+0x694>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d045      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a82      	ldr	r2, [pc, #520]	@ (8006978 <HAL_DMA_IRQHandler+0x698>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d040      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a80      	ldr	r2, [pc, #512]	@ (800697c <HAL_DMA_IRQHandler+0x69c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d03b      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a7f      	ldr	r2, [pc, #508]	@ (8006980 <HAL_DMA_IRQHandler+0x6a0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d036      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a7d      	ldr	r2, [pc, #500]	@ (8006984 <HAL_DMA_IRQHandler+0x6a4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d031      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a7c      	ldr	r2, [pc, #496]	@ (8006988 <HAL_DMA_IRQHandler+0x6a8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d02c      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a7a      	ldr	r2, [pc, #488]	@ (800698c <HAL_DMA_IRQHandler+0x6ac>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d027      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a79      	ldr	r2, [pc, #484]	@ (8006990 <HAL_DMA_IRQHandler+0x6b0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d022      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a77      	ldr	r2, [pc, #476]	@ (8006994 <HAL_DMA_IRQHandler+0x6b4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d01d      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a76      	ldr	r2, [pc, #472]	@ (8006998 <HAL_DMA_IRQHandler+0x6b8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d018      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a74      	ldr	r2, [pc, #464]	@ (800699c <HAL_DMA_IRQHandler+0x6bc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a73      	ldr	r2, [pc, #460]	@ (80069a0 <HAL_DMA_IRQHandler+0x6c0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00e      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a71      	ldr	r2, [pc, #452]	@ (80069a4 <HAL_DMA_IRQHandler+0x6c4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a70      	ldr	r2, [pc, #448]	@ (80069a8 <HAL_DMA_IRQHandler+0x6c8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x516>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a6e      	ldr	r2, [pc, #440]	@ (80069ac <HAL_DMA_IRQHandler+0x6cc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d10a      	bne.n	800680c <HAL_DMA_IRQHandler+0x52c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	e009      	b.n	8006820 <HAL_DMA_IRQHandler+0x540>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	bf14      	ite	ne
 800681a:	2301      	movne	r3, #1
 800681c:	2300      	moveq	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d03e      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	2210      	movs	r2, #16
 800682e:	409a      	lsls	r2, r3
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d108      	bne.n	8006862 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d024      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
 8006860:	e01f      	b.n	80068a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
 8006872:	e016      	b.n	80068a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687e:	2b00      	cmp	r3, #0
 8006880:	d107      	bne.n	8006892 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0208 	bic.w	r2, r2, #8
 8006890:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	2220      	movs	r2, #32
 80068ac:	409a      	lsls	r2, r3
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8110 	beq.w	8006ad8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006970 <HAL_DMA_IRQHandler+0x690>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d04a      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006974 <HAL_DMA_IRQHandler+0x694>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d045      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a29      	ldr	r2, [pc, #164]	@ (8006978 <HAL_DMA_IRQHandler+0x698>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d040      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a28      	ldr	r2, [pc, #160]	@ (800697c <HAL_DMA_IRQHandler+0x69c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d03b      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a26      	ldr	r2, [pc, #152]	@ (8006980 <HAL_DMA_IRQHandler+0x6a0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d036      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a25      	ldr	r2, [pc, #148]	@ (8006984 <HAL_DMA_IRQHandler+0x6a4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d031      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a23      	ldr	r2, [pc, #140]	@ (8006988 <HAL_DMA_IRQHandler+0x6a8>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d02c      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a22      	ldr	r2, [pc, #136]	@ (800698c <HAL_DMA_IRQHandler+0x6ac>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d027      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a20      	ldr	r2, [pc, #128]	@ (8006990 <HAL_DMA_IRQHandler+0x6b0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d022      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1f      	ldr	r2, [pc, #124]	@ (8006994 <HAL_DMA_IRQHandler+0x6b4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d01d      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1d      	ldr	r2, [pc, #116]	@ (8006998 <HAL_DMA_IRQHandler+0x6b8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d018      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1c      	ldr	r2, [pc, #112]	@ (800699c <HAL_DMA_IRQHandler+0x6bc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1a      	ldr	r2, [pc, #104]	@ (80069a0 <HAL_DMA_IRQHandler+0x6c0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00e      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a19      	ldr	r2, [pc, #100]	@ (80069a4 <HAL_DMA_IRQHandler+0x6c4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d009      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a17      	ldr	r2, [pc, #92]	@ (80069a8 <HAL_DMA_IRQHandler+0x6c8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_DMA_IRQHandler+0x678>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a16      	ldr	r2, [pc, #88]	@ (80069ac <HAL_DMA_IRQHandler+0x6cc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d12b      	bne.n	80069b0 <HAL_DMA_IRQHandler+0x6d0>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b00      	cmp	r3, #0
 8006964:	bf14      	ite	ne
 8006966:	2301      	movne	r3, #1
 8006968:	2300      	moveq	r3, #0
 800696a:	b2db      	uxtb	r3, r3
 800696c:	e02a      	b.n	80069c4 <HAL_DMA_IRQHandler+0x6e4>
 800696e:	bf00      	nop
 8006970:	40020010 	.word	0x40020010
 8006974:	40020028 	.word	0x40020028
 8006978:	40020040 	.word	0x40020040
 800697c:	40020058 	.word	0x40020058
 8006980:	40020070 	.word	0x40020070
 8006984:	40020088 	.word	0x40020088
 8006988:	400200a0 	.word	0x400200a0
 800698c:	400200b8 	.word	0x400200b8
 8006990:	40020410 	.word	0x40020410
 8006994:	40020428 	.word	0x40020428
 8006998:	40020440 	.word	0x40020440
 800699c:	40020458 	.word	0x40020458
 80069a0:	40020470 	.word	0x40020470
 80069a4:	40020488 	.word	0x40020488
 80069a8:	400204a0 	.word	0x400204a0
 80069ac:	400204b8 	.word	0x400204b8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	bf14      	ite	ne
 80069be:	2301      	movne	r3, #1
 80069c0:	2300      	moveq	r3, #0
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8087 	beq.w	8006ad8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2220      	movs	r2, #32
 80069d4:	409a      	lsls	r2, r3
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d139      	bne.n	8006a5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0216 	bic.w	r2, r2, #22
 80069f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695a      	ldr	r2, [r3, #20]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <HAL_DMA_IRQHandler+0x736>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d007      	beq.n	8006a26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0208 	bic.w	r2, r2, #8
 8006a24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	223f      	movs	r2, #63	@ 0x3f
 8006a30:	409a      	lsls	r2, r3
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 834a 	beq.w	80070e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
          }
          return;
 8006a58:	e344      	b.n	80070e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d018      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d108      	bne.n	8006a88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d02c      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
 8006a86:	e027      	b.n	8006ad8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d023      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
 8006a98:	e01e      	b.n	8006ad8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10f      	bne.n	8006ac8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0210 	bic.w	r2, r2, #16
 8006ab6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 8306 	beq.w	80070ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 8088 	beq.w	8006c00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2204      	movs	r2, #4
 8006af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a7a      	ldr	r2, [pc, #488]	@ (8006ce8 <HAL_DMA_IRQHandler+0xa08>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d04a      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a79      	ldr	r2, [pc, #484]	@ (8006cec <HAL_DMA_IRQHandler+0xa0c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d045      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a77      	ldr	r2, [pc, #476]	@ (8006cf0 <HAL_DMA_IRQHandler+0xa10>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d040      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a76      	ldr	r2, [pc, #472]	@ (8006cf4 <HAL_DMA_IRQHandler+0xa14>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d03b      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a74      	ldr	r2, [pc, #464]	@ (8006cf8 <HAL_DMA_IRQHandler+0xa18>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d036      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a73      	ldr	r2, [pc, #460]	@ (8006cfc <HAL_DMA_IRQHandler+0xa1c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d031      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a71      	ldr	r2, [pc, #452]	@ (8006d00 <HAL_DMA_IRQHandler+0xa20>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d02c      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a70      	ldr	r2, [pc, #448]	@ (8006d04 <HAL_DMA_IRQHandler+0xa24>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d027      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8006d08 <HAL_DMA_IRQHandler+0xa28>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d022      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6d      	ldr	r2, [pc, #436]	@ (8006d0c <HAL_DMA_IRQHandler+0xa2c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d01d      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a6b      	ldr	r2, [pc, #428]	@ (8006d10 <HAL_DMA_IRQHandler+0xa30>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d018      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6a      	ldr	r2, [pc, #424]	@ (8006d14 <HAL_DMA_IRQHandler+0xa34>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a68      	ldr	r2, [pc, #416]	@ (8006d18 <HAL_DMA_IRQHandler+0xa38>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00e      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a67      	ldr	r2, [pc, #412]	@ (8006d1c <HAL_DMA_IRQHandler+0xa3c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a65      	ldr	r2, [pc, #404]	@ (8006d20 <HAL_DMA_IRQHandler+0xa40>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x8b8>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a64      	ldr	r2, [pc, #400]	@ (8006d24 <HAL_DMA_IRQHandler+0xa44>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d108      	bne.n	8006baa <HAL_DMA_IRQHandler+0x8ca>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	e007      	b.n	8006bba <HAL_DMA_IRQHandler+0x8da>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d307      	bcc.n	8006bd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f2      	bne.n	8006bba <HAL_DMA_IRQHandler+0x8da>
 8006bd4:	e000      	b.n	8006bd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d004      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2203      	movs	r2, #3
 8006bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006bee:	e003      	b.n	8006bf8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8272 	beq.w	80070ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
 8006c12:	e26c      	b.n	80070ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a43      	ldr	r2, [pc, #268]	@ (8006d28 <HAL_DMA_IRQHandler+0xa48>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d022      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x984>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a42      	ldr	r2, [pc, #264]	@ (8006d2c <HAL_DMA_IRQHandler+0xa4c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d01d      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x984>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a40      	ldr	r2, [pc, #256]	@ (8006d30 <HAL_DMA_IRQHandler+0xa50>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d018      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x984>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a3f      	ldr	r2, [pc, #252]	@ (8006d34 <HAL_DMA_IRQHandler+0xa54>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d013      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x984>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a3d      	ldr	r2, [pc, #244]	@ (8006d38 <HAL_DMA_IRQHandler+0xa58>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00e      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x984>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a3c      	ldr	r2, [pc, #240]	@ (8006d3c <HAL_DMA_IRQHandler+0xa5c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x984>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a3a      	ldr	r2, [pc, #232]	@ (8006d40 <HAL_DMA_IRQHandler+0xa60>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x984>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a39      	ldr	r2, [pc, #228]	@ (8006d44 <HAL_DMA_IRQHandler+0xa64>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <HAL_DMA_IRQHandler+0x988>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e000      	b.n	8006c6a <HAL_DMA_IRQHandler+0x98a>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 823f 	beq.w	80070ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	2204      	movs	r2, #4
 8006c82:	409a      	lsls	r2, r3
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80cd 	beq.w	8006e28 <HAL_DMA_IRQHandler+0xb48>
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80c7 	beq.w	8006e28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	409a      	lsls	r2, r3
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d049      	beq.n	8006d48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d109      	bne.n	8006cd2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8210 	beq.w	80070e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd0:	e20a      	b.n	80070e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8206 	beq.w	80070e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ce4:	e200      	b.n	80070e8 <HAL_DMA_IRQHandler+0xe08>
 8006ce6:	bf00      	nop
 8006ce8:	40020010 	.word	0x40020010
 8006cec:	40020028 	.word	0x40020028
 8006cf0:	40020040 	.word	0x40020040
 8006cf4:	40020058 	.word	0x40020058
 8006cf8:	40020070 	.word	0x40020070
 8006cfc:	40020088 	.word	0x40020088
 8006d00:	400200a0 	.word	0x400200a0
 8006d04:	400200b8 	.word	0x400200b8
 8006d08:	40020410 	.word	0x40020410
 8006d0c:	40020428 	.word	0x40020428
 8006d10:	40020440 	.word	0x40020440
 8006d14:	40020458 	.word	0x40020458
 8006d18:	40020470 	.word	0x40020470
 8006d1c:	40020488 	.word	0x40020488
 8006d20:	400204a0 	.word	0x400204a0
 8006d24:	400204b8 	.word	0x400204b8
 8006d28:	58025408 	.word	0x58025408
 8006d2c:	5802541c 	.word	0x5802541c
 8006d30:	58025430 	.word	0x58025430
 8006d34:	58025444 	.word	0x58025444
 8006d38:	58025458 	.word	0x58025458
 8006d3c:	5802546c 	.word	0x5802546c
 8006d40:	58025480 	.word	0x58025480
 8006d44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d160      	bne.n	8006e14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7f      	ldr	r2, [pc, #508]	@ (8006f54 <HAL_DMA_IRQHandler+0xc74>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d04a      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a7d      	ldr	r2, [pc, #500]	@ (8006f58 <HAL_DMA_IRQHandler+0xc78>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d045      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a7c      	ldr	r2, [pc, #496]	@ (8006f5c <HAL_DMA_IRQHandler+0xc7c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d040      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a7a      	ldr	r2, [pc, #488]	@ (8006f60 <HAL_DMA_IRQHandler+0xc80>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d03b      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a79      	ldr	r2, [pc, #484]	@ (8006f64 <HAL_DMA_IRQHandler+0xc84>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d036      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a77      	ldr	r2, [pc, #476]	@ (8006f68 <HAL_DMA_IRQHandler+0xc88>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d031      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a76      	ldr	r2, [pc, #472]	@ (8006f6c <HAL_DMA_IRQHandler+0xc8c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d02c      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a74      	ldr	r2, [pc, #464]	@ (8006f70 <HAL_DMA_IRQHandler+0xc90>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d027      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a73      	ldr	r2, [pc, #460]	@ (8006f74 <HAL_DMA_IRQHandler+0xc94>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d022      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a71      	ldr	r2, [pc, #452]	@ (8006f78 <HAL_DMA_IRQHandler+0xc98>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01d      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a70      	ldr	r2, [pc, #448]	@ (8006f7c <HAL_DMA_IRQHandler+0xc9c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d018      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6e      	ldr	r2, [pc, #440]	@ (8006f80 <HAL_DMA_IRQHandler+0xca0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6d      	ldr	r2, [pc, #436]	@ (8006f84 <HAL_DMA_IRQHandler+0xca4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a6b      	ldr	r2, [pc, #428]	@ (8006f88 <HAL_DMA_IRQHandler+0xca8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a6a      	ldr	r2, [pc, #424]	@ (8006f8c <HAL_DMA_IRQHandler+0xcac>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xb12>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a68      	ldr	r2, [pc, #416]	@ (8006f90 <HAL_DMA_IRQHandler+0xcb0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d108      	bne.n	8006e04 <HAL_DMA_IRQHandler+0xb24>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0208 	bic.w	r2, r2, #8
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e007      	b.n	8006e14 <HAL_DMA_IRQHandler+0xb34>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0204 	bic.w	r2, r2, #4
 8006e12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8165 	beq.w	80070e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e26:	e15f      	b.n	80070e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	2202      	movs	r2, #2
 8006e32:	409a      	lsls	r2, r3
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	4013      	ands	r3, r2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 80c5 	beq.w	8006fc8 <HAL_DMA_IRQHandler+0xce8>
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80bf 	beq.w	8006fc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2202      	movs	r2, #2
 8006e54:	409a      	lsls	r2, r3
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d018      	beq.n	8006e96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 813a 	beq.w	80070ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e80:	e134      	b.n	80070ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 8130 	beq.w	80070ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e94:	e12a      	b.n	80070ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 8089 	bne.w	8006fb4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8006f54 <HAL_DMA_IRQHandler+0xc74>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d04a      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a29      	ldr	r2, [pc, #164]	@ (8006f58 <HAL_DMA_IRQHandler+0xc78>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d045      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a28      	ldr	r2, [pc, #160]	@ (8006f5c <HAL_DMA_IRQHandler+0xc7c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d040      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a26      	ldr	r2, [pc, #152]	@ (8006f60 <HAL_DMA_IRQHandler+0xc80>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d03b      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a25      	ldr	r2, [pc, #148]	@ (8006f64 <HAL_DMA_IRQHandler+0xc84>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d036      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a23      	ldr	r2, [pc, #140]	@ (8006f68 <HAL_DMA_IRQHandler+0xc88>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d031      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a22      	ldr	r2, [pc, #136]	@ (8006f6c <HAL_DMA_IRQHandler+0xc8c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d02c      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a20      	ldr	r2, [pc, #128]	@ (8006f70 <HAL_DMA_IRQHandler+0xc90>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d027      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8006f74 <HAL_DMA_IRQHandler+0xc94>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d022      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1d      	ldr	r2, [pc, #116]	@ (8006f78 <HAL_DMA_IRQHandler+0xc98>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01d      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006f7c <HAL_DMA_IRQHandler+0xc9c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d018      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1a      	ldr	r2, [pc, #104]	@ (8006f80 <HAL_DMA_IRQHandler+0xca0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d013      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a19      	ldr	r2, [pc, #100]	@ (8006f84 <HAL_DMA_IRQHandler+0xca4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00e      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a17      	ldr	r2, [pc, #92]	@ (8006f88 <HAL_DMA_IRQHandler+0xca8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d009      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a16      	ldr	r2, [pc, #88]	@ (8006f8c <HAL_DMA_IRQHandler+0xcac>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d004      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xc62>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a14      	ldr	r2, [pc, #80]	@ (8006f90 <HAL_DMA_IRQHandler+0xcb0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d128      	bne.n	8006f94 <HAL_DMA_IRQHandler+0xcb4>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0214 	bic.w	r2, r2, #20
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	e027      	b.n	8006fa4 <HAL_DMA_IRQHandler+0xcc4>
 8006f54:	40020010 	.word	0x40020010
 8006f58:	40020028 	.word	0x40020028
 8006f5c:	40020040 	.word	0x40020040
 8006f60:	40020058 	.word	0x40020058
 8006f64:	40020070 	.word	0x40020070
 8006f68:	40020088 	.word	0x40020088
 8006f6c:	400200a0 	.word	0x400200a0
 8006f70:	400200b8 	.word	0x400200b8
 8006f74:	40020410 	.word	0x40020410
 8006f78:	40020428 	.word	0x40020428
 8006f7c:	40020440 	.word	0x40020440
 8006f80:	40020458 	.word	0x40020458
 8006f84:	40020470 	.word	0x40020470
 8006f88:	40020488 	.word	0x40020488
 8006f8c:	400204a0 	.word	0x400204a0
 8006f90:	400204b8 	.word	0x400204b8
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 020a 	bic.w	r2, r2, #10
 8006fa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 8097 	beq.w	80070ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fc6:	e091      	b.n	80070ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	409a      	lsls	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 8088 	beq.w	80070ee <HAL_DMA_IRQHandler+0xe0e>
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 8082 	beq.w	80070ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a41      	ldr	r2, [pc, #260]	@ (80070f4 <HAL_DMA_IRQHandler+0xe14>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d04a      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a3f      	ldr	r2, [pc, #252]	@ (80070f8 <HAL_DMA_IRQHandler+0xe18>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d045      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a3e      	ldr	r2, [pc, #248]	@ (80070fc <HAL_DMA_IRQHandler+0xe1c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d040      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a3c      	ldr	r2, [pc, #240]	@ (8007100 <HAL_DMA_IRQHandler+0xe20>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d03b      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a3b      	ldr	r2, [pc, #236]	@ (8007104 <HAL_DMA_IRQHandler+0xe24>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d036      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a39      	ldr	r2, [pc, #228]	@ (8007108 <HAL_DMA_IRQHandler+0xe28>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d031      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a38      	ldr	r2, [pc, #224]	@ (800710c <HAL_DMA_IRQHandler+0xe2c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d02c      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a36      	ldr	r2, [pc, #216]	@ (8007110 <HAL_DMA_IRQHandler+0xe30>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d027      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a35      	ldr	r2, [pc, #212]	@ (8007114 <HAL_DMA_IRQHandler+0xe34>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d022      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a33      	ldr	r2, [pc, #204]	@ (8007118 <HAL_DMA_IRQHandler+0xe38>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d01d      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a32      	ldr	r2, [pc, #200]	@ (800711c <HAL_DMA_IRQHandler+0xe3c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d018      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a30      	ldr	r2, [pc, #192]	@ (8007120 <HAL_DMA_IRQHandler+0xe40>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d013      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2f      	ldr	r2, [pc, #188]	@ (8007124 <HAL_DMA_IRQHandler+0xe44>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00e      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2d      	ldr	r2, [pc, #180]	@ (8007128 <HAL_DMA_IRQHandler+0xe48>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d009      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2c      	ldr	r2, [pc, #176]	@ (800712c <HAL_DMA_IRQHandler+0xe4c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d004      	beq.n	800708a <HAL_DMA_IRQHandler+0xdaa>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2a      	ldr	r2, [pc, #168]	@ (8007130 <HAL_DMA_IRQHandler+0xe50>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d108      	bne.n	800709c <HAL_DMA_IRQHandler+0xdbc>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 021c 	bic.w	r2, r2, #28
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e007      	b.n	80070ac <HAL_DMA_IRQHandler+0xdcc>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 020e 	bic.w	r2, r2, #14
 80070aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2201      	movs	r2, #1
 80070b6:	409a      	lsls	r2, r3
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	4798      	blx	r3
 80070e2:	e004      	b.n	80070ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80070e4:	bf00      	nop
 80070e6:	e002      	b.n	80070ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070e8:	bf00      	nop
 80070ea:	e000      	b.n	80070ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070ee:	3728      	adds	r7, #40	@ 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40020010 	.word	0x40020010
 80070f8:	40020028 	.word	0x40020028
 80070fc:	40020040 	.word	0x40020040
 8007100:	40020058 	.word	0x40020058
 8007104:	40020070 	.word	0x40020070
 8007108:	40020088 	.word	0x40020088
 800710c:	400200a0 	.word	0x400200a0
 8007110:	400200b8 	.word	0x400200b8
 8007114:	40020410 	.word	0x40020410
 8007118:	40020428 	.word	0x40020428
 800711c:	40020440 	.word	0x40020440
 8007120:	40020458 	.word	0x40020458
 8007124:	40020470 	.word	0x40020470
 8007128:	40020488 	.word	0x40020488
 800712c:	400204a0 	.word	0x400204a0
 8007130:	400204b8 	.word	0x400204b8

08007134 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007164:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a7f      	ldr	r2, [pc, #508]	@ (8007368 <DMA_SetConfig+0x21c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d072      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a7d      	ldr	r2, [pc, #500]	@ (800736c <DMA_SetConfig+0x220>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d06d      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a7c      	ldr	r2, [pc, #496]	@ (8007370 <DMA_SetConfig+0x224>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d068      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a7a      	ldr	r2, [pc, #488]	@ (8007374 <DMA_SetConfig+0x228>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d063      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a79      	ldr	r2, [pc, #484]	@ (8007378 <DMA_SetConfig+0x22c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d05e      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a77      	ldr	r2, [pc, #476]	@ (800737c <DMA_SetConfig+0x230>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d059      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a76      	ldr	r2, [pc, #472]	@ (8007380 <DMA_SetConfig+0x234>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d054      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a74      	ldr	r2, [pc, #464]	@ (8007384 <DMA_SetConfig+0x238>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d04f      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a73      	ldr	r2, [pc, #460]	@ (8007388 <DMA_SetConfig+0x23c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d04a      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a71      	ldr	r2, [pc, #452]	@ (800738c <DMA_SetConfig+0x240>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d045      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a70      	ldr	r2, [pc, #448]	@ (8007390 <DMA_SetConfig+0x244>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d040      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a6e      	ldr	r2, [pc, #440]	@ (8007394 <DMA_SetConfig+0x248>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d03b      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a6d      	ldr	r2, [pc, #436]	@ (8007398 <DMA_SetConfig+0x24c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d036      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a6b      	ldr	r2, [pc, #428]	@ (800739c <DMA_SetConfig+0x250>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d031      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a6a      	ldr	r2, [pc, #424]	@ (80073a0 <DMA_SetConfig+0x254>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d02c      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a68      	ldr	r2, [pc, #416]	@ (80073a4 <DMA_SetConfig+0x258>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d027      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a67      	ldr	r2, [pc, #412]	@ (80073a8 <DMA_SetConfig+0x25c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d022      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a65      	ldr	r2, [pc, #404]	@ (80073ac <DMA_SetConfig+0x260>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01d      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a64      	ldr	r2, [pc, #400]	@ (80073b0 <DMA_SetConfig+0x264>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d018      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a62      	ldr	r2, [pc, #392]	@ (80073b4 <DMA_SetConfig+0x268>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a61      	ldr	r2, [pc, #388]	@ (80073b8 <DMA_SetConfig+0x26c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00e      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a5f      	ldr	r2, [pc, #380]	@ (80073bc <DMA_SetConfig+0x270>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a5e      	ldr	r2, [pc, #376]	@ (80073c0 <DMA_SetConfig+0x274>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a5c      	ldr	r2, [pc, #368]	@ (80073c4 <DMA_SetConfig+0x278>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d101      	bne.n	800725a <DMA_SetConfig+0x10e>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <DMA_SetConfig+0x110>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00d      	beq.n	800727c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007268:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d004      	beq.n	800727c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800727a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a39      	ldr	r2, [pc, #228]	@ (8007368 <DMA_SetConfig+0x21c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d04a      	beq.n	800731c <DMA_SetConfig+0x1d0>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a38      	ldr	r2, [pc, #224]	@ (800736c <DMA_SetConfig+0x220>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d045      	beq.n	800731c <DMA_SetConfig+0x1d0>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a36      	ldr	r2, [pc, #216]	@ (8007370 <DMA_SetConfig+0x224>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d040      	beq.n	800731c <DMA_SetConfig+0x1d0>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a35      	ldr	r2, [pc, #212]	@ (8007374 <DMA_SetConfig+0x228>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d03b      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a33      	ldr	r2, [pc, #204]	@ (8007378 <DMA_SetConfig+0x22c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d036      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a32      	ldr	r2, [pc, #200]	@ (800737c <DMA_SetConfig+0x230>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d031      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a30      	ldr	r2, [pc, #192]	@ (8007380 <DMA_SetConfig+0x234>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d02c      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007384 <DMA_SetConfig+0x238>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d027      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007388 <DMA_SetConfig+0x23c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d022      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a2c      	ldr	r2, [pc, #176]	@ (800738c <DMA_SetConfig+0x240>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d01d      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2a      	ldr	r2, [pc, #168]	@ (8007390 <DMA_SetConfig+0x244>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d018      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a29      	ldr	r2, [pc, #164]	@ (8007394 <DMA_SetConfig+0x248>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d013      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a27      	ldr	r2, [pc, #156]	@ (8007398 <DMA_SetConfig+0x24c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00e      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a26      	ldr	r2, [pc, #152]	@ (800739c <DMA_SetConfig+0x250>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d009      	beq.n	800731c <DMA_SetConfig+0x1d0>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a24      	ldr	r2, [pc, #144]	@ (80073a0 <DMA_SetConfig+0x254>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <DMA_SetConfig+0x1d0>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a23      	ldr	r2, [pc, #140]	@ (80073a4 <DMA_SetConfig+0x258>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d101      	bne.n	8007320 <DMA_SetConfig+0x1d4>
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <DMA_SetConfig+0x1d6>
 8007320:	2300      	movs	r3, #0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d059      	beq.n	80073da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	223f      	movs	r2, #63	@ 0x3f
 8007330:	409a      	lsls	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007344:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b40      	cmp	r3, #64	@ 0x40
 8007354:	d138      	bne.n	80073c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007366:	e086      	b.n	8007476 <DMA_SetConfig+0x32a>
 8007368:	40020010 	.word	0x40020010
 800736c:	40020028 	.word	0x40020028
 8007370:	40020040 	.word	0x40020040
 8007374:	40020058 	.word	0x40020058
 8007378:	40020070 	.word	0x40020070
 800737c:	40020088 	.word	0x40020088
 8007380:	400200a0 	.word	0x400200a0
 8007384:	400200b8 	.word	0x400200b8
 8007388:	40020410 	.word	0x40020410
 800738c:	40020428 	.word	0x40020428
 8007390:	40020440 	.word	0x40020440
 8007394:	40020458 	.word	0x40020458
 8007398:	40020470 	.word	0x40020470
 800739c:	40020488 	.word	0x40020488
 80073a0:	400204a0 	.word	0x400204a0
 80073a4:	400204b8 	.word	0x400204b8
 80073a8:	58025408 	.word	0x58025408
 80073ac:	5802541c 	.word	0x5802541c
 80073b0:	58025430 	.word	0x58025430
 80073b4:	58025444 	.word	0x58025444
 80073b8:	58025458 	.word	0x58025458
 80073bc:	5802546c 	.word	0x5802546c
 80073c0:	58025480 	.word	0x58025480
 80073c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	60da      	str	r2, [r3, #12]
}
 80073d8:	e04d      	b.n	8007476 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a29      	ldr	r2, [pc, #164]	@ (8007484 <DMA_SetConfig+0x338>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d022      	beq.n	800742a <DMA_SetConfig+0x2de>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a27      	ldr	r2, [pc, #156]	@ (8007488 <DMA_SetConfig+0x33c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01d      	beq.n	800742a <DMA_SetConfig+0x2de>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a26      	ldr	r2, [pc, #152]	@ (800748c <DMA_SetConfig+0x340>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d018      	beq.n	800742a <DMA_SetConfig+0x2de>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a24      	ldr	r2, [pc, #144]	@ (8007490 <DMA_SetConfig+0x344>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <DMA_SetConfig+0x2de>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a23      	ldr	r2, [pc, #140]	@ (8007494 <DMA_SetConfig+0x348>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00e      	beq.n	800742a <DMA_SetConfig+0x2de>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a21      	ldr	r2, [pc, #132]	@ (8007498 <DMA_SetConfig+0x34c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d009      	beq.n	800742a <DMA_SetConfig+0x2de>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a20      	ldr	r2, [pc, #128]	@ (800749c <DMA_SetConfig+0x350>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <DMA_SetConfig+0x2de>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <DMA_SetConfig+0x354>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d101      	bne.n	800742e <DMA_SetConfig+0x2e2>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <DMA_SetConfig+0x2e4>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d020      	beq.n	8007476 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2201      	movs	r2, #1
 800743e:	409a      	lsls	r2, r3
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b40      	cmp	r3, #64	@ 0x40
 8007452:	d108      	bne.n	8007466 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	60da      	str	r2, [r3, #12]
}
 8007464:	e007      	b.n	8007476 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	60da      	str	r2, [r3, #12]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	58025408 	.word	0x58025408
 8007488:	5802541c 	.word	0x5802541c
 800748c:	58025430 	.word	0x58025430
 8007490:	58025444 	.word	0x58025444
 8007494:	58025458 	.word	0x58025458
 8007498:	5802546c 	.word	0x5802546c
 800749c:	58025480 	.word	0x58025480
 80074a0:	58025494 	.word	0x58025494

080074a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a42      	ldr	r2, [pc, #264]	@ (80075bc <DMA_CalcBaseAndBitshift+0x118>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d04a      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a41      	ldr	r2, [pc, #260]	@ (80075c0 <DMA_CalcBaseAndBitshift+0x11c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d045      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a3f      	ldr	r2, [pc, #252]	@ (80075c4 <DMA_CalcBaseAndBitshift+0x120>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d040      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a3e      	ldr	r2, [pc, #248]	@ (80075c8 <DMA_CalcBaseAndBitshift+0x124>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d03b      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a3c      	ldr	r2, [pc, #240]	@ (80075cc <DMA_CalcBaseAndBitshift+0x128>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d036      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a3b      	ldr	r2, [pc, #236]	@ (80075d0 <DMA_CalcBaseAndBitshift+0x12c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d031      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a39      	ldr	r2, [pc, #228]	@ (80075d4 <DMA_CalcBaseAndBitshift+0x130>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d02c      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a38      	ldr	r2, [pc, #224]	@ (80075d8 <DMA_CalcBaseAndBitshift+0x134>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d027      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a36      	ldr	r2, [pc, #216]	@ (80075dc <DMA_CalcBaseAndBitshift+0x138>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d022      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a35      	ldr	r2, [pc, #212]	@ (80075e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d01d      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a33      	ldr	r2, [pc, #204]	@ (80075e4 <DMA_CalcBaseAndBitshift+0x140>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a32      	ldr	r2, [pc, #200]	@ (80075e8 <DMA_CalcBaseAndBitshift+0x144>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a30      	ldr	r2, [pc, #192]	@ (80075ec <DMA_CalcBaseAndBitshift+0x148>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2f      	ldr	r2, [pc, #188]	@ (80075f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2d      	ldr	r2, [pc, #180]	@ (80075f4 <DMA_CalcBaseAndBitshift+0x150>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a2c      	ldr	r2, [pc, #176]	@ (80075f8 <DMA_CalcBaseAndBitshift+0x154>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d101      	bne.n	8007550 <DMA_CalcBaseAndBitshift+0xac>
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <DMA_CalcBaseAndBitshift+0xae>
 8007550:	2300      	movs	r3, #0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d024      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	3b10      	subs	r3, #16
 800755e:	4a27      	ldr	r2, [pc, #156]	@ (80075fc <DMA_CalcBaseAndBitshift+0x158>)
 8007560:	fba2 2303 	umull	r2, r3, r2, r3
 8007564:	091b      	lsrs	r3, r3, #4
 8007566:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	4a24      	ldr	r2, [pc, #144]	@ (8007600 <DMA_CalcBaseAndBitshift+0x15c>)
 8007570:	5cd3      	ldrb	r3, [r2, r3]
 8007572:	461a      	mov	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d908      	bls.n	8007590 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	4b1f      	ldr	r3, [pc, #124]	@ (8007604 <DMA_CalcBaseAndBitshift+0x160>)
 8007586:	4013      	ands	r3, r2
 8007588:	1d1a      	adds	r2, r3, #4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	659a      	str	r2, [r3, #88]	@ 0x58
 800758e:	e00d      	b.n	80075ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	4b1b      	ldr	r3, [pc, #108]	@ (8007604 <DMA_CalcBaseAndBitshift+0x160>)
 8007598:	4013      	ands	r3, r2
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6593      	str	r3, [r2, #88]	@ 0x58
 800759e:	e005      	b.n	80075ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40020010 	.word	0x40020010
 80075c0:	40020028 	.word	0x40020028
 80075c4:	40020040 	.word	0x40020040
 80075c8:	40020058 	.word	0x40020058
 80075cc:	40020070 	.word	0x40020070
 80075d0:	40020088 	.word	0x40020088
 80075d4:	400200a0 	.word	0x400200a0
 80075d8:	400200b8 	.word	0x400200b8
 80075dc:	40020410 	.word	0x40020410
 80075e0:	40020428 	.word	0x40020428
 80075e4:	40020440 	.word	0x40020440
 80075e8:	40020458 	.word	0x40020458
 80075ec:	40020470 	.word	0x40020470
 80075f0:	40020488 	.word	0x40020488
 80075f4:	400204a0 	.word	0x400204a0
 80075f8:	400204b8 	.word	0x400204b8
 80075fc:	aaaaaaab 	.word	0xaaaaaaab
 8007600:	08023648 	.word	0x08023648
 8007604:	fffffc00 	.word	0xfffffc00

08007608 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d120      	bne.n	800765e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007620:	2b03      	cmp	r3, #3
 8007622:	d858      	bhi.n	80076d6 <DMA_CheckFifoParam+0xce>
 8007624:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <DMA_CheckFifoParam+0x24>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	0800763d 	.word	0x0800763d
 8007630:	0800764f 	.word	0x0800764f
 8007634:	0800763d 	.word	0x0800763d
 8007638:	080076d7 	.word	0x080076d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d048      	beq.n	80076da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800764c:	e045      	b.n	80076da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007652:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007656:	d142      	bne.n	80076de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800765c:	e03f      	b.n	80076de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007666:	d123      	bne.n	80076b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	2b03      	cmp	r3, #3
 800766e:	d838      	bhi.n	80076e2 <DMA_CheckFifoParam+0xda>
 8007670:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <DMA_CheckFifoParam+0x70>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	08007689 	.word	0x08007689
 800767c:	0800768f 	.word	0x0800768f
 8007680:	08007689 	.word	0x08007689
 8007684:	080076a1 	.word	0x080076a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	73fb      	strb	r3, [r7, #15]
        break;
 800768c:	e030      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007692:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d025      	beq.n	80076e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800769e:	e022      	b.n	80076e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076a8:	d11f      	bne.n	80076ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076ae:	e01c      	b.n	80076ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d902      	bls.n	80076be <DMA_CheckFifoParam+0xb6>
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d003      	beq.n	80076c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80076bc:	e018      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	73fb      	strb	r3, [r7, #15]
        break;
 80076c2:	e015      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00e      	beq.n	80076ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	73fb      	strb	r3, [r7, #15]
    break;
 80076d4:	e00b      	b.n	80076ee <DMA_CheckFifoParam+0xe6>
        break;
 80076d6:	bf00      	nop
 80076d8:	e00a      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076da:	bf00      	nop
 80076dc:	e008      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076de:	bf00      	nop
 80076e0:	e006      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076e2:	bf00      	nop
 80076e4:	e004      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076e6:	bf00      	nop
 80076e8:	e002      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076ea:	bf00      	nop
 80076ec:	e000      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
    break;
 80076ee:	bf00      	nop
    }
  }

  return status;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop

08007700 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a38      	ldr	r2, [pc, #224]	@ (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a36      	ldr	r2, [pc, #216]	@ (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01d      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a35      	ldr	r2, [pc, #212]	@ (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d018      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a33      	ldr	r2, [pc, #204]	@ (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a32      	ldr	r2, [pc, #200]	@ (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00e      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a30      	ldr	r2, [pc, #192]	@ (8007808 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d009      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2f      	ldr	r2, [pc, #188]	@ (800780c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a2d      	ldr	r2, [pc, #180]	@ (8007810 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d101      	bne.n	8007762 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01a      	beq.n	800779e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	3b08      	subs	r3, #8
 8007770:	4a28      	ldr	r2, [pc, #160]	@ (8007814 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	091b      	lsrs	r3, r3, #4
 8007778:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4b26      	ldr	r3, [pc, #152]	@ (8007818 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a24      	ldr	r2, [pc, #144]	@ (800781c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800778c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f003 031f 	and.w	r3, r3, #31
 8007794:	2201      	movs	r2, #1
 8007796:	409a      	lsls	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800779c:	e024      	b.n	80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	3b10      	subs	r3, #16
 80077a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007820 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80077a8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007824 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d806      	bhi.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007828 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d902      	bls.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3308      	adds	r3, #8
 80077c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4b18      	ldr	r3, [pc, #96]	@ (800782c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a16      	ldr	r2, [pc, #88]	@ (8007830 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	2201      	movs	r2, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077e8:	bf00      	nop
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	58025408 	.word	0x58025408
 80077f8:	5802541c 	.word	0x5802541c
 80077fc:	58025430 	.word	0x58025430
 8007800:	58025444 	.word	0x58025444
 8007804:	58025458 	.word	0x58025458
 8007808:	5802546c 	.word	0x5802546c
 800780c:	58025480 	.word	0x58025480
 8007810:	58025494 	.word	0x58025494
 8007814:	cccccccd 	.word	0xcccccccd
 8007818:	16009600 	.word	0x16009600
 800781c:	58025880 	.word	0x58025880
 8007820:	aaaaaaab 	.word	0xaaaaaaab
 8007824:	400204b8 	.word	0x400204b8
 8007828:	4002040f 	.word	0x4002040f
 800782c:	10008200 	.word	0x10008200
 8007830:	40020880 	.word	0x40020880

08007834 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d04a      	beq.n	80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b08      	cmp	r3, #8
 800784e:	d847      	bhi.n	80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a25      	ldr	r2, [pc, #148]	@ (80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d022      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a24      	ldr	r2, [pc, #144]	@ (80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d01d      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a22      	ldr	r2, [pc, #136]	@ (80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d018      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a21      	ldr	r2, [pc, #132]	@ (80078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d013      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1f      	ldr	r2, [pc, #124]	@ (80078fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1e      	ldr	r2, [pc, #120]	@ (8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d009      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1c      	ldr	r2, [pc, #112]	@ (8007904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1b      	ldr	r2, [pc, #108]	@ (8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d101      	bne.n	80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80078a4:	2300      	movs	r3, #0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4b17      	ldr	r3, [pc, #92]	@ (800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	461a      	mov	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a15      	ldr	r2, [pc, #84]	@ (8007910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80078bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80078be:	e009      	b.n	80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4b14      	ldr	r3, [pc, #80]	@ (8007914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	461a      	mov	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a11      	ldr	r2, [pc, #68]	@ (8007918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2201      	movs	r2, #1
 80078da:	409a      	lsls	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80078e0:	bf00      	nop
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	58025408 	.word	0x58025408
 80078f0:	5802541c 	.word	0x5802541c
 80078f4:	58025430 	.word	0x58025430
 80078f8:	58025444 	.word	0x58025444
 80078fc:	58025458 	.word	0x58025458
 8007900:	5802546c 	.word	0x5802546c
 8007904:	58025480 	.word	0x58025480
 8007908:	58025494 	.word	0x58025494
 800790c:	1600963f 	.word	0x1600963f
 8007910:	58025940 	.word	0x58025940
 8007914:	1000823f 	.word	0x1000823f
 8007918:	40020940 	.word	0x40020940

0800791c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800791c:	b480      	push	{r7}
 800791e:	b089      	sub	sp, #36	@ 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007926:	2300      	movs	r3, #0
 8007928:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800792a:	4b89      	ldr	r3, [pc, #548]	@ (8007b50 <HAL_GPIO_Init+0x234>)
 800792c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800792e:	e194      	b.n	8007c5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	2101      	movs	r1, #1
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	fa01 f303 	lsl.w	r3, r1, r3
 800793c:	4013      	ands	r3, r2
 800793e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8186 	beq.w	8007c54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f003 0303 	and.w	r3, r3, #3
 8007950:	2b01      	cmp	r3, #1
 8007952:	d005      	beq.n	8007960 <HAL_GPIO_Init+0x44>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d130      	bne.n	80079c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	2203      	movs	r2, #3
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	43db      	mvns	r3, r3
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	4013      	ands	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	fa02 f303 	lsl.w	r3, r2, r3
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	4313      	orrs	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007996:	2201      	movs	r2, #1
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	fa02 f303 	lsl.w	r3, r2, r3
 800799e:	43db      	mvns	r3, r3
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	4013      	ands	r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	091b      	lsrs	r3, r3, #4
 80079ac:	f003 0201 	and.w	r2, r3, #1
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d017      	beq.n	80079fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	2203      	movs	r2, #3
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	43db      	mvns	r3, r3
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	4013      	ands	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d123      	bne.n	8007a52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	08da      	lsrs	r2, r3, #3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3208      	adds	r2, #8
 8007a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	220f      	movs	r2, #15
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43db      	mvns	r3, r3
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	08da      	lsrs	r2, r3, #3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3208      	adds	r2, #8
 8007a4c:	69b9      	ldr	r1, [r7, #24]
 8007a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	43db      	mvns	r3, r3
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4013      	ands	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f003 0203 	and.w	r2, r3, #3
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80e0 	beq.w	8007c54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a94:	4b2f      	ldr	r3, [pc, #188]	@ (8007b54 <HAL_GPIO_Init+0x238>)
 8007a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a9a:	4a2e      	ldr	r2, [pc, #184]	@ (8007b54 <HAL_GPIO_Init+0x238>)
 8007a9c:	f043 0302 	orr.w	r3, r3, #2
 8007aa0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8007b54 <HAL_GPIO_Init+0x238>)
 8007aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ab2:	4a29      	ldr	r2, [pc, #164]	@ (8007b58 <HAL_GPIO_Init+0x23c>)
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	089b      	lsrs	r3, r3, #2
 8007ab8:	3302      	adds	r3, #2
 8007aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	220f      	movs	r2, #15
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a20      	ldr	r2, [pc, #128]	@ (8007b5c <HAL_GPIO_Init+0x240>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d052      	beq.n	8007b84 <HAL_GPIO_Init+0x268>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8007b60 <HAL_GPIO_Init+0x244>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d031      	beq.n	8007b4a <HAL_GPIO_Init+0x22e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b64 <HAL_GPIO_Init+0x248>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d02b      	beq.n	8007b46 <HAL_GPIO_Init+0x22a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b68 <HAL_GPIO_Init+0x24c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d025      	beq.n	8007b42 <HAL_GPIO_Init+0x226>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a1c      	ldr	r2, [pc, #112]	@ (8007b6c <HAL_GPIO_Init+0x250>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d01f      	beq.n	8007b3e <HAL_GPIO_Init+0x222>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a1b      	ldr	r2, [pc, #108]	@ (8007b70 <HAL_GPIO_Init+0x254>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d019      	beq.n	8007b3a <HAL_GPIO_Init+0x21e>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a1a      	ldr	r2, [pc, #104]	@ (8007b74 <HAL_GPIO_Init+0x258>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d013      	beq.n	8007b36 <HAL_GPIO_Init+0x21a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a19      	ldr	r2, [pc, #100]	@ (8007b78 <HAL_GPIO_Init+0x25c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00d      	beq.n	8007b32 <HAL_GPIO_Init+0x216>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a18      	ldr	r2, [pc, #96]	@ (8007b7c <HAL_GPIO_Init+0x260>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d007      	beq.n	8007b2e <HAL_GPIO_Init+0x212>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a17      	ldr	r2, [pc, #92]	@ (8007b80 <HAL_GPIO_Init+0x264>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d101      	bne.n	8007b2a <HAL_GPIO_Init+0x20e>
 8007b26:	2309      	movs	r3, #9
 8007b28:	e02d      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b2a:	230a      	movs	r3, #10
 8007b2c:	e02b      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b2e:	2308      	movs	r3, #8
 8007b30:	e029      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b32:	2307      	movs	r3, #7
 8007b34:	e027      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b36:	2306      	movs	r3, #6
 8007b38:	e025      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b3a:	2305      	movs	r3, #5
 8007b3c:	e023      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b3e:	2304      	movs	r3, #4
 8007b40:	e021      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b42:	2303      	movs	r3, #3
 8007b44:	e01f      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e01d      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e01b      	b.n	8007b86 <HAL_GPIO_Init+0x26a>
 8007b4e:	bf00      	nop
 8007b50:	58000080 	.word	0x58000080
 8007b54:	58024400 	.word	0x58024400
 8007b58:	58000400 	.word	0x58000400
 8007b5c:	58020000 	.word	0x58020000
 8007b60:	58020400 	.word	0x58020400
 8007b64:	58020800 	.word	0x58020800
 8007b68:	58020c00 	.word	0x58020c00
 8007b6c:	58021000 	.word	0x58021000
 8007b70:	58021400 	.word	0x58021400
 8007b74:	58021800 	.word	0x58021800
 8007b78:	58021c00 	.word	0x58021c00
 8007b7c:	58022000 	.word	0x58022000
 8007b80:	58022400 	.word	0x58022400
 8007b84:	2300      	movs	r3, #0
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	f002 0203 	and.w	r2, r2, #3
 8007b8c:	0092      	lsls	r2, r2, #2
 8007b8e:	4093      	lsls	r3, r2
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b96:	4938      	ldr	r1, [pc, #224]	@ (8007c78 <HAL_GPIO_Init+0x35c>)
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	089b      	lsrs	r3, r3, #2
 8007b9c:	3302      	adds	r3, #2
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007bca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	4013      	ands	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	43db      	mvns	r3, r3
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	43db      	mvns	r3, r3
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	4013      	ands	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	3301      	adds	r3, #1
 8007c58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f47f ae63 	bne.w	8007930 <HAL_GPIO_Init+0x14>
  }
}
 8007c6a:	bf00      	nop
 8007c6c:	bf00      	nop
 8007c6e:	3724      	adds	r7, #36	@ 0x24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	58000400 	.word	0x58000400

08007c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	807b      	strh	r3, [r7, #2]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c8c:	787b      	ldrb	r3, [r7, #1]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c92:	887a      	ldrh	r2, [r7, #2]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c98:	e003      	b.n	8007ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c9a:	887b      	ldrh	r3, [r7, #2]
 8007c9c:	041a      	lsls	r2, r3, #16
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	619a      	str	r2, [r3, #24]
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007cc0:	88fb      	ldrh	r3, [r7, #6]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d008      	beq.n	8007cda <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007cc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ccc:	88fb      	ldrh	r3, [r7, #6]
 8007cce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7f9 fd95 	bl	8001804 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007cec:	4b19      	ldr	r3, [pc, #100]	@ (8007d54 <HAL_PWREx_ConfigSupply+0x70>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d00a      	beq.n	8007d0e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007cf8:	4b16      	ldr	r3, [pc, #88]	@ (8007d54 <HAL_PWREx_ConfigSupply+0x70>)
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d001      	beq.n	8007d0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e01f      	b.n	8007d4a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	e01d      	b.n	8007d4a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d0e:	4b11      	ldr	r3, [pc, #68]	@ (8007d54 <HAL_PWREx_ConfigSupply+0x70>)
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f023 0207 	bic.w	r2, r3, #7
 8007d16:	490f      	ldr	r1, [pc, #60]	@ (8007d54 <HAL_PWREx_ConfigSupply+0x70>)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d1e:	f7fb fba3 	bl	8003468 <HAL_GetTick>
 8007d22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d24:	e009      	b.n	8007d3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d26:	f7fb fb9f 	bl	8003468 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d34:	d901      	bls.n	8007d3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e007      	b.n	8007d4a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d3a:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <HAL_PWREx_ConfigSupply+0x70>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d46:	d1ee      	bne.n	8007d26 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	58024800 	.word	0x58024800

08007d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08c      	sub	sp, #48	@ 0x30
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d102      	bne.n	8007d6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f000 bc48 	b.w	80085fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8088 	beq.w	8007e8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d7a:	4b99      	ldr	r3, [pc, #612]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d84:	4b96      	ldr	r3, [pc, #600]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8c:	2b10      	cmp	r3, #16
 8007d8e:	d007      	beq.n	8007da0 <HAL_RCC_OscConfig+0x48>
 8007d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d92:	2b18      	cmp	r3, #24
 8007d94:	d111      	bne.n	8007dba <HAL_RCC_OscConfig+0x62>
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	f003 0303 	and.w	r3, r3, #3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d10c      	bne.n	8007dba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da0:	4b8f      	ldr	r3, [pc, #572]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d06d      	beq.n	8007e88 <HAL_RCC_OscConfig+0x130>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d169      	bne.n	8007e88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f000 bc21 	b.w	80085fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dc2:	d106      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x7a>
 8007dc4:	4b86      	ldr	r3, [pc, #536]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a85      	ldr	r2, [pc, #532]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	e02e      	b.n	8007e30 <HAL_RCC_OscConfig+0xd8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10c      	bne.n	8007df4 <HAL_RCC_OscConfig+0x9c>
 8007dda:	4b81      	ldr	r3, [pc, #516]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a80      	ldr	r2, [pc, #512]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	4b7e      	ldr	r3, [pc, #504]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a7d      	ldr	r2, [pc, #500]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007dec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	e01d      	b.n	8007e30 <HAL_RCC_OscConfig+0xd8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dfc:	d10c      	bne.n	8007e18 <HAL_RCC_OscConfig+0xc0>
 8007dfe:	4b78      	ldr	r3, [pc, #480]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a77      	ldr	r2, [pc, #476]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	4b75      	ldr	r3, [pc, #468]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a74      	ldr	r2, [pc, #464]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	e00b      	b.n	8007e30 <HAL_RCC_OscConfig+0xd8>
 8007e18:	4b71      	ldr	r3, [pc, #452]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a70      	ldr	r2, [pc, #448]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	4b6e      	ldr	r3, [pc, #440]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a6d      	ldr	r2, [pc, #436]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d013      	beq.n	8007e60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e38:	f7fb fb16 	bl	8003468 <HAL_GetTick>
 8007e3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e3e:	e008      	b.n	8007e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e40:	f7fb fb12 	bl	8003468 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b64      	cmp	r3, #100	@ 0x64
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e3d4      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e52:	4b63      	ldr	r3, [pc, #396]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f0      	beq.n	8007e40 <HAL_RCC_OscConfig+0xe8>
 8007e5e:	e014      	b.n	8007e8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e60:	f7fb fb02 	bl	8003468 <HAL_GetTick>
 8007e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e66:	e008      	b.n	8007e7a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e68:	f7fb fafe 	bl	8003468 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b64      	cmp	r3, #100	@ 0x64
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e3c0      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e7a:	4b59      	ldr	r3, [pc, #356]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f0      	bne.n	8007e68 <HAL_RCC_OscConfig+0x110>
 8007e86:	e000      	b.n	8007e8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 80ca 	beq.w	800802c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e98:	4b51      	ldr	r3, [pc, #324]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ea0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <HAL_RCC_OscConfig+0x166>
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	2b18      	cmp	r3, #24
 8007eb2:	d156      	bne.n	8007f62 <HAL_RCC_OscConfig+0x20a>
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d151      	bne.n	8007f62 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ebe:	4b48      	ldr	r3, [pc, #288]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x17e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e392      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ed6:	4b42      	ldr	r3, [pc, #264]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f023 0219 	bic.w	r2, r3, #25
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	493f      	ldr	r1, [pc, #252]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee8:	f7fb fabe 	bl	8003468 <HAL_GetTick>
 8007eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eee:	e008      	b.n	8007f02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ef0:	f7fb faba 	bl	8003468 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d901      	bls.n	8007f02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e37c      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f02:	4b37      	ldr	r3, [pc, #220]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0f0      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f0e:	f7fb fadb 	bl	80034c8 <HAL_GetREVID>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d817      	bhi.n	8007f4c <HAL_RCC_OscConfig+0x1f4>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	2b40      	cmp	r3, #64	@ 0x40
 8007f22:	d108      	bne.n	8007f36 <HAL_RCC_OscConfig+0x1de>
 8007f24:	4b2e      	ldr	r3, [pc, #184]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f32:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f34:	e07a      	b.n	800802c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f36:	4b2a      	ldr	r3, [pc, #168]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	031b      	lsls	r3, r3, #12
 8007f44:	4926      	ldr	r1, [pc, #152]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f4a:	e06f      	b.n	800802c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f4c:	4b24      	ldr	r3, [pc, #144]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	4921      	ldr	r1, [pc, #132]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f60:	e064      	b.n	800802c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d047      	beq.n	8007ffa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f023 0219 	bic.w	r2, r3, #25
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	491a      	ldr	r1, [pc, #104]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7c:	f7fb fa74 	bl	8003468 <HAL_GetTick>
 8007f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f84:	f7fb fa70 	bl	8003468 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e332      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f96:	4b12      	ldr	r3, [pc, #72]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f0      	beq.n	8007f84 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa2:	f7fb fa91 	bl	80034c8 <HAL_GetREVID>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d819      	bhi.n	8007fe4 <HAL_RCC_OscConfig+0x28c>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	2b40      	cmp	r3, #64	@ 0x40
 8007fb6:	d108      	bne.n	8007fca <HAL_RCC_OscConfig+0x272>
 8007fb8:	4b09      	ldr	r3, [pc, #36]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007fc0:	4a07      	ldr	r2, [pc, #28]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fc6:	6053      	str	r3, [r2, #4]
 8007fc8:	e030      	b.n	800802c <HAL_RCC_OscConfig+0x2d4>
 8007fca:	4b05      	ldr	r3, [pc, #20]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	031b      	lsls	r3, r3, #12
 8007fd8:	4901      	ldr	r1, [pc, #4]	@ (8007fe0 <HAL_RCC_OscConfig+0x288>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	604b      	str	r3, [r1, #4]
 8007fde:	e025      	b.n	800802c <HAL_RCC_OscConfig+0x2d4>
 8007fe0:	58024400 	.word	0x58024400
 8007fe4:	4b9a      	ldr	r3, [pc, #616]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	061b      	lsls	r3, r3, #24
 8007ff2:	4997      	ldr	r1, [pc, #604]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	604b      	str	r3, [r1, #4]
 8007ff8:	e018      	b.n	800802c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ffa:	4b95      	ldr	r3, [pc, #596]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a94      	ldr	r2, [pc, #592]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008006:	f7fb fa2f 	bl	8003468 <HAL_GetTick>
 800800a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800800c:	e008      	b.n	8008020 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800800e:	f7fb fa2b 	bl	8003468 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d901      	bls.n	8008020 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e2ed      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008020:	4b8b      	ldr	r3, [pc, #556]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f0      	bne.n	800800e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80a9 	beq.w	800818c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800803a:	4b85      	ldr	r3, [pc, #532]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008042:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008044:	4b82      	ldr	r3, [pc, #520]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008048:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2b08      	cmp	r3, #8
 800804e:	d007      	beq.n	8008060 <HAL_RCC_OscConfig+0x308>
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	2b18      	cmp	r3, #24
 8008054:	d13a      	bne.n	80080cc <HAL_RCC_OscConfig+0x374>
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	2b01      	cmp	r3, #1
 800805e:	d135      	bne.n	80080cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008060:	4b7b      	ldr	r3, [pc, #492]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <HAL_RCC_OscConfig+0x320>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	2b80      	cmp	r3, #128	@ 0x80
 8008072:	d001      	beq.n	8008078 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e2c1      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008078:	f7fb fa26 	bl	80034c8 <HAL_GetREVID>
 800807c:	4603      	mov	r3, r0
 800807e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008082:	4293      	cmp	r3, r2
 8008084:	d817      	bhi.n	80080b6 <HAL_RCC_OscConfig+0x35e>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	2b20      	cmp	r3, #32
 800808c:	d108      	bne.n	80080a0 <HAL_RCC_OscConfig+0x348>
 800808e:	4b70      	ldr	r3, [pc, #448]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008096:	4a6e      	ldr	r2, [pc, #440]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008098:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800809c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800809e:	e075      	b.n	800818c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080a0:	4b6b      	ldr	r3, [pc, #428]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	069b      	lsls	r3, r3, #26
 80080ae:	4968      	ldr	r1, [pc, #416]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080b4:	e06a      	b.n	800818c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080b6:	4b66      	ldr	r3, [pc, #408]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	061b      	lsls	r3, r3, #24
 80080c4:	4962      	ldr	r1, [pc, #392]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080ca:	e05f      	b.n	800818c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d042      	beq.n	800815a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080d4:	4b5e      	ldr	r3, [pc, #376]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a5d      	ldr	r2, [pc, #372]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80080da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e0:	f7fb f9c2 	bl	8003468 <HAL_GetTick>
 80080e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080e8:	f7fb f9be 	bl	8003468 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e280      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080fa:	4b55      	ldr	r3, [pc, #340]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0f0      	beq.n	80080e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008106:	f7fb f9df 	bl	80034c8 <HAL_GetREVID>
 800810a:	4603      	mov	r3, r0
 800810c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008110:	4293      	cmp	r3, r2
 8008112:	d817      	bhi.n	8008144 <HAL_RCC_OscConfig+0x3ec>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	2b20      	cmp	r3, #32
 800811a:	d108      	bne.n	800812e <HAL_RCC_OscConfig+0x3d6>
 800811c:	4b4c      	ldr	r3, [pc, #304]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008124:	4a4a      	ldr	r2, [pc, #296]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008126:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800812a:	6053      	str	r3, [r2, #4]
 800812c:	e02e      	b.n	800818c <HAL_RCC_OscConfig+0x434>
 800812e:	4b48      	ldr	r3, [pc, #288]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	069b      	lsls	r3, r3, #26
 800813c:	4944      	ldr	r1, [pc, #272]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 800813e:	4313      	orrs	r3, r2
 8008140:	604b      	str	r3, [r1, #4]
 8008142:	e023      	b.n	800818c <HAL_RCC_OscConfig+0x434>
 8008144:	4b42      	ldr	r3, [pc, #264]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	061b      	lsls	r3, r3, #24
 8008152:	493f      	ldr	r1, [pc, #252]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008154:	4313      	orrs	r3, r2
 8008156:	60cb      	str	r3, [r1, #12]
 8008158:	e018      	b.n	800818c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800815a:	4b3d      	ldr	r3, [pc, #244]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a3c      	ldr	r2, [pc, #240]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008166:	f7fb f97f 	bl	8003468 <HAL_GetTick>
 800816a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800816e:	f7fb f97b 	bl	8003468 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e23d      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008180:	4b33      	ldr	r3, [pc, #204]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f0      	bne.n	800816e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b00      	cmp	r3, #0
 8008196:	d036      	beq.n	8008206 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d019      	beq.n	80081d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80081a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a4:	4a2a      	ldr	r2, [pc, #168]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ac:	f7fb f95c 	bl	8003468 <HAL_GetTick>
 80081b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081b4:	f7fb f958 	bl	8003468 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e21a      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081c6:	4b22      	ldr	r3, [pc, #136]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80081c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0f0      	beq.n	80081b4 <HAL_RCC_OscConfig+0x45c>
 80081d2:	e018      	b.n	8008206 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80081d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80081da:	f023 0301 	bic.w	r3, r3, #1
 80081de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e0:	f7fb f942 	bl	8003468 <HAL_GetTick>
 80081e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081e8:	f7fb f93e 	bl	8003468 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e200      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081fa:	4b15      	ldr	r3, [pc, #84]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 80081fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1f0      	bne.n	80081e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	d039      	beq.n	8008286 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01c      	beq.n	8008254 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800821a:	4b0d      	ldr	r3, [pc, #52]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a0c      	ldr	r2, [pc, #48]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008220:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008224:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008226:	f7fb f91f 	bl	8003468 <HAL_GetTick>
 800822a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800822c:	e008      	b.n	8008240 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800822e:	f7fb f91b 	bl	8003468 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e1dd      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008240:	4b03      	ldr	r3, [pc, #12]	@ (8008250 <HAL_RCC_OscConfig+0x4f8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0f0      	beq.n	800822e <HAL_RCC_OscConfig+0x4d6>
 800824c:	e01b      	b.n	8008286 <HAL_RCC_OscConfig+0x52e>
 800824e:	bf00      	nop
 8008250:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008254:	4b9b      	ldr	r3, [pc, #620]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a9a      	ldr	r2, [pc, #616]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800825a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800825e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008260:	f7fb f902 	bl	8003468 <HAL_GetTick>
 8008264:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008268:	f7fb f8fe 	bl	8003468 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b02      	cmp	r3, #2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e1c0      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800827a:	4b92      	ldr	r3, [pc, #584]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1f0      	bne.n	8008268 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8081 	beq.w	8008396 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008294:	4b8c      	ldr	r3, [pc, #560]	@ (80084c8 <HAL_RCC_OscConfig+0x770>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a8b      	ldr	r2, [pc, #556]	@ (80084c8 <HAL_RCC_OscConfig+0x770>)
 800829a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800829e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082a0:	f7fb f8e2 	bl	8003468 <HAL_GetTick>
 80082a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082a6:	e008      	b.n	80082ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082a8:	f7fb f8de 	bl	8003468 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b64      	cmp	r3, #100	@ 0x64
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e1a0      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082ba:	4b83      	ldr	r3, [pc, #524]	@ (80084c8 <HAL_RCC_OscConfig+0x770>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0f0      	beq.n	80082a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d106      	bne.n	80082dc <HAL_RCC_OscConfig+0x584>
 80082ce:	4b7d      	ldr	r3, [pc, #500]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80082d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d2:	4a7c      	ldr	r2, [pc, #496]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80082d4:	f043 0301 	orr.w	r3, r3, #1
 80082d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80082da:	e02d      	b.n	8008338 <HAL_RCC_OscConfig+0x5e0>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10c      	bne.n	80082fe <HAL_RCC_OscConfig+0x5a6>
 80082e4:	4b77      	ldr	r3, [pc, #476]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80082e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e8:	4a76      	ldr	r2, [pc, #472]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80082ea:	f023 0301 	bic.w	r3, r3, #1
 80082ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80082f0:	4b74      	ldr	r3, [pc, #464]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80082f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f4:	4a73      	ldr	r2, [pc, #460]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80082f6:	f023 0304 	bic.w	r3, r3, #4
 80082fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80082fc:	e01c      	b.n	8008338 <HAL_RCC_OscConfig+0x5e0>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	2b05      	cmp	r3, #5
 8008304:	d10c      	bne.n	8008320 <HAL_RCC_OscConfig+0x5c8>
 8008306:	4b6f      	ldr	r3, [pc, #444]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830a:	4a6e      	ldr	r2, [pc, #440]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800830c:	f043 0304 	orr.w	r3, r3, #4
 8008310:	6713      	str	r3, [r2, #112]	@ 0x70
 8008312:	4b6c      	ldr	r3, [pc, #432]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008316:	4a6b      	ldr	r2, [pc, #428]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008318:	f043 0301 	orr.w	r3, r3, #1
 800831c:	6713      	str	r3, [r2, #112]	@ 0x70
 800831e:	e00b      	b.n	8008338 <HAL_RCC_OscConfig+0x5e0>
 8008320:	4b68      	ldr	r3, [pc, #416]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008324:	4a67      	ldr	r2, [pc, #412]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008326:	f023 0301 	bic.w	r3, r3, #1
 800832a:	6713      	str	r3, [r2, #112]	@ 0x70
 800832c:	4b65      	ldr	r3, [pc, #404]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800832e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008330:	4a64      	ldr	r2, [pc, #400]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008332:	f023 0304 	bic.w	r3, r3, #4
 8008336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d015      	beq.n	800836c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008340:	f7fb f892 	bl	8003468 <HAL_GetTick>
 8008344:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008346:	e00a      	b.n	800835e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008348:	f7fb f88e 	bl	8003468 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008356:	4293      	cmp	r3, r2
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e14e      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800835e:	4b59      	ldr	r3, [pc, #356]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0ee      	beq.n	8008348 <HAL_RCC_OscConfig+0x5f0>
 800836a:	e014      	b.n	8008396 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836c:	f7fb f87c 	bl	8003468 <HAL_GetTick>
 8008370:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008372:	e00a      	b.n	800838a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008374:	f7fb f878 	bl	8003468 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008382:	4293      	cmp	r3, r2
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e138      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800838a:	4b4e      	ldr	r3, [pc, #312]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800838c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1ee      	bne.n	8008374 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 812d 	beq.w	80085fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80083a0:	4b48      	ldr	r3, [pc, #288]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083a8:	2b18      	cmp	r3, #24
 80083aa:	f000 80bd 	beq.w	8008528 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	f040 809e 	bne.w	80084f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b8:	4b42      	ldr	r3, [pc, #264]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a41      	ldr	r2, [pc, #260]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80083be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c4:	f7fb f850 	bl	8003468 <HAL_GetTick>
 80083c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083cc:	f7fb f84c 	bl	8003468 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e10e      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083de:	4b39      	ldr	r3, [pc, #228]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f0      	bne.n	80083cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083ea:	4b36      	ldr	r3, [pc, #216]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80083ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083ee:	4b37      	ldr	r3, [pc, #220]	@ (80084cc <HAL_RCC_OscConfig+0x774>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80083fa:	0112      	lsls	r2, r2, #4
 80083fc:	430a      	orrs	r2, r1
 80083fe:	4931      	ldr	r1, [pc, #196]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008400:	4313      	orrs	r3, r2
 8008402:	628b      	str	r3, [r1, #40]	@ 0x28
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008408:	3b01      	subs	r3, #1
 800840a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008412:	3b01      	subs	r3, #1
 8008414:	025b      	lsls	r3, r3, #9
 8008416:	b29b      	uxth	r3, r3
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841e:	3b01      	subs	r3, #1
 8008420:	041b      	lsls	r3, r3, #16
 8008422:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800842c:	3b01      	subs	r3, #1
 800842e:	061b      	lsls	r3, r3, #24
 8008430:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008434:	4923      	ldr	r1, [pc, #140]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008436:	4313      	orrs	r3, r2
 8008438:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800843a:	4b22      	ldr	r3, [pc, #136]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800843c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843e:	4a21      	ldr	r2, [pc, #132]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008440:	f023 0301 	bic.w	r3, r3, #1
 8008444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008446:	4b1f      	ldr	r3, [pc, #124]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800844a:	4b21      	ldr	r3, [pc, #132]	@ (80084d0 <HAL_RCC_OscConfig+0x778>)
 800844c:	4013      	ands	r3, r2
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008452:	00d2      	lsls	r2, r2, #3
 8008454:	491b      	ldr	r1, [pc, #108]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008456:	4313      	orrs	r3, r2
 8008458:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800845a:	4b1a      	ldr	r3, [pc, #104]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800845c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845e:	f023 020c 	bic.w	r2, r3, #12
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008466:	4917      	ldr	r1, [pc, #92]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008468:	4313      	orrs	r3, r2
 800846a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800846c:	4b15      	ldr	r3, [pc, #84]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008470:	f023 0202 	bic.w	r2, r3, #2
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008478:	4912      	ldr	r1, [pc, #72]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800847a:	4313      	orrs	r3, r2
 800847c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800847e:	4b11      	ldr	r3, [pc, #68]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008482:	4a10      	ldr	r2, [pc, #64]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800848a:	4b0e      	ldr	r3, [pc, #56]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800848c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848e:	4a0d      	ldr	r2, [pc, #52]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008496:	4b0b      	ldr	r3, [pc, #44]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 8008498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849a:	4a0a      	ldr	r2, [pc, #40]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 800849c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80084a2:	4b08      	ldr	r3, [pc, #32]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a6:	4a07      	ldr	r2, [pc, #28]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80084a8:	f043 0301 	orr.w	r3, r3, #1
 80084ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084ae:	4b05      	ldr	r3, [pc, #20]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a04      	ldr	r2, [pc, #16]	@ (80084c4 <HAL_RCC_OscConfig+0x76c>)
 80084b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80084b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ba:	f7fa ffd5 	bl	8003468 <HAL_GetTick>
 80084be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084c0:	e011      	b.n	80084e6 <HAL_RCC_OscConfig+0x78e>
 80084c2:	bf00      	nop
 80084c4:	58024400 	.word	0x58024400
 80084c8:	58024800 	.word	0x58024800
 80084cc:	fffffc0c 	.word	0xfffffc0c
 80084d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084d4:	f7fa ffc8 	bl	8003468 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e08a      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084e6:	4b47      	ldr	r3, [pc, #284]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0f0      	beq.n	80084d4 <HAL_RCC_OscConfig+0x77c>
 80084f2:	e082      	b.n	80085fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084f4:	4b43      	ldr	r3, [pc, #268]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a42      	ldr	r2, [pc, #264]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80084fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008500:	f7fa ffb2 	bl	8003468 <HAL_GetTick>
 8008504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008508:	f7fa ffae 	bl	8003468 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e070      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800851a:	4b3a      	ldr	r3, [pc, #232]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f0      	bne.n	8008508 <HAL_RCC_OscConfig+0x7b0>
 8008526:	e068      	b.n	80085fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008528:	4b36      	ldr	r3, [pc, #216]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 800852a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800852e:	4b35      	ldr	r3, [pc, #212]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 8008530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008532:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008538:	2b01      	cmp	r3, #1
 800853a:	d031      	beq.n	80085a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f003 0203 	and.w	r2, r3, #3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008546:	429a      	cmp	r2, r3
 8008548:	d12a      	bne.n	80085a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	091b      	lsrs	r3, r3, #4
 800854e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008556:	429a      	cmp	r2, r3
 8008558:	d122      	bne.n	80085a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008564:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008566:	429a      	cmp	r2, r3
 8008568:	d11a      	bne.n	80085a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	0a5b      	lsrs	r3, r3, #9
 800856e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008576:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008578:	429a      	cmp	r2, r3
 800857a:	d111      	bne.n	80085a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	0c1b      	lsrs	r3, r3, #16
 8008580:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008588:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800858a:	429a      	cmp	r2, r3
 800858c:	d108      	bne.n	80085a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	0e1b      	lsrs	r3, r3, #24
 8008592:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800859c:	429a      	cmp	r2, r3
 800859e:	d001      	beq.n	80085a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e02b      	b.n	80085fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80085a4:	4b17      	ldr	r3, [pc, #92]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80085a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a8:	08db      	lsrs	r3, r3, #3
 80085aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d01f      	beq.n	80085fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80085ba:	4b12      	ldr	r3, [pc, #72]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085be:	4a11      	ldr	r2, [pc, #68]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80085c0:	f023 0301 	bic.w	r3, r3, #1
 80085c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80085c6:	f7fa ff4f 	bl	8003468 <HAL_GetTick>
 80085ca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80085cc:	bf00      	nop
 80085ce:	f7fa ff4b 	bl	8003468 <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d0f9      	beq.n	80085ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085da:	4b0a      	ldr	r3, [pc, #40]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80085dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085de:	4b0a      	ldr	r3, [pc, #40]	@ (8008608 <HAL_RCC_OscConfig+0x8b0>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80085e6:	00d2      	lsls	r2, r2, #3
 80085e8:	4906      	ldr	r1, [pc, #24]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80085ee:	4b05      	ldr	r3, [pc, #20]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80085f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f2:	4a04      	ldr	r2, [pc, #16]	@ (8008604 <HAL_RCC_OscConfig+0x8ac>)
 80085f4:	f043 0301 	orr.w	r3, r3, #1
 80085f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3730      	adds	r7, #48	@ 0x30
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	58024400 	.word	0x58024400
 8008608:	ffff0007 	.word	0xffff0007

0800860c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e19c      	b.n	800895a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008620:	4b8a      	ldr	r3, [pc, #552]	@ (800884c <HAL_RCC_ClockConfig+0x240>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 030f 	and.w	r3, r3, #15
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d910      	bls.n	8008650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800862e:	4b87      	ldr	r3, [pc, #540]	@ (800884c <HAL_RCC_ClockConfig+0x240>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f023 020f 	bic.w	r2, r3, #15
 8008636:	4985      	ldr	r1, [pc, #532]	@ (800884c <HAL_RCC_ClockConfig+0x240>)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	4313      	orrs	r3, r2
 800863c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800863e:	4b83      	ldr	r3, [pc, #524]	@ (800884c <HAL_RCC_ClockConfig+0x240>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 030f 	and.w	r3, r3, #15
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d001      	beq.n	8008650 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e184      	b.n	800895a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d010      	beq.n	800867e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	4b7b      	ldr	r3, [pc, #492]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008668:	429a      	cmp	r2, r3
 800866a:	d908      	bls.n	800867e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800866c:	4b78      	ldr	r3, [pc, #480]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	4975      	ldr	r1, [pc, #468]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 800867a:	4313      	orrs	r3, r2
 800867c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d010      	beq.n	80086ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695a      	ldr	r2, [r3, #20]
 800868e:	4b70      	ldr	r3, [pc, #448]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008696:	429a      	cmp	r2, r3
 8008698:	d908      	bls.n	80086ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800869a:	4b6d      	ldr	r3, [pc, #436]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	496a      	ldr	r1, [pc, #424]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d010      	beq.n	80086da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699a      	ldr	r2, [r3, #24]
 80086bc:	4b64      	ldr	r3, [pc, #400]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d908      	bls.n	80086da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80086c8:	4b61      	ldr	r3, [pc, #388]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	495e      	ldr	r1, [pc, #376]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d010      	beq.n	8008708 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	69da      	ldr	r2, [r3, #28]
 80086ea:	4b59      	ldr	r3, [pc, #356]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d908      	bls.n	8008708 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80086f6:	4b56      	ldr	r3, [pc, #344]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	4953      	ldr	r1, [pc, #332]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008704:	4313      	orrs	r3, r2
 8008706:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0302 	and.w	r3, r3, #2
 8008710:	2b00      	cmp	r3, #0
 8008712:	d010      	beq.n	8008736 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	4b4d      	ldr	r3, [pc, #308]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	429a      	cmp	r2, r3
 8008722:	d908      	bls.n	8008736 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008724:	4b4a      	ldr	r3, [pc, #296]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	f023 020f 	bic.w	r2, r3, #15
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4947      	ldr	r1, [pc, #284]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008732:	4313      	orrs	r3, r2
 8008734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d055      	beq.n	80087ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008742:	4b43      	ldr	r3, [pc, #268]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	4940      	ldr	r1, [pc, #256]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008750:	4313      	orrs	r3, r2
 8008752:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d107      	bne.n	800876c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800875c:	4b3c      	ldr	r3, [pc, #240]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d121      	bne.n	80087ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e0f6      	b.n	800895a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b03      	cmp	r3, #3
 8008772:	d107      	bne.n	8008784 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008774:	4b36      	ldr	r3, [pc, #216]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d115      	bne.n	80087ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e0ea      	b.n	800895a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d107      	bne.n	800879c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800878c:	4b30      	ldr	r3, [pc, #192]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e0de      	b.n	800895a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800879c:	4b2c      	ldr	r3, [pc, #176]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e0d6      	b.n	800895a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80087ac:	4b28      	ldr	r3, [pc, #160]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	f023 0207 	bic.w	r2, r3, #7
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	4925      	ldr	r1, [pc, #148]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087be:	f7fa fe53 	bl	8003468 <HAL_GetTick>
 80087c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087c4:	e00a      	b.n	80087dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087c6:	f7fa fe4f 	bl	8003468 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d901      	bls.n	80087dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e0be      	b.n	800895a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	00db      	lsls	r3, r3, #3
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d1eb      	bne.n	80087c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d010      	beq.n	800881c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	4b14      	ldr	r3, [pc, #80]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	429a      	cmp	r2, r3
 8008808:	d208      	bcs.n	800881c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800880a:	4b11      	ldr	r3, [pc, #68]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f023 020f 	bic.w	r2, r3, #15
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	490e      	ldr	r1, [pc, #56]	@ (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008818:	4313      	orrs	r3, r2
 800881a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800881c:	4b0b      	ldr	r3, [pc, #44]	@ (800884c <HAL_RCC_ClockConfig+0x240>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 030f 	and.w	r3, r3, #15
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d214      	bcs.n	8008854 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800882a:	4b08      	ldr	r3, [pc, #32]	@ (800884c <HAL_RCC_ClockConfig+0x240>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f023 020f 	bic.w	r2, r3, #15
 8008832:	4906      	ldr	r1, [pc, #24]	@ (800884c <HAL_RCC_ClockConfig+0x240>)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	4313      	orrs	r3, r2
 8008838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800883a:	4b04      	ldr	r3, [pc, #16]	@ (800884c <HAL_RCC_ClockConfig+0x240>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	429a      	cmp	r2, r3
 8008846:	d005      	beq.n	8008854 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e086      	b.n	800895a <HAL_RCC_ClockConfig+0x34e>
 800884c:	52002000 	.word	0x52002000
 8008850:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d010      	beq.n	8008882 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	4b3f      	ldr	r3, [pc, #252]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800886c:	429a      	cmp	r2, r3
 800886e:	d208      	bcs.n	8008882 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008870:	4b3c      	ldr	r3, [pc, #240]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	4939      	ldr	r1, [pc, #228]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 800887e:	4313      	orrs	r3, r2
 8008880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0308 	and.w	r3, r3, #8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d010      	beq.n	80088b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	695a      	ldr	r2, [r3, #20]
 8008892:	4b34      	ldr	r3, [pc, #208]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800889a:	429a      	cmp	r2, r3
 800889c:	d208      	bcs.n	80088b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800889e:	4b31      	ldr	r3, [pc, #196]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	492e      	ldr	r1, [pc, #184]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d010      	beq.n	80088de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	699a      	ldr	r2, [r3, #24]
 80088c0:	4b28      	ldr	r3, [pc, #160]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d208      	bcs.n	80088de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088cc:	4b25      	ldr	r3, [pc, #148]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	4922      	ldr	r1, [pc, #136]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d010      	beq.n	800890c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69da      	ldr	r2, [r3, #28]
 80088ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d208      	bcs.n	800890c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80088fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	4917      	ldr	r1, [pc, #92]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 8008908:	4313      	orrs	r3, r2
 800890a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800890c:	f000 f834 	bl	8008978 <HAL_RCC_GetSysClockFreq>
 8008910:	4602      	mov	r2, r0
 8008912:	4b14      	ldr	r3, [pc, #80]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	f003 030f 	and.w	r3, r3, #15
 800891c:	4912      	ldr	r1, [pc, #72]	@ (8008968 <HAL_RCC_ClockConfig+0x35c>)
 800891e:	5ccb      	ldrb	r3, [r1, r3]
 8008920:	f003 031f 	and.w	r3, r3, #31
 8008924:	fa22 f303 	lsr.w	r3, r2, r3
 8008928:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800892a:	4b0e      	ldr	r3, [pc, #56]	@ (8008964 <HAL_RCC_ClockConfig+0x358>)
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	f003 030f 	and.w	r3, r3, #15
 8008932:	4a0d      	ldr	r2, [pc, #52]	@ (8008968 <HAL_RCC_ClockConfig+0x35c>)
 8008934:	5cd3      	ldrb	r3, [r2, r3]
 8008936:	f003 031f 	and.w	r3, r3, #31
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	fa22 f303 	lsr.w	r3, r2, r3
 8008940:	4a0a      	ldr	r2, [pc, #40]	@ (800896c <HAL_RCC_ClockConfig+0x360>)
 8008942:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008944:	4a0a      	ldr	r2, [pc, #40]	@ (8008970 <HAL_RCC_ClockConfig+0x364>)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800894a:	4b0a      	ldr	r3, [pc, #40]	@ (8008974 <HAL_RCC_ClockConfig+0x368>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f7f9 fd90 	bl	8002474 <HAL_InitTick>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	58024400 	.word	0x58024400
 8008968:	08023638 	.word	0x08023638
 800896c:	24000008 	.word	0x24000008
 8008970:	24000004 	.word	0x24000004
 8008974:	2400000c 	.word	0x2400000c

08008978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008978:	b480      	push	{r7}
 800897a:	b089      	sub	sp, #36	@ 0x24
 800897c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800897e:	4bb3      	ldr	r3, [pc, #716]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008986:	2b18      	cmp	r3, #24
 8008988:	f200 8155 	bhi.w	8008c36 <HAL_RCC_GetSysClockFreq+0x2be>
 800898c:	a201      	add	r2, pc, #4	@ (adr r2, 8008994 <HAL_RCC_GetSysClockFreq+0x1c>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089f9 	.word	0x080089f9
 8008998:	08008c37 	.word	0x08008c37
 800899c:	08008c37 	.word	0x08008c37
 80089a0:	08008c37 	.word	0x08008c37
 80089a4:	08008c37 	.word	0x08008c37
 80089a8:	08008c37 	.word	0x08008c37
 80089ac:	08008c37 	.word	0x08008c37
 80089b0:	08008c37 	.word	0x08008c37
 80089b4:	08008a1f 	.word	0x08008a1f
 80089b8:	08008c37 	.word	0x08008c37
 80089bc:	08008c37 	.word	0x08008c37
 80089c0:	08008c37 	.word	0x08008c37
 80089c4:	08008c37 	.word	0x08008c37
 80089c8:	08008c37 	.word	0x08008c37
 80089cc:	08008c37 	.word	0x08008c37
 80089d0:	08008c37 	.word	0x08008c37
 80089d4:	08008a25 	.word	0x08008a25
 80089d8:	08008c37 	.word	0x08008c37
 80089dc:	08008c37 	.word	0x08008c37
 80089e0:	08008c37 	.word	0x08008c37
 80089e4:	08008c37 	.word	0x08008c37
 80089e8:	08008c37 	.word	0x08008c37
 80089ec:	08008c37 	.word	0x08008c37
 80089f0:	08008c37 	.word	0x08008c37
 80089f4:	08008a2b 	.word	0x08008a2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089f8:	4b94      	ldr	r3, [pc, #592]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0320 	and.w	r3, r3, #32
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d009      	beq.n	8008a18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a04:	4b91      	ldr	r3, [pc, #580]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	08db      	lsrs	r3, r3, #3
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	4a90      	ldr	r2, [pc, #576]	@ (8008c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a10:	fa22 f303 	lsr.w	r3, r2, r3
 8008a14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008a16:	e111      	b.n	8008c3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a18:	4b8d      	ldr	r3, [pc, #564]	@ (8008c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a1a:	61bb      	str	r3, [r7, #24]
      break;
 8008a1c:	e10e      	b.n	8008c3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a20:	61bb      	str	r3, [r7, #24]
      break;
 8008a22:	e10b      	b.n	8008c3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008a24:	4b8c      	ldr	r3, [pc, #560]	@ (8008c58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a26:	61bb      	str	r3, [r7, #24]
      break;
 8008a28:	e108      	b.n	8008c3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a2a:	4b88      	ldr	r3, [pc, #544]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a34:	4b85      	ldr	r3, [pc, #532]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a38:	091b      	lsrs	r3, r3, #4
 8008a3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a40:	4b82      	ldr	r3, [pc, #520]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a4a:	4b80      	ldr	r3, [pc, #512]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a4e:	08db      	lsrs	r3, r3, #3
 8008a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	fb02 f303 	mul.w	r3, r2, r3
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 80e1 	beq.w	8008c30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	f000 8083 	beq.w	8008b7c <HAL_RCC_GetSysClockFreq+0x204>
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	f200 80a1 	bhi.w	8008bc0 <HAL_RCC_GetSysClockFreq+0x248>
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <HAL_RCC_GetSysClockFreq+0x114>
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d056      	beq.n	8008b38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a8a:	e099      	b.n	8008bc0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d02d      	beq.n	8008af4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a98:	4b6c      	ldr	r3, [pc, #432]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	08db      	lsrs	r3, r3, #3
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	4a6b      	ldr	r2, [pc, #428]	@ (8008c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	ee07 3a90 	vmov	s15, r3
 8008ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac2:	4b62      	ldr	r3, [pc, #392]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ad6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008af2:	e087      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008c60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b06:	4b51      	ldr	r3, [pc, #324]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b36:	e065      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008c64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4a:	4b40      	ldr	r3, [pc, #256]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b7a:	e043      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008c68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ba2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bbe:	e021      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008c64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008be6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008c04:	4b11      	ldr	r3, [pc, #68]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c08:	0a5b      	lsrs	r3, r3, #9
 8008c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c0e:	3301      	adds	r3, #1
 8008c10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	ee07 3a90 	vmov	s15, r3
 8008c18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c28:	ee17 3a90 	vmov	r3, s15
 8008c2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008c2e:	e005      	b.n	8008c3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61bb      	str	r3, [r7, #24]
      break;
 8008c34:	e002      	b.n	8008c3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008c36:	4b07      	ldr	r3, [pc, #28]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c38:	61bb      	str	r3, [r7, #24]
      break;
 8008c3a:	bf00      	nop
  }

  return sysclockfreq;
 8008c3c:	69bb      	ldr	r3, [r7, #24]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3724      	adds	r7, #36	@ 0x24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	03d09000 	.word	0x03d09000
 8008c54:	003d0900 	.word	0x003d0900
 8008c58:	007a1200 	.word	0x007a1200
 8008c5c:	46000000 	.word	0x46000000
 8008c60:	4c742400 	.word	0x4c742400
 8008c64:	4a742400 	.word	0x4a742400
 8008c68:	4af42400 	.word	0x4af42400

08008c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c72:	f7ff fe81 	bl	8008978 <HAL_RCC_GetSysClockFreq>
 8008c76:	4602      	mov	r2, r0
 8008c78:	4b10      	ldr	r3, [pc, #64]	@ (8008cbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	0a1b      	lsrs	r3, r3, #8
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	490f      	ldr	r1, [pc, #60]	@ (8008cc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c84:	5ccb      	ldrb	r3, [r1, r3]
 8008c86:	f003 031f 	and.w	r3, r3, #31
 8008c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c90:	4b0a      	ldr	r3, [pc, #40]	@ (8008cbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	4a09      	ldr	r2, [pc, #36]	@ (8008cc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c9a:	5cd3      	ldrb	r3, [r2, r3]
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca6:	4a07      	ldr	r2, [pc, #28]	@ (8008cc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ca8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008caa:	4a07      	ldr	r2, [pc, #28]	@ (8008cc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008cb0:	4b04      	ldr	r3, [pc, #16]	@ (8008cc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	58024400 	.word	0x58024400
 8008cc0:	08023638 	.word	0x08023638
 8008cc4:	24000008 	.word	0x24000008
 8008cc8:	24000004 	.word	0x24000004

08008ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008cd0:	f7ff ffcc 	bl	8008c6c <HAL_RCC_GetHCLKFreq>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	4b06      	ldr	r3, [pc, #24]	@ (8008cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	091b      	lsrs	r3, r3, #4
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	4904      	ldr	r1, [pc, #16]	@ (8008cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ce2:	5ccb      	ldrb	r3, [r1, r3]
 8008ce4:	f003 031f 	and.w	r3, r3, #31
 8008ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	58024400 	.word	0x58024400
 8008cf4:	08023638 	.word	0x08023638

08008cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008cfc:	f7ff ffb6 	bl	8008c6c <HAL_RCC_GetHCLKFreq>
 8008d00:	4602      	mov	r2, r0
 8008d02:	4b06      	ldr	r3, [pc, #24]	@ (8008d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	4904      	ldr	r1, [pc, #16]	@ (8008d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d0e:	5ccb      	ldrb	r3, [r1, r3]
 8008d10:	f003 031f 	and.w	r3, r3, #31
 8008d14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	08023638 	.word	0x08023638

08008d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	223f      	movs	r2, #63	@ 0x3f
 8008d32:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d34:	4b1a      	ldr	r3, [pc, #104]	@ (8008da0 <HAL_RCC_GetClockConfig+0x7c>)
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	f003 0207 	and.w	r2, r3, #7
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008d40:	4b17      	ldr	r3, [pc, #92]	@ (8008da0 <HAL_RCC_GetClockConfig+0x7c>)
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008d4c:	4b14      	ldr	r3, [pc, #80]	@ (8008da0 <HAL_RCC_GetClockConfig+0x7c>)
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	f003 020f 	and.w	r2, r3, #15
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008d58:	4b11      	ldr	r3, [pc, #68]	@ (8008da0 <HAL_RCC_GetClockConfig+0x7c>)
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008d64:	4b0e      	ldr	r3, [pc, #56]	@ (8008da0 <HAL_RCC_GetClockConfig+0x7c>)
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008d70:	4b0b      	ldr	r3, [pc, #44]	@ (8008da0 <HAL_RCC_GetClockConfig+0x7c>)
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008d7c:	4b08      	ldr	r3, [pc, #32]	@ (8008da0 <HAL_RCC_GetClockConfig+0x7c>)
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d88:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <HAL_RCC_GetClockConfig+0x80>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 020f 	and.w	r2, r3, #15
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	601a      	str	r2, [r3, #0]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	58024400 	.word	0x58024400
 8008da4:	52002000 	.word	0x52002000

08008da8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dac:	b0ca      	sub	sp, #296	@ 0x128
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008db4:	2300      	movs	r3, #0
 8008db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008dcc:	2500      	movs	r5, #0
 8008dce:	ea54 0305 	orrs.w	r3, r4, r5
 8008dd2:	d049      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008dde:	d02f      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008de0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008de4:	d828      	bhi.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dea:	d01a      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008dec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008df0:	d822      	bhi.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dfa:	d007      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008dfc:	e01c      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dfe:	4bb8      	ldr	r3, [pc, #736]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e02:	4ab7      	ldr	r2, [pc, #732]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e0a:	e01a      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e10:	3308      	adds	r3, #8
 8008e12:	2102      	movs	r1, #2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f002 fb61 	bl	800b4dc <RCCEx_PLL2_Config>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e20:	e00f      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e26:	3328      	adds	r3, #40	@ 0x28
 8008e28:	2102      	movs	r1, #2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f002 fc08 	bl	800b640 <RCCEx_PLL3_Config>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e36:	e004      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e3e:	e000      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10a      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e4a:	4ba5      	ldr	r3, [pc, #660]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e58:	4aa1      	ldr	r2, [pc, #644]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e5e:	e003      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008e74:	f04f 0900 	mov.w	r9, #0
 8008e78:	ea58 0309 	orrs.w	r3, r8, r9
 8008e7c:	d047      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d82a      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008e88:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008ea5 	.word	0x08008ea5
 8008e94:	08008eb3 	.word	0x08008eb3
 8008e98:	08008ec9 	.word	0x08008ec9
 8008e9c:	08008ee7 	.word	0x08008ee7
 8008ea0:	08008ee7 	.word	0x08008ee7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea4:	4b8e      	ldr	r3, [pc, #568]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea8:	4a8d      	ldr	r2, [pc, #564]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008eb0:	e01a      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	2100      	movs	r1, #0
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f002 fb0e 	bl	800b4dc <RCCEx_PLL2_Config>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ec6:	e00f      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ecc:	3328      	adds	r3, #40	@ 0x28
 8008ece:	2100      	movs	r1, #0
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f002 fbb5 	bl	800b640 <RCCEx_PLL3_Config>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008edc:	e004      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ee4:	e000      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ef0:	4b7b      	ldr	r3, [pc, #492]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef4:	f023 0107 	bic.w	r1, r3, #7
 8008ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008efe:	4a78      	ldr	r2, [pc, #480]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f00:	430b      	orrs	r3, r1
 8008f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f04:	e003      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008f1a:	f04f 0b00 	mov.w	fp, #0
 8008f1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008f22:	d04c      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f2e:	d030      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f34:	d829      	bhi.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f38:	d02d      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f3c:	d825      	bhi.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f3e:	2b80      	cmp	r3, #128	@ 0x80
 8008f40:	d018      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008f42:	2b80      	cmp	r3, #128	@ 0x80
 8008f44:	d821      	bhi.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008f4a:	2b40      	cmp	r3, #64	@ 0x40
 8008f4c:	d007      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008f4e:	e01c      	b.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f50:	4b63      	ldr	r3, [pc, #396]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	4a62      	ldr	r2, [pc, #392]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008f5c:	e01c      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f62:	3308      	adds	r3, #8
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f002 fab8 	bl	800b4dc <RCCEx_PLL2_Config>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008f72:	e011      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f78:	3328      	adds	r3, #40	@ 0x28
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f002 fb5f 	bl	800b640 <RCCEx_PLL3_Config>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008f88:	e006      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f90:	e002      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008f92:	bf00      	nop
 8008f94:	e000      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10a      	bne.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fae:	4a4c      	ldr	r2, [pc, #304]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fb4:	e003      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008fca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008fd4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	d053      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008fea:	d035      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008fec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ff0:	d82e      	bhi.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008ff2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ff6:	d031      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008ff8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ffc:	d828      	bhi.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008ffe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009002:	d01a      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009008:	d822      	bhi.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800900e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009012:	d007      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009014:	e01c      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009016:	4b32      	ldr	r3, [pc, #200]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901a:	4a31      	ldr	r2, [pc, #196]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800901c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009022:	e01c      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009028:	3308      	adds	r3, #8
 800902a:	2100      	movs	r1, #0
 800902c:	4618      	mov	r0, r3
 800902e:	f002 fa55 	bl	800b4dc <RCCEx_PLL2_Config>
 8009032:	4603      	mov	r3, r0
 8009034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009038:	e011      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800903a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903e:	3328      	adds	r3, #40	@ 0x28
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f002 fafc 	bl	800b640 <RCCEx_PLL3_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800904e:	e006      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009056:	e002      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009058:	bf00      	nop
 800905a:	e000      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800905c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800905e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10b      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009066:	4b1e      	ldr	r3, [pc, #120]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800906a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800906e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009076:	4a1a      	ldr	r2, [pc, #104]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009078:	430b      	orrs	r3, r1
 800907a:	6593      	str	r3, [r2, #88]	@ 0x58
 800907c:	e003      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009092:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009096:	2300      	movs	r3, #0
 8009098:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800909c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80090a0:	460b      	mov	r3, r1
 80090a2:	4313      	orrs	r3, r2
 80090a4:	d056      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80090a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090b2:	d038      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80090b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090b8:	d831      	bhi.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090be:	d034      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80090c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090c4:	d82b      	bhi.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090ca:	d01d      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80090cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090d0:	d825      	bhi.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d006      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80090d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090da:	d00a      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80090dc:	e01f      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090de:	bf00      	nop
 80090e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e4:	4ba2      	ldr	r3, [pc, #648]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e8:	4aa1      	ldr	r2, [pc, #644]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090f0:	e01c      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f6:	3308      	adds	r3, #8
 80090f8:	2100      	movs	r1, #0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f002 f9ee 	bl	800b4dc <RCCEx_PLL2_Config>
 8009100:	4603      	mov	r3, r0
 8009102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009106:	e011      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910c:	3328      	adds	r3, #40	@ 0x28
 800910e:	2100      	movs	r1, #0
 8009110:	4618      	mov	r0, r3
 8009112:	f002 fa95 	bl	800b640 <RCCEx_PLL3_Config>
 8009116:	4603      	mov	r3, r0
 8009118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800911c:	e006      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009124:	e002      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009126:	bf00      	nop
 8009128:	e000      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800912a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800912c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10b      	bne.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009134:	4b8e      	ldr	r3, [pc, #568]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009138:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800913c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009140:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009144:	4a8a      	ldr	r2, [pc, #552]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009146:	430b      	orrs	r3, r1
 8009148:	6593      	str	r3, [r2, #88]	@ 0x58
 800914a:	e003      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009160:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009164:	2300      	movs	r3, #0
 8009166:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800916a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800916e:	460b      	mov	r3, r1
 8009170:	4313      	orrs	r3, r2
 8009172:	d03a      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800917a:	2b30      	cmp	r3, #48	@ 0x30
 800917c:	d01f      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800917e:	2b30      	cmp	r3, #48	@ 0x30
 8009180:	d819      	bhi.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009182:	2b20      	cmp	r3, #32
 8009184:	d00c      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009186:	2b20      	cmp	r3, #32
 8009188:	d815      	bhi.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800918a:	2b00      	cmp	r3, #0
 800918c:	d019      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800918e:	2b10      	cmp	r3, #16
 8009190:	d111      	bne.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009192:	4b77      	ldr	r3, [pc, #476]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009196:	4a76      	ldr	r2, [pc, #472]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800919c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800919e:	e011      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a4:	3308      	adds	r3, #8
 80091a6:	2102      	movs	r1, #2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f002 f997 	bl	800b4dc <RCCEx_PLL2_Config>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80091b4:	e006      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091bc:	e002      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80091be:	bf00      	nop
 80091c0:	e000      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80091c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80091cc:	4b68      	ldr	r3, [pc, #416]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80091d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091da:	4a65      	ldr	r2, [pc, #404]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091dc:	430b      	orrs	r3, r1
 80091de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091e0:	e003      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80091ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80091f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80091fa:	2300      	movs	r3, #0
 80091fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009200:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009204:	460b      	mov	r3, r1
 8009206:	4313      	orrs	r3, r2
 8009208:	d051      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009214:	d035      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009216:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800921a:	d82e      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800921c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009220:	d031      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009222:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009226:	d828      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800922c:	d01a      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800922e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009232:	d822      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d003      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800923c:	d007      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800923e:	e01c      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009240:	4b4b      	ldr	r3, [pc, #300]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009244:	4a4a      	ldr	r2, [pc, #296]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800924a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800924c:	e01c      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800924e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009252:	3308      	adds	r3, #8
 8009254:	2100      	movs	r1, #0
 8009256:	4618      	mov	r0, r3
 8009258:	f002 f940 	bl	800b4dc <RCCEx_PLL2_Config>
 800925c:	4603      	mov	r3, r0
 800925e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009262:	e011      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009268:	3328      	adds	r3, #40	@ 0x28
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f002 f9e7 	bl	800b640 <RCCEx_PLL3_Config>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009278:	e006      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009280:	e002      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009282:	bf00      	nop
 8009284:	e000      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10a      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009290:	4b37      	ldr	r3, [pc, #220]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009294:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800929e:	4a34      	ldr	r2, [pc, #208]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a0:	430b      	orrs	r3, r1
 80092a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80092a4:	e003      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80092ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80092ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092be:	2300      	movs	r3, #0
 80092c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80092c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80092c8:	460b      	mov	r3, r1
 80092ca:	4313      	orrs	r3, r2
 80092cc:	d056      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80092ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092d8:	d033      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80092da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092de:	d82c      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80092e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092e4:	d02f      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80092e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092ea:	d826      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80092ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092f0:	d02b      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80092f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092f6:	d820      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80092f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092fc:	d012      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80092fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009302:	d81a      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d022      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800930c:	d115      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800930e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009312:	3308      	adds	r3, #8
 8009314:	2101      	movs	r1, #1
 8009316:	4618      	mov	r0, r3
 8009318:	f002 f8e0 	bl	800b4dc <RCCEx_PLL2_Config>
 800931c:	4603      	mov	r3, r0
 800931e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009322:	e015      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009328:	3328      	adds	r3, #40	@ 0x28
 800932a:	2101      	movs	r1, #1
 800932c:	4618      	mov	r0, r3
 800932e:	f002 f987 	bl	800b640 <RCCEx_PLL3_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009338:	e00a      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009340:	e006      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009342:	bf00      	nop
 8009344:	e004      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009346:	bf00      	nop
 8009348:	e002      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800934a:	bf00      	nop
 800934c:	e000      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800934e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10d      	bne.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009358:	4b05      	ldr	r3, [pc, #20]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800935a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800935c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009366:	4a02      	ldr	r2, [pc, #8]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009368:	430b      	orrs	r3, r1
 800936a:	6513      	str	r3, [r2, #80]	@ 0x50
 800936c:	e006      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800936e:	bf00      	nop
 8009370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800937c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800938c:	2300      	movs	r3, #0
 800938e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009392:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009396:	460b      	mov	r3, r1
 8009398:	4313      	orrs	r3, r2
 800939a:	d055      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800939c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093a8:	d033      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80093aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093ae:	d82c      	bhi.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093b4:	d02f      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80093b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ba:	d826      	bhi.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093c0:	d02b      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80093c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093c6:	d820      	bhi.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093cc:	d012      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80093ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093d2:	d81a      	bhi.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d022      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80093d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093dc:	d115      	bne.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e2:	3308      	adds	r3, #8
 80093e4:	2101      	movs	r1, #1
 80093e6:	4618      	mov	r0, r3
 80093e8:	f002 f878 	bl	800b4dc <RCCEx_PLL2_Config>
 80093ec:	4603      	mov	r3, r0
 80093ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80093f2:	e015      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f8:	3328      	adds	r3, #40	@ 0x28
 80093fa:	2101      	movs	r1, #1
 80093fc:	4618      	mov	r0, r3
 80093fe:	f002 f91f 	bl	800b640 <RCCEx_PLL3_Config>
 8009402:	4603      	mov	r3, r0
 8009404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009408:	e00a      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009410:	e006      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009412:	bf00      	nop
 8009414:	e004      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009416:	bf00      	nop
 8009418:	e002      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800941a:	bf00      	nop
 800941c:	e000      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800941e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10b      	bne.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009428:	4ba3      	ldr	r3, [pc, #652]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800942a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800942c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009438:	4a9f      	ldr	r2, [pc, #636]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800943a:	430b      	orrs	r3, r1
 800943c:	6593      	str	r3, [r2, #88]	@ 0x58
 800943e:	e003      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009454:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009458:	2300      	movs	r3, #0
 800945a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800945e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009462:	460b      	mov	r3, r1
 8009464:	4313      	orrs	r3, r2
 8009466:	d037      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800946e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009472:	d00e      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009478:	d816      	bhi.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d018      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800947e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009482:	d111      	bne.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009484:	4b8c      	ldr	r3, [pc, #560]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	4a8b      	ldr	r2, [pc, #556]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800948a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800948e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009490:	e00f      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009496:	3308      	adds	r3, #8
 8009498:	2101      	movs	r1, #1
 800949a:	4618      	mov	r0, r3
 800949c:	f002 f81e 	bl	800b4dc <RCCEx_PLL2_Config>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80094a6:	e004      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094ae:	e000      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80094b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10a      	bne.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80094ba:	4b7f      	ldr	r3, [pc, #508]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80094c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094c8:	4a7b      	ldr	r2, [pc, #492]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ca:	430b      	orrs	r3, r1
 80094cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80094ce:	e003      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80094d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80094e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094e8:	2300      	movs	r3, #0
 80094ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80094ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80094f2:	460b      	mov	r3, r1
 80094f4:	4313      	orrs	r3, r2
 80094f6:	d039      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80094f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d81c      	bhi.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009502:	a201      	add	r2, pc, #4	@ (adr r2, 8009508 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009508:	08009545 	.word	0x08009545
 800950c:	08009519 	.word	0x08009519
 8009510:	08009527 	.word	0x08009527
 8009514:	08009545 	.word	0x08009545
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009518:	4b67      	ldr	r3, [pc, #412]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800951a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951c:	4a66      	ldr	r2, [pc, #408]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800951e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009524:	e00f      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800952a:	3308      	adds	r3, #8
 800952c:	2102      	movs	r1, #2
 800952e:	4618      	mov	r0, r3
 8009530:	f001 ffd4 	bl	800b4dc <RCCEx_PLL2_Config>
 8009534:	4603      	mov	r3, r0
 8009536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800953a:	e004      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009542:	e000      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800954e:	4b5a      	ldr	r3, [pc, #360]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009552:	f023 0103 	bic.w	r1, r3, #3
 8009556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800955c:	4a56      	ldr	r2, [pc, #344]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800955e:	430b      	orrs	r3, r1
 8009560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009562:	e003      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009578:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800957c:	2300      	movs	r3, #0
 800957e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009582:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009586:	460b      	mov	r3, r1
 8009588:	4313      	orrs	r3, r2
 800958a:	f000 809f 	beq.w	80096cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800958e:	4b4b      	ldr	r3, [pc, #300]	@ (80096bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a4a      	ldr	r2, [pc, #296]	@ (80096bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009598:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800959a:	f7f9 ff65 	bl	8003468 <HAL_GetTick>
 800959e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095a2:	e00b      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095a4:	f7f9 ff60 	bl	8003468 <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	2b64      	cmp	r3, #100	@ 0x64
 80095b2:	d903      	bls.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ba:	e005      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095bc:	4b3f      	ldr	r3, [pc, #252]	@ (80096bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0ed      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80095c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d179      	bne.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80095d0:	4b39      	ldr	r3, [pc, #228]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80095d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095dc:	4053      	eors	r3, r2
 80095de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d015      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095e6:	4b34      	ldr	r3, [pc, #208]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095f2:	4b31      	ldr	r3, [pc, #196]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095f6:	4a30      	ldr	r2, [pc, #192]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095fe:	4b2e      	ldr	r3, [pc, #184]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009602:	4a2d      	ldr	r2, [pc, #180]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009608:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800960a:	4a2b      	ldr	r2, [pc, #172]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800960c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009610:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800961a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800961e:	d118      	bne.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009620:	f7f9 ff22 	bl	8003468 <HAL_GetTick>
 8009624:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009628:	e00d      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800962a:	f7f9 ff1d 	bl	8003468 <HAL_GetTick>
 800962e:	4602      	mov	r2, r0
 8009630:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009634:	1ad2      	subs	r2, r2, r3
 8009636:	f241 3388 	movw	r3, #5000	@ 0x1388
 800963a:	429a      	cmp	r2, r3
 800963c:	d903      	bls.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009644:	e005      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009646:	4b1c      	ldr	r3, [pc, #112]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0eb      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009656:	2b00      	cmp	r3, #0
 8009658:	d129      	bne.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800965a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800966a:	d10e      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800966c:	4b12      	ldr	r3, [pc, #72]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800967c:	091a      	lsrs	r2, r3, #4
 800967e:	4b10      	ldr	r3, [pc, #64]	@ (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009680:	4013      	ands	r3, r2
 8009682:	4a0d      	ldr	r2, [pc, #52]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009684:	430b      	orrs	r3, r1
 8009686:	6113      	str	r3, [r2, #16]
 8009688:	e005      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800968a:	4b0b      	ldr	r3, [pc, #44]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	4a0a      	ldr	r2, [pc, #40]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009690:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009694:	6113      	str	r3, [r2, #16]
 8009696:	4b08      	ldr	r3, [pc, #32]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009698:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800969a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096a6:	4a04      	ldr	r2, [pc, #16]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a8:	430b      	orrs	r3, r1
 80096aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80096ac:	e00e      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80096b6:	e009      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80096b8:	58024400 	.word	0x58024400
 80096bc:	58024800 	.word	0x58024800
 80096c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80096cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f002 0301 	and.w	r3, r2, #1
 80096d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096dc:	2300      	movs	r3, #0
 80096de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4313      	orrs	r3, r2
 80096ea:	f000 8089 	beq.w	8009800 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80096ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096f4:	2b28      	cmp	r3, #40	@ 0x28
 80096f6:	d86b      	bhi.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80096f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009700 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	080097d9 	.word	0x080097d9
 8009704:	080097d1 	.word	0x080097d1
 8009708:	080097d1 	.word	0x080097d1
 800970c:	080097d1 	.word	0x080097d1
 8009710:	080097d1 	.word	0x080097d1
 8009714:	080097d1 	.word	0x080097d1
 8009718:	080097d1 	.word	0x080097d1
 800971c:	080097d1 	.word	0x080097d1
 8009720:	080097a5 	.word	0x080097a5
 8009724:	080097d1 	.word	0x080097d1
 8009728:	080097d1 	.word	0x080097d1
 800972c:	080097d1 	.word	0x080097d1
 8009730:	080097d1 	.word	0x080097d1
 8009734:	080097d1 	.word	0x080097d1
 8009738:	080097d1 	.word	0x080097d1
 800973c:	080097d1 	.word	0x080097d1
 8009740:	080097bb 	.word	0x080097bb
 8009744:	080097d1 	.word	0x080097d1
 8009748:	080097d1 	.word	0x080097d1
 800974c:	080097d1 	.word	0x080097d1
 8009750:	080097d1 	.word	0x080097d1
 8009754:	080097d1 	.word	0x080097d1
 8009758:	080097d1 	.word	0x080097d1
 800975c:	080097d1 	.word	0x080097d1
 8009760:	080097d9 	.word	0x080097d9
 8009764:	080097d1 	.word	0x080097d1
 8009768:	080097d1 	.word	0x080097d1
 800976c:	080097d1 	.word	0x080097d1
 8009770:	080097d1 	.word	0x080097d1
 8009774:	080097d1 	.word	0x080097d1
 8009778:	080097d1 	.word	0x080097d1
 800977c:	080097d1 	.word	0x080097d1
 8009780:	080097d9 	.word	0x080097d9
 8009784:	080097d1 	.word	0x080097d1
 8009788:	080097d1 	.word	0x080097d1
 800978c:	080097d1 	.word	0x080097d1
 8009790:	080097d1 	.word	0x080097d1
 8009794:	080097d1 	.word	0x080097d1
 8009798:	080097d1 	.word	0x080097d1
 800979c:	080097d1 	.word	0x080097d1
 80097a0:	080097d9 	.word	0x080097d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a8:	3308      	adds	r3, #8
 80097aa:	2101      	movs	r1, #1
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 fe95 	bl	800b4dc <RCCEx_PLL2_Config>
 80097b2:	4603      	mov	r3, r0
 80097b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80097b8:	e00f      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097be:	3328      	adds	r3, #40	@ 0x28
 80097c0:	2101      	movs	r1, #1
 80097c2:	4618      	mov	r0, r3
 80097c4:	f001 ff3c 	bl	800b640 <RCCEx_PLL3_Config>
 80097c8:	4603      	mov	r3, r0
 80097ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80097ce:	e004      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097d6:	e000      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80097d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80097e2:	4bbf      	ldr	r3, [pc, #764]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097f0:	4abb      	ldr	r2, [pc, #748]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097f2:	430b      	orrs	r3, r1
 80097f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80097f6:	e003      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f002 0302 	and.w	r3, r2, #2
 800980c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009810:	2300      	movs	r3, #0
 8009812:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009816:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800981a:	460b      	mov	r3, r1
 800981c:	4313      	orrs	r3, r2
 800981e:	d041      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009826:	2b05      	cmp	r3, #5
 8009828:	d824      	bhi.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800982a:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	0800987d 	.word	0x0800987d
 8009834:	08009849 	.word	0x08009849
 8009838:	0800985f 	.word	0x0800985f
 800983c:	0800987d 	.word	0x0800987d
 8009840:	0800987d 	.word	0x0800987d
 8009844:	0800987d 	.word	0x0800987d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984c:	3308      	adds	r3, #8
 800984e:	2101      	movs	r1, #1
 8009850:	4618      	mov	r0, r3
 8009852:	f001 fe43 	bl	800b4dc <RCCEx_PLL2_Config>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800985c:	e00f      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800985e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009862:	3328      	adds	r3, #40	@ 0x28
 8009864:	2101      	movs	r1, #1
 8009866:	4618      	mov	r0, r3
 8009868:	f001 feea 	bl	800b640 <RCCEx_PLL3_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009872:	e004      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800987a:	e000      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800987c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800987e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10a      	bne.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009886:	4b96      	ldr	r3, [pc, #600]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988a:	f023 0107 	bic.w	r1, r3, #7
 800988e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009892:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009894:	4a92      	ldr	r2, [pc, #584]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009896:	430b      	orrs	r3, r1
 8009898:	6553      	str	r3, [r2, #84]	@ 0x54
 800989a:	e003      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f002 0304 	and.w	r3, r2, #4
 80098b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098b4:	2300      	movs	r3, #0
 80098b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80098be:	460b      	mov	r3, r1
 80098c0:	4313      	orrs	r3, r2
 80098c2:	d044      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80098c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098cc:	2b05      	cmp	r3, #5
 80098ce:	d825      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80098d0:	a201      	add	r2, pc, #4	@ (adr r2, 80098d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	08009925 	.word	0x08009925
 80098dc:	080098f1 	.word	0x080098f1
 80098e0:	08009907 	.word	0x08009907
 80098e4:	08009925 	.word	0x08009925
 80098e8:	08009925 	.word	0x08009925
 80098ec:	08009925 	.word	0x08009925
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f4:	3308      	adds	r3, #8
 80098f6:	2101      	movs	r1, #1
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 fdef 	bl	800b4dc <RCCEx_PLL2_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009904:	e00f      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990a:	3328      	adds	r3, #40	@ 0x28
 800990c:	2101      	movs	r1, #1
 800990e:	4618      	mov	r0, r3
 8009910:	f001 fe96 	bl	800b640 <RCCEx_PLL3_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800991a:	e004      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009922:	e000      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10b      	bne.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800992e:	4b6c      	ldr	r3, [pc, #432]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009932:	f023 0107 	bic.w	r1, r3, #7
 8009936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800993e:	4a68      	ldr	r2, [pc, #416]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009940:	430b      	orrs	r3, r1
 8009942:	6593      	str	r3, [r2, #88]	@ 0x58
 8009944:	e003      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800994a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800994e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f002 0320 	and.w	r3, r2, #32
 800995a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800995e:	2300      	movs	r3, #0
 8009960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009968:	460b      	mov	r3, r1
 800996a:	4313      	orrs	r3, r2
 800996c:	d055      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800996e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800997a:	d033      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800997c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009980:	d82c      	bhi.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009986:	d02f      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800998c:	d826      	bhi.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800998e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009992:	d02b      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009994:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009998:	d820      	bhi.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800999a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800999e:	d012      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80099a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a4:	d81a      	bhi.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d022      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80099aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099ae:	d115      	bne.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b4:	3308      	adds	r3, #8
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f001 fd8f 	bl	800b4dc <RCCEx_PLL2_Config>
 80099be:	4603      	mov	r3, r0
 80099c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80099c4:	e015      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ca:	3328      	adds	r3, #40	@ 0x28
 80099cc:	2102      	movs	r1, #2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 fe36 	bl	800b640 <RCCEx_PLL3_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80099da:	e00a      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099e2:	e006      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80099e4:	bf00      	nop
 80099e6:	e004      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80099e8:	bf00      	nop
 80099ea:	e002      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80099ec:	bf00      	nop
 80099ee:	e000      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80099f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80099fa:	4b39      	ldr	r3, [pc, #228]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0a:	4a35      	ldr	r2, [pc, #212]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a0c:	430b      	orrs	r3, r1
 8009a0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a10:	e003      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4313      	orrs	r3, r2
 8009a38:	d058      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009a46:	d033      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009a48:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009a4c:	d82c      	bhi.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a52:	d02f      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a58:	d826      	bhi.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a5e:	d02b      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009a60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a64:	d820      	bhi.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a6a:	d012      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a70:	d81a      	bhi.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d022      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a7a:	d115      	bne.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a80:	3308      	adds	r3, #8
 8009a82:	2100      	movs	r1, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f001 fd29 	bl	800b4dc <RCCEx_PLL2_Config>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009a90:	e015      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a96:	3328      	adds	r3, #40	@ 0x28
 8009a98:	2102      	movs	r1, #2
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f001 fdd0 	bl	800b640 <RCCEx_PLL3_Config>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009aa6:	e00a      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aae:	e006      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ab0:	bf00      	nop
 8009ab2:	e004      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ab4:	bf00      	nop
 8009ab6:	e002      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ab8:	bf00      	nop
 8009aba:	e000      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10e      	bne.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ac6:	4b06      	ldr	r3, [pc, #24]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ad6:	4a02      	ldr	r2, [pc, #8]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ad8:	430b      	orrs	r3, r1
 8009ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8009adc:	e006      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009ade:	bf00      	nop
 8009ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009afc:	2300      	movs	r3, #0
 8009afe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009b06:	460b      	mov	r3, r1
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	d055      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b18:	d033      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009b1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b1e:	d82c      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b24:	d02f      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b2a:	d826      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b30:	d02b      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009b32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b36:	d820      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b3c:	d012      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b42:	d81a      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d022      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b4c:	d115      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b52:	3308      	adds	r3, #8
 8009b54:	2100      	movs	r1, #0
 8009b56:	4618      	mov	r0, r3
 8009b58:	f001 fcc0 	bl	800b4dc <RCCEx_PLL2_Config>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009b62:	e015      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b68:	3328      	adds	r3, #40	@ 0x28
 8009b6a:	2102      	movs	r1, #2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f001 fd67 	bl	800b640 <RCCEx_PLL3_Config>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009b78:	e00a      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b80:	e006      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b82:	bf00      	nop
 8009b84:	e004      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b86:	bf00      	nop
 8009b88:	e002      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b8a:	bf00      	nop
 8009b8c:	e000      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10b      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b98:	4ba1      	ldr	r3, [pc, #644]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ba8:	4a9d      	ldr	r2, [pc, #628]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009baa:	430b      	orrs	r3, r1
 8009bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bae:	e003      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f002 0308 	and.w	r3, r2, #8
 8009bc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009bce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	d01e      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009be4:	d10c      	bne.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bea:	3328      	adds	r3, #40	@ 0x28
 8009bec:	2102      	movs	r1, #2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f001 fd26 	bl	800b640 <RCCEx_PLL3_Config>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d002      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009c00:	4b87      	ldr	r3, [pc, #540]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c10:	4a83      	ldr	r2, [pc, #524]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c12:	430b      	orrs	r3, r1
 8009c14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f002 0310 	and.w	r3, r2, #16
 8009c22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c26:	2300      	movs	r3, #0
 8009c28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009c30:	460b      	mov	r3, r1
 8009c32:	4313      	orrs	r3, r2
 8009c34:	d01e      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c42:	d10c      	bne.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c48:	3328      	adds	r3, #40	@ 0x28
 8009c4a:	2102      	movs	r1, #2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f001 fcf7 	bl	800b640 <RCCEx_PLL3_Config>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c5e:	4b70      	ldr	r3, [pc, #448]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c70:	430b      	orrs	r3, r1
 8009c72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009c80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c84:	2300      	movs	r3, #0
 8009c86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4313      	orrs	r3, r2
 8009c92:	d03e      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ca0:	d022      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ca6:	d81b      	bhi.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cb0:	d00b      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009cb2:	e015      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb8:	3308      	adds	r3, #8
 8009cba:	2100      	movs	r1, #0
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f001 fc0d 	bl	800b4dc <RCCEx_PLL2_Config>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009cc8:	e00f      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cce:	3328      	adds	r3, #40	@ 0x28
 8009cd0:	2102      	movs	r1, #2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f001 fcb4 	bl	800b640 <RCCEx_PLL3_Config>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009cde:	e004      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ce6:	e000      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cf6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d02:	4a47      	ldr	r2, [pc, #284]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d04:	430b      	orrs	r3, r1
 8009d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d08:	e003      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d20:	2300      	movs	r3, #0
 8009d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	d03b      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d3a:	d01f      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009d3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d40:	d818      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d46:	d003      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009d48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d4c:	d007      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009d4e:	e011      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d50:	4b33      	ldr	r3, [pc, #204]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d54:	4a32      	ldr	r2, [pc, #200]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009d5c:	e00f      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d62:	3328      	adds	r3, #40	@ 0x28
 8009d64:	2101      	movs	r1, #1
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 fc6a 	bl	800b640 <RCCEx_PLL3_Config>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009d72:	e004      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d7a:	e000      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10b      	bne.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d86:	4b26      	ldr	r3, [pc, #152]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d96:	4a22      	ldr	r2, [pc, #136]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d98:	430b      	orrs	r3, r1
 8009d9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d9c:	e003      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009db4:	2300      	movs	r3, #0
 8009db6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009db8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	d034      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dd0:	d007      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009dd2:	e011      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd4:	4b12      	ldr	r3, [pc, #72]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd8:	4a11      	ldr	r2, [pc, #68]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009de0:	e00e      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de6:	3308      	adds	r3, #8
 8009de8:	2102      	movs	r1, #2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fb76 	bl	800b4dc <RCCEx_PLL2_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009df6:	e003      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10d      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e08:	4b05      	ldr	r3, [pc, #20]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e16:	4a02      	ldr	r2, [pc, #8]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e1c:	e006      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009e1e:	bf00      	nop
 8009e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009e42:	460b      	mov	r3, r1
 8009e44:	4313      	orrs	r3, r2
 8009e46:	d00c      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4c:	3328      	adds	r3, #40	@ 0x28
 8009e4e:	2102      	movs	r1, #2
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 fbf5 	bl	800b640 <RCCEx_PLL3_Config>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009e6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e70:	2300      	movs	r3, #0
 8009e72:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	d038      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e8a:	d018      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e90:	d811      	bhi.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e96:	d014      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e9c:	d80b      	bhi.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d011      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ea6:	d106      	bne.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ea8:	4bc3      	ldr	r3, [pc, #780]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eac:	4ac2      	ldr	r2, [pc, #776]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009eb4:	e008      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ebc:	e004      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009ebe:	bf00      	nop
 8009ec0:	e002      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009ec2:	bf00      	nop
 8009ec4:	e000      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10b      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ed0:	4bb9      	ldr	r3, [pc, #740]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ed4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee0:	4ab5      	ldr	r2, [pc, #724]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ee2:	430b      	orrs	r3, r1
 8009ee4:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ee6:	e003      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009efc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009efe:	2300      	movs	r3, #0
 8009f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009f06:	460b      	mov	r3, r1
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	d009      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f0c:	4baa      	ldr	r3, [pc, #680]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f1a:	4aa7      	ldr	r2, [pc, #668]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009f2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f2e:	2300      	movs	r3, #0
 8009f30:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009f36:	460b      	mov	r3, r1
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	d00a      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f3c:	4b9e      	ldr	r3, [pc, #632]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009f4c:	4a9a      	ldr	r2, [pc, #616]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f4e:	430b      	orrs	r3, r1
 8009f50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f60:	2300      	movs	r3, #0
 8009f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	d009      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f6e:	4b92      	ldr	r3, [pc, #584]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f72:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f7c:	4a8e      	ldr	r2, [pc, #568]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f7e:	430b      	orrs	r3, r1
 8009f80:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009f8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f90:	2300      	movs	r3, #0
 8009f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	d00e      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f9e:	4b86      	ldr	r3, [pc, #536]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	4a85      	ldr	r2, [pc, #532]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009fa8:	6113      	str	r3, [r2, #16]
 8009faa:	4b83      	ldr	r3, [pc, #524]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fac:	6919      	ldr	r1, [r3, #16]
 8009fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009fb6:	4a80      	ldr	r2, [pc, #512]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fb8:	430b      	orrs	r3, r1
 8009fba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009fca:	2300      	movs	r3, #0
 8009fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	d009      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009fd8:	4b77      	ldr	r3, [pc, #476]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fdc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe6:	4a74      	ldr	r2, [pc, #464]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fe8:	430b      	orrs	r3, r1
 8009fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ffe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a002:	460b      	mov	r3, r1
 800a004:	4313      	orrs	r3, r2
 800a006:	d00a      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a008:	4b6b      	ldr	r3, [pc, #428]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a00a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a00c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a018:	4a67      	ldr	r2, [pc, #412]	@ (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a01a:	430b      	orrs	r3, r1
 800a01c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	2100      	movs	r1, #0
 800a028:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a030:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a034:	460b      	mov	r3, r1
 800a036:	4313      	orrs	r3, r2
 800a038:	d011      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a03e:	3308      	adds	r3, #8
 800a040:	2100      	movs	r1, #0
 800a042:	4618      	mov	r0, r3
 800a044:	f001 fa4a 	bl	800b4dc <RCCEx_PLL2_Config>
 800a048:	4603      	mov	r3, r0
 800a04a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a04e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a05a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	2100      	movs	r1, #0
 800a068:	6239      	str	r1, [r7, #32]
 800a06a:	f003 0302 	and.w	r3, r3, #2
 800a06e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a070:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a074:	460b      	mov	r3, r1
 800a076:	4313      	orrs	r3, r2
 800a078:	d011      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a07e:	3308      	adds	r3, #8
 800a080:	2101      	movs	r1, #1
 800a082:	4618      	mov	r0, r3
 800a084:	f001 fa2a 	bl	800b4dc <RCCEx_PLL2_Config>
 800a088:	4603      	mov	r3, r0
 800a08a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a08e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a09a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	61b9      	str	r1, [r7, #24]
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	61fb      	str	r3, [r7, #28]
 800a0b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	d011      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0be:	3308      	adds	r3, #8
 800a0c0:	2102      	movs	r1, #2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f001 fa0a 	bl	800b4dc <RCCEx_PLL2_Config>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	6139      	str	r1, [r7, #16]
 800a0ea:	f003 0308 	and.w	r3, r3, #8
 800a0ee:	617b      	str	r3, [r7, #20]
 800a0f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	d011      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fe:	3328      	adds	r3, #40	@ 0x28
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f001 fa9c 	bl	800b640 <RCCEx_PLL3_Config>
 800a108:	4603      	mov	r3, r0
 800a10a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a10e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a11a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	2100      	movs	r1, #0
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	f003 0310 	and.w	r3, r3, #16
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a134:	460b      	mov	r3, r1
 800a136:	4313      	orrs	r3, r2
 800a138:	d011      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13e:	3328      	adds	r3, #40	@ 0x28
 800a140:	2101      	movs	r1, #1
 800a142:	4618      	mov	r0, r3
 800a144:	f001 fa7c 	bl	800b640 <RCCEx_PLL3_Config>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a14e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a15a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	2100      	movs	r1, #0
 800a168:	6039      	str	r1, [r7, #0]
 800a16a:	f003 0320 	and.w	r3, r3, #32
 800a16e:	607b      	str	r3, [r7, #4]
 800a170:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a174:	460b      	mov	r3, r1
 800a176:	4313      	orrs	r3, r2
 800a178:	d011      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17e:	3328      	adds	r3, #40	@ 0x28
 800a180:	2102      	movs	r1, #2
 800a182:	4618      	mov	r0, r3
 800a184:	f001 fa5c 	bl	800b640 <RCCEx_PLL3_Config>
 800a188:	4603      	mov	r3, r0
 800a18a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a18e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a19a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a19e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e000      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1b8:	58024400 	.word	0x58024400

0800a1bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b090      	sub	sp, #64	@ 0x40
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a1ce:	430b      	orrs	r3, r1
 800a1d0:	f040 8094 	bne.w	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a1d4:	4b9e      	ldr	r3, [pc, #632]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	f200 8087 	bhi.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a1e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ec:	0800a201 	.word	0x0800a201
 800a1f0:	0800a229 	.word	0x0800a229
 800a1f4:	0800a251 	.word	0x0800a251
 800a1f8:	0800a2ed 	.word	0x0800a2ed
 800a1fc:	0800a279 	.word	0x0800a279
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a200:	4b93      	ldr	r3, [pc, #588]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a208:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a20c:	d108      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a20e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a212:	4618      	mov	r0, r3
 800a214:	f001 f810 	bl	800b238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a21c:	f000 bd45 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a224:	f000 bd41 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a228:	4b89      	ldr	r3, [pc, #548]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a234:	d108      	bne.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a236:	f107 0318 	add.w	r3, r7, #24
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 fd54 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a244:	f000 bd31 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a24c:	f000 bd2d 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a250:	4b7f      	ldr	r3, [pc, #508]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a25c:	d108      	bne.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a25e:	f107 030c 	add.w	r3, r7, #12
 800a262:	4618      	mov	r0, r3
 800a264:	f000 fe94 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a26c:	f000 bd1d 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a274:	f000 bd19 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a278:	4b75      	ldr	r3, [pc, #468]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a27a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a27c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a280:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a282:	4b73      	ldr	r3, [pc, #460]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0304 	and.w	r3, r3, #4
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d10c      	bne.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a290:	2b00      	cmp	r3, #0
 800a292:	d109      	bne.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a294:	4b6e      	ldr	r3, [pc, #440]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	08db      	lsrs	r3, r3, #3
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	4a6d      	ldr	r2, [pc, #436]	@ (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2a6:	e01f      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2a8:	4b69      	ldr	r3, [pc, #420]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2b4:	d106      	bne.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2bc:	d102      	bne.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2be:	4b66      	ldr	r3, [pc, #408]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2c2:	e011      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2c4:	4b62      	ldr	r3, [pc, #392]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2d0:	d106      	bne.n	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2d8:	d102      	bne.n	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2da:	4b60      	ldr	r3, [pc, #384]	@ (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2de:	e003      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a2e4:	f000 bce1 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2e8:	f000 bcdf 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f0:	f000 bcdb 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f8:	f000 bcd7 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a2fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a300:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a304:	430b      	orrs	r3, r1
 800a306:	f040 80ad 	bne.w	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a30a:	4b51      	ldr	r3, [pc, #324]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a30c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a30e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a312:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a31a:	d056      	beq.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a322:	f200 8090 	bhi.w	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	2bc0      	cmp	r3, #192	@ 0xc0
 800a32a:	f000 8088 	beq.w	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a330:	2bc0      	cmp	r3, #192	@ 0xc0
 800a332:	f200 8088 	bhi.w	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a338:	2b80      	cmp	r3, #128	@ 0x80
 800a33a:	d032      	beq.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	2b80      	cmp	r3, #128	@ 0x80
 800a340:	f200 8081 	bhi.w	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a346:	2b00      	cmp	r3, #0
 800a348:	d003      	beq.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	2b40      	cmp	r3, #64	@ 0x40
 800a34e:	d014      	beq.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a350:	e079      	b.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a352:	4b3f      	ldr	r3, [pc, #252]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a35a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a35e:	d108      	bne.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a364:	4618      	mov	r0, r3
 800a366:	f000 ff67 	bl	800b238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a36e:	f000 bc9c 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a376:	f000 bc98 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a37a:	4b35      	ldr	r3, [pc, #212]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a386:	d108      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a388:	f107 0318 	add.w	r3, r7, #24
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 fcab 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a396:	f000 bc88 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a39e:	f000 bc84 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ae:	d108      	bne.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3b0:	f107 030c 	add.w	r3, r7, #12
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 fdeb 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3be:	f000 bc74 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c6:	f000 bc70 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3ca:	4b21      	ldr	r3, [pc, #132]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3d4:	4b1e      	ldr	r3, [pc, #120]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d10c      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d109      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	08db      	lsrs	r3, r3, #3
 800a3ec:	f003 0303 	and.w	r3, r3, #3
 800a3f0:	4a18      	ldr	r2, [pc, #96]	@ (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3f8:	e01f      	b.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3fa:	4b15      	ldr	r3, [pc, #84]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a406:	d106      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a40e:	d102      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a410:	4b11      	ldr	r3, [pc, #68]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a414:	e011      	b.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a416:	4b0e      	ldr	r3, [pc, #56]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a41e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a422:	d106      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a42a:	d102      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a42c:	4b0b      	ldr	r3, [pc, #44]	@ (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a430:	e003      	b.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a436:	f000 bc38 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a43a:	f000 bc36 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a43e:	4b08      	ldr	r3, [pc, #32]	@ (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a442:	f000 bc32 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44a:	f000 bc2e 	b.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a44e:	bf00      	nop
 800a450:	58024400 	.word	0x58024400
 800a454:	03d09000 	.word	0x03d09000
 800a458:	003d0900 	.word	0x003d0900
 800a45c:	007a1200 	.word	0x007a1200
 800a460:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a464:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a468:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a46c:	430b      	orrs	r3, r1
 800a46e:	f040 809c 	bne.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a472:	4b9e      	ldr	r3, [pc, #632]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a476:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a47a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a482:	d054      	beq.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a48a:	f200 808b 	bhi.w	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a490:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a494:	f000 8083 	beq.w	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a49e:	f200 8081 	bhi.w	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4a8:	d02f      	beq.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4b0:	d878      	bhi.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d004      	beq.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4be:	d012      	beq.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a4c0:	e070      	b.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4c2:	4b8a      	ldr	r3, [pc, #552]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4ce:	d107      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 feaf 	bl	800b238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4de:	e3e4      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e4:	e3e1      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4e6:	4b81      	ldr	r3, [pc, #516]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4f2:	d107      	bne.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4f4:	f107 0318 	add.w	r3, r7, #24
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 fbf5 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a502:	e3d2      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a504:	2300      	movs	r3, #0
 800a506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a508:	e3cf      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a50a:	4b78      	ldr	r3, [pc, #480]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a516:	d107      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a518:	f107 030c 	add.w	r3, r7, #12
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 fd37 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a526:	e3c0      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a52c:	e3bd      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a52e:	4b6f      	ldr	r3, [pc, #444]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a532:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a536:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a538:	4b6c      	ldr	r3, [pc, #432]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b04      	cmp	r3, #4
 800a542:	d10c      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a546:	2b00      	cmp	r3, #0
 800a548:	d109      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a54a:	4b68      	ldr	r3, [pc, #416]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	08db      	lsrs	r3, r3, #3
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	4a66      	ldr	r2, [pc, #408]	@ (800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a556:	fa22 f303 	lsr.w	r3, r2, r3
 800a55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a55c:	e01e      	b.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a55e:	4b63      	ldr	r3, [pc, #396]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a56a:	d106      	bne.n	800a57a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a56e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a572:	d102      	bne.n	800a57a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a574:	4b5f      	ldr	r3, [pc, #380]	@ (800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a578:	e010      	b.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a57a:	4b5c      	ldr	r3, [pc, #368]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a586:	d106      	bne.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a58a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a58e:	d102      	bne.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a590:	4b59      	ldr	r3, [pc, #356]	@ (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a594:	e002      	b.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a59a:	e386      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a59c:	e385      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a59e:	4b57      	ldr	r3, [pc, #348]	@ (800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a2:	e382      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a8:	e37f      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a5aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a5b2:	430b      	orrs	r3, r1
 800a5b4:	f040 80a7 	bne.w	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a5b8:	4b4c      	ldr	r3, [pc, #304]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5bc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a5c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a5c8:	d055      	beq.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a5d0:	f200 8096 	bhi.w	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a5da:	f000 8084 	beq.w	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a5e4:	f200 808c 	bhi.w	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5ee:	d030      	beq.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5f6:	f200 8083 	bhi.w	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d004      	beq.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a606:	d012      	beq.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a608:	e07a      	b.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a60a:	4b38      	ldr	r3, [pc, #224]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a612:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a616:	d107      	bne.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fe0b 	bl	800b238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a626:	e340      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62c:	e33d      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a62e:	4b2f      	ldr	r3, [pc, #188]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a63a:	d107      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a63c:	f107 0318 	add.w	r3, r7, #24
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fb51 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a64a:	e32e      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a650:	e32b      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a652:	4b26      	ldr	r3, [pc, #152]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a65a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a65e:	d107      	bne.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a660:	f107 030c 	add.w	r3, r7, #12
 800a664:	4618      	mov	r0, r3
 800a666:	f000 fc93 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66e:	e31c      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a674:	e319      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a676:	4b1d      	ldr	r3, [pc, #116]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a67a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a67e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a680:	4b1a      	ldr	r3, [pc, #104]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0304 	and.w	r3, r3, #4
 800a688:	2b04      	cmp	r3, #4
 800a68a:	d10c      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d109      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a692:	4b16      	ldr	r3, [pc, #88]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	08db      	lsrs	r3, r3, #3
 800a698:	f003 0303 	and.w	r3, r3, #3
 800a69c:	4a14      	ldr	r2, [pc, #80]	@ (800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a69e:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6a4:	e01e      	b.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6a6:	4b11      	ldr	r3, [pc, #68]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6b2:	d106      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6ba:	d102      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c0:	e010      	b.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ce:	d106      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6d6:	d102      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6d8:	4b07      	ldr	r3, [pc, #28]	@ (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6dc:	e002      	b.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6e2:	e2e2      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6e4:	e2e1      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6e6:	4b05      	ldr	r3, [pc, #20]	@ (800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ea:	e2de      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6ec:	58024400 	.word	0x58024400
 800a6f0:	03d09000 	.word	0x03d09000
 800a6f4:	003d0900 	.word	0x003d0900
 800a6f8:	007a1200 	.word	0x007a1200
 800a6fc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a704:	e2d1      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a70a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a70e:	430b      	orrs	r3, r1
 800a710:	f040 809c 	bne.w	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a714:	4b93      	ldr	r3, [pc, #588]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a718:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a71c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a724:	d054      	beq.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a728:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a72c:	f200 808b 	bhi.w	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a732:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a736:	f000 8083 	beq.w	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a740:	f200 8081 	bhi.w	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a74a:	d02f      	beq.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a752:	d878      	bhi.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a756:	2b00      	cmp	r3, #0
 800a758:	d004      	beq.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a760:	d012      	beq.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a762:	e070      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a764:	4b7f      	ldr	r3, [pc, #508]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a76c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a770:	d107      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a776:	4618      	mov	r0, r3
 800a778:	f000 fd5e 	bl	800b238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a780:	e293      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a786:	e290      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a788:	4b76      	ldr	r3, [pc, #472]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a794:	d107      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a796:	f107 0318 	add.w	r3, r7, #24
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 faa4 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a4:	e281      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7aa:	e27e      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7ac:	4b6d      	ldr	r3, [pc, #436]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b8:	d107      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ba:	f107 030c 	add.w	r3, r7, #12
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fbe6 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7c8:	e26f      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ce:	e26c      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7d0:	4b64      	ldr	r3, [pc, #400]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7da:	4b62      	ldr	r3, [pc, #392]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	d10c      	bne.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d109      	bne.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7ec:	4b5d      	ldr	r3, [pc, #372]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	08db      	lsrs	r3, r3, #3
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	4a5c      	ldr	r2, [pc, #368]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a7f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7fe:	e01e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a800:	4b58      	ldr	r3, [pc, #352]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a80c:	d106      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a810:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a814:	d102      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a816:	4b55      	ldr	r3, [pc, #340]	@ (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a81a:	e010      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a81c:	4b51      	ldr	r3, [pc, #324]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a828:	d106      	bne.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a82c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a830:	d102      	bne.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a832:	4b4f      	ldr	r3, [pc, #316]	@ (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a836:	e002      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a83c:	e235      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a83e:	e234      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a840:	4b4c      	ldr	r3, [pc, #304]	@ (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a844:	e231      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84a:	e22e      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a84c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a850:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a854:	430b      	orrs	r3, r1
 800a856:	f040 808f 	bne.w	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a85a:	4b42      	ldr	r3, [pc, #264]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a85c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a85e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a862:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a866:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a86a:	d06b      	beq.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a872:	d874      	bhi.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a876:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a87a:	d056      	beq.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a882:	d86c      	bhi.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a886:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a88a:	d03b      	beq.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a892:	d864      	bhi.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a896:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a89a:	d021      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8a2:	d85c      	bhi.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d004      	beq.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8b0:	d004      	beq.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a8b2:	e054      	b.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a8b4:	f7fe fa0a 	bl	8008ccc <HAL_RCC_GetPCLK1Freq>
 800a8b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8ba:	e1f6      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8bc:	4b29      	ldr	r3, [pc, #164]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8c8:	d107      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ca:	f107 0318 	add.w	r3, r7, #24
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fa0a 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d8:	e1e7      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8de:	e1e4      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8e0:	4b20      	ldr	r3, [pc, #128]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ec:	d107      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ee:	f107 030c 	add.w	r3, r7, #12
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fb4c 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fc:	e1d5      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a902:	e1d2      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a904:	4b17      	ldr	r3, [pc, #92]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	d109      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a910:	4b14      	ldr	r3, [pc, #80]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	08db      	lsrs	r3, r3, #3
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	4a13      	ldr	r2, [pc, #76]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a91c:	fa22 f303 	lsr.w	r3, r2, r3
 800a920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a922:	e1c2      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a928:	e1bf      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a92a:	4b0e      	ldr	r3, [pc, #56]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a936:	d102      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a938:	4b0c      	ldr	r3, [pc, #48]	@ (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a93c:	e1b5      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a942:	e1b2      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a944:	4b07      	ldr	r3, [pc, #28]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a94c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a950:	d102      	bne.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a952:	4b07      	ldr	r3, [pc, #28]	@ (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a956:	e1a8      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a95c:	e1a5      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a962:	e1a2      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a964:	58024400 	.word	0x58024400
 800a968:	03d09000 	.word	0x03d09000
 800a96c:	003d0900 	.word	0x003d0900
 800a970:	007a1200 	.word	0x007a1200
 800a974:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a97c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a980:	430b      	orrs	r3, r1
 800a982:	d173      	bne.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a984:	4b9c      	ldr	r3, [pc, #624]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a98c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a994:	d02f      	beq.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a99c:	d863      	bhi.n	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9aa:	d012      	beq.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a9ac:	e05b      	b.n	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9ae:	4b92      	ldr	r3, [pc, #584]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9ba:	d107      	bne.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9bc:	f107 0318 	add.w	r3, r7, #24
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 f991 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ca:	e16e      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d0:	e16b      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9d2:	4b89      	ldr	r3, [pc, #548]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9de:	d107      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9e0:	f107 030c 	add.w	r3, r7, #12
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f000 fad3 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ee:	e15c      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f4:	e159      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9f6:	4b80      	ldr	r3, [pc, #512]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa00:	4b7d      	ldr	r3, [pc, #500]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	d10c      	bne.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d109      	bne.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa12:	4b79      	ldr	r3, [pc, #484]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	08db      	lsrs	r3, r3, #3
 800aa18:	f003 0303 	and.w	r3, r3, #3
 800aa1c:	4a77      	ldr	r2, [pc, #476]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aa1e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa24:	e01e      	b.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa26:	4b74      	ldr	r3, [pc, #464]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa32:	d106      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800aa34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa3a:	d102      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa3c:	4b70      	ldr	r3, [pc, #448]	@ (800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aa3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa40:	e010      	b.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa42:	4b6d      	ldr	r3, [pc, #436]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa4e:	d106      	bne.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800aa50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa56:	d102      	bne.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa58:	4b6a      	ldr	r3, [pc, #424]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aa5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa5c:	e002      	b.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa62:	e122      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa64:	e121      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa6a:	e11e      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aa6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa70:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800aa74:	430b      	orrs	r3, r1
 800aa76:	d133      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aa78:	4b5f      	ldr	r3, [pc, #380]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa8e:	d012      	beq.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800aa90:	e023      	b.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa92:	4b59      	ldr	r3, [pc, #356]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa9e:	d107      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 fbc7 	bl	800b238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaae:	e0fc      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab4:	e0f9      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aab6:	4b50      	ldr	r3, [pc, #320]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aabe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aac2:	d107      	bne.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac4:	f107 0318 	add.w	r3, r7, #24
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 f90d 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad2:	e0ea      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad8:	e0e7      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aade:	e0e4      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aae4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800aae8:	430b      	orrs	r3, r1
 800aaea:	f040 808d 	bne.w	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aaee:	4b42      	ldr	r3, [pc, #264]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaf2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aaf6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aafe:	d06b      	beq.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ab00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab06:	d874      	bhi.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab0e:	d056      	beq.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab16:	d86c      	bhi.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ab1e:	d03b      	beq.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ab20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ab26:	d864      	bhi.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab2e:	d021      	beq.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ab30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab36:	d85c      	bhi.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d004      	beq.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab44:	d004      	beq.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ab46:	e054      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ab48:	f000 f8b8 	bl	800acbc <HAL_RCCEx_GetD3PCLK1Freq>
 800ab4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab4e:	e0ac      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab50:	4b29      	ldr	r3, [pc, #164]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab5c:	d107      	bne.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab5e:	f107 0318 	add.w	r3, r7, #24
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 f8c0 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab6c:	e09d      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab72:	e09a      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab74:	4b20      	ldr	r3, [pc, #128]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab80:	d107      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab82:	f107 030c 	add.w	r3, r7, #12
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 fa02 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab90:	e08b      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab96:	e088      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab98:	4b17      	ldr	r3, [pc, #92]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0304 	and.w	r3, r3, #4
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d109      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aba4:	4b14      	ldr	r3, [pc, #80]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	08db      	lsrs	r3, r3, #3
 800abaa:	f003 0303 	and.w	r3, r3, #3
 800abae:	4a13      	ldr	r2, [pc, #76]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800abb0:	fa22 f303 	lsr.w	r3, r2, r3
 800abb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb6:	e078      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abb8:	2300      	movs	r3, #0
 800abba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abbc:	e075      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800abbe:	4b0e      	ldr	r3, [pc, #56]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abca:	d102      	bne.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800abcc:	4b0c      	ldr	r3, [pc, #48]	@ (800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd0:	e06b      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd6:	e068      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800abd8:	4b07      	ldr	r3, [pc, #28]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abe4:	d102      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800abe6:	4b07      	ldr	r3, [pc, #28]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800abe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abea:	e05e      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf0:	e05b      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf6:	e058      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abf8:	58024400 	.word	0x58024400
 800abfc:	03d09000 	.word	0x03d09000
 800ac00:	003d0900 	.word	0x003d0900
 800ac04:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ac08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac0c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ac10:	430b      	orrs	r3, r1
 800ac12:	d148      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ac14:	4b27      	ldr	r3, [pc, #156]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac24:	d02a      	beq.n	800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ac26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac2c:	d838      	bhi.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d004      	beq.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ac34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac3a:	d00d      	beq.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ac3c:	e030      	b.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac3e:	4b1d      	ldr	r3, [pc, #116]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac4a:	d102      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ac4c:	4b1a      	ldr	r3, [pc, #104]	@ (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ac4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac50:	e02b      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac56:	e028      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac58:	4b16      	ldr	r3, [pc, #88]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac64:	d107      	bne.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fae4 	bl	800b238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac74:	e019      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac7a:	e016      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac7c:	4b0d      	ldr	r3, [pc, #52]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac88:	d107      	bne.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac8a:	f107 0318 	add.w	r3, r7, #24
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 f82a 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac98:	e007      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac9e:	e004      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca4:	e001      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800acaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800acac:	4618      	mov	r0, r3
 800acae:	3740      	adds	r7, #64	@ 0x40
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	58024400 	.word	0x58024400
 800acb8:	007a1200 	.word	0x007a1200

0800acbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800acc0:	f7fd ffd4 	bl	8008c6c <HAL_RCC_GetHCLKFreq>
 800acc4:	4602      	mov	r2, r0
 800acc6:	4b06      	ldr	r3, [pc, #24]	@ (800ace0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	091b      	lsrs	r3, r3, #4
 800accc:	f003 0307 	and.w	r3, r3, #7
 800acd0:	4904      	ldr	r1, [pc, #16]	@ (800ace4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800acd2:	5ccb      	ldrb	r3, [r1, r3]
 800acd4:	f003 031f 	and.w	r3, r3, #31
 800acd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800acdc:	4618      	mov	r0, r3
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	58024400 	.word	0x58024400
 800ace4:	08023638 	.word	0x08023638

0800ace8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ace8:	b480      	push	{r7}
 800acea:	b089      	sub	sp, #36	@ 0x24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acf0:	4ba1      	ldr	r3, [pc, #644]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf4:	f003 0303 	and.w	r3, r3, #3
 800acf8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800acfa:	4b9f      	ldr	r3, [pc, #636]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acfe:	0b1b      	lsrs	r3, r3, #12
 800ad00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad06:	4b9c      	ldr	r3, [pc, #624]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0a:	091b      	lsrs	r3, r3, #4
 800ad0c:	f003 0301 	and.w	r3, r3, #1
 800ad10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ad12:	4b99      	ldr	r3, [pc, #612]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad16:	08db      	lsrs	r3, r3, #3
 800ad18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	fb02 f303 	mul.w	r3, r2, r3
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 8111 	beq.w	800af58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	f000 8083 	beq.w	800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	f200 80a1 	bhi.w	800ae88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d056      	beq.n	800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ad52:	e099      	b.n	800ae88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad54:	4b88      	ldr	r3, [pc, #544]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d02d      	beq.n	800adbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad60:	4b85      	ldr	r3, [pc, #532]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	08db      	lsrs	r3, r3, #3
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	4a84      	ldr	r2, [pc, #528]	@ (800af7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ad6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	ee07 3a90 	vmov	s15, r3
 800ad78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8a:	4b7b      	ldr	r3, [pc, #492]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800af80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ada2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800adba:	e087      	b.n	800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800adca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adce:	4b6a      	ldr	r3, [pc, #424]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add6:	ee07 3a90 	vmov	s15, r3
 800adda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adde:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800af80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ade6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adfe:	e065      	b.n	800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae12:	4b59      	ldr	r3, [pc, #356]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800af80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae42:	e043      	b.n	800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ae52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae56:	4b48      	ldr	r3, [pc, #288]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5e:	ee07 3a90 	vmov	s15, r3
 800ae62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800af80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae86:	e021      	b.n	800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae9a:	4b37      	ldr	r3, [pc, #220]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800af80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aecc:	4b2a      	ldr	r3, [pc, #168]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aed0:	0a5b      	lsrs	r3, r3, #9
 800aed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aee6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aef2:	ee17 2a90 	vmov	r2, s15
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aefa:	4b1f      	ldr	r3, [pc, #124]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aefc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aefe:	0c1b      	lsrs	r3, r3, #16
 800af00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af04:	ee07 3a90 	vmov	s15, r3
 800af08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af14:	edd7 6a07 	vldr	s13, [r7, #28]
 800af18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af20:	ee17 2a90 	vmov	r2, s15
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800af28:	4b13      	ldr	r3, [pc, #76]	@ (800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af2c:	0e1b      	lsrs	r3, r3, #24
 800af2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af42:	edd7 6a07 	vldr	s13, [r7, #28]
 800af46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af4e:	ee17 2a90 	vmov	r2, s15
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800af56:	e008      	b.n	800af6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	609a      	str	r2, [r3, #8]
}
 800af6a:	bf00      	nop
 800af6c:	3724      	adds	r7, #36	@ 0x24
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	58024400 	.word	0x58024400
 800af7c:	03d09000 	.word	0x03d09000
 800af80:	46000000 	.word	0x46000000
 800af84:	4c742400 	.word	0x4c742400
 800af88:	4a742400 	.word	0x4a742400
 800af8c:	4af42400 	.word	0x4af42400

0800af90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800af90:	b480      	push	{r7}
 800af92:	b089      	sub	sp, #36	@ 0x24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af98:	4ba1      	ldr	r3, [pc, #644]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af9c:	f003 0303 	and.w	r3, r3, #3
 800afa0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800afa2:	4b9f      	ldr	r3, [pc, #636]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa6:	0d1b      	lsrs	r3, r3, #20
 800afa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800afae:	4b9c      	ldr	r3, [pc, #624]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb2:	0a1b      	lsrs	r3, r3, #8
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800afba:	4b99      	ldr	r3, [pc, #612]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afbe:	08db      	lsrs	r3, r3, #3
 800afc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	fb02 f303 	mul.w	r3, r2, r3
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 8111 	beq.w	800b200 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	f000 8083 	beq.w	800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	f200 80a1 	bhi.w	800b130 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d003      	beq.n	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d056      	beq.n	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800affa:	e099      	b.n	800b130 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800affc:	4b88      	ldr	r3, [pc, #544]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0320 	and.w	r3, r3, #32
 800b004:	2b00      	cmp	r3, #0
 800b006:	d02d      	beq.n	800b064 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b008:	4b85      	ldr	r3, [pc, #532]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	08db      	lsrs	r3, r3, #3
 800b00e:	f003 0303 	and.w	r3, r3, #3
 800b012:	4a84      	ldr	r2, [pc, #528]	@ (800b224 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b014:	fa22 f303 	lsr.w	r3, r2, r3
 800b018:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	ee07 3a90 	vmov	s15, r3
 800b020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b032:	4b7b      	ldr	r3, [pc, #492]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b042:	ed97 6a03 	vldr	s12, [r7, #12]
 800b046:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b062:	e087      	b.n	800b174 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b076:	4b6a      	ldr	r3, [pc, #424]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b086:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a6:	e065      	b.n	800b174 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b230 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ba:	4b59      	ldr	r3, [pc, #356]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ea:	e043      	b.n	800b174 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fe:	4b48      	ldr	r3, [pc, #288]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b112:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b12e:	e021      	b.n	800b174 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b230 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b142:	4b37      	ldr	r3, [pc, #220]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14a:	ee07 3a90 	vmov	s15, r3
 800b14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b152:	ed97 6a03 	vldr	s12, [r7, #12]
 800b156:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b172:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b174:	4b2a      	ldr	r3, [pc, #168]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b178:	0a5b      	lsrs	r3, r3, #9
 800b17a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b18a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b18e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b19a:	ee17 2a90 	vmov	r2, s15
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b1a2:	4b1f      	ldr	r3, [pc, #124]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a6:	0c1b      	lsrs	r3, r3, #16
 800b1a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1ac:	ee07 3a90 	vmov	s15, r3
 800b1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c8:	ee17 2a90 	vmov	r2, s15
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b1d0:	4b13      	ldr	r3, [pc, #76]	@ (800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d4:	0e1b      	lsrs	r3, r3, #24
 800b1d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1f6:	ee17 2a90 	vmov	r2, s15
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b1fe:	e008      	b.n	800b212 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	609a      	str	r2, [r3, #8]
}
 800b212:	bf00      	nop
 800b214:	3724      	adds	r7, #36	@ 0x24
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	58024400 	.word	0x58024400
 800b224:	03d09000 	.word	0x03d09000
 800b228:	46000000 	.word	0x46000000
 800b22c:	4c742400 	.word	0x4c742400
 800b230:	4a742400 	.word	0x4a742400
 800b234:	4af42400 	.word	0x4af42400

0800b238 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b238:	b480      	push	{r7}
 800b23a:	b089      	sub	sp, #36	@ 0x24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b240:	4ba0      	ldr	r3, [pc, #640]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b244:	f003 0303 	and.w	r3, r3, #3
 800b248:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b24a:	4b9e      	ldr	r3, [pc, #632]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b24e:	091b      	lsrs	r3, r3, #4
 800b250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b254:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b256:	4b9b      	ldr	r3, [pc, #620]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b260:	4b98      	ldr	r3, [pc, #608]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b264:	08db      	lsrs	r3, r3, #3
 800b266:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	fb02 f303 	mul.w	r3, r2, r3
 800b270:	ee07 3a90 	vmov	s15, r3
 800b274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b278:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 8111 	beq.w	800b4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	2b02      	cmp	r3, #2
 800b288:	f000 8083 	beq.w	800b392 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	2b02      	cmp	r3, #2
 800b290:	f200 80a1 	bhi.w	800b3d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d056      	beq.n	800b34e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b2a0:	e099      	b.n	800b3d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2a2:	4b88      	ldr	r3, [pc, #544]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 0320 	and.w	r3, r3, #32
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d02d      	beq.n	800b30a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2ae:	4b85      	ldr	r3, [pc, #532]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	08db      	lsrs	r3, r3, #3
 800b2b4:	f003 0303 	and.w	r3, r3, #3
 800b2b8:	4a83      	ldr	r2, [pc, #524]	@ (800b4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b2be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	ee07 3a90 	vmov	s15, r3
 800b2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d8:	4b7a      	ldr	r3, [pc, #488]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e0:	ee07 3a90 	vmov	s15, r3
 800b2e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b304:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b308:	e087      	b.n	800b41a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	ee07 3a90 	vmov	s15, r3
 800b310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b314:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31c:	4b69      	ldr	r3, [pc, #420]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b324:	ee07 3a90 	vmov	s15, r3
 800b328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b330:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b344:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b348:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b34c:	e065      	b.n	800b41a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	ee07 3a90 	vmov	s15, r3
 800b354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b358:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b4d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b35c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b360:	4b58      	ldr	r3, [pc, #352]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b368:	ee07 3a90 	vmov	s15, r3
 800b36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b370:	ed97 6a03 	vldr	s12, [r7, #12]
 800b374:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b390:	e043      	b.n	800b41a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	ee07 3a90 	vmov	s15, r3
 800b398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b4d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b3a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a4:	4b47      	ldr	r3, [pc, #284]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ac:	ee07 3a90 	vmov	s15, r3
 800b3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3b8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d4:	e021      	b.n	800b41a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	ee07 3a90 	vmov	s15, r3
 800b3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b3e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e8:	4b36      	ldr	r3, [pc, #216]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f0:	ee07 3a90 	vmov	s15, r3
 800b3f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b408:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b40c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b410:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b414:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b418:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b41a:	4b2a      	ldr	r3, [pc, #168]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b41e:	0a5b      	lsrs	r3, r3, #9
 800b420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b424:	ee07 3a90 	vmov	s15, r3
 800b428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b430:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b434:	edd7 6a07 	vldr	s13, [r7, #28]
 800b438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b43c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b440:	ee17 2a90 	vmov	r2, s15
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b448:	4b1e      	ldr	r3, [pc, #120]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44c:	0c1b      	lsrs	r3, r3, #16
 800b44e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b45e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b462:	edd7 6a07 	vldr	s13, [r7, #28]
 800b466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b46a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b46e:	ee17 2a90 	vmov	r2, s15
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b476:	4b13      	ldr	r3, [pc, #76]	@ (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47a:	0e1b      	lsrs	r3, r3, #24
 800b47c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b480:	ee07 3a90 	vmov	s15, r3
 800b484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b48c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b490:	edd7 6a07 	vldr	s13, [r7, #28]
 800b494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b49c:	ee17 2a90 	vmov	r2, s15
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b4a4:	e008      	b.n	800b4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	609a      	str	r2, [r3, #8]
}
 800b4b8:	bf00      	nop
 800b4ba:	3724      	adds	r7, #36	@ 0x24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	58024400 	.word	0x58024400
 800b4c8:	03d09000 	.word	0x03d09000
 800b4cc:	46000000 	.word	0x46000000
 800b4d0:	4c742400 	.word	0x4c742400
 800b4d4:	4a742400 	.word	0x4a742400
 800b4d8:	4af42400 	.word	0x4af42400

0800b4dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4ea:	4b53      	ldr	r3, [pc, #332]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d101      	bne.n	800b4fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e099      	b.n	800b62e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b4fa:	4b4f      	ldr	r3, [pc, #316]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a4e      	ldr	r2, [pc, #312]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b500:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b506:	f7f7 ffaf 	bl	8003468 <HAL_GetTick>
 800b50a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b50c:	e008      	b.n	800b520 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b50e:	f7f7 ffab 	bl	8003468 <HAL_GetTick>
 800b512:	4602      	mov	r2, r0
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d901      	bls.n	800b520 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e086      	b.n	800b62e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b520:	4b45      	ldr	r3, [pc, #276]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1f0      	bne.n	800b50e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b52c:	4b42      	ldr	r3, [pc, #264]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b530:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	031b      	lsls	r3, r3, #12
 800b53a:	493f      	ldr	r1, [pc, #252]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b53c:	4313      	orrs	r3, r2
 800b53e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	3b01      	subs	r3, #1
 800b546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	3b01      	subs	r3, #1
 800b550:	025b      	lsls	r3, r3, #9
 800b552:	b29b      	uxth	r3, r3
 800b554:	431a      	orrs	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	041b      	lsls	r3, r3, #16
 800b55e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b562:	431a      	orrs	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	3b01      	subs	r3, #1
 800b56a:	061b      	lsls	r3, r3, #24
 800b56c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b570:	4931      	ldr	r1, [pc, #196]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b572:	4313      	orrs	r3, r2
 800b574:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b576:	4b30      	ldr	r3, [pc, #192]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b57a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	492d      	ldr	r1, [pc, #180]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b584:	4313      	orrs	r3, r2
 800b586:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b588:	4b2b      	ldr	r3, [pc, #172]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58c:	f023 0220 	bic.w	r2, r3, #32
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	4928      	ldr	r1, [pc, #160]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b596:	4313      	orrs	r3, r2
 800b598:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b59a:	4b27      	ldr	r3, [pc, #156]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b59e:	4a26      	ldr	r2, [pc, #152]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5a0:	f023 0310 	bic.w	r3, r3, #16
 800b5a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b5a6:	4b24      	ldr	r3, [pc, #144]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5aa:	4b24      	ldr	r3, [pc, #144]	@ (800b63c <RCCEx_PLL2_Config+0x160>)
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	69d2      	ldr	r2, [r2, #28]
 800b5b2:	00d2      	lsls	r2, r2, #3
 800b5b4:	4920      	ldr	r1, [pc, #128]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b5ba:	4b1f      	ldr	r3, [pc, #124]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5be:	4a1e      	ldr	r2, [pc, #120]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5c0:	f043 0310 	orr.w	r3, r3, #16
 800b5c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d106      	bne.n	800b5da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b5cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d0:	4a19      	ldr	r2, [pc, #100]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b5d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b5d8:	e00f      	b.n	800b5fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d106      	bne.n	800b5ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b5e0:	4b15      	ldr	r3, [pc, #84]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e4:	4a14      	ldr	r2, [pc, #80]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b5ec:	e005      	b.n	800b5fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b5ee:	4b12      	ldr	r3, [pc, #72]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f2:	4a11      	ldr	r2, [pc, #68]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b5f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b5fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a0e      	ldr	r2, [pc, #56]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b600:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b606:	f7f7 ff2f 	bl	8003468 <HAL_GetTick>
 800b60a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b60c:	e008      	b.n	800b620 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b60e:	f7f7 ff2b 	bl	8003468 <HAL_GetTick>
 800b612:	4602      	mov	r2, r0
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d901      	bls.n	800b620 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e006      	b.n	800b62e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b620:	4b05      	ldr	r3, [pc, #20]	@ (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0f0      	beq.n	800b60e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	58024400 	.word	0x58024400
 800b63c:	ffff0007 	.word	0xffff0007

0800b640 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b64e:	4b53      	ldr	r3, [pc, #332]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b652:	f003 0303 	and.w	r3, r3, #3
 800b656:	2b03      	cmp	r3, #3
 800b658:	d101      	bne.n	800b65e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e099      	b.n	800b792 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b65e:	4b4f      	ldr	r3, [pc, #316]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a4e      	ldr	r2, [pc, #312]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b66a:	f7f7 fefd 	bl	8003468 <HAL_GetTick>
 800b66e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b670:	e008      	b.n	800b684 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b672:	f7f7 fef9 	bl	8003468 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d901      	bls.n	800b684 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e086      	b.n	800b792 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b684:	4b45      	ldr	r3, [pc, #276]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1f0      	bne.n	800b672 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b690:	4b42      	ldr	r3, [pc, #264]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b694:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	051b      	lsls	r3, r3, #20
 800b69e:	493f      	ldr	r1, [pc, #252]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	025b      	lsls	r3, r3, #9
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	431a      	orrs	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	041b      	lsls	r3, r3, #16
 800b6c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	061b      	lsls	r3, r3, #24
 800b6d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b6d4:	4931      	ldr	r1, [pc, #196]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b6da:	4b30      	ldr	r3, [pc, #192]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	492d      	ldr	r1, [pc, #180]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b6ec:	4b2b      	ldr	r3, [pc, #172]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	4928      	ldr	r1, [pc, #160]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b6fe:	4b27      	ldr	r3, [pc, #156]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b702:	4a26      	ldr	r2, [pc, #152]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b708:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b70a:	4b24      	ldr	r3, [pc, #144]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b70c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b70e:	4b24      	ldr	r3, [pc, #144]	@ (800b7a0 <RCCEx_PLL3_Config+0x160>)
 800b710:	4013      	ands	r3, r2
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	69d2      	ldr	r2, [r2, #28]
 800b716:	00d2      	lsls	r2, r2, #3
 800b718:	4920      	ldr	r1, [pc, #128]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b71e:	4b1f      	ldr	r3, [pc, #124]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b722:	4a1e      	ldr	r2, [pc, #120]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b728:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b730:	4b1a      	ldr	r3, [pc, #104]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b734:	4a19      	ldr	r2, [pc, #100]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b736:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b73a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b73c:	e00f      	b.n	800b75e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d106      	bne.n	800b752 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b744:	4b15      	ldr	r3, [pc, #84]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b748:	4a14      	ldr	r2, [pc, #80]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b74a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b74e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b750:	e005      	b.n	800b75e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b752:	4b12      	ldr	r3, [pc, #72]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b756:	4a11      	ldr	r2, [pc, #68]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b758:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b75c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b75e:	4b0f      	ldr	r3, [pc, #60]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a0e      	ldr	r2, [pc, #56]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b76a:	f7f7 fe7d 	bl	8003468 <HAL_GetTick>
 800b76e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b770:	e008      	b.n	800b784 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b772:	f7f7 fe79 	bl	8003468 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d901      	bls.n	800b784 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e006      	b.n	800b792 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b784:	4b05      	ldr	r3, [pc, #20]	@ (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0f0      	beq.n	800b772 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b790:	7bfb      	ldrb	r3, [r7, #15]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	58024400 	.word	0x58024400
 800b7a0:	ffff0007 	.word	0xffff0007

0800b7a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e049      	b.n	800b84a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d106      	bne.n	800b7d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f841 	bl	800b852 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f000 f9e8 	bl	800bbb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b852:	b480      	push	{r7}
 800b854:	b083      	sub	sp, #12
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b85a:	bf00      	nop
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
	...

0800b868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d001      	beq.n	800b880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e054      	b.n	800b92a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2202      	movs	r2, #2
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68da      	ldr	r2, [r3, #12]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f042 0201 	orr.w	r2, r2, #1
 800b896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a26      	ldr	r2, [pc, #152]	@ (800b938 <HAL_TIM_Base_Start_IT+0xd0>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d022      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8aa:	d01d      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a22      	ldr	r2, [pc, #136]	@ (800b93c <HAL_TIM_Base_Start_IT+0xd4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d018      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a21      	ldr	r2, [pc, #132]	@ (800b940 <HAL_TIM_Base_Start_IT+0xd8>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d013      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a1f      	ldr	r2, [pc, #124]	@ (800b944 <HAL_TIM_Base_Start_IT+0xdc>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d00e      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b948 <HAL_TIM_Base_Start_IT+0xe0>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d009      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a1c      	ldr	r2, [pc, #112]	@ (800b94c <HAL_TIM_Base_Start_IT+0xe4>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d004      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a1b      	ldr	r2, [pc, #108]	@ (800b950 <HAL_TIM_Base_Start_IT+0xe8>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d115      	bne.n	800b914 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689a      	ldr	r2, [r3, #8]
 800b8ee:	4b19      	ldr	r3, [pc, #100]	@ (800b954 <HAL_TIM_Base_Start_IT+0xec>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b06      	cmp	r3, #6
 800b8f8:	d015      	beq.n	800b926 <HAL_TIM_Base_Start_IT+0xbe>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b900:	d011      	beq.n	800b926 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f042 0201 	orr.w	r2, r2, #1
 800b910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b912:	e008      	b.n	800b926 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f042 0201 	orr.w	r2, r2, #1
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	e000      	b.n	800b928 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3714      	adds	r7, #20
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	40010000 	.word	0x40010000
 800b93c:	40000400 	.word	0x40000400
 800b940:	40000800 	.word	0x40000800
 800b944:	40000c00 	.word	0x40000c00
 800b948:	40010400 	.word	0x40010400
 800b94c:	40001800 	.word	0x40001800
 800b950:	40014000 	.word	0x40014000
 800b954:	00010007 	.word	0x00010007

0800b958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d020      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f003 0302 	and.w	r3, r3, #2
 800b980:	2b00      	cmp	r3, #0
 800b982:	d01b      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f06f 0202 	mvn.w	r2, #2
 800b98c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	f003 0303 	and.w	r3, r3, #3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f8e9 	bl	800bb7a <HAL_TIM_IC_CaptureCallback>
 800b9a8:	e005      	b.n	800b9b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f8db 	bl	800bb66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f8ec 	bl	800bb8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 0304 	and.w	r3, r3, #4
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d020      	beq.n	800ba08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d01b      	beq.n	800ba08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f06f 0204 	mvn.w	r2, #4
 800b9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2202      	movs	r2, #2
 800b9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f8c3 	bl	800bb7a <HAL_TIM_IC_CaptureCallback>
 800b9f4:	e005      	b.n	800ba02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f8b5 	bl	800bb66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f8c6 	bl	800bb8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	f003 0308 	and.w	r3, r3, #8
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d020      	beq.n	800ba54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f003 0308 	and.w	r3, r3, #8
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d01b      	beq.n	800ba54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f06f 0208 	mvn.w	r2, #8
 800ba24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2204      	movs	r2, #4
 800ba2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	f003 0303 	and.w	r3, r3, #3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f89d 	bl	800bb7a <HAL_TIM_IC_CaptureCallback>
 800ba40:	e005      	b.n	800ba4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f88f 	bl	800bb66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 f8a0 	bl	800bb8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	f003 0310 	and.w	r3, r3, #16
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d020      	beq.n	800baa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f003 0310 	and.w	r3, r3, #16
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d01b      	beq.n	800baa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f06f 0210 	mvn.w	r2, #16
 800ba70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2208      	movs	r2, #8
 800ba76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f877 	bl	800bb7a <HAL_TIM_IC_CaptureCallback>
 800ba8c:	e005      	b.n	800ba9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f869 	bl	800bb66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f87a 	bl	800bb8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00c      	beq.n	800bac4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d007      	beq.n	800bac4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f06f 0201 	mvn.w	r2, #1
 800babc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7f6 f846 	bl	8001b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d104      	bne.n	800bad8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00c      	beq.n	800baf2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d007      	beq.n	800baf2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800baea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f913 	bl	800bd18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00c      	beq.n	800bb16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d007      	beq.n	800bb16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bb0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f90b 	bl	800bd2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00c      	beq.n	800bb3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d007      	beq.n	800bb3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bb32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f834 	bl	800bba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	f003 0320 	and.w	r3, r3, #32
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00c      	beq.n	800bb5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f003 0320 	and.w	r3, r3, #32
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d007      	beq.n	800bb5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f06f 0220 	mvn.w	r2, #32
 800bb56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f8d3 	bl	800bd04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb5e:	bf00      	nop
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b083      	sub	sp, #12
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb6e:	bf00      	nop
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb82:	bf00      	nop
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb8e:	b480      	push	{r7}
 800bb90:	b083      	sub	sp, #12
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb96:	bf00      	nop
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b083      	sub	sp, #12
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbaa:	bf00      	nop
 800bbac:	370c      	adds	r7, #12
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
	...

0800bbb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a46      	ldr	r2, [pc, #280]	@ (800bce4 <TIM_Base_SetConfig+0x12c>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d013      	beq.n	800bbf8 <TIM_Base_SetConfig+0x40>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbd6:	d00f      	beq.n	800bbf8 <TIM_Base_SetConfig+0x40>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a43      	ldr	r2, [pc, #268]	@ (800bce8 <TIM_Base_SetConfig+0x130>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d00b      	beq.n	800bbf8 <TIM_Base_SetConfig+0x40>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a42      	ldr	r2, [pc, #264]	@ (800bcec <TIM_Base_SetConfig+0x134>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d007      	beq.n	800bbf8 <TIM_Base_SetConfig+0x40>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a41      	ldr	r2, [pc, #260]	@ (800bcf0 <TIM_Base_SetConfig+0x138>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d003      	beq.n	800bbf8 <TIM_Base_SetConfig+0x40>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a40      	ldr	r2, [pc, #256]	@ (800bcf4 <TIM_Base_SetConfig+0x13c>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d108      	bne.n	800bc0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a35      	ldr	r2, [pc, #212]	@ (800bce4 <TIM_Base_SetConfig+0x12c>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d01f      	beq.n	800bc52 <TIM_Base_SetConfig+0x9a>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc18:	d01b      	beq.n	800bc52 <TIM_Base_SetConfig+0x9a>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4a32      	ldr	r2, [pc, #200]	@ (800bce8 <TIM_Base_SetConfig+0x130>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d017      	beq.n	800bc52 <TIM_Base_SetConfig+0x9a>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4a31      	ldr	r2, [pc, #196]	@ (800bcec <TIM_Base_SetConfig+0x134>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d013      	beq.n	800bc52 <TIM_Base_SetConfig+0x9a>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a30      	ldr	r2, [pc, #192]	@ (800bcf0 <TIM_Base_SetConfig+0x138>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d00f      	beq.n	800bc52 <TIM_Base_SetConfig+0x9a>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a2f      	ldr	r2, [pc, #188]	@ (800bcf4 <TIM_Base_SetConfig+0x13c>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d00b      	beq.n	800bc52 <TIM_Base_SetConfig+0x9a>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a2e      	ldr	r2, [pc, #184]	@ (800bcf8 <TIM_Base_SetConfig+0x140>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d007      	beq.n	800bc52 <TIM_Base_SetConfig+0x9a>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a2d      	ldr	r2, [pc, #180]	@ (800bcfc <TIM_Base_SetConfig+0x144>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d003      	beq.n	800bc52 <TIM_Base_SetConfig+0x9a>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a2c      	ldr	r2, [pc, #176]	@ (800bd00 <TIM_Base_SetConfig+0x148>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d108      	bne.n	800bc64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	68fa      	ldr	r2, [r7, #12]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	695b      	ldr	r3, [r3, #20]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	689a      	ldr	r2, [r3, #8]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a16      	ldr	r2, [pc, #88]	@ (800bce4 <TIM_Base_SetConfig+0x12c>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d00f      	beq.n	800bcb0 <TIM_Base_SetConfig+0xf8>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a18      	ldr	r2, [pc, #96]	@ (800bcf4 <TIM_Base_SetConfig+0x13c>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d00b      	beq.n	800bcb0 <TIM_Base_SetConfig+0xf8>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a17      	ldr	r2, [pc, #92]	@ (800bcf8 <TIM_Base_SetConfig+0x140>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d007      	beq.n	800bcb0 <TIM_Base_SetConfig+0xf8>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a16      	ldr	r2, [pc, #88]	@ (800bcfc <TIM_Base_SetConfig+0x144>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d003      	beq.n	800bcb0 <TIM_Base_SetConfig+0xf8>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a15      	ldr	r2, [pc, #84]	@ (800bd00 <TIM_Base_SetConfig+0x148>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d103      	bne.n	800bcb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	691a      	ldr	r2, [r3, #16]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	f003 0301 	and.w	r3, r3, #1
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d105      	bne.n	800bcd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	f023 0201 	bic.w	r2, r3, #1
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	611a      	str	r2, [r3, #16]
  }
}
 800bcd6:	bf00      	nop
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	40010000 	.word	0x40010000
 800bce8:	40000400 	.word	0x40000400
 800bcec:	40000800 	.word	0x40000800
 800bcf0:	40000c00 	.word	0x40000c00
 800bcf4:	40010400 	.word	0x40010400
 800bcf8:	40014000 	.word	0x40014000
 800bcfc:	40014400 	.word	0x40014400
 800bd00:	40014800 	.word	0x40014800

0800bd04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e042      	b.n	800bdd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d106      	bne.n	800bd6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f7f7 f843 	bl	8002df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2224      	movs	r2, #36	@ 0x24
 800bd6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f022 0201 	bic.w	r2, r2, #1
 800bd80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f001 fae0 	bl	800d350 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fd75 	bl	800c880 <UART_SetConfig>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d101      	bne.n	800bda0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e01b      	b.n	800bdd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bdae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689a      	ldr	r2, [r3, #8]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bdbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f042 0201 	orr.w	r2, r2, #1
 800bdce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f001 fb5f 	bl	800d494 <UART_CheckIdleState>
 800bdd6:	4603      	mov	r3, r0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08a      	sub	sp, #40	@ 0x28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	4613      	mov	r3, r2
 800bdec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdf4:	2b20      	cmp	r3, #32
 800bdf6:	d167      	bne.n	800bec8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d002      	beq.n	800be04 <HAL_UART_Transmit_DMA+0x24>
 800bdfe:	88fb      	ldrh	r3, [r7, #6]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d101      	bne.n	800be08 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800be04:	2301      	movs	r3, #1
 800be06:	e060      	b.n	800beca <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	88fa      	ldrh	r2, [r7, #6]
 800be12:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	88fa      	ldrh	r2, [r7, #6]
 800be1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2221      	movs	r2, #33	@ 0x21
 800be2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be32:	2b00      	cmp	r3, #0
 800be34:	d028      	beq.n	800be88 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be3a:	4a26      	ldr	r2, [pc, #152]	@ (800bed4 <HAL_UART_Transmit_DMA+0xf4>)
 800be3c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be42:	4a25      	ldr	r2, [pc, #148]	@ (800bed8 <HAL_UART_Transmit_DMA+0xf8>)
 800be44:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be4a:	4a24      	ldr	r2, [pc, #144]	@ (800bedc <HAL_UART_Transmit_DMA+0xfc>)
 800be4c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be52:	2200      	movs	r2, #0
 800be54:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be5e:	4619      	mov	r1, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3328      	adds	r3, #40	@ 0x28
 800be66:	461a      	mov	r2, r3
 800be68:	88fb      	ldrh	r3, [r7, #6]
 800be6a:	f7f9 fa6b 	bl	8005344 <HAL_DMA_Start_IT>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d009      	beq.n	800be88 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2210      	movs	r2, #16
 800be78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2220      	movs	r2, #32
 800be80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	e020      	b.n	800beca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2240      	movs	r2, #64	@ 0x40
 800be8e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3308      	adds	r3, #8
 800be96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	e853 3f00 	ldrex	r3, [r3]
 800be9e:	613b      	str	r3, [r7, #16]
   return(result);
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bea6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3308      	adds	r3, #8
 800beae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800beb0:	623a      	str	r2, [r7, #32]
 800beb2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb4:	69f9      	ldr	r1, [r7, #28]
 800beb6:	6a3a      	ldr	r2, [r7, #32]
 800beb8:	e841 2300 	strex	r3, r2, [r1]
 800bebc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e5      	bne.n	800be90 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	e000      	b.n	800beca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bec8:	2302      	movs	r3, #2
  }
}
 800beca:	4618      	mov	r0, r3
 800becc:	3728      	adds	r7, #40	@ 0x28
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	0800d961 	.word	0x0800d961
 800bed8:	0800d9f7 	.word	0x0800d9f7
 800bedc:	0800db79 	.word	0x0800db79

0800bee0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b08a      	sub	sp, #40	@ 0x28
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	4613      	mov	r3, r2
 800beec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bef4:	2b20      	cmp	r3, #32
 800bef6:	d137      	bne.n	800bf68 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d002      	beq.n	800bf04 <HAL_UART_Receive_DMA+0x24>
 800befe:	88fb      	ldrh	r3, [r7, #6]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d101      	bne.n	800bf08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	e030      	b.n	800bf6a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a18      	ldr	r2, [pc, #96]	@ (800bf74 <HAL_UART_Receive_DMA+0x94>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d01f      	beq.n	800bf58 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d018      	beq.n	800bf58 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	e853 3f00 	ldrex	r3, [r3]
 800bf32:	613b      	str	r3, [r7, #16]
   return(result);
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	461a      	mov	r2, r3
 800bf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf44:	623b      	str	r3, [r7, #32]
 800bf46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf48:	69f9      	ldr	r1, [r7, #28]
 800bf4a:	6a3a      	ldr	r2, [r7, #32]
 800bf4c:	e841 2300 	strex	r3, r2, [r1]
 800bf50:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1e6      	bne.n	800bf26 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bf58:	88fb      	ldrh	r3, [r7, #6]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	68b9      	ldr	r1, [r7, #8]
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f001 fbb0 	bl	800d6c4 <UART_Start_Receive_DMA>
 800bf64:	4603      	mov	r3, r0
 800bf66:	e000      	b.n	800bf6a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bf68:	2302      	movs	r3, #2
  }
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3728      	adds	r7, #40	@ 0x28
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	58000c00 	.word	0x58000c00

0800bf78 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b090      	sub	sp, #64	@ 0x40
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf9a:	2b80      	cmp	r3, #128	@ 0x80
 800bf9c:	d139      	bne.n	800c012 <HAL_UART_DMAStop+0x9a>
 800bf9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfa0:	2b21      	cmp	r3, #33	@ 0x21
 800bfa2:	d136      	bne.n	800c012 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	3308      	adds	r3, #8
 800bfaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfba:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bfc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e5      	bne.n	800bfa4 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d015      	beq.n	800c00c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7f9 fc17 	bl	8005818 <HAL_DMA_Abort>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00d      	beq.n	800c00c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fb f89d 	bl	8007134 <HAL_DMA_GetError>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b20      	cmp	r3, #32
 800bffe:	d105      	bne.n	800c00c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2210      	movs	r2, #16
 800c004:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c008:	2303      	movs	r3, #3
 800c00a:	e047      	b.n	800c09c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f001 fbff 	bl	800d810 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c01c:	2b40      	cmp	r3, #64	@ 0x40
 800c01e:	d13c      	bne.n	800c09a <HAL_UART_DMAStop+0x122>
 800c020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c022:	2b22      	cmp	r3, #34	@ 0x22
 800c024:	d139      	bne.n	800c09a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3308      	adds	r3, #8
 800c02c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	e853 3f00 	ldrex	r3, [r3]
 800c034:	60bb      	str	r3, [r7, #8]
   return(result);
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c03c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3308      	adds	r3, #8
 800c044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c046:	61ba      	str	r2, [r7, #24]
 800c048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	6979      	ldr	r1, [r7, #20]
 800c04c:	69ba      	ldr	r2, [r7, #24]
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	613b      	str	r3, [r7, #16]
   return(result);
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e5      	bne.n	800c026 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c060:	2b00      	cmp	r3, #0
 800c062:	d017      	beq.n	800c094 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7f9 fbd4 	bl	8005818 <HAL_DMA_Abort>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00e      	beq.n	800c094 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fb f859 	bl	8007134 <HAL_DMA_GetError>
 800c082:	4603      	mov	r3, r0
 800c084:	2b20      	cmp	r3, #32
 800c086:	d105      	bne.n	800c094 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2210      	movs	r2, #16
 800c08c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c090:	2303      	movs	r3, #3
 800c092:	e003      	b.n	800c09c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f001 fbfd 	bl	800d894 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3740      	adds	r7, #64	@ 0x40
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b0ba      	sub	sp, #232	@ 0xe8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c0ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c0ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c0d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d11b      	bne.n	800c118 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e4:	f003 0320 	and.w	r3, r3, #32
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d015      	beq.n	800c118 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0f0:	f003 0320 	and.w	r3, r3, #32
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d105      	bne.n	800c104 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c100:	2b00      	cmp	r3, #0
 800c102:	d009      	beq.n	800c118 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 8377 	beq.w	800c7fc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	4798      	blx	r3
      }
      return;
 800c116:	e371      	b.n	800c7fc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f000 8123 	beq.w	800c368 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c122:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c126:	4b8d      	ldr	r3, [pc, #564]	@ (800c35c <HAL_UART_IRQHandler+0x2b8>)
 800c128:	4013      	ands	r3, r2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c12e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c132:	4b8b      	ldr	r3, [pc, #556]	@ (800c360 <HAL_UART_IRQHandler+0x2bc>)
 800c134:	4013      	ands	r3, r2
 800c136:	2b00      	cmp	r3, #0
 800c138:	f000 8116 	beq.w	800c368 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c140:	f003 0301 	and.w	r3, r3, #1
 800c144:	2b00      	cmp	r3, #0
 800c146:	d011      	beq.n	800c16c <HAL_UART_IRQHandler+0xc8>
 800c148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c14c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2201      	movs	r2, #1
 800c15a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c162:	f043 0201 	orr.w	r2, r3, #1
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d011      	beq.n	800c19c <HAL_UART_IRQHandler+0xf8>
 800c178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00b      	beq.n	800c19c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2202      	movs	r2, #2
 800c18a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c192:	f043 0204 	orr.w	r2, r3, #4
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1a0:	f003 0304 	and.w	r3, r3, #4
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d011      	beq.n	800c1cc <HAL_UART_IRQHandler+0x128>
 800c1a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2204      	movs	r2, #4
 800c1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c2:	f043 0202 	orr.w	r2, r3, #2
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1d0:	f003 0308 	and.w	r3, r3, #8
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d017      	beq.n	800c208 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1dc:	f003 0320 	and.w	r3, r3, #32
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d105      	bne.n	800c1f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c1e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c1e8:	4b5c      	ldr	r3, [pc, #368]	@ (800c35c <HAL_UART_IRQHandler+0x2b8>)
 800c1ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00b      	beq.n	800c208 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2208      	movs	r2, #8
 800c1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1fe:	f043 0208 	orr.w	r2, r3, #8
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c20c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c210:	2b00      	cmp	r3, #0
 800c212:	d012      	beq.n	800c23a <HAL_UART_IRQHandler+0x196>
 800c214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c218:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00c      	beq.n	800c23a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c230:	f043 0220 	orr.w	r2, r3, #32
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c240:	2b00      	cmp	r3, #0
 800c242:	f000 82dd 	beq.w	800c800 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c24a:	f003 0320 	and.w	r3, r3, #32
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d013      	beq.n	800c27a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c256:	f003 0320 	and.w	r3, r3, #32
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d105      	bne.n	800c26a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c25e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c266:	2b00      	cmp	r3, #0
 800c268:	d007      	beq.n	800c27a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d003      	beq.n	800c27a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c280:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c28e:	2b40      	cmp	r3, #64	@ 0x40
 800c290:	d005      	beq.n	800c29e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c296:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d054      	beq.n	800c348 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f001 faf8 	bl	800d894 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ae:	2b40      	cmp	r3, #64	@ 0x40
 800c2b0:	d146      	bne.n	800c340 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3308      	adds	r3, #8
 800c2b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c2c0:	e853 3f00 	ldrex	r3, [r3]
 800c2c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c2c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c2cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3308      	adds	r3, #8
 800c2da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c2de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c2e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c2ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c2f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1d9      	bne.n	800c2b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c304:	2b00      	cmp	r3, #0
 800c306:	d017      	beq.n	800c338 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c30e:	4a15      	ldr	r2, [pc, #84]	@ (800c364 <HAL_UART_IRQHandler+0x2c0>)
 800c310:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c318:	4618      	mov	r0, r3
 800c31a:	f7f9 fd9b 	bl	8005e54 <HAL_DMA_Abort_IT>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d019      	beq.n	800c358 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c32a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c332:	4610      	mov	r0, r2
 800c334:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c336:	e00f      	b.n	800c358 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fa8b 	bl	800c854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c33e:	e00b      	b.n	800c358 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fa87 	bl	800c854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c346:	e007      	b.n	800c358 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fa83 	bl	800c854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c356:	e253      	b.n	800c800 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c358:	bf00      	nop
    return;
 800c35a:	e251      	b.n	800c800 <HAL_UART_IRQHandler+0x75c>
 800c35c:	10000001 	.word	0x10000001
 800c360:	04000120 	.word	0x04000120
 800c364:	0800dbf9 	.word	0x0800dbf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	f040 81e7 	bne.w	800c740 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c376:	f003 0310 	and.w	r3, r3, #16
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 81e0 	beq.w	800c740 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c384:	f003 0310 	and.w	r3, r3, #16
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 81d9 	beq.w	800c740 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2210      	movs	r2, #16
 800c394:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3a0:	2b40      	cmp	r3, #64	@ 0x40
 800c3a2:	f040 8151 	bne.w	800c648 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a96      	ldr	r2, [pc, #600]	@ (800c608 <HAL_UART_IRQHandler+0x564>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d068      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a93      	ldr	r2, [pc, #588]	@ (800c60c <HAL_UART_IRQHandler+0x568>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d061      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a91      	ldr	r2, [pc, #580]	@ (800c610 <HAL_UART_IRQHandler+0x56c>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d05a      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a8e      	ldr	r2, [pc, #568]	@ (800c614 <HAL_UART_IRQHandler+0x570>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d053      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a8c      	ldr	r2, [pc, #560]	@ (800c618 <HAL_UART_IRQHandler+0x574>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d04c      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a89      	ldr	r2, [pc, #548]	@ (800c61c <HAL_UART_IRQHandler+0x578>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d045      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a87      	ldr	r2, [pc, #540]	@ (800c620 <HAL_UART_IRQHandler+0x57c>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d03e      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a84      	ldr	r2, [pc, #528]	@ (800c624 <HAL_UART_IRQHandler+0x580>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d037      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a82      	ldr	r2, [pc, #520]	@ (800c628 <HAL_UART_IRQHandler+0x584>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d030      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a7f      	ldr	r2, [pc, #508]	@ (800c62c <HAL_UART_IRQHandler+0x588>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d029      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a7d      	ldr	r2, [pc, #500]	@ (800c630 <HAL_UART_IRQHandler+0x58c>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d022      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a7a      	ldr	r2, [pc, #488]	@ (800c634 <HAL_UART_IRQHandler+0x590>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d01b      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a78      	ldr	r2, [pc, #480]	@ (800c638 <HAL_UART_IRQHandler+0x594>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d014      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a75      	ldr	r2, [pc, #468]	@ (800c63c <HAL_UART_IRQHandler+0x598>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d00d      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a73      	ldr	r2, [pc, #460]	@ (800c640 <HAL_UART_IRQHandler+0x59c>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d006      	beq.n	800c486 <HAL_UART_IRQHandler+0x3e2>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a70      	ldr	r2, [pc, #448]	@ (800c644 <HAL_UART_IRQHandler+0x5a0>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d106      	bne.n	800c494 <HAL_UART_IRQHandler+0x3f0>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	b29b      	uxth	r3, r3
 800c492:	e005      	b.n	800c4a0 <HAL_UART_IRQHandler+0x3fc>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 81ab 	beq.w	800c804 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	f080 81a3 	bcs.w	800c804 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c4c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4ce:	69db      	ldr	r3, [r3, #28]
 800c4d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4d4:	f000 8087 	beq.w	800c5e6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c4e4:	e853 3f00 	ldrex	r3, [r3]
 800c4e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c4ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c4f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c506:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c50e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c512:	e841 2300 	strex	r3, r2, [r1]
 800c516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c51a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1da      	bne.n	800c4d8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3308      	adds	r3, #8
 800c528:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c52c:	e853 3f00 	ldrex	r3, [r3]
 800c530:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c534:	f023 0301 	bic.w	r3, r3, #1
 800c538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	3308      	adds	r3, #8
 800c542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c546:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c54a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c54e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c552:	e841 2300 	strex	r3, r2, [r1]
 800c556:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1e1      	bne.n	800c522 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3308      	adds	r3, #8
 800c564:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c568:	e853 3f00 	ldrex	r3, [r3]
 800c56c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c56e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3308      	adds	r3, #8
 800c57e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c582:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c584:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c586:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c588:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c58a:	e841 2300 	strex	r3, r2, [r1]
 800c58e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c592:	2b00      	cmp	r3, #0
 800c594:	d1e3      	bne.n	800c55e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2220      	movs	r2, #32
 800c59a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5ac:	e853 3f00 	ldrex	r3, [r3]
 800c5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c5b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5b4:	f023 0310 	bic.w	r3, r3, #16
 800c5b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c5cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5ce:	e841 2300 	strex	r3, r2, [r1]
 800c5d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c5d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1e4      	bne.n	800c5a4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7f9 f919 	bl	8005818 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2202      	movs	r2, #2
 800c5ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 f931 	bl	800c868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c606:	e0fd      	b.n	800c804 <HAL_UART_IRQHandler+0x760>
 800c608:	40020010 	.word	0x40020010
 800c60c:	40020028 	.word	0x40020028
 800c610:	40020040 	.word	0x40020040
 800c614:	40020058 	.word	0x40020058
 800c618:	40020070 	.word	0x40020070
 800c61c:	40020088 	.word	0x40020088
 800c620:	400200a0 	.word	0x400200a0
 800c624:	400200b8 	.word	0x400200b8
 800c628:	40020410 	.word	0x40020410
 800c62c:	40020428 	.word	0x40020428
 800c630:	40020440 	.word	0x40020440
 800c634:	40020458 	.word	0x40020458
 800c638:	40020470 	.word	0x40020470
 800c63c:	40020488 	.word	0x40020488
 800c640:	400204a0 	.word	0x400204a0
 800c644:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c654:	b29b      	uxth	r3, r3
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c662:	b29b      	uxth	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 80cf 	beq.w	800c808 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c66a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 80ca 	beq.w	800c808 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c67c:	e853 3f00 	ldrex	r3, [r3]
 800c680:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c688:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	461a      	mov	r2, r3
 800c692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c696:	647b      	str	r3, [r7, #68]	@ 0x44
 800c698:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c69c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1e4      	bne.n	800c674 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b4:	e853 3f00 	ldrex	r3, [r3]
 800c6b8:	623b      	str	r3, [r7, #32]
   return(result);
 800c6ba:	6a3a      	ldr	r2, [r7, #32]
 800c6bc:	4b55      	ldr	r3, [pc, #340]	@ (800c814 <HAL_UART_IRQHandler+0x770>)
 800c6be:	4013      	ands	r3, r2
 800c6c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c6ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800c6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d6:	e841 2300 	strex	r3, r2, [r1]
 800c6da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1e3      	bne.n	800c6aa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2220      	movs	r2, #32
 800c6e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	e853 3f00 	ldrex	r3, [r3]
 800c702:	60fb      	str	r3, [r7, #12]
   return(result);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f023 0310 	bic.w	r3, r3, #16
 800c70a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c718:	61fb      	str	r3, [r7, #28]
 800c71a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71c:	69b9      	ldr	r1, [r7, #24]
 800c71e:	69fa      	ldr	r2, [r7, #28]
 800c720:	e841 2300 	strex	r3, r2, [r1]
 800c724:	617b      	str	r3, [r7, #20]
   return(result);
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1e4      	bne.n	800c6f6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2202      	movs	r2, #2
 800c730:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c732:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f895 	bl	800c868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c73e:	e063      	b.n	800c808 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c744:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00e      	beq.n	800c76a <HAL_UART_IRQHandler+0x6c6>
 800c74c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c754:	2b00      	cmp	r3, #0
 800c756:	d008      	beq.n	800c76a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c760:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f001 fa89 	bl	800dc7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c768:	e051      	b.n	800c80e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c76e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c772:	2b00      	cmp	r3, #0
 800c774:	d014      	beq.n	800c7a0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d105      	bne.n	800c78e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d008      	beq.n	800c7a0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c792:	2b00      	cmp	r3, #0
 800c794:	d03a      	beq.n	800c80c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	4798      	blx	r3
    }
    return;
 800c79e:	e035      	b.n	800c80c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d009      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x71c>
 800c7ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d003      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 fa33 	bl	800dc24 <UART_EndTransmit_IT>
    return;
 800c7be:	e026      	b.n	800c80e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c7c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d009      	beq.n	800c7e0 <HAL_UART_IRQHandler+0x73c>
 800c7cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d003      	beq.n	800c7e0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f001 fa62 	bl	800dca2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7de:	e016      	b.n	800c80e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d010      	beq.n	800c80e <HAL_UART_IRQHandler+0x76a>
 800c7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	da0c      	bge.n	800c80e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f001 fa4a 	bl	800dc8e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7fa:	e008      	b.n	800c80e <HAL_UART_IRQHandler+0x76a>
      return;
 800c7fc:	bf00      	nop
 800c7fe:	e006      	b.n	800c80e <HAL_UART_IRQHandler+0x76a>
    return;
 800c800:	bf00      	nop
 800c802:	e004      	b.n	800c80e <HAL_UART_IRQHandler+0x76a>
      return;
 800c804:	bf00      	nop
 800c806:	e002      	b.n	800c80e <HAL_UART_IRQHandler+0x76a>
      return;
 800c808:	bf00      	nop
 800c80a:	e000      	b.n	800c80e <HAL_UART_IRQHandler+0x76a>
    return;
 800c80c:	bf00      	nop
  }
}
 800c80e:	37e8      	adds	r7, #232	@ 0xe8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	effffffe 	.word	0xeffffffe

0800c818 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c834:	bf00      	nop
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c85c:	bf00      	nop
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	460b      	mov	r3, r1
 800c872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c884:	b092      	sub	sp, #72	@ 0x48
 800c886:	af00      	add	r7, sp, #0
 800c888:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c88a:	2300      	movs	r3, #0
 800c88c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	689a      	ldr	r2, [r3, #8]
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	431a      	orrs	r2, r3
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	431a      	orrs	r2, r3
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	4bbe      	ldr	r3, [pc, #760]	@ (800cba8 <UART_SetConfig+0x328>)
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	6812      	ldr	r2, [r2, #0]
 800c8b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c8b8:	430b      	orrs	r3, r1
 800c8ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	68da      	ldr	r2, [r3, #12]
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	430a      	orrs	r2, r1
 800c8d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4ab3      	ldr	r2, [pc, #716]	@ (800cbac <UART_SetConfig+0x32c>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d004      	beq.n	800c8ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	689a      	ldr	r2, [r3, #8]
 800c8f2:	4baf      	ldr	r3, [pc, #700]	@ (800cbb0 <UART_SetConfig+0x330>)
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	697a      	ldr	r2, [r7, #20]
 800c8f8:	6812      	ldr	r2, [r2, #0]
 800c8fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c8fc:	430b      	orrs	r3, r1
 800c8fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c906:	f023 010f 	bic.w	r1, r3, #15
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	430a      	orrs	r2, r1
 800c914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4aa6      	ldr	r2, [pc, #664]	@ (800cbb4 <UART_SetConfig+0x334>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d177      	bne.n	800ca10 <UART_SetConfig+0x190>
 800c920:	4ba5      	ldr	r3, [pc, #660]	@ (800cbb8 <UART_SetConfig+0x338>)
 800c922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c924:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c928:	2b28      	cmp	r3, #40	@ 0x28
 800c92a:	d86d      	bhi.n	800ca08 <UART_SetConfig+0x188>
 800c92c:	a201      	add	r2, pc, #4	@ (adr r2, 800c934 <UART_SetConfig+0xb4>)
 800c92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c932:	bf00      	nop
 800c934:	0800c9d9 	.word	0x0800c9d9
 800c938:	0800ca09 	.word	0x0800ca09
 800c93c:	0800ca09 	.word	0x0800ca09
 800c940:	0800ca09 	.word	0x0800ca09
 800c944:	0800ca09 	.word	0x0800ca09
 800c948:	0800ca09 	.word	0x0800ca09
 800c94c:	0800ca09 	.word	0x0800ca09
 800c950:	0800ca09 	.word	0x0800ca09
 800c954:	0800c9e1 	.word	0x0800c9e1
 800c958:	0800ca09 	.word	0x0800ca09
 800c95c:	0800ca09 	.word	0x0800ca09
 800c960:	0800ca09 	.word	0x0800ca09
 800c964:	0800ca09 	.word	0x0800ca09
 800c968:	0800ca09 	.word	0x0800ca09
 800c96c:	0800ca09 	.word	0x0800ca09
 800c970:	0800ca09 	.word	0x0800ca09
 800c974:	0800c9e9 	.word	0x0800c9e9
 800c978:	0800ca09 	.word	0x0800ca09
 800c97c:	0800ca09 	.word	0x0800ca09
 800c980:	0800ca09 	.word	0x0800ca09
 800c984:	0800ca09 	.word	0x0800ca09
 800c988:	0800ca09 	.word	0x0800ca09
 800c98c:	0800ca09 	.word	0x0800ca09
 800c990:	0800ca09 	.word	0x0800ca09
 800c994:	0800c9f1 	.word	0x0800c9f1
 800c998:	0800ca09 	.word	0x0800ca09
 800c99c:	0800ca09 	.word	0x0800ca09
 800c9a0:	0800ca09 	.word	0x0800ca09
 800c9a4:	0800ca09 	.word	0x0800ca09
 800c9a8:	0800ca09 	.word	0x0800ca09
 800c9ac:	0800ca09 	.word	0x0800ca09
 800c9b0:	0800ca09 	.word	0x0800ca09
 800c9b4:	0800c9f9 	.word	0x0800c9f9
 800c9b8:	0800ca09 	.word	0x0800ca09
 800c9bc:	0800ca09 	.word	0x0800ca09
 800c9c0:	0800ca09 	.word	0x0800ca09
 800c9c4:	0800ca09 	.word	0x0800ca09
 800c9c8:	0800ca09 	.word	0x0800ca09
 800c9cc:	0800ca09 	.word	0x0800ca09
 800c9d0:	0800ca09 	.word	0x0800ca09
 800c9d4:	0800ca01 	.word	0x0800ca01
 800c9d8:	2301      	movs	r3, #1
 800c9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9de:	e222      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800c9e0:	2304      	movs	r3, #4
 800c9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9e6:	e21e      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800c9e8:	2308      	movs	r3, #8
 800c9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ee:	e21a      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800c9f0:	2310      	movs	r3, #16
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9f6:	e216      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800c9f8:	2320      	movs	r3, #32
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9fe:	e212      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca00:	2340      	movs	r3, #64	@ 0x40
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca06:	e20e      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca08:	2380      	movs	r3, #128	@ 0x80
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca0e:	e20a      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a69      	ldr	r2, [pc, #420]	@ (800cbbc <UART_SetConfig+0x33c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d130      	bne.n	800ca7c <UART_SetConfig+0x1fc>
 800ca1a:	4b67      	ldr	r3, [pc, #412]	@ (800cbb8 <UART_SetConfig+0x338>)
 800ca1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca1e:	f003 0307 	and.w	r3, r3, #7
 800ca22:	2b05      	cmp	r3, #5
 800ca24:	d826      	bhi.n	800ca74 <UART_SetConfig+0x1f4>
 800ca26:	a201      	add	r2, pc, #4	@ (adr r2, 800ca2c <UART_SetConfig+0x1ac>)
 800ca28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2c:	0800ca45 	.word	0x0800ca45
 800ca30:	0800ca4d 	.word	0x0800ca4d
 800ca34:	0800ca55 	.word	0x0800ca55
 800ca38:	0800ca5d 	.word	0x0800ca5d
 800ca3c:	0800ca65 	.word	0x0800ca65
 800ca40:	0800ca6d 	.word	0x0800ca6d
 800ca44:	2300      	movs	r3, #0
 800ca46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca4a:	e1ec      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca4c:	2304      	movs	r3, #4
 800ca4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca52:	e1e8      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca54:	2308      	movs	r3, #8
 800ca56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca5a:	e1e4      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca5c:	2310      	movs	r3, #16
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca62:	e1e0      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca64:	2320      	movs	r3, #32
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca6a:	e1dc      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca6c:	2340      	movs	r3, #64	@ 0x40
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca72:	e1d8      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca74:	2380      	movs	r3, #128	@ 0x80
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca7a:	e1d4      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a4f      	ldr	r2, [pc, #316]	@ (800cbc0 <UART_SetConfig+0x340>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d130      	bne.n	800cae8 <UART_SetConfig+0x268>
 800ca86:	4b4c      	ldr	r3, [pc, #304]	@ (800cbb8 <UART_SetConfig+0x338>)
 800ca88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca8a:	f003 0307 	and.w	r3, r3, #7
 800ca8e:	2b05      	cmp	r3, #5
 800ca90:	d826      	bhi.n	800cae0 <UART_SetConfig+0x260>
 800ca92:	a201      	add	r2, pc, #4	@ (adr r2, 800ca98 <UART_SetConfig+0x218>)
 800ca94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca98:	0800cab1 	.word	0x0800cab1
 800ca9c:	0800cab9 	.word	0x0800cab9
 800caa0:	0800cac1 	.word	0x0800cac1
 800caa4:	0800cac9 	.word	0x0800cac9
 800caa8:	0800cad1 	.word	0x0800cad1
 800caac:	0800cad9 	.word	0x0800cad9
 800cab0:	2300      	movs	r3, #0
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cab6:	e1b6      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cab8:	2304      	movs	r3, #4
 800caba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cabe:	e1b2      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cac0:	2308      	movs	r3, #8
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cac6:	e1ae      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cac8:	2310      	movs	r3, #16
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cace:	e1aa      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cad0:	2320      	movs	r3, #32
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad6:	e1a6      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cad8:	2340      	movs	r3, #64	@ 0x40
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cade:	e1a2      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cae0:	2380      	movs	r3, #128	@ 0x80
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cae6:	e19e      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a35      	ldr	r2, [pc, #212]	@ (800cbc4 <UART_SetConfig+0x344>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d130      	bne.n	800cb54 <UART_SetConfig+0x2d4>
 800caf2:	4b31      	ldr	r3, [pc, #196]	@ (800cbb8 <UART_SetConfig+0x338>)
 800caf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caf6:	f003 0307 	and.w	r3, r3, #7
 800cafa:	2b05      	cmp	r3, #5
 800cafc:	d826      	bhi.n	800cb4c <UART_SetConfig+0x2cc>
 800cafe:	a201      	add	r2, pc, #4	@ (adr r2, 800cb04 <UART_SetConfig+0x284>)
 800cb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb04:	0800cb1d 	.word	0x0800cb1d
 800cb08:	0800cb25 	.word	0x0800cb25
 800cb0c:	0800cb2d 	.word	0x0800cb2d
 800cb10:	0800cb35 	.word	0x0800cb35
 800cb14:	0800cb3d 	.word	0x0800cb3d
 800cb18:	0800cb45 	.word	0x0800cb45
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb22:	e180      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cb24:	2304      	movs	r3, #4
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb2a:	e17c      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cb2c:	2308      	movs	r3, #8
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb32:	e178      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cb34:	2310      	movs	r3, #16
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3a:	e174      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cb3c:	2320      	movs	r3, #32
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb42:	e170      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cb44:	2340      	movs	r3, #64	@ 0x40
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb4a:	e16c      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cb4c:	2380      	movs	r3, #128	@ 0x80
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb52:	e168      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a1b      	ldr	r2, [pc, #108]	@ (800cbc8 <UART_SetConfig+0x348>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d142      	bne.n	800cbe4 <UART_SetConfig+0x364>
 800cb5e:	4b16      	ldr	r3, [pc, #88]	@ (800cbb8 <UART_SetConfig+0x338>)
 800cb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb62:	f003 0307 	and.w	r3, r3, #7
 800cb66:	2b05      	cmp	r3, #5
 800cb68:	d838      	bhi.n	800cbdc <UART_SetConfig+0x35c>
 800cb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb70 <UART_SetConfig+0x2f0>)
 800cb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb70:	0800cb89 	.word	0x0800cb89
 800cb74:	0800cb91 	.word	0x0800cb91
 800cb78:	0800cb99 	.word	0x0800cb99
 800cb7c:	0800cba1 	.word	0x0800cba1
 800cb80:	0800cbcd 	.word	0x0800cbcd
 800cb84:	0800cbd5 	.word	0x0800cbd5
 800cb88:	2300      	movs	r3, #0
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb8e:	e14a      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cb90:	2304      	movs	r3, #4
 800cb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb96:	e146      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cb98:	2308      	movs	r3, #8
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb9e:	e142      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cba0:	2310      	movs	r3, #16
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba6:	e13e      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cba8:	cfff69f3 	.word	0xcfff69f3
 800cbac:	58000c00 	.word	0x58000c00
 800cbb0:	11fff4ff 	.word	0x11fff4ff
 800cbb4:	40011000 	.word	0x40011000
 800cbb8:	58024400 	.word	0x58024400
 800cbbc:	40004400 	.word	0x40004400
 800cbc0:	40004800 	.word	0x40004800
 800cbc4:	40004c00 	.word	0x40004c00
 800cbc8:	40005000 	.word	0x40005000
 800cbcc:	2320      	movs	r3, #32
 800cbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbd2:	e128      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cbd4:	2340      	movs	r3, #64	@ 0x40
 800cbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbda:	e124      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cbdc:	2380      	movs	r3, #128	@ 0x80
 800cbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbe2:	e120      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4acb      	ldr	r2, [pc, #812]	@ (800cf18 <UART_SetConfig+0x698>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d176      	bne.n	800ccdc <UART_SetConfig+0x45c>
 800cbee:	4bcb      	ldr	r3, [pc, #812]	@ (800cf1c <UART_SetConfig+0x69c>)
 800cbf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cbf6:	2b28      	cmp	r3, #40	@ 0x28
 800cbf8:	d86c      	bhi.n	800ccd4 <UART_SetConfig+0x454>
 800cbfa:	a201      	add	r2, pc, #4	@ (adr r2, 800cc00 <UART_SetConfig+0x380>)
 800cbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc00:	0800cca5 	.word	0x0800cca5
 800cc04:	0800ccd5 	.word	0x0800ccd5
 800cc08:	0800ccd5 	.word	0x0800ccd5
 800cc0c:	0800ccd5 	.word	0x0800ccd5
 800cc10:	0800ccd5 	.word	0x0800ccd5
 800cc14:	0800ccd5 	.word	0x0800ccd5
 800cc18:	0800ccd5 	.word	0x0800ccd5
 800cc1c:	0800ccd5 	.word	0x0800ccd5
 800cc20:	0800ccad 	.word	0x0800ccad
 800cc24:	0800ccd5 	.word	0x0800ccd5
 800cc28:	0800ccd5 	.word	0x0800ccd5
 800cc2c:	0800ccd5 	.word	0x0800ccd5
 800cc30:	0800ccd5 	.word	0x0800ccd5
 800cc34:	0800ccd5 	.word	0x0800ccd5
 800cc38:	0800ccd5 	.word	0x0800ccd5
 800cc3c:	0800ccd5 	.word	0x0800ccd5
 800cc40:	0800ccb5 	.word	0x0800ccb5
 800cc44:	0800ccd5 	.word	0x0800ccd5
 800cc48:	0800ccd5 	.word	0x0800ccd5
 800cc4c:	0800ccd5 	.word	0x0800ccd5
 800cc50:	0800ccd5 	.word	0x0800ccd5
 800cc54:	0800ccd5 	.word	0x0800ccd5
 800cc58:	0800ccd5 	.word	0x0800ccd5
 800cc5c:	0800ccd5 	.word	0x0800ccd5
 800cc60:	0800ccbd 	.word	0x0800ccbd
 800cc64:	0800ccd5 	.word	0x0800ccd5
 800cc68:	0800ccd5 	.word	0x0800ccd5
 800cc6c:	0800ccd5 	.word	0x0800ccd5
 800cc70:	0800ccd5 	.word	0x0800ccd5
 800cc74:	0800ccd5 	.word	0x0800ccd5
 800cc78:	0800ccd5 	.word	0x0800ccd5
 800cc7c:	0800ccd5 	.word	0x0800ccd5
 800cc80:	0800ccc5 	.word	0x0800ccc5
 800cc84:	0800ccd5 	.word	0x0800ccd5
 800cc88:	0800ccd5 	.word	0x0800ccd5
 800cc8c:	0800ccd5 	.word	0x0800ccd5
 800cc90:	0800ccd5 	.word	0x0800ccd5
 800cc94:	0800ccd5 	.word	0x0800ccd5
 800cc98:	0800ccd5 	.word	0x0800ccd5
 800cc9c:	0800ccd5 	.word	0x0800ccd5
 800cca0:	0800cccd 	.word	0x0800cccd
 800cca4:	2301      	movs	r3, #1
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccaa:	e0bc      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ccac:	2304      	movs	r3, #4
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccb2:	e0b8      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ccb4:	2308      	movs	r3, #8
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccba:	e0b4      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ccbc:	2310      	movs	r3, #16
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc2:	e0b0      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ccc4:	2320      	movs	r3, #32
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccca:	e0ac      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cccc:	2340      	movs	r3, #64	@ 0x40
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd2:	e0a8      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ccd4:	2380      	movs	r3, #128	@ 0x80
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccda:	e0a4      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a8f      	ldr	r2, [pc, #572]	@ (800cf20 <UART_SetConfig+0x6a0>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d130      	bne.n	800cd48 <UART_SetConfig+0x4c8>
 800cce6:	4b8d      	ldr	r3, [pc, #564]	@ (800cf1c <UART_SetConfig+0x69c>)
 800cce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccea:	f003 0307 	and.w	r3, r3, #7
 800ccee:	2b05      	cmp	r3, #5
 800ccf0:	d826      	bhi.n	800cd40 <UART_SetConfig+0x4c0>
 800ccf2:	a201      	add	r2, pc, #4	@ (adr r2, 800ccf8 <UART_SetConfig+0x478>)
 800ccf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf8:	0800cd11 	.word	0x0800cd11
 800ccfc:	0800cd19 	.word	0x0800cd19
 800cd00:	0800cd21 	.word	0x0800cd21
 800cd04:	0800cd29 	.word	0x0800cd29
 800cd08:	0800cd31 	.word	0x0800cd31
 800cd0c:	0800cd39 	.word	0x0800cd39
 800cd10:	2300      	movs	r3, #0
 800cd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd16:	e086      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd18:	2304      	movs	r3, #4
 800cd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd1e:	e082      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd20:	2308      	movs	r3, #8
 800cd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd26:	e07e      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd28:	2310      	movs	r3, #16
 800cd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2e:	e07a      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd30:	2320      	movs	r3, #32
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd36:	e076      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd38:	2340      	movs	r3, #64	@ 0x40
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3e:	e072      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd40:	2380      	movs	r3, #128	@ 0x80
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd46:	e06e      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a75      	ldr	r2, [pc, #468]	@ (800cf24 <UART_SetConfig+0x6a4>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d130      	bne.n	800cdb4 <UART_SetConfig+0x534>
 800cd52:	4b72      	ldr	r3, [pc, #456]	@ (800cf1c <UART_SetConfig+0x69c>)
 800cd54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd56:	f003 0307 	and.w	r3, r3, #7
 800cd5a:	2b05      	cmp	r3, #5
 800cd5c:	d826      	bhi.n	800cdac <UART_SetConfig+0x52c>
 800cd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd64 <UART_SetConfig+0x4e4>)
 800cd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd64:	0800cd7d 	.word	0x0800cd7d
 800cd68:	0800cd85 	.word	0x0800cd85
 800cd6c:	0800cd8d 	.word	0x0800cd8d
 800cd70:	0800cd95 	.word	0x0800cd95
 800cd74:	0800cd9d 	.word	0x0800cd9d
 800cd78:	0800cda5 	.word	0x0800cda5
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd82:	e050      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd84:	2304      	movs	r3, #4
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8a:	e04c      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd8c:	2308      	movs	r3, #8
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd92:	e048      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd94:	2310      	movs	r3, #16
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9a:	e044      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cd9c:	2320      	movs	r3, #32
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda2:	e040      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cda4:	2340      	movs	r3, #64	@ 0x40
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdaa:	e03c      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cdac:	2380      	movs	r3, #128	@ 0x80
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb2:	e038      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a5b      	ldr	r2, [pc, #364]	@ (800cf28 <UART_SetConfig+0x6a8>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d130      	bne.n	800ce20 <UART_SetConfig+0x5a0>
 800cdbe:	4b57      	ldr	r3, [pc, #348]	@ (800cf1c <UART_SetConfig+0x69c>)
 800cdc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdc2:	f003 0307 	and.w	r3, r3, #7
 800cdc6:	2b05      	cmp	r3, #5
 800cdc8:	d826      	bhi.n	800ce18 <UART_SetConfig+0x598>
 800cdca:	a201      	add	r2, pc, #4	@ (adr r2, 800cdd0 <UART_SetConfig+0x550>)
 800cdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd0:	0800cde9 	.word	0x0800cde9
 800cdd4:	0800cdf1 	.word	0x0800cdf1
 800cdd8:	0800cdf9 	.word	0x0800cdf9
 800cddc:	0800ce01 	.word	0x0800ce01
 800cde0:	0800ce09 	.word	0x0800ce09
 800cde4:	0800ce11 	.word	0x0800ce11
 800cde8:	2302      	movs	r3, #2
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdee:	e01a      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cdf0:	2304      	movs	r3, #4
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf6:	e016      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800cdf8:	2308      	movs	r3, #8
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfe:	e012      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ce00:	2310      	movs	r3, #16
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce06:	e00e      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ce08:	2320      	movs	r3, #32
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0e:	e00a      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ce10:	2340      	movs	r3, #64	@ 0x40
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce16:	e006      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ce18:	2380      	movs	r3, #128	@ 0x80
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce1e:	e002      	b.n	800ce26 <UART_SetConfig+0x5a6>
 800ce20:	2380      	movs	r3, #128	@ 0x80
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a3f      	ldr	r2, [pc, #252]	@ (800cf28 <UART_SetConfig+0x6a8>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	f040 80f8 	bne.w	800d022 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ce36:	2b20      	cmp	r3, #32
 800ce38:	dc46      	bgt.n	800cec8 <UART_SetConfig+0x648>
 800ce3a:	2b02      	cmp	r3, #2
 800ce3c:	f2c0 8082 	blt.w	800cf44 <UART_SetConfig+0x6c4>
 800ce40:	3b02      	subs	r3, #2
 800ce42:	2b1e      	cmp	r3, #30
 800ce44:	d87e      	bhi.n	800cf44 <UART_SetConfig+0x6c4>
 800ce46:	a201      	add	r2, pc, #4	@ (adr r2, 800ce4c <UART_SetConfig+0x5cc>)
 800ce48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4c:	0800cecf 	.word	0x0800cecf
 800ce50:	0800cf45 	.word	0x0800cf45
 800ce54:	0800ced7 	.word	0x0800ced7
 800ce58:	0800cf45 	.word	0x0800cf45
 800ce5c:	0800cf45 	.word	0x0800cf45
 800ce60:	0800cf45 	.word	0x0800cf45
 800ce64:	0800cee7 	.word	0x0800cee7
 800ce68:	0800cf45 	.word	0x0800cf45
 800ce6c:	0800cf45 	.word	0x0800cf45
 800ce70:	0800cf45 	.word	0x0800cf45
 800ce74:	0800cf45 	.word	0x0800cf45
 800ce78:	0800cf45 	.word	0x0800cf45
 800ce7c:	0800cf45 	.word	0x0800cf45
 800ce80:	0800cf45 	.word	0x0800cf45
 800ce84:	0800cef7 	.word	0x0800cef7
 800ce88:	0800cf45 	.word	0x0800cf45
 800ce8c:	0800cf45 	.word	0x0800cf45
 800ce90:	0800cf45 	.word	0x0800cf45
 800ce94:	0800cf45 	.word	0x0800cf45
 800ce98:	0800cf45 	.word	0x0800cf45
 800ce9c:	0800cf45 	.word	0x0800cf45
 800cea0:	0800cf45 	.word	0x0800cf45
 800cea4:	0800cf45 	.word	0x0800cf45
 800cea8:	0800cf45 	.word	0x0800cf45
 800ceac:	0800cf45 	.word	0x0800cf45
 800ceb0:	0800cf45 	.word	0x0800cf45
 800ceb4:	0800cf45 	.word	0x0800cf45
 800ceb8:	0800cf45 	.word	0x0800cf45
 800cebc:	0800cf45 	.word	0x0800cf45
 800cec0:	0800cf45 	.word	0x0800cf45
 800cec4:	0800cf37 	.word	0x0800cf37
 800cec8:	2b40      	cmp	r3, #64	@ 0x40
 800ceca:	d037      	beq.n	800cf3c <UART_SetConfig+0x6bc>
 800cecc:	e03a      	b.n	800cf44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cece:	f7fd fef5 	bl	800acbc <HAL_RCCEx_GetD3PCLK1Freq>
 800ced2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ced4:	e03c      	b.n	800cf50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ced6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fd ff04 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cee4:	e034      	b.n	800cf50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cee6:	f107 0318 	add.w	r3, r7, #24
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fe f850 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef4:	e02c      	b.n	800cf50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cef6:	4b09      	ldr	r3, [pc, #36]	@ (800cf1c <UART_SetConfig+0x69c>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 0320 	and.w	r3, r3, #32
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d016      	beq.n	800cf30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf02:	4b06      	ldr	r3, [pc, #24]	@ (800cf1c <UART_SetConfig+0x69c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	08db      	lsrs	r3, r3, #3
 800cf08:	f003 0303 	and.w	r3, r3, #3
 800cf0c:	4a07      	ldr	r2, [pc, #28]	@ (800cf2c <UART_SetConfig+0x6ac>)
 800cf0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf14:	e01c      	b.n	800cf50 <UART_SetConfig+0x6d0>
 800cf16:	bf00      	nop
 800cf18:	40011400 	.word	0x40011400
 800cf1c:	58024400 	.word	0x58024400
 800cf20:	40007800 	.word	0x40007800
 800cf24:	40007c00 	.word	0x40007c00
 800cf28:	58000c00 	.word	0x58000c00
 800cf2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cf30:	4b9d      	ldr	r3, [pc, #628]	@ (800d1a8 <UART_SetConfig+0x928>)
 800cf32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf34:	e00c      	b.n	800cf50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf36:	4b9d      	ldr	r3, [pc, #628]	@ (800d1ac <UART_SetConfig+0x92c>)
 800cf38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf3a:	e009      	b.n	800cf50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf42:	e005      	b.n	800cf50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cf44:	2300      	movs	r3, #0
 800cf46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cf4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 81de 	beq.w	800d314 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5c:	4a94      	ldr	r2, [pc, #592]	@ (800d1b0 <UART_SetConfig+0x930>)
 800cf5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf62:	461a      	mov	r2, r3
 800cf64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf66:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	685a      	ldr	r2, [r3, #4]
 800cf70:	4613      	mov	r3, r2
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	4413      	add	r3, r2
 800cf76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d305      	bcc.n	800cf88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d903      	bls.n	800cf90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cf8e:	e1c1      	b.n	800d314 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf92:	2200      	movs	r2, #0
 800cf94:	60bb      	str	r3, [r7, #8]
 800cf96:	60fa      	str	r2, [r7, #12]
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf9c:	4a84      	ldr	r2, [pc, #528]	@ (800d1b0 <UART_SetConfig+0x930>)
 800cf9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	603b      	str	r3, [r7, #0]
 800cfa8:	607a      	str	r2, [r7, #4]
 800cfaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cfb2:	f7f3 fa4d 	bl	8000450 <__aeabi_uldivmod>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	460b      	mov	r3, r1
 800cfba:	4610      	mov	r0, r2
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	f04f 0200 	mov.w	r2, #0
 800cfc2:	f04f 0300 	mov.w	r3, #0
 800cfc6:	020b      	lsls	r3, r1, #8
 800cfc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfcc:	0202      	lsls	r2, r0, #8
 800cfce:	6979      	ldr	r1, [r7, #20]
 800cfd0:	6849      	ldr	r1, [r1, #4]
 800cfd2:	0849      	lsrs	r1, r1, #1
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	4605      	mov	r5, r0
 800cfda:	eb12 0804 	adds.w	r8, r2, r4
 800cfde:	eb43 0905 	adc.w	r9, r3, r5
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	469a      	mov	sl, r3
 800cfea:	4693      	mov	fp, r2
 800cfec:	4652      	mov	r2, sl
 800cfee:	465b      	mov	r3, fp
 800cff0:	4640      	mov	r0, r8
 800cff2:	4649      	mov	r1, r9
 800cff4:	f7f3 fa2c 	bl	8000450 <__aeabi_uldivmod>
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	4613      	mov	r3, r2
 800cffe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d006:	d308      	bcc.n	800d01a <UART_SetConfig+0x79a>
 800d008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d00a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d00e:	d204      	bcs.n	800d01a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d016:	60da      	str	r2, [r3, #12]
 800d018:	e17c      	b.n	800d314 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d020:	e178      	b.n	800d314 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	69db      	ldr	r3, [r3, #28]
 800d026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d02a:	f040 80c5 	bne.w	800d1b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d02e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d032:	2b20      	cmp	r3, #32
 800d034:	dc48      	bgt.n	800d0c8 <UART_SetConfig+0x848>
 800d036:	2b00      	cmp	r3, #0
 800d038:	db7b      	blt.n	800d132 <UART_SetConfig+0x8b2>
 800d03a:	2b20      	cmp	r3, #32
 800d03c:	d879      	bhi.n	800d132 <UART_SetConfig+0x8b2>
 800d03e:	a201      	add	r2, pc, #4	@ (adr r2, 800d044 <UART_SetConfig+0x7c4>)
 800d040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d044:	0800d0cf 	.word	0x0800d0cf
 800d048:	0800d0d7 	.word	0x0800d0d7
 800d04c:	0800d133 	.word	0x0800d133
 800d050:	0800d133 	.word	0x0800d133
 800d054:	0800d0df 	.word	0x0800d0df
 800d058:	0800d133 	.word	0x0800d133
 800d05c:	0800d133 	.word	0x0800d133
 800d060:	0800d133 	.word	0x0800d133
 800d064:	0800d0ef 	.word	0x0800d0ef
 800d068:	0800d133 	.word	0x0800d133
 800d06c:	0800d133 	.word	0x0800d133
 800d070:	0800d133 	.word	0x0800d133
 800d074:	0800d133 	.word	0x0800d133
 800d078:	0800d133 	.word	0x0800d133
 800d07c:	0800d133 	.word	0x0800d133
 800d080:	0800d133 	.word	0x0800d133
 800d084:	0800d0ff 	.word	0x0800d0ff
 800d088:	0800d133 	.word	0x0800d133
 800d08c:	0800d133 	.word	0x0800d133
 800d090:	0800d133 	.word	0x0800d133
 800d094:	0800d133 	.word	0x0800d133
 800d098:	0800d133 	.word	0x0800d133
 800d09c:	0800d133 	.word	0x0800d133
 800d0a0:	0800d133 	.word	0x0800d133
 800d0a4:	0800d133 	.word	0x0800d133
 800d0a8:	0800d133 	.word	0x0800d133
 800d0ac:	0800d133 	.word	0x0800d133
 800d0b0:	0800d133 	.word	0x0800d133
 800d0b4:	0800d133 	.word	0x0800d133
 800d0b8:	0800d133 	.word	0x0800d133
 800d0bc:	0800d133 	.word	0x0800d133
 800d0c0:	0800d133 	.word	0x0800d133
 800d0c4:	0800d125 	.word	0x0800d125
 800d0c8:	2b40      	cmp	r3, #64	@ 0x40
 800d0ca:	d02e      	beq.n	800d12a <UART_SetConfig+0x8aa>
 800d0cc:	e031      	b.n	800d132 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0ce:	f7fb fdfd 	bl	8008ccc <HAL_RCC_GetPCLK1Freq>
 800d0d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d0d4:	e033      	b.n	800d13e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0d6:	f7fb fe0f 	bl	8008cf8 <HAL_RCC_GetPCLK2Freq>
 800d0da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d0dc:	e02f      	b.n	800d13e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fd fe00 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0ec:	e027      	b.n	800d13e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0ee:	f107 0318 	add.w	r3, r7, #24
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fd ff4c 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0fc:	e01f      	b.n	800d13e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0fe:	4b2d      	ldr	r3, [pc, #180]	@ (800d1b4 <UART_SetConfig+0x934>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 0320 	and.w	r3, r3, #32
 800d106:	2b00      	cmp	r3, #0
 800d108:	d009      	beq.n	800d11e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d10a:	4b2a      	ldr	r3, [pc, #168]	@ (800d1b4 <UART_SetConfig+0x934>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	08db      	lsrs	r3, r3, #3
 800d110:	f003 0303 	and.w	r3, r3, #3
 800d114:	4a24      	ldr	r2, [pc, #144]	@ (800d1a8 <UART_SetConfig+0x928>)
 800d116:	fa22 f303 	lsr.w	r3, r2, r3
 800d11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d11c:	e00f      	b.n	800d13e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d11e:	4b22      	ldr	r3, [pc, #136]	@ (800d1a8 <UART_SetConfig+0x928>)
 800d120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d122:	e00c      	b.n	800d13e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d124:	4b21      	ldr	r3, [pc, #132]	@ (800d1ac <UART_SetConfig+0x92c>)
 800d126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d128:	e009      	b.n	800d13e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d12a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d130:	e005      	b.n	800d13e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d13c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d13e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 80e7 	beq.w	800d314 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d14a:	4a19      	ldr	r2, [pc, #100]	@ (800d1b0 <UART_SetConfig+0x930>)
 800d14c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d150:	461a      	mov	r2, r3
 800d152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d154:	fbb3 f3f2 	udiv	r3, r3, r2
 800d158:	005a      	lsls	r2, r3, #1
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	085b      	lsrs	r3, r3, #1
 800d160:	441a      	add	r2, r3
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	fbb2 f3f3 	udiv	r3, r2, r3
 800d16a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d16e:	2b0f      	cmp	r3, #15
 800d170:	d916      	bls.n	800d1a0 <UART_SetConfig+0x920>
 800d172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d178:	d212      	bcs.n	800d1a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	f023 030f 	bic.w	r3, r3, #15
 800d182:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d186:	085b      	lsrs	r3, r3, #1
 800d188:	b29b      	uxth	r3, r3
 800d18a:	f003 0307 	and.w	r3, r3, #7
 800d18e:	b29a      	uxth	r2, r3
 800d190:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d192:	4313      	orrs	r3, r2
 800d194:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d19c:	60da      	str	r2, [r3, #12]
 800d19e:	e0b9      	b.n	800d314 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d1a6:	e0b5      	b.n	800d314 <UART_SetConfig+0xa94>
 800d1a8:	03d09000 	.word	0x03d09000
 800d1ac:	003d0900 	.word	0x003d0900
 800d1b0:	08023650 	.word	0x08023650
 800d1b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d1b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d1bc:	2b20      	cmp	r3, #32
 800d1be:	dc49      	bgt.n	800d254 <UART_SetConfig+0x9d4>
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	db7c      	blt.n	800d2be <UART_SetConfig+0xa3e>
 800d1c4:	2b20      	cmp	r3, #32
 800d1c6:	d87a      	bhi.n	800d2be <UART_SetConfig+0xa3e>
 800d1c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d1d0 <UART_SetConfig+0x950>)
 800d1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ce:	bf00      	nop
 800d1d0:	0800d25b 	.word	0x0800d25b
 800d1d4:	0800d263 	.word	0x0800d263
 800d1d8:	0800d2bf 	.word	0x0800d2bf
 800d1dc:	0800d2bf 	.word	0x0800d2bf
 800d1e0:	0800d26b 	.word	0x0800d26b
 800d1e4:	0800d2bf 	.word	0x0800d2bf
 800d1e8:	0800d2bf 	.word	0x0800d2bf
 800d1ec:	0800d2bf 	.word	0x0800d2bf
 800d1f0:	0800d27b 	.word	0x0800d27b
 800d1f4:	0800d2bf 	.word	0x0800d2bf
 800d1f8:	0800d2bf 	.word	0x0800d2bf
 800d1fc:	0800d2bf 	.word	0x0800d2bf
 800d200:	0800d2bf 	.word	0x0800d2bf
 800d204:	0800d2bf 	.word	0x0800d2bf
 800d208:	0800d2bf 	.word	0x0800d2bf
 800d20c:	0800d2bf 	.word	0x0800d2bf
 800d210:	0800d28b 	.word	0x0800d28b
 800d214:	0800d2bf 	.word	0x0800d2bf
 800d218:	0800d2bf 	.word	0x0800d2bf
 800d21c:	0800d2bf 	.word	0x0800d2bf
 800d220:	0800d2bf 	.word	0x0800d2bf
 800d224:	0800d2bf 	.word	0x0800d2bf
 800d228:	0800d2bf 	.word	0x0800d2bf
 800d22c:	0800d2bf 	.word	0x0800d2bf
 800d230:	0800d2bf 	.word	0x0800d2bf
 800d234:	0800d2bf 	.word	0x0800d2bf
 800d238:	0800d2bf 	.word	0x0800d2bf
 800d23c:	0800d2bf 	.word	0x0800d2bf
 800d240:	0800d2bf 	.word	0x0800d2bf
 800d244:	0800d2bf 	.word	0x0800d2bf
 800d248:	0800d2bf 	.word	0x0800d2bf
 800d24c:	0800d2bf 	.word	0x0800d2bf
 800d250:	0800d2b1 	.word	0x0800d2b1
 800d254:	2b40      	cmp	r3, #64	@ 0x40
 800d256:	d02e      	beq.n	800d2b6 <UART_SetConfig+0xa36>
 800d258:	e031      	b.n	800d2be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d25a:	f7fb fd37 	bl	8008ccc <HAL_RCC_GetPCLK1Freq>
 800d25e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d260:	e033      	b.n	800d2ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d262:	f7fb fd49 	bl	8008cf8 <HAL_RCC_GetPCLK2Freq>
 800d266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d268:	e02f      	b.n	800d2ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d26a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fd fd3a 	bl	800ace8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d278:	e027      	b.n	800d2ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d27a:	f107 0318 	add.w	r3, r7, #24
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fd fe86 	bl	800af90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d288:	e01f      	b.n	800d2ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d28a:	4b2d      	ldr	r3, [pc, #180]	@ (800d340 <UART_SetConfig+0xac0>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 0320 	and.w	r3, r3, #32
 800d292:	2b00      	cmp	r3, #0
 800d294:	d009      	beq.n	800d2aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d296:	4b2a      	ldr	r3, [pc, #168]	@ (800d340 <UART_SetConfig+0xac0>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	08db      	lsrs	r3, r3, #3
 800d29c:	f003 0303 	and.w	r3, r3, #3
 800d2a0:	4a28      	ldr	r2, [pc, #160]	@ (800d344 <UART_SetConfig+0xac4>)
 800d2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2a8:	e00f      	b.n	800d2ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d2aa:	4b26      	ldr	r3, [pc, #152]	@ (800d344 <UART_SetConfig+0xac4>)
 800d2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2ae:	e00c      	b.n	800d2ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2b0:	4b25      	ldr	r3, [pc, #148]	@ (800d348 <UART_SetConfig+0xac8>)
 800d2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2b4:	e009      	b.n	800d2ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2bc:	e005      	b.n	800d2ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d2c8:	bf00      	nop
    }

    if (pclk != 0U)
 800d2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d021      	beq.n	800d314 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d4:	4a1d      	ldr	r2, [pc, #116]	@ (800d34c <UART_SetConfig+0xacc>)
 800d2d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2de:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	085b      	lsrs	r3, r3, #1
 800d2e8:	441a      	add	r2, r3
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f6:	2b0f      	cmp	r3, #15
 800d2f8:	d909      	bls.n	800d30e <UART_SetConfig+0xa8e>
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d300:	d205      	bcs.n	800d30e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d304:	b29a      	uxth	r2, r3
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	60da      	str	r2, [r3, #12]
 800d30c:	e002      	b.n	800d314 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	2201      	movs	r2, #1
 800d318:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2201      	movs	r2, #1
 800d320:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2200      	movs	r2, #0
 800d328:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	2200      	movs	r2, #0
 800d32e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d330:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d334:	4618      	mov	r0, r3
 800d336:	3748      	adds	r7, #72	@ 0x48
 800d338:	46bd      	mov	sp, r7
 800d33a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d33e:	bf00      	nop
 800d340:	58024400 	.word	0x58024400
 800d344:	03d09000 	.word	0x03d09000
 800d348:	003d0900 	.word	0x003d0900
 800d34c:	08023650 	.word	0x08023650

0800d350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d35c:	f003 0308 	and.w	r3, r3, #8
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00a      	beq.n	800d37a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	430a      	orrs	r2, r1
 800d378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d37e:	f003 0301 	and.w	r3, r3, #1
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00a      	beq.n	800d39c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	430a      	orrs	r2, r1
 800d39a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a0:	f003 0302 	and.w	r3, r3, #2
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00a      	beq.n	800d3be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	430a      	orrs	r2, r1
 800d3bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3c2:	f003 0304 	and.w	r3, r3, #4
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00a      	beq.n	800d3e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	430a      	orrs	r2, r1
 800d3de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e4:	f003 0310 	and.w	r3, r3, #16
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00a      	beq.n	800d402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	430a      	orrs	r2, r1
 800d400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d406:	f003 0320 	and.w	r3, r3, #32
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d00a      	beq.n	800d424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	430a      	orrs	r2, r1
 800d422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d01a      	beq.n	800d466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	430a      	orrs	r2, r1
 800d444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d44a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d44e:	d10a      	bne.n	800d466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	430a      	orrs	r2, r1
 800d464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d46a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00a      	beq.n	800d488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	430a      	orrs	r2, r1
 800d486:	605a      	str	r2, [r3, #4]
  }
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b098      	sub	sp, #96	@ 0x60
 800d498:	af02      	add	r7, sp, #8
 800d49a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4a4:	f7f5 ffe0 	bl	8003468 <HAL_GetTick>
 800d4a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 0308 	and.w	r3, r3, #8
 800d4b4:	2b08      	cmp	r3, #8
 800d4b6:	d12f      	bne.n	800d518 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f88e 	bl	800d5e8 <UART_WaitOnFlagUntilTimeout>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d022      	beq.n	800d518 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4da:	e853 3f00 	ldrex	r3, [r3]
 800d4de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4f8:	e841 2300 	strex	r3, r2, [r1]
 800d4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1e6      	bne.n	800d4d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2220      	movs	r2, #32
 800d508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	e063      	b.n	800d5e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f003 0304 	and.w	r3, r3, #4
 800d522:	2b04      	cmp	r3, #4
 800d524:	d149      	bne.n	800d5ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d526:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d52a:	9300      	str	r3, [sp, #0]
 800d52c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d52e:	2200      	movs	r2, #0
 800d530:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 f857 	bl	800d5e8 <UART_WaitOnFlagUntilTimeout>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d03c      	beq.n	800d5ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d548:	e853 3f00 	ldrex	r3, [r3]
 800d54c:	623b      	str	r3, [r7, #32]
   return(result);
 800d54e:	6a3b      	ldr	r3, [r7, #32]
 800d550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d55e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d560:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e6      	bne.n	800d540 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3308      	adds	r3, #8
 800d578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	e853 3f00 	ldrex	r3, [r3]
 800d580:	60fb      	str	r3, [r7, #12]
   return(result);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f023 0301 	bic.w	r3, r3, #1
 800d588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	3308      	adds	r3, #8
 800d590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d592:	61fa      	str	r2, [r7, #28]
 800d594:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d596:	69b9      	ldr	r1, [r7, #24]
 800d598:	69fa      	ldr	r2, [r7, #28]
 800d59a:	e841 2300 	strex	r3, r2, [r1]
 800d59e:	617b      	str	r3, [r7, #20]
   return(result);
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1e5      	bne.n	800d572 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2220      	movs	r2, #32
 800d5aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	e012      	b.n	800d5e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2220      	movs	r2, #32
 800d5be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2220      	movs	r2, #32
 800d5c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3758      	adds	r7, #88	@ 0x58
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	603b      	str	r3, [r7, #0]
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5f8:	e04f      	b.n	800d69a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d600:	d04b      	beq.n	800d69a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d602:	f7f5 ff31 	bl	8003468 <HAL_GetTick>
 800d606:	4602      	mov	r2, r0
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	69ba      	ldr	r2, [r7, #24]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d302      	bcc.n	800d618 <UART_WaitOnFlagUntilTimeout+0x30>
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d101      	bne.n	800d61c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d618:	2303      	movs	r3, #3
 800d61a:	e04e      	b.n	800d6ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f003 0304 	and.w	r3, r3, #4
 800d626:	2b00      	cmp	r3, #0
 800d628:	d037      	beq.n	800d69a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2b80      	cmp	r3, #128	@ 0x80
 800d62e:	d034      	beq.n	800d69a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	2b40      	cmp	r3, #64	@ 0x40
 800d634:	d031      	beq.n	800d69a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	69db      	ldr	r3, [r3, #28]
 800d63c:	f003 0308 	and.w	r3, r3, #8
 800d640:	2b08      	cmp	r3, #8
 800d642:	d110      	bne.n	800d666 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2208      	movs	r2, #8
 800d64a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f000 f921 	bl	800d894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2208      	movs	r2, #8
 800d656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	e029      	b.n	800d6ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	69db      	ldr	r3, [r3, #28]
 800d66c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d674:	d111      	bne.n	800d69a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d67e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f000 f907 	bl	800d894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2220      	movs	r2, #32
 800d68a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d696:	2303      	movs	r3, #3
 800d698:	e00f      	b.n	800d6ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	69da      	ldr	r2, [r3, #28]
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	bf0c      	ite	eq
 800d6aa:	2301      	moveq	r3, #1
 800d6ac:	2300      	movne	r3, #0
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	79fb      	ldrb	r3, [r7, #7]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d0a0      	beq.n	800d5fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
	...

0800d6c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b096      	sub	sp, #88	@ 0x58
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	88fa      	ldrh	r2, [r7, #6]
 800d6dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2222      	movs	r2, #34	@ 0x22
 800d6ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d02d      	beq.n	800d756 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d700:	4a40      	ldr	r2, [pc, #256]	@ (800d804 <UART_Start_Receive_DMA+0x140>)
 800d702:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d70a:	4a3f      	ldr	r2, [pc, #252]	@ (800d808 <UART_Start_Receive_DMA+0x144>)
 800d70c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d714:	4a3d      	ldr	r2, [pc, #244]	@ (800d80c <UART_Start_Receive_DMA+0x148>)
 800d716:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d71e:	2200      	movs	r2, #0
 800d720:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	3324      	adds	r3, #36	@ 0x24
 800d72e:	4619      	mov	r1, r3
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d734:	461a      	mov	r2, r3
 800d736:	88fb      	ldrh	r3, [r7, #6]
 800d738:	f7f7 fe04 	bl	8005344 <HAL_DMA_Start_IT>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d009      	beq.n	800d756 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2210      	movs	r2, #16
 800d746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2220      	movs	r2, #32
 800d74e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e051      	b.n	800d7fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d018      	beq.n	800d790 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d766:	e853 3f00 	ldrex	r3, [r3]
 800d76a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d772:	657b      	str	r3, [r7, #84]	@ 0x54
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	461a      	mov	r2, r3
 800d77a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d77c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d77e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d780:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d784:	e841 2300 	strex	r3, r2, [r1]
 800d788:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d78a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d1e6      	bne.n	800d75e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	3308      	adds	r3, #8
 800d796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79a:	e853 3f00 	ldrex	r3, [r3]
 800d79e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a2:	f043 0301 	orr.w	r3, r3, #1
 800d7a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	3308      	adds	r3, #8
 800d7ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d7b0:	637a      	str	r2, [r7, #52]	@ 0x34
 800d7b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d7b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7b8:	e841 2300 	strex	r3, r2, [r1]
 800d7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1e5      	bne.n	800d790 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	e853 3f00 	ldrex	r3, [r3]
 800d7d2:	613b      	str	r3, [r7, #16]
   return(result);
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d7e4:	623a      	str	r2, [r7, #32]
 800d7e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e8:	69f9      	ldr	r1, [r7, #28]
 800d7ea:	6a3a      	ldr	r2, [r7, #32]
 800d7ec:	e841 2300 	strex	r3, r2, [r1]
 800d7f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e5      	bne.n	800d7c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3758      	adds	r7, #88	@ 0x58
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	0800da13 	.word	0x0800da13
 800d808:	0800db3b 	.word	0x0800db3b
 800d80c:	0800db79 	.word	0x0800db79

0800d810 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d810:	b480      	push	{r7}
 800d812:	b08f      	sub	sp, #60	@ 0x3c
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	e853 3f00 	ldrex	r3, [r3]
 800d824:	61fb      	str	r3, [r7, #28]
   return(result);
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d82c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d838:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d83c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d83e:	e841 2300 	strex	r3, r2, [r1]
 800d842:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e6      	bne.n	800d818 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3308      	adds	r3, #8
 800d850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	60bb      	str	r3, [r7, #8]
   return(result);
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d860:	633b      	str	r3, [r7, #48]	@ 0x30
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3308      	adds	r3, #8
 800d868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d86a:	61ba      	str	r2, [r7, #24]
 800d86c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	6979      	ldr	r1, [r7, #20]
 800d870:	69ba      	ldr	r2, [r7, #24]
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	613b      	str	r3, [r7, #16]
   return(result);
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e5      	bne.n	800d84a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2220      	movs	r2, #32
 800d882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d886:	bf00      	nop
 800d888:	373c      	adds	r7, #60	@ 0x3c
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
	...

0800d894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d894:	b480      	push	{r7}
 800d896:	b095      	sub	sp, #84	@ 0x54
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a4:	e853 3f00 	ldrex	r3, [r3]
 800d8a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d8c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d8c2:	e841 2300 	strex	r3, r2, [r1]
 800d8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1e6      	bne.n	800d89c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3308      	adds	r3, #8
 800d8d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	e853 3f00 	ldrex	r3, [r3]
 800d8dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8de:	69fa      	ldr	r2, [r7, #28]
 800d8e0:	4b1e      	ldr	r3, [pc, #120]	@ (800d95c <UART_EndRxTransfer+0xc8>)
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d8f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8f6:	e841 2300 	strex	r3, r2, [r1]
 800d8fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1e5      	bne.n	800d8ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d906:	2b01      	cmp	r3, #1
 800d908:	d118      	bne.n	800d93c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	e853 3f00 	ldrex	r3, [r3]
 800d916:	60bb      	str	r3, [r7, #8]
   return(result);
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	f023 0310 	bic.w	r3, r3, #16
 800d91e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	461a      	mov	r2, r3
 800d926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d928:	61bb      	str	r3, [r7, #24]
 800d92a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92c:	6979      	ldr	r1, [r7, #20]
 800d92e:	69ba      	ldr	r2, [r7, #24]
 800d930:	e841 2300 	strex	r3, r2, [r1]
 800d934:	613b      	str	r3, [r7, #16]
   return(result);
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1e6      	bne.n	800d90a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2220      	movs	r2, #32
 800d940:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d950:	bf00      	nop
 800d952:	3754      	adds	r7, #84	@ 0x54
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	effffffe 	.word	0xeffffffe

0800d960 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b090      	sub	sp, #64	@ 0x40
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d96c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d976:	d037      	beq.n	800d9e8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d97a:	2200      	movs	r2, #0
 800d97c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	3308      	adds	r3, #8
 800d986:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98a:	e853 3f00 	ldrex	r3, [r3]
 800d98e:	623b      	str	r3, [r7, #32]
   return(result);
 800d990:	6a3b      	ldr	r3, [r7, #32]
 800d992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d996:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3308      	adds	r3, #8
 800d99e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d9a0:	633a      	str	r2, [r7, #48]	@ 0x30
 800d9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9a8:	e841 2300 	strex	r3, r2, [r1]
 800d9ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d1e5      	bne.n	800d980 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	e853 3f00 	ldrex	r3, [r3]
 800d9c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d2:	61fb      	str	r3, [r7, #28]
 800d9d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d6:	69b9      	ldr	r1, [r7, #24]
 800d9d8:	69fa      	ldr	r2, [r7, #28]
 800d9da:	e841 2300 	strex	r3, r2, [r1]
 800d9de:	617b      	str	r3, [r7, #20]
   return(result);
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1e6      	bne.n	800d9b4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9e6:	e002      	b.n	800d9ee <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d9e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d9ea:	f7fe ff15 	bl	800c818 <HAL_UART_TxCpltCallback>
}
 800d9ee:	bf00      	nop
 800d9f0:	3740      	adds	r7, #64	@ 0x40
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b084      	sub	sp, #16
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da02:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f7fe ff11 	bl	800c82c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da0a:	bf00      	nop
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b09c      	sub	sp, #112	@ 0x70
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	69db      	ldr	r3, [r3, #28]
 800da24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da28:	d071      	beq.n	800db0e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800da2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da2c:	2200      	movs	r2, #0
 800da2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da3a:	e853 3f00 	ldrex	r3, [r3]
 800da3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800da40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da46:	66bb      	str	r3, [r7, #104]	@ 0x68
 800da48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	461a      	mov	r2, r3
 800da4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da50:	65bb      	str	r3, [r7, #88]	@ 0x58
 800da52:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800da56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da58:	e841 2300 	strex	r3, r2, [r1]
 800da5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800da5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1e6      	bne.n	800da32 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3308      	adds	r3, #8
 800da6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da6e:	e853 3f00 	ldrex	r3, [r3]
 800da72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da76:	f023 0301 	bic.w	r3, r3, #1
 800da7a:	667b      	str	r3, [r7, #100]	@ 0x64
 800da7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3308      	adds	r3, #8
 800da82:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800da84:	647a      	str	r2, [r7, #68]	@ 0x44
 800da86:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da8c:	e841 2300 	strex	r3, r2, [r1]
 800da90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1e5      	bne.n	800da64 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3308      	adds	r3, #8
 800da9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa2:	e853 3f00 	ldrex	r3, [r3]
 800daa6:	623b      	str	r3, [r7, #32]
   return(result);
 800daa8:	6a3b      	ldr	r3, [r7, #32]
 800daaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800daae:	663b      	str	r3, [r7, #96]	@ 0x60
 800dab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	3308      	adds	r3, #8
 800dab6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dab8:	633a      	str	r2, [r7, #48]	@ 0x30
 800daba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dabc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dabe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dac0:	e841 2300 	strex	r3, r2, [r1]
 800dac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1e5      	bne.n	800da98 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dacc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dace:	2220      	movs	r2, #32
 800dad0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d118      	bne.n	800db0e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dadc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	e853 3f00 	ldrex	r3, [r3]
 800dae8:	60fb      	str	r3, [r7, #12]
   return(result);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f023 0310 	bic.w	r3, r3, #16
 800daf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800daf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dafa:	61fb      	str	r3, [r7, #28]
 800dafc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafe:	69b9      	ldr	r1, [r7, #24]
 800db00:	69fa      	ldr	r2, [r7, #28]
 800db02:	e841 2300 	strex	r3, r2, [r1]
 800db06:	617b      	str	r3, [r7, #20]
   return(result);
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1e6      	bne.n	800dadc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db10:	2200      	movs	r2, #0
 800db12:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d107      	bne.n	800db2c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db22:	4619      	mov	r1, r3
 800db24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800db26:	f7fe fe9f 	bl	800c868 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db2a:	e002      	b.n	800db32 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800db2c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800db2e:	f7f3 fe97 	bl	8001860 <HAL_UART_RxCpltCallback>
}
 800db32:	bf00      	nop
 800db34:	3770      	adds	r7, #112	@ 0x70
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b084      	sub	sp, #16
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db46:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2201      	movs	r2, #1
 800db4c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db52:	2b01      	cmp	r3, #1
 800db54:	d109      	bne.n	800db6a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db5c:	085b      	lsrs	r3, r3, #1
 800db5e:	b29b      	uxth	r3, r3
 800db60:	4619      	mov	r1, r3
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	f7fe fe80 	bl	800c868 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db68:	e002      	b.n	800db70 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f7fe fe68 	bl	800c840 <HAL_UART_RxHalfCpltCallback>
}
 800db70:	bf00      	nop
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db84:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db8c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800db94:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dba0:	2b80      	cmp	r3, #128	@ 0x80
 800dba2:	d109      	bne.n	800dbb8 <UART_DMAError+0x40>
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	2b21      	cmp	r3, #33	@ 0x21
 800dba8:	d106      	bne.n	800dbb8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dbb2:	6978      	ldr	r0, [r7, #20]
 800dbb4:	f7ff fe2c 	bl	800d810 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbc2:	2b40      	cmp	r3, #64	@ 0x40
 800dbc4:	d109      	bne.n	800dbda <UART_DMAError+0x62>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b22      	cmp	r3, #34	@ 0x22
 800dbca:	d106      	bne.n	800dbda <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dbd4:	6978      	ldr	r0, [r7, #20]
 800dbd6:	f7ff fe5d 	bl	800d894 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbe0:	f043 0210 	orr.w	r2, r3, #16
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbea:	6978      	ldr	r0, [r7, #20]
 800dbec:	f7fe fe32 	bl	800c854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbf0:	bf00      	nop
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f7fe fe1c 	bl	800c854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc1c:	bf00      	nop
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	e853 3f00 	ldrex	r3, [r3]
 800dc38:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc40:	61fb      	str	r3, [r7, #28]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	461a      	mov	r2, r3
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	61bb      	str	r3, [r7, #24]
 800dc4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4e:	6979      	ldr	r1, [r7, #20]
 800dc50:	69ba      	ldr	r2, [r7, #24]
 800dc52:	e841 2300 	strex	r3, r2, [r1]
 800dc56:	613b      	str	r3, [r7, #16]
   return(result);
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1e6      	bne.n	800dc2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2220      	movs	r2, #32
 800dc62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7fe fdd3 	bl	800c818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc72:	bf00      	nop
 800dc74:	3720      	adds	r7, #32
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b083      	sub	sp, #12
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc82:	bf00      	nop
 800dc84:	370c      	adds	r7, #12
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc96:	bf00      	nop
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr

0800dca2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dca2:	b480      	push	{r7}
 800dca4:	b083      	sub	sp, #12
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dcaa:	bf00      	nop
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b085      	sub	sp, #20
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d101      	bne.n	800dccc <HAL_UARTEx_DisableFifoMode+0x16>
 800dcc8:	2302      	movs	r3, #2
 800dcca:	e027      	b.n	800dd1c <HAL_UARTEx_DisableFifoMode+0x66>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2224      	movs	r2, #36	@ 0x24
 800dcd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f022 0201 	bic.w	r2, r2, #1
 800dcf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dcfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2220      	movs	r2, #32
 800dd0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3714      	adds	r7, #20
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d101      	bne.n	800dd40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	e02d      	b.n	800dd9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2201      	movs	r2, #1
 800dd44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2224      	movs	r2, #36	@ 0x24
 800dd4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f022 0201 	bic.w	r2, r2, #1
 800dd66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	430a      	orrs	r2, r1
 800dd7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f84f 	bl	800de20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2220      	movs	r2, #32
 800dd8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d101      	bne.n	800ddbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddb8:	2302      	movs	r3, #2
 800ddba:	e02d      	b.n	800de18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2224      	movs	r2, #36	@ 0x24
 800ddc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f022 0201 	bic.w	r2, r2, #1
 800dde2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	430a      	orrs	r2, r1
 800ddf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f811 	bl	800de20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2220      	movs	r2, #32
 800de0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d108      	bne.n	800de42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de40:	e031      	b.n	800dea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de42:	2310      	movs	r3, #16
 800de44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de46:	2310      	movs	r3, #16
 800de48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	0e5b      	lsrs	r3, r3, #25
 800de52:	b2db      	uxtb	r3, r3
 800de54:	f003 0307 	and.w	r3, r3, #7
 800de58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	689b      	ldr	r3, [r3, #8]
 800de60:	0f5b      	lsrs	r3, r3, #29
 800de62:	b2db      	uxtb	r3, r3
 800de64:	f003 0307 	and.w	r3, r3, #7
 800de68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de6a:	7bbb      	ldrb	r3, [r7, #14]
 800de6c:	7b3a      	ldrb	r2, [r7, #12]
 800de6e:	4911      	ldr	r1, [pc, #68]	@ (800deb4 <UARTEx_SetNbDataToProcess+0x94>)
 800de70:	5c8a      	ldrb	r2, [r1, r2]
 800de72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de76:	7b3a      	ldrb	r2, [r7, #12]
 800de78:	490f      	ldr	r1, [pc, #60]	@ (800deb8 <UARTEx_SetNbDataToProcess+0x98>)
 800de7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800de80:	b29a      	uxth	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de88:	7bfb      	ldrb	r3, [r7, #15]
 800de8a:	7b7a      	ldrb	r2, [r7, #13]
 800de8c:	4909      	ldr	r1, [pc, #36]	@ (800deb4 <UARTEx_SetNbDataToProcess+0x94>)
 800de8e:	5c8a      	ldrb	r2, [r1, r2]
 800de90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de94:	7b7a      	ldrb	r2, [r7, #13]
 800de96:	4908      	ldr	r1, [pc, #32]	@ (800deb8 <UARTEx_SetNbDataToProcess+0x98>)
 800de98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dea6:	bf00      	nop
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	08023668 	.word	0x08023668
 800deb8:	08023670 	.word	0x08023670

0800debc <__NVIC_SetPriority>:
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	4603      	mov	r3, r0
 800dec4:	6039      	str	r1, [r7, #0]
 800dec6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800decc:	2b00      	cmp	r3, #0
 800dece:	db0a      	blt.n	800dee6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	490c      	ldr	r1, [pc, #48]	@ (800df08 <__NVIC_SetPriority+0x4c>)
 800ded6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800deda:	0112      	lsls	r2, r2, #4
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	440b      	add	r3, r1
 800dee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800dee4:	e00a      	b.n	800defc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	4908      	ldr	r1, [pc, #32]	@ (800df0c <__NVIC_SetPriority+0x50>)
 800deec:	88fb      	ldrh	r3, [r7, #6]
 800deee:	f003 030f 	and.w	r3, r3, #15
 800def2:	3b04      	subs	r3, #4
 800def4:	0112      	lsls	r2, r2, #4
 800def6:	b2d2      	uxtb	r2, r2
 800def8:	440b      	add	r3, r1
 800defa:	761a      	strb	r2, [r3, #24]
}
 800defc:	bf00      	nop
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr
 800df08:	e000e100 	.word	0xe000e100
 800df0c:	e000ed00 	.word	0xe000ed00

0800df10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800df10:	b580      	push	{r7, lr}
 800df12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800df14:	4b05      	ldr	r3, [pc, #20]	@ (800df2c <SysTick_Handler+0x1c>)
 800df16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800df18:	f002 f9c0 	bl	801029c <xTaskGetSchedulerState>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d001      	beq.n	800df26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800df22:	f003 fac1 	bl	80114a8 <xPortSysTickHandler>
  }
}
 800df26:	bf00      	nop
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	e000e010 	.word	0xe000e010

0800df30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800df30:	b580      	push	{r7, lr}
 800df32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800df34:	2100      	movs	r1, #0
 800df36:	f06f 0004 	mvn.w	r0, #4
 800df3a:	f7ff ffbf 	bl	800debc <__NVIC_SetPriority>
#endif
}
 800df3e:	bf00      	nop
 800df40:	bd80      	pop	{r7, pc}
	...

0800df44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df4a:	f3ef 8305 	mrs	r3, IPSR
 800df4e:	603b      	str	r3, [r7, #0]
  return(result);
 800df50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df52:	2b00      	cmp	r3, #0
 800df54:	d003      	beq.n	800df5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800df56:	f06f 0305 	mvn.w	r3, #5
 800df5a:	607b      	str	r3, [r7, #4]
 800df5c:	e00c      	b.n	800df78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800df5e:	4b0a      	ldr	r3, [pc, #40]	@ (800df88 <osKernelInitialize+0x44>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d105      	bne.n	800df72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800df66:	4b08      	ldr	r3, [pc, #32]	@ (800df88 <osKernelInitialize+0x44>)
 800df68:	2201      	movs	r2, #1
 800df6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800df6c:	2300      	movs	r3, #0
 800df6e:	607b      	str	r3, [r7, #4]
 800df70:	e002      	b.n	800df78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800df72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800df78:	687b      	ldr	r3, [r7, #4]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	24032ebc 	.word	0x24032ebc

0800df8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df92:	f3ef 8305 	mrs	r3, IPSR
 800df96:	603b      	str	r3, [r7, #0]
  return(result);
 800df98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d003      	beq.n	800dfa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800df9e:	f06f 0305 	mvn.w	r3, #5
 800dfa2:	607b      	str	r3, [r7, #4]
 800dfa4:	e010      	b.n	800dfc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dfa6:	4b0b      	ldr	r3, [pc, #44]	@ (800dfd4 <osKernelStart+0x48>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d109      	bne.n	800dfc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dfae:	f7ff ffbf 	bl	800df30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dfb2:	4b08      	ldr	r3, [pc, #32]	@ (800dfd4 <osKernelStart+0x48>)
 800dfb4:	2202      	movs	r2, #2
 800dfb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dfb8:	f001 fcc2 	bl	800f940 <vTaskStartScheduler>
      stat = osOK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	607b      	str	r3, [r7, #4]
 800dfc0:	e002      	b.n	800dfc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dfc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dfc8:	687b      	ldr	r3, [r7, #4]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	24032ebc 	.word	0x24032ebc

0800dfd8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfde:	f3ef 8305 	mrs	r3, IPSR
 800dfe2:	603b      	str	r3, [r7, #0]
  return(result);
 800dfe4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800dfea:	f001 fdd5 	bl	800fb98 <xTaskGetTickCountFromISR>
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	e002      	b.n	800dff8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800dff2:	f001 fdc1 	bl	800fb78 <xTaskGetTickCount>
 800dff6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800dff8:	687b      	ldr	r3, [r7, #4]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e002:	b580      	push	{r7, lr}
 800e004:	b08e      	sub	sp, #56	@ 0x38
 800e006:	af04      	add	r7, sp, #16
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	60b9      	str	r1, [r7, #8]
 800e00c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e00e:	2300      	movs	r3, #0
 800e010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e012:	f3ef 8305 	mrs	r3, IPSR
 800e016:	617b      	str	r3, [r7, #20]
  return(result);
 800e018:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d17e      	bne.n	800e11c <osThreadNew+0x11a>
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d07b      	beq.n	800e11c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e024:	2380      	movs	r3, #128	@ 0x80
 800e026:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e028:	2318      	movs	r3, #24
 800e02a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e02c:	2300      	movs	r3, #0
 800e02e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e034:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d045      	beq.n	800e0c8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <osThreadNew+0x48>
        name = attr->name;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	699b      	ldr	r3, [r3, #24]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d002      	beq.n	800e058 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	699b      	ldr	r3, [r3, #24]
 800e056:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d008      	beq.n	800e070 <osThreadNew+0x6e>
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	2b38      	cmp	r3, #56	@ 0x38
 800e062:	d805      	bhi.n	800e070 <osThreadNew+0x6e>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	f003 0301 	and.w	r3, r3, #1
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d001      	beq.n	800e074 <osThreadNew+0x72>
        return (NULL);
 800e070:	2300      	movs	r3, #0
 800e072:	e054      	b.n	800e11e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d003      	beq.n	800e084 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	089b      	lsrs	r3, r3, #2
 800e082:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00e      	beq.n	800e0aa <osThreadNew+0xa8>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	2ba7      	cmp	r3, #167	@ 0xa7
 800e092:	d90a      	bls.n	800e0aa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d006      	beq.n	800e0aa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	695b      	ldr	r3, [r3, #20]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d002      	beq.n	800e0aa <osThreadNew+0xa8>
        mem = 1;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	61bb      	str	r3, [r7, #24]
 800e0a8:	e010      	b.n	800e0cc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10c      	bne.n	800e0cc <osThreadNew+0xca>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d108      	bne.n	800e0cc <osThreadNew+0xca>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d104      	bne.n	800e0cc <osThreadNew+0xca>
          mem = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	61bb      	str	r3, [r7, #24]
 800e0c6:	e001      	b.n	800e0cc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d110      	bne.n	800e0f4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0da:	9202      	str	r2, [sp, #8]
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	6a3a      	ldr	r2, [r7, #32]
 800e0e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f001 fa35 	bl	800f558 <xTaskCreateStatic>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	613b      	str	r3, [r7, #16]
 800e0f2:	e013      	b.n	800e11c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d110      	bne.n	800e11c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e0fa:	6a3b      	ldr	r3, [r7, #32]
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	f107 0310 	add.w	r3, r7, #16
 800e102:	9301      	str	r3, [sp, #4]
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f001 fa83 	bl	800f618 <xTaskCreate>
 800e112:	4603      	mov	r3, r0
 800e114:	2b01      	cmp	r3, #1
 800e116:	d001      	beq.n	800e11c <osThreadNew+0x11a>
            hTask = NULL;
 800e118:	2300      	movs	r3, #0
 800e11a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e11c:	693b      	ldr	r3, [r7, #16]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3728      	adds	r7, #40	@ 0x28
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e128:	b580      	push	{r7, lr}
 800e12a:	b088      	sub	sp, #32
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <osThreadFlagsSet+0x1a>
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	da03      	bge.n	800e14a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e142:	f06f 0303 	mvn.w	r3, #3
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	e035      	b.n	800e1b6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800e14a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e14e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e150:	f3ef 8305 	mrs	r3, IPSR
 800e154:	613b      	str	r3, [r7, #16]
  return(result);
 800e156:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d01f      	beq.n	800e19c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800e15c:	2300      	movs	r3, #0
 800e15e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e160:	f107 0308 	add.w	r3, r7, #8
 800e164:	9300      	str	r3, [sp, #0]
 800e166:	2300      	movs	r3, #0
 800e168:	2201      	movs	r2, #1
 800e16a:	6839      	ldr	r1, [r7, #0]
 800e16c:	6978      	ldr	r0, [r7, #20]
 800e16e:	f002 fb45 	bl	80107fc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e172:	f107 030c 	add.w	r3, r7, #12
 800e176:	2200      	movs	r2, #0
 800e178:	9200      	str	r2, [sp, #0]
 800e17a:	2200      	movs	r2, #0
 800e17c:	2100      	movs	r1, #0
 800e17e:	6978      	ldr	r0, [r7, #20]
 800e180:	f002 fb3c 	bl	80107fc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d015      	beq.n	800e1b6 <osThreadFlagsSet+0x8e>
 800e18a:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c0 <osThreadFlagsSet+0x98>)
 800e18c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e190:	601a      	str	r2, [r3, #0]
 800e192:	f3bf 8f4f 	dsb	sy
 800e196:	f3bf 8f6f 	isb	sy
 800e19a:	e00c      	b.n	800e1b6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e19c:	2300      	movs	r3, #0
 800e19e:	2201      	movs	r2, #1
 800e1a0:	6839      	ldr	r1, [r7, #0]
 800e1a2:	6978      	ldr	r0, [r7, #20]
 800e1a4:	f002 fa68 	bl	8010678 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e1a8:	f107 030c 	add.w	r3, r7, #12
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	2100      	movs	r1, #0
 800e1b0:	6978      	ldr	r0, [r7, #20]
 800e1b2:	f002 fa61 	bl	8010678 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3718      	adds	r7, #24
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	e000ed04 	.word	0xe000ed04

0800e1c4 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1ca:	f3ef 8305 	mrs	r3, IPSR
 800e1ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1d0:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d003      	beq.n	800e1de <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800e1d6:	f06f 0305 	mvn.w	r3, #5
 800e1da:	607b      	str	r3, [r7, #4]
 800e1dc:	e00e      	b.n	800e1fc <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800e1de:	f002 f84d 	bl	801027c <xTaskGetCurrentTaskHandle>
 800e1e2:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800e1e4:	1d3b      	adds	r3, r7, #4
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f002 fa44 	bl	8010678 <xTaskGenericNotify>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d002      	beq.n	800e1fc <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800e1f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800e1fc:	687b      	ldr	r3, [r7, #4]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e206:	b580      	push	{r7, lr}
 800e208:	b08c      	sub	sp, #48	@ 0x30
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	60f8      	str	r0, [r7, #12]
 800e20e:	60b9      	str	r1, [r7, #8]
 800e210:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e212:	f3ef 8305 	mrs	r3, IPSR
 800e216:	617b      	str	r3, [r7, #20]
  return(result);
 800e218:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d003      	beq.n	800e226 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800e21e:	f06f 0305 	mvn.w	r3, #5
 800e222:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e224:	e06b      	b.n	800e2fe <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	da03      	bge.n	800e234 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800e22c:	f06f 0303 	mvn.w	r3, #3
 800e230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e232:	e064      	b.n	800e2fe <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	f003 0302 	and.w	r3, r3, #2
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d002      	beq.n	800e244 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800e23e:	2300      	movs	r3, #0
 800e240:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e242:	e001      	b.n	800e248 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800e248:	2300      	movs	r3, #0
 800e24a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800e250:	f001 fc92 	bl	800fb78 <xTaskGetTickCount>
 800e254:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e256:	f107 0210 	add.w	r2, r7, #16
 800e25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e25e:	2000      	movs	r0, #0
 800e260:	f002 f9aa 	bl	80105b8 <xTaskNotifyWait>
 800e264:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d137      	bne.n	800e2dc <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800e26c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	4013      	ands	r3, r2
 800e272:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e278:	4313      	orrs	r3, r2
 800e27a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	f003 0301 	and.w	r3, r3, #1
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00c      	beq.n	800e2a0 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28a:	4013      	ands	r3, r2
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d032      	beq.n	800e2f8 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10f      	bne.n	800e2b8 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e298:	f06f 0302 	mvn.w	r3, #2
 800e29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e29e:	e02e      	b.n	800e2fe <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e2a0:	68fa      	ldr	r2, [r7, #12]
 800e2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a4:	4013      	ands	r3, r2
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d128      	bne.n	800e2fc <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d103      	bne.n	800e2b8 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e2b0:	f06f 0302 	mvn.w	r3, #2
 800e2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e2b6:	e022      	b.n	800e2fe <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e2b8:	f001 fc5e 	bl	800fb78 <xTaskGetTickCount>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	1ad3      	subs	r3, r2, r3
 800e2c2:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800e2c4:	69ba      	ldr	r2, [r7, #24]
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d902      	bls.n	800e2d2 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2d0:	e00e      	b.n	800e2f0 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800e2d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2da:	e009      	b.n	800e2f0 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d103      	bne.n	800e2ea <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800e2e2:	f06f 0302 	mvn.w	r3, #2
 800e2e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2e8:	e002      	b.n	800e2f0 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e2ea:	f06f 0301 	mvn.w	r3, #1
 800e2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1af      	bne.n	800e256 <osThreadFlagsWait+0x50>
 800e2f6:	e002      	b.n	800e2fe <osThreadFlagsWait+0xf8>
            break;
 800e2f8:	bf00      	nop
 800e2fa:	e000      	b.n	800e2fe <osThreadFlagsWait+0xf8>
            break;
 800e2fc:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e300:	4618      	mov	r0, r3
 800e302:	3730      	adds	r7, #48	@ 0x30
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e310:	f3ef 8305 	mrs	r3, IPSR
 800e314:	60bb      	str	r3, [r7, #8]
  return(result);
 800e316:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <osDelay+0x1c>
    stat = osErrorISR;
 800e31c:	f06f 0305 	mvn.w	r3, #5
 800e320:	60fb      	str	r3, [r7, #12]
 800e322:	e007      	b.n	800e334 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e324:	2300      	movs	r3, #0
 800e326:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d002      	beq.n	800e334 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f001 fad0 	bl	800f8d4 <vTaskDelay>
    }
  }

  return (stat);
 800e334:	68fb      	ldr	r3, [r7, #12]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e33e:	b580      	push	{r7, lr}
 800e340:	b088      	sub	sp, #32
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e346:	2300      	movs	r3, #0
 800e348:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e34a:	f3ef 8305 	mrs	r3, IPSR
 800e34e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e350:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e352:	2b00      	cmp	r3, #0
 800e354:	d174      	bne.n	800e440 <osMutexNew+0x102>
    if (attr != NULL) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <osMutexNew+0x26>
      type = attr->attr_bits;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	61bb      	str	r3, [r7, #24]
 800e362:	e001      	b.n	800e368 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e364:	2300      	movs	r3, #0
 800e366:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e368:	69bb      	ldr	r3, [r7, #24]
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <osMutexNew+0x3a>
      rmtx = 1U;
 800e372:	2301      	movs	r3, #1
 800e374:	617b      	str	r3, [r7, #20]
 800e376:	e001      	b.n	800e37c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e378:	2300      	movs	r3, #0
 800e37a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	f003 0308 	and.w	r3, r3, #8
 800e382:	2b00      	cmp	r3, #0
 800e384:	d15c      	bne.n	800e440 <osMutexNew+0x102>
      mem = -1;
 800e386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e38a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d015      	beq.n	800e3be <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d006      	beq.n	800e3a8 <osMutexNew+0x6a>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	2b4f      	cmp	r3, #79	@ 0x4f
 800e3a0:	d902      	bls.n	800e3a8 <osMutexNew+0x6a>
          mem = 1;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	613b      	str	r3, [r7, #16]
 800e3a6:	e00c      	b.n	800e3c2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d108      	bne.n	800e3c2 <osMutexNew+0x84>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d104      	bne.n	800e3c2 <osMutexNew+0x84>
            mem = 0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	613b      	str	r3, [r7, #16]
 800e3bc:	e001      	b.n	800e3c2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d112      	bne.n	800e3ee <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d007      	beq.n	800e3de <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	2004      	movs	r0, #4
 800e3d6:	f000 fb20 	bl	800ea1a <xQueueCreateMutexStatic>
 800e3da:	61f8      	str	r0, [r7, #28]
 800e3dc:	e016      	b.n	800e40c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	689b      	ldr	r3, [r3, #8]
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	2001      	movs	r0, #1
 800e3e6:	f000 fb18 	bl	800ea1a <xQueueCreateMutexStatic>
 800e3ea:	61f8      	str	r0, [r7, #28]
 800e3ec:	e00e      	b.n	800e40c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d10b      	bne.n	800e40c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d004      	beq.n	800e404 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e3fa:	2004      	movs	r0, #4
 800e3fc:	f000 faf5 	bl	800e9ea <xQueueCreateMutex>
 800e400:	61f8      	str	r0, [r7, #28]
 800e402:	e003      	b.n	800e40c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e404:	2001      	movs	r0, #1
 800e406:	f000 faf0 	bl	800e9ea <xQueueCreateMutex>
 800e40a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00c      	beq.n	800e42c <osMutexNew+0xee>
        if (attr != NULL) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d003      	beq.n	800e420 <osMutexNew+0xe2>
          name = attr->name;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	60fb      	str	r3, [r7, #12]
 800e41e:	e001      	b.n	800e424 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e420:	2300      	movs	r3, #0
 800e422:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e424:	68f9      	ldr	r1, [r7, #12]
 800e426:	69f8      	ldr	r0, [r7, #28]
 800e428:	f001 f838 	bl	800f49c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d006      	beq.n	800e440 <osMutexNew+0x102>
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d003      	beq.n	800e440 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	f043 0301 	orr.w	r3, r3, #1
 800e43e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e440:	69fb      	ldr	r3, [r7, #28]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3720      	adds	r7, #32
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b086      	sub	sp, #24
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f023 0301 	bic.w	r3, r3, #1
 800e45a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f003 0301 	and.w	r3, r3, #1
 800e462:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e464:	2300      	movs	r3, #0
 800e466:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e468:	f3ef 8305 	mrs	r3, IPSR
 800e46c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e46e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e470:	2b00      	cmp	r3, #0
 800e472:	d003      	beq.n	800e47c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800e474:	f06f 0305 	mvn.w	r3, #5
 800e478:	617b      	str	r3, [r7, #20]
 800e47a:	e02c      	b.n	800e4d6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d103      	bne.n	800e48a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800e482:	f06f 0303 	mvn.w	r3, #3
 800e486:	617b      	str	r3, [r7, #20]
 800e488:	e025      	b.n	800e4d6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d011      	beq.n	800e4b4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e490:	6839      	ldr	r1, [r7, #0]
 800e492:	6938      	ldr	r0, [r7, #16]
 800e494:	f000 fb11 	bl	800eaba <xQueueTakeMutexRecursive>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d01b      	beq.n	800e4d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d003      	beq.n	800e4ac <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800e4a4:	f06f 0301 	mvn.w	r3, #1
 800e4a8:	617b      	str	r3, [r7, #20]
 800e4aa:	e014      	b.n	800e4d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e4ac:	f06f 0302 	mvn.w	r3, #2
 800e4b0:	617b      	str	r3, [r7, #20]
 800e4b2:	e010      	b.n	800e4d6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e4b4:	6839      	ldr	r1, [r7, #0]
 800e4b6:	6938      	ldr	r0, [r7, #16]
 800e4b8:	f000 fdb8 	bl	800f02c <xQueueSemaphoreTake>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d009      	beq.n	800e4d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d003      	beq.n	800e4d0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800e4c8:	f06f 0301 	mvn.w	r3, #1
 800e4cc:	617b      	str	r3, [r7, #20]
 800e4ce:	e002      	b.n	800e4d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e4d0:	f06f 0302 	mvn.w	r3, #2
 800e4d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800e4d6:	697b      	ldr	r3, [r7, #20]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3718      	adds	r7, #24
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f023 0301 	bic.w	r3, r3, #1
 800e4ee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f003 0301 	and.w	r3, r3, #1
 800e4f6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4fc:	f3ef 8305 	mrs	r3, IPSR
 800e500:	60bb      	str	r3, [r7, #8]
  return(result);
 800e502:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e504:	2b00      	cmp	r3, #0
 800e506:	d003      	beq.n	800e510 <osMutexRelease+0x30>
    stat = osErrorISR;
 800e508:	f06f 0305 	mvn.w	r3, #5
 800e50c:	617b      	str	r3, [r7, #20]
 800e50e:	e01f      	b.n	800e550 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d103      	bne.n	800e51e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800e516:	f06f 0303 	mvn.w	r3, #3
 800e51a:	617b      	str	r3, [r7, #20]
 800e51c:	e018      	b.n	800e550 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d009      	beq.n	800e538 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e524:	6938      	ldr	r0, [r7, #16]
 800e526:	f000 fa93 	bl	800ea50 <xQueueGiveMutexRecursive>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d00f      	beq.n	800e550 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e530:	f06f 0302 	mvn.w	r3, #2
 800e534:	617b      	str	r3, [r7, #20]
 800e536:	e00b      	b.n	800e550 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e538:	2300      	movs	r3, #0
 800e53a:	2200      	movs	r2, #0
 800e53c:	2100      	movs	r1, #0
 800e53e:	6938      	ldr	r0, [r7, #16]
 800e540:	f000 faf2 	bl	800eb28 <xQueueGenericSend>
 800e544:	4603      	mov	r3, r0
 800e546:	2b01      	cmp	r3, #1
 800e548:	d002      	beq.n	800e550 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e54a:	f06f 0302 	mvn.w	r3, #2
 800e54e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e550:	697b      	ldr	r3, [r7, #20]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3718      	adds	r7, #24
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
	...

0800e55c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	4a07      	ldr	r2, [pc, #28]	@ (800e588 <vApplicationGetIdleTaskMemory+0x2c>)
 800e56c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	4a06      	ldr	r2, [pc, #24]	@ (800e58c <vApplicationGetIdleTaskMemory+0x30>)
 800e572:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2280      	movs	r2, #128	@ 0x80
 800e578:	601a      	str	r2, [r3, #0]
}
 800e57a:	bf00      	nop
 800e57c:	3714      	adds	r7, #20
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr
 800e586:	bf00      	nop
 800e588:	24032ec0 	.word	0x24032ec0
 800e58c:	24032f68 	.word	0x24032f68

0800e590 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	4a07      	ldr	r2, [pc, #28]	@ (800e5bc <vApplicationGetTimerTaskMemory+0x2c>)
 800e5a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	4a06      	ldr	r2, [pc, #24]	@ (800e5c0 <vApplicationGetTimerTaskMemory+0x30>)
 800e5a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e5ae:	601a      	str	r2, [r3, #0]
}
 800e5b0:	bf00      	nop
 800e5b2:	3714      	adds	r7, #20
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	24033168 	.word	0x24033168
 800e5c0:	24033210 	.word	0x24033210

0800e5c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f103 0208 	add.w	r2, r3, #8
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e5dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f103 0208 	add.w	r2, r3, #8
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f103 0208 	add.w	r2, r3, #8
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e5f8:	bf00      	nop
 800e5fa:	370c      	adds	r7, #12
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e612:	bf00      	nop
 800e614:	370c      	adds	r7, #12
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr

0800e61e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e61e:	b480      	push	{r7}
 800e620:	b085      	sub	sp, #20
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
 800e626:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	689a      	ldr	r2, [r3, #8]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	683a      	ldr	r2, [r7, #0]
 800e642:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	1c5a      	adds	r2, r3, #1
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	601a      	str	r2, [r3, #0]
}
 800e65a:	bf00      	nop
 800e65c:	3714      	adds	r7, #20
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr

0800e666 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e666:	b480      	push	{r7}
 800e668:	b085      	sub	sp, #20
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
 800e66e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e67c:	d103      	bne.n	800e686 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	691b      	ldr	r3, [r3, #16]
 800e682:	60fb      	str	r3, [r7, #12]
 800e684:	e00c      	b.n	800e6a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	3308      	adds	r3, #8
 800e68a:	60fb      	str	r3, [r7, #12]
 800e68c:	e002      	b.n	800e694 <vListInsert+0x2e>
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	60fb      	str	r3, [r7, #12]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d2f6      	bcs.n	800e68e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	685a      	ldr	r2, [r3, #4]
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	683a      	ldr	r2, [r7, #0]
 800e6ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	683a      	ldr	r2, [r7, #0]
 800e6ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	1c5a      	adds	r2, r3, #1
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	601a      	str	r2, [r3, #0]
}
 800e6cc:	bf00      	nop
 800e6ce:	3714      	adds	r7, #20
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr

0800e6d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	6892      	ldr	r2, [r2, #8]
 800e6ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	6852      	ldr	r2, [r2, #4]
 800e6f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	429a      	cmp	r2, r3
 800e702:	d103      	bne.n	800e70c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	689a      	ldr	r2, [r3, #8]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	1e5a      	subs	r2, r3, #1
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3714      	adds	r7, #20
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d10b      	bne.n	800e758 <xQueueGenericReset+0x2c>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	60bb      	str	r3, [r7, #8]
}
 800e752:	bf00      	nop
 800e754:	bf00      	nop
 800e756:	e7fd      	b.n	800e754 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e758:	f002 fe16 	bl	8011388 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e764:	68f9      	ldr	r1, [r7, #12]
 800e766:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e768:	fb01 f303 	mul.w	r3, r1, r3
 800e76c:	441a      	add	r2, r3
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e788:	3b01      	subs	r3, #1
 800e78a:	68f9      	ldr	r1, [r7, #12]
 800e78c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e78e:	fb01 f303 	mul.w	r3, r1, r3
 800e792:	441a      	add	r2, r3
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	22ff      	movs	r2, #255	@ 0xff
 800e79c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	22ff      	movs	r2, #255	@ 0xff
 800e7a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d114      	bne.n	800e7d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	691b      	ldr	r3, [r3, #16]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d01a      	beq.n	800e7ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	3310      	adds	r3, #16
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f001 fb70 	bl	800fea0 <xTaskRemoveFromEventList>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d012      	beq.n	800e7ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e7fc <xQueueGenericReset+0xd0>)
 800e7c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7cc:	601a      	str	r2, [r3, #0]
 800e7ce:	f3bf 8f4f 	dsb	sy
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	e009      	b.n	800e7ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	3310      	adds	r3, #16
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7ff fef1 	bl	800e5c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	3324      	adds	r3, #36	@ 0x24
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7ff feec 	bl	800e5c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e7ec:	f002 fdfe 	bl	80113ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e7f0:	2301      	movs	r3, #1
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	e000ed04 	.word	0xe000ed04

0800e800 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e800:	b580      	push	{r7, lr}
 800e802:	b08e      	sub	sp, #56	@ 0x38
 800e804:	af02      	add	r7, sp, #8
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]
 800e80c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10b      	bne.n	800e82c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e826:	bf00      	nop
 800e828:	bf00      	nop
 800e82a:	e7fd      	b.n	800e828 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10b      	bne.n	800e84a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e836:	f383 8811 	msr	BASEPRI, r3
 800e83a:	f3bf 8f6f 	isb	sy
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop
 800e848:	e7fd      	b.n	800e846 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <xQueueGenericCreateStatic+0x56>
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d001      	beq.n	800e85a <xQueueGenericCreateStatic+0x5a>
 800e856:	2301      	movs	r3, #1
 800e858:	e000      	b.n	800e85c <xQueueGenericCreateStatic+0x5c>
 800e85a:	2300      	movs	r3, #0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d10b      	bne.n	800e878 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	623b      	str	r3, [r7, #32]
}
 800e872:	bf00      	nop
 800e874:	bf00      	nop
 800e876:	e7fd      	b.n	800e874 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d102      	bne.n	800e884 <xQueueGenericCreateStatic+0x84>
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <xQueueGenericCreateStatic+0x88>
 800e884:	2301      	movs	r3, #1
 800e886:	e000      	b.n	800e88a <xQueueGenericCreateStatic+0x8a>
 800e888:	2300      	movs	r3, #0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d10b      	bne.n	800e8a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	61fb      	str	r3, [r7, #28]
}
 800e8a0:	bf00      	nop
 800e8a2:	bf00      	nop
 800e8a4:	e7fd      	b.n	800e8a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e8a6:	2350      	movs	r3, #80	@ 0x50
 800e8a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	2b50      	cmp	r3, #80	@ 0x50
 800e8ae:	d00b      	beq.n	800e8c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b4:	f383 8811 	msr	BASEPRI, r3
 800e8b8:	f3bf 8f6f 	isb	sy
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	61bb      	str	r3, [r7, #24]
}
 800e8c2:	bf00      	nop
 800e8c4:	bf00      	nop
 800e8c6:	e7fd      	b.n	800e8c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e8c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00d      	beq.n	800e8f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e8dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	68b9      	ldr	r1, [r7, #8]
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f000 f840 	bl	800e970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3730      	adds	r7, #48	@ 0x30
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b08a      	sub	sp, #40	@ 0x28
 800e8fe:	af02      	add	r7, sp, #8
 800e900:	60f8      	str	r0, [r7, #12]
 800e902:	60b9      	str	r1, [r7, #8]
 800e904:	4613      	mov	r3, r2
 800e906:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10b      	bne.n	800e926 <xQueueGenericCreate+0x2c>
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	613b      	str	r3, [r7, #16]
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	e7fd      	b.n	800e922 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	68ba      	ldr	r2, [r7, #8]
 800e92a:	fb02 f303 	mul.w	r3, r2, r3
 800e92e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	3350      	adds	r3, #80	@ 0x50
 800e934:	4618      	mov	r0, r3
 800e936:	f002 fe49 	bl	80115cc <pvPortMalloc>
 800e93a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d011      	beq.n	800e966 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e942:	69bb      	ldr	r3, [r7, #24]
 800e944:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	3350      	adds	r3, #80	@ 0x50
 800e94a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	2200      	movs	r2, #0
 800e950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e954:	79fa      	ldrb	r2, [r7, #7]
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	4613      	mov	r3, r2
 800e95c:	697a      	ldr	r2, [r7, #20]
 800e95e:	68b9      	ldr	r1, [r7, #8]
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f000 f805 	bl	800e970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e966:	69bb      	ldr	r3, [r7, #24]
	}
 800e968:	4618      	mov	r0, r3
 800e96a:	3720      	adds	r7, #32
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
 800e97c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d103      	bne.n	800e98c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	69ba      	ldr	r2, [r7, #24]
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	e002      	b.n	800e992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	68ba      	ldr	r2, [r7, #8]
 800e99c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e99e:	2101      	movs	r1, #1
 800e9a0:	69b8      	ldr	r0, [r7, #24]
 800e9a2:	f7ff fec3 	bl	800e72c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	78fa      	ldrb	r2, [r7, #3]
 800e9aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e9ae:	bf00      	nop
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b082      	sub	sp, #8
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00e      	beq.n	800e9e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2100      	movs	r1, #0
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 f8a3 	bl	800eb28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e9e2:	bf00      	nop
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b086      	sub	sp, #24
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	617b      	str	r3, [r7, #20]
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e9fc:	79fb      	ldrb	r3, [r7, #7]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	6939      	ldr	r1, [r7, #16]
 800ea02:	6978      	ldr	r0, [r7, #20]
 800ea04:	f7ff ff79 	bl	800e8fa <xQueueGenericCreate>
 800ea08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f7ff ffd3 	bl	800e9b6 <prvInitialiseMutex>

		return xNewQueue;
 800ea10:	68fb      	ldr	r3, [r7, #12]
	}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3718      	adds	r7, #24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b088      	sub	sp, #32
 800ea1e:	af02      	add	r7, sp, #8
 800ea20:	4603      	mov	r3, r0
 800ea22:	6039      	str	r1, [r7, #0]
 800ea24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ea26:	2301      	movs	r3, #1
 800ea28:	617b      	str	r3, [r7, #20]
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	2200      	movs	r2, #0
 800ea36:	6939      	ldr	r1, [r7, #16]
 800ea38:	6978      	ldr	r0, [r7, #20]
 800ea3a:	f7ff fee1 	bl	800e800 <xQueueGenericCreateStatic>
 800ea3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f7ff ffb8 	bl	800e9b6 <prvInitialiseMutex>

		return xNewQueue;
 800ea46:	68fb      	ldr	r3, [r7, #12]
	}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3718      	adds	r7, #24
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ea50:	b590      	push	{r4, r7, lr}
 800ea52:	b087      	sub	sp, #28
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10b      	bne.n	800ea7a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800ea62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	60fb      	str	r3, [r7, #12]
}
 800ea74:	bf00      	nop
 800ea76:	bf00      	nop
 800ea78:	e7fd      	b.n	800ea76 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	689c      	ldr	r4, [r3, #8]
 800ea7e:	f001 fbfd 	bl	801027c <xTaskGetCurrentTaskHandle>
 800ea82:	4603      	mov	r3, r0
 800ea84:	429c      	cmp	r4, r3
 800ea86:	d111      	bne.n	800eaac <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	1e5a      	subs	r2, r3, #1
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d105      	bne.n	800eaa6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	6938      	ldr	r0, [r7, #16]
 800eaa2:	f000 f841 	bl	800eb28 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	617b      	str	r3, [r7, #20]
 800eaaa:	e001      	b.n	800eab0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800eaac:	2300      	movs	r3, #0
 800eaae:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800eab0:	697b      	ldr	r3, [r7, #20]
	}
 800eab2:	4618      	mov	r0, r3
 800eab4:	371c      	adds	r7, #28
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd90      	pop	{r4, r7, pc}

0800eaba <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800eaba:	b590      	push	{r4, r7, lr}
 800eabc:	b087      	sub	sp, #28
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10b      	bne.n	800eae6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead2:	f383 8811 	msr	BASEPRI, r3
 800ead6:	f3bf 8f6f 	isb	sy
 800eada:	f3bf 8f4f 	dsb	sy
 800eade:	60fb      	str	r3, [r7, #12]
}
 800eae0:	bf00      	nop
 800eae2:	bf00      	nop
 800eae4:	e7fd      	b.n	800eae2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	689c      	ldr	r4, [r3, #8]
 800eaea:	f001 fbc7 	bl	801027c <xTaskGetCurrentTaskHandle>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	429c      	cmp	r4, r3
 800eaf2:	d107      	bne.n	800eb04 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	1c5a      	adds	r2, r3, #1
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800eafe:	2301      	movs	r3, #1
 800eb00:	617b      	str	r3, [r7, #20]
 800eb02:	e00c      	b.n	800eb1e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800eb04:	6839      	ldr	r1, [r7, #0]
 800eb06:	6938      	ldr	r0, [r7, #16]
 800eb08:	f000 fa90 	bl	800f02c <xQueueSemaphoreTake>
 800eb0c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d004      	beq.n	800eb1e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	1c5a      	adds	r2, r3, #1
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800eb1e:	697b      	ldr	r3, [r7, #20]
	}
 800eb20:	4618      	mov	r0, r3
 800eb22:	371c      	adds	r7, #28
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd90      	pop	{r4, r7, pc}

0800eb28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b08e      	sub	sp, #56	@ 0x38
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
 800eb34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb36:	2300      	movs	r3, #0
 800eb38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10b      	bne.n	800eb5c <xQueueGenericSend+0x34>
	__asm volatile
 800eb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800eb56:	bf00      	nop
 800eb58:	bf00      	nop
 800eb5a:	e7fd      	b.n	800eb58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d103      	bne.n	800eb6a <xQueueGenericSend+0x42>
 800eb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <xQueueGenericSend+0x46>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e000      	b.n	800eb70 <xQueueGenericSend+0x48>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10b      	bne.n	800eb8c <xQueueGenericSend+0x64>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eb86:	bf00      	nop
 800eb88:	bf00      	nop
 800eb8a:	e7fd      	b.n	800eb88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d103      	bne.n	800eb9a <xQueueGenericSend+0x72>
 800eb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d101      	bne.n	800eb9e <xQueueGenericSend+0x76>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e000      	b.n	800eba0 <xQueueGenericSend+0x78>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d10b      	bne.n	800ebbc <xQueueGenericSend+0x94>
	__asm volatile
 800eba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba8:	f383 8811 	msr	BASEPRI, r3
 800ebac:	f3bf 8f6f 	isb	sy
 800ebb0:	f3bf 8f4f 	dsb	sy
 800ebb4:	623b      	str	r3, [r7, #32]
}
 800ebb6:	bf00      	nop
 800ebb8:	bf00      	nop
 800ebba:	e7fd      	b.n	800ebb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebbc:	f001 fb6e 	bl	801029c <xTaskGetSchedulerState>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d102      	bne.n	800ebcc <xQueueGenericSend+0xa4>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d101      	bne.n	800ebd0 <xQueueGenericSend+0xa8>
 800ebcc:	2301      	movs	r3, #1
 800ebce:	e000      	b.n	800ebd2 <xQueueGenericSend+0xaa>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10b      	bne.n	800ebee <xQueueGenericSend+0xc6>
	__asm volatile
 800ebd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebda:	f383 8811 	msr	BASEPRI, r3
 800ebde:	f3bf 8f6f 	isb	sy
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	61fb      	str	r3, [r7, #28]
}
 800ebe8:	bf00      	nop
 800ebea:	bf00      	nop
 800ebec:	e7fd      	b.n	800ebea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebee:	f002 fbcb 	bl	8011388 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d302      	bcc.n	800ec04 <xQueueGenericSend+0xdc>
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	d129      	bne.n	800ec58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec04:	683a      	ldr	r2, [r7, #0]
 800ec06:	68b9      	ldr	r1, [r7, #8]
 800ec08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec0a:	f000 fb37 	bl	800f27c <prvCopyDataToQueue>
 800ec0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d010      	beq.n	800ec3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1a:	3324      	adds	r3, #36	@ 0x24
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f001 f93f 	bl	800fea0 <xTaskRemoveFromEventList>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d013      	beq.n	800ec50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec28:	4b3f      	ldr	r3, [pc, #252]	@ (800ed28 <xQueueGenericSend+0x200>)
 800ec2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec2e:	601a      	str	r2, [r3, #0]
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	e00a      	b.n	800ec50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d007      	beq.n	800ec50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ec40:	4b39      	ldr	r3, [pc, #228]	@ (800ed28 <xQueueGenericSend+0x200>)
 800ec42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec46:	601a      	str	r2, [r3, #0]
 800ec48:	f3bf 8f4f 	dsb	sy
 800ec4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ec50:	f002 fbcc 	bl	80113ec <vPortExitCritical>
				return pdPASS;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e063      	b.n	800ed20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d103      	bne.n	800ec66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec5e:	f002 fbc5 	bl	80113ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ec62:	2300      	movs	r3, #0
 800ec64:	e05c      	b.n	800ed20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d106      	bne.n	800ec7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec6c:	f107 0314 	add.w	r3, r7, #20
 800ec70:	4618      	mov	r0, r3
 800ec72:	f001 f9a1 	bl	800ffb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec76:	2301      	movs	r3, #1
 800ec78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec7a:	f002 fbb7 	bl	80113ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec7e:	f000 fecf 	bl	800fa20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec82:	f002 fb81 	bl	8011388 <vPortEnterCritical>
 800ec86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec8c:	b25b      	sxtb	r3, r3
 800ec8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec92:	d103      	bne.n	800ec9c <xQueueGenericSend+0x174>
 800ec94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eca2:	b25b      	sxtb	r3, r3
 800eca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eca8:	d103      	bne.n	800ecb2 <xQueueGenericSend+0x18a>
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecac:	2200      	movs	r2, #0
 800ecae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ecb2:	f002 fb9b 	bl	80113ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecb6:	1d3a      	adds	r2, r7, #4
 800ecb8:	f107 0314 	add.w	r3, r7, #20
 800ecbc:	4611      	mov	r1, r2
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f001 f990 	bl	800ffe4 <xTaskCheckForTimeOut>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d124      	bne.n	800ed14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ecca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eccc:	f000 fbce 	bl	800f46c <prvIsQueueFull>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d018      	beq.n	800ed08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ecd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd8:	3310      	adds	r3, #16
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f001 f88c 	bl	800fdfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ece4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ece6:	f000 fb59 	bl	800f39c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ecea:	f000 fea7 	bl	800fa3c <xTaskResumeAll>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f47f af7c 	bne.w	800ebee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ecf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ed28 <xQueueGenericSend+0x200>)
 800ecf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecfc:	601a      	str	r2, [r3, #0]
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	e772      	b.n	800ebee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ed08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed0a:	f000 fb47 	bl	800f39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed0e:	f000 fe95 	bl	800fa3c <xTaskResumeAll>
 800ed12:	e76c      	b.n	800ebee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed16:	f000 fb41 	bl	800f39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed1a:	f000 fe8f 	bl	800fa3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ed1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3738      	adds	r7, #56	@ 0x38
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	e000ed04 	.word	0xe000ed04

0800ed2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b090      	sub	sp, #64	@ 0x40
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ed3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10b      	bne.n	800ed5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ed44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed48:	f383 8811 	msr	BASEPRI, r3
 800ed4c:	f3bf 8f6f 	isb	sy
 800ed50:	f3bf 8f4f 	dsb	sy
 800ed54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ed56:	bf00      	nop
 800ed58:	bf00      	nop
 800ed5a:	e7fd      	b.n	800ed58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d103      	bne.n	800ed6a <xQueueGenericSendFromISR+0x3e>
 800ed62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <xQueueGenericSendFromISR+0x42>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e000      	b.n	800ed70 <xQueueGenericSendFromISR+0x44>
 800ed6e:	2300      	movs	r3, #0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10b      	bne.n	800ed8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ed74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ed86:	bf00      	nop
 800ed88:	bf00      	nop
 800ed8a:	e7fd      	b.n	800ed88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	d103      	bne.n	800ed9a <xQueueGenericSendFromISR+0x6e>
 800ed92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d101      	bne.n	800ed9e <xQueueGenericSendFromISR+0x72>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e000      	b.n	800eda0 <xQueueGenericSendFromISR+0x74>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10b      	bne.n	800edbc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800eda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	623b      	str	r3, [r7, #32]
}
 800edb6:	bf00      	nop
 800edb8:	bf00      	nop
 800edba:	e7fd      	b.n	800edb8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edbc:	f002 fbc4 	bl	8011548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800edc0:	f3ef 8211 	mrs	r2, BASEPRI
 800edc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	61fa      	str	r2, [r7, #28]
 800edd6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800edd8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edda:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ede0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ede2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d302      	bcc.n	800edee <xQueueGenericSendFromISR+0xc2>
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2b02      	cmp	r3, #2
 800edec:	d12f      	bne.n	800ee4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800edee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800edf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	68b9      	ldr	r1, [r7, #8]
 800ee02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ee04:	f000 fa3a 	bl	800f27c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ee0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee10:	d112      	bne.n	800ee38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d016      	beq.n	800ee48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee1c:	3324      	adds	r3, #36	@ 0x24
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f001 f83e 	bl	800fea0 <xTaskRemoveFromEventList>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00e      	beq.n	800ee48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00b      	beq.n	800ee48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	e007      	b.n	800ee48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	b25a      	sxtb	r2, r3
 800ee42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ee4c:	e001      	b.n	800ee52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ee5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3740      	adds	r7, #64	@ 0x40
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08c      	sub	sp, #48	@ 0x30
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee74:	2300      	movs	r3, #0
 800ee76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d10b      	bne.n	800ee9a <xQueueReceive+0x32>
	__asm volatile
 800ee82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee86:	f383 8811 	msr	BASEPRI, r3
 800ee8a:	f3bf 8f6f 	isb	sy
 800ee8e:	f3bf 8f4f 	dsb	sy
 800ee92:	623b      	str	r3, [r7, #32]
}
 800ee94:	bf00      	nop
 800ee96:	bf00      	nop
 800ee98:	e7fd      	b.n	800ee96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d103      	bne.n	800eea8 <xQueueReceive+0x40>
 800eea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d101      	bne.n	800eeac <xQueueReceive+0x44>
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e000      	b.n	800eeae <xQueueReceive+0x46>
 800eeac:	2300      	movs	r3, #0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10b      	bne.n	800eeca <xQueueReceive+0x62>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	61fb      	str	r3, [r7, #28]
}
 800eec4:	bf00      	nop
 800eec6:	bf00      	nop
 800eec8:	e7fd      	b.n	800eec6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eeca:	f001 f9e7 	bl	801029c <xTaskGetSchedulerState>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d102      	bne.n	800eeda <xQueueReceive+0x72>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d101      	bne.n	800eede <xQueueReceive+0x76>
 800eeda:	2301      	movs	r3, #1
 800eedc:	e000      	b.n	800eee0 <xQueueReceive+0x78>
 800eede:	2300      	movs	r3, #0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d10b      	bne.n	800eefc <xQueueReceive+0x94>
	__asm volatile
 800eee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee8:	f383 8811 	msr	BASEPRI, r3
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f3bf 8f4f 	dsb	sy
 800eef4:	61bb      	str	r3, [r7, #24]
}
 800eef6:	bf00      	nop
 800eef8:	bf00      	nop
 800eefa:	e7fd      	b.n	800eef8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eefc:	f002 fa44 	bl	8011388 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d01f      	beq.n	800ef4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef0c:	68b9      	ldr	r1, [r7, #8]
 800ef0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef10:	f000 fa1e 	bl	800f350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef16:	1e5a      	subs	r2, r3, #1
 800ef18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d00f      	beq.n	800ef44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef26:	3310      	adds	r3, #16
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f000 ffb9 	bl	800fea0 <xTaskRemoveFromEventList>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d007      	beq.n	800ef44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef34:	4b3c      	ldr	r3, [pc, #240]	@ (800f028 <xQueueReceive+0x1c0>)
 800ef36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef3a:	601a      	str	r2, [r3, #0]
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef44:	f002 fa52 	bl	80113ec <vPortExitCritical>
				return pdPASS;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e069      	b.n	800f020 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d103      	bne.n	800ef5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef52:	f002 fa4b 	bl	80113ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef56:	2300      	movs	r3, #0
 800ef58:	e062      	b.n	800f020 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d106      	bne.n	800ef6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef60:	f107 0310 	add.w	r3, r7, #16
 800ef64:	4618      	mov	r0, r3
 800ef66:	f001 f827 	bl	800ffb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef6e:	f002 fa3d 	bl	80113ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef72:	f000 fd55 	bl	800fa20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef76:	f002 fa07 	bl	8011388 <vPortEnterCritical>
 800ef7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef80:	b25b      	sxtb	r3, r3
 800ef82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef86:	d103      	bne.n	800ef90 <xQueueReceive+0x128>
 800ef88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef96:	b25b      	sxtb	r3, r3
 800ef98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef9c:	d103      	bne.n	800efa6 <xQueueReceive+0x13e>
 800ef9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa0:	2200      	movs	r2, #0
 800efa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800efa6:	f002 fa21 	bl	80113ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efaa:	1d3a      	adds	r2, r7, #4
 800efac:	f107 0310 	add.w	r3, r7, #16
 800efb0:	4611      	mov	r1, r2
 800efb2:	4618      	mov	r0, r3
 800efb4:	f001 f816 	bl	800ffe4 <xTaskCheckForTimeOut>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d123      	bne.n	800f006 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efc0:	f000 fa3e 	bl	800f440 <prvIsQueueEmpty>
 800efc4:	4603      	mov	r3, r0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d017      	beq.n	800effa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800efca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efcc:	3324      	adds	r3, #36	@ 0x24
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	4611      	mov	r1, r2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f000 ff12 	bl	800fdfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800efd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efda:	f000 f9df 	bl	800f39c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800efde:	f000 fd2d 	bl	800fa3c <xTaskResumeAll>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d189      	bne.n	800eefc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800efe8:	4b0f      	ldr	r3, [pc, #60]	@ (800f028 <xQueueReceive+0x1c0>)
 800efea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efee:	601a      	str	r2, [r3, #0]
 800eff0:	f3bf 8f4f 	dsb	sy
 800eff4:	f3bf 8f6f 	isb	sy
 800eff8:	e780      	b.n	800eefc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800effa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800effc:	f000 f9ce 	bl	800f39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f000:	f000 fd1c 	bl	800fa3c <xTaskResumeAll>
 800f004:	e77a      	b.n	800eefc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f008:	f000 f9c8 	bl	800f39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f00c:	f000 fd16 	bl	800fa3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f012:	f000 fa15 	bl	800f440 <prvIsQueueEmpty>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	f43f af6f 	beq.w	800eefc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f01e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f020:	4618      	mov	r0, r3
 800f022:	3730      	adds	r7, #48	@ 0x30
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	e000ed04 	.word	0xe000ed04

0800f02c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b08e      	sub	sp, #56	@ 0x38
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f036:	2300      	movs	r3, #0
 800f038:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f03e:	2300      	movs	r3, #0
 800f040:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10b      	bne.n	800f060 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f04c:	f383 8811 	msr	BASEPRI, r3
 800f050:	f3bf 8f6f 	isb	sy
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	623b      	str	r3, [r7, #32]
}
 800f05a:	bf00      	nop
 800f05c:	bf00      	nop
 800f05e:	e7fd      	b.n	800f05c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00b      	beq.n	800f080 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06c:	f383 8811 	msr	BASEPRI, r3
 800f070:	f3bf 8f6f 	isb	sy
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	61fb      	str	r3, [r7, #28]
}
 800f07a:	bf00      	nop
 800f07c:	bf00      	nop
 800f07e:	e7fd      	b.n	800f07c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f080:	f001 f90c 	bl	801029c <xTaskGetSchedulerState>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d102      	bne.n	800f090 <xQueueSemaphoreTake+0x64>
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d101      	bne.n	800f094 <xQueueSemaphoreTake+0x68>
 800f090:	2301      	movs	r3, #1
 800f092:	e000      	b.n	800f096 <xQueueSemaphoreTake+0x6a>
 800f094:	2300      	movs	r3, #0
 800f096:	2b00      	cmp	r3, #0
 800f098:	d10b      	bne.n	800f0b2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f09e:	f383 8811 	msr	BASEPRI, r3
 800f0a2:	f3bf 8f6f 	isb	sy
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	61bb      	str	r3, [r7, #24]
}
 800f0ac:	bf00      	nop
 800f0ae:	bf00      	nop
 800f0b0:	e7fd      	b.n	800f0ae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0b2:	f002 f969 	bl	8011388 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d024      	beq.n	800f10c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c4:	1e5a      	subs	r2, r3, #1
 800f0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d104      	bne.n	800f0dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f0d2:	f001 fa5d 	bl	8010590 <pvTaskIncrementMutexHeldCount>
 800f0d6:	4602      	mov	r2, r0
 800f0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00f      	beq.n	800f104 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e6:	3310      	adds	r3, #16
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 fed9 	bl	800fea0 <xTaskRemoveFromEventList>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d007      	beq.n	800f104 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0f4:	4b54      	ldr	r3, [pc, #336]	@ (800f248 <xQueueSemaphoreTake+0x21c>)
 800f0f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0fa:	601a      	str	r2, [r3, #0]
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f104:	f002 f972 	bl	80113ec <vPortExitCritical>
				return pdPASS;
 800f108:	2301      	movs	r3, #1
 800f10a:	e098      	b.n	800f23e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d112      	bne.n	800f138 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00b      	beq.n	800f130 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f11c:	f383 8811 	msr	BASEPRI, r3
 800f120:	f3bf 8f6f 	isb	sy
 800f124:	f3bf 8f4f 	dsb	sy
 800f128:	617b      	str	r3, [r7, #20]
}
 800f12a:	bf00      	nop
 800f12c:	bf00      	nop
 800f12e:	e7fd      	b.n	800f12c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f130:	f002 f95c 	bl	80113ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f134:	2300      	movs	r3, #0
 800f136:	e082      	b.n	800f23e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d106      	bne.n	800f14c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f13e:	f107 030c 	add.w	r3, r7, #12
 800f142:	4618      	mov	r0, r3
 800f144:	f000 ff38 	bl	800ffb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f148:	2301      	movs	r3, #1
 800f14a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f14c:	f002 f94e 	bl	80113ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f150:	f000 fc66 	bl	800fa20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f154:	f002 f918 	bl	8011388 <vPortEnterCritical>
 800f158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f15a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f15e:	b25b      	sxtb	r3, r3
 800f160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f164:	d103      	bne.n	800f16e <xQueueSemaphoreTake+0x142>
 800f166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f168:	2200      	movs	r2, #0
 800f16a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f170:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f174:	b25b      	sxtb	r3, r3
 800f176:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f17a:	d103      	bne.n	800f184 <xQueueSemaphoreTake+0x158>
 800f17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f184:	f002 f932 	bl	80113ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f188:	463a      	mov	r2, r7
 800f18a:	f107 030c 	add.w	r3, r7, #12
 800f18e:	4611      	mov	r1, r2
 800f190:	4618      	mov	r0, r3
 800f192:	f000 ff27 	bl	800ffe4 <xTaskCheckForTimeOut>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d132      	bne.n	800f202 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f19c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f19e:	f000 f94f 	bl	800f440 <prvIsQueueEmpty>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d026      	beq.n	800f1f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d109      	bne.n	800f1c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f1b0:	f002 f8ea 	bl	8011388 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f001 f88d 	bl	80102d8 <xTaskPriorityInherit>
 800f1be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f1c0:	f002 f914 	bl	80113ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c6:	3324      	adds	r3, #36	@ 0x24
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f000 fe15 	bl	800fdfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1d4:	f000 f8e2 	bl	800f39c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1d8:	f000 fc30 	bl	800fa3c <xTaskResumeAll>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	f47f af67 	bne.w	800f0b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f1e4:	4b18      	ldr	r3, [pc, #96]	@ (800f248 <xQueueSemaphoreTake+0x21c>)
 800f1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1ea:	601a      	str	r2, [r3, #0]
 800f1ec:	f3bf 8f4f 	dsb	sy
 800f1f0:	f3bf 8f6f 	isb	sy
 800f1f4:	e75d      	b.n	800f0b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f1f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1f8:	f000 f8d0 	bl	800f39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1fc:	f000 fc1e 	bl	800fa3c <xTaskResumeAll>
 800f200:	e757      	b.n	800f0b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f202:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f204:	f000 f8ca 	bl	800f39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f208:	f000 fc18 	bl	800fa3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f20c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f20e:	f000 f917 	bl	800f440 <prvIsQueueEmpty>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	f43f af4c 	beq.w	800f0b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00d      	beq.n	800f23c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f220:	f002 f8b2 	bl	8011388 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f224:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f226:	f000 f811 	bl	800f24c <prvGetDisinheritPriorityAfterTimeout>
 800f22a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f232:	4618      	mov	r0, r3
 800f234:	f001 f928 	bl	8010488 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f238:	f002 f8d8 	bl	80113ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f23c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3738      	adds	r7, #56	@ 0x38
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	e000ed04 	.word	0xe000ed04

0800f24c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f24c:	b480      	push	{r7}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d006      	beq.n	800f26a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f266:	60fb      	str	r3, [r7, #12]
 800f268:	e001      	b.n	800f26e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f26a:	2300      	movs	r3, #0
 800f26c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f26e:	68fb      	ldr	r3, [r7, #12]
	}
 800f270:	4618      	mov	r0, r3
 800f272:	3714      	adds	r7, #20
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f288:	2300      	movs	r3, #0
 800f28a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f290:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f296:	2b00      	cmp	r3, #0
 800f298:	d10d      	bne.n	800f2b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d14d      	bne.n	800f33e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f001 f87e 	bl	80103a8 <xTaskPriorityDisinherit>
 800f2ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	609a      	str	r2, [r3, #8]
 800f2b4:	e043      	b.n	800f33e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d119      	bne.n	800f2f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6858      	ldr	r0, [r3, #4]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	68b9      	ldr	r1, [r7, #8]
 800f2c8:	f013 f9b5 	bl	8022636 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	685a      	ldr	r2, [r3, #4]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2d4:	441a      	add	r2, r3
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d32b      	bcc.n	800f33e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	605a      	str	r2, [r3, #4]
 800f2ee:	e026      	b.n	800f33e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	68d8      	ldr	r0, [r3, #12]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	68b9      	ldr	r1, [r7, #8]
 800f2fc:	f013 f99b 	bl	8022636 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	68da      	ldr	r2, [r3, #12]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f308:	425b      	negs	r3, r3
 800f30a:	441a      	add	r2, r3
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	68da      	ldr	r2, [r3, #12]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d207      	bcs.n	800f32c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	689a      	ldr	r2, [r3, #8]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f324:	425b      	negs	r3, r3
 800f326:	441a      	add	r2, r3
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b02      	cmp	r3, #2
 800f330:	d105      	bne.n	800f33e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	3b01      	subs	r3, #1
 800f33c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	1c5a      	adds	r2, r3, #1
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f346:	697b      	ldr	r3, [r7, #20]
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3718      	adds	r7, #24
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d018      	beq.n	800f394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	68da      	ldr	r2, [r3, #12]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f36a:	441a      	add	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68da      	ldr	r2, [r3, #12]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	689b      	ldr	r3, [r3, #8]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d303      	bcc.n	800f384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	68d9      	ldr	r1, [r3, #12]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f38c:	461a      	mov	r2, r3
 800f38e:	6838      	ldr	r0, [r7, #0]
 800f390:	f013 f951 	bl	8022636 <memcpy>
	}
}
 800f394:	bf00      	nop
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f3a4:	f001 fff0 	bl	8011388 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f3ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3b0:	e011      	b.n	800f3d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d012      	beq.n	800f3e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	3324      	adds	r3, #36	@ 0x24
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fd6e 	bl	800fea0 <xTaskRemoveFromEventList>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f3ca:	f000 fe6f 	bl	80100ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f3ce:	7bfb      	ldrb	r3, [r7, #15]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	dce9      	bgt.n	800f3b2 <prvUnlockQueue+0x16>
 800f3de:	e000      	b.n	800f3e2 <prvUnlockQueue+0x46>
					break;
 800f3e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	22ff      	movs	r2, #255	@ 0xff
 800f3e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f3ea:	f001 ffff 	bl	80113ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f3ee:	f001 ffcb 	bl	8011388 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f3f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f3fa:	e011      	b.n	800f420 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d012      	beq.n	800f42a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	3310      	adds	r3, #16
 800f408:	4618      	mov	r0, r3
 800f40a:	f000 fd49 	bl	800fea0 <xTaskRemoveFromEventList>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d001      	beq.n	800f418 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f414:	f000 fe4a 	bl	80100ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f418:	7bbb      	ldrb	r3, [r7, #14]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f424:	2b00      	cmp	r3, #0
 800f426:	dce9      	bgt.n	800f3fc <prvUnlockQueue+0x60>
 800f428:	e000      	b.n	800f42c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f42a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	22ff      	movs	r2, #255	@ 0xff
 800f430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f434:	f001 ffda 	bl	80113ec <vPortExitCritical>
}
 800f438:	bf00      	nop
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f448:	f001 ff9e 	bl	8011388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f450:	2b00      	cmp	r3, #0
 800f452:	d102      	bne.n	800f45a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f454:	2301      	movs	r3, #1
 800f456:	60fb      	str	r3, [r7, #12]
 800f458:	e001      	b.n	800f45e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f45a:	2300      	movs	r3, #0
 800f45c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f45e:	f001 ffc5 	bl	80113ec <vPortExitCritical>

	return xReturn;
 800f462:	68fb      	ldr	r3, [r7, #12]
}
 800f464:	4618      	mov	r0, r3
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f474:	f001 ff88 	bl	8011388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f480:	429a      	cmp	r2, r3
 800f482:	d102      	bne.n	800f48a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f484:	2301      	movs	r3, #1
 800f486:	60fb      	str	r3, [r7, #12]
 800f488:	e001      	b.n	800f48e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f48a:	2300      	movs	r3, #0
 800f48c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f48e:	f001 ffad 	bl	80113ec <vPortExitCritical>

	return xReturn;
 800f492:	68fb      	ldr	r3, [r7, #12]
}
 800f494:	4618      	mov	r0, r3
 800f496:	3710      	adds	r7, #16
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f49c:	b480      	push	{r7}
 800f49e:	b085      	sub	sp, #20
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	60fb      	str	r3, [r7, #12]
 800f4aa:	e014      	b.n	800f4d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f4ac:	4a0f      	ldr	r2, [pc, #60]	@ (800f4ec <vQueueAddToRegistry+0x50>)
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d10b      	bne.n	800f4d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f4b8:	490c      	ldr	r1, [pc, #48]	@ (800f4ec <vQueueAddToRegistry+0x50>)
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	683a      	ldr	r2, [r7, #0]
 800f4be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f4c2:	4a0a      	ldr	r2, [pc, #40]	@ (800f4ec <vQueueAddToRegistry+0x50>)
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	00db      	lsls	r3, r3, #3
 800f4c8:	4413      	add	r3, r2
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f4ce:	e006      	b.n	800f4de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	60fb      	str	r3, [r7, #12]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2b07      	cmp	r3, #7
 800f4da:	d9e7      	bls.n	800f4ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f4dc:	bf00      	nop
 800f4de:	bf00      	nop
 800f4e0:	3714      	adds	r7, #20
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	24033610 	.word	0x24033610

0800f4f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	60b9      	str	r1, [r7, #8]
 800f4fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f500:	f001 ff42 	bl	8011388 <vPortEnterCritical>
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f50a:	b25b      	sxtb	r3, r3
 800f50c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f510:	d103      	bne.n	800f51a <vQueueWaitForMessageRestricted+0x2a>
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	2200      	movs	r2, #0
 800f516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f520:	b25b      	sxtb	r3, r3
 800f522:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f526:	d103      	bne.n	800f530 <vQueueWaitForMessageRestricted+0x40>
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	2200      	movs	r2, #0
 800f52c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f530:	f001 ff5c 	bl	80113ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d106      	bne.n	800f54a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	3324      	adds	r3, #36	@ 0x24
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	68b9      	ldr	r1, [r7, #8]
 800f544:	4618      	mov	r0, r3
 800f546:	f000 fc7f 	bl	800fe48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f54a:	6978      	ldr	r0, [r7, #20]
 800f54c:	f7ff ff26 	bl	800f39c <prvUnlockQueue>
	}
 800f550:	bf00      	nop
 800f552:	3718      	adds	r7, #24
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b08e      	sub	sp, #56	@ 0x38
 800f55c:	af04      	add	r7, sp, #16
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
 800f564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d10b      	bne.n	800f584 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f570:	f383 8811 	msr	BASEPRI, r3
 800f574:	f3bf 8f6f 	isb	sy
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	623b      	str	r3, [r7, #32]
}
 800f57e:	bf00      	nop
 800f580:	bf00      	nop
 800f582:	e7fd      	b.n	800f580 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f586:	2b00      	cmp	r3, #0
 800f588:	d10b      	bne.n	800f5a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800f58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f58e:	f383 8811 	msr	BASEPRI, r3
 800f592:	f3bf 8f6f 	isb	sy
 800f596:	f3bf 8f4f 	dsb	sy
 800f59a:	61fb      	str	r3, [r7, #28]
}
 800f59c:	bf00      	nop
 800f59e:	bf00      	nop
 800f5a0:	e7fd      	b.n	800f59e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f5a2:	23a8      	movs	r3, #168	@ 0xa8
 800f5a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	2ba8      	cmp	r3, #168	@ 0xa8
 800f5aa:	d00b      	beq.n	800f5c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	61bb      	str	r3, [r7, #24]
}
 800f5be:	bf00      	nop
 800f5c0:	bf00      	nop
 800f5c2:	e7fd      	b.n	800f5c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f5c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d01e      	beq.n	800f60a <xTaskCreateStatic+0xb2>
 800f5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d01b      	beq.n	800f60a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5de:	2202      	movs	r2, #2
 800f5e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	9303      	str	r3, [sp, #12]
 800f5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ea:	9302      	str	r3, [sp, #8]
 800f5ec:	f107 0314 	add.w	r3, r7, #20
 800f5f0:	9301      	str	r3, [sp, #4]
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	68b9      	ldr	r1, [r7, #8]
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f000 f851 	bl	800f6a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f602:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f604:	f000 f8f6 	bl	800f7f4 <prvAddNewTaskToReadyList>
 800f608:	e001      	b.n	800f60e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f60a:	2300      	movs	r3, #0
 800f60c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f60e:	697b      	ldr	r3, [r7, #20]
	}
 800f610:	4618      	mov	r0, r3
 800f612:	3728      	adds	r7, #40	@ 0x28
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b08c      	sub	sp, #48	@ 0x30
 800f61c:	af04      	add	r7, sp, #16
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	603b      	str	r3, [r7, #0]
 800f624:	4613      	mov	r3, r2
 800f626:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f628:	88fb      	ldrh	r3, [r7, #6]
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	4618      	mov	r0, r3
 800f62e:	f001 ffcd 	bl	80115cc <pvPortMalloc>
 800f632:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00e      	beq.n	800f658 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f63a:	20a8      	movs	r0, #168	@ 0xa8
 800f63c:	f001 ffc6 	bl	80115cc <pvPortMalloc>
 800f640:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d003      	beq.n	800f650 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f64e:	e005      	b.n	800f65c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f650:	6978      	ldr	r0, [r7, #20]
 800f652:	f002 f889 	bl	8011768 <vPortFree>
 800f656:	e001      	b.n	800f65c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f658:	2300      	movs	r3, #0
 800f65a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d017      	beq.n	800f692 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	2200      	movs	r2, #0
 800f666:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f66a:	88fa      	ldrh	r2, [r7, #6]
 800f66c:	2300      	movs	r3, #0
 800f66e:	9303      	str	r3, [sp, #12]
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	9302      	str	r3, [sp, #8]
 800f674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f676:	9301      	str	r3, [sp, #4]
 800f678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	68b9      	ldr	r1, [r7, #8]
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f000 f80f 	bl	800f6a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f686:	69f8      	ldr	r0, [r7, #28]
 800f688:	f000 f8b4 	bl	800f7f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f68c:	2301      	movs	r3, #1
 800f68e:	61bb      	str	r3, [r7, #24]
 800f690:	e002      	b.n	800f698 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f692:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f696:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f698:	69bb      	ldr	r3, [r7, #24]
	}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3720      	adds	r7, #32
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
	...

0800f6a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b088      	sub	sp, #32
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	607a      	str	r2, [r7, #4]
 800f6b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	21a5      	movs	r1, #165	@ 0xa5
 800f6be:	f012 fe9b 	bl	80223f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f6c6:	6879      	ldr	r1, [r7, #4]
 800f6c8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f6cc:	440b      	add	r3, r1
 800f6ce:	009b      	lsls	r3, r3, #2
 800f6d0:	4413      	add	r3, r2
 800f6d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	f023 0307 	bic.w	r3, r3, #7
 800f6da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	f003 0307 	and.w	r3, r3, #7
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00b      	beq.n	800f6fe <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ea:	f383 8811 	msr	BASEPRI, r3
 800f6ee:	f3bf 8f6f 	isb	sy
 800f6f2:	f3bf 8f4f 	dsb	sy
 800f6f6:	617b      	str	r3, [r7, #20]
}
 800f6f8:	bf00      	nop
 800f6fa:	bf00      	nop
 800f6fc:	e7fd      	b.n	800f6fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d01f      	beq.n	800f744 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f704:	2300      	movs	r3, #0
 800f706:	61fb      	str	r3, [r7, #28]
 800f708:	e012      	b.n	800f730 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	4413      	add	r3, r2
 800f710:	7819      	ldrb	r1, [r3, #0]
 800f712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	4413      	add	r3, r2
 800f718:	3334      	adds	r3, #52	@ 0x34
 800f71a:	460a      	mov	r2, r1
 800f71c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f71e:	68ba      	ldr	r2, [r7, #8]
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	4413      	add	r3, r2
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d006      	beq.n	800f738 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	3301      	adds	r3, #1
 800f72e:	61fb      	str	r3, [r7, #28]
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	2b0f      	cmp	r3, #15
 800f734:	d9e9      	bls.n	800f70a <prvInitialiseNewTask+0x66>
 800f736:	e000      	b.n	800f73a <prvInitialiseNewTask+0x96>
			{
				break;
 800f738:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f73c:	2200      	movs	r2, #0
 800f73e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f742:	e003      	b.n	800f74c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f746:	2200      	movs	r2, #0
 800f748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f74e:	2b37      	cmp	r3, #55	@ 0x37
 800f750:	d901      	bls.n	800f756 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f752:	2337      	movs	r3, #55	@ 0x37
 800f754:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f75a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f75e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f760:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f764:	2200      	movs	r2, #0
 800f766:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f76a:	3304      	adds	r3, #4
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fe ff49 	bl	800e604 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f774:	3318      	adds	r3, #24
 800f776:	4618      	mov	r0, r3
 800f778:	f7fe ff44 	bl	800e604 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f780:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f784:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f78a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f78e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f790:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f794:	2200      	movs	r2, #0
 800f796:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f79c:	2200      	movs	r2, #0
 800f79e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7a4:	3354      	adds	r3, #84	@ 0x54
 800f7a6:	224c      	movs	r2, #76	@ 0x4c
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f012 fe24 	bl	80223f8 <memset>
 800f7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b2:	4a0d      	ldr	r2, [pc, #52]	@ (800f7e8 <prvInitialiseNewTask+0x144>)
 800f7b4:	659a      	str	r2, [r3, #88]	@ 0x58
 800f7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b8:	4a0c      	ldr	r2, [pc, #48]	@ (800f7ec <prvInitialiseNewTask+0x148>)
 800f7ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7be:	4a0c      	ldr	r2, [pc, #48]	@ (800f7f0 <prvInitialiseNewTask+0x14c>)
 800f7c0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f7c2:	683a      	ldr	r2, [r7, #0]
 800f7c4:	68f9      	ldr	r1, [r7, #12]
 800f7c6:	69b8      	ldr	r0, [r7, #24]
 800f7c8:	f001 fcac 	bl	8011124 <pxPortInitialiseStack>
 800f7cc:	4602      	mov	r2, r0
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d002      	beq.n	800f7de <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7de:	bf00      	nop
 800f7e0:	3720      	adds	r7, #32
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	24069714 	.word	0x24069714
 800f7ec:	2406977c 	.word	0x2406977c
 800f7f0:	240697e4 	.word	0x240697e4

0800f7f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f7fc:	f001 fdc4 	bl	8011388 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f800:	4b2d      	ldr	r3, [pc, #180]	@ (800f8b8 <prvAddNewTaskToReadyList+0xc4>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	3301      	adds	r3, #1
 800f806:	4a2c      	ldr	r2, [pc, #176]	@ (800f8b8 <prvAddNewTaskToReadyList+0xc4>)
 800f808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f80a:	4b2c      	ldr	r3, [pc, #176]	@ (800f8bc <prvAddNewTaskToReadyList+0xc8>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d109      	bne.n	800f826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f812:	4a2a      	ldr	r2, [pc, #168]	@ (800f8bc <prvAddNewTaskToReadyList+0xc8>)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f818:	4b27      	ldr	r3, [pc, #156]	@ (800f8b8 <prvAddNewTaskToReadyList+0xc4>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d110      	bne.n	800f842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f820:	f000 fc68 	bl	80100f4 <prvInitialiseTaskLists>
 800f824:	e00d      	b.n	800f842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f826:	4b26      	ldr	r3, [pc, #152]	@ (800f8c0 <prvAddNewTaskToReadyList+0xcc>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d109      	bne.n	800f842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f82e:	4b23      	ldr	r3, [pc, #140]	@ (800f8bc <prvAddNewTaskToReadyList+0xc8>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f838:	429a      	cmp	r2, r3
 800f83a:	d802      	bhi.n	800f842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f83c:	4a1f      	ldr	r2, [pc, #124]	@ (800f8bc <prvAddNewTaskToReadyList+0xc8>)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f842:	4b20      	ldr	r3, [pc, #128]	@ (800f8c4 <prvAddNewTaskToReadyList+0xd0>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	3301      	adds	r3, #1
 800f848:	4a1e      	ldr	r2, [pc, #120]	@ (800f8c4 <prvAddNewTaskToReadyList+0xd0>)
 800f84a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f84c:	4b1d      	ldr	r3, [pc, #116]	@ (800f8c4 <prvAddNewTaskToReadyList+0xd0>)
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f858:	4b1b      	ldr	r3, [pc, #108]	@ (800f8c8 <prvAddNewTaskToReadyList+0xd4>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d903      	bls.n	800f868 <prvAddNewTaskToReadyList+0x74>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f864:	4a18      	ldr	r2, [pc, #96]	@ (800f8c8 <prvAddNewTaskToReadyList+0xd4>)
 800f866:	6013      	str	r3, [r2, #0]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f86c:	4613      	mov	r3, r2
 800f86e:	009b      	lsls	r3, r3, #2
 800f870:	4413      	add	r3, r2
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	4a15      	ldr	r2, [pc, #84]	@ (800f8cc <prvAddNewTaskToReadyList+0xd8>)
 800f876:	441a      	add	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3304      	adds	r3, #4
 800f87c:	4619      	mov	r1, r3
 800f87e:	4610      	mov	r0, r2
 800f880:	f7fe fecd 	bl	800e61e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f884:	f001 fdb2 	bl	80113ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f888:	4b0d      	ldr	r3, [pc, #52]	@ (800f8c0 <prvAddNewTaskToReadyList+0xcc>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d00e      	beq.n	800f8ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f890:	4b0a      	ldr	r3, [pc, #40]	@ (800f8bc <prvAddNewTaskToReadyList+0xc8>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d207      	bcs.n	800f8ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f89e:	4b0c      	ldr	r3, [pc, #48]	@ (800f8d0 <prvAddNewTaskToReadyList+0xdc>)
 800f8a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8a4:	601a      	str	r2, [r3, #0]
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8ae:	bf00      	nop
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	24033b24 	.word	0x24033b24
 800f8bc:	24033650 	.word	0x24033650
 800f8c0:	24033b30 	.word	0x24033b30
 800f8c4:	24033b40 	.word	0x24033b40
 800f8c8:	24033b2c 	.word	0x24033b2c
 800f8cc:	24033654 	.word	0x24033654
 800f8d0:	e000ed04 	.word	0xe000ed04

0800f8d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d018      	beq.n	800f918 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f8e6:	4b14      	ldr	r3, [pc, #80]	@ (800f938 <vTaskDelay+0x64>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00b      	beq.n	800f906 <vTaskDelay+0x32>
	__asm volatile
 800f8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8f2:	f383 8811 	msr	BASEPRI, r3
 800f8f6:	f3bf 8f6f 	isb	sy
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	60bb      	str	r3, [r7, #8]
}
 800f900:	bf00      	nop
 800f902:	bf00      	nop
 800f904:	e7fd      	b.n	800f902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f906:	f000 f88b 	bl	800fa20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f90a:	2100      	movs	r1, #0
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f001 f85b 	bl	80109c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f912:	f000 f893 	bl	800fa3c <xTaskResumeAll>
 800f916:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d107      	bne.n	800f92e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f91e:	4b07      	ldr	r3, [pc, #28]	@ (800f93c <vTaskDelay+0x68>)
 800f920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f924:	601a      	str	r2, [r3, #0]
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f92e:	bf00      	nop
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	24033b4c 	.word	0x24033b4c
 800f93c:	e000ed04 	.word	0xe000ed04

0800f940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b08a      	sub	sp, #40	@ 0x28
 800f944:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f946:	2300      	movs	r3, #0
 800f948:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f94a:	2300      	movs	r3, #0
 800f94c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f94e:	463a      	mov	r2, r7
 800f950:	1d39      	adds	r1, r7, #4
 800f952:	f107 0308 	add.w	r3, r7, #8
 800f956:	4618      	mov	r0, r3
 800f958:	f7fe fe00 	bl	800e55c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f95c:	6839      	ldr	r1, [r7, #0]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	9202      	str	r2, [sp, #8]
 800f964:	9301      	str	r3, [sp, #4]
 800f966:	2300      	movs	r3, #0
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	2300      	movs	r3, #0
 800f96c:	460a      	mov	r2, r1
 800f96e:	4924      	ldr	r1, [pc, #144]	@ (800fa00 <vTaskStartScheduler+0xc0>)
 800f970:	4824      	ldr	r0, [pc, #144]	@ (800fa04 <vTaskStartScheduler+0xc4>)
 800f972:	f7ff fdf1 	bl	800f558 <xTaskCreateStatic>
 800f976:	4603      	mov	r3, r0
 800f978:	4a23      	ldr	r2, [pc, #140]	@ (800fa08 <vTaskStartScheduler+0xc8>)
 800f97a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f97c:	4b22      	ldr	r3, [pc, #136]	@ (800fa08 <vTaskStartScheduler+0xc8>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d002      	beq.n	800f98a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f984:	2301      	movs	r3, #1
 800f986:	617b      	str	r3, [r7, #20]
 800f988:	e001      	b.n	800f98e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f98a:	2300      	movs	r3, #0
 800f98c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d102      	bne.n	800f99a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f994:	f001 f86c 	bl	8010a70 <xTimerCreateTimerTask>
 800f998:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d11b      	bne.n	800f9d8 <vTaskStartScheduler+0x98>
	__asm volatile
 800f9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9a4:	f383 8811 	msr	BASEPRI, r3
 800f9a8:	f3bf 8f6f 	isb	sy
 800f9ac:	f3bf 8f4f 	dsb	sy
 800f9b0:	613b      	str	r3, [r7, #16]
}
 800f9b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f9b4:	4b15      	ldr	r3, [pc, #84]	@ (800fa0c <vTaskStartScheduler+0xcc>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	3354      	adds	r3, #84	@ 0x54
 800f9ba:	4a15      	ldr	r2, [pc, #84]	@ (800fa10 <vTaskStartScheduler+0xd0>)
 800f9bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f9be:	4b15      	ldr	r3, [pc, #84]	@ (800fa14 <vTaskStartScheduler+0xd4>)
 800f9c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f9c6:	4b14      	ldr	r3, [pc, #80]	@ (800fa18 <vTaskStartScheduler+0xd8>)
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f9cc:	4b13      	ldr	r3, [pc, #76]	@ (800fa1c <vTaskStartScheduler+0xdc>)
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f9d2:	f001 fc35 	bl	8011240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f9d6:	e00f      	b.n	800f9f8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9de:	d10b      	bne.n	800f9f8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	60fb      	str	r3, [r7, #12]
}
 800f9f2:	bf00      	nop
 800f9f4:	bf00      	nop
 800f9f6:	e7fd      	b.n	800f9f4 <vTaskStartScheduler+0xb4>
}
 800f9f8:	bf00      	nop
 800f9fa:	3718      	adds	r7, #24
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	08023544 	.word	0x08023544
 800fa04:	080100c5 	.word	0x080100c5
 800fa08:	24033b48 	.word	0x24033b48
 800fa0c:	24033650 	.word	0x24033650
 800fa10:	24001424 	.word	0x24001424
 800fa14:	24033b44 	.word	0x24033b44
 800fa18:	24033b30 	.word	0x24033b30
 800fa1c:	24033b28 	.word	0x24033b28

0800fa20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fa20:	b480      	push	{r7}
 800fa22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fa24:	4b04      	ldr	r3, [pc, #16]	@ (800fa38 <vTaskSuspendAll+0x18>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	4a03      	ldr	r2, [pc, #12]	@ (800fa38 <vTaskSuspendAll+0x18>)
 800fa2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fa2e:	bf00      	nop
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr
 800fa38:	24033b4c 	.word	0x24033b4c

0800fa3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fa42:	2300      	movs	r3, #0
 800fa44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fa46:	2300      	movs	r3, #0
 800fa48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fa4a:	4b42      	ldr	r3, [pc, #264]	@ (800fb54 <xTaskResumeAll+0x118>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d10b      	bne.n	800fa6a <xTaskResumeAll+0x2e>
	__asm volatile
 800fa52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa56:	f383 8811 	msr	BASEPRI, r3
 800fa5a:	f3bf 8f6f 	isb	sy
 800fa5e:	f3bf 8f4f 	dsb	sy
 800fa62:	603b      	str	r3, [r7, #0]
}
 800fa64:	bf00      	nop
 800fa66:	bf00      	nop
 800fa68:	e7fd      	b.n	800fa66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fa6a:	f001 fc8d 	bl	8011388 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fa6e:	4b39      	ldr	r3, [pc, #228]	@ (800fb54 <xTaskResumeAll+0x118>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	3b01      	subs	r3, #1
 800fa74:	4a37      	ldr	r2, [pc, #220]	@ (800fb54 <xTaskResumeAll+0x118>)
 800fa76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa78:	4b36      	ldr	r3, [pc, #216]	@ (800fb54 <xTaskResumeAll+0x118>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d162      	bne.n	800fb46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa80:	4b35      	ldr	r3, [pc, #212]	@ (800fb58 <xTaskResumeAll+0x11c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d05e      	beq.n	800fb46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa88:	e02f      	b.n	800faea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa8a:	4b34      	ldr	r3, [pc, #208]	@ (800fb5c <xTaskResumeAll+0x120>)
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	68db      	ldr	r3, [r3, #12]
 800fa90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	3318      	adds	r3, #24
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fe fe1e 	bl	800e6d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	3304      	adds	r3, #4
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fe fe19 	bl	800e6d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faaa:	4b2d      	ldr	r3, [pc, #180]	@ (800fb60 <xTaskResumeAll+0x124>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d903      	bls.n	800faba <xTaskResumeAll+0x7e>
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fab6:	4a2a      	ldr	r2, [pc, #168]	@ (800fb60 <xTaskResumeAll+0x124>)
 800fab8:	6013      	str	r3, [r2, #0]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fabe:	4613      	mov	r3, r2
 800fac0:	009b      	lsls	r3, r3, #2
 800fac2:	4413      	add	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4a27      	ldr	r2, [pc, #156]	@ (800fb64 <xTaskResumeAll+0x128>)
 800fac8:	441a      	add	r2, r3
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	3304      	adds	r3, #4
 800face:	4619      	mov	r1, r3
 800fad0:	4610      	mov	r0, r2
 800fad2:	f7fe fda4 	bl	800e61e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fada:	4b23      	ldr	r3, [pc, #140]	@ (800fb68 <xTaskResumeAll+0x12c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d302      	bcc.n	800faea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fae4:	4b21      	ldr	r3, [pc, #132]	@ (800fb6c <xTaskResumeAll+0x130>)
 800fae6:	2201      	movs	r2, #1
 800fae8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800faea:	4b1c      	ldr	r3, [pc, #112]	@ (800fb5c <xTaskResumeAll+0x120>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d1cb      	bne.n	800fa8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d001      	beq.n	800fafc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800faf8:	f000 fba0 	bl	801023c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fafc:	4b1c      	ldr	r3, [pc, #112]	@ (800fb70 <xTaskResumeAll+0x134>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d010      	beq.n	800fb2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb08:	f000 f858 	bl	800fbbc <xTaskIncrementTick>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d002      	beq.n	800fb18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fb12:	4b16      	ldr	r3, [pc, #88]	@ (800fb6c <xTaskResumeAll+0x130>)
 800fb14:	2201      	movs	r2, #1
 800fb16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1f1      	bne.n	800fb08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fb24:	4b12      	ldr	r3, [pc, #72]	@ (800fb70 <xTaskResumeAll+0x134>)
 800fb26:	2200      	movs	r2, #0
 800fb28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fb2a:	4b10      	ldr	r3, [pc, #64]	@ (800fb6c <xTaskResumeAll+0x130>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d009      	beq.n	800fb46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fb32:	2301      	movs	r3, #1
 800fb34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fb36:	4b0f      	ldr	r3, [pc, #60]	@ (800fb74 <xTaskResumeAll+0x138>)
 800fb38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb3c:	601a      	str	r2, [r3, #0]
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb46:	f001 fc51 	bl	80113ec <vPortExitCritical>

	return xAlreadyYielded;
 800fb4a:	68bb      	ldr	r3, [r7, #8]
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3710      	adds	r7, #16
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	24033b4c 	.word	0x24033b4c
 800fb58:	24033b24 	.word	0x24033b24
 800fb5c:	24033ae4 	.word	0x24033ae4
 800fb60:	24033b2c 	.word	0x24033b2c
 800fb64:	24033654 	.word	0x24033654
 800fb68:	24033650 	.word	0x24033650
 800fb6c:	24033b38 	.word	0x24033b38
 800fb70:	24033b34 	.word	0x24033b34
 800fb74:	e000ed04 	.word	0xe000ed04

0800fb78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fb7e:	4b05      	ldr	r3, [pc, #20]	@ (800fb94 <xTaskGetTickCount+0x1c>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fb84:	687b      	ldr	r3, [r7, #4]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	370c      	adds	r7, #12
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	24033b28 	.word	0x24033b28

0800fb98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb9e:	f001 fcd3 	bl	8011548 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fba2:	2300      	movs	r3, #0
 800fba4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fba6:	4b04      	ldr	r3, [pc, #16]	@ (800fbb8 <xTaskGetTickCountFromISR+0x20>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fbac:	683b      	ldr	r3, [r7, #0]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3708      	adds	r7, #8
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	24033b28 	.word	0x24033b28

0800fbbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b086      	sub	sp, #24
 800fbc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbc6:	4b4f      	ldr	r3, [pc, #316]	@ (800fd04 <xTaskIncrementTick+0x148>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f040 8090 	bne.w	800fcf0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fbd0:	4b4d      	ldr	r3, [pc, #308]	@ (800fd08 <xTaskIncrementTick+0x14c>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fbd8:	4a4b      	ldr	r2, [pc, #300]	@ (800fd08 <xTaskIncrementTick+0x14c>)
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d121      	bne.n	800fc28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fbe4:	4b49      	ldr	r3, [pc, #292]	@ (800fd0c <xTaskIncrementTick+0x150>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d00b      	beq.n	800fc06 <xTaskIncrementTick+0x4a>
	__asm volatile
 800fbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf2:	f383 8811 	msr	BASEPRI, r3
 800fbf6:	f3bf 8f6f 	isb	sy
 800fbfa:	f3bf 8f4f 	dsb	sy
 800fbfe:	603b      	str	r3, [r7, #0]
}
 800fc00:	bf00      	nop
 800fc02:	bf00      	nop
 800fc04:	e7fd      	b.n	800fc02 <xTaskIncrementTick+0x46>
 800fc06:	4b41      	ldr	r3, [pc, #260]	@ (800fd0c <xTaskIncrementTick+0x150>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	60fb      	str	r3, [r7, #12]
 800fc0c:	4b40      	ldr	r3, [pc, #256]	@ (800fd10 <xTaskIncrementTick+0x154>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a3e      	ldr	r2, [pc, #248]	@ (800fd0c <xTaskIncrementTick+0x150>)
 800fc12:	6013      	str	r3, [r2, #0]
 800fc14:	4a3e      	ldr	r2, [pc, #248]	@ (800fd10 <xTaskIncrementTick+0x154>)
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6013      	str	r3, [r2, #0]
 800fc1a:	4b3e      	ldr	r3, [pc, #248]	@ (800fd14 <xTaskIncrementTick+0x158>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	4a3c      	ldr	r2, [pc, #240]	@ (800fd14 <xTaskIncrementTick+0x158>)
 800fc22:	6013      	str	r3, [r2, #0]
 800fc24:	f000 fb0a 	bl	801023c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc28:	4b3b      	ldr	r3, [pc, #236]	@ (800fd18 <xTaskIncrementTick+0x15c>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d349      	bcc.n	800fcc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc32:	4b36      	ldr	r3, [pc, #216]	@ (800fd0c <xTaskIncrementTick+0x150>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d104      	bne.n	800fc46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc3c:	4b36      	ldr	r3, [pc, #216]	@ (800fd18 <xTaskIncrementTick+0x15c>)
 800fc3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fc42:	601a      	str	r2, [r3, #0]
					break;
 800fc44:	e03f      	b.n	800fcc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc46:	4b31      	ldr	r3, [pc, #196]	@ (800fd0c <xTaskIncrementTick+0x150>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fc56:	693a      	ldr	r2, [r7, #16]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d203      	bcs.n	800fc66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fc5e:	4a2e      	ldr	r2, [pc, #184]	@ (800fd18 <xTaskIncrementTick+0x15c>)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fc64:	e02f      	b.n	800fcc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	3304      	adds	r3, #4
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fe fd34 	bl	800e6d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d004      	beq.n	800fc82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	3318      	adds	r3, #24
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7fe fd2b 	bl	800e6d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc86:	4b25      	ldr	r3, [pc, #148]	@ (800fd1c <xTaskIncrementTick+0x160>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d903      	bls.n	800fc96 <xTaskIncrementTick+0xda>
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc92:	4a22      	ldr	r2, [pc, #136]	@ (800fd1c <xTaskIncrementTick+0x160>)
 800fc94:	6013      	str	r3, [r2, #0]
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc9a:	4613      	mov	r3, r2
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	4413      	add	r3, r2
 800fca0:	009b      	lsls	r3, r3, #2
 800fca2:	4a1f      	ldr	r2, [pc, #124]	@ (800fd20 <xTaskIncrementTick+0x164>)
 800fca4:	441a      	add	r2, r3
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	3304      	adds	r3, #4
 800fcaa:	4619      	mov	r1, r3
 800fcac:	4610      	mov	r0, r2
 800fcae:	f7fe fcb6 	bl	800e61e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcb6:	4b1b      	ldr	r3, [pc, #108]	@ (800fd24 <xTaskIncrementTick+0x168>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d3b8      	bcc.n	800fc32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcc4:	e7b5      	b.n	800fc32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fcc6:	4b17      	ldr	r3, [pc, #92]	@ (800fd24 <xTaskIncrementTick+0x168>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fccc:	4914      	ldr	r1, [pc, #80]	@ (800fd20 <xTaskIncrementTick+0x164>)
 800fcce:	4613      	mov	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	440b      	add	r3, r1
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d901      	bls.n	800fce2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fcde:	2301      	movs	r3, #1
 800fce0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fce2:	4b11      	ldr	r3, [pc, #68]	@ (800fd28 <xTaskIncrementTick+0x16c>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d007      	beq.n	800fcfa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fcea:	2301      	movs	r3, #1
 800fcec:	617b      	str	r3, [r7, #20]
 800fcee:	e004      	b.n	800fcfa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fcf0:	4b0e      	ldr	r3, [pc, #56]	@ (800fd2c <xTaskIncrementTick+0x170>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	4a0d      	ldr	r2, [pc, #52]	@ (800fd2c <xTaskIncrementTick+0x170>)
 800fcf8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fcfa:	697b      	ldr	r3, [r7, #20]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	24033b4c 	.word	0x24033b4c
 800fd08:	24033b28 	.word	0x24033b28
 800fd0c:	24033adc 	.word	0x24033adc
 800fd10:	24033ae0 	.word	0x24033ae0
 800fd14:	24033b3c 	.word	0x24033b3c
 800fd18:	24033b44 	.word	0x24033b44
 800fd1c:	24033b2c 	.word	0x24033b2c
 800fd20:	24033654 	.word	0x24033654
 800fd24:	24033650 	.word	0x24033650
 800fd28:	24033b38 	.word	0x24033b38
 800fd2c:	24033b34 	.word	0x24033b34

0800fd30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd30:	b480      	push	{r7}
 800fd32:	b085      	sub	sp, #20
 800fd34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd36:	4b2b      	ldr	r3, [pc, #172]	@ (800fde4 <vTaskSwitchContext+0xb4>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d003      	beq.n	800fd46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fd3e:	4b2a      	ldr	r3, [pc, #168]	@ (800fde8 <vTaskSwitchContext+0xb8>)
 800fd40:	2201      	movs	r2, #1
 800fd42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fd44:	e047      	b.n	800fdd6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fd46:	4b28      	ldr	r3, [pc, #160]	@ (800fde8 <vTaskSwitchContext+0xb8>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd4c:	4b27      	ldr	r3, [pc, #156]	@ (800fdec <vTaskSwitchContext+0xbc>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	60fb      	str	r3, [r7, #12]
 800fd52:	e011      	b.n	800fd78 <vTaskSwitchContext+0x48>
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d10b      	bne.n	800fd72 <vTaskSwitchContext+0x42>
	__asm volatile
 800fd5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd5e:	f383 8811 	msr	BASEPRI, r3
 800fd62:	f3bf 8f6f 	isb	sy
 800fd66:	f3bf 8f4f 	dsb	sy
 800fd6a:	607b      	str	r3, [r7, #4]
}
 800fd6c:	bf00      	nop
 800fd6e:	bf00      	nop
 800fd70:	e7fd      	b.n	800fd6e <vTaskSwitchContext+0x3e>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	3b01      	subs	r3, #1
 800fd76:	60fb      	str	r3, [r7, #12]
 800fd78:	491d      	ldr	r1, [pc, #116]	@ (800fdf0 <vTaskSwitchContext+0xc0>)
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	4413      	add	r3, r2
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	440b      	add	r3, r1
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d0e3      	beq.n	800fd54 <vTaskSwitchContext+0x24>
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	4613      	mov	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4413      	add	r3, r2
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	4a16      	ldr	r2, [pc, #88]	@ (800fdf0 <vTaskSwitchContext+0xc0>)
 800fd98:	4413      	add	r3, r2
 800fd9a:	60bb      	str	r3, [r7, #8]
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	685a      	ldr	r2, [r3, #4]
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	605a      	str	r2, [r3, #4]
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	685a      	ldr	r2, [r3, #4]
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	3308      	adds	r3, #8
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d104      	bne.n	800fdbc <vTaskSwitchContext+0x8c>
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	685a      	ldr	r2, [r3, #4]
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	605a      	str	r2, [r3, #4]
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	4a0c      	ldr	r2, [pc, #48]	@ (800fdf4 <vTaskSwitchContext+0xc4>)
 800fdc4:	6013      	str	r3, [r2, #0]
 800fdc6:	4a09      	ldr	r2, [pc, #36]	@ (800fdec <vTaskSwitchContext+0xbc>)
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fdcc:	4b09      	ldr	r3, [pc, #36]	@ (800fdf4 <vTaskSwitchContext+0xc4>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	3354      	adds	r3, #84	@ 0x54
 800fdd2:	4a09      	ldr	r2, [pc, #36]	@ (800fdf8 <vTaskSwitchContext+0xc8>)
 800fdd4:	6013      	str	r3, [r2, #0]
}
 800fdd6:	bf00      	nop
 800fdd8:	3714      	adds	r7, #20
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	24033b4c 	.word	0x24033b4c
 800fde8:	24033b38 	.word	0x24033b38
 800fdec:	24033b2c 	.word	0x24033b2c
 800fdf0:	24033654 	.word	0x24033654
 800fdf4:	24033650 	.word	0x24033650
 800fdf8:	24001424 	.word	0x24001424

0800fdfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d10b      	bne.n	800fe24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fe0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe10:	f383 8811 	msr	BASEPRI, r3
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	60fb      	str	r3, [r7, #12]
}
 800fe1e:	bf00      	nop
 800fe20:	bf00      	nop
 800fe22:	e7fd      	b.n	800fe20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe24:	4b07      	ldr	r3, [pc, #28]	@ (800fe44 <vTaskPlaceOnEventList+0x48>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	3318      	adds	r3, #24
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7fe fc1a 	bl	800e666 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe32:	2101      	movs	r1, #1
 800fe34:	6838      	ldr	r0, [r7, #0]
 800fe36:	f000 fdc7 	bl	80109c8 <prvAddCurrentTaskToDelayedList>
}
 800fe3a:	bf00      	nop
 800fe3c:	3710      	adds	r7, #16
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	24033650 	.word	0x24033650

0800fe48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b086      	sub	sp, #24
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d10b      	bne.n	800fe72 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800fe5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe5e:	f383 8811 	msr	BASEPRI, r3
 800fe62:	f3bf 8f6f 	isb	sy
 800fe66:	f3bf 8f4f 	dsb	sy
 800fe6a:	617b      	str	r3, [r7, #20]
}
 800fe6c:	bf00      	nop
 800fe6e:	bf00      	nop
 800fe70:	e7fd      	b.n	800fe6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe72:	4b0a      	ldr	r3, [pc, #40]	@ (800fe9c <vTaskPlaceOnEventListRestricted+0x54>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	3318      	adds	r3, #24
 800fe78:	4619      	mov	r1, r3
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f7fe fbcf 	bl	800e61e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d002      	beq.n	800fe8c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800fe86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fe8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fe8c:	6879      	ldr	r1, [r7, #4]
 800fe8e:	68b8      	ldr	r0, [r7, #8]
 800fe90:	f000 fd9a 	bl	80109c8 <prvAddCurrentTaskToDelayedList>
	}
 800fe94:	bf00      	nop
 800fe96:	3718      	adds	r7, #24
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	24033650 	.word	0x24033650

0800fea0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b086      	sub	sp, #24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d10b      	bne.n	800fece <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800feb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feba:	f383 8811 	msr	BASEPRI, r3
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	60fb      	str	r3, [r7, #12]
}
 800fec8:	bf00      	nop
 800feca:	bf00      	nop
 800fecc:	e7fd      	b.n	800feca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	3318      	adds	r3, #24
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fe fc00 	bl	800e6d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fed8:	4b1d      	ldr	r3, [pc, #116]	@ (800ff50 <xTaskRemoveFromEventList+0xb0>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d11d      	bne.n	800ff1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	3304      	adds	r3, #4
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fe fbf7 	bl	800e6d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feee:	4b19      	ldr	r3, [pc, #100]	@ (800ff54 <xTaskRemoveFromEventList+0xb4>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d903      	bls.n	800fefe <xTaskRemoveFromEventList+0x5e>
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fefa:	4a16      	ldr	r2, [pc, #88]	@ (800ff54 <xTaskRemoveFromEventList+0xb4>)
 800fefc:	6013      	str	r3, [r2, #0]
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff02:	4613      	mov	r3, r2
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	4413      	add	r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	4a13      	ldr	r2, [pc, #76]	@ (800ff58 <xTaskRemoveFromEventList+0xb8>)
 800ff0c:	441a      	add	r2, r3
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	3304      	adds	r3, #4
 800ff12:	4619      	mov	r1, r3
 800ff14:	4610      	mov	r0, r2
 800ff16:	f7fe fb82 	bl	800e61e <vListInsertEnd>
 800ff1a:	e005      	b.n	800ff28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	3318      	adds	r3, #24
 800ff20:	4619      	mov	r1, r3
 800ff22:	480e      	ldr	r0, [pc, #56]	@ (800ff5c <xTaskRemoveFromEventList+0xbc>)
 800ff24:	f7fe fb7b 	bl	800e61e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ff60 <xTaskRemoveFromEventList+0xc0>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d905      	bls.n	800ff42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff36:	2301      	movs	r3, #1
 800ff38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ff64 <xTaskRemoveFromEventList+0xc4>)
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	601a      	str	r2, [r3, #0]
 800ff40:	e001      	b.n	800ff46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ff42:	2300      	movs	r3, #0
 800ff44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff46:	697b      	ldr	r3, [r7, #20]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3718      	adds	r7, #24
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	24033b4c 	.word	0x24033b4c
 800ff54:	24033b2c 	.word	0x24033b2c
 800ff58:	24033654 	.word	0x24033654
 800ff5c:	24033ae4 	.word	0x24033ae4
 800ff60:	24033650 	.word	0x24033650
 800ff64:	24033b38 	.word	0x24033b38

0800ff68 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d10b      	bne.n	800ff8e <vTaskSetTimeOutState+0x26>
	__asm volatile
 800ff76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff7a:	f383 8811 	msr	BASEPRI, r3
 800ff7e:	f3bf 8f6f 	isb	sy
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	60fb      	str	r3, [r7, #12]
}
 800ff88:	bf00      	nop
 800ff8a:	bf00      	nop
 800ff8c:	e7fd      	b.n	800ff8a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800ff8e:	f001 f9fb 	bl	8011388 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff92:	4b07      	ldr	r3, [pc, #28]	@ (800ffb0 <vTaskSetTimeOutState+0x48>)
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ff9a:	4b06      	ldr	r3, [pc, #24]	@ (800ffb4 <vTaskSetTimeOutState+0x4c>)
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ffa2:	f001 fa23 	bl	80113ec <vPortExitCritical>
}
 800ffa6:	bf00      	nop
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	24033b3c 	.word	0x24033b3c
 800ffb4:	24033b28 	.word	0x24033b28

0800ffb8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ffc0:	4b06      	ldr	r3, [pc, #24]	@ (800ffdc <vTaskInternalSetTimeOutState+0x24>)
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ffc8:	4b05      	ldr	r3, [pc, #20]	@ (800ffe0 <vTaskInternalSetTimeOutState+0x28>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	605a      	str	r2, [r3, #4]
}
 800ffd0:	bf00      	nop
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr
 800ffdc:	24033b3c 	.word	0x24033b3c
 800ffe0:	24033b28 	.word	0x24033b28

0800ffe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b088      	sub	sp, #32
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d10b      	bne.n	801000c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800fff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fff8:	f383 8811 	msr	BASEPRI, r3
 800fffc:	f3bf 8f6f 	isb	sy
 8010000:	f3bf 8f4f 	dsb	sy
 8010004:	613b      	str	r3, [r7, #16]
}
 8010006:	bf00      	nop
 8010008:	bf00      	nop
 801000a:	e7fd      	b.n	8010008 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d10b      	bne.n	801002a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010016:	f383 8811 	msr	BASEPRI, r3
 801001a:	f3bf 8f6f 	isb	sy
 801001e:	f3bf 8f4f 	dsb	sy
 8010022:	60fb      	str	r3, [r7, #12]
}
 8010024:	bf00      	nop
 8010026:	bf00      	nop
 8010028:	e7fd      	b.n	8010026 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801002a:	f001 f9ad 	bl	8011388 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801002e:	4b1d      	ldr	r3, [pc, #116]	@ (80100a4 <xTaskCheckForTimeOut+0xc0>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	69ba      	ldr	r2, [r7, #24]
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010046:	d102      	bne.n	801004e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010048:	2300      	movs	r3, #0
 801004a:	61fb      	str	r3, [r7, #28]
 801004c:	e023      	b.n	8010096 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	4b15      	ldr	r3, [pc, #84]	@ (80100a8 <xTaskCheckForTimeOut+0xc4>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	429a      	cmp	r2, r3
 8010058:	d007      	beq.n	801006a <xTaskCheckForTimeOut+0x86>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	69ba      	ldr	r2, [r7, #24]
 8010060:	429a      	cmp	r2, r3
 8010062:	d302      	bcc.n	801006a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010064:	2301      	movs	r3, #1
 8010066:	61fb      	str	r3, [r7, #28]
 8010068:	e015      	b.n	8010096 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	697a      	ldr	r2, [r7, #20]
 8010070:	429a      	cmp	r2, r3
 8010072:	d20b      	bcs.n	801008c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	1ad2      	subs	r2, r2, r3
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f7ff ff99 	bl	800ffb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010086:	2300      	movs	r3, #0
 8010088:	61fb      	str	r3, [r7, #28]
 801008a:	e004      	b.n	8010096 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	2200      	movs	r2, #0
 8010090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010092:	2301      	movs	r3, #1
 8010094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010096:	f001 f9a9 	bl	80113ec <vPortExitCritical>

	return xReturn;
 801009a:	69fb      	ldr	r3, [r7, #28]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3720      	adds	r7, #32
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	24033b28 	.word	0x24033b28
 80100a8:	24033b3c 	.word	0x24033b3c

080100ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100ac:	b480      	push	{r7}
 80100ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80100b0:	4b03      	ldr	r3, [pc, #12]	@ (80100c0 <vTaskMissedYield+0x14>)
 80100b2:	2201      	movs	r2, #1
 80100b4:	601a      	str	r2, [r3, #0]
}
 80100b6:	bf00      	nop
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr
 80100c0:	24033b38 	.word	0x24033b38

080100c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80100cc:	f000 f852 	bl	8010174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80100d0:	4b06      	ldr	r3, [pc, #24]	@ (80100ec <prvIdleTask+0x28>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d9f9      	bls.n	80100cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80100d8:	4b05      	ldr	r3, [pc, #20]	@ (80100f0 <prvIdleTask+0x2c>)
 80100da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100de:	601a      	str	r2, [r3, #0]
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80100e8:	e7f0      	b.n	80100cc <prvIdleTask+0x8>
 80100ea:	bf00      	nop
 80100ec:	24033654 	.word	0x24033654
 80100f0:	e000ed04 	.word	0xe000ed04

080100f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100fa:	2300      	movs	r3, #0
 80100fc:	607b      	str	r3, [r7, #4]
 80100fe:	e00c      	b.n	801011a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	4613      	mov	r3, r2
 8010104:	009b      	lsls	r3, r3, #2
 8010106:	4413      	add	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	4a12      	ldr	r2, [pc, #72]	@ (8010154 <prvInitialiseTaskLists+0x60>)
 801010c:	4413      	add	r3, r2
 801010e:	4618      	mov	r0, r3
 8010110:	f7fe fa58 	bl	800e5c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	3301      	adds	r3, #1
 8010118:	607b      	str	r3, [r7, #4]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2b37      	cmp	r3, #55	@ 0x37
 801011e:	d9ef      	bls.n	8010100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010120:	480d      	ldr	r0, [pc, #52]	@ (8010158 <prvInitialiseTaskLists+0x64>)
 8010122:	f7fe fa4f 	bl	800e5c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010126:	480d      	ldr	r0, [pc, #52]	@ (801015c <prvInitialiseTaskLists+0x68>)
 8010128:	f7fe fa4c 	bl	800e5c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801012c:	480c      	ldr	r0, [pc, #48]	@ (8010160 <prvInitialiseTaskLists+0x6c>)
 801012e:	f7fe fa49 	bl	800e5c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010132:	480c      	ldr	r0, [pc, #48]	@ (8010164 <prvInitialiseTaskLists+0x70>)
 8010134:	f7fe fa46 	bl	800e5c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010138:	480b      	ldr	r0, [pc, #44]	@ (8010168 <prvInitialiseTaskLists+0x74>)
 801013a:	f7fe fa43 	bl	800e5c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801013e:	4b0b      	ldr	r3, [pc, #44]	@ (801016c <prvInitialiseTaskLists+0x78>)
 8010140:	4a05      	ldr	r2, [pc, #20]	@ (8010158 <prvInitialiseTaskLists+0x64>)
 8010142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010144:	4b0a      	ldr	r3, [pc, #40]	@ (8010170 <prvInitialiseTaskLists+0x7c>)
 8010146:	4a05      	ldr	r2, [pc, #20]	@ (801015c <prvInitialiseTaskLists+0x68>)
 8010148:	601a      	str	r2, [r3, #0]
}
 801014a:	bf00      	nop
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	24033654 	.word	0x24033654
 8010158:	24033ab4 	.word	0x24033ab4
 801015c:	24033ac8 	.word	0x24033ac8
 8010160:	24033ae4 	.word	0x24033ae4
 8010164:	24033af8 	.word	0x24033af8
 8010168:	24033b10 	.word	0x24033b10
 801016c:	24033adc 	.word	0x24033adc
 8010170:	24033ae0 	.word	0x24033ae0

08010174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801017a:	e019      	b.n	80101b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801017c:	f001 f904 	bl	8011388 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010180:	4b10      	ldr	r3, [pc, #64]	@ (80101c4 <prvCheckTasksWaitingTermination+0x50>)
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	3304      	adds	r3, #4
 801018c:	4618      	mov	r0, r3
 801018e:	f7fe faa3 	bl	800e6d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010192:	4b0d      	ldr	r3, [pc, #52]	@ (80101c8 <prvCheckTasksWaitingTermination+0x54>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	3b01      	subs	r3, #1
 8010198:	4a0b      	ldr	r2, [pc, #44]	@ (80101c8 <prvCheckTasksWaitingTermination+0x54>)
 801019a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801019c:	4b0b      	ldr	r3, [pc, #44]	@ (80101cc <prvCheckTasksWaitingTermination+0x58>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	3b01      	subs	r3, #1
 80101a2:	4a0a      	ldr	r2, [pc, #40]	@ (80101cc <prvCheckTasksWaitingTermination+0x58>)
 80101a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80101a6:	f001 f921 	bl	80113ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 f810 	bl	80101d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101b0:	4b06      	ldr	r3, [pc, #24]	@ (80101cc <prvCheckTasksWaitingTermination+0x58>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d1e1      	bne.n	801017c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80101b8:	bf00      	nop
 80101ba:	bf00      	nop
 80101bc:	3708      	adds	r7, #8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	24033af8 	.word	0x24033af8
 80101c8:	24033b24 	.word	0x24033b24
 80101cc:	24033b0c 	.word	0x24033b0c

080101d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	3354      	adds	r3, #84	@ 0x54
 80101dc:	4618      	mov	r0, r3
 80101de:	f012 f959 	bl	8022494 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d108      	bne.n	80101fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101f0:	4618      	mov	r0, r3
 80101f2:	f001 fab9 	bl	8011768 <vPortFree>
				vPortFree( pxTCB );
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f001 fab6 	bl	8011768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80101fc:	e019      	b.n	8010232 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010204:	2b01      	cmp	r3, #1
 8010206:	d103      	bne.n	8010210 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f001 faad 	bl	8011768 <vPortFree>
	}
 801020e:	e010      	b.n	8010232 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010216:	2b02      	cmp	r3, #2
 8010218:	d00b      	beq.n	8010232 <prvDeleteTCB+0x62>
	__asm volatile
 801021a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801021e:	f383 8811 	msr	BASEPRI, r3
 8010222:	f3bf 8f6f 	isb	sy
 8010226:	f3bf 8f4f 	dsb	sy
 801022a:	60fb      	str	r3, [r7, #12]
}
 801022c:	bf00      	nop
 801022e:	bf00      	nop
 8010230:	e7fd      	b.n	801022e <prvDeleteTCB+0x5e>
	}
 8010232:	bf00      	nop
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010242:	4b0c      	ldr	r3, [pc, #48]	@ (8010274 <prvResetNextTaskUnblockTime+0x38>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d104      	bne.n	8010256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801024c:	4b0a      	ldr	r3, [pc, #40]	@ (8010278 <prvResetNextTaskUnblockTime+0x3c>)
 801024e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010254:	e008      	b.n	8010268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010256:	4b07      	ldr	r3, [pc, #28]	@ (8010274 <prvResetNextTaskUnblockTime+0x38>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	4a04      	ldr	r2, [pc, #16]	@ (8010278 <prvResetNextTaskUnblockTime+0x3c>)
 8010266:	6013      	str	r3, [r2, #0]
}
 8010268:	bf00      	nop
 801026a:	370c      	adds	r7, #12
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr
 8010274:	24033adc 	.word	0x24033adc
 8010278:	24033b44 	.word	0x24033b44

0801027c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010282:	4b05      	ldr	r3, [pc, #20]	@ (8010298 <xTaskGetCurrentTaskHandle+0x1c>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010288:	687b      	ldr	r3, [r7, #4]
	}
 801028a:	4618      	mov	r0, r3
 801028c:	370c      	adds	r7, #12
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	24033650 	.word	0x24033650

0801029c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102a2:	4b0b      	ldr	r3, [pc, #44]	@ (80102d0 <xTaskGetSchedulerState+0x34>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d102      	bne.n	80102b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80102aa:	2301      	movs	r3, #1
 80102ac:	607b      	str	r3, [r7, #4]
 80102ae:	e008      	b.n	80102c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102b0:	4b08      	ldr	r3, [pc, #32]	@ (80102d4 <xTaskGetSchedulerState+0x38>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d102      	bne.n	80102be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80102b8:	2302      	movs	r3, #2
 80102ba:	607b      	str	r3, [r7, #4]
 80102bc:	e001      	b.n	80102c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80102be:	2300      	movs	r3, #0
 80102c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80102c2:	687b      	ldr	r3, [r7, #4]
	}
 80102c4:	4618      	mov	r0, r3
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr
 80102d0:	24033b30 	.word	0x24033b30
 80102d4:	24033b4c 	.word	0x24033b4c

080102d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80102e4:	2300      	movs	r3, #0
 80102e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d051      	beq.n	8010392 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102f2:	4b2a      	ldr	r3, [pc, #168]	@ (801039c <xTaskPriorityInherit+0xc4>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d241      	bcs.n	8010380 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	699b      	ldr	r3, [r3, #24]
 8010300:	2b00      	cmp	r3, #0
 8010302:	db06      	blt.n	8010312 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010304:	4b25      	ldr	r3, [pc, #148]	@ (801039c <xTaskPriorityInherit+0xc4>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801030a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	6959      	ldr	r1, [r3, #20]
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801031a:	4613      	mov	r3, r2
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	4413      	add	r3, r2
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	4a1f      	ldr	r2, [pc, #124]	@ (80103a0 <xTaskPriorityInherit+0xc8>)
 8010324:	4413      	add	r3, r2
 8010326:	4299      	cmp	r1, r3
 8010328:	d122      	bne.n	8010370 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	3304      	adds	r3, #4
 801032e:	4618      	mov	r0, r3
 8010330:	f7fe f9d2 	bl	800e6d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010334:	4b19      	ldr	r3, [pc, #100]	@ (801039c <xTaskPriorityInherit+0xc4>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010342:	4b18      	ldr	r3, [pc, #96]	@ (80103a4 <xTaskPriorityInherit+0xcc>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	429a      	cmp	r2, r3
 8010348:	d903      	bls.n	8010352 <xTaskPriorityInherit+0x7a>
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801034e:	4a15      	ldr	r2, [pc, #84]	@ (80103a4 <xTaskPriorityInherit+0xcc>)
 8010350:	6013      	str	r3, [r2, #0]
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010356:	4613      	mov	r3, r2
 8010358:	009b      	lsls	r3, r3, #2
 801035a:	4413      	add	r3, r2
 801035c:	009b      	lsls	r3, r3, #2
 801035e:	4a10      	ldr	r2, [pc, #64]	@ (80103a0 <xTaskPriorityInherit+0xc8>)
 8010360:	441a      	add	r2, r3
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	3304      	adds	r3, #4
 8010366:	4619      	mov	r1, r3
 8010368:	4610      	mov	r0, r2
 801036a:	f7fe f958 	bl	800e61e <vListInsertEnd>
 801036e:	e004      	b.n	801037a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010370:	4b0a      	ldr	r3, [pc, #40]	@ (801039c <xTaskPriorityInherit+0xc4>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801037a:	2301      	movs	r3, #1
 801037c:	60fb      	str	r3, [r7, #12]
 801037e:	e008      	b.n	8010392 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010384:	4b05      	ldr	r3, [pc, #20]	@ (801039c <xTaskPriorityInherit+0xc4>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801038a:	429a      	cmp	r2, r3
 801038c:	d201      	bcs.n	8010392 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801038e:	2301      	movs	r3, #1
 8010390:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010392:	68fb      	ldr	r3, [r7, #12]
	}
 8010394:	4618      	mov	r0, r3
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	24033650 	.word	0x24033650
 80103a0:	24033654 	.word	0x24033654
 80103a4:	24033b2c 	.word	0x24033b2c

080103a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b086      	sub	sp, #24
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80103b4:	2300      	movs	r3, #0
 80103b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d058      	beq.n	8010470 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80103be:	4b2f      	ldr	r3, [pc, #188]	@ (801047c <xTaskPriorityDisinherit+0xd4>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	693a      	ldr	r2, [r7, #16]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d00b      	beq.n	80103e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80103c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103cc:	f383 8811 	msr	BASEPRI, r3
 80103d0:	f3bf 8f6f 	isb	sy
 80103d4:	f3bf 8f4f 	dsb	sy
 80103d8:	60fb      	str	r3, [r7, #12]
}
 80103da:	bf00      	nop
 80103dc:	bf00      	nop
 80103de:	e7fd      	b.n	80103dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d10b      	bne.n	8010400 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80103e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ec:	f383 8811 	msr	BASEPRI, r3
 80103f0:	f3bf 8f6f 	isb	sy
 80103f4:	f3bf 8f4f 	dsb	sy
 80103f8:	60bb      	str	r3, [r7, #8]
}
 80103fa:	bf00      	nop
 80103fc:	bf00      	nop
 80103fe:	e7fd      	b.n	80103fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010404:	1e5a      	subs	r2, r3, #1
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010412:	429a      	cmp	r2, r3
 8010414:	d02c      	beq.n	8010470 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801041a:	2b00      	cmp	r3, #0
 801041c:	d128      	bne.n	8010470 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	3304      	adds	r3, #4
 8010422:	4618      	mov	r0, r3
 8010424:	f7fe f958 	bl	800e6d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010434:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010440:	4b0f      	ldr	r3, [pc, #60]	@ (8010480 <xTaskPriorityDisinherit+0xd8>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	429a      	cmp	r2, r3
 8010446:	d903      	bls.n	8010450 <xTaskPriorityDisinherit+0xa8>
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801044c:	4a0c      	ldr	r2, [pc, #48]	@ (8010480 <xTaskPriorityDisinherit+0xd8>)
 801044e:	6013      	str	r3, [r2, #0]
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010454:	4613      	mov	r3, r2
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	4413      	add	r3, r2
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	4a09      	ldr	r2, [pc, #36]	@ (8010484 <xTaskPriorityDisinherit+0xdc>)
 801045e:	441a      	add	r2, r3
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	3304      	adds	r3, #4
 8010464:	4619      	mov	r1, r3
 8010466:	4610      	mov	r0, r2
 8010468:	f7fe f8d9 	bl	800e61e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801046c:	2301      	movs	r3, #1
 801046e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010470:	697b      	ldr	r3, [r7, #20]
	}
 8010472:	4618      	mov	r0, r3
 8010474:	3718      	adds	r7, #24
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	24033650 	.word	0x24033650
 8010480:	24033b2c 	.word	0x24033b2c
 8010484:	24033654 	.word	0x24033654

08010488 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010488:	b580      	push	{r7, lr}
 801048a:	b088      	sub	sp, #32
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010496:	2301      	movs	r3, #1
 8010498:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d06c      	beq.n	801057a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d10b      	bne.n	80104c0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80104a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104ac:	f383 8811 	msr	BASEPRI, r3
 80104b0:	f3bf 8f6f 	isb	sy
 80104b4:	f3bf 8f4f 	dsb	sy
 80104b8:	60fb      	str	r3, [r7, #12]
}
 80104ba:	bf00      	nop
 80104bc:	bf00      	nop
 80104be:	e7fd      	b.n	80104bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80104c4:	683a      	ldr	r2, [r7, #0]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d902      	bls.n	80104d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	61fb      	str	r3, [r7, #28]
 80104ce:	e002      	b.n	80104d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80104d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104da:	69fa      	ldr	r2, [r7, #28]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d04c      	beq.n	801057a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104e4:	697a      	ldr	r2, [r7, #20]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d147      	bne.n	801057a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80104ea:	4b26      	ldr	r3, [pc, #152]	@ (8010584 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	69ba      	ldr	r2, [r7, #24]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d10b      	bne.n	801050c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80104f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104f8:	f383 8811 	msr	BASEPRI, r3
 80104fc:	f3bf 8f6f 	isb	sy
 8010500:	f3bf 8f4f 	dsb	sy
 8010504:	60bb      	str	r3, [r7, #8]
}
 8010506:	bf00      	nop
 8010508:	bf00      	nop
 801050a:	e7fd      	b.n	8010508 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010510:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	69fa      	ldr	r2, [r7, #28]
 8010516:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010518:	69bb      	ldr	r3, [r7, #24]
 801051a:	699b      	ldr	r3, [r3, #24]
 801051c:	2b00      	cmp	r3, #0
 801051e:	db04      	blt.n	801052a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	6959      	ldr	r1, [r3, #20]
 801052e:	693a      	ldr	r2, [r7, #16]
 8010530:	4613      	mov	r3, r2
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	4413      	add	r3, r2
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	4a13      	ldr	r2, [pc, #76]	@ (8010588 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801053a:	4413      	add	r3, r2
 801053c:	4299      	cmp	r1, r3
 801053e:	d11c      	bne.n	801057a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	3304      	adds	r3, #4
 8010544:	4618      	mov	r0, r3
 8010546:	f7fe f8c7 	bl	800e6d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801054a:	69bb      	ldr	r3, [r7, #24]
 801054c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801054e:	4b0f      	ldr	r3, [pc, #60]	@ (801058c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	429a      	cmp	r2, r3
 8010554:	d903      	bls.n	801055e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801055a:	4a0c      	ldr	r2, [pc, #48]	@ (801058c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801055c:	6013      	str	r3, [r2, #0]
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010562:	4613      	mov	r3, r2
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	4413      	add	r3, r2
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	4a07      	ldr	r2, [pc, #28]	@ (8010588 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801056c:	441a      	add	r2, r3
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	3304      	adds	r3, #4
 8010572:	4619      	mov	r1, r3
 8010574:	4610      	mov	r0, r2
 8010576:	f7fe f852 	bl	800e61e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801057a:	bf00      	nop
 801057c:	3720      	adds	r7, #32
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	24033650 	.word	0x24033650
 8010588:	24033654 	.word	0x24033654
 801058c:	24033b2c 	.word	0x24033b2c

08010590 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010590:	b480      	push	{r7}
 8010592:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010594:	4b07      	ldr	r3, [pc, #28]	@ (80105b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d004      	beq.n	80105a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801059c:	4b05      	ldr	r3, [pc, #20]	@ (80105b4 <pvTaskIncrementMutexHeldCount+0x24>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105a2:	3201      	adds	r2, #1
 80105a4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80105a6:	4b03      	ldr	r3, [pc, #12]	@ (80105b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80105a8:	681b      	ldr	r3, [r3, #0]
	}
 80105aa:	4618      	mov	r0, r3
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr
 80105b4:	24033650 	.word	0x24033650

080105b8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b086      	sub	sp, #24
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	607a      	str	r2, [r7, #4]
 80105c4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80105c6:	f000 fedf 	bl	8011388 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80105ca:	4b29      	ldr	r3, [pc, #164]	@ (8010670 <xTaskNotifyWait+0xb8>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d01c      	beq.n	8010612 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80105d8:	4b25      	ldr	r3, [pc, #148]	@ (8010670 <xTaskNotifyWait+0xb8>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	43d2      	mvns	r2, r2
 80105e4:	400a      	ands	r2, r1
 80105e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80105ea:	4b21      	ldr	r3, [pc, #132]	@ (8010670 <xTaskNotifyWait+0xb8>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2201      	movs	r2, #1
 80105f0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00b      	beq.n	8010612 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80105fa:	2101      	movs	r1, #1
 80105fc:	6838      	ldr	r0, [r7, #0]
 80105fe:	f000 f9e3 	bl	80109c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010602:	4b1c      	ldr	r3, [pc, #112]	@ (8010674 <xTaskNotifyWait+0xbc>)
 8010604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010608:	601a      	str	r2, [r3, #0]
 801060a:	f3bf 8f4f 	dsb	sy
 801060e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010612:	f000 feeb 	bl	80113ec <vPortExitCritical>

		taskENTER_CRITICAL();
 8010616:	f000 feb7 	bl	8011388 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d005      	beq.n	801062c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010620:	4b13      	ldr	r3, [pc, #76]	@ (8010670 <xTaskNotifyWait+0xb8>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801062c:	4b10      	ldr	r3, [pc, #64]	@ (8010670 <xTaskNotifyWait+0xb8>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010634:	b2db      	uxtb	r3, r3
 8010636:	2b02      	cmp	r3, #2
 8010638:	d002      	beq.n	8010640 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801063a:	2300      	movs	r3, #0
 801063c:	617b      	str	r3, [r7, #20]
 801063e:	e00a      	b.n	8010656 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010640:	4b0b      	ldr	r3, [pc, #44]	@ (8010670 <xTaskNotifyWait+0xb8>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	43d2      	mvns	r2, r2
 801064c:	400a      	ands	r2, r1
 801064e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8010652:	2301      	movs	r3, #1
 8010654:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010656:	4b06      	ldr	r3, [pc, #24]	@ (8010670 <xTaskNotifyWait+0xb8>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2200      	movs	r2, #0
 801065c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8010660:	f000 fec4 	bl	80113ec <vPortExitCritical>

		return xReturn;
 8010664:	697b      	ldr	r3, [r7, #20]
	}
 8010666:	4618      	mov	r0, r3
 8010668:	3718      	adds	r7, #24
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	24033650 	.word	0x24033650
 8010674:	e000ed04 	.word	0xe000ed04

08010678 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010678:	b580      	push	{r7, lr}
 801067a:	b08a      	sub	sp, #40	@ 0x28
 801067c:	af00      	add	r7, sp, #0
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	603b      	str	r3, [r7, #0]
 8010684:	4613      	mov	r3, r2
 8010686:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010688:	2301      	movs	r3, #1
 801068a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d10b      	bne.n	80106aa <xTaskGenericNotify+0x32>
	__asm volatile
 8010692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010696:	f383 8811 	msr	BASEPRI, r3
 801069a:	f3bf 8f6f 	isb	sy
 801069e:	f3bf 8f4f 	dsb	sy
 80106a2:	61bb      	str	r3, [r7, #24]
}
 80106a4:	bf00      	nop
 80106a6:	bf00      	nop
 80106a8:	e7fd      	b.n	80106a6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80106ae:	f000 fe6b 	bl	8011388 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d004      	beq.n	80106c2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80106b8:	6a3b      	ldr	r3, [r7, #32]
 80106ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80106c2:	6a3b      	ldr	r3, [r7, #32]
 80106c4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80106c8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80106ca:	6a3b      	ldr	r3, [r7, #32]
 80106cc:	2202      	movs	r2, #2
 80106ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80106d2:	79fb      	ldrb	r3, [r7, #7]
 80106d4:	2b04      	cmp	r3, #4
 80106d6:	d82e      	bhi.n	8010736 <xTaskGenericNotify+0xbe>
 80106d8:	a201      	add	r2, pc, #4	@ (adr r2, 80106e0 <xTaskGenericNotify+0x68>)
 80106da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106de:	bf00      	nop
 80106e0:	0801075b 	.word	0x0801075b
 80106e4:	080106f5 	.word	0x080106f5
 80106e8:	08010707 	.word	0x08010707
 80106ec:	08010717 	.word	0x08010717
 80106f0:	08010721 	.word	0x08010721
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80106f4:	6a3b      	ldr	r3, [r7, #32]
 80106f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	431a      	orrs	r2, r3
 80106fe:	6a3b      	ldr	r3, [r7, #32]
 8010700:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010704:	e02c      	b.n	8010760 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010706:	6a3b      	ldr	r3, [r7, #32]
 8010708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801070c:	1c5a      	adds	r2, r3, #1
 801070e:	6a3b      	ldr	r3, [r7, #32]
 8010710:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010714:	e024      	b.n	8010760 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010716:	6a3b      	ldr	r3, [r7, #32]
 8010718:	68ba      	ldr	r2, [r7, #8]
 801071a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801071e:	e01f      	b.n	8010760 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010720:	7ffb      	ldrb	r3, [r7, #31]
 8010722:	2b02      	cmp	r3, #2
 8010724:	d004      	beq.n	8010730 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010726:	6a3b      	ldr	r3, [r7, #32]
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801072e:	e017      	b.n	8010760 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8010730:	2300      	movs	r3, #0
 8010732:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8010734:	e014      	b.n	8010760 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010736:	6a3b      	ldr	r3, [r7, #32]
 8010738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801073c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010740:	d00d      	beq.n	801075e <xTaskGenericNotify+0xe6>
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010746:	f383 8811 	msr	BASEPRI, r3
 801074a:	f3bf 8f6f 	isb	sy
 801074e:	f3bf 8f4f 	dsb	sy
 8010752:	617b      	str	r3, [r7, #20]
}
 8010754:	bf00      	nop
 8010756:	bf00      	nop
 8010758:	e7fd      	b.n	8010756 <xTaskGenericNotify+0xde>
					break;
 801075a:	bf00      	nop
 801075c:	e000      	b.n	8010760 <xTaskGenericNotify+0xe8>

					break;
 801075e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010760:	7ffb      	ldrb	r3, [r7, #31]
 8010762:	2b01      	cmp	r3, #1
 8010764:	d13b      	bne.n	80107de <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010766:	6a3b      	ldr	r3, [r7, #32]
 8010768:	3304      	adds	r3, #4
 801076a:	4618      	mov	r0, r3
 801076c:	f7fd ffb4 	bl	800e6d8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010770:	6a3b      	ldr	r3, [r7, #32]
 8010772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010774:	4b1d      	ldr	r3, [pc, #116]	@ (80107ec <xTaskGenericNotify+0x174>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	429a      	cmp	r2, r3
 801077a:	d903      	bls.n	8010784 <xTaskGenericNotify+0x10c>
 801077c:	6a3b      	ldr	r3, [r7, #32]
 801077e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010780:	4a1a      	ldr	r2, [pc, #104]	@ (80107ec <xTaskGenericNotify+0x174>)
 8010782:	6013      	str	r3, [r2, #0]
 8010784:	6a3b      	ldr	r3, [r7, #32]
 8010786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010788:	4613      	mov	r3, r2
 801078a:	009b      	lsls	r3, r3, #2
 801078c:	4413      	add	r3, r2
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	4a17      	ldr	r2, [pc, #92]	@ (80107f0 <xTaskGenericNotify+0x178>)
 8010792:	441a      	add	r2, r3
 8010794:	6a3b      	ldr	r3, [r7, #32]
 8010796:	3304      	adds	r3, #4
 8010798:	4619      	mov	r1, r3
 801079a:	4610      	mov	r0, r2
 801079c:	f7fd ff3f 	bl	800e61e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80107a0:	6a3b      	ldr	r3, [r7, #32]
 80107a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00b      	beq.n	80107c0 <xTaskGenericNotify+0x148>
	__asm volatile
 80107a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ac:	f383 8811 	msr	BASEPRI, r3
 80107b0:	f3bf 8f6f 	isb	sy
 80107b4:	f3bf 8f4f 	dsb	sy
 80107b8:	613b      	str	r3, [r7, #16]
}
 80107ba:	bf00      	nop
 80107bc:	bf00      	nop
 80107be:	e7fd      	b.n	80107bc <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80107c0:	6a3b      	ldr	r3, [r7, #32]
 80107c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107c4:	4b0b      	ldr	r3, [pc, #44]	@ (80107f4 <xTaskGenericNotify+0x17c>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d907      	bls.n	80107de <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80107ce:	4b0a      	ldr	r3, [pc, #40]	@ (80107f8 <xTaskGenericNotify+0x180>)
 80107d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107d4:	601a      	str	r2, [r3, #0]
 80107d6:	f3bf 8f4f 	dsb	sy
 80107da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80107de:	f000 fe05 	bl	80113ec <vPortExitCritical>

		return xReturn;
 80107e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3728      	adds	r7, #40	@ 0x28
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	24033b2c 	.word	0x24033b2c
 80107f0:	24033654 	.word	0x24033654
 80107f4:	24033650 	.word	0x24033650
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b08e      	sub	sp, #56	@ 0x38
 8010800:	af00      	add	r7, sp, #0
 8010802:	60f8      	str	r0, [r7, #12]
 8010804:	60b9      	str	r1, [r7, #8]
 8010806:	603b      	str	r3, [r7, #0]
 8010808:	4613      	mov	r3, r2
 801080a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801080c:	2301      	movs	r3, #1
 801080e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d10b      	bne.n	801082e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801081a:	f383 8811 	msr	BASEPRI, r3
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f3bf 8f4f 	dsb	sy
 8010826:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010828:	bf00      	nop
 801082a:	bf00      	nop
 801082c:	e7fd      	b.n	801082a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801082e:	f000 fe8b 	bl	8011548 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8010836:	f3ef 8211 	mrs	r2, BASEPRI
 801083a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801083e:	f383 8811 	msr	BASEPRI, r3
 8010842:	f3bf 8f6f 	isb	sy
 8010846:	f3bf 8f4f 	dsb	sy
 801084a:	623a      	str	r2, [r7, #32]
 801084c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801084e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010850:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d004      	beq.n	8010862 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801085a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010864:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801086c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801086e:	2202      	movs	r2, #2
 8010870:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8010874:	79fb      	ldrb	r3, [r7, #7]
 8010876:	2b04      	cmp	r3, #4
 8010878:	d82e      	bhi.n	80108d8 <xTaskGenericNotifyFromISR+0xdc>
 801087a:	a201      	add	r2, pc, #4	@ (adr r2, 8010880 <xTaskGenericNotifyFromISR+0x84>)
 801087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010880:	080108fd 	.word	0x080108fd
 8010884:	08010895 	.word	0x08010895
 8010888:	080108a7 	.word	0x080108a7
 801088c:	080108b7 	.word	0x080108b7
 8010890:	080108c1 	.word	0x080108c1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010896:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	431a      	orrs	r2, r3
 801089e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80108a4:	e02d      	b.n	8010902 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80108a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80108ac:	1c5a      	adds	r2, r3, #1
 80108ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80108b4:	e025      	b.n	8010902 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80108b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b8:	68ba      	ldr	r2, [r7, #8]
 80108ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80108be:	e020      	b.n	8010902 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80108c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80108c4:	2b02      	cmp	r3, #2
 80108c6:	d004      	beq.n	80108d2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80108c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80108d0:	e017      	b.n	8010902 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80108d2:	2300      	movs	r3, #0
 80108d4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80108d6:	e014      	b.n	8010902 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80108d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80108de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80108e2:	d00d      	beq.n	8010900 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80108e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e8:	f383 8811 	msr	BASEPRI, r3
 80108ec:	f3bf 8f6f 	isb	sy
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	61bb      	str	r3, [r7, #24]
}
 80108f6:	bf00      	nop
 80108f8:	bf00      	nop
 80108fa:	e7fd      	b.n	80108f8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80108fc:	bf00      	nop
 80108fe:	e000      	b.n	8010902 <xTaskGenericNotifyFromISR+0x106>
					break;
 8010900:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010906:	2b01      	cmp	r3, #1
 8010908:	d147      	bne.n	801099a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801090a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801090c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00b      	beq.n	801092a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8010912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010916:	f383 8811 	msr	BASEPRI, r3
 801091a:	f3bf 8f6f 	isb	sy
 801091e:	f3bf 8f4f 	dsb	sy
 8010922:	617b      	str	r3, [r7, #20]
}
 8010924:	bf00      	nop
 8010926:	bf00      	nop
 8010928:	e7fd      	b.n	8010926 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801092a:	4b21      	ldr	r3, [pc, #132]	@ (80109b0 <xTaskGenericNotifyFromISR+0x1b4>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d11d      	bne.n	801096e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010934:	3304      	adds	r3, #4
 8010936:	4618      	mov	r0, r3
 8010938:	f7fd fece 	bl	800e6d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801093c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010940:	4b1c      	ldr	r3, [pc, #112]	@ (80109b4 <xTaskGenericNotifyFromISR+0x1b8>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	429a      	cmp	r2, r3
 8010946:	d903      	bls.n	8010950 <xTaskGenericNotifyFromISR+0x154>
 8010948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801094a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801094c:	4a19      	ldr	r2, [pc, #100]	@ (80109b4 <xTaskGenericNotifyFromISR+0x1b8>)
 801094e:	6013      	str	r3, [r2, #0]
 8010950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010954:	4613      	mov	r3, r2
 8010956:	009b      	lsls	r3, r3, #2
 8010958:	4413      	add	r3, r2
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	4a16      	ldr	r2, [pc, #88]	@ (80109b8 <xTaskGenericNotifyFromISR+0x1bc>)
 801095e:	441a      	add	r2, r3
 8010960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010962:	3304      	adds	r3, #4
 8010964:	4619      	mov	r1, r3
 8010966:	4610      	mov	r0, r2
 8010968:	f7fd fe59 	bl	800e61e <vListInsertEnd>
 801096c:	e005      	b.n	801097a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801096e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010970:	3318      	adds	r3, #24
 8010972:	4619      	mov	r1, r3
 8010974:	4811      	ldr	r0, [pc, #68]	@ (80109bc <xTaskGenericNotifyFromISR+0x1c0>)
 8010976:	f7fd fe52 	bl	800e61e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801097a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801097c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801097e:	4b10      	ldr	r3, [pc, #64]	@ (80109c0 <xTaskGenericNotifyFromISR+0x1c4>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010984:	429a      	cmp	r2, r3
 8010986:	d908      	bls.n	801099a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801098a:	2b00      	cmp	r3, #0
 801098c:	d002      	beq.n	8010994 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801098e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010990:	2201      	movs	r2, #1
 8010992:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010994:	4b0b      	ldr	r3, [pc, #44]	@ (80109c4 <xTaskGenericNotifyFromISR+0x1c8>)
 8010996:	2201      	movs	r2, #1
 8010998:	601a      	str	r2, [r3, #0]
 801099a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801099c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	f383 8811 	msr	BASEPRI, r3
}
 80109a4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80109a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3738      	adds	r7, #56	@ 0x38
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	24033b4c 	.word	0x24033b4c
 80109b4:	24033b2c 	.word	0x24033b2c
 80109b8:	24033654 	.word	0x24033654
 80109bc:	24033ae4 	.word	0x24033ae4
 80109c0:	24033650 	.word	0x24033650
 80109c4:	24033b38 	.word	0x24033b38

080109c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80109d2:	4b21      	ldr	r3, [pc, #132]	@ (8010a58 <prvAddCurrentTaskToDelayedList+0x90>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109d8:	4b20      	ldr	r3, [pc, #128]	@ (8010a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	3304      	adds	r3, #4
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fd fe7a 	bl	800e6d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80109ea:	d10a      	bne.n	8010a02 <prvAddCurrentTaskToDelayedList+0x3a>
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d007      	beq.n	8010a02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80109f2:	4b1a      	ldr	r3, [pc, #104]	@ (8010a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	3304      	adds	r3, #4
 80109f8:	4619      	mov	r1, r3
 80109fa:	4819      	ldr	r0, [pc, #100]	@ (8010a60 <prvAddCurrentTaskToDelayedList+0x98>)
 80109fc:	f7fd fe0f 	bl	800e61e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a00:	e026      	b.n	8010a50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a02:	68fa      	ldr	r2, [r7, #12]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	4413      	add	r3, r2
 8010a08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a0a:	4b14      	ldr	r3, [pc, #80]	@ (8010a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	68ba      	ldr	r2, [r7, #8]
 8010a10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a12:	68ba      	ldr	r2, [r7, #8]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d209      	bcs.n	8010a2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a1a:	4b12      	ldr	r3, [pc, #72]	@ (8010a64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010a1c:	681a      	ldr	r2, [r3, #0]
 8010a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8010a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	3304      	adds	r3, #4
 8010a24:	4619      	mov	r1, r3
 8010a26:	4610      	mov	r0, r2
 8010a28:	f7fd fe1d 	bl	800e666 <vListInsert>
}
 8010a2c:	e010      	b.n	8010a50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8010a68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010a30:	681a      	ldr	r2, [r3, #0]
 8010a32:	4b0a      	ldr	r3, [pc, #40]	@ (8010a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	3304      	adds	r3, #4
 8010a38:	4619      	mov	r1, r3
 8010a3a:	4610      	mov	r0, r2
 8010a3c:	f7fd fe13 	bl	800e666 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010a40:	4b0a      	ldr	r3, [pc, #40]	@ (8010a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	68ba      	ldr	r2, [r7, #8]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d202      	bcs.n	8010a50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010a4a:	4a08      	ldr	r2, [pc, #32]	@ (8010a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	6013      	str	r3, [r2, #0]
}
 8010a50:	bf00      	nop
 8010a52:	3710      	adds	r7, #16
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	24033b28 	.word	0x24033b28
 8010a5c:	24033650 	.word	0x24033650
 8010a60:	24033b10 	.word	0x24033b10
 8010a64:	24033ae0 	.word	0x24033ae0
 8010a68:	24033adc 	.word	0x24033adc
 8010a6c:	24033b44 	.word	0x24033b44

08010a70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b08a      	sub	sp, #40	@ 0x28
 8010a74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010a76:	2300      	movs	r3, #0
 8010a78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010a7a:	f000 fb13 	bl	80110a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8010af4 <xTimerCreateTimerTask+0x84>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d021      	beq.n	8010aca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010a86:	2300      	movs	r3, #0
 8010a88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010a8e:	1d3a      	adds	r2, r7, #4
 8010a90:	f107 0108 	add.w	r1, r7, #8
 8010a94:	f107 030c 	add.w	r3, r7, #12
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fd fd79 	bl	800e590 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010a9e:	6879      	ldr	r1, [r7, #4]
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	68fa      	ldr	r2, [r7, #12]
 8010aa4:	9202      	str	r2, [sp, #8]
 8010aa6:	9301      	str	r3, [sp, #4]
 8010aa8:	2302      	movs	r3, #2
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	2300      	movs	r3, #0
 8010aae:	460a      	mov	r2, r1
 8010ab0:	4911      	ldr	r1, [pc, #68]	@ (8010af8 <xTimerCreateTimerTask+0x88>)
 8010ab2:	4812      	ldr	r0, [pc, #72]	@ (8010afc <xTimerCreateTimerTask+0x8c>)
 8010ab4:	f7fe fd50 	bl	800f558 <xTaskCreateStatic>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	4a11      	ldr	r2, [pc, #68]	@ (8010b00 <xTimerCreateTimerTask+0x90>)
 8010abc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010abe:	4b10      	ldr	r3, [pc, #64]	@ (8010b00 <xTimerCreateTimerTask+0x90>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d001      	beq.n	8010aca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d10b      	bne.n	8010ae8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ad4:	f383 8811 	msr	BASEPRI, r3
 8010ad8:	f3bf 8f6f 	isb	sy
 8010adc:	f3bf 8f4f 	dsb	sy
 8010ae0:	613b      	str	r3, [r7, #16]
}
 8010ae2:	bf00      	nop
 8010ae4:	bf00      	nop
 8010ae6:	e7fd      	b.n	8010ae4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010ae8:	697b      	ldr	r3, [r7, #20]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3718      	adds	r7, #24
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	24033b80 	.word	0x24033b80
 8010af8:	0802354c 	.word	0x0802354c
 8010afc:	08010c3d 	.word	0x08010c3d
 8010b00:	24033b84 	.word	0x24033b84

08010b04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b08a      	sub	sp, #40	@ 0x28
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	607a      	str	r2, [r7, #4]
 8010b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010b12:	2300      	movs	r3, #0
 8010b14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d10b      	bne.n	8010b34 <xTimerGenericCommand+0x30>
	__asm volatile
 8010b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b20:	f383 8811 	msr	BASEPRI, r3
 8010b24:	f3bf 8f6f 	isb	sy
 8010b28:	f3bf 8f4f 	dsb	sy
 8010b2c:	623b      	str	r3, [r7, #32]
}
 8010b2e:	bf00      	nop
 8010b30:	bf00      	nop
 8010b32:	e7fd      	b.n	8010b30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010b34:	4b19      	ldr	r3, [pc, #100]	@ (8010b9c <xTimerGenericCommand+0x98>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d02a      	beq.n	8010b92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2b05      	cmp	r3, #5
 8010b4c:	dc18      	bgt.n	8010b80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010b4e:	f7ff fba5 	bl	801029c <xTaskGetSchedulerState>
 8010b52:	4603      	mov	r3, r0
 8010b54:	2b02      	cmp	r3, #2
 8010b56:	d109      	bne.n	8010b6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010b58:	4b10      	ldr	r3, [pc, #64]	@ (8010b9c <xTimerGenericCommand+0x98>)
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	f107 0110 	add.w	r1, r7, #16
 8010b60:	2300      	movs	r3, #0
 8010b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b64:	f7fd ffe0 	bl	800eb28 <xQueueGenericSend>
 8010b68:	6278      	str	r0, [r7, #36]	@ 0x24
 8010b6a:	e012      	b.n	8010b92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8010b9c <xTimerGenericCommand+0x98>)
 8010b6e:	6818      	ldr	r0, [r3, #0]
 8010b70:	f107 0110 	add.w	r1, r7, #16
 8010b74:	2300      	movs	r3, #0
 8010b76:	2200      	movs	r2, #0
 8010b78:	f7fd ffd6 	bl	800eb28 <xQueueGenericSend>
 8010b7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8010b7e:	e008      	b.n	8010b92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010b80:	4b06      	ldr	r3, [pc, #24]	@ (8010b9c <xTimerGenericCommand+0x98>)
 8010b82:	6818      	ldr	r0, [r3, #0]
 8010b84:	f107 0110 	add.w	r1, r7, #16
 8010b88:	2300      	movs	r3, #0
 8010b8a:	683a      	ldr	r2, [r7, #0]
 8010b8c:	f7fe f8ce 	bl	800ed2c <xQueueGenericSendFromISR>
 8010b90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3728      	adds	r7, #40	@ 0x28
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	24033b80 	.word	0x24033b80

08010ba0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b088      	sub	sp, #32
 8010ba4:	af02      	add	r7, sp, #8
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010baa:	4b23      	ldr	r3, [pc, #140]	@ (8010c38 <prvProcessExpiredTimer+0x98>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	3304      	adds	r3, #4
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7fd fd8d 	bl	800e6d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010bc4:	f003 0304 	and.w	r3, r3, #4
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d023      	beq.n	8010c14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	699a      	ldr	r2, [r3, #24]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	18d1      	adds	r1, r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	683a      	ldr	r2, [r7, #0]
 8010bd8:	6978      	ldr	r0, [r7, #20]
 8010bda:	f000 f8d5 	bl	8010d88 <prvInsertTimerInActiveList>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d020      	beq.n	8010c26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010be4:	2300      	movs	r3, #0
 8010be6:	9300      	str	r3, [sp, #0]
 8010be8:	2300      	movs	r3, #0
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	2100      	movs	r1, #0
 8010bee:	6978      	ldr	r0, [r7, #20]
 8010bf0:	f7ff ff88 	bl	8010b04 <xTimerGenericCommand>
 8010bf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d114      	bne.n	8010c26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c00:	f383 8811 	msr	BASEPRI, r3
 8010c04:	f3bf 8f6f 	isb	sy
 8010c08:	f3bf 8f4f 	dsb	sy
 8010c0c:	60fb      	str	r3, [r7, #12]
}
 8010c0e:	bf00      	nop
 8010c10:	bf00      	nop
 8010c12:	e7fd      	b.n	8010c10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c1a:	f023 0301 	bic.w	r3, r3, #1
 8010c1e:	b2da      	uxtb	r2, r3
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	6a1b      	ldr	r3, [r3, #32]
 8010c2a:	6978      	ldr	r0, [r7, #20]
 8010c2c:	4798      	blx	r3
}
 8010c2e:	bf00      	nop
 8010c30:	3718      	adds	r7, #24
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}
 8010c36:	bf00      	nop
 8010c38:	24033b78 	.word	0x24033b78

08010c3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010c44:	f107 0308 	add.w	r3, r7, #8
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f000 f859 	bl	8010d00 <prvGetNextExpireTime>
 8010c4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	4619      	mov	r1, r3
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	f000 f805 	bl	8010c64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010c5a:	f000 f8d7 	bl	8010e0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010c5e:	bf00      	nop
 8010c60:	e7f0      	b.n	8010c44 <prvTimerTask+0x8>
	...

08010c64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010c6e:	f7fe fed7 	bl	800fa20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c72:	f107 0308 	add.w	r3, r7, #8
 8010c76:	4618      	mov	r0, r3
 8010c78:	f000 f866 	bl	8010d48 <prvSampleTimeNow>
 8010c7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d130      	bne.n	8010ce6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d10a      	bne.n	8010ca0 <prvProcessTimerOrBlockTask+0x3c>
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d806      	bhi.n	8010ca0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010c92:	f7fe fed3 	bl	800fa3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010c96:	68f9      	ldr	r1, [r7, #12]
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f7ff ff81 	bl	8010ba0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010c9e:	e024      	b.n	8010cea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d008      	beq.n	8010cb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010ca6:	4b13      	ldr	r3, [pc, #76]	@ (8010cf4 <prvProcessTimerOrBlockTask+0x90>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <prvProcessTimerOrBlockTask+0x50>
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	e000      	b.n	8010cb6 <prvProcessTimerOrBlockTask+0x52>
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8010cf8 <prvProcessTimerOrBlockTask+0x94>)
 8010cba:	6818      	ldr	r0, [r3, #0]
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	683a      	ldr	r2, [r7, #0]
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	f7fe fc13 	bl	800f4f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010cca:	f7fe feb7 	bl	800fa3c <xTaskResumeAll>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d10a      	bne.n	8010cea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010cd4:	4b09      	ldr	r3, [pc, #36]	@ (8010cfc <prvProcessTimerOrBlockTask+0x98>)
 8010cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cda:	601a      	str	r2, [r3, #0]
 8010cdc:	f3bf 8f4f 	dsb	sy
 8010ce0:	f3bf 8f6f 	isb	sy
}
 8010ce4:	e001      	b.n	8010cea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010ce6:	f7fe fea9 	bl	800fa3c <xTaskResumeAll>
}
 8010cea:	bf00      	nop
 8010cec:	3710      	adds	r7, #16
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	24033b7c 	.word	0x24033b7c
 8010cf8:	24033b80 	.word	0x24033b80
 8010cfc:	e000ed04 	.word	0xe000ed04

08010d00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010d00:	b480      	push	{r7}
 8010d02:	b085      	sub	sp, #20
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010d08:	4b0e      	ldr	r3, [pc, #56]	@ (8010d44 <prvGetNextExpireTime+0x44>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d101      	bne.n	8010d16 <prvGetNextExpireTime+0x16>
 8010d12:	2201      	movs	r2, #1
 8010d14:	e000      	b.n	8010d18 <prvGetNextExpireTime+0x18>
 8010d16:	2200      	movs	r2, #0
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d105      	bne.n	8010d30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d24:	4b07      	ldr	r3, [pc, #28]	@ (8010d44 <prvGetNextExpireTime+0x44>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	68db      	ldr	r3, [r3, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	60fb      	str	r3, [r7, #12]
 8010d2e:	e001      	b.n	8010d34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010d30:	2300      	movs	r3, #0
 8010d32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010d34:	68fb      	ldr	r3, [r7, #12]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3714      	adds	r7, #20
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	24033b78 	.word	0x24033b78

08010d48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b084      	sub	sp, #16
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010d50:	f7fe ff12 	bl	800fb78 <xTaskGetTickCount>
 8010d54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010d56:	4b0b      	ldr	r3, [pc, #44]	@ (8010d84 <prvSampleTimeNow+0x3c>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	68fa      	ldr	r2, [r7, #12]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d205      	bcs.n	8010d6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010d60:	f000 f93a 	bl	8010fd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2201      	movs	r2, #1
 8010d68:	601a      	str	r2, [r3, #0]
 8010d6a:	e002      	b.n	8010d72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2200      	movs	r2, #0
 8010d70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010d72:	4a04      	ldr	r2, [pc, #16]	@ (8010d84 <prvSampleTimeNow+0x3c>)
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010d78:	68fb      	ldr	r3, [r7, #12]
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	24033b88 	.word	0x24033b88

08010d88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	607a      	str	r2, [r7, #4]
 8010d94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010d96:	2300      	movs	r3, #0
 8010d98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010da6:	68ba      	ldr	r2, [r7, #8]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d812      	bhi.n	8010dd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	1ad2      	subs	r2, r2, r3
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	699b      	ldr	r3, [r3, #24]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d302      	bcc.n	8010dc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	617b      	str	r3, [r7, #20]
 8010dc0:	e01b      	b.n	8010dfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010dc2:	4b10      	ldr	r3, [pc, #64]	@ (8010e04 <prvInsertTimerInActiveList+0x7c>)
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	3304      	adds	r3, #4
 8010dca:	4619      	mov	r1, r3
 8010dcc:	4610      	mov	r0, r2
 8010dce:	f7fd fc4a 	bl	800e666 <vListInsert>
 8010dd2:	e012      	b.n	8010dfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d206      	bcs.n	8010dea <prvInsertTimerInActiveList+0x62>
 8010ddc:	68ba      	ldr	r2, [r7, #8]
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d302      	bcc.n	8010dea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010de4:	2301      	movs	r3, #1
 8010de6:	617b      	str	r3, [r7, #20]
 8010de8:	e007      	b.n	8010dfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010dea:	4b07      	ldr	r3, [pc, #28]	@ (8010e08 <prvInsertTimerInActiveList+0x80>)
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	3304      	adds	r3, #4
 8010df2:	4619      	mov	r1, r3
 8010df4:	4610      	mov	r0, r2
 8010df6:	f7fd fc36 	bl	800e666 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010dfa:	697b      	ldr	r3, [r7, #20]
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3718      	adds	r7, #24
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	24033b7c 	.word	0x24033b7c
 8010e08:	24033b78 	.word	0x24033b78

08010e0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b08e      	sub	sp, #56	@ 0x38
 8010e10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e12:	e0ce      	b.n	8010fb2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	da19      	bge.n	8010e4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010e1a:	1d3b      	adds	r3, r7, #4
 8010e1c:	3304      	adds	r3, #4
 8010e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d10b      	bne.n	8010e3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e2a:	f383 8811 	msr	BASEPRI, r3
 8010e2e:	f3bf 8f6f 	isb	sy
 8010e32:	f3bf 8f4f 	dsb	sy
 8010e36:	61fb      	str	r3, [r7, #28]
}
 8010e38:	bf00      	nop
 8010e3a:	bf00      	nop
 8010e3c:	e7fd      	b.n	8010e3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e44:	6850      	ldr	r0, [r2, #4]
 8010e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e48:	6892      	ldr	r2, [r2, #8]
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f2c0 80ae 	blt.w	8010fb2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5c:	695b      	ldr	r3, [r3, #20]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d004      	beq.n	8010e6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e64:	3304      	adds	r3, #4
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fd fc36 	bl	800e6d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e6c:	463b      	mov	r3, r7
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7ff ff6a 	bl	8010d48 <prvSampleTimeNow>
 8010e74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2b09      	cmp	r3, #9
 8010e7a:	f200 8097 	bhi.w	8010fac <prvProcessReceivedCommands+0x1a0>
 8010e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8010e84 <prvProcessReceivedCommands+0x78>)
 8010e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e84:	08010ead 	.word	0x08010ead
 8010e88:	08010ead 	.word	0x08010ead
 8010e8c:	08010ead 	.word	0x08010ead
 8010e90:	08010f23 	.word	0x08010f23
 8010e94:	08010f37 	.word	0x08010f37
 8010e98:	08010f83 	.word	0x08010f83
 8010e9c:	08010ead 	.word	0x08010ead
 8010ea0:	08010ead 	.word	0x08010ead
 8010ea4:	08010f23 	.word	0x08010f23
 8010ea8:	08010f37 	.word	0x08010f37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010eb2:	f043 0301 	orr.w	r3, r3, #1
 8010eb6:	b2da      	uxtb	r2, r3
 8010eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010ebe:	68ba      	ldr	r2, [r7, #8]
 8010ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec2:	699b      	ldr	r3, [r3, #24]
 8010ec4:	18d1      	adds	r1, r2, r3
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ecc:	f7ff ff5c 	bl	8010d88 <prvInsertTimerInActiveList>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d06c      	beq.n	8010fb0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ed8:	6a1b      	ldr	r3, [r3, #32]
 8010eda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010edc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ee4:	f003 0304 	and.w	r3, r3, #4
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d061      	beq.n	8010fb0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ef0:	699b      	ldr	r3, [r3, #24]
 8010ef2:	441a      	add	r2, r3
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	2300      	movs	r3, #0
 8010efa:	2100      	movs	r1, #0
 8010efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010efe:	f7ff fe01 	bl	8010b04 <xTimerGenericCommand>
 8010f02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010f04:	6a3b      	ldr	r3, [r7, #32]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d152      	bne.n	8010fb0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f0e:	f383 8811 	msr	BASEPRI, r3
 8010f12:	f3bf 8f6f 	isb	sy
 8010f16:	f3bf 8f4f 	dsb	sy
 8010f1a:	61bb      	str	r3, [r7, #24]
}
 8010f1c:	bf00      	nop
 8010f1e:	bf00      	nop
 8010f20:	e7fd      	b.n	8010f1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f28:	f023 0301 	bic.w	r3, r3, #1
 8010f2c:	b2da      	uxtb	r2, r3
 8010f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010f34:	e03d      	b.n	8010fb2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f3c:	f043 0301 	orr.w	r3, r3, #1
 8010f40:	b2da      	uxtb	r2, r3
 8010f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010f48:	68ba      	ldr	r2, [r7, #8]
 8010f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f50:	699b      	ldr	r3, [r3, #24]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d10b      	bne.n	8010f6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f5a:	f383 8811 	msr	BASEPRI, r3
 8010f5e:	f3bf 8f6f 	isb	sy
 8010f62:	f3bf 8f4f 	dsb	sy
 8010f66:	617b      	str	r3, [r7, #20]
}
 8010f68:	bf00      	nop
 8010f6a:	bf00      	nop
 8010f6c:	e7fd      	b.n	8010f6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f70:	699a      	ldr	r2, [r3, #24]
 8010f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f74:	18d1      	adds	r1, r2, r3
 8010f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f7c:	f7ff ff04 	bl	8010d88 <prvInsertTimerInActiveList>
					break;
 8010f80:	e017      	b.n	8010fb2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f88:	f003 0302 	and.w	r3, r3, #2
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d103      	bne.n	8010f98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f92:	f000 fbe9 	bl	8011768 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010f96:	e00c      	b.n	8010fb2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f9e:	f023 0301 	bic.w	r3, r3, #1
 8010fa2:	b2da      	uxtb	r2, r3
 8010fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010faa:	e002      	b.n	8010fb2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010fac:	bf00      	nop
 8010fae:	e000      	b.n	8010fb2 <prvProcessReceivedCommands+0x1a6>
					break;
 8010fb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010fb2:	4b08      	ldr	r3, [pc, #32]	@ (8010fd4 <prvProcessReceivedCommands+0x1c8>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	1d39      	adds	r1, r7, #4
 8010fb8:	2200      	movs	r2, #0
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fd ff54 	bl	800ee68 <xQueueReceive>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	f47f af26 	bne.w	8010e14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010fc8:	bf00      	nop
 8010fca:	bf00      	nop
 8010fcc:	3730      	adds	r7, #48	@ 0x30
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	24033b80 	.word	0x24033b80

08010fd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b088      	sub	sp, #32
 8010fdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010fde:	e049      	b.n	8011074 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010fe0:	4b2e      	ldr	r3, [pc, #184]	@ (801109c <prvSwitchTimerLists+0xc4>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fea:	4b2c      	ldr	r3, [pc, #176]	@ (801109c <prvSwitchTimerLists+0xc4>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fd fb6d 	bl	800e6d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	6a1b      	ldr	r3, [r3, #32]
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801100c:	f003 0304 	and.w	r3, r3, #4
 8011010:	2b00      	cmp	r3, #0
 8011012:	d02f      	beq.n	8011074 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	699b      	ldr	r3, [r3, #24]
 8011018:	693a      	ldr	r2, [r7, #16]
 801101a:	4413      	add	r3, r2
 801101c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801101e:	68ba      	ldr	r2, [r7, #8]
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	429a      	cmp	r2, r3
 8011024:	d90e      	bls.n	8011044 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	68ba      	ldr	r2, [r7, #8]
 801102a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	68fa      	ldr	r2, [r7, #12]
 8011030:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011032:	4b1a      	ldr	r3, [pc, #104]	@ (801109c <prvSwitchTimerLists+0xc4>)
 8011034:	681a      	ldr	r2, [r3, #0]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	3304      	adds	r3, #4
 801103a:	4619      	mov	r1, r3
 801103c:	4610      	mov	r0, r2
 801103e:	f7fd fb12 	bl	800e666 <vListInsert>
 8011042:	e017      	b.n	8011074 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011044:	2300      	movs	r3, #0
 8011046:	9300      	str	r3, [sp, #0]
 8011048:	2300      	movs	r3, #0
 801104a:	693a      	ldr	r2, [r7, #16]
 801104c:	2100      	movs	r1, #0
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	f7ff fd58 	bl	8010b04 <xTimerGenericCommand>
 8011054:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d10b      	bne.n	8011074 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801105c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011060:	f383 8811 	msr	BASEPRI, r3
 8011064:	f3bf 8f6f 	isb	sy
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	603b      	str	r3, [r7, #0]
}
 801106e:	bf00      	nop
 8011070:	bf00      	nop
 8011072:	e7fd      	b.n	8011070 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011074:	4b09      	ldr	r3, [pc, #36]	@ (801109c <prvSwitchTimerLists+0xc4>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d1b0      	bne.n	8010fe0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801107e:	4b07      	ldr	r3, [pc, #28]	@ (801109c <prvSwitchTimerLists+0xc4>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011084:	4b06      	ldr	r3, [pc, #24]	@ (80110a0 <prvSwitchTimerLists+0xc8>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4a04      	ldr	r2, [pc, #16]	@ (801109c <prvSwitchTimerLists+0xc4>)
 801108a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801108c:	4a04      	ldr	r2, [pc, #16]	@ (80110a0 <prvSwitchTimerLists+0xc8>)
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	6013      	str	r3, [r2, #0]
}
 8011092:	bf00      	nop
 8011094:	3718      	adds	r7, #24
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	24033b78 	.word	0x24033b78
 80110a0:	24033b7c 	.word	0x24033b7c

080110a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80110aa:	f000 f96d 	bl	8011388 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80110ae:	4b15      	ldr	r3, [pc, #84]	@ (8011104 <prvCheckForValidListAndQueue+0x60>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d120      	bne.n	80110f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80110b6:	4814      	ldr	r0, [pc, #80]	@ (8011108 <prvCheckForValidListAndQueue+0x64>)
 80110b8:	f7fd fa84 	bl	800e5c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80110bc:	4813      	ldr	r0, [pc, #76]	@ (801110c <prvCheckForValidListAndQueue+0x68>)
 80110be:	f7fd fa81 	bl	800e5c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80110c2:	4b13      	ldr	r3, [pc, #76]	@ (8011110 <prvCheckForValidListAndQueue+0x6c>)
 80110c4:	4a10      	ldr	r2, [pc, #64]	@ (8011108 <prvCheckForValidListAndQueue+0x64>)
 80110c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80110c8:	4b12      	ldr	r3, [pc, #72]	@ (8011114 <prvCheckForValidListAndQueue+0x70>)
 80110ca:	4a10      	ldr	r2, [pc, #64]	@ (801110c <prvCheckForValidListAndQueue+0x68>)
 80110cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80110ce:	2300      	movs	r3, #0
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	4b11      	ldr	r3, [pc, #68]	@ (8011118 <prvCheckForValidListAndQueue+0x74>)
 80110d4:	4a11      	ldr	r2, [pc, #68]	@ (801111c <prvCheckForValidListAndQueue+0x78>)
 80110d6:	2110      	movs	r1, #16
 80110d8:	200a      	movs	r0, #10
 80110da:	f7fd fb91 	bl	800e800 <xQueueGenericCreateStatic>
 80110de:	4603      	mov	r3, r0
 80110e0:	4a08      	ldr	r2, [pc, #32]	@ (8011104 <prvCheckForValidListAndQueue+0x60>)
 80110e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80110e4:	4b07      	ldr	r3, [pc, #28]	@ (8011104 <prvCheckForValidListAndQueue+0x60>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d005      	beq.n	80110f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80110ec:	4b05      	ldr	r3, [pc, #20]	@ (8011104 <prvCheckForValidListAndQueue+0x60>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	490b      	ldr	r1, [pc, #44]	@ (8011120 <prvCheckForValidListAndQueue+0x7c>)
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fe f9d2 	bl	800f49c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80110f8:	f000 f978 	bl	80113ec <vPortExitCritical>
}
 80110fc:	bf00      	nop
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	24033b80 	.word	0x24033b80
 8011108:	24033b50 	.word	0x24033b50
 801110c:	24033b64 	.word	0x24033b64
 8011110:	24033b78 	.word	0x24033b78
 8011114:	24033b7c 	.word	0x24033b7c
 8011118:	24033c2c 	.word	0x24033c2c
 801111c:	24033b8c 	.word	0x24033b8c
 8011120:	08023554 	.word	0x08023554

08011124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011124:	b480      	push	{r7}
 8011126:	b085      	sub	sp, #20
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	3b04      	subs	r3, #4
 8011134:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801113c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	3b04      	subs	r3, #4
 8011142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	f023 0201 	bic.w	r2, r3, #1
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	3b04      	subs	r3, #4
 8011152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011154:	4a0c      	ldr	r2, [pc, #48]	@ (8011188 <pxPortInitialiseStack+0x64>)
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	3b14      	subs	r3, #20
 801115e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	3b04      	subs	r3, #4
 801116a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f06f 0202 	mvn.w	r2, #2
 8011172:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	3b20      	subs	r3, #32
 8011178:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801117a:	68fb      	ldr	r3, [r7, #12]
}
 801117c:	4618      	mov	r0, r3
 801117e:	3714      	adds	r7, #20
 8011180:	46bd      	mov	sp, r7
 8011182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011186:	4770      	bx	lr
 8011188:	0801118d 	.word	0x0801118d

0801118c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801118c:	b480      	push	{r7}
 801118e:	b085      	sub	sp, #20
 8011190:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011192:	2300      	movs	r3, #0
 8011194:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011196:	4b13      	ldr	r3, [pc, #76]	@ (80111e4 <prvTaskExitError+0x58>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801119e:	d00b      	beq.n	80111b8 <prvTaskExitError+0x2c>
	__asm volatile
 80111a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a4:	f383 8811 	msr	BASEPRI, r3
 80111a8:	f3bf 8f6f 	isb	sy
 80111ac:	f3bf 8f4f 	dsb	sy
 80111b0:	60fb      	str	r3, [r7, #12]
}
 80111b2:	bf00      	nop
 80111b4:	bf00      	nop
 80111b6:	e7fd      	b.n	80111b4 <prvTaskExitError+0x28>
	__asm volatile
 80111b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111bc:	f383 8811 	msr	BASEPRI, r3
 80111c0:	f3bf 8f6f 	isb	sy
 80111c4:	f3bf 8f4f 	dsb	sy
 80111c8:	60bb      	str	r3, [r7, #8]
}
 80111ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80111cc:	bf00      	nop
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d0fc      	beq.n	80111ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80111d4:	bf00      	nop
 80111d6:	bf00      	nop
 80111d8:	3714      	adds	r7, #20
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	24000014 	.word	0x24000014
	...

080111f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80111f0:	4b07      	ldr	r3, [pc, #28]	@ (8011210 <pxCurrentTCBConst2>)
 80111f2:	6819      	ldr	r1, [r3, #0]
 80111f4:	6808      	ldr	r0, [r1, #0]
 80111f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111fa:	f380 8809 	msr	PSP, r0
 80111fe:	f3bf 8f6f 	isb	sy
 8011202:	f04f 0000 	mov.w	r0, #0
 8011206:	f380 8811 	msr	BASEPRI, r0
 801120a:	4770      	bx	lr
 801120c:	f3af 8000 	nop.w

08011210 <pxCurrentTCBConst2>:
 8011210:	24033650 	.word	0x24033650
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011214:	bf00      	nop
 8011216:	bf00      	nop

08011218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011218:	4808      	ldr	r0, [pc, #32]	@ (801123c <prvPortStartFirstTask+0x24>)
 801121a:	6800      	ldr	r0, [r0, #0]
 801121c:	6800      	ldr	r0, [r0, #0]
 801121e:	f380 8808 	msr	MSP, r0
 8011222:	f04f 0000 	mov.w	r0, #0
 8011226:	f380 8814 	msr	CONTROL, r0
 801122a:	b662      	cpsie	i
 801122c:	b661      	cpsie	f
 801122e:	f3bf 8f4f 	dsb	sy
 8011232:	f3bf 8f6f 	isb	sy
 8011236:	df00      	svc	0
 8011238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801123a:	bf00      	nop
 801123c:	e000ed08 	.word	0xe000ed08

08011240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b086      	sub	sp, #24
 8011244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011246:	4b47      	ldr	r3, [pc, #284]	@ (8011364 <xPortStartScheduler+0x124>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4a47      	ldr	r2, [pc, #284]	@ (8011368 <xPortStartScheduler+0x128>)
 801124c:	4293      	cmp	r3, r2
 801124e:	d10b      	bne.n	8011268 <xPortStartScheduler+0x28>
	__asm volatile
 8011250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011254:	f383 8811 	msr	BASEPRI, r3
 8011258:	f3bf 8f6f 	isb	sy
 801125c:	f3bf 8f4f 	dsb	sy
 8011260:	613b      	str	r3, [r7, #16]
}
 8011262:	bf00      	nop
 8011264:	bf00      	nop
 8011266:	e7fd      	b.n	8011264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011268:	4b3e      	ldr	r3, [pc, #248]	@ (8011364 <xPortStartScheduler+0x124>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a3f      	ldr	r2, [pc, #252]	@ (801136c <xPortStartScheduler+0x12c>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d10b      	bne.n	801128a <xPortStartScheduler+0x4a>
	__asm volatile
 8011272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011276:	f383 8811 	msr	BASEPRI, r3
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	f3bf 8f4f 	dsb	sy
 8011282:	60fb      	str	r3, [r7, #12]
}
 8011284:	bf00      	nop
 8011286:	bf00      	nop
 8011288:	e7fd      	b.n	8011286 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801128a:	4b39      	ldr	r3, [pc, #228]	@ (8011370 <xPortStartScheduler+0x130>)
 801128c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	b2db      	uxtb	r3, r3
 8011294:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	22ff      	movs	r2, #255	@ 0xff
 801129a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80112a4:	78fb      	ldrb	r3, [r7, #3]
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80112ac:	b2da      	uxtb	r2, r3
 80112ae:	4b31      	ldr	r3, [pc, #196]	@ (8011374 <xPortStartScheduler+0x134>)
 80112b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80112b2:	4b31      	ldr	r3, [pc, #196]	@ (8011378 <xPortStartScheduler+0x138>)
 80112b4:	2207      	movs	r2, #7
 80112b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112b8:	e009      	b.n	80112ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80112ba:	4b2f      	ldr	r3, [pc, #188]	@ (8011378 <xPortStartScheduler+0x138>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	3b01      	subs	r3, #1
 80112c0:	4a2d      	ldr	r2, [pc, #180]	@ (8011378 <xPortStartScheduler+0x138>)
 80112c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80112c4:	78fb      	ldrb	r3, [r7, #3]
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	005b      	lsls	r3, r3, #1
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112ce:	78fb      	ldrb	r3, [r7, #3]
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80112d6:	2b80      	cmp	r3, #128	@ 0x80
 80112d8:	d0ef      	beq.n	80112ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80112da:	4b27      	ldr	r3, [pc, #156]	@ (8011378 <xPortStartScheduler+0x138>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f1c3 0307 	rsb	r3, r3, #7
 80112e2:	2b04      	cmp	r3, #4
 80112e4:	d00b      	beq.n	80112fe <xPortStartScheduler+0xbe>
	__asm volatile
 80112e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112ea:	f383 8811 	msr	BASEPRI, r3
 80112ee:	f3bf 8f6f 	isb	sy
 80112f2:	f3bf 8f4f 	dsb	sy
 80112f6:	60bb      	str	r3, [r7, #8]
}
 80112f8:	bf00      	nop
 80112fa:	bf00      	nop
 80112fc:	e7fd      	b.n	80112fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80112fe:	4b1e      	ldr	r3, [pc, #120]	@ (8011378 <xPortStartScheduler+0x138>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	021b      	lsls	r3, r3, #8
 8011304:	4a1c      	ldr	r2, [pc, #112]	@ (8011378 <xPortStartScheduler+0x138>)
 8011306:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011308:	4b1b      	ldr	r3, [pc, #108]	@ (8011378 <xPortStartScheduler+0x138>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011310:	4a19      	ldr	r2, [pc, #100]	@ (8011378 <xPortStartScheduler+0x138>)
 8011312:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	b2da      	uxtb	r2, r3
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801131c:	4b17      	ldr	r3, [pc, #92]	@ (801137c <xPortStartScheduler+0x13c>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a16      	ldr	r2, [pc, #88]	@ (801137c <xPortStartScheduler+0x13c>)
 8011322:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011328:	4b14      	ldr	r3, [pc, #80]	@ (801137c <xPortStartScheduler+0x13c>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a13      	ldr	r2, [pc, #76]	@ (801137c <xPortStartScheduler+0x13c>)
 801132e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011334:	f000 f8da 	bl	80114ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011338:	4b11      	ldr	r3, [pc, #68]	@ (8011380 <xPortStartScheduler+0x140>)
 801133a:	2200      	movs	r2, #0
 801133c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801133e:	f000 f8f9 	bl	8011534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011342:	4b10      	ldr	r3, [pc, #64]	@ (8011384 <xPortStartScheduler+0x144>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4a0f      	ldr	r2, [pc, #60]	@ (8011384 <xPortStartScheduler+0x144>)
 8011348:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801134c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801134e:	f7ff ff63 	bl	8011218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011352:	f7fe fced 	bl	800fd30 <vTaskSwitchContext>
	prvTaskExitError();
 8011356:	f7ff ff19 	bl	801118c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801135a:	2300      	movs	r3, #0
}
 801135c:	4618      	mov	r0, r3
 801135e:	3718      	adds	r7, #24
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	e000ed00 	.word	0xe000ed00
 8011368:	410fc271 	.word	0x410fc271
 801136c:	410fc270 	.word	0x410fc270
 8011370:	e000e400 	.word	0xe000e400
 8011374:	24033c7c 	.word	0x24033c7c
 8011378:	24033c80 	.word	0x24033c80
 801137c:	e000ed20 	.word	0xe000ed20
 8011380:	24000014 	.word	0x24000014
 8011384:	e000ef34 	.word	0xe000ef34

08011388 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
	__asm volatile
 801138e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	607b      	str	r3, [r7, #4]
}
 80113a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80113a2:	4b10      	ldr	r3, [pc, #64]	@ (80113e4 <vPortEnterCritical+0x5c>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	3301      	adds	r3, #1
 80113a8:	4a0e      	ldr	r2, [pc, #56]	@ (80113e4 <vPortEnterCritical+0x5c>)
 80113aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80113ac:	4b0d      	ldr	r3, [pc, #52]	@ (80113e4 <vPortEnterCritical+0x5c>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d110      	bne.n	80113d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80113b4:	4b0c      	ldr	r3, [pc, #48]	@ (80113e8 <vPortEnterCritical+0x60>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d00b      	beq.n	80113d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80113be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113c2:	f383 8811 	msr	BASEPRI, r3
 80113c6:	f3bf 8f6f 	isb	sy
 80113ca:	f3bf 8f4f 	dsb	sy
 80113ce:	603b      	str	r3, [r7, #0]
}
 80113d0:	bf00      	nop
 80113d2:	bf00      	nop
 80113d4:	e7fd      	b.n	80113d2 <vPortEnterCritical+0x4a>
	}
}
 80113d6:	bf00      	nop
 80113d8:	370c      	adds	r7, #12
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr
 80113e2:	bf00      	nop
 80113e4:	24000014 	.word	0x24000014
 80113e8:	e000ed04 	.word	0xe000ed04

080113ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80113f2:	4b12      	ldr	r3, [pc, #72]	@ (801143c <vPortExitCritical+0x50>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d10b      	bne.n	8011412 <vPortExitCritical+0x26>
	__asm volatile
 80113fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113fe:	f383 8811 	msr	BASEPRI, r3
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	f3bf 8f4f 	dsb	sy
 801140a:	607b      	str	r3, [r7, #4]
}
 801140c:	bf00      	nop
 801140e:	bf00      	nop
 8011410:	e7fd      	b.n	801140e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011412:	4b0a      	ldr	r3, [pc, #40]	@ (801143c <vPortExitCritical+0x50>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3b01      	subs	r3, #1
 8011418:	4a08      	ldr	r2, [pc, #32]	@ (801143c <vPortExitCritical+0x50>)
 801141a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801141c:	4b07      	ldr	r3, [pc, #28]	@ (801143c <vPortExitCritical+0x50>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d105      	bne.n	8011430 <vPortExitCritical+0x44>
 8011424:	2300      	movs	r3, #0
 8011426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	f383 8811 	msr	BASEPRI, r3
}
 801142e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011430:	bf00      	nop
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr
 801143c:	24000014 	.word	0x24000014

08011440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011440:	f3ef 8009 	mrs	r0, PSP
 8011444:	f3bf 8f6f 	isb	sy
 8011448:	4b15      	ldr	r3, [pc, #84]	@ (80114a0 <pxCurrentTCBConst>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	f01e 0f10 	tst.w	lr, #16
 8011450:	bf08      	it	eq
 8011452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145a:	6010      	str	r0, [r2, #0]
 801145c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011464:	f380 8811 	msr	BASEPRI, r0
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	f3bf 8f6f 	isb	sy
 8011470:	f7fe fc5e 	bl	800fd30 <vTaskSwitchContext>
 8011474:	f04f 0000 	mov.w	r0, #0
 8011478:	f380 8811 	msr	BASEPRI, r0
 801147c:	bc09      	pop	{r0, r3}
 801147e:	6819      	ldr	r1, [r3, #0]
 8011480:	6808      	ldr	r0, [r1, #0]
 8011482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011486:	f01e 0f10 	tst.w	lr, #16
 801148a:	bf08      	it	eq
 801148c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011490:	f380 8809 	msr	PSP, r0
 8011494:	f3bf 8f6f 	isb	sy
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	f3af 8000 	nop.w

080114a0 <pxCurrentTCBConst>:
 80114a0:	24033650 	.word	0x24033650
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80114a4:	bf00      	nop
 80114a6:	bf00      	nop

080114a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
	__asm volatile
 80114ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	607b      	str	r3, [r7, #4]
}
 80114c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80114c2:	f7fe fb7b 	bl	800fbbc <xTaskIncrementTick>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d003      	beq.n	80114d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80114cc:	4b06      	ldr	r3, [pc, #24]	@ (80114e8 <xPortSysTickHandler+0x40>)
 80114ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114d2:	601a      	str	r2, [r3, #0]
 80114d4:	2300      	movs	r3, #0
 80114d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	f383 8811 	msr	BASEPRI, r3
}
 80114de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80114e0:	bf00      	nop
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}
 80114e8:	e000ed04 	.word	0xe000ed04

080114ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80114ec:	b480      	push	{r7}
 80114ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80114f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011520 <vPortSetupTimerInterrupt+0x34>)
 80114f2:	2200      	movs	r2, #0
 80114f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80114f6:	4b0b      	ldr	r3, [pc, #44]	@ (8011524 <vPortSetupTimerInterrupt+0x38>)
 80114f8:	2200      	movs	r2, #0
 80114fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80114fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011528 <vPortSetupTimerInterrupt+0x3c>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4a0a      	ldr	r2, [pc, #40]	@ (801152c <vPortSetupTimerInterrupt+0x40>)
 8011502:	fba2 2303 	umull	r2, r3, r2, r3
 8011506:	099b      	lsrs	r3, r3, #6
 8011508:	4a09      	ldr	r2, [pc, #36]	@ (8011530 <vPortSetupTimerInterrupt+0x44>)
 801150a:	3b01      	subs	r3, #1
 801150c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801150e:	4b04      	ldr	r3, [pc, #16]	@ (8011520 <vPortSetupTimerInterrupt+0x34>)
 8011510:	2207      	movs	r2, #7
 8011512:	601a      	str	r2, [r3, #0]
}
 8011514:	bf00      	nop
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop
 8011520:	e000e010 	.word	0xe000e010
 8011524:	e000e018 	.word	0xe000e018
 8011528:	24000004 	.word	0x24000004
 801152c:	10624dd3 	.word	0x10624dd3
 8011530:	e000e014 	.word	0xe000e014

08011534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011534:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011544 <vPortEnableVFP+0x10>
 8011538:	6801      	ldr	r1, [r0, #0]
 801153a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801153e:	6001      	str	r1, [r0, #0]
 8011540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011542:	bf00      	nop
 8011544:	e000ed88 	.word	0xe000ed88

08011548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011548:	b480      	push	{r7}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801154e:	f3ef 8305 	mrs	r3, IPSR
 8011552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	2b0f      	cmp	r3, #15
 8011558:	d915      	bls.n	8011586 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801155a:	4a18      	ldr	r2, [pc, #96]	@ (80115bc <vPortValidateInterruptPriority+0x74>)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	4413      	add	r3, r2
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011564:	4b16      	ldr	r3, [pc, #88]	@ (80115c0 <vPortValidateInterruptPriority+0x78>)
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	7afa      	ldrb	r2, [r7, #11]
 801156a:	429a      	cmp	r2, r3
 801156c:	d20b      	bcs.n	8011586 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801156e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011572:	f383 8811 	msr	BASEPRI, r3
 8011576:	f3bf 8f6f 	isb	sy
 801157a:	f3bf 8f4f 	dsb	sy
 801157e:	607b      	str	r3, [r7, #4]
}
 8011580:	bf00      	nop
 8011582:	bf00      	nop
 8011584:	e7fd      	b.n	8011582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011586:	4b0f      	ldr	r3, [pc, #60]	@ (80115c4 <vPortValidateInterruptPriority+0x7c>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801158e:	4b0e      	ldr	r3, [pc, #56]	@ (80115c8 <vPortValidateInterruptPriority+0x80>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	429a      	cmp	r2, r3
 8011594:	d90b      	bls.n	80115ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801159a:	f383 8811 	msr	BASEPRI, r3
 801159e:	f3bf 8f6f 	isb	sy
 80115a2:	f3bf 8f4f 	dsb	sy
 80115a6:	603b      	str	r3, [r7, #0]
}
 80115a8:	bf00      	nop
 80115aa:	bf00      	nop
 80115ac:	e7fd      	b.n	80115aa <vPortValidateInterruptPriority+0x62>
	}
 80115ae:	bf00      	nop
 80115b0:	3714      	adds	r7, #20
 80115b2:	46bd      	mov	sp, r7
 80115b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b8:	4770      	bx	lr
 80115ba:	bf00      	nop
 80115bc:	e000e3f0 	.word	0xe000e3f0
 80115c0:	24033c7c 	.word	0x24033c7c
 80115c4:	e000ed0c 	.word	0xe000ed0c
 80115c8:	24033c80 	.word	0x24033c80

080115cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b08a      	sub	sp, #40	@ 0x28
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80115d4:	2300      	movs	r3, #0
 80115d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80115d8:	f7fe fa22 	bl	800fa20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115dc:	4b5c      	ldr	r3, [pc, #368]	@ (8011750 <pvPortMalloc+0x184>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d101      	bne.n	80115e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115e4:	f000 f924 	bl	8011830 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115e8:	4b5a      	ldr	r3, [pc, #360]	@ (8011754 <pvPortMalloc+0x188>)
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4013      	ands	r3, r2
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f040 8095 	bne.w	8011720 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d01e      	beq.n	801163a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80115fc:	2208      	movs	r2, #8
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4413      	add	r3, r2
 8011602:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f003 0307 	and.w	r3, r3, #7
 801160a:	2b00      	cmp	r3, #0
 801160c:	d015      	beq.n	801163a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f023 0307 	bic.w	r3, r3, #7
 8011614:	3308      	adds	r3, #8
 8011616:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f003 0307 	and.w	r3, r3, #7
 801161e:	2b00      	cmp	r3, #0
 8011620:	d00b      	beq.n	801163a <pvPortMalloc+0x6e>
	__asm volatile
 8011622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011626:	f383 8811 	msr	BASEPRI, r3
 801162a:	f3bf 8f6f 	isb	sy
 801162e:	f3bf 8f4f 	dsb	sy
 8011632:	617b      	str	r3, [r7, #20]
}
 8011634:	bf00      	nop
 8011636:	bf00      	nop
 8011638:	e7fd      	b.n	8011636 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d06f      	beq.n	8011720 <pvPortMalloc+0x154>
 8011640:	4b45      	ldr	r3, [pc, #276]	@ (8011758 <pvPortMalloc+0x18c>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	687a      	ldr	r2, [r7, #4]
 8011646:	429a      	cmp	r2, r3
 8011648:	d86a      	bhi.n	8011720 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801164a:	4b44      	ldr	r3, [pc, #272]	@ (801175c <pvPortMalloc+0x190>)
 801164c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801164e:	4b43      	ldr	r3, [pc, #268]	@ (801175c <pvPortMalloc+0x190>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011654:	e004      	b.n	8011660 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	687a      	ldr	r2, [r7, #4]
 8011666:	429a      	cmp	r2, r3
 8011668:	d903      	bls.n	8011672 <pvPortMalloc+0xa6>
 801166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d1f1      	bne.n	8011656 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011672:	4b37      	ldr	r3, [pc, #220]	@ (8011750 <pvPortMalloc+0x184>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011678:	429a      	cmp	r2, r3
 801167a:	d051      	beq.n	8011720 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801167c:	6a3b      	ldr	r3, [r7, #32]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2208      	movs	r2, #8
 8011682:	4413      	add	r3, r2
 8011684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	6a3b      	ldr	r3, [r7, #32]
 801168c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011690:	685a      	ldr	r2, [r3, #4]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	1ad2      	subs	r2, r2, r3
 8011696:	2308      	movs	r3, #8
 8011698:	005b      	lsls	r3, r3, #1
 801169a:	429a      	cmp	r2, r3
 801169c:	d920      	bls.n	80116e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801169e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	4413      	add	r3, r2
 80116a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	f003 0307 	and.w	r3, r3, #7
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d00b      	beq.n	80116c8 <pvPortMalloc+0xfc>
	__asm volatile
 80116b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116b4:	f383 8811 	msr	BASEPRI, r3
 80116b8:	f3bf 8f6f 	isb	sy
 80116bc:	f3bf 8f4f 	dsb	sy
 80116c0:	613b      	str	r3, [r7, #16]
}
 80116c2:	bf00      	nop
 80116c4:	bf00      	nop
 80116c6:	e7fd      	b.n	80116c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80116c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ca:	685a      	ldr	r2, [r3, #4]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	1ad2      	subs	r2, r2, r3
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116da:	69b8      	ldr	r0, [r7, #24]
 80116dc:	f000 f90c 	bl	80118f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116e0:	4b1d      	ldr	r3, [pc, #116]	@ (8011758 <pvPortMalloc+0x18c>)
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116e6:	685b      	ldr	r3, [r3, #4]
 80116e8:	1ad3      	subs	r3, r2, r3
 80116ea:	4a1b      	ldr	r2, [pc, #108]	@ (8011758 <pvPortMalloc+0x18c>)
 80116ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116ee:	4b1a      	ldr	r3, [pc, #104]	@ (8011758 <pvPortMalloc+0x18c>)
 80116f0:	681a      	ldr	r2, [r3, #0]
 80116f2:	4b1b      	ldr	r3, [pc, #108]	@ (8011760 <pvPortMalloc+0x194>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d203      	bcs.n	8011702 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80116fa:	4b17      	ldr	r3, [pc, #92]	@ (8011758 <pvPortMalloc+0x18c>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	4a18      	ldr	r2, [pc, #96]	@ (8011760 <pvPortMalloc+0x194>)
 8011700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011704:	685a      	ldr	r2, [r3, #4]
 8011706:	4b13      	ldr	r3, [pc, #76]	@ (8011754 <pvPortMalloc+0x188>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	431a      	orrs	r2, r3
 801170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801170e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011712:	2200      	movs	r2, #0
 8011714:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011716:	4b13      	ldr	r3, [pc, #76]	@ (8011764 <pvPortMalloc+0x198>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	3301      	adds	r3, #1
 801171c:	4a11      	ldr	r2, [pc, #68]	@ (8011764 <pvPortMalloc+0x198>)
 801171e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011720:	f7fe f98c 	bl	800fa3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	f003 0307 	and.w	r3, r3, #7
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00b      	beq.n	8011746 <pvPortMalloc+0x17a>
	__asm volatile
 801172e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	60fb      	str	r3, [r7, #12]
}
 8011740:	bf00      	nop
 8011742:	bf00      	nop
 8011744:	e7fd      	b.n	8011742 <pvPortMalloc+0x176>
	return pvReturn;
 8011746:	69fb      	ldr	r3, [r7, #28]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3728      	adds	r7, #40	@ 0x28
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}
 8011750:	240649cc 	.word	0x240649cc
 8011754:	240649e0 	.word	0x240649e0
 8011758:	240649d0 	.word	0x240649d0
 801175c:	240649c4 	.word	0x240649c4
 8011760:	240649d4 	.word	0x240649d4
 8011764:	240649d8 	.word	0x240649d8

08011768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b086      	sub	sp, #24
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d04f      	beq.n	801181a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801177a:	2308      	movs	r3, #8
 801177c:	425b      	negs	r3, r3
 801177e:	697a      	ldr	r2, [r7, #20]
 8011780:	4413      	add	r3, r2
 8011782:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	685a      	ldr	r2, [r3, #4]
 801178c:	4b25      	ldr	r3, [pc, #148]	@ (8011824 <vPortFree+0xbc>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4013      	ands	r3, r2
 8011792:	2b00      	cmp	r3, #0
 8011794:	d10b      	bne.n	80117ae <vPortFree+0x46>
	__asm volatile
 8011796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801179a:	f383 8811 	msr	BASEPRI, r3
 801179e:	f3bf 8f6f 	isb	sy
 80117a2:	f3bf 8f4f 	dsb	sy
 80117a6:	60fb      	str	r3, [r7, #12]
}
 80117a8:	bf00      	nop
 80117aa:	bf00      	nop
 80117ac:	e7fd      	b.n	80117aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d00b      	beq.n	80117ce <vPortFree+0x66>
	__asm volatile
 80117b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117ba:	f383 8811 	msr	BASEPRI, r3
 80117be:	f3bf 8f6f 	isb	sy
 80117c2:	f3bf 8f4f 	dsb	sy
 80117c6:	60bb      	str	r3, [r7, #8]
}
 80117c8:	bf00      	nop
 80117ca:	bf00      	nop
 80117cc:	e7fd      	b.n	80117ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	685a      	ldr	r2, [r3, #4]
 80117d2:	4b14      	ldr	r3, [pc, #80]	@ (8011824 <vPortFree+0xbc>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	4013      	ands	r3, r2
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d01e      	beq.n	801181a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d11a      	bne.n	801181a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	685a      	ldr	r2, [r3, #4]
 80117e8:	4b0e      	ldr	r3, [pc, #56]	@ (8011824 <vPortFree+0xbc>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	43db      	mvns	r3, r3
 80117ee:	401a      	ands	r2, r3
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80117f4:	f7fe f914 	bl	800fa20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	685a      	ldr	r2, [r3, #4]
 80117fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011828 <vPortFree+0xc0>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	4413      	add	r3, r2
 8011802:	4a09      	ldr	r2, [pc, #36]	@ (8011828 <vPortFree+0xc0>)
 8011804:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011806:	6938      	ldr	r0, [r7, #16]
 8011808:	f000 f876 	bl	80118f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801180c:	4b07      	ldr	r3, [pc, #28]	@ (801182c <vPortFree+0xc4>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	3301      	adds	r3, #1
 8011812:	4a06      	ldr	r2, [pc, #24]	@ (801182c <vPortFree+0xc4>)
 8011814:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011816:	f7fe f911 	bl	800fa3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801181a:	bf00      	nop
 801181c:	3718      	adds	r7, #24
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}
 8011822:	bf00      	nop
 8011824:	240649e0 	.word	0x240649e0
 8011828:	240649d0 	.word	0x240649d0
 801182c:	240649dc 	.word	0x240649dc

08011830 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011830:	b480      	push	{r7}
 8011832:	b085      	sub	sp, #20
 8011834:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011836:	4b29      	ldr	r3, [pc, #164]	@ (80118dc <prvHeapInit+0xac>)
 8011838:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801183a:	4b29      	ldr	r3, [pc, #164]	@ (80118e0 <prvHeapInit+0xb0>)
 801183c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	f003 0307 	and.w	r3, r3, #7
 8011844:	2b00      	cmp	r3, #0
 8011846:	d00c      	beq.n	8011862 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	3307      	adds	r3, #7
 801184c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f023 0307 	bic.w	r3, r3, #7
 8011854:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011856:	68ba      	ldr	r2, [r7, #8]
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	1ad3      	subs	r3, r2, r3
 801185c:	4a20      	ldr	r2, [pc, #128]	@ (80118e0 <prvHeapInit+0xb0>)
 801185e:	4413      	add	r3, r2
 8011860:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011866:	4a1f      	ldr	r2, [pc, #124]	@ (80118e4 <prvHeapInit+0xb4>)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801186c:	4b1d      	ldr	r3, [pc, #116]	@ (80118e4 <prvHeapInit+0xb4>)
 801186e:	2200      	movs	r2, #0
 8011870:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	68ba      	ldr	r2, [r7, #8]
 8011876:	4413      	add	r3, r2
 8011878:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801187a:	2208      	movs	r2, #8
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	1a9b      	subs	r3, r3, r2
 8011880:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f023 0307 	bic.w	r3, r3, #7
 8011888:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	4a16      	ldr	r2, [pc, #88]	@ (80118e8 <prvHeapInit+0xb8>)
 801188e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011890:	4b15      	ldr	r3, [pc, #84]	@ (80118e8 <prvHeapInit+0xb8>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2200      	movs	r2, #0
 8011896:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011898:	4b13      	ldr	r3, [pc, #76]	@ (80118e8 <prvHeapInit+0xb8>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2200      	movs	r2, #0
 801189e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	1ad2      	subs	r2, r2, r3
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80118ae:	4b0e      	ldr	r3, [pc, #56]	@ (80118e8 <prvHeapInit+0xb8>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	4a0c      	ldr	r2, [pc, #48]	@ (80118ec <prvHeapInit+0xbc>)
 80118bc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	4a0b      	ldr	r2, [pc, #44]	@ (80118f0 <prvHeapInit+0xc0>)
 80118c4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80118c6:	4b0b      	ldr	r3, [pc, #44]	@ (80118f4 <prvHeapInit+0xc4>)
 80118c8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80118cc:	601a      	str	r2, [r3, #0]
}
 80118ce:	bf00      	nop
 80118d0:	3714      	adds	r7, #20
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr
 80118da:	bf00      	nop
 80118dc:	00030d40 	.word	0x00030d40
 80118e0:	24033c84 	.word	0x24033c84
 80118e4:	240649c4 	.word	0x240649c4
 80118e8:	240649cc 	.word	0x240649cc
 80118ec:	240649d4 	.word	0x240649d4
 80118f0:	240649d0 	.word	0x240649d0
 80118f4:	240649e0 	.word	0x240649e0

080118f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118f8:	b480      	push	{r7}
 80118fa:	b085      	sub	sp, #20
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011900:	4b28      	ldr	r3, [pc, #160]	@ (80119a4 <prvInsertBlockIntoFreeList+0xac>)
 8011902:	60fb      	str	r3, [r7, #12]
 8011904:	e002      	b.n	801190c <prvInsertBlockIntoFreeList+0x14>
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	60fb      	str	r3, [r7, #12]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	429a      	cmp	r2, r3
 8011914:	d8f7      	bhi.n	8011906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	68ba      	ldr	r2, [r7, #8]
 8011920:	4413      	add	r3, r2
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	429a      	cmp	r2, r3
 8011926:	d108      	bne.n	801193a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	685a      	ldr	r2, [r3, #4]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	441a      	add	r2, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	68ba      	ldr	r2, [r7, #8]
 8011944:	441a      	add	r2, r3
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	429a      	cmp	r2, r3
 801194c:	d118      	bne.n	8011980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681a      	ldr	r2, [r3, #0]
 8011952:	4b15      	ldr	r3, [pc, #84]	@ (80119a8 <prvInsertBlockIntoFreeList+0xb0>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	429a      	cmp	r2, r3
 8011958:	d00d      	beq.n	8011976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	685a      	ldr	r2, [r3, #4]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	441a      	add	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	681a      	ldr	r2, [r3, #0]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	601a      	str	r2, [r3, #0]
 8011974:	e008      	b.n	8011988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011976:	4b0c      	ldr	r3, [pc, #48]	@ (80119a8 <prvInsertBlockIntoFreeList+0xb0>)
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	601a      	str	r2, [r3, #0]
 801197e:	e003      	b.n	8011988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	429a      	cmp	r2, r3
 801198e:	d002      	beq.n	8011996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011996:	bf00      	nop
 8011998:	3714      	adds	r7, #20
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	240649c4 	.word	0x240649c4
 80119a8:	240649cc 	.word	0x240649cc

080119ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80119ac:	4b04      	ldr	r3, [pc, #16]	@ (80119c0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	b10a      	cbz	r2, 80119b6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xa>
 80119b2:	4803      	ldr	r0, [pc, #12]	@ (80119c0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 80119b4:	4770      	bx	lr
 80119b6:	4a03      	ldr	r2, [pc, #12]	@ (80119c4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x18>)
 80119b8:	4801      	ldr	r0, [pc, #4]	@ (80119c0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 80119ba:	6812      	ldr	r2, [r2, #0]
 80119bc:	601a      	str	r2, [r3, #0]
 80119be:	4770      	bx	lr
 80119c0:	24000020 	.word	0x24000020
 80119c4:	24000e94 	.word	0x24000e94

080119c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80119c8:	4a02      	ldr	r2, [pc, #8]	@ (80119d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 80119ca:	4b03      	ldr	r3, [pc, #12]	@ (80119d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 80119cc:	6812      	ldr	r2, [r2, #0]
 80119ce:	601a      	str	r2, [r3, #0]
 80119d0:	4770      	bx	lr
 80119d2:	bf00      	nop
 80119d4:	24000e94 	.word	0x24000e94
 80119d8:	24000020 	.word	0x24000020

080119dc <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 80119dc:	f005 b898 	b.w	8016b10 <autoware_control_msgs__msg__Control__init>

080119e0 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 80119e0:	f005 b8ec 	b.w	8016bbc <autoware_control_msgs__msg__Control__fini>

080119e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80119e4:	b510      	push	{r4, lr}
 80119e6:	4c0c      	ldr	r4, [pc, #48]	@ (8011a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 80119e8:	f001 f91e 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119ec:	60e0      	str	r0, [r4, #12]
 80119ee:	f001 f91b 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119f2:	64a0      	str	r0, [r4, #72]	@ 0x48
 80119f4:	f000 f81a 	bl	8011a2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 80119f8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80119fc:	f000 f832 	bl	8011a64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011a00:	4b06      	ldr	r3, [pc, #24]	@ (8011a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011a02:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	b10a      	cbz	r2, 8011a0e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 8011a0a:	4804      	ldr	r0, [pc, #16]	@ (8011a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011a0c:	bd10      	pop	{r4, pc}
 8011a0e:	4a04      	ldr	r2, [pc, #16]	@ (8011a20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 8011a10:	4802      	ldr	r0, [pc, #8]	@ (8011a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011a12:	6812      	ldr	r2, [r2, #0]
 8011a14:	601a      	str	r2, [r3, #0]
 8011a16:	bd10      	pop	{r4, pc}
 8011a18:	2400002c 	.word	0x2400002c
 8011a1c:	2400011c 	.word	0x2400011c
 8011a20:	24000e98 	.word	0x24000e98

08011a24 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 8011a24:	f005 b8de 	b.w	8016be4 <autoware_control_msgs__msg__Lateral__init>

08011a28 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 8011a28:	f005 b900 	b.w	8016c2c <autoware_control_msgs__msg__Lateral__fini>

08011a2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8011a2c:	b510      	push	{r4, lr}
 8011a2e:	4c08      	ldr	r4, [pc, #32]	@ (8011a50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 8011a30:	f001 f8fa 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a34:	60e0      	str	r0, [r4, #12]
 8011a36:	f001 f8f7 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a3a:	4b06      	ldr	r3, [pc, #24]	@ (8011a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8011a3c:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	b10a      	cbz	r2, 8011a46 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 8011a42:	4804      	ldr	r0, [pc, #16]	@ (8011a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8011a44:	bd10      	pop	{r4, pc}
 8011a46:	4a04      	ldr	r2, [pc, #16]	@ (8011a58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 8011a48:	4802      	ldr	r0, [pc, #8]	@ (8011a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8011a4a:	6812      	ldr	r2, [r2, #0]
 8011a4c:	601a      	str	r2, [r3, #0]
 8011a4e:	bd10      	pop	{r4, pc}
 8011a50:	24000128 	.word	0x24000128
 8011a54:	24000254 	.word	0x24000254
 8011a58:	24000e98 	.word	0x24000e98

08011a5c <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 8011a5c:	f005 b8f2 	b.w	8016c44 <autoware_control_msgs__msg__Longitudinal__init>

08011a60 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 8011a60:	f005 b914 	b.w	8016c8c <autoware_control_msgs__msg__Longitudinal__fini>

08011a64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8011a64:	b510      	push	{r4, lr}
 8011a66:	4c08      	ldr	r4, [pc, #32]	@ (8011a88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 8011a68:	f001 f8de 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a6c:	60e0      	str	r0, [r4, #12]
 8011a6e:	f001 f8db 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a72:	4b06      	ldr	r3, [pc, #24]	@ (8011a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8011a74:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011a76:	681a      	ldr	r2, [r3, #0]
 8011a78:	b10a      	cbz	r2, 8011a7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 8011a7a:	4804      	ldr	r0, [pc, #16]	@ (8011a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8011a7c:	bd10      	pop	{r4, pc}
 8011a7e:	4a04      	ldr	r2, [pc, #16]	@ (8011a90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 8011a80:	4802      	ldr	r0, [pc, #8]	@ (8011a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8011a82:	6812      	ldr	r2, [r2, #0]
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	bd10      	pop	{r4, pc}
 8011a88:	24000260 	.word	0x24000260
 8011a8c:	24000404 	.word	0x24000404
 8011a90:	24000e98 	.word	0x24000e98

08011a94 <get_serialized_size_autoware_control_msgs__msg__Control>:
 8011a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a96:	4604      	mov	r4, r0
 8011a98:	b1c8      	cbz	r0, 8011ace <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 8011a9a:	460f      	mov	r7, r1
 8011a9c:	f001 f8d2 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	f104 0008 	add.w	r0, r4, #8
 8011aa6:	443e      	add	r6, r7
 8011aa8:	4631      	mov	r1, r6
 8011aaa:	f001 f8cb 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011aae:	4605      	mov	r5, r0
 8011ab0:	f104 0010 	add.w	r0, r4, #16
 8011ab4:	4435      	add	r5, r6
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	f000 f8a2 	bl	8011c00 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8011abc:	4601      	mov	r1, r0
 8011abe:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011ac2:	440d      	add	r5, r1
 8011ac4:	4629      	mov	r1, r5
 8011ac6:	f000 f9a7 	bl	8011e18 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8011aca:	1bc0      	subs	r0, r0, r7
 8011acc:	4428      	add	r0, r5
 8011ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ad0 <_Control__cdr_deserialize>:
 8011ad0:	b570      	push	{r4, r5, r6, lr}
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	b329      	cbz	r1, 8011b22 <_Control__cdr_deserialize+0x52>
 8011ad6:	4605      	mov	r5, r0
 8011ad8:	f001 f918 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011adc:	4603      	mov	r3, r0
 8011ade:	4621      	mov	r1, r4
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	68db      	ldr	r3, [r3, #12]
 8011ae6:	4798      	blx	r3
 8011ae8:	f001 f910 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011aec:	4603      	mov	r3, r0
 8011aee:	f104 0108 	add.w	r1, r4, #8
 8011af2:	4628      	mov	r0, r5
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	4798      	blx	r3
 8011afa:	f000 f95b 	bl	8011db4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8011afe:	4603      	mov	r3, r0
 8011b00:	f104 0110 	add.w	r1, r4, #16
 8011b04:	4628      	mov	r0, r5
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	4798      	blx	r3
 8011b0c:	f000 fa28 	bl	8011f60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011b10:	4603      	mov	r3, r0
 8011b12:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 8011b16:	4628      	mov	r0, r5
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	4718      	bx	r3
 8011b22:	4608      	mov	r0, r1
 8011b24:	bd70      	pop	{r4, r5, r6, pc}
 8011b26:	bf00      	nop

08011b28 <_Control__cdr_serialize>:
 8011b28:	b338      	cbz	r0, 8011b7a <_Control__cdr_serialize+0x52>
 8011b2a:	b570      	push	{r4, r5, r6, lr}
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	460d      	mov	r5, r1
 8011b30:	f001 f8ec 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b34:	4603      	mov	r3, r0
 8011b36:	4629      	mov	r1, r5
 8011b38:	4620      	mov	r0, r4
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	689b      	ldr	r3, [r3, #8]
 8011b3e:	4798      	blx	r3
 8011b40:	f001 f8e4 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b44:	4603      	mov	r3, r0
 8011b46:	4629      	mov	r1, r5
 8011b48:	f104 0008 	add.w	r0, r4, #8
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	689b      	ldr	r3, [r3, #8]
 8011b50:	4798      	blx	r3
 8011b52:	f000 f92f 	bl	8011db4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8011b56:	4603      	mov	r3, r0
 8011b58:	4629      	mov	r1, r5
 8011b5a:	f104 0010 	add.w	r0, r4, #16
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	689b      	ldr	r3, [r3, #8]
 8011b62:	4798      	blx	r3
 8011b64:	f000 f9fc 	bl	8011f60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	4629      	mov	r1, r5
 8011b6c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b76:	689b      	ldr	r3, [r3, #8]
 8011b78:	4718      	bx	r3
 8011b7a:	4770      	bx	lr

08011b7c <_Control__get_serialized_size>:
 8011b7c:	b538      	push	{r3, r4, r5, lr}
 8011b7e:	4604      	mov	r4, r0
 8011b80:	b1b8      	cbz	r0, 8011bb2 <_Control__get_serialized_size+0x36>
 8011b82:	2100      	movs	r1, #0
 8011b84:	f001 f85e 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b88:	4605      	mov	r5, r0
 8011b8a:	f104 0008 	add.w	r0, r4, #8
 8011b8e:	4629      	mov	r1, r5
 8011b90:	f001 f858 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b94:	4601      	mov	r1, r0
 8011b96:	f104 0010 	add.w	r0, r4, #16
 8011b9a:	440d      	add	r5, r1
 8011b9c:	4629      	mov	r1, r5
 8011b9e:	f000 f82f 	bl	8011c00 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011ba8:	440d      	add	r5, r1
 8011baa:	4629      	mov	r1, r5
 8011bac:	f000 f934 	bl	8011e18 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8011bb0:	4428      	add	r0, r5
 8011bb2:	bd38      	pop	{r3, r4, r5, pc}

08011bb4 <_Control__max_serialized_size>:
 8011bb4:	b530      	push	{r4, r5, lr}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	2301      	movs	r3, #1
 8011bba:	2100      	movs	r1, #0
 8011bbc:	f10d 0007 	add.w	r0, sp, #7
 8011bc0:	f88d 3007 	strb.w	r3, [sp, #7]
 8011bc4:	f001 f88e 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011bc8:	4604      	mov	r4, r0
 8011bca:	f10d 0007 	add.w	r0, sp, #7
 8011bce:	4621      	mov	r1, r4
 8011bd0:	f001 f888 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011bd4:	4605      	mov	r5, r0
 8011bd6:	f10d 0007 	add.w	r0, sp, #7
 8011bda:	4425      	add	r5, r4
 8011bdc:	4629      	mov	r1, r5
 8011bde:	f000 f8c7 	bl	8011d70 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 8011be2:	4604      	mov	r4, r0
 8011be4:	f10d 0007 	add.w	r0, sp, #7
 8011be8:	442c      	add	r4, r5
 8011bea:	4621      	mov	r1, r4
 8011bec:	f000 f980 	bl	8011ef0 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8011bf0:	4420      	add	r0, r4
 8011bf2:	b003      	add	sp, #12
 8011bf4:	bd30      	pop	{r4, r5, pc}
 8011bf6:	bf00      	nop

08011bf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8011bf8:	4800      	ldr	r0, [pc, #0]	@ (8011bfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 8011bfa:	4770      	bx	lr
 8011bfc:	24000410 	.word	0x24000410

08011c00 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 8011c00:	b5b0      	push	{r4, r5, r7, lr}
 8011c02:	4604      	mov	r4, r0
 8011c04:	b1f0      	cbz	r0, 8011c44 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 8011c06:	460d      	mov	r5, r1
 8011c08:	f001 f81c 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c0c:	4607      	mov	r7, r0
 8011c0e:	f104 0008 	add.w	r0, r4, #8
 8011c12:	442f      	add	r7, r5
 8011c14:	f1c5 0501 	rsb	r5, r5, #1
 8011c18:	4639      	mov	r1, r7
 8011c1a:	f001 f813 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c1e:	4407      	add	r7, r0
 8011c20:	2104      	movs	r1, #4
 8011c22:	4638      	mov	r0, r7
 8011c24:	f002 fb12 	bl	801424c <ucdr_alignment>
 8011c28:	2104      	movs	r1, #4
 8011c2a:	1844      	adds	r4, r0, r1
 8011c2c:	443c      	add	r4, r7
 8011c2e:	4620      	mov	r0, r4
 8011c30:	f002 fb0c 	bl	801424c <ucdr_alignment>
 8011c34:	3004      	adds	r0, #4
 8011c36:	2101      	movs	r1, #1
 8011c38:	4404      	add	r4, r0
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	f002 fb06 	bl	801424c <ucdr_alignment>
 8011c40:	4428      	add	r0, r5
 8011c42:	4420      	add	r0, r4
 8011c44:	bdb0      	pop	{r4, r5, r7, pc}
 8011c46:	bf00      	nop

08011c48 <_Lateral__cdr_deserialize>:
 8011c48:	b538      	push	{r3, r4, r5, lr}
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	b311      	cbz	r1, 8011c94 <_Lateral__cdr_deserialize+0x4c>
 8011c4e:	4605      	mov	r5, r0
 8011c50:	f001 f85c 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c54:	4603      	mov	r3, r0
 8011c56:	4621      	mov	r1, r4
 8011c58:	4628      	mov	r0, r5
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	4798      	blx	r3
 8011c60:	f001 f854 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c64:	4603      	mov	r3, r0
 8011c66:	f104 0108 	add.w	r1, r4, #8
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	4798      	blx	r3
 8011c72:	f104 0110 	add.w	r1, r4, #16
 8011c76:	4628      	mov	r0, r5
 8011c78:	f002 f86a 	bl	8013d50 <ucdr_deserialize_float>
 8011c7c:	f104 0114 	add.w	r1, r4, #20
 8011c80:	4628      	mov	r0, r5
 8011c82:	f002 f865 	bl	8013d50 <ucdr_deserialize_float>
 8011c86:	f104 0118 	add.w	r1, r4, #24
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c90:	f001 b856 	b.w	8012d40 <ucdr_deserialize_bool>
 8011c94:	4608      	mov	r0, r1
 8011c96:	bd38      	pop	{r3, r4, r5, pc}

08011c98 <_Lateral__cdr_serialize>:
 8011c98:	b318      	cbz	r0, 8011ce2 <_Lateral__cdr_serialize+0x4a>
 8011c9a:	b538      	push	{r3, r4, r5, lr}
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	460d      	mov	r5, r1
 8011ca0:	f001 f834 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	4620      	mov	r0, r4
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	689b      	ldr	r3, [r3, #8]
 8011cae:	4798      	blx	r3
 8011cb0:	f001 f82c 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	f104 0008 	add.w	r0, r4, #8
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	4798      	blx	r3
 8011cc2:	ed94 0a04 	vldr	s0, [r4, #16]
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	f001 ffaa 	bl	8013c20 <ucdr_serialize_float>
 8011ccc:	ed94 0a05 	vldr	s0, [r4, #20]
 8011cd0:	4628      	mov	r0, r5
 8011cd2:	f001 ffa5 	bl	8013c20 <ucdr_serialize_float>
 8011cd6:	7e21      	ldrb	r1, [r4, #24]
 8011cd8:	4628      	mov	r0, r5
 8011cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cde:	f001 b819 	b.w	8012d14 <ucdr_serialize_bool>
 8011ce2:	4770      	bx	lr

08011ce4 <_Lateral__get_serialized_size>:
 8011ce4:	b538      	push	{r3, r4, r5, lr}
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	b1d8      	cbz	r0, 8011d22 <_Lateral__get_serialized_size+0x3e>
 8011cea:	2100      	movs	r1, #0
 8011cec:	f000 ffaa 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011cf0:	4605      	mov	r5, r0
 8011cf2:	f104 0008 	add.w	r0, r4, #8
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	f000 ffa4 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011cfc:	4405      	add	r5, r0
 8011cfe:	2104      	movs	r1, #4
 8011d00:	4628      	mov	r0, r5
 8011d02:	f002 faa3 	bl	801424c <ucdr_alignment>
 8011d06:	2104      	movs	r1, #4
 8011d08:	4408      	add	r0, r1
 8011d0a:	1944      	adds	r4, r0, r5
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	f002 fa9d 	bl	801424c <ucdr_alignment>
 8011d12:	3004      	adds	r0, #4
 8011d14:	2101      	movs	r1, #1
 8011d16:	4404      	add	r4, r0
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f002 fa97 	bl	801424c <ucdr_alignment>
 8011d1e:	3001      	adds	r0, #1
 8011d20:	4420      	add	r0, r4
 8011d22:	bd38      	pop	{r3, r4, r5, pc}

08011d24 <_Lateral__max_serialized_size>:
 8011d24:	b530      	push	{r4, r5, lr}
 8011d26:	b083      	sub	sp, #12
 8011d28:	2501      	movs	r5, #1
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	f10d 0007 	add.w	r0, sp, #7
 8011d30:	f88d 5007 	strb.w	r5, [sp, #7]
 8011d34:	f000 ffd6 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d38:	4604      	mov	r4, r0
 8011d3a:	f10d 0007 	add.w	r0, sp, #7
 8011d3e:	4621      	mov	r1, r4
 8011d40:	f000 ffd0 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d44:	4404      	add	r4, r0
 8011d46:	2104      	movs	r1, #4
 8011d48:	4620      	mov	r0, r4
 8011d4a:	f002 fa7f 	bl	801424c <ucdr_alignment>
 8011d4e:	2104      	movs	r1, #4
 8011d50:	4408      	add	r0, r1
 8011d52:	4404      	add	r4, r0
 8011d54:	4620      	mov	r0, r4
 8011d56:	f002 fa79 	bl	801424c <ucdr_alignment>
 8011d5a:	3004      	adds	r0, #4
 8011d5c:	4629      	mov	r1, r5
 8011d5e:	4404      	add	r4, r0
 8011d60:	4620      	mov	r0, r4
 8011d62:	f002 fa73 	bl	801424c <ucdr_alignment>
 8011d66:	4428      	add	r0, r5
 8011d68:	4420      	add	r0, r4
 8011d6a:	b003      	add	sp, #12
 8011d6c:	bd30      	pop	{r4, r5, pc}
 8011d6e:	bf00      	nop

08011d70 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 8011d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d72:	2701      	movs	r7, #1
 8011d74:	460c      	mov	r4, r1
 8011d76:	4606      	mov	r6, r0
 8011d78:	7007      	strb	r7, [r0, #0]
 8011d7a:	f000 ffb3 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d7e:	4605      	mov	r5, r0
 8011d80:	4630      	mov	r0, r6
 8011d82:	4425      	add	r5, r4
 8011d84:	1b3c      	subs	r4, r7, r4
 8011d86:	4629      	mov	r1, r5
 8011d88:	f000 ffac 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d8c:	4405      	add	r5, r0
 8011d8e:	2104      	movs	r1, #4
 8011d90:	4628      	mov	r0, r5
 8011d92:	f002 fa5b 	bl	801424c <ucdr_alignment>
 8011d96:	2104      	movs	r1, #4
 8011d98:	4408      	add	r0, r1
 8011d9a:	4405      	add	r5, r0
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f002 fa55 	bl	801424c <ucdr_alignment>
 8011da2:	3004      	adds	r0, #4
 8011da4:	4639      	mov	r1, r7
 8011da6:	4405      	add	r5, r0
 8011da8:	4628      	mov	r0, r5
 8011daa:	f002 fa4f 	bl	801424c <ucdr_alignment>
 8011dae:	4420      	add	r0, r4
 8011db0:	4428      	add	r0, r5
 8011db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011db4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8011db4:	4800      	ldr	r0, [pc, #0]	@ (8011db8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 8011db6:	4770      	bx	lr
 8011db8:	24000438 	.word	0x24000438

08011dbc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 8011dbc:	b570      	push	{r4, r5, r6, lr}
 8011dbe:	460c      	mov	r4, r1
 8011dc0:	4606      	mov	r6, r0
 8011dc2:	f000 ff3f 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	f106 0008 	add.w	r0, r6, #8
 8011dcc:	4425      	add	r5, r4
 8011dce:	f1c4 0401 	rsb	r4, r4, #1
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	f000 ff36 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011dd8:	4405      	add	r5, r0
 8011dda:	2104      	movs	r1, #4
 8011ddc:	4628      	mov	r0, r5
 8011dde:	f002 fa35 	bl	801424c <ucdr_alignment>
 8011de2:	2104      	movs	r1, #4
 8011de4:	4408      	add	r0, r1
 8011de6:	4405      	add	r5, r0
 8011de8:	4628      	mov	r0, r5
 8011dea:	f002 fa2f 	bl	801424c <ucdr_alignment>
 8011dee:	2104      	movs	r1, #4
 8011df0:	4408      	add	r0, r1
 8011df2:	1946      	adds	r6, r0, r5
 8011df4:	4630      	mov	r0, r6
 8011df6:	f002 fa29 	bl	801424c <ucdr_alignment>
 8011dfa:	1d05      	adds	r5, r0, #4
 8011dfc:	2101      	movs	r1, #1
 8011dfe:	4435      	add	r5, r6
 8011e00:	4628      	mov	r0, r5
 8011e02:	f002 fa23 	bl	801424c <ucdr_alignment>
 8011e06:	2101      	movs	r1, #1
 8011e08:	4408      	add	r0, r1
 8011e0a:	4405      	add	r5, r0
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f002 fa1d 	bl	801424c <ucdr_alignment>
 8011e12:	4420      	add	r0, r4
 8011e14:	4428      	add	r0, r5
 8011e16:	bd70      	pop	{r4, r5, r6, pc}

08011e18 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8011e18:	b108      	cbz	r0, 8011e1e <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 8011e1a:	f7ff bfcf 	b.w	8011dbc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 8011e1e:	4770      	bx	lr

08011e20 <_Longitudinal__get_serialized_size>:
 8011e20:	b110      	cbz	r0, 8011e28 <_Longitudinal__get_serialized_size+0x8>
 8011e22:	2100      	movs	r1, #0
 8011e24:	f7ff bfca 	b.w	8011dbc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop

08011e2c <_Longitudinal__cdr_deserialize>:
 8011e2c:	b538      	push	{r3, r4, r5, lr}
 8011e2e:	460c      	mov	r4, r1
 8011e30:	b361      	cbz	r1, 8011e8c <_Longitudinal__cdr_deserialize+0x60>
 8011e32:	4605      	mov	r5, r0
 8011e34:	f000 ff6a 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	4621      	mov	r1, r4
 8011e3c:	4628      	mov	r0, r5
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	4798      	blx	r3
 8011e44:	f000 ff62 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	f104 0108 	add.w	r1, r4, #8
 8011e4e:	4628      	mov	r0, r5
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	4798      	blx	r3
 8011e56:	f104 0110 	add.w	r1, r4, #16
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	f001 ff78 	bl	8013d50 <ucdr_deserialize_float>
 8011e60:	f104 0114 	add.w	r1, r4, #20
 8011e64:	4628      	mov	r0, r5
 8011e66:	f001 ff73 	bl	8013d50 <ucdr_deserialize_float>
 8011e6a:	f104 0118 	add.w	r1, r4, #24
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f001 ff6e 	bl	8013d50 <ucdr_deserialize_float>
 8011e74:	f104 011c 	add.w	r1, r4, #28
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f000 ff61 	bl	8012d40 <ucdr_deserialize_bool>
 8011e7e:	f104 011d 	add.w	r1, r4, #29
 8011e82:	4628      	mov	r0, r5
 8011e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e88:	f000 bf5a 	b.w	8012d40 <ucdr_deserialize_bool>
 8011e8c:	4608      	mov	r0, r1
 8011e8e:	bd38      	pop	{r3, r4, r5, pc}

08011e90 <_Longitudinal__cdr_serialize>:
 8011e90:	b360      	cbz	r0, 8011eec <_Longitudinal__cdr_serialize+0x5c>
 8011e92:	b538      	push	{r3, r4, r5, lr}
 8011e94:	4604      	mov	r4, r0
 8011e96:	460d      	mov	r5, r1
 8011e98:	f000 ff38 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	4798      	blx	r3
 8011ea8:	f000 ff30 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011eac:	4603      	mov	r3, r0
 8011eae:	4629      	mov	r1, r5
 8011eb0:	f104 0008 	add.w	r0, r4, #8
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	689b      	ldr	r3, [r3, #8]
 8011eb8:	4798      	blx	r3
 8011eba:	ed94 0a04 	vldr	s0, [r4, #16]
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	f001 feae 	bl	8013c20 <ucdr_serialize_float>
 8011ec4:	ed94 0a05 	vldr	s0, [r4, #20]
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f001 fea9 	bl	8013c20 <ucdr_serialize_float>
 8011ece:	ed94 0a06 	vldr	s0, [r4, #24]
 8011ed2:	4628      	mov	r0, r5
 8011ed4:	f001 fea4 	bl	8013c20 <ucdr_serialize_float>
 8011ed8:	7f21      	ldrb	r1, [r4, #28]
 8011eda:	4628      	mov	r0, r5
 8011edc:	f000 ff1a 	bl	8012d14 <ucdr_serialize_bool>
 8011ee0:	7f61      	ldrb	r1, [r4, #29]
 8011ee2:	4628      	mov	r0, r5
 8011ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ee8:	f000 bf14 	b.w	8012d14 <ucdr_serialize_bool>
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop

08011ef0 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8011ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ef2:	2701      	movs	r7, #1
 8011ef4:	460c      	mov	r4, r1
 8011ef6:	4606      	mov	r6, r0
 8011ef8:	7007      	strb	r7, [r0, #0]
 8011efa:	f000 fef3 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011efe:	4605      	mov	r5, r0
 8011f00:	4630      	mov	r0, r6
 8011f02:	4425      	add	r5, r4
 8011f04:	1b3c      	subs	r4, r7, r4
 8011f06:	4629      	mov	r1, r5
 8011f08:	f000 feec 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011f0c:	4405      	add	r5, r0
 8011f0e:	2104      	movs	r1, #4
 8011f10:	4628      	mov	r0, r5
 8011f12:	f002 f99b 	bl	801424c <ucdr_alignment>
 8011f16:	2104      	movs	r1, #4
 8011f18:	4408      	add	r0, r1
 8011f1a:	4405      	add	r5, r0
 8011f1c:	4628      	mov	r0, r5
 8011f1e:	f002 f995 	bl	801424c <ucdr_alignment>
 8011f22:	2104      	movs	r1, #4
 8011f24:	4408      	add	r0, r1
 8011f26:	1946      	adds	r6, r0, r5
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f002 f98f 	bl	801424c <ucdr_alignment>
 8011f2e:	1d05      	adds	r5, r0, #4
 8011f30:	4639      	mov	r1, r7
 8011f32:	4435      	add	r5, r6
 8011f34:	4628      	mov	r0, r5
 8011f36:	f002 f989 	bl	801424c <ucdr_alignment>
 8011f3a:	4438      	add	r0, r7
 8011f3c:	4639      	mov	r1, r7
 8011f3e:	4405      	add	r5, r0
 8011f40:	4628      	mov	r0, r5
 8011f42:	f002 f983 	bl	801424c <ucdr_alignment>
 8011f46:	4420      	add	r0, r4
 8011f48:	4428      	add	r0, r5
 8011f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f4c <_Longitudinal__max_serialized_size>:
 8011f4c:	b500      	push	{lr}
 8011f4e:	b083      	sub	sp, #12
 8011f50:	2100      	movs	r1, #0
 8011f52:	f10d 0007 	add.w	r0, sp, #7
 8011f56:	f7ff ffcb 	bl	8011ef0 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8011f5a:	b003      	add	sp, #12
 8011f5c:	f85d fb04 	ldr.w	pc, [sp], #4

08011f60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8011f60:	4800      	ldr	r0, [pc, #0]	@ (8011f64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 8011f62:	4770      	bx	lr
 8011f64:	24000460 	.word	0x24000460

08011f68 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8011f68:	4b04      	ldr	r3, [pc, #16]	@ (8011f7c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	b10a      	cbz	r2, 8011f72 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xa>
 8011f6e:	4803      	ldr	r0, [pc, #12]	@ (8011f7c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011f70:	4770      	bx	lr
 8011f72:	4a03      	ldr	r2, [pc, #12]	@ (8011f80 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x18>)
 8011f74:	4801      	ldr	r0, [pc, #4]	@ (8011f7c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011f76:	6812      	ldr	r2, [r2, #0]
 8011f78:	601a      	str	r2, [r3, #0]
 8011f7a:	4770      	bx	lr
 8011f7c:	24000490 	.word	0x24000490
 8011f80:	24000e94 	.word	0x24000e94

08011f84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011f84:	4b04      	ldr	r3, [pc, #16]	@ (8011f98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8011f86:	4805      	ldr	r0, [pc, #20]	@ (8011f9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4905      	ldr	r1, [pc, #20]	@ (8011fa0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8011f8c:	4a05      	ldr	r2, [pc, #20]	@ (8011fa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011f8e:	6003      	str	r3, [r0, #0]
 8011f90:	600b      	str	r3, [r1, #0]
 8011f92:	6013      	str	r3, [r2, #0]
 8011f94:	4770      	bx	lr
 8011f96:	bf00      	nop
 8011f98:	24000e94 	.word	0x24000e94
 8011f9c:	240004ac 	.word	0x240004ac
 8011fa0:	240004b8 	.word	0x240004b8
 8011fa4:	24000490 	.word	0x24000490

08011fa8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8011fa8:	4b04      	ldr	r3, [pc, #16]	@ (8011fbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	b10a      	cbz	r2, 8011fb2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xa>
 8011fae:	4803      	ldr	r0, [pc, #12]	@ (8011fbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011fb0:	4770      	bx	lr
 8011fb2:	4a03      	ldr	r2, [pc, #12]	@ (8011fc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x18>)
 8011fb4:	4801      	ldr	r0, [pc, #4]	@ (8011fbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011fb6:	6812      	ldr	r2, [r2, #0]
 8011fb8:	601a      	str	r2, [r3, #0]
 8011fba:	4770      	bx	lr
 8011fbc:	240004cc 	.word	0x240004cc
 8011fc0:	24000e94 	.word	0x24000e94

08011fc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8011fc4:	4a02      	ldr	r2, [pc, #8]	@ (8011fd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 8011fc6:	4b03      	ldr	r3, [pc, #12]	@ (8011fd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 8011fc8:	6812      	ldr	r2, [r2, #0]
 8011fca:	601a      	str	r2, [r3, #0]
 8011fcc:	4770      	bx	lr
 8011fce:	bf00      	nop
 8011fd0:	24000e94 	.word	0x24000e94
 8011fd4:	240004cc 	.word	0x240004cc

08011fd8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8011fd8:	4b04      	ldr	r3, [pc, #16]	@ (8011fec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	b10a      	cbz	r2, 8011fe2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xa>
 8011fde:	4803      	ldr	r0, [pc, #12]	@ (8011fec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8011fe0:	4770      	bx	lr
 8011fe2:	4a03      	ldr	r2, [pc, #12]	@ (8011ff0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x18>)
 8011fe4:	4801      	ldr	r0, [pc, #4]	@ (8011fec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8011fe6:	6812      	ldr	r2, [r2, #0]
 8011fe8:	601a      	str	r2, [r3, #0]
 8011fea:	4770      	bx	lr
 8011fec:	240004e0 	.word	0x240004e0
 8011ff0:	24000e94 	.word	0x24000e94

08011ff4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8011ff4:	4a02      	ldr	r2, [pc, #8]	@ (8012000 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 8011ff6:	4b03      	ldr	r3, [pc, #12]	@ (8012004 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 8011ff8:	6812      	ldr	r2, [r2, #0]
 8011ffa:	601a      	str	r2, [r3, #0]
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop
 8012000:	24000e94 	.word	0x24000e94
 8012004:	240004e0 	.word	0x240004e0

08012008 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8012008:	4b04      	ldr	r3, [pc, #16]	@ (801201c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	b10a      	cbz	r2, 8012012 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xa>
 801200e:	4803      	ldr	r0, [pc, #12]	@ (801201c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8012010:	4770      	bx	lr
 8012012:	4a03      	ldr	r2, [pc, #12]	@ (8012020 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x18>)
 8012014:	4801      	ldr	r0, [pc, #4]	@ (801201c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8012016:	6812      	ldr	r2, [r2, #0]
 8012018:	601a      	str	r2, [r3, #0]
 801201a:	4770      	bx	lr
 801201c:	240004f4 	.word	0x240004f4
 8012020:	24000e94 	.word	0x24000e94

08012024 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8012024:	4a02      	ldr	r2, [pc, #8]	@ (8012030 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 8012026:	4b03      	ldr	r3, [pc, #12]	@ (8012034 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 8012028:	6812      	ldr	r2, [r2, #0]
 801202a:	601a      	str	r2, [r3, #0]
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop
 8012030:	24000e94 	.word	0x24000e94
 8012034:	240004f4 	.word	0x240004f4

08012038 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8012038:	4b04      	ldr	r3, [pc, #16]	@ (801204c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 801203a:	681a      	ldr	r2, [r3, #0]
 801203c:	b10a      	cbz	r2, 8012042 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xa>
 801203e:	4803      	ldr	r0, [pc, #12]	@ (801204c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8012040:	4770      	bx	lr
 8012042:	4a03      	ldr	r2, [pc, #12]	@ (8012050 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 8012044:	4801      	ldr	r0, [pc, #4]	@ (801204c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8012046:	6812      	ldr	r2, [r2, #0]
 8012048:	601a      	str	r2, [r3, #0]
 801204a:	4770      	bx	lr
 801204c:	24000508 	.word	0x24000508
 8012050:	24000e94 	.word	0x24000e94

08012054 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8012054:	4a02      	ldr	r2, [pc, #8]	@ (8012060 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8012056:	4b03      	ldr	r3, [pc, #12]	@ (8012064 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8012058:	6812      	ldr	r2, [r2, #0]
 801205a:	601a      	str	r2, [r3, #0]
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop
 8012060:	24000e94 	.word	0x24000e94
 8012064:	24000508 	.word	0x24000508

08012068 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012068:	4b04      	ldr	r3, [pc, #16]	@ (801207c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	b10a      	cbz	r2, 8012072 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xa>
 801206e:	4803      	ldr	r0, [pc, #12]	@ (801207c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8012070:	4770      	bx	lr
 8012072:	4a03      	ldr	r2, [pc, #12]	@ (8012080 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x18>)
 8012074:	4801      	ldr	r0, [pc, #4]	@ (801207c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8012076:	6812      	ldr	r2, [r2, #0]
 8012078:	601a      	str	r2, [r3, #0]
 801207a:	4770      	bx	lr
 801207c:	2400051c 	.word	0x2400051c
 8012080:	24000e94 	.word	0x24000e94

08012084 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012084:	4a02      	ldr	r2, [pc, #8]	@ (8012090 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8012086:	4b03      	ldr	r3, [pc, #12]	@ (8012094 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8012088:	6812      	ldr	r2, [r2, #0]
 801208a:	601a      	str	r2, [r3, #0]
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	24000e94 	.word	0x24000e94
 8012094:	2400051c 	.word	0x2400051c

08012098 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8012098:	4b04      	ldr	r3, [pc, #16]	@ (80120ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	b10a      	cbz	r2, 80120a2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xa>
 801209e:	4803      	ldr	r0, [pc, #12]	@ (80120ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 80120a0:	4770      	bx	lr
 80120a2:	4a03      	ldr	r2, [pc, #12]	@ (80120b0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x18>)
 80120a4:	4801      	ldr	r0, [pc, #4]	@ (80120ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 80120a6:	6812      	ldr	r2, [r2, #0]
 80120a8:	601a      	str	r2, [r3, #0]
 80120aa:	4770      	bx	lr
 80120ac:	24000530 	.word	0x24000530
 80120b0:	24000e94 	.word	0x24000e94

080120b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 80120b4:	4a02      	ldr	r2, [pc, #8]	@ (80120c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 80120b6:	4b03      	ldr	r3, [pc, #12]	@ (80120c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 80120b8:	6812      	ldr	r2, [r2, #0]
 80120ba:	601a      	str	r2, [r3, #0]
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop
 80120c0:	24000e94 	.word	0x24000e94
 80120c4:	24000530 	.word	0x24000530

080120c8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80120c8:	4b04      	ldr	r3, [pc, #16]	@ (80120dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 80120ca:	681a      	ldr	r2, [r3, #0]
 80120cc:	b10a      	cbz	r2, 80120d2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 80120ce:	4803      	ldr	r0, [pc, #12]	@ (80120dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 80120d0:	4770      	bx	lr
 80120d2:	4a03      	ldr	r2, [pc, #12]	@ (80120e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 80120d4:	4801      	ldr	r0, [pc, #4]	@ (80120dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 80120d6:	6812      	ldr	r2, [r2, #0]
 80120d8:	601a      	str	r2, [r3, #0]
 80120da:	4770      	bx	lr
 80120dc:	24000544 	.word	0x24000544
 80120e0:	24000e94 	.word	0x24000e94

080120e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80120e4:	4a02      	ldr	r2, [pc, #8]	@ (80120f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 80120e6:	4b03      	ldr	r3, [pc, #12]	@ (80120f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 80120e8:	6812      	ldr	r2, [r2, #0]
 80120ea:	601a      	str	r2, [r3, #0]
 80120ec:	4770      	bx	lr
 80120ee:	bf00      	nop
 80120f0:	24000e94 	.word	0x24000e94
 80120f4:	24000544 	.word	0x24000544

080120f8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 80120f8:	4b04      	ldr	r3, [pc, #16]	@ (801210c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	b10a      	cbz	r2, 8012102 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 80120fe:	4803      	ldr	r0, [pc, #12]	@ (801210c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8012100:	4770      	bx	lr
 8012102:	4a03      	ldr	r2, [pc, #12]	@ (8012110 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 8012104:	4801      	ldr	r0, [pc, #4]	@ (801210c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8012106:	6812      	ldr	r2, [r2, #0]
 8012108:	601a      	str	r2, [r3, #0]
 801210a:	4770      	bx	lr
 801210c:	24000558 	.word	0x24000558
 8012110:	24000e94 	.word	0x24000e94

08012114 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012114:	4a02      	ldr	r2, [pc, #8]	@ (8012120 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 8012116:	4b03      	ldr	r3, [pc, #12]	@ (8012124 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 8012118:	6812      	ldr	r2, [r2, #0]
 801211a:	601a      	str	r2, [r3, #0]
 801211c:	4770      	bx	lr
 801211e:	bf00      	nop
 8012120:	24000e94 	.word	0x24000e94
 8012124:	24000558 	.word	0x24000558

08012128 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8012128:	4b04      	ldr	r3, [pc, #16]	@ (801213c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 801212a:	681a      	ldr	r2, [r3, #0]
 801212c:	b10a      	cbz	r2, 8012132 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xa>
 801212e:	4803      	ldr	r0, [pc, #12]	@ (801213c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 8012130:	4770      	bx	lr
 8012132:	4a03      	ldr	r2, [pc, #12]	@ (8012140 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x18>)
 8012134:	4801      	ldr	r0, [pc, #4]	@ (801213c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 8012136:	6812      	ldr	r2, [r2, #0]
 8012138:	601a      	str	r2, [r3, #0]
 801213a:	4770      	bx	lr
 801213c:	2400056c 	.word	0x2400056c
 8012140:	24000e94 	.word	0x24000e94

08012144 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8012144:	4a02      	ldr	r2, [pc, #8]	@ (8012150 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 8012146:	4b03      	ldr	r3, [pc, #12]	@ (8012154 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 8012148:	6812      	ldr	r2, [r2, #0]
 801214a:	601a      	str	r2, [r3, #0]
 801214c:	4770      	bx	lr
 801214e:	bf00      	nop
 8012150:	24000e94 	.word	0x24000e94
 8012154:	2400056c 	.word	0x2400056c

08012158 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 8012158:	f004 bda4 	b.w	8016ca4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

0801215c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 801215c:	f004 bdb4 	b.w	8016cc8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

08012160 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 8012160:	f004 bdb6 	b.w	8016cd0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

08012164 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8012164:	f004 bdb8 	b.w	8016cd8 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

08012168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012168:	b508      	push	{r3, lr}
 801216a:	f000 fd5d 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801216e:	4b06      	ldr	r3, [pc, #24]	@ (8012188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8012170:	4906      	ldr	r1, [pc, #24]	@ (801218c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 8012172:	681a      	ldr	r2, [r3, #0]
 8012174:	60c8      	str	r0, [r1, #12]
 8012176:	b10a      	cbz	r2, 801217c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8012178:	4803      	ldr	r0, [pc, #12]	@ (8012188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801217a:	bd08      	pop	{r3, pc}
 801217c:	4a04      	ldr	r2, [pc, #16]	@ (8012190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 801217e:	4802      	ldr	r0, [pc, #8]	@ (8012188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8012180:	6812      	ldr	r2, [r2, #0]
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	bd08      	pop	{r3, pc}
 8012186:	bf00      	nop
 8012188:	240005f0 	.word	0x240005f0
 801218c:	24000578 	.word	0x24000578
 8012190:	24000e98 	.word	0x24000e98

08012194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012194:	4b04      	ldr	r3, [pc, #16]	@ (80121a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8012196:	681a      	ldr	r2, [r3, #0]
 8012198:	b10a      	cbz	r2, 801219e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 801219a:	4803      	ldr	r0, [pc, #12]	@ (80121a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 801219c:	4770      	bx	lr
 801219e:	4a03      	ldr	r2, [pc, #12]	@ (80121ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 80121a0:	4801      	ldr	r0, [pc, #4]	@ (80121a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80121a2:	6812      	ldr	r2, [r2, #0]
 80121a4:	601a      	str	r2, [r3, #0]
 80121a6:	4770      	bx	lr
 80121a8:	24000638 	.word	0x24000638
 80121ac:	24000e98 	.word	0x24000e98

080121b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 80121b0:	4b16      	ldr	r3, [pc, #88]	@ (801220c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	b510      	push	{r4, lr}
 80121b6:	b132      	cbz	r2, 80121c6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 80121b8:	685c      	ldr	r4, [r3, #4]
 80121ba:	68a3      	ldr	r3, [r4, #8]
 80121bc:	b153      	cbz	r3, 80121d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 80121be:	68e3      	ldr	r3, [r4, #12]
 80121c0:	b1a3      	cbz	r3, 80121ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 80121c2:	4812      	ldr	r0, [pc, #72]	@ (801220c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80121c4:	bd10      	pop	{r4, pc}
 80121c6:	4a12      	ldr	r2, [pc, #72]	@ (8012210 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 80121c8:	685c      	ldr	r4, [r3, #4]
 80121ca:	6812      	ldr	r2, [r2, #0]
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	68a3      	ldr	r3, [r4, #8]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d1f4      	bne.n	80121be <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 80121d4:	f000 fd28 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121d8:	4b0e      	ldr	r3, [pc, #56]	@ (8012214 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 80121da:	490f      	ldr	r1, [pc, #60]	@ (8012218 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	60c8      	str	r0, [r1, #12]
 80121e0:	b17a      	cbz	r2, 8012202 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	60a3      	str	r3, [r4, #8]
 80121e6:	68e3      	ldr	r3, [r4, #12]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d1ea      	bne.n	80121c2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 80121ec:	4b0b      	ldr	r3, [pc, #44]	@ (801221c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	b11a      	cbz	r2, 80121fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	4805      	ldr	r0, [pc, #20]	@ (801220c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80121f6:	60e3      	str	r3, [r4, #12]
 80121f8:	bd10      	pop	{r4, pc}
 80121fa:	4a05      	ldr	r2, [pc, #20]	@ (8012210 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 80121fc:	6812      	ldr	r2, [r2, #0]
 80121fe:	601a      	str	r2, [r3, #0]
 8012200:	e7f7      	b.n	80121f2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 8012202:	4a03      	ldr	r2, [pc, #12]	@ (8012210 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012204:	6812      	ldr	r2, [r2, #0]
 8012206:	601a      	str	r2, [r3, #0]
 8012208:	e7eb      	b.n	80121e2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 801220a:	bf00      	nop
 801220c:	24000654 	.word	0x24000654
 8012210:	24000e98 	.word	0x24000e98
 8012214:	240005f0 	.word	0x240005f0
 8012218:	24000578 	.word	0x24000578
 801221c:	24000638 	.word	0x24000638

08012220 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8012220:	f004 bd5c 	b.w	8016cdc <autoware_vehicle_msgs__msg__ControlModeReport__init>

08012224 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8012224:	f004 bd6c 	b.w	8016d00 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

08012228 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8012228:	b508      	push	{r3, lr}
 801222a:	f000 fcfd 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801222e:	4b06      	ldr	r3, [pc, #24]	@ (8012248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012230:	4906      	ldr	r1, [pc, #24]	@ (801224c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	60c8      	str	r0, [r1, #12]
 8012236:	b10a      	cbz	r2, 801223c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 8012238:	4803      	ldr	r0, [pc, #12]	@ (8012248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 801223a:	bd08      	pop	{r3, pc}
 801223c:	4a04      	ldr	r2, [pc, #16]	@ (8012250 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 801223e:	4802      	ldr	r0, [pc, #8]	@ (8012248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012240:	6812      	ldr	r2, [r2, #0]
 8012242:	601a      	str	r2, [r3, #0]
 8012244:	bd08      	pop	{r3, pc}
 8012246:	bf00      	nop
 8012248:	240006d8 	.word	0x240006d8
 801224c:	24000660 	.word	0x24000660
 8012250:	24000e98 	.word	0x24000e98

08012254 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8012254:	f004 bd58 	b.w	8016d08 <autoware_vehicle_msgs__msg__GearCommand__init>

08012258 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 8012258:	f004 bd68 	b.w	8016d2c <autoware_vehicle_msgs__msg__GearCommand__fini>

0801225c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 801225c:	b508      	push	{r3, lr}
 801225e:	f000 fce3 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012262:	4b06      	ldr	r3, [pc, #24]	@ (801227c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8012264:	4906      	ldr	r1, [pc, #24]	@ (8012280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	60c8      	str	r0, [r1, #12]
 801226a:	b10a      	cbz	r2, 8012270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 801226c:	4803      	ldr	r0, [pc, #12]	@ (801227c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 801226e:	bd08      	pop	{r3, pc}
 8012270:	4a04      	ldr	r2, [pc, #16]	@ (8012284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 8012272:	4802      	ldr	r0, [pc, #8]	@ (801227c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8012274:	6812      	ldr	r2, [r2, #0]
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	bd08      	pop	{r3, pc}
 801227a:	bf00      	nop
 801227c:	2400075c 	.word	0x2400075c
 8012280:	240006e4 	.word	0x240006e4
 8012284:	24000e98 	.word	0x24000e98

08012288 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8012288:	f004 bd54 	b.w	8016d34 <autoware_vehicle_msgs__msg__GearReport__init>

0801228c <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 801228c:	f004 bd64 	b.w	8016d58 <autoware_vehicle_msgs__msg__GearReport__fini>

08012290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8012290:	b508      	push	{r3, lr}
 8012292:	f000 fcc9 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012296:	4b06      	ldr	r3, [pc, #24]	@ (80122b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8012298:	4906      	ldr	r1, [pc, #24]	@ (80122b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	60c8      	str	r0, [r1, #12]
 801229e:	b10a      	cbz	r2, 80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 80122a0:	4803      	ldr	r0, [pc, #12]	@ (80122b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 80122a2:	bd08      	pop	{r3, pc}
 80122a4:	4a04      	ldr	r2, [pc, #16]	@ (80122b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 80122a6:	4802      	ldr	r0, [pc, #8]	@ (80122b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 80122a8:	6812      	ldr	r2, [r2, #0]
 80122aa:	601a      	str	r2, [r3, #0]
 80122ac:	bd08      	pop	{r3, pc}
 80122ae:	bf00      	nop
 80122b0:	240007e0 	.word	0x240007e0
 80122b4:	24000768 	.word	0x24000768
 80122b8:	24000e98 	.word	0x24000e98

080122bc <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 80122bc:	f004 bd50 	b.w	8016d60 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

080122c0 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 80122c0:	f004 bd60 	b.w	8016d84 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

080122c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80122c4:	b508      	push	{r3, lr}
 80122c6:	f000 fcaf 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122ca:	4b06      	ldr	r3, [pc, #24]	@ (80122e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 80122cc:	4906      	ldr	r1, [pc, #24]	@ (80122e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	60c8      	str	r0, [r1, #12]
 80122d2:	b10a      	cbz	r2, 80122d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 80122d4:	4803      	ldr	r0, [pc, #12]	@ (80122e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 80122d6:	bd08      	pop	{r3, pc}
 80122d8:	4a04      	ldr	r2, [pc, #16]	@ (80122ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 80122da:	4802      	ldr	r0, [pc, #8]	@ (80122e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 80122dc:	6812      	ldr	r2, [r2, #0]
 80122de:	601a      	str	r2, [r3, #0]
 80122e0:	bd08      	pop	{r3, pc}
 80122e2:	bf00      	nop
 80122e4:	24000864 	.word	0x24000864
 80122e8:	240007ec 	.word	0x240007ec
 80122ec:	24000e98 	.word	0x24000e98

080122f0 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 80122f0:	f004 bd4c 	b.w	8016d8c <autoware_vehicle_msgs__msg__HazardLightsReport__init>

080122f4 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 80122f4:	f004 bd5c 	b.w	8016db0 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

080122f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 80122f8:	b508      	push	{r3, lr}
 80122fa:	f000 fc95 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122fe:	4b06      	ldr	r3, [pc, #24]	@ (8012318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012300:	4906      	ldr	r1, [pc, #24]	@ (801231c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	60c8      	str	r0, [r1, #12]
 8012306:	b10a      	cbz	r2, 801230c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 8012308:	4803      	ldr	r0, [pc, #12]	@ (8012318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 801230a:	bd08      	pop	{r3, pc}
 801230c:	4a04      	ldr	r2, [pc, #16]	@ (8012320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 801230e:	4802      	ldr	r0, [pc, #8]	@ (8012318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012310:	6812      	ldr	r2, [r2, #0]
 8012312:	601a      	str	r2, [r3, #0]
 8012314:	bd08      	pop	{r3, pc}
 8012316:	bf00      	nop
 8012318:	240008e8 	.word	0x240008e8
 801231c:	24000870 	.word	0x24000870
 8012320:	24000e98 	.word	0x24000e98

08012324 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8012324:	f004 bd48 	b.w	8016db8 <autoware_vehicle_msgs__msg__SteeringReport__init>

08012328 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 8012328:	f004 bd58 	b.w	8016ddc <autoware_vehicle_msgs__msg__SteeringReport__fini>

0801232c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 801232c:	b508      	push	{r3, lr}
 801232e:	f000 fc7b 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012332:	4b06      	ldr	r3, [pc, #24]	@ (801234c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8012334:	4906      	ldr	r1, [pc, #24]	@ (8012350 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 8012336:	681a      	ldr	r2, [r3, #0]
 8012338:	60c8      	str	r0, [r1, #12]
 801233a:	b10a      	cbz	r2, 8012340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 801233c:	4803      	ldr	r0, [pc, #12]	@ (801234c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 801233e:	bd08      	pop	{r3, pc}
 8012340:	4a04      	ldr	r2, [pc, #16]	@ (8012354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 8012342:	4802      	ldr	r0, [pc, #8]	@ (801234c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8012344:	6812      	ldr	r2, [r2, #0]
 8012346:	601a      	str	r2, [r3, #0]
 8012348:	bd08      	pop	{r3, pc}
 801234a:	bf00      	nop
 801234c:	2400096c 	.word	0x2400096c
 8012350:	240008f4 	.word	0x240008f4
 8012354:	24000e98 	.word	0x24000e98

08012358 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 8012358:	f004 bd44 	b.w	8016de4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

0801235c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 801235c:	f004 bd54 	b.w	8016e08 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08012360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012360:	b508      	push	{r3, lr}
 8012362:	f000 fc61 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012366:	4b06      	ldr	r3, [pc, #24]	@ (8012380 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8012368:	4906      	ldr	r1, [pc, #24]	@ (8012384 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	60c8      	str	r0, [r1, #12]
 801236e:	b10a      	cbz	r2, 8012374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8012370:	4803      	ldr	r0, [pc, #12]	@ (8012380 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8012372:	bd08      	pop	{r3, pc}
 8012374:	4a04      	ldr	r2, [pc, #16]	@ (8012388 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8012376:	4802      	ldr	r0, [pc, #8]	@ (8012380 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8012378:	6812      	ldr	r2, [r2, #0]
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	bd08      	pop	{r3, pc}
 801237e:	bf00      	nop
 8012380:	240009f0 	.word	0x240009f0
 8012384:	24000978 	.word	0x24000978
 8012388:	24000e98 	.word	0x24000e98

0801238c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 801238c:	f004 bd40 	b.w	8016e10 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

08012390 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8012390:	f004 bd50 	b.w	8016e34 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08012394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012394:	b508      	push	{r3, lr}
 8012396:	f000 fc47 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801239a:	4b06      	ldr	r3, [pc, #24]	@ (80123b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 801239c:	4906      	ldr	r1, [pc, #24]	@ (80123b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 801239e:	681a      	ldr	r2, [r3, #0]
 80123a0:	60c8      	str	r0, [r1, #12]
 80123a2:	b10a      	cbz	r2, 80123a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 80123a4:	4803      	ldr	r0, [pc, #12]	@ (80123b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80123a6:	bd08      	pop	{r3, pc}
 80123a8:	4a04      	ldr	r2, [pc, #16]	@ (80123bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 80123aa:	4802      	ldr	r0, [pc, #8]	@ (80123b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80123ac:	6812      	ldr	r2, [r2, #0]
 80123ae:	601a      	str	r2, [r3, #0]
 80123b0:	bd08      	pop	{r3, pc}
 80123b2:	bf00      	nop
 80123b4:	24000a74 	.word	0x24000a74
 80123b8:	240009fc 	.word	0x240009fc
 80123bc:	24000e98 	.word	0x24000e98

080123c0 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 80123c0:	f004 bd3c 	b.w	8016e3c <autoware_vehicle_msgs__msg__VelocityReport__init>

080123c4 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 80123c4:	f004 bd4c 	b.w	8016e60 <autoware_vehicle_msgs__msg__VelocityReport__fini>

080123c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80123c8:	b508      	push	{r3, lr}
 80123ca:	f004 f895 	bl	80164f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80123ce:	4b06      	ldr	r3, [pc, #24]	@ (80123e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 80123d0:	4906      	ldr	r1, [pc, #24]	@ (80123ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 80123d2:	681a      	ldr	r2, [r3, #0]
 80123d4:	60c8      	str	r0, [r1, #12]
 80123d6:	b10a      	cbz	r2, 80123dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 80123d8:	4803      	ldr	r0, [pc, #12]	@ (80123e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 80123da:	bd08      	pop	{r3, pc}
 80123dc:	4a04      	ldr	r2, [pc, #16]	@ (80123f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 80123de:	4802      	ldr	r0, [pc, #8]	@ (80123e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 80123e0:	6812      	ldr	r2, [r2, #0]
 80123e2:	601a      	str	r2, [r3, #0]
 80123e4:	bd08      	pop	{r3, pc}
 80123e6:	bf00      	nop
 80123e8:	24000b70 	.word	0x24000b70
 80123ec:	24000a80 	.word	0x24000a80
 80123f0:	24000e98 	.word	0x24000e98

080123f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80123f4:	4800      	ldr	r0, [pc, #0]	@ (80123f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 80123f6:	4770      	bx	lr
 80123f8:	24000b98 	.word	0x24000b98

080123fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 80123fc:	4800      	ldr	r0, [pc, #0]	@ (8012400 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 80123fe:	4770      	bx	lr
 8012400:	24000ba4 	.word	0x24000ba4

08012404 <_ControlModeCommand_Response__max_serialized_size>:
 8012404:	2101      	movs	r1, #1
 8012406:	2000      	movs	r0, #0
 8012408:	b508      	push	{r3, lr}
 801240a:	f001 ff1f 	bl	801424c <ucdr_alignment>
 801240e:	3001      	adds	r0, #1
 8012410:	bd08      	pop	{r3, pc}
 8012412:	bf00      	nop

08012414 <_ControlModeCommand_Response__cdr_deserialize>:
 8012414:	b109      	cbz	r1, 801241a <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8012416:	f000 bc93 	b.w	8012d40 <ucdr_deserialize_bool>
 801241a:	4608      	mov	r0, r1
 801241c:	4770      	bx	lr
 801241e:	bf00      	nop

08012420 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012420:	b538      	push	{r3, r4, r5, lr}
 8012422:	b158      	cbz	r0, 801243c <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8012424:	460d      	mov	r5, r1
 8012426:	f000 fc0d 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 801242a:	2101      	movs	r1, #1
 801242c:	182c      	adds	r4, r5, r0
 801242e:	f1c5 0501 	rsb	r5, r5, #1
 8012432:	4620      	mov	r0, r4
 8012434:	f001 ff0a 	bl	801424c <ucdr_alignment>
 8012438:	4428      	add	r0, r5
 801243a:	4420      	add	r0, r4
 801243c:	bd38      	pop	{r3, r4, r5, pc}
 801243e:	bf00      	nop

08012440 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012440:	b138      	cbz	r0, 8012452 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8012442:	b508      	push	{r3, lr}
 8012444:	460b      	mov	r3, r1
 8012446:	2101      	movs	r1, #1
 8012448:	4618      	mov	r0, r3
 801244a:	f001 feff 	bl	801424c <ucdr_alignment>
 801244e:	3001      	adds	r0, #1
 8012450:	bd08      	pop	{r3, pc}
 8012452:	4770      	bx	lr

08012454 <_ControlModeCommand_Request__cdr_deserialize>:
 8012454:	b538      	push	{r3, r4, r5, lr}
 8012456:	460c      	mov	r4, r1
 8012458:	b179      	cbz	r1, 801247a <_ControlModeCommand_Request__cdr_deserialize+0x26>
 801245a:	4605      	mov	r5, r0
 801245c:	f000 fc56 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012460:	4603      	mov	r3, r0
 8012462:	4621      	mov	r1, r4
 8012464:	4628      	mov	r0, r5
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	4798      	blx	r3
 801246c:	f104 0108 	add.w	r1, r4, #8
 8012470:	4628      	mov	r0, r5
 8012472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012476:	f000 bc91 	b.w	8012d9c <ucdr_deserialize_uint8_t>
 801247a:	4608      	mov	r0, r1
 801247c:	bd38      	pop	{r3, r4, r5, pc}
 801247e:	bf00      	nop

08012480 <_ControlModeCommand_Request__cdr_serialize>:
 8012480:	b180      	cbz	r0, 80124a4 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8012482:	b538      	push	{r3, r4, r5, lr}
 8012484:	4604      	mov	r4, r0
 8012486:	460d      	mov	r5, r1
 8012488:	f000 fc40 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801248c:	4603      	mov	r3, r0
 801248e:	4629      	mov	r1, r5
 8012490:	4620      	mov	r0, r4
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	689b      	ldr	r3, [r3, #8]
 8012496:	4798      	blx	r3
 8012498:	7a21      	ldrb	r1, [r4, #8]
 801249a:	4628      	mov	r0, r5
 801249c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124a0:	f000 bc66 	b.w	8012d70 <ucdr_serialize_uint8_t>
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop

080124a8 <_ControlModeCommand_Response__cdr_serialize>:
 80124a8:	460a      	mov	r2, r1
 80124aa:	b118      	cbz	r0, 80124b4 <_ControlModeCommand_Response__cdr_serialize+0xc>
 80124ac:	7801      	ldrb	r1, [r0, #0]
 80124ae:	4610      	mov	r0, r2
 80124b0:	f000 bc30 	b.w	8012d14 <ucdr_serialize_bool>
 80124b4:	4770      	bx	lr
 80124b6:	bf00      	nop

080124b8 <_ControlModeCommand_Response__get_serialized_size>:
 80124b8:	b130      	cbz	r0, 80124c8 <_ControlModeCommand_Response__get_serialized_size+0x10>
 80124ba:	2101      	movs	r1, #1
 80124bc:	2000      	movs	r0, #0
 80124be:	b508      	push	{r3, lr}
 80124c0:	f001 fec4 	bl	801424c <ucdr_alignment>
 80124c4:	3001      	adds	r0, #1
 80124c6:	bd08      	pop	{r3, pc}
 80124c8:	4770      	bx	lr
 80124ca:	bf00      	nop

080124cc <_ControlModeCommand_Request__get_serialized_size>:
 80124cc:	b150      	cbz	r0, 80124e4 <_ControlModeCommand_Request__get_serialized_size+0x18>
 80124ce:	2100      	movs	r1, #0
 80124d0:	b510      	push	{r4, lr}
 80124d2:	f000 fbb7 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 80124d6:	4604      	mov	r4, r0
 80124d8:	2101      	movs	r1, #1
 80124da:	f001 feb7 	bl	801424c <ucdr_alignment>
 80124de:	4420      	add	r0, r4
 80124e0:	3001      	adds	r0, #1
 80124e2:	bd10      	pop	{r4, pc}
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop

080124e8 <_ControlModeCommand_Request__max_serialized_size>:
 80124e8:	b510      	push	{r4, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	2401      	movs	r4, #1
 80124ee:	2100      	movs	r1, #0
 80124f0:	f10d 0007 	add.w	r0, sp, #7
 80124f4:	f88d 4007 	strb.w	r4, [sp, #7]
 80124f8:	f000 fbf4 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 80124fc:	4621      	mov	r1, r4
 80124fe:	4604      	mov	r4, r0
 8012500:	f001 fea4 	bl	801424c <ucdr_alignment>
 8012504:	4420      	add	r0, r4
 8012506:	3001      	adds	r0, #1
 8012508:	b002      	add	sp, #8
 801250a:	bd10      	pop	{r4, pc}

0801250c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 801250c:	4800      	ldr	r0, [pc, #0]	@ (8012510 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 801250e:	4770      	bx	lr
 8012510:	24000b8c 	.word	0x24000b8c

08012514 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 8012514:	b538      	push	{r3, r4, r5, lr}
 8012516:	b158      	cbz	r0, 8012530 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 8012518:	460d      	mov	r5, r1
 801251a:	f000 fb93 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 801251e:	2101      	movs	r1, #1
 8012520:	182c      	adds	r4, r5, r0
 8012522:	f1c5 0501 	rsb	r5, r5, #1
 8012526:	4620      	mov	r0, r4
 8012528:	f001 fe90 	bl	801424c <ucdr_alignment>
 801252c:	4428      	add	r0, r5
 801252e:	4420      	add	r0, r4
 8012530:	bd38      	pop	{r3, r4, r5, pc}
 8012532:	bf00      	nop

08012534 <_ControlModeReport__cdr_deserialize>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	460c      	mov	r4, r1
 8012538:	b179      	cbz	r1, 801255a <_ControlModeReport__cdr_deserialize+0x26>
 801253a:	4605      	mov	r5, r0
 801253c:	f000 fbe6 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012540:	4603      	mov	r3, r0
 8012542:	4621      	mov	r1, r4
 8012544:	4628      	mov	r0, r5
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	4798      	blx	r3
 801254c:	f104 0108 	add.w	r1, r4, #8
 8012550:	4628      	mov	r0, r5
 8012552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012556:	f000 bc21 	b.w	8012d9c <ucdr_deserialize_uint8_t>
 801255a:	4608      	mov	r0, r1
 801255c:	bd38      	pop	{r3, r4, r5, pc}
 801255e:	bf00      	nop

08012560 <_ControlModeReport__cdr_serialize>:
 8012560:	b180      	cbz	r0, 8012584 <_ControlModeReport__cdr_serialize+0x24>
 8012562:	b538      	push	{r3, r4, r5, lr}
 8012564:	4604      	mov	r4, r0
 8012566:	460d      	mov	r5, r1
 8012568:	f000 fbd0 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801256c:	4603      	mov	r3, r0
 801256e:	4629      	mov	r1, r5
 8012570:	4620      	mov	r0, r4
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	689b      	ldr	r3, [r3, #8]
 8012576:	4798      	blx	r3
 8012578:	7a21      	ldrb	r1, [r4, #8]
 801257a:	4628      	mov	r0, r5
 801257c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012580:	f000 bbf6 	b.w	8012d70 <ucdr_serialize_uint8_t>
 8012584:	4770      	bx	lr
 8012586:	bf00      	nop

08012588 <_ControlModeReport__get_serialized_size>:
 8012588:	b150      	cbz	r0, 80125a0 <_ControlModeReport__get_serialized_size+0x18>
 801258a:	2100      	movs	r1, #0
 801258c:	b510      	push	{r4, lr}
 801258e:	f000 fb59 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8012592:	4604      	mov	r4, r0
 8012594:	2101      	movs	r1, #1
 8012596:	f001 fe59 	bl	801424c <ucdr_alignment>
 801259a:	4420      	add	r0, r4
 801259c:	3001      	adds	r0, #1
 801259e:	bd10      	pop	{r4, pc}
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop

080125a4 <_ControlModeReport__max_serialized_size>:
 80125a4:	b510      	push	{r4, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	2401      	movs	r4, #1
 80125aa:	2100      	movs	r1, #0
 80125ac:	f10d 0007 	add.w	r0, sp, #7
 80125b0:	f88d 4007 	strb.w	r4, [sp, #7]
 80125b4:	f000 fb96 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 80125b8:	4621      	mov	r1, r4
 80125ba:	4604      	mov	r4, r0
 80125bc:	f001 fe46 	bl	801424c <ucdr_alignment>
 80125c0:	4420      	add	r0, r4
 80125c2:	3001      	adds	r0, #1
 80125c4:	b002      	add	sp, #8
 80125c6:	bd10      	pop	{r4, pc}

080125c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80125c8:	4800      	ldr	r0, [pc, #0]	@ (80125cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 80125ca:	4770      	bx	lr
 80125cc:	24000be8 	.word	0x24000be8

080125d0 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 80125d0:	b538      	push	{r3, r4, r5, lr}
 80125d2:	b158      	cbz	r0, 80125ec <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 80125d4:	460d      	mov	r5, r1
 80125d6:	f000 fb35 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 80125da:	2101      	movs	r1, #1
 80125dc:	182c      	adds	r4, r5, r0
 80125de:	f1c5 0501 	rsb	r5, r5, #1
 80125e2:	4620      	mov	r0, r4
 80125e4:	f001 fe32 	bl	801424c <ucdr_alignment>
 80125e8:	4428      	add	r0, r5
 80125ea:	4420      	add	r0, r4
 80125ec:	bd38      	pop	{r3, r4, r5, pc}
 80125ee:	bf00      	nop

080125f0 <_GearCommand__cdr_deserialize>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	460c      	mov	r4, r1
 80125f4:	b179      	cbz	r1, 8012616 <_GearCommand__cdr_deserialize+0x26>
 80125f6:	4605      	mov	r5, r0
 80125f8:	f000 fb88 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125fc:	4603      	mov	r3, r0
 80125fe:	4621      	mov	r1, r4
 8012600:	4628      	mov	r0, r5
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	68db      	ldr	r3, [r3, #12]
 8012606:	4798      	blx	r3
 8012608:	f104 0108 	add.w	r1, r4, #8
 801260c:	4628      	mov	r0, r5
 801260e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012612:	f000 bbc3 	b.w	8012d9c <ucdr_deserialize_uint8_t>
 8012616:	4608      	mov	r0, r1
 8012618:	bd38      	pop	{r3, r4, r5, pc}
 801261a:	bf00      	nop

0801261c <_GearCommand__cdr_serialize>:
 801261c:	b180      	cbz	r0, 8012640 <_GearCommand__cdr_serialize+0x24>
 801261e:	b538      	push	{r3, r4, r5, lr}
 8012620:	4604      	mov	r4, r0
 8012622:	460d      	mov	r5, r1
 8012624:	f000 fb72 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012628:	4603      	mov	r3, r0
 801262a:	4629      	mov	r1, r5
 801262c:	4620      	mov	r0, r4
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	689b      	ldr	r3, [r3, #8]
 8012632:	4798      	blx	r3
 8012634:	7a21      	ldrb	r1, [r4, #8]
 8012636:	4628      	mov	r0, r5
 8012638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801263c:	f000 bb98 	b.w	8012d70 <ucdr_serialize_uint8_t>
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop

08012644 <_GearCommand__get_serialized_size>:
 8012644:	b150      	cbz	r0, 801265c <_GearCommand__get_serialized_size+0x18>
 8012646:	2100      	movs	r1, #0
 8012648:	b510      	push	{r4, lr}
 801264a:	f000 fafb 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 801264e:	4604      	mov	r4, r0
 8012650:	2101      	movs	r1, #1
 8012652:	f001 fdfb 	bl	801424c <ucdr_alignment>
 8012656:	4420      	add	r0, r4
 8012658:	3001      	adds	r0, #1
 801265a:	bd10      	pop	{r4, pc}
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop

08012660 <_GearCommand__max_serialized_size>:
 8012660:	b510      	push	{r4, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	2401      	movs	r4, #1
 8012666:	2100      	movs	r1, #0
 8012668:	f10d 0007 	add.w	r0, sp, #7
 801266c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012670:	f000 fb38 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8012674:	4621      	mov	r1, r4
 8012676:	4604      	mov	r4, r0
 8012678:	f001 fde8 	bl	801424c <ucdr_alignment>
 801267c:	4420      	add	r0, r4
 801267e:	3001      	adds	r0, #1
 8012680:	b002      	add	sp, #8
 8012682:	bd10      	pop	{r4, pc}

08012684 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8012684:	4800      	ldr	r0, [pc, #0]	@ (8012688 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 8012686:	4770      	bx	lr
 8012688:	24000c10 	.word	0x24000c10

0801268c <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 801268c:	b538      	push	{r3, r4, r5, lr}
 801268e:	b158      	cbz	r0, 80126a8 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 8012690:	460d      	mov	r5, r1
 8012692:	f000 fad7 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8012696:	2101      	movs	r1, #1
 8012698:	182c      	adds	r4, r5, r0
 801269a:	f1c5 0501 	rsb	r5, r5, #1
 801269e:	4620      	mov	r0, r4
 80126a0:	f001 fdd4 	bl	801424c <ucdr_alignment>
 80126a4:	4428      	add	r0, r5
 80126a6:	4420      	add	r0, r4
 80126a8:	bd38      	pop	{r3, r4, r5, pc}
 80126aa:	bf00      	nop

080126ac <_GearReport__cdr_deserialize>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	460c      	mov	r4, r1
 80126b0:	b179      	cbz	r1, 80126d2 <_GearReport__cdr_deserialize+0x26>
 80126b2:	4605      	mov	r5, r0
 80126b4:	f000 fb2a 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126b8:	4603      	mov	r3, r0
 80126ba:	4621      	mov	r1, r4
 80126bc:	4628      	mov	r0, r5
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	4798      	blx	r3
 80126c4:	f104 0108 	add.w	r1, r4, #8
 80126c8:	4628      	mov	r0, r5
 80126ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126ce:	f000 bb65 	b.w	8012d9c <ucdr_deserialize_uint8_t>
 80126d2:	4608      	mov	r0, r1
 80126d4:	bd38      	pop	{r3, r4, r5, pc}
 80126d6:	bf00      	nop

080126d8 <_GearReport__cdr_serialize>:
 80126d8:	b180      	cbz	r0, 80126fc <_GearReport__cdr_serialize+0x24>
 80126da:	b538      	push	{r3, r4, r5, lr}
 80126dc:	4604      	mov	r4, r0
 80126de:	460d      	mov	r5, r1
 80126e0:	f000 fb14 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126e4:	4603      	mov	r3, r0
 80126e6:	4629      	mov	r1, r5
 80126e8:	4620      	mov	r0, r4
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	689b      	ldr	r3, [r3, #8]
 80126ee:	4798      	blx	r3
 80126f0:	7a21      	ldrb	r1, [r4, #8]
 80126f2:	4628      	mov	r0, r5
 80126f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126f8:	f000 bb3a 	b.w	8012d70 <ucdr_serialize_uint8_t>
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop

08012700 <_GearReport__get_serialized_size>:
 8012700:	b150      	cbz	r0, 8012718 <_GearReport__get_serialized_size+0x18>
 8012702:	2100      	movs	r1, #0
 8012704:	b510      	push	{r4, lr}
 8012706:	f000 fa9d 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 801270a:	4604      	mov	r4, r0
 801270c:	2101      	movs	r1, #1
 801270e:	f001 fd9d 	bl	801424c <ucdr_alignment>
 8012712:	4420      	add	r0, r4
 8012714:	3001      	adds	r0, #1
 8012716:	bd10      	pop	{r4, pc}
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop

0801271c <_GearReport__max_serialized_size>:
 801271c:	b510      	push	{r4, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	2401      	movs	r4, #1
 8012722:	2100      	movs	r1, #0
 8012724:	f10d 0007 	add.w	r0, sp, #7
 8012728:	f88d 4007 	strb.w	r4, [sp, #7]
 801272c:	f000 fada 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8012730:	4621      	mov	r1, r4
 8012732:	4604      	mov	r4, r0
 8012734:	f001 fd8a 	bl	801424c <ucdr_alignment>
 8012738:	4420      	add	r0, r4
 801273a:	3001      	adds	r0, #1
 801273c:	b002      	add	sp, #8
 801273e:	bd10      	pop	{r4, pc}

08012740 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8012740:	4800      	ldr	r0, [pc, #0]	@ (8012744 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 8012742:	4770      	bx	lr
 8012744:	24000c38 	.word	0x24000c38

08012748 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8012748:	b538      	push	{r3, r4, r5, lr}
 801274a:	b158      	cbz	r0, 8012764 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 801274c:	460d      	mov	r5, r1
 801274e:	f000 fa79 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8012752:	2101      	movs	r1, #1
 8012754:	182c      	adds	r4, r5, r0
 8012756:	f1c5 0501 	rsb	r5, r5, #1
 801275a:	4620      	mov	r0, r4
 801275c:	f001 fd76 	bl	801424c <ucdr_alignment>
 8012760:	4428      	add	r0, r5
 8012762:	4420      	add	r0, r4
 8012764:	bd38      	pop	{r3, r4, r5, pc}
 8012766:	bf00      	nop

08012768 <_HazardLightsCommand__cdr_deserialize>:
 8012768:	b538      	push	{r3, r4, r5, lr}
 801276a:	460c      	mov	r4, r1
 801276c:	b179      	cbz	r1, 801278e <_HazardLightsCommand__cdr_deserialize+0x26>
 801276e:	4605      	mov	r5, r0
 8012770:	f000 facc 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012774:	4603      	mov	r3, r0
 8012776:	4621      	mov	r1, r4
 8012778:	4628      	mov	r0, r5
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	4798      	blx	r3
 8012780:	f104 0108 	add.w	r1, r4, #8
 8012784:	4628      	mov	r0, r5
 8012786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801278a:	f000 bb07 	b.w	8012d9c <ucdr_deserialize_uint8_t>
 801278e:	4608      	mov	r0, r1
 8012790:	bd38      	pop	{r3, r4, r5, pc}
 8012792:	bf00      	nop

08012794 <_HazardLightsCommand__cdr_serialize>:
 8012794:	b180      	cbz	r0, 80127b8 <_HazardLightsCommand__cdr_serialize+0x24>
 8012796:	b538      	push	{r3, r4, r5, lr}
 8012798:	4604      	mov	r4, r0
 801279a:	460d      	mov	r5, r1
 801279c:	f000 fab6 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127a0:	4603      	mov	r3, r0
 80127a2:	4629      	mov	r1, r5
 80127a4:	4620      	mov	r0, r4
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	689b      	ldr	r3, [r3, #8]
 80127aa:	4798      	blx	r3
 80127ac:	7a21      	ldrb	r1, [r4, #8]
 80127ae:	4628      	mov	r0, r5
 80127b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127b4:	f000 badc 	b.w	8012d70 <ucdr_serialize_uint8_t>
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop

080127bc <_HazardLightsCommand__get_serialized_size>:
 80127bc:	b150      	cbz	r0, 80127d4 <_HazardLightsCommand__get_serialized_size+0x18>
 80127be:	2100      	movs	r1, #0
 80127c0:	b510      	push	{r4, lr}
 80127c2:	f000 fa3f 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 80127c6:	4604      	mov	r4, r0
 80127c8:	2101      	movs	r1, #1
 80127ca:	f001 fd3f 	bl	801424c <ucdr_alignment>
 80127ce:	4420      	add	r0, r4
 80127d0:	3001      	adds	r0, #1
 80127d2:	bd10      	pop	{r4, pc}
 80127d4:	4770      	bx	lr
 80127d6:	bf00      	nop

080127d8 <_HazardLightsCommand__max_serialized_size>:
 80127d8:	b510      	push	{r4, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	2401      	movs	r4, #1
 80127de:	2100      	movs	r1, #0
 80127e0:	f10d 0007 	add.w	r0, sp, #7
 80127e4:	f88d 4007 	strb.w	r4, [sp, #7]
 80127e8:	f000 fa7c 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 80127ec:	4621      	mov	r1, r4
 80127ee:	4604      	mov	r4, r0
 80127f0:	f001 fd2c 	bl	801424c <ucdr_alignment>
 80127f4:	4420      	add	r0, r4
 80127f6:	3001      	adds	r0, #1
 80127f8:	b002      	add	sp, #8
 80127fa:	bd10      	pop	{r4, pc}

080127fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80127fc:	4800      	ldr	r0, [pc, #0]	@ (8012800 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 80127fe:	4770      	bx	lr
 8012800:	24000c60 	.word	0x24000c60

08012804 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	b158      	cbz	r0, 8012820 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 8012808:	460d      	mov	r5, r1
 801280a:	f000 fa1b 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 801280e:	2101      	movs	r1, #1
 8012810:	182c      	adds	r4, r5, r0
 8012812:	f1c5 0501 	rsb	r5, r5, #1
 8012816:	4620      	mov	r0, r4
 8012818:	f001 fd18 	bl	801424c <ucdr_alignment>
 801281c:	4428      	add	r0, r5
 801281e:	4420      	add	r0, r4
 8012820:	bd38      	pop	{r3, r4, r5, pc}
 8012822:	bf00      	nop

08012824 <_HazardLightsReport__cdr_deserialize>:
 8012824:	b538      	push	{r3, r4, r5, lr}
 8012826:	460c      	mov	r4, r1
 8012828:	b179      	cbz	r1, 801284a <_HazardLightsReport__cdr_deserialize+0x26>
 801282a:	4605      	mov	r5, r0
 801282c:	f000 fa6e 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012830:	4603      	mov	r3, r0
 8012832:	4621      	mov	r1, r4
 8012834:	4628      	mov	r0, r5
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	4798      	blx	r3
 801283c:	f104 0108 	add.w	r1, r4, #8
 8012840:	4628      	mov	r0, r5
 8012842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012846:	f000 baa9 	b.w	8012d9c <ucdr_deserialize_uint8_t>
 801284a:	4608      	mov	r0, r1
 801284c:	bd38      	pop	{r3, r4, r5, pc}
 801284e:	bf00      	nop

08012850 <_HazardLightsReport__cdr_serialize>:
 8012850:	b180      	cbz	r0, 8012874 <_HazardLightsReport__cdr_serialize+0x24>
 8012852:	b538      	push	{r3, r4, r5, lr}
 8012854:	4604      	mov	r4, r0
 8012856:	460d      	mov	r5, r1
 8012858:	f000 fa58 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801285c:	4603      	mov	r3, r0
 801285e:	4629      	mov	r1, r5
 8012860:	4620      	mov	r0, r4
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	689b      	ldr	r3, [r3, #8]
 8012866:	4798      	blx	r3
 8012868:	7a21      	ldrb	r1, [r4, #8]
 801286a:	4628      	mov	r0, r5
 801286c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012870:	f000 ba7e 	b.w	8012d70 <ucdr_serialize_uint8_t>
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop

08012878 <_HazardLightsReport__get_serialized_size>:
 8012878:	b150      	cbz	r0, 8012890 <_HazardLightsReport__get_serialized_size+0x18>
 801287a:	2100      	movs	r1, #0
 801287c:	b510      	push	{r4, lr}
 801287e:	f000 f9e1 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8012882:	4604      	mov	r4, r0
 8012884:	2101      	movs	r1, #1
 8012886:	f001 fce1 	bl	801424c <ucdr_alignment>
 801288a:	4420      	add	r0, r4
 801288c:	3001      	adds	r0, #1
 801288e:	bd10      	pop	{r4, pc}
 8012890:	4770      	bx	lr
 8012892:	bf00      	nop

08012894 <_HazardLightsReport__max_serialized_size>:
 8012894:	b510      	push	{r4, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	2401      	movs	r4, #1
 801289a:	2100      	movs	r1, #0
 801289c:	f10d 0007 	add.w	r0, sp, #7
 80128a0:	f88d 4007 	strb.w	r4, [sp, #7]
 80128a4:	f000 fa1e 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 80128a8:	4621      	mov	r1, r4
 80128aa:	4604      	mov	r4, r0
 80128ac:	f001 fcce 	bl	801424c <ucdr_alignment>
 80128b0:	4420      	add	r0, r4
 80128b2:	3001      	adds	r0, #1
 80128b4:	b002      	add	sp, #8
 80128b6:	bd10      	pop	{r4, pc}

080128b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 80128b8:	4800      	ldr	r0, [pc, #0]	@ (80128bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 80128ba:	4770      	bx	lr
 80128bc:	24000c88 	.word	0x24000c88

080128c0 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 80128c0:	b538      	push	{r3, r4, r5, lr}
 80128c2:	b158      	cbz	r0, 80128dc <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 80128c4:	460d      	mov	r5, r1
 80128c6:	f000 f9bd 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 80128ca:	2104      	movs	r1, #4
 80128cc:	182c      	adds	r4, r5, r0
 80128ce:	f1c5 0504 	rsb	r5, r5, #4
 80128d2:	4620      	mov	r0, r4
 80128d4:	f001 fcba 	bl	801424c <ucdr_alignment>
 80128d8:	4428      	add	r0, r5
 80128da:	4420      	add	r0, r4
 80128dc:	bd38      	pop	{r3, r4, r5, pc}
 80128de:	bf00      	nop

080128e0 <_SteeringReport__cdr_deserialize>:
 80128e0:	b538      	push	{r3, r4, r5, lr}
 80128e2:	460c      	mov	r4, r1
 80128e4:	b179      	cbz	r1, 8012906 <_SteeringReport__cdr_deserialize+0x26>
 80128e6:	4605      	mov	r5, r0
 80128e8:	f000 fa10 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128ec:	4603      	mov	r3, r0
 80128ee:	4621      	mov	r1, r4
 80128f0:	4628      	mov	r0, r5
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	4798      	blx	r3
 80128f8:	f104 0108 	add.w	r1, r4, #8
 80128fc:	4628      	mov	r0, r5
 80128fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012902:	f001 ba25 	b.w	8013d50 <ucdr_deserialize_float>
 8012906:	4608      	mov	r0, r1
 8012908:	bd38      	pop	{r3, r4, r5, pc}
 801290a:	bf00      	nop

0801290c <_SteeringReport__cdr_serialize>:
 801290c:	b188      	cbz	r0, 8012932 <_SteeringReport__cdr_serialize+0x26>
 801290e:	b538      	push	{r3, r4, r5, lr}
 8012910:	4604      	mov	r4, r0
 8012912:	460d      	mov	r5, r1
 8012914:	f000 f9fa 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012918:	4603      	mov	r3, r0
 801291a:	4629      	mov	r1, r5
 801291c:	4620      	mov	r0, r4
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	689b      	ldr	r3, [r3, #8]
 8012922:	4798      	blx	r3
 8012924:	ed94 0a02 	vldr	s0, [r4, #8]
 8012928:	4628      	mov	r0, r5
 801292a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801292e:	f001 b977 	b.w	8013c20 <ucdr_serialize_float>
 8012932:	4770      	bx	lr

08012934 <_SteeringReport__get_serialized_size>:
 8012934:	b150      	cbz	r0, 801294c <_SteeringReport__get_serialized_size+0x18>
 8012936:	2100      	movs	r1, #0
 8012938:	b510      	push	{r4, lr}
 801293a:	f000 f983 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 801293e:	4604      	mov	r4, r0
 8012940:	2104      	movs	r1, #4
 8012942:	f001 fc83 	bl	801424c <ucdr_alignment>
 8012946:	4420      	add	r0, r4
 8012948:	3004      	adds	r0, #4
 801294a:	bd10      	pop	{r4, pc}
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop

08012950 <_SteeringReport__max_serialized_size>:
 8012950:	b510      	push	{r4, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	2301      	movs	r3, #1
 8012956:	2100      	movs	r1, #0
 8012958:	f10d 0007 	add.w	r0, sp, #7
 801295c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012960:	f000 f9c0 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8012964:	4604      	mov	r4, r0
 8012966:	2104      	movs	r1, #4
 8012968:	f001 fc70 	bl	801424c <ucdr_alignment>
 801296c:	4420      	add	r0, r4
 801296e:	3004      	adds	r0, #4
 8012970:	b002      	add	sp, #8
 8012972:	bd10      	pop	{r4, pc}

08012974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8012974:	4800      	ldr	r0, [pc, #0]	@ (8012978 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 8012976:	4770      	bx	lr
 8012978:	24000cb0 	.word	0x24000cb0

0801297c <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 801297c:	b538      	push	{r3, r4, r5, lr}
 801297e:	b158      	cbz	r0, 8012998 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 8012980:	460d      	mov	r5, r1
 8012982:	f000 f95f 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8012986:	2101      	movs	r1, #1
 8012988:	182c      	adds	r4, r5, r0
 801298a:	f1c5 0501 	rsb	r5, r5, #1
 801298e:	4620      	mov	r0, r4
 8012990:	f001 fc5c 	bl	801424c <ucdr_alignment>
 8012994:	4428      	add	r0, r5
 8012996:	4420      	add	r0, r4
 8012998:	bd38      	pop	{r3, r4, r5, pc}
 801299a:	bf00      	nop

0801299c <_TurnIndicatorsCommand__cdr_deserialize>:
 801299c:	b538      	push	{r3, r4, r5, lr}
 801299e:	460c      	mov	r4, r1
 80129a0:	b179      	cbz	r1, 80129c2 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 80129a2:	4605      	mov	r5, r0
 80129a4:	f000 f9b2 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129a8:	4603      	mov	r3, r0
 80129aa:	4621      	mov	r1, r4
 80129ac:	4628      	mov	r0, r5
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	4798      	blx	r3
 80129b4:	f104 0108 	add.w	r1, r4, #8
 80129b8:	4628      	mov	r0, r5
 80129ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129be:	f000 b9ed 	b.w	8012d9c <ucdr_deserialize_uint8_t>
 80129c2:	4608      	mov	r0, r1
 80129c4:	bd38      	pop	{r3, r4, r5, pc}
 80129c6:	bf00      	nop

080129c8 <_TurnIndicatorsCommand__cdr_serialize>:
 80129c8:	b180      	cbz	r0, 80129ec <_TurnIndicatorsCommand__cdr_serialize+0x24>
 80129ca:	b538      	push	{r3, r4, r5, lr}
 80129cc:	4604      	mov	r4, r0
 80129ce:	460d      	mov	r5, r1
 80129d0:	f000 f99c 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129d4:	4603      	mov	r3, r0
 80129d6:	4629      	mov	r1, r5
 80129d8:	4620      	mov	r0, r4
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	689b      	ldr	r3, [r3, #8]
 80129de:	4798      	blx	r3
 80129e0:	7a21      	ldrb	r1, [r4, #8]
 80129e2:	4628      	mov	r0, r5
 80129e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129e8:	f000 b9c2 	b.w	8012d70 <ucdr_serialize_uint8_t>
 80129ec:	4770      	bx	lr
 80129ee:	bf00      	nop

080129f0 <_TurnIndicatorsCommand__get_serialized_size>:
 80129f0:	b150      	cbz	r0, 8012a08 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 80129f2:	2100      	movs	r1, #0
 80129f4:	b510      	push	{r4, lr}
 80129f6:	f000 f925 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 80129fa:	4604      	mov	r4, r0
 80129fc:	2101      	movs	r1, #1
 80129fe:	f001 fc25 	bl	801424c <ucdr_alignment>
 8012a02:	4420      	add	r0, r4
 8012a04:	3001      	adds	r0, #1
 8012a06:	bd10      	pop	{r4, pc}
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop

08012a0c <_TurnIndicatorsCommand__max_serialized_size>:
 8012a0c:	b510      	push	{r4, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	2401      	movs	r4, #1
 8012a12:	2100      	movs	r1, #0
 8012a14:	f10d 0007 	add.w	r0, sp, #7
 8012a18:	f88d 4007 	strb.w	r4, [sp, #7]
 8012a1c:	f000 f962 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8012a20:	4621      	mov	r1, r4
 8012a22:	4604      	mov	r4, r0
 8012a24:	f001 fc12 	bl	801424c <ucdr_alignment>
 8012a28:	4420      	add	r0, r4
 8012a2a:	3001      	adds	r0, #1
 8012a2c:	b002      	add	sp, #8
 8012a2e:	bd10      	pop	{r4, pc}

08012a30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012a30:	4800      	ldr	r0, [pc, #0]	@ (8012a34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 8012a32:	4770      	bx	lr
 8012a34:	24000cd8 	.word	0x24000cd8

08012a38 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012a38:	b538      	push	{r3, r4, r5, lr}
 8012a3a:	b158      	cbz	r0, 8012a54 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 8012a3c:	460d      	mov	r5, r1
 8012a3e:	f000 f901 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a42:	2101      	movs	r1, #1
 8012a44:	182c      	adds	r4, r5, r0
 8012a46:	f1c5 0501 	rsb	r5, r5, #1
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	f001 fbfe 	bl	801424c <ucdr_alignment>
 8012a50:	4428      	add	r0, r5
 8012a52:	4420      	add	r0, r4
 8012a54:	bd38      	pop	{r3, r4, r5, pc}
 8012a56:	bf00      	nop

08012a58 <_TurnIndicatorsReport__cdr_deserialize>:
 8012a58:	b538      	push	{r3, r4, r5, lr}
 8012a5a:	460c      	mov	r4, r1
 8012a5c:	b179      	cbz	r1, 8012a7e <_TurnIndicatorsReport__cdr_deserialize+0x26>
 8012a5e:	4605      	mov	r5, r0
 8012a60:	f000 f954 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a64:	4603      	mov	r3, r0
 8012a66:	4621      	mov	r1, r4
 8012a68:	4628      	mov	r0, r5
 8012a6a:	685b      	ldr	r3, [r3, #4]
 8012a6c:	68db      	ldr	r3, [r3, #12]
 8012a6e:	4798      	blx	r3
 8012a70:	f104 0108 	add.w	r1, r4, #8
 8012a74:	4628      	mov	r0, r5
 8012a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a7a:	f000 b98f 	b.w	8012d9c <ucdr_deserialize_uint8_t>
 8012a7e:	4608      	mov	r0, r1
 8012a80:	bd38      	pop	{r3, r4, r5, pc}
 8012a82:	bf00      	nop

08012a84 <_TurnIndicatorsReport__cdr_serialize>:
 8012a84:	b180      	cbz	r0, 8012aa8 <_TurnIndicatorsReport__cdr_serialize+0x24>
 8012a86:	b538      	push	{r3, r4, r5, lr}
 8012a88:	4604      	mov	r4, r0
 8012a8a:	460d      	mov	r5, r1
 8012a8c:	f000 f93e 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a90:	4603      	mov	r3, r0
 8012a92:	4629      	mov	r1, r5
 8012a94:	4620      	mov	r0, r4
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	689b      	ldr	r3, [r3, #8]
 8012a9a:	4798      	blx	r3
 8012a9c:	7a21      	ldrb	r1, [r4, #8]
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aa4:	f000 b964 	b.w	8012d70 <ucdr_serialize_uint8_t>
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop

08012aac <_TurnIndicatorsReport__get_serialized_size>:
 8012aac:	b150      	cbz	r0, 8012ac4 <_TurnIndicatorsReport__get_serialized_size+0x18>
 8012aae:	2100      	movs	r1, #0
 8012ab0:	b510      	push	{r4, lr}
 8012ab2:	f000 f8c7 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	2101      	movs	r1, #1
 8012aba:	f001 fbc7 	bl	801424c <ucdr_alignment>
 8012abe:	4420      	add	r0, r4
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	bd10      	pop	{r4, pc}
 8012ac4:	4770      	bx	lr
 8012ac6:	bf00      	nop

08012ac8 <_TurnIndicatorsReport__max_serialized_size>:
 8012ac8:	b510      	push	{r4, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	2401      	movs	r4, #1
 8012ace:	2100      	movs	r1, #0
 8012ad0:	f10d 0007 	add.w	r0, sp, #7
 8012ad4:	f88d 4007 	strb.w	r4, [sp, #7]
 8012ad8:	f000 f904 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8012adc:	4621      	mov	r1, r4
 8012ade:	4604      	mov	r4, r0
 8012ae0:	f001 fbb4 	bl	801424c <ucdr_alignment>
 8012ae4:	4420      	add	r0, r4
 8012ae6:	3001      	adds	r0, #1
 8012ae8:	b002      	add	sp, #8
 8012aea:	bd10      	pop	{r4, pc}

08012aec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012aec:	4800      	ldr	r0, [pc, #0]	@ (8012af0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 8012aee:	4770      	bx	lr
 8012af0:	24000d00 	.word	0x24000d00

08012af4 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 8012af4:	b1c8      	cbz	r0, 8012b2a <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 8012af6:	b570      	push	{r4, r5, r6, lr}
 8012af8:	460d      	mov	r5, r1
 8012afa:	f003 fd21 	bl	8016540 <get_serialized_size_std_msgs__msg__Header>
 8012afe:	2104      	movs	r1, #4
 8012b00:	182e      	adds	r6, r5, r0
 8012b02:	f1c5 0504 	rsb	r5, r5, #4
 8012b06:	4630      	mov	r0, r6
 8012b08:	f001 fba0 	bl	801424c <ucdr_alignment>
 8012b0c:	2104      	movs	r1, #4
 8012b0e:	1844      	adds	r4, r0, r1
 8012b10:	4434      	add	r4, r6
 8012b12:	4620      	mov	r0, r4
 8012b14:	f001 fb9a 	bl	801424c <ucdr_alignment>
 8012b18:	2104      	movs	r1, #4
 8012b1a:	4408      	add	r0, r1
 8012b1c:	4404      	add	r4, r0
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f001 fb94 	bl	801424c <ucdr_alignment>
 8012b24:	4428      	add	r0, r5
 8012b26:	4420      	add	r0, r4
 8012b28:	bd70      	pop	{r4, r5, r6, pc}
 8012b2a:	4770      	bx	lr

08012b2c <_VelocityReport__cdr_deserialize>:
 8012b2c:	b538      	push	{r3, r4, r5, lr}
 8012b2e:	460c      	mov	r4, r1
 8012b30:	b1c9      	cbz	r1, 8012b66 <_VelocityReport__cdr_deserialize+0x3a>
 8012b32:	4605      	mov	r5, r0
 8012b34:	f003 fd88 	bl	8016648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	4621      	mov	r1, r4
 8012b3c:	4628      	mov	r0, r5
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	4798      	blx	r3
 8012b44:	f104 0114 	add.w	r1, r4, #20
 8012b48:	4628      	mov	r0, r5
 8012b4a:	f001 f901 	bl	8013d50 <ucdr_deserialize_float>
 8012b4e:	f104 0118 	add.w	r1, r4, #24
 8012b52:	4628      	mov	r0, r5
 8012b54:	f001 f8fc 	bl	8013d50 <ucdr_deserialize_float>
 8012b58:	f104 011c 	add.w	r1, r4, #28
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b62:	f001 b8f5 	b.w	8013d50 <ucdr_deserialize_float>
 8012b66:	4608      	mov	r0, r1
 8012b68:	bd38      	pop	{r3, r4, r5, pc}
 8012b6a:	bf00      	nop

08012b6c <_VelocityReport__cdr_serialize>:
 8012b6c:	b1d8      	cbz	r0, 8012ba6 <_VelocityReport__cdr_serialize+0x3a>
 8012b6e:	b538      	push	{r3, r4, r5, lr}
 8012b70:	4604      	mov	r4, r0
 8012b72:	460d      	mov	r5, r1
 8012b74:	f003 fd68 	bl	8016648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	4629      	mov	r1, r5
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	689b      	ldr	r3, [r3, #8]
 8012b82:	4798      	blx	r3
 8012b84:	ed94 0a05 	vldr	s0, [r4, #20]
 8012b88:	4628      	mov	r0, r5
 8012b8a:	f001 f849 	bl	8013c20 <ucdr_serialize_float>
 8012b8e:	ed94 0a06 	vldr	s0, [r4, #24]
 8012b92:	4628      	mov	r0, r5
 8012b94:	f001 f844 	bl	8013c20 <ucdr_serialize_float>
 8012b98:	ed94 0a07 	vldr	s0, [r4, #28]
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ba2:	f001 b83d 	b.w	8013c20 <ucdr_serialize_float>
 8012ba6:	4770      	bx	lr

08012ba8 <_VelocityReport__get_serialized_size>:
 8012ba8:	b1b0      	cbz	r0, 8012bd8 <_VelocityReport__get_serialized_size+0x30>
 8012baa:	2100      	movs	r1, #0
 8012bac:	b510      	push	{r4, lr}
 8012bae:	f003 fcc7 	bl	8016540 <get_serialized_size_std_msgs__msg__Header>
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	2104      	movs	r1, #4
 8012bb6:	f001 fb49 	bl	801424c <ucdr_alignment>
 8012bba:	2104      	movs	r1, #4
 8012bbc:	4420      	add	r0, r4
 8012bbe:	1844      	adds	r4, r0, r1
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f001 fb43 	bl	801424c <ucdr_alignment>
 8012bc6:	2104      	movs	r1, #4
 8012bc8:	4408      	add	r0, r1
 8012bca:	4404      	add	r4, r0
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f001 fb3d 	bl	801424c <ucdr_alignment>
 8012bd2:	3004      	adds	r0, #4
 8012bd4:	4420      	add	r0, r4
 8012bd6:	bd10      	pop	{r4, pc}
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop

08012bdc <_VelocityReport__max_serialized_size>:
 8012bdc:	b510      	push	{r4, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	2301      	movs	r3, #1
 8012be2:	2100      	movs	r1, #0
 8012be4:	f10d 0007 	add.w	r0, sp, #7
 8012be8:	f88d 3007 	strb.w	r3, [sp, #7]
 8012bec:	f003 fd22 	bl	8016634 <max_serialized_size_std_msgs__msg__Header>
 8012bf0:	4604      	mov	r4, r0
 8012bf2:	2104      	movs	r1, #4
 8012bf4:	f001 fb2a 	bl	801424c <ucdr_alignment>
 8012bf8:	2104      	movs	r1, #4
 8012bfa:	4420      	add	r0, r4
 8012bfc:	1844      	adds	r4, r0, r1
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f001 fb24 	bl	801424c <ucdr_alignment>
 8012c04:	2104      	movs	r1, #4
 8012c06:	4408      	add	r0, r1
 8012c08:	4404      	add	r4, r0
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f001 fb1e 	bl	801424c <ucdr_alignment>
 8012c10:	3004      	adds	r0, #4
 8012c12:	4420      	add	r0, r4
 8012c14:	b002      	add	sp, #8
 8012c16:	bd10      	pop	{r4, pc}

08012c18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8012c18:	4800      	ldr	r0, [pc, #0]	@ (8012c1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 8012c1a:	4770      	bx	lr
 8012c1c:	24000d28 	.word	0x24000d28

08012c20 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012c20:	f004 b922 	b.w	8016e68 <builtin_interfaces__msg__Time__init>

08012c24 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012c24:	f004 b924 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>

08012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012c28:	4b04      	ldr	r3, [pc, #16]	@ (8012c3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	b10a      	cbz	r2, 8012c32 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012c2e:	4803      	ldr	r0, [pc, #12]	@ (8012c3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012c30:	4770      	bx	lr
 8012c32:	4a03      	ldr	r2, [pc, #12]	@ (8012c40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012c34:	4801      	ldr	r0, [pc, #4]	@ (8012c3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012c36:	6812      	ldr	r2, [r2, #0]
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	4770      	bx	lr
 8012c3c:	24000dc8 	.word	0x24000dc8
 8012c40:	24000e98 	.word	0x24000e98

08012c44 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012c44:	b180      	cbz	r0, 8012c68 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012c46:	b538      	push	{r3, r4, r5, lr}
 8012c48:	460d      	mov	r5, r1
 8012c4a:	2104      	movs	r1, #4
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f001 fafd 	bl	801424c <ucdr_alignment>
 8012c52:	1d2b      	adds	r3, r5, #4
 8012c54:	f1c5 0504 	rsb	r5, r5, #4
 8012c58:	2104      	movs	r1, #4
 8012c5a:	181c      	adds	r4, r3, r0
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	f001 faf5 	bl	801424c <ucdr_alignment>
 8012c62:	4428      	add	r0, r5
 8012c64:	4420      	add	r0, r4
 8012c66:	bd38      	pop	{r3, r4, r5, pc}
 8012c68:	4770      	bx	lr
 8012c6a:	bf00      	nop

08012c6c <_Time__cdr_deserialize>:
 8012c6c:	b538      	push	{r3, r4, r5, lr}
 8012c6e:	460c      	mov	r4, r1
 8012c70:	b141      	cbz	r1, 8012c84 <_Time__cdr_deserialize+0x18>
 8012c72:	4605      	mov	r5, r0
 8012c74:	f000 ff44 	bl	8013b00 <ucdr_deserialize_int32_t>
 8012c78:	1d21      	adds	r1, r4, #4
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c80:	f000 bbbc 	b.w	80133fc <ucdr_deserialize_uint32_t>
 8012c84:	4608      	mov	r0, r1
 8012c86:	bd38      	pop	{r3, r4, r5, pc}

08012c88 <_Time__cdr_serialize>:
 8012c88:	b160      	cbz	r0, 8012ca4 <_Time__cdr_serialize+0x1c>
 8012c8a:	b538      	push	{r3, r4, r5, lr}
 8012c8c:	460d      	mov	r5, r1
 8012c8e:	4604      	mov	r4, r0
 8012c90:	6801      	ldr	r1, [r0, #0]
 8012c92:	4628      	mov	r0, r5
 8012c94:	f000 fe9c 	bl	80139d0 <ucdr_serialize_int32_t>
 8012c98:	6861      	ldr	r1, [r4, #4]
 8012c9a:	4628      	mov	r0, r5
 8012c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ca0:	f000 ba7c 	b.w	801319c <ucdr_serialize_uint32_t>
 8012ca4:	4770      	bx	lr
 8012ca6:	bf00      	nop

08012ca8 <_Time__get_serialized_size>:
 8012ca8:	b160      	cbz	r0, 8012cc4 <_Time__get_serialized_size+0x1c>
 8012caa:	2104      	movs	r1, #4
 8012cac:	2000      	movs	r0, #0
 8012cae:	b510      	push	{r4, lr}
 8012cb0:	f001 facc 	bl	801424c <ucdr_alignment>
 8012cb4:	2104      	movs	r1, #4
 8012cb6:	1844      	adds	r4, r0, r1
 8012cb8:	4620      	mov	r0, r4
 8012cba:	f001 fac7 	bl	801424c <ucdr_alignment>
 8012cbe:	3004      	adds	r0, #4
 8012cc0:	4420      	add	r0, r4
 8012cc2:	bd10      	pop	{r4, pc}
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop

08012cc8 <_Time__max_serialized_size>:
 8012cc8:	b510      	push	{r4, lr}
 8012cca:	2104      	movs	r1, #4
 8012ccc:	2000      	movs	r0, #0
 8012cce:	f001 fabd 	bl	801424c <ucdr_alignment>
 8012cd2:	2104      	movs	r1, #4
 8012cd4:	1844      	adds	r4, r0, r1
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f001 fab8 	bl	801424c <ucdr_alignment>
 8012cdc:	3004      	adds	r0, #4
 8012cde:	4420      	add	r0, r4
 8012ce0:	bd10      	pop	{r4, pc}
 8012ce2:	bf00      	nop

08012ce4 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012ce4:	b538      	push	{r3, r4, r5, lr}
 8012ce6:	460c      	mov	r4, r1
 8012ce8:	2301      	movs	r3, #1
 8012cea:	2104      	movs	r1, #4
 8012cec:	1d25      	adds	r5, r4, #4
 8012cee:	7003      	strb	r3, [r0, #0]
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	f1c4 0404 	rsb	r4, r4, #4
 8012cf6:	f001 faa9 	bl	801424c <ucdr_alignment>
 8012cfa:	4405      	add	r5, r0
 8012cfc:	2104      	movs	r1, #4
 8012cfe:	4628      	mov	r0, r5
 8012d00:	f001 faa4 	bl	801424c <ucdr_alignment>
 8012d04:	4420      	add	r0, r4
 8012d06:	4428      	add	r0, r5
 8012d08:	bd38      	pop	{r3, r4, r5, pc}
 8012d0a:	bf00      	nop

08012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012d0c:	4800      	ldr	r0, [pc, #0]	@ (8012d10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012d0e:	4770      	bx	lr
 8012d10:	24000dd4 	.word	0x24000dd4

08012d14 <ucdr_serialize_bool>:
 8012d14:	b538      	push	{r3, r4, r5, lr}
 8012d16:	460d      	mov	r5, r1
 8012d18:	2101      	movs	r1, #1
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	f001 fa4a 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8012d20:	b148      	cbz	r0, 8012d36 <ucdr_serialize_bool+0x22>
 8012d22:	68a3      	ldr	r3, [r4, #8]
 8012d24:	2101      	movs	r1, #1
 8012d26:	701d      	strb	r5, [r3, #0]
 8012d28:	68a2      	ldr	r2, [r4, #8]
 8012d2a:	6923      	ldr	r3, [r4, #16]
 8012d2c:	440a      	add	r2, r1
 8012d2e:	7561      	strb	r1, [r4, #21]
 8012d30:	440b      	add	r3, r1
 8012d32:	60a2      	str	r2, [r4, #8]
 8012d34:	6123      	str	r3, [r4, #16]
 8012d36:	7da0      	ldrb	r0, [r4, #22]
 8012d38:	f080 0001 	eor.w	r0, r0, #1
 8012d3c:	bd38      	pop	{r3, r4, r5, pc}
 8012d3e:	bf00      	nop

08012d40 <ucdr_deserialize_bool>:
 8012d40:	b538      	push	{r3, r4, r5, lr}
 8012d42:	460d      	mov	r5, r1
 8012d44:	2101      	movs	r1, #1
 8012d46:	4604      	mov	r4, r0
 8012d48:	f001 fa34 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8012d4c:	b160      	cbz	r0, 8012d68 <ucdr_deserialize_bool+0x28>
 8012d4e:	68a2      	ldr	r2, [r4, #8]
 8012d50:	2101      	movs	r1, #1
 8012d52:	6923      	ldr	r3, [r4, #16]
 8012d54:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012d58:	440b      	add	r3, r1
 8012d5a:	3800      	subs	r0, #0
 8012d5c:	bf18      	it	ne
 8012d5e:	2001      	movne	r0, #1
 8012d60:	7028      	strb	r0, [r5, #0]
 8012d62:	60a2      	str	r2, [r4, #8]
 8012d64:	6123      	str	r3, [r4, #16]
 8012d66:	7561      	strb	r1, [r4, #21]
 8012d68:	7da0      	ldrb	r0, [r4, #22]
 8012d6a:	f080 0001 	eor.w	r0, r0, #1
 8012d6e:	bd38      	pop	{r3, r4, r5, pc}

08012d70 <ucdr_serialize_uint8_t>:
 8012d70:	b538      	push	{r3, r4, r5, lr}
 8012d72:	460d      	mov	r5, r1
 8012d74:	2101      	movs	r1, #1
 8012d76:	4604      	mov	r4, r0
 8012d78:	f001 fa1c 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8012d7c:	b148      	cbz	r0, 8012d92 <ucdr_serialize_uint8_t+0x22>
 8012d7e:	68a3      	ldr	r3, [r4, #8]
 8012d80:	2101      	movs	r1, #1
 8012d82:	701d      	strb	r5, [r3, #0]
 8012d84:	68a2      	ldr	r2, [r4, #8]
 8012d86:	6923      	ldr	r3, [r4, #16]
 8012d88:	440a      	add	r2, r1
 8012d8a:	7561      	strb	r1, [r4, #21]
 8012d8c:	440b      	add	r3, r1
 8012d8e:	60a2      	str	r2, [r4, #8]
 8012d90:	6123      	str	r3, [r4, #16]
 8012d92:	7da0      	ldrb	r0, [r4, #22]
 8012d94:	f080 0001 	eor.w	r0, r0, #1
 8012d98:	bd38      	pop	{r3, r4, r5, pc}
 8012d9a:	bf00      	nop

08012d9c <ucdr_deserialize_uint8_t>:
 8012d9c:	b538      	push	{r3, r4, r5, lr}
 8012d9e:	460d      	mov	r5, r1
 8012da0:	2101      	movs	r1, #1
 8012da2:	4604      	mov	r4, r0
 8012da4:	f001 fa06 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8012da8:	b150      	cbz	r0, 8012dc0 <ucdr_deserialize_uint8_t+0x24>
 8012daa:	68a3      	ldr	r3, [r4, #8]
 8012dac:	2101      	movs	r1, #1
 8012dae:	781b      	ldrb	r3, [r3, #0]
 8012db0:	702b      	strb	r3, [r5, #0]
 8012db2:	68a2      	ldr	r2, [r4, #8]
 8012db4:	6923      	ldr	r3, [r4, #16]
 8012db6:	440a      	add	r2, r1
 8012db8:	7561      	strb	r1, [r4, #21]
 8012dba:	440b      	add	r3, r1
 8012dbc:	60a2      	str	r2, [r4, #8]
 8012dbe:	6123      	str	r3, [r4, #16]
 8012dc0:	7da0      	ldrb	r0, [r4, #22]
 8012dc2:	f080 0001 	eor.w	r0, r0, #1
 8012dc6:	bd38      	pop	{r3, r4, r5, pc}

08012dc8 <ucdr_serialize_uint16_t>:
 8012dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dcc:	460b      	mov	r3, r1
 8012dce:	b082      	sub	sp, #8
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	2102      	movs	r1, #2
 8012dd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012dd8:	f001 fa40 	bl	801425c <ucdr_buffer_alignment>
 8012ddc:	4601      	mov	r1, r0
 8012dde:	4620      	mov	r0, r4
 8012de0:	7d67      	ldrb	r7, [r4, #21]
 8012de2:	f001 fa83 	bl	80142ec <ucdr_advance_buffer>
 8012de6:	2102      	movs	r1, #2
 8012de8:	4620      	mov	r0, r4
 8012dea:	f001 f9d7 	bl	801419c <ucdr_check_buffer_available_for>
 8012dee:	bb78      	cbnz	r0, 8012e50 <ucdr_serialize_uint16_t+0x88>
 8012df0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012df4:	42ab      	cmp	r3, r5
 8012df6:	d926      	bls.n	8012e46 <ucdr_serialize_uint16_t+0x7e>
 8012df8:	1b5e      	subs	r6, r3, r5
 8012dfa:	60a3      	str	r3, [r4, #8]
 8012dfc:	6923      	ldr	r3, [r4, #16]
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f1c6 0802 	rsb	r8, r6, #2
 8012e04:	4433      	add	r3, r6
 8012e06:	4641      	mov	r1, r8
 8012e08:	6123      	str	r3, [r4, #16]
 8012e0a:	f001 f9d3 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8012e0e:	2800      	cmp	r0, #0
 8012e10:	d03b      	beq.n	8012e8a <ucdr_serialize_uint16_t+0xc2>
 8012e12:	7d23      	ldrb	r3, [r4, #20]
 8012e14:	2b01      	cmp	r3, #1
 8012e16:	d04a      	beq.n	8012eae <ucdr_serialize_uint16_t+0xe6>
 8012e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012e1c:	702b      	strb	r3, [r5, #0]
 8012e1e:	2e00      	cmp	r6, #0
 8012e20:	d040      	beq.n	8012ea4 <ucdr_serialize_uint16_t+0xdc>
 8012e22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012e26:	706b      	strb	r3, [r5, #1]
 8012e28:	6923      	ldr	r3, [r4, #16]
 8012e2a:	2102      	movs	r1, #2
 8012e2c:	68a2      	ldr	r2, [r4, #8]
 8012e2e:	3302      	adds	r3, #2
 8012e30:	7da0      	ldrb	r0, [r4, #22]
 8012e32:	4442      	add	r2, r8
 8012e34:	7561      	strb	r1, [r4, #21]
 8012e36:	1b9e      	subs	r6, r3, r6
 8012e38:	f080 0001 	eor.w	r0, r0, #1
 8012e3c:	60a2      	str	r2, [r4, #8]
 8012e3e:	6126      	str	r6, [r4, #16]
 8012e40:	b002      	add	sp, #8
 8012e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e46:	2102      	movs	r1, #2
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f001 f9b3 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8012e4e:	b190      	cbz	r0, 8012e76 <ucdr_serialize_uint16_t+0xae>
 8012e50:	7d23      	ldrb	r3, [r4, #20]
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	68a3      	ldr	r3, [r4, #8]
 8012e56:	d014      	beq.n	8012e82 <ucdr_serialize_uint16_t+0xba>
 8012e58:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012e5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e60:	7019      	strb	r1, [r3, #0]
 8012e62:	68a3      	ldr	r3, [r4, #8]
 8012e64:	705a      	strb	r2, [r3, #1]
 8012e66:	2102      	movs	r1, #2
 8012e68:	68a2      	ldr	r2, [r4, #8]
 8012e6a:	6923      	ldr	r3, [r4, #16]
 8012e6c:	440a      	add	r2, r1
 8012e6e:	7561      	strb	r1, [r4, #21]
 8012e70:	440b      	add	r3, r1
 8012e72:	60a2      	str	r2, [r4, #8]
 8012e74:	6123      	str	r3, [r4, #16]
 8012e76:	7da0      	ldrb	r0, [r4, #22]
 8012e78:	f080 0001 	eor.w	r0, r0, #1
 8012e7c:	b002      	add	sp, #8
 8012e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e82:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012e86:	801a      	strh	r2, [r3, #0]
 8012e88:	e7ed      	b.n	8012e66 <ucdr_serialize_uint16_t+0x9e>
 8012e8a:	68a2      	ldr	r2, [r4, #8]
 8012e8c:	6923      	ldr	r3, [r4, #16]
 8012e8e:	7da0      	ldrb	r0, [r4, #22]
 8012e90:	1b92      	subs	r2, r2, r6
 8012e92:	1b9b      	subs	r3, r3, r6
 8012e94:	7567      	strb	r7, [r4, #21]
 8012e96:	f080 0001 	eor.w	r0, r0, #1
 8012e9a:	60a2      	str	r2, [r4, #8]
 8012e9c:	6123      	str	r3, [r4, #16]
 8012e9e:	b002      	add	sp, #8
 8012ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea4:	68a3      	ldr	r3, [r4, #8]
 8012ea6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012eaa:	701a      	strb	r2, [r3, #0]
 8012eac:	e7bc      	b.n	8012e28 <ucdr_serialize_uint16_t+0x60>
 8012eae:	4628      	mov	r0, r5
 8012eb0:	f10d 0506 	add.w	r5, sp, #6
 8012eb4:	4632      	mov	r2, r6
 8012eb6:	4629      	mov	r1, r5
 8012eb8:	f00f fbbd 	bl	8022636 <memcpy>
 8012ebc:	4642      	mov	r2, r8
 8012ebe:	19a9      	adds	r1, r5, r6
 8012ec0:	68a0      	ldr	r0, [r4, #8]
 8012ec2:	f00f fbb8 	bl	8022636 <memcpy>
 8012ec6:	e7af      	b.n	8012e28 <ucdr_serialize_uint16_t+0x60>

08012ec8 <ucdr_serialize_endian_uint16_t>:
 8012ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ecc:	4604      	mov	r4, r0
 8012ece:	b083      	sub	sp, #12
 8012ed0:	460d      	mov	r5, r1
 8012ed2:	2102      	movs	r1, #2
 8012ed4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012ed8:	f001 f9c0 	bl	801425c <ucdr_buffer_alignment>
 8012edc:	4601      	mov	r1, r0
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012ee4:	f001 fa02 	bl	80142ec <ucdr_advance_buffer>
 8012ee8:	2102      	movs	r1, #2
 8012eea:	4620      	mov	r0, r4
 8012eec:	f001 f956 	bl	801419c <ucdr_check_buffer_available_for>
 8012ef0:	bb70      	cbnz	r0, 8012f50 <ucdr_serialize_endian_uint16_t+0x88>
 8012ef2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012ef6:	42be      	cmp	r6, r7
 8012ef8:	d925      	bls.n	8012f46 <ucdr_serialize_endian_uint16_t+0x7e>
 8012efa:	6923      	ldr	r3, [r4, #16]
 8012efc:	4620      	mov	r0, r4
 8012efe:	60a6      	str	r6, [r4, #8]
 8012f00:	1bf6      	subs	r6, r6, r7
 8012f02:	4433      	add	r3, r6
 8012f04:	f1c6 0902 	rsb	r9, r6, #2
 8012f08:	6123      	str	r3, [r4, #16]
 8012f0a:	4649      	mov	r1, r9
 8012f0c:	f001 f952 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8012f10:	2800      	cmp	r0, #0
 8012f12:	d039      	beq.n	8012f88 <ucdr_serialize_endian_uint16_t+0xc0>
 8012f14:	2d01      	cmp	r5, #1
 8012f16:	d04a      	beq.n	8012fae <ucdr_serialize_endian_uint16_t+0xe6>
 8012f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012f1c:	703b      	strb	r3, [r7, #0]
 8012f1e:	2e00      	cmp	r6, #0
 8012f20:	d040      	beq.n	8012fa4 <ucdr_serialize_endian_uint16_t+0xdc>
 8012f22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012f26:	707b      	strb	r3, [r7, #1]
 8012f28:	6923      	ldr	r3, [r4, #16]
 8012f2a:	2102      	movs	r1, #2
 8012f2c:	68a2      	ldr	r2, [r4, #8]
 8012f2e:	7da0      	ldrb	r0, [r4, #22]
 8012f30:	3302      	adds	r3, #2
 8012f32:	444a      	add	r2, r9
 8012f34:	7561      	strb	r1, [r4, #21]
 8012f36:	1b9b      	subs	r3, r3, r6
 8012f38:	f080 0001 	eor.w	r0, r0, #1
 8012f3c:	60a2      	str	r2, [r4, #8]
 8012f3e:	6123      	str	r3, [r4, #16]
 8012f40:	b003      	add	sp, #12
 8012f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f46:	2102      	movs	r1, #2
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f001 f933 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8012f4e:	b188      	cbz	r0, 8012f74 <ucdr_serialize_endian_uint16_t+0xac>
 8012f50:	2d01      	cmp	r5, #1
 8012f52:	68a3      	ldr	r3, [r4, #8]
 8012f54:	d014      	beq.n	8012f80 <ucdr_serialize_endian_uint16_t+0xb8>
 8012f56:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012f5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f5e:	7019      	strb	r1, [r3, #0]
 8012f60:	68a3      	ldr	r3, [r4, #8]
 8012f62:	705a      	strb	r2, [r3, #1]
 8012f64:	2102      	movs	r1, #2
 8012f66:	68a2      	ldr	r2, [r4, #8]
 8012f68:	6923      	ldr	r3, [r4, #16]
 8012f6a:	440a      	add	r2, r1
 8012f6c:	7561      	strb	r1, [r4, #21]
 8012f6e:	440b      	add	r3, r1
 8012f70:	60a2      	str	r2, [r4, #8]
 8012f72:	6123      	str	r3, [r4, #16]
 8012f74:	7da0      	ldrb	r0, [r4, #22]
 8012f76:	f080 0001 	eor.w	r0, r0, #1
 8012f7a:	b003      	add	sp, #12
 8012f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f80:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012f84:	801a      	strh	r2, [r3, #0]
 8012f86:	e7ed      	b.n	8012f64 <ucdr_serialize_endian_uint16_t+0x9c>
 8012f88:	68a2      	ldr	r2, [r4, #8]
 8012f8a:	6923      	ldr	r3, [r4, #16]
 8012f8c:	7da0      	ldrb	r0, [r4, #22]
 8012f8e:	1b92      	subs	r2, r2, r6
 8012f90:	1b9b      	subs	r3, r3, r6
 8012f92:	f884 8015 	strb.w	r8, [r4, #21]
 8012f96:	f080 0001 	eor.w	r0, r0, #1
 8012f9a:	60a2      	str	r2, [r4, #8]
 8012f9c:	6123      	str	r3, [r4, #16]
 8012f9e:	b003      	add	sp, #12
 8012fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fa4:	68a3      	ldr	r3, [r4, #8]
 8012fa6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012faa:	701a      	strb	r2, [r3, #0]
 8012fac:	e7bc      	b.n	8012f28 <ucdr_serialize_endian_uint16_t+0x60>
 8012fae:	f10d 0506 	add.w	r5, sp, #6
 8012fb2:	4632      	mov	r2, r6
 8012fb4:	4638      	mov	r0, r7
 8012fb6:	4629      	mov	r1, r5
 8012fb8:	f00f fb3d 	bl	8022636 <memcpy>
 8012fbc:	464a      	mov	r2, r9
 8012fbe:	19a9      	adds	r1, r5, r6
 8012fc0:	68a0      	ldr	r0, [r4, #8]
 8012fc2:	f00f fb38 	bl	8022636 <memcpy>
 8012fc6:	e7af      	b.n	8012f28 <ucdr_serialize_endian_uint16_t+0x60>

08012fc8 <ucdr_deserialize_uint16_t>:
 8012fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fcc:	4604      	mov	r4, r0
 8012fce:	460d      	mov	r5, r1
 8012fd0:	2102      	movs	r1, #2
 8012fd2:	f001 f943 	bl	801425c <ucdr_buffer_alignment>
 8012fd6:	4601      	mov	r1, r0
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012fde:	f001 f985 	bl	80142ec <ucdr_advance_buffer>
 8012fe2:	2102      	movs	r1, #2
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f001 f8d9 	bl	801419c <ucdr_check_buffer_available_for>
 8012fea:	bb60      	cbnz	r0, 8013046 <ucdr_deserialize_uint16_t+0x7e>
 8012fec:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012ff0:	42be      	cmp	r6, r7
 8012ff2:	d923      	bls.n	801303c <ucdr_deserialize_uint16_t+0x74>
 8012ff4:	6923      	ldr	r3, [r4, #16]
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	60a6      	str	r6, [r4, #8]
 8012ffa:	1bf6      	subs	r6, r6, r7
 8012ffc:	4433      	add	r3, r6
 8012ffe:	f1c6 0902 	rsb	r9, r6, #2
 8013002:	6123      	str	r3, [r4, #16]
 8013004:	4649      	mov	r1, r9
 8013006:	f001 f8d5 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 801300a:	2800      	cmp	r0, #0
 801300c:	d034      	beq.n	8013078 <ucdr_deserialize_uint16_t+0xb0>
 801300e:	7d23      	ldrb	r3, [r4, #20]
 8013010:	2b01      	cmp	r3, #1
 8013012:	d042      	beq.n	801309a <ucdr_deserialize_uint16_t+0xd2>
 8013014:	787b      	ldrb	r3, [r7, #1]
 8013016:	702b      	strb	r3, [r5, #0]
 8013018:	2e00      	cmp	r6, #0
 801301a:	d03a      	beq.n	8013092 <ucdr_deserialize_uint16_t+0xca>
 801301c:	783b      	ldrb	r3, [r7, #0]
 801301e:	706b      	strb	r3, [r5, #1]
 8013020:	6923      	ldr	r3, [r4, #16]
 8013022:	2102      	movs	r1, #2
 8013024:	68a2      	ldr	r2, [r4, #8]
 8013026:	3302      	adds	r3, #2
 8013028:	7da0      	ldrb	r0, [r4, #22]
 801302a:	444a      	add	r2, r9
 801302c:	7561      	strb	r1, [r4, #21]
 801302e:	1b9b      	subs	r3, r3, r6
 8013030:	f080 0001 	eor.w	r0, r0, #1
 8013034:	60a2      	str	r2, [r4, #8]
 8013036:	6123      	str	r3, [r4, #16]
 8013038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801303c:	2102      	movs	r1, #2
 801303e:	4620      	mov	r0, r4
 8013040:	f001 f8b8 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013044:	b180      	cbz	r0, 8013068 <ucdr_deserialize_uint16_t+0xa0>
 8013046:	7d23      	ldrb	r3, [r4, #20]
 8013048:	2b01      	cmp	r3, #1
 801304a:	68a3      	ldr	r3, [r4, #8]
 801304c:	d011      	beq.n	8013072 <ucdr_deserialize_uint16_t+0xaa>
 801304e:	785b      	ldrb	r3, [r3, #1]
 8013050:	702b      	strb	r3, [r5, #0]
 8013052:	68a3      	ldr	r3, [r4, #8]
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	706b      	strb	r3, [r5, #1]
 8013058:	2102      	movs	r1, #2
 801305a:	68a2      	ldr	r2, [r4, #8]
 801305c:	6923      	ldr	r3, [r4, #16]
 801305e:	440a      	add	r2, r1
 8013060:	7561      	strb	r1, [r4, #21]
 8013062:	440b      	add	r3, r1
 8013064:	60a2      	str	r2, [r4, #8]
 8013066:	6123      	str	r3, [r4, #16]
 8013068:	7da0      	ldrb	r0, [r4, #22]
 801306a:	f080 0001 	eor.w	r0, r0, #1
 801306e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013072:	881b      	ldrh	r3, [r3, #0]
 8013074:	802b      	strh	r3, [r5, #0]
 8013076:	e7ef      	b.n	8013058 <ucdr_deserialize_uint16_t+0x90>
 8013078:	68a2      	ldr	r2, [r4, #8]
 801307a:	6923      	ldr	r3, [r4, #16]
 801307c:	1b92      	subs	r2, r2, r6
 801307e:	7da0      	ldrb	r0, [r4, #22]
 8013080:	1b9b      	subs	r3, r3, r6
 8013082:	f884 8015 	strb.w	r8, [r4, #21]
 8013086:	f080 0001 	eor.w	r0, r0, #1
 801308a:	60a2      	str	r2, [r4, #8]
 801308c:	6123      	str	r3, [r4, #16]
 801308e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013092:	68a3      	ldr	r3, [r4, #8]
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	706b      	strb	r3, [r5, #1]
 8013098:	e7c2      	b.n	8013020 <ucdr_deserialize_uint16_t+0x58>
 801309a:	4639      	mov	r1, r7
 801309c:	4632      	mov	r2, r6
 801309e:	4628      	mov	r0, r5
 80130a0:	f00f fac9 	bl	8022636 <memcpy>
 80130a4:	464a      	mov	r2, r9
 80130a6:	19a8      	adds	r0, r5, r6
 80130a8:	68a1      	ldr	r1, [r4, #8]
 80130aa:	f00f fac4 	bl	8022636 <memcpy>
 80130ae:	e7b7      	b.n	8013020 <ucdr_deserialize_uint16_t+0x58>

080130b0 <ucdr_deserialize_endian_uint16_t>:
 80130b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130b4:	4604      	mov	r4, r0
 80130b6:	460e      	mov	r6, r1
 80130b8:	2102      	movs	r1, #2
 80130ba:	4615      	mov	r5, r2
 80130bc:	f001 f8ce 	bl	801425c <ucdr_buffer_alignment>
 80130c0:	4601      	mov	r1, r0
 80130c2:	4620      	mov	r0, r4
 80130c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80130c8:	f001 f910 	bl	80142ec <ucdr_advance_buffer>
 80130cc:	2102      	movs	r1, #2
 80130ce:	4620      	mov	r0, r4
 80130d0:	f001 f864 	bl	801419c <ucdr_check_buffer_available_for>
 80130d4:	bb70      	cbnz	r0, 8013134 <ucdr_deserialize_endian_uint16_t+0x84>
 80130d6:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 80130da:	454f      	cmp	r7, r9
 80130dc:	d925      	bls.n	801312a <ucdr_deserialize_endian_uint16_t+0x7a>
 80130de:	6923      	ldr	r3, [r4, #16]
 80130e0:	4620      	mov	r0, r4
 80130e2:	60a7      	str	r7, [r4, #8]
 80130e4:	eba7 0709 	sub.w	r7, r7, r9
 80130e8:	443b      	add	r3, r7
 80130ea:	f1c7 0a02 	rsb	sl, r7, #2
 80130ee:	6123      	str	r3, [r4, #16]
 80130f0:	4651      	mov	r1, sl
 80130f2:	f001 f85f 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 80130f6:	2800      	cmp	r0, #0
 80130f8:	d034      	beq.n	8013164 <ucdr_deserialize_endian_uint16_t+0xb4>
 80130fa:	2e01      	cmp	r6, #1
 80130fc:	d043      	beq.n	8013186 <ucdr_deserialize_endian_uint16_t+0xd6>
 80130fe:	f899 3001 	ldrb.w	r3, [r9, #1]
 8013102:	702b      	strb	r3, [r5, #0]
 8013104:	2f00      	cmp	r7, #0
 8013106:	d03a      	beq.n	801317e <ucdr_deserialize_endian_uint16_t+0xce>
 8013108:	f899 3000 	ldrb.w	r3, [r9]
 801310c:	706b      	strb	r3, [r5, #1]
 801310e:	6923      	ldr	r3, [r4, #16]
 8013110:	2102      	movs	r1, #2
 8013112:	68a2      	ldr	r2, [r4, #8]
 8013114:	3302      	adds	r3, #2
 8013116:	7da0      	ldrb	r0, [r4, #22]
 8013118:	4452      	add	r2, sl
 801311a:	7561      	strb	r1, [r4, #21]
 801311c:	1bdb      	subs	r3, r3, r7
 801311e:	f080 0001 	eor.w	r0, r0, #1
 8013122:	60a2      	str	r2, [r4, #8]
 8013124:	6123      	str	r3, [r4, #16]
 8013126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801312a:	2102      	movs	r1, #2
 801312c:	4620      	mov	r0, r4
 801312e:	f001 f841 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013132:	b178      	cbz	r0, 8013154 <ucdr_deserialize_endian_uint16_t+0xa4>
 8013134:	2e01      	cmp	r6, #1
 8013136:	68a3      	ldr	r3, [r4, #8]
 8013138:	d011      	beq.n	801315e <ucdr_deserialize_endian_uint16_t+0xae>
 801313a:	785b      	ldrb	r3, [r3, #1]
 801313c:	702b      	strb	r3, [r5, #0]
 801313e:	68a3      	ldr	r3, [r4, #8]
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	706b      	strb	r3, [r5, #1]
 8013144:	2102      	movs	r1, #2
 8013146:	68a2      	ldr	r2, [r4, #8]
 8013148:	6923      	ldr	r3, [r4, #16]
 801314a:	440a      	add	r2, r1
 801314c:	7561      	strb	r1, [r4, #21]
 801314e:	440b      	add	r3, r1
 8013150:	60a2      	str	r2, [r4, #8]
 8013152:	6123      	str	r3, [r4, #16]
 8013154:	7da0      	ldrb	r0, [r4, #22]
 8013156:	f080 0001 	eor.w	r0, r0, #1
 801315a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801315e:	881b      	ldrh	r3, [r3, #0]
 8013160:	802b      	strh	r3, [r5, #0]
 8013162:	e7ef      	b.n	8013144 <ucdr_deserialize_endian_uint16_t+0x94>
 8013164:	68a2      	ldr	r2, [r4, #8]
 8013166:	6923      	ldr	r3, [r4, #16]
 8013168:	1bd2      	subs	r2, r2, r7
 801316a:	7da0      	ldrb	r0, [r4, #22]
 801316c:	1bdb      	subs	r3, r3, r7
 801316e:	f884 8015 	strb.w	r8, [r4, #21]
 8013172:	f080 0001 	eor.w	r0, r0, #1
 8013176:	60a2      	str	r2, [r4, #8]
 8013178:	6123      	str	r3, [r4, #16]
 801317a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801317e:	68a3      	ldr	r3, [r4, #8]
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	706b      	strb	r3, [r5, #1]
 8013184:	e7c3      	b.n	801310e <ucdr_deserialize_endian_uint16_t+0x5e>
 8013186:	4649      	mov	r1, r9
 8013188:	463a      	mov	r2, r7
 801318a:	4628      	mov	r0, r5
 801318c:	f00f fa53 	bl	8022636 <memcpy>
 8013190:	4652      	mov	r2, sl
 8013192:	19e8      	adds	r0, r5, r7
 8013194:	68a1      	ldr	r1, [r4, #8]
 8013196:	f00f fa4e 	bl	8022636 <memcpy>
 801319a:	e7b8      	b.n	801310e <ucdr_deserialize_endian_uint16_t+0x5e>

0801319c <ucdr_serialize_uint32_t>:
 801319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131a0:	b082      	sub	sp, #8
 80131a2:	4604      	mov	r4, r0
 80131a4:	9101      	str	r1, [sp, #4]
 80131a6:	2104      	movs	r1, #4
 80131a8:	f001 f858 	bl	801425c <ucdr_buffer_alignment>
 80131ac:	4601      	mov	r1, r0
 80131ae:	4620      	mov	r0, r4
 80131b0:	7d67      	ldrb	r7, [r4, #21]
 80131b2:	f001 f89b 	bl	80142ec <ucdr_advance_buffer>
 80131b6:	2104      	movs	r1, #4
 80131b8:	4620      	mov	r0, r4
 80131ba:	f000 ffef 	bl	801419c <ucdr_check_buffer_available_for>
 80131be:	2800      	cmp	r0, #0
 80131c0:	d139      	bne.n	8013236 <ucdr_serialize_uint32_t+0x9a>
 80131c2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80131c6:	42ab      	cmp	r3, r5
 80131c8:	d930      	bls.n	801322c <ucdr_serialize_uint32_t+0x90>
 80131ca:	1b5e      	subs	r6, r3, r5
 80131cc:	60a3      	str	r3, [r4, #8]
 80131ce:	6923      	ldr	r3, [r4, #16]
 80131d0:	4620      	mov	r0, r4
 80131d2:	f1c6 0804 	rsb	r8, r6, #4
 80131d6:	4433      	add	r3, r6
 80131d8:	4641      	mov	r1, r8
 80131da:	6123      	str	r3, [r4, #16]
 80131dc:	f000 ffea 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d04c      	beq.n	801327e <ucdr_serialize_uint32_t+0xe2>
 80131e4:	7d23      	ldrb	r3, [r4, #20]
 80131e6:	2b01      	cmp	r3, #1
 80131e8:	d063      	beq.n	80132b2 <ucdr_serialize_uint32_t+0x116>
 80131ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80131ee:	702b      	strb	r3, [r5, #0]
 80131f0:	2e00      	cmp	r6, #0
 80131f2:	d051      	beq.n	8013298 <ucdr_serialize_uint32_t+0xfc>
 80131f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80131f8:	2e01      	cmp	r6, #1
 80131fa:	706b      	strb	r3, [r5, #1]
 80131fc:	d050      	beq.n	80132a0 <ucdr_serialize_uint32_t+0x104>
 80131fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013202:	2e02      	cmp	r6, #2
 8013204:	70ab      	strb	r3, [r5, #2]
 8013206:	d04f      	beq.n	80132a8 <ucdr_serialize_uint32_t+0x10c>
 8013208:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801320c:	70eb      	strb	r3, [r5, #3]
 801320e:	6923      	ldr	r3, [r4, #16]
 8013210:	2104      	movs	r1, #4
 8013212:	68a2      	ldr	r2, [r4, #8]
 8013214:	3304      	adds	r3, #4
 8013216:	7da0      	ldrb	r0, [r4, #22]
 8013218:	4442      	add	r2, r8
 801321a:	7561      	strb	r1, [r4, #21]
 801321c:	1b9e      	subs	r6, r3, r6
 801321e:	f080 0001 	eor.w	r0, r0, #1
 8013222:	60a2      	str	r2, [r4, #8]
 8013224:	6126      	str	r6, [r4, #16]
 8013226:	b002      	add	sp, #8
 8013228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801322c:	2104      	movs	r1, #4
 801322e:	4620      	mov	r0, r4
 8013230:	f000 ffc0 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013234:	b1d0      	cbz	r0, 801326c <ucdr_serialize_uint32_t+0xd0>
 8013236:	7d23      	ldrb	r3, [r4, #20]
 8013238:	2b01      	cmp	r3, #1
 801323a:	68a3      	ldr	r3, [r4, #8]
 801323c:	d01c      	beq.n	8013278 <ucdr_serialize_uint32_t+0xdc>
 801323e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013242:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013246:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801324a:	7018      	strb	r0, [r3, #0]
 801324c:	68a3      	ldr	r3, [r4, #8]
 801324e:	705a      	strb	r2, [r3, #1]
 8013250:	68a3      	ldr	r3, [r4, #8]
 8013252:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013256:	7099      	strb	r1, [r3, #2]
 8013258:	68a3      	ldr	r3, [r4, #8]
 801325a:	70da      	strb	r2, [r3, #3]
 801325c:	2104      	movs	r1, #4
 801325e:	68a2      	ldr	r2, [r4, #8]
 8013260:	6923      	ldr	r3, [r4, #16]
 8013262:	440a      	add	r2, r1
 8013264:	7561      	strb	r1, [r4, #21]
 8013266:	440b      	add	r3, r1
 8013268:	60a2      	str	r2, [r4, #8]
 801326a:	6123      	str	r3, [r4, #16]
 801326c:	7da0      	ldrb	r0, [r4, #22]
 801326e:	f080 0001 	eor.w	r0, r0, #1
 8013272:	b002      	add	sp, #8
 8013274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013278:	9a01      	ldr	r2, [sp, #4]
 801327a:	601a      	str	r2, [r3, #0]
 801327c:	e7ee      	b.n	801325c <ucdr_serialize_uint32_t+0xc0>
 801327e:	68a2      	ldr	r2, [r4, #8]
 8013280:	6923      	ldr	r3, [r4, #16]
 8013282:	7da0      	ldrb	r0, [r4, #22]
 8013284:	1b92      	subs	r2, r2, r6
 8013286:	1b9b      	subs	r3, r3, r6
 8013288:	7567      	strb	r7, [r4, #21]
 801328a:	f080 0001 	eor.w	r0, r0, #1
 801328e:	60a2      	str	r2, [r4, #8]
 8013290:	6123      	str	r3, [r4, #16]
 8013292:	b002      	add	sp, #8
 8013294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013298:	68a3      	ldr	r3, [r4, #8]
 801329a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801329e:	701a      	strb	r2, [r3, #0]
 80132a0:	68a3      	ldr	r3, [r4, #8]
 80132a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80132a6:	701a      	strb	r2, [r3, #0]
 80132a8:	68a3      	ldr	r3, [r4, #8]
 80132aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80132ae:	701a      	strb	r2, [r3, #0]
 80132b0:	e7ad      	b.n	801320e <ucdr_serialize_uint32_t+0x72>
 80132b2:	4628      	mov	r0, r5
 80132b4:	ad01      	add	r5, sp, #4
 80132b6:	4632      	mov	r2, r6
 80132b8:	4629      	mov	r1, r5
 80132ba:	f00f f9bc 	bl	8022636 <memcpy>
 80132be:	4642      	mov	r2, r8
 80132c0:	19a9      	adds	r1, r5, r6
 80132c2:	68a0      	ldr	r0, [r4, #8]
 80132c4:	f00f f9b7 	bl	8022636 <memcpy>
 80132c8:	e7a1      	b.n	801320e <ucdr_serialize_uint32_t+0x72>
 80132ca:	bf00      	nop

080132cc <ucdr_serialize_endian_uint32_t>:
 80132cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132d0:	4604      	mov	r4, r0
 80132d2:	b083      	sub	sp, #12
 80132d4:	460d      	mov	r5, r1
 80132d6:	2104      	movs	r1, #4
 80132d8:	9201      	str	r2, [sp, #4]
 80132da:	f000 ffbf 	bl	801425c <ucdr_buffer_alignment>
 80132de:	4601      	mov	r1, r0
 80132e0:	4620      	mov	r0, r4
 80132e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80132e6:	f001 f801 	bl	80142ec <ucdr_advance_buffer>
 80132ea:	2104      	movs	r1, #4
 80132ec:	4620      	mov	r0, r4
 80132ee:	f000 ff55 	bl	801419c <ucdr_check_buffer_available_for>
 80132f2:	2800      	cmp	r0, #0
 80132f4:	d138      	bne.n	8013368 <ucdr_serialize_endian_uint32_t+0x9c>
 80132f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80132fa:	42b7      	cmp	r7, r6
 80132fc:	d92f      	bls.n	801335e <ucdr_serialize_endian_uint32_t+0x92>
 80132fe:	6923      	ldr	r3, [r4, #16]
 8013300:	4620      	mov	r0, r4
 8013302:	60a7      	str	r7, [r4, #8]
 8013304:	1bbf      	subs	r7, r7, r6
 8013306:	443b      	add	r3, r7
 8013308:	f1c7 0904 	rsb	r9, r7, #4
 801330c:	6123      	str	r3, [r4, #16]
 801330e:	4649      	mov	r1, r9
 8013310:	f000 ff50 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013314:	2800      	cmp	r0, #0
 8013316:	d04a      	beq.n	80133ae <ucdr_serialize_endian_uint32_t+0xe2>
 8013318:	2d01      	cmp	r5, #1
 801331a:	d063      	beq.n	80133e4 <ucdr_serialize_endian_uint32_t+0x118>
 801331c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013320:	7033      	strb	r3, [r6, #0]
 8013322:	2f00      	cmp	r7, #0
 8013324:	d051      	beq.n	80133ca <ucdr_serialize_endian_uint32_t+0xfe>
 8013326:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801332a:	2f01      	cmp	r7, #1
 801332c:	7073      	strb	r3, [r6, #1]
 801332e:	d050      	beq.n	80133d2 <ucdr_serialize_endian_uint32_t+0x106>
 8013330:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013334:	2f02      	cmp	r7, #2
 8013336:	70b3      	strb	r3, [r6, #2]
 8013338:	d04f      	beq.n	80133da <ucdr_serialize_endian_uint32_t+0x10e>
 801333a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801333e:	70f3      	strb	r3, [r6, #3]
 8013340:	6923      	ldr	r3, [r4, #16]
 8013342:	2104      	movs	r1, #4
 8013344:	68a2      	ldr	r2, [r4, #8]
 8013346:	7da0      	ldrb	r0, [r4, #22]
 8013348:	3304      	adds	r3, #4
 801334a:	444a      	add	r2, r9
 801334c:	7561      	strb	r1, [r4, #21]
 801334e:	1bdb      	subs	r3, r3, r7
 8013350:	f080 0001 	eor.w	r0, r0, #1
 8013354:	60a2      	str	r2, [r4, #8]
 8013356:	6123      	str	r3, [r4, #16]
 8013358:	b003      	add	sp, #12
 801335a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801335e:	2104      	movs	r1, #4
 8013360:	4620      	mov	r0, r4
 8013362:	f000 ff27 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013366:	b1c8      	cbz	r0, 801339c <ucdr_serialize_endian_uint32_t+0xd0>
 8013368:	2d01      	cmp	r5, #1
 801336a:	68a3      	ldr	r3, [r4, #8]
 801336c:	d01c      	beq.n	80133a8 <ucdr_serialize_endian_uint32_t+0xdc>
 801336e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013372:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013376:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801337a:	7018      	strb	r0, [r3, #0]
 801337c:	68a3      	ldr	r3, [r4, #8]
 801337e:	705a      	strb	r2, [r3, #1]
 8013380:	68a3      	ldr	r3, [r4, #8]
 8013382:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013386:	7099      	strb	r1, [r3, #2]
 8013388:	68a3      	ldr	r3, [r4, #8]
 801338a:	70da      	strb	r2, [r3, #3]
 801338c:	2104      	movs	r1, #4
 801338e:	68a2      	ldr	r2, [r4, #8]
 8013390:	6923      	ldr	r3, [r4, #16]
 8013392:	440a      	add	r2, r1
 8013394:	7561      	strb	r1, [r4, #21]
 8013396:	440b      	add	r3, r1
 8013398:	60a2      	str	r2, [r4, #8]
 801339a:	6123      	str	r3, [r4, #16]
 801339c:	7da0      	ldrb	r0, [r4, #22]
 801339e:	f080 0001 	eor.w	r0, r0, #1
 80133a2:	b003      	add	sp, #12
 80133a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133a8:	9a01      	ldr	r2, [sp, #4]
 80133aa:	601a      	str	r2, [r3, #0]
 80133ac:	e7ee      	b.n	801338c <ucdr_serialize_endian_uint32_t+0xc0>
 80133ae:	68a2      	ldr	r2, [r4, #8]
 80133b0:	6923      	ldr	r3, [r4, #16]
 80133b2:	7da0      	ldrb	r0, [r4, #22]
 80133b4:	1bd2      	subs	r2, r2, r7
 80133b6:	1bdb      	subs	r3, r3, r7
 80133b8:	f884 8015 	strb.w	r8, [r4, #21]
 80133bc:	f080 0001 	eor.w	r0, r0, #1
 80133c0:	60a2      	str	r2, [r4, #8]
 80133c2:	6123      	str	r3, [r4, #16]
 80133c4:	b003      	add	sp, #12
 80133c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133ca:	68a3      	ldr	r3, [r4, #8]
 80133cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80133d0:	701a      	strb	r2, [r3, #0]
 80133d2:	68a3      	ldr	r3, [r4, #8]
 80133d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80133d8:	701a      	strb	r2, [r3, #0]
 80133da:	68a3      	ldr	r3, [r4, #8]
 80133dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80133e0:	701a      	strb	r2, [r3, #0]
 80133e2:	e7ad      	b.n	8013340 <ucdr_serialize_endian_uint32_t+0x74>
 80133e4:	ad01      	add	r5, sp, #4
 80133e6:	463a      	mov	r2, r7
 80133e8:	4630      	mov	r0, r6
 80133ea:	4629      	mov	r1, r5
 80133ec:	f00f f923 	bl	8022636 <memcpy>
 80133f0:	464a      	mov	r2, r9
 80133f2:	19e9      	adds	r1, r5, r7
 80133f4:	68a0      	ldr	r0, [r4, #8]
 80133f6:	f00f f91e 	bl	8022636 <memcpy>
 80133fa:	e7a1      	b.n	8013340 <ucdr_serialize_endian_uint32_t+0x74>

080133fc <ucdr_deserialize_uint32_t>:
 80133fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013400:	4604      	mov	r4, r0
 8013402:	460d      	mov	r5, r1
 8013404:	2104      	movs	r1, #4
 8013406:	f000 ff29 	bl	801425c <ucdr_buffer_alignment>
 801340a:	4601      	mov	r1, r0
 801340c:	4620      	mov	r0, r4
 801340e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013412:	f000 ff6b 	bl	80142ec <ucdr_advance_buffer>
 8013416:	2104      	movs	r1, #4
 8013418:	4620      	mov	r0, r4
 801341a:	f000 febf 	bl	801419c <ucdr_check_buffer_available_for>
 801341e:	2800      	cmp	r0, #0
 8013420:	d138      	bne.n	8013494 <ucdr_deserialize_uint32_t+0x98>
 8013422:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013426:	42b7      	cmp	r7, r6
 8013428:	d92f      	bls.n	801348a <ucdr_deserialize_uint32_t+0x8e>
 801342a:	6923      	ldr	r3, [r4, #16]
 801342c:	4620      	mov	r0, r4
 801342e:	60a7      	str	r7, [r4, #8]
 8013430:	1bbf      	subs	r7, r7, r6
 8013432:	443b      	add	r3, r7
 8013434:	f1c7 0904 	rsb	r9, r7, #4
 8013438:	6123      	str	r3, [r4, #16]
 801343a:	4649      	mov	r1, r9
 801343c:	f000 feba 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013440:	2800      	cmp	r0, #0
 8013442:	d046      	beq.n	80134d2 <ucdr_deserialize_uint32_t+0xd6>
 8013444:	7d23      	ldrb	r3, [r4, #20]
 8013446:	2b01      	cmp	r3, #1
 8013448:	d05c      	beq.n	8013504 <ucdr_deserialize_uint32_t+0x108>
 801344a:	78f3      	ldrb	r3, [r6, #3]
 801344c:	702b      	strb	r3, [r5, #0]
 801344e:	2f00      	cmp	r7, #0
 8013450:	d04c      	beq.n	80134ec <ucdr_deserialize_uint32_t+0xf0>
 8013452:	78b3      	ldrb	r3, [r6, #2]
 8013454:	2f01      	cmp	r7, #1
 8013456:	706b      	strb	r3, [r5, #1]
 8013458:	f105 0302 	add.w	r3, r5, #2
 801345c:	d04a      	beq.n	80134f4 <ucdr_deserialize_uint32_t+0xf8>
 801345e:	7873      	ldrb	r3, [r6, #1]
 8013460:	2f02      	cmp	r7, #2
 8013462:	70ab      	strb	r3, [r5, #2]
 8013464:	f105 0303 	add.w	r3, r5, #3
 8013468:	d048      	beq.n	80134fc <ucdr_deserialize_uint32_t+0x100>
 801346a:	7833      	ldrb	r3, [r6, #0]
 801346c:	70eb      	strb	r3, [r5, #3]
 801346e:	6923      	ldr	r3, [r4, #16]
 8013470:	2104      	movs	r1, #4
 8013472:	68a2      	ldr	r2, [r4, #8]
 8013474:	3304      	adds	r3, #4
 8013476:	7da0      	ldrb	r0, [r4, #22]
 8013478:	444a      	add	r2, r9
 801347a:	7561      	strb	r1, [r4, #21]
 801347c:	1bdb      	subs	r3, r3, r7
 801347e:	f080 0001 	eor.w	r0, r0, #1
 8013482:	60a2      	str	r2, [r4, #8]
 8013484:	6123      	str	r3, [r4, #16]
 8013486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801348a:	2104      	movs	r1, #4
 801348c:	4620      	mov	r0, r4
 801348e:	f000 fe91 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013492:	b1b0      	cbz	r0, 80134c2 <ucdr_deserialize_uint32_t+0xc6>
 8013494:	7d23      	ldrb	r3, [r4, #20]
 8013496:	2b01      	cmp	r3, #1
 8013498:	68a3      	ldr	r3, [r4, #8]
 801349a:	d017      	beq.n	80134cc <ucdr_deserialize_uint32_t+0xd0>
 801349c:	78db      	ldrb	r3, [r3, #3]
 801349e:	702b      	strb	r3, [r5, #0]
 80134a0:	68a3      	ldr	r3, [r4, #8]
 80134a2:	789b      	ldrb	r3, [r3, #2]
 80134a4:	706b      	strb	r3, [r5, #1]
 80134a6:	68a3      	ldr	r3, [r4, #8]
 80134a8:	785b      	ldrb	r3, [r3, #1]
 80134aa:	70ab      	strb	r3, [r5, #2]
 80134ac:	68a3      	ldr	r3, [r4, #8]
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	70eb      	strb	r3, [r5, #3]
 80134b2:	2104      	movs	r1, #4
 80134b4:	68a2      	ldr	r2, [r4, #8]
 80134b6:	6923      	ldr	r3, [r4, #16]
 80134b8:	440a      	add	r2, r1
 80134ba:	7561      	strb	r1, [r4, #21]
 80134bc:	440b      	add	r3, r1
 80134be:	60a2      	str	r2, [r4, #8]
 80134c0:	6123      	str	r3, [r4, #16]
 80134c2:	7da0      	ldrb	r0, [r4, #22]
 80134c4:	f080 0001 	eor.w	r0, r0, #1
 80134c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	602b      	str	r3, [r5, #0]
 80134d0:	e7ef      	b.n	80134b2 <ucdr_deserialize_uint32_t+0xb6>
 80134d2:	68a2      	ldr	r2, [r4, #8]
 80134d4:	6923      	ldr	r3, [r4, #16]
 80134d6:	1bd2      	subs	r2, r2, r7
 80134d8:	7da0      	ldrb	r0, [r4, #22]
 80134da:	1bdb      	subs	r3, r3, r7
 80134dc:	f884 8015 	strb.w	r8, [r4, #21]
 80134e0:	f080 0001 	eor.w	r0, r0, #1
 80134e4:	60a2      	str	r2, [r4, #8]
 80134e6:	6123      	str	r3, [r4, #16]
 80134e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ec:	68a3      	ldr	r3, [r4, #8]
 80134ee:	789b      	ldrb	r3, [r3, #2]
 80134f0:	706b      	strb	r3, [r5, #1]
 80134f2:	1cab      	adds	r3, r5, #2
 80134f4:	68a2      	ldr	r2, [r4, #8]
 80134f6:	7852      	ldrb	r2, [r2, #1]
 80134f8:	f803 2b01 	strb.w	r2, [r3], #1
 80134fc:	68a2      	ldr	r2, [r4, #8]
 80134fe:	7812      	ldrb	r2, [r2, #0]
 8013500:	701a      	strb	r2, [r3, #0]
 8013502:	e7b4      	b.n	801346e <ucdr_deserialize_uint32_t+0x72>
 8013504:	4631      	mov	r1, r6
 8013506:	463a      	mov	r2, r7
 8013508:	4628      	mov	r0, r5
 801350a:	f00f f894 	bl	8022636 <memcpy>
 801350e:	464a      	mov	r2, r9
 8013510:	19e8      	adds	r0, r5, r7
 8013512:	68a1      	ldr	r1, [r4, #8]
 8013514:	f00f f88f 	bl	8022636 <memcpy>
 8013518:	e7a9      	b.n	801346e <ucdr_deserialize_uint32_t+0x72>
 801351a:	bf00      	nop

0801351c <ucdr_deserialize_endian_uint32_t>:
 801351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013520:	4604      	mov	r4, r0
 8013522:	460e      	mov	r6, r1
 8013524:	2104      	movs	r1, #4
 8013526:	4615      	mov	r5, r2
 8013528:	f000 fe98 	bl	801425c <ucdr_buffer_alignment>
 801352c:	4601      	mov	r1, r0
 801352e:	4620      	mov	r0, r4
 8013530:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013534:	f000 feda 	bl	80142ec <ucdr_advance_buffer>
 8013538:	2104      	movs	r1, #4
 801353a:	4620      	mov	r0, r4
 801353c:	f000 fe2e 	bl	801419c <ucdr_check_buffer_available_for>
 8013540:	2800      	cmp	r0, #0
 8013542:	d13c      	bne.n	80135be <ucdr_deserialize_endian_uint32_t+0xa2>
 8013544:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013548:	42bb      	cmp	r3, r7
 801354a:	d933      	bls.n	80135b4 <ucdr_deserialize_endian_uint32_t+0x98>
 801354c:	eba3 0907 	sub.w	r9, r3, r7
 8013550:	60a3      	str	r3, [r4, #8]
 8013552:	6923      	ldr	r3, [r4, #16]
 8013554:	4620      	mov	r0, r4
 8013556:	f1c9 0a04 	rsb	sl, r9, #4
 801355a:	444b      	add	r3, r9
 801355c:	4651      	mov	r1, sl
 801355e:	6123      	str	r3, [r4, #16]
 8013560:	f000 fe28 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013564:	2800      	cmp	r0, #0
 8013566:	d048      	beq.n	80135fa <ucdr_deserialize_endian_uint32_t+0xde>
 8013568:	2e01      	cmp	r6, #1
 801356a:	d061      	beq.n	8013630 <ucdr_deserialize_endian_uint32_t+0x114>
 801356c:	78fb      	ldrb	r3, [r7, #3]
 801356e:	702b      	strb	r3, [r5, #0]
 8013570:	f1b9 0f00 	cmp.w	r9, #0
 8013574:	d050      	beq.n	8013618 <ucdr_deserialize_endian_uint32_t+0xfc>
 8013576:	78bb      	ldrb	r3, [r7, #2]
 8013578:	f1b9 0f01 	cmp.w	r9, #1
 801357c:	706b      	strb	r3, [r5, #1]
 801357e:	f105 0302 	add.w	r3, r5, #2
 8013582:	d04d      	beq.n	8013620 <ucdr_deserialize_endian_uint32_t+0x104>
 8013584:	787b      	ldrb	r3, [r7, #1]
 8013586:	f1b9 0f02 	cmp.w	r9, #2
 801358a:	70ab      	strb	r3, [r5, #2]
 801358c:	f105 0303 	add.w	r3, r5, #3
 8013590:	d04a      	beq.n	8013628 <ucdr_deserialize_endian_uint32_t+0x10c>
 8013592:	783b      	ldrb	r3, [r7, #0]
 8013594:	70eb      	strb	r3, [r5, #3]
 8013596:	6923      	ldr	r3, [r4, #16]
 8013598:	2104      	movs	r1, #4
 801359a:	68a2      	ldr	r2, [r4, #8]
 801359c:	3304      	adds	r3, #4
 801359e:	7da0      	ldrb	r0, [r4, #22]
 80135a0:	4452      	add	r2, sl
 80135a2:	7561      	strb	r1, [r4, #21]
 80135a4:	eba3 0309 	sub.w	r3, r3, r9
 80135a8:	f080 0001 	eor.w	r0, r0, #1
 80135ac:	60a2      	str	r2, [r4, #8]
 80135ae:	6123      	str	r3, [r4, #16]
 80135b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135b4:	2104      	movs	r1, #4
 80135b6:	4620      	mov	r0, r4
 80135b8:	f000 fdfc 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 80135bc:	b1a8      	cbz	r0, 80135ea <ucdr_deserialize_endian_uint32_t+0xce>
 80135be:	2e01      	cmp	r6, #1
 80135c0:	68a3      	ldr	r3, [r4, #8]
 80135c2:	d017      	beq.n	80135f4 <ucdr_deserialize_endian_uint32_t+0xd8>
 80135c4:	78db      	ldrb	r3, [r3, #3]
 80135c6:	702b      	strb	r3, [r5, #0]
 80135c8:	68a3      	ldr	r3, [r4, #8]
 80135ca:	789b      	ldrb	r3, [r3, #2]
 80135cc:	706b      	strb	r3, [r5, #1]
 80135ce:	68a3      	ldr	r3, [r4, #8]
 80135d0:	785b      	ldrb	r3, [r3, #1]
 80135d2:	70ab      	strb	r3, [r5, #2]
 80135d4:	68a3      	ldr	r3, [r4, #8]
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	70eb      	strb	r3, [r5, #3]
 80135da:	2104      	movs	r1, #4
 80135dc:	68a2      	ldr	r2, [r4, #8]
 80135de:	6923      	ldr	r3, [r4, #16]
 80135e0:	440a      	add	r2, r1
 80135e2:	7561      	strb	r1, [r4, #21]
 80135e4:	440b      	add	r3, r1
 80135e6:	60a2      	str	r2, [r4, #8]
 80135e8:	6123      	str	r3, [r4, #16]
 80135ea:	7da0      	ldrb	r0, [r4, #22]
 80135ec:	f080 0001 	eor.w	r0, r0, #1
 80135f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	602b      	str	r3, [r5, #0]
 80135f8:	e7ef      	b.n	80135da <ucdr_deserialize_endian_uint32_t+0xbe>
 80135fa:	68a2      	ldr	r2, [r4, #8]
 80135fc:	6923      	ldr	r3, [r4, #16]
 80135fe:	eba2 0209 	sub.w	r2, r2, r9
 8013602:	7da0      	ldrb	r0, [r4, #22]
 8013604:	eba3 0309 	sub.w	r3, r3, r9
 8013608:	f884 8015 	strb.w	r8, [r4, #21]
 801360c:	f080 0001 	eor.w	r0, r0, #1
 8013610:	60a2      	str	r2, [r4, #8]
 8013612:	6123      	str	r3, [r4, #16]
 8013614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013618:	68a3      	ldr	r3, [r4, #8]
 801361a:	789b      	ldrb	r3, [r3, #2]
 801361c:	706b      	strb	r3, [r5, #1]
 801361e:	1cab      	adds	r3, r5, #2
 8013620:	68a2      	ldr	r2, [r4, #8]
 8013622:	7852      	ldrb	r2, [r2, #1]
 8013624:	f803 2b01 	strb.w	r2, [r3], #1
 8013628:	68a2      	ldr	r2, [r4, #8]
 801362a:	7812      	ldrb	r2, [r2, #0]
 801362c:	701a      	strb	r2, [r3, #0]
 801362e:	e7b2      	b.n	8013596 <ucdr_deserialize_endian_uint32_t+0x7a>
 8013630:	4639      	mov	r1, r7
 8013632:	464a      	mov	r2, r9
 8013634:	4628      	mov	r0, r5
 8013636:	f00e fffe 	bl	8022636 <memcpy>
 801363a:	4652      	mov	r2, sl
 801363c:	eb05 0009 	add.w	r0, r5, r9
 8013640:	68a1      	ldr	r1, [r4, #8]
 8013642:	f00e fff8 	bl	8022636 <memcpy>
 8013646:	e7a6      	b.n	8013596 <ucdr_deserialize_endian_uint32_t+0x7a>

08013648 <ucdr_serialize_uint64_t>:
 8013648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801364c:	4604      	mov	r4, r0
 801364e:	b082      	sub	sp, #8
 8013650:	2108      	movs	r1, #8
 8013652:	e9cd 2300 	strd	r2, r3, [sp]
 8013656:	f000 fe01 	bl	801425c <ucdr_buffer_alignment>
 801365a:	4601      	mov	r1, r0
 801365c:	4620      	mov	r0, r4
 801365e:	7d67      	ldrb	r7, [r4, #21]
 8013660:	f000 fe44 	bl	80142ec <ucdr_advance_buffer>
 8013664:	2108      	movs	r1, #8
 8013666:	4620      	mov	r0, r4
 8013668:	f000 fd98 	bl	801419c <ucdr_check_buffer_available_for>
 801366c:	2800      	cmp	r0, #0
 801366e:	d14e      	bne.n	801370e <ucdr_serialize_uint64_t+0xc6>
 8013670:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013674:	42ab      	cmp	r3, r5
 8013676:	d945      	bls.n	8013704 <ucdr_serialize_uint64_t+0xbc>
 8013678:	1b5e      	subs	r6, r3, r5
 801367a:	60a3      	str	r3, [r4, #8]
 801367c:	6923      	ldr	r3, [r4, #16]
 801367e:	4620      	mov	r0, r4
 8013680:	f1c6 0808 	rsb	r8, r6, #8
 8013684:	4433      	add	r3, r6
 8013686:	4641      	mov	r1, r8
 8013688:	6123      	str	r3, [r4, #16]
 801368a:	f000 fd93 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 801368e:	2800      	cmp	r0, #0
 8013690:	d074      	beq.n	801377c <ucdr_serialize_uint64_t+0x134>
 8013692:	7d23      	ldrb	r3, [r4, #20]
 8013694:	2b01      	cmp	r3, #1
 8013696:	f000 809b 	beq.w	80137d0 <ucdr_serialize_uint64_t+0x188>
 801369a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801369e:	702b      	strb	r3, [r5, #0]
 80136a0:	2e00      	cmp	r6, #0
 80136a2:	d078      	beq.n	8013796 <ucdr_serialize_uint64_t+0x14e>
 80136a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80136a8:	2e01      	cmp	r6, #1
 80136aa:	706b      	strb	r3, [r5, #1]
 80136ac:	d077      	beq.n	801379e <ucdr_serialize_uint64_t+0x156>
 80136ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80136b2:	2e02      	cmp	r6, #2
 80136b4:	70ab      	strb	r3, [r5, #2]
 80136b6:	d076      	beq.n	80137a6 <ucdr_serialize_uint64_t+0x15e>
 80136b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80136bc:	2e03      	cmp	r6, #3
 80136be:	70eb      	strb	r3, [r5, #3]
 80136c0:	d075      	beq.n	80137ae <ucdr_serialize_uint64_t+0x166>
 80136c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80136c6:	2e04      	cmp	r6, #4
 80136c8:	712b      	strb	r3, [r5, #4]
 80136ca:	d074      	beq.n	80137b6 <ucdr_serialize_uint64_t+0x16e>
 80136cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80136d0:	2e05      	cmp	r6, #5
 80136d2:	716b      	strb	r3, [r5, #5]
 80136d4:	d073      	beq.n	80137be <ucdr_serialize_uint64_t+0x176>
 80136d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80136da:	2e06      	cmp	r6, #6
 80136dc:	71ab      	strb	r3, [r5, #6]
 80136de:	d072      	beq.n	80137c6 <ucdr_serialize_uint64_t+0x17e>
 80136e0:	f89d 3000 	ldrb.w	r3, [sp]
 80136e4:	71eb      	strb	r3, [r5, #7]
 80136e6:	6923      	ldr	r3, [r4, #16]
 80136e8:	2108      	movs	r1, #8
 80136ea:	68a2      	ldr	r2, [r4, #8]
 80136ec:	3308      	adds	r3, #8
 80136ee:	7da0      	ldrb	r0, [r4, #22]
 80136f0:	4442      	add	r2, r8
 80136f2:	7561      	strb	r1, [r4, #21]
 80136f4:	1b9e      	subs	r6, r3, r6
 80136f6:	f080 0001 	eor.w	r0, r0, #1
 80136fa:	60a2      	str	r2, [r4, #8]
 80136fc:	6126      	str	r6, [r4, #16]
 80136fe:	b002      	add	sp, #8
 8013700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013704:	2108      	movs	r1, #8
 8013706:	4620      	mov	r0, r4
 8013708:	f000 fd54 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 801370c:	b350      	cbz	r0, 8013764 <ucdr_serialize_uint64_t+0x11c>
 801370e:	7d23      	ldrb	r3, [r4, #20]
 8013710:	2b01      	cmp	r3, #1
 8013712:	d02d      	beq.n	8013770 <ucdr_serialize_uint64_t+0x128>
 8013714:	68a3      	ldr	r3, [r4, #8]
 8013716:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801371a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801371e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013722:	7018      	strb	r0, [r3, #0]
 8013724:	68a3      	ldr	r3, [r4, #8]
 8013726:	705a      	strb	r2, [r3, #1]
 8013728:	68a3      	ldr	r3, [r4, #8]
 801372a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801372e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013732:	7099      	strb	r1, [r3, #2]
 8013734:	68a3      	ldr	r3, [r4, #8]
 8013736:	70da      	strb	r2, [r3, #3]
 8013738:	68a3      	ldr	r3, [r4, #8]
 801373a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801373e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013742:	7118      	strb	r0, [r3, #4]
 8013744:	68a3      	ldr	r3, [r4, #8]
 8013746:	715a      	strb	r2, [r3, #5]
 8013748:	68a3      	ldr	r3, [r4, #8]
 801374a:	f89d 2000 	ldrb.w	r2, [sp]
 801374e:	7199      	strb	r1, [r3, #6]
 8013750:	68a3      	ldr	r3, [r4, #8]
 8013752:	71da      	strb	r2, [r3, #7]
 8013754:	2108      	movs	r1, #8
 8013756:	68a2      	ldr	r2, [r4, #8]
 8013758:	6923      	ldr	r3, [r4, #16]
 801375a:	440a      	add	r2, r1
 801375c:	7561      	strb	r1, [r4, #21]
 801375e:	440b      	add	r3, r1
 8013760:	60a2      	str	r2, [r4, #8]
 8013762:	6123      	str	r3, [r4, #16]
 8013764:	7da0      	ldrb	r0, [r4, #22]
 8013766:	f080 0001 	eor.w	r0, r0, #1
 801376a:	b002      	add	sp, #8
 801376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013770:	466b      	mov	r3, sp
 8013772:	68a2      	ldr	r2, [r4, #8]
 8013774:	cb03      	ldmia	r3!, {r0, r1}
 8013776:	6010      	str	r0, [r2, #0]
 8013778:	6051      	str	r1, [r2, #4]
 801377a:	e7eb      	b.n	8013754 <ucdr_serialize_uint64_t+0x10c>
 801377c:	68a2      	ldr	r2, [r4, #8]
 801377e:	6923      	ldr	r3, [r4, #16]
 8013780:	7da0      	ldrb	r0, [r4, #22]
 8013782:	1b92      	subs	r2, r2, r6
 8013784:	1b9b      	subs	r3, r3, r6
 8013786:	7567      	strb	r7, [r4, #21]
 8013788:	f080 0001 	eor.w	r0, r0, #1
 801378c:	60a2      	str	r2, [r4, #8]
 801378e:	6123      	str	r3, [r4, #16]
 8013790:	b002      	add	sp, #8
 8013792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013796:	68a3      	ldr	r3, [r4, #8]
 8013798:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801379c:	701a      	strb	r2, [r3, #0]
 801379e:	68a3      	ldr	r3, [r4, #8]
 80137a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80137a4:	701a      	strb	r2, [r3, #0]
 80137a6:	68a3      	ldr	r3, [r4, #8]
 80137a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80137ac:	701a      	strb	r2, [r3, #0]
 80137ae:	68a3      	ldr	r3, [r4, #8]
 80137b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80137b4:	701a      	strb	r2, [r3, #0]
 80137b6:	68a3      	ldr	r3, [r4, #8]
 80137b8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80137bc:	701a      	strb	r2, [r3, #0]
 80137be:	68a3      	ldr	r3, [r4, #8]
 80137c0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80137c4:	701a      	strb	r2, [r3, #0]
 80137c6:	68a3      	ldr	r3, [r4, #8]
 80137c8:	f89d 2000 	ldrb.w	r2, [sp]
 80137cc:	701a      	strb	r2, [r3, #0]
 80137ce:	e78a      	b.n	80136e6 <ucdr_serialize_uint64_t+0x9e>
 80137d0:	4628      	mov	r0, r5
 80137d2:	466d      	mov	r5, sp
 80137d4:	4632      	mov	r2, r6
 80137d6:	4629      	mov	r1, r5
 80137d8:	f00e ff2d 	bl	8022636 <memcpy>
 80137dc:	4642      	mov	r2, r8
 80137de:	19a9      	adds	r1, r5, r6
 80137e0:	68a0      	ldr	r0, [r4, #8]
 80137e2:	f00e ff28 	bl	8022636 <memcpy>
 80137e6:	e77e      	b.n	80136e6 <ucdr_serialize_uint64_t+0x9e>

080137e8 <ucdr_serialize_int16_t>:
 80137e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ec:	460b      	mov	r3, r1
 80137ee:	b082      	sub	sp, #8
 80137f0:	4604      	mov	r4, r0
 80137f2:	2102      	movs	r1, #2
 80137f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80137f8:	f000 fd30 	bl	801425c <ucdr_buffer_alignment>
 80137fc:	4601      	mov	r1, r0
 80137fe:	4620      	mov	r0, r4
 8013800:	7d67      	ldrb	r7, [r4, #21]
 8013802:	f000 fd73 	bl	80142ec <ucdr_advance_buffer>
 8013806:	2102      	movs	r1, #2
 8013808:	4620      	mov	r0, r4
 801380a:	f000 fcc7 	bl	801419c <ucdr_check_buffer_available_for>
 801380e:	bb78      	cbnz	r0, 8013870 <ucdr_serialize_int16_t+0x88>
 8013810:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013814:	42ab      	cmp	r3, r5
 8013816:	d926      	bls.n	8013866 <ucdr_serialize_int16_t+0x7e>
 8013818:	1b5e      	subs	r6, r3, r5
 801381a:	60a3      	str	r3, [r4, #8]
 801381c:	6923      	ldr	r3, [r4, #16]
 801381e:	4620      	mov	r0, r4
 8013820:	f1c6 0802 	rsb	r8, r6, #2
 8013824:	4433      	add	r3, r6
 8013826:	4641      	mov	r1, r8
 8013828:	6123      	str	r3, [r4, #16]
 801382a:	f000 fcc3 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 801382e:	2800      	cmp	r0, #0
 8013830:	d03b      	beq.n	80138aa <ucdr_serialize_int16_t+0xc2>
 8013832:	7d23      	ldrb	r3, [r4, #20]
 8013834:	2b01      	cmp	r3, #1
 8013836:	d04a      	beq.n	80138ce <ucdr_serialize_int16_t+0xe6>
 8013838:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801383c:	702b      	strb	r3, [r5, #0]
 801383e:	2e00      	cmp	r6, #0
 8013840:	d040      	beq.n	80138c4 <ucdr_serialize_int16_t+0xdc>
 8013842:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013846:	706b      	strb	r3, [r5, #1]
 8013848:	6923      	ldr	r3, [r4, #16]
 801384a:	2102      	movs	r1, #2
 801384c:	68a2      	ldr	r2, [r4, #8]
 801384e:	3302      	adds	r3, #2
 8013850:	7da0      	ldrb	r0, [r4, #22]
 8013852:	4442      	add	r2, r8
 8013854:	7561      	strb	r1, [r4, #21]
 8013856:	1b9e      	subs	r6, r3, r6
 8013858:	f080 0001 	eor.w	r0, r0, #1
 801385c:	60a2      	str	r2, [r4, #8]
 801385e:	6126      	str	r6, [r4, #16]
 8013860:	b002      	add	sp, #8
 8013862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013866:	2102      	movs	r1, #2
 8013868:	4620      	mov	r0, r4
 801386a:	f000 fca3 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 801386e:	b190      	cbz	r0, 8013896 <ucdr_serialize_int16_t+0xae>
 8013870:	7d23      	ldrb	r3, [r4, #20]
 8013872:	2b01      	cmp	r3, #1
 8013874:	68a3      	ldr	r3, [r4, #8]
 8013876:	d014      	beq.n	80138a2 <ucdr_serialize_int16_t+0xba>
 8013878:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801387c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013880:	7019      	strb	r1, [r3, #0]
 8013882:	68a3      	ldr	r3, [r4, #8]
 8013884:	705a      	strb	r2, [r3, #1]
 8013886:	2102      	movs	r1, #2
 8013888:	68a2      	ldr	r2, [r4, #8]
 801388a:	6923      	ldr	r3, [r4, #16]
 801388c:	440a      	add	r2, r1
 801388e:	7561      	strb	r1, [r4, #21]
 8013890:	440b      	add	r3, r1
 8013892:	60a2      	str	r2, [r4, #8]
 8013894:	6123      	str	r3, [r4, #16]
 8013896:	7da0      	ldrb	r0, [r4, #22]
 8013898:	f080 0001 	eor.w	r0, r0, #1
 801389c:	b002      	add	sp, #8
 801389e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80138a6:	801a      	strh	r2, [r3, #0]
 80138a8:	e7ed      	b.n	8013886 <ucdr_serialize_int16_t+0x9e>
 80138aa:	68a2      	ldr	r2, [r4, #8]
 80138ac:	6923      	ldr	r3, [r4, #16]
 80138ae:	7da0      	ldrb	r0, [r4, #22]
 80138b0:	1b92      	subs	r2, r2, r6
 80138b2:	1b9b      	subs	r3, r3, r6
 80138b4:	7567      	strb	r7, [r4, #21]
 80138b6:	f080 0001 	eor.w	r0, r0, #1
 80138ba:	60a2      	str	r2, [r4, #8]
 80138bc:	6123      	str	r3, [r4, #16]
 80138be:	b002      	add	sp, #8
 80138c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c4:	68a3      	ldr	r3, [r4, #8]
 80138c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80138ca:	701a      	strb	r2, [r3, #0]
 80138cc:	e7bc      	b.n	8013848 <ucdr_serialize_int16_t+0x60>
 80138ce:	4628      	mov	r0, r5
 80138d0:	f10d 0506 	add.w	r5, sp, #6
 80138d4:	4632      	mov	r2, r6
 80138d6:	4629      	mov	r1, r5
 80138d8:	f00e fead 	bl	8022636 <memcpy>
 80138dc:	4642      	mov	r2, r8
 80138de:	19a9      	adds	r1, r5, r6
 80138e0:	68a0      	ldr	r0, [r4, #8]
 80138e2:	f00e fea8 	bl	8022636 <memcpy>
 80138e6:	e7af      	b.n	8013848 <ucdr_serialize_int16_t+0x60>

080138e8 <ucdr_deserialize_int16_t>:
 80138e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138ec:	4604      	mov	r4, r0
 80138ee:	460d      	mov	r5, r1
 80138f0:	2102      	movs	r1, #2
 80138f2:	f000 fcb3 	bl	801425c <ucdr_buffer_alignment>
 80138f6:	4601      	mov	r1, r0
 80138f8:	4620      	mov	r0, r4
 80138fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80138fe:	f000 fcf5 	bl	80142ec <ucdr_advance_buffer>
 8013902:	2102      	movs	r1, #2
 8013904:	4620      	mov	r0, r4
 8013906:	f000 fc49 	bl	801419c <ucdr_check_buffer_available_for>
 801390a:	bb60      	cbnz	r0, 8013966 <ucdr_deserialize_int16_t+0x7e>
 801390c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013910:	42be      	cmp	r6, r7
 8013912:	d923      	bls.n	801395c <ucdr_deserialize_int16_t+0x74>
 8013914:	6923      	ldr	r3, [r4, #16]
 8013916:	4620      	mov	r0, r4
 8013918:	60a6      	str	r6, [r4, #8]
 801391a:	1bf6      	subs	r6, r6, r7
 801391c:	4433      	add	r3, r6
 801391e:	f1c6 0902 	rsb	r9, r6, #2
 8013922:	6123      	str	r3, [r4, #16]
 8013924:	4649      	mov	r1, r9
 8013926:	f000 fc45 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 801392a:	2800      	cmp	r0, #0
 801392c:	d034      	beq.n	8013998 <ucdr_deserialize_int16_t+0xb0>
 801392e:	7d23      	ldrb	r3, [r4, #20]
 8013930:	2b01      	cmp	r3, #1
 8013932:	d042      	beq.n	80139ba <ucdr_deserialize_int16_t+0xd2>
 8013934:	787b      	ldrb	r3, [r7, #1]
 8013936:	702b      	strb	r3, [r5, #0]
 8013938:	2e00      	cmp	r6, #0
 801393a:	d03a      	beq.n	80139b2 <ucdr_deserialize_int16_t+0xca>
 801393c:	783b      	ldrb	r3, [r7, #0]
 801393e:	706b      	strb	r3, [r5, #1]
 8013940:	6923      	ldr	r3, [r4, #16]
 8013942:	2102      	movs	r1, #2
 8013944:	68a2      	ldr	r2, [r4, #8]
 8013946:	3302      	adds	r3, #2
 8013948:	7da0      	ldrb	r0, [r4, #22]
 801394a:	444a      	add	r2, r9
 801394c:	7561      	strb	r1, [r4, #21]
 801394e:	1b9b      	subs	r3, r3, r6
 8013950:	f080 0001 	eor.w	r0, r0, #1
 8013954:	60a2      	str	r2, [r4, #8]
 8013956:	6123      	str	r3, [r4, #16]
 8013958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801395c:	2102      	movs	r1, #2
 801395e:	4620      	mov	r0, r4
 8013960:	f000 fc28 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013964:	b180      	cbz	r0, 8013988 <ucdr_deserialize_int16_t+0xa0>
 8013966:	7d23      	ldrb	r3, [r4, #20]
 8013968:	2b01      	cmp	r3, #1
 801396a:	68a3      	ldr	r3, [r4, #8]
 801396c:	d011      	beq.n	8013992 <ucdr_deserialize_int16_t+0xaa>
 801396e:	785b      	ldrb	r3, [r3, #1]
 8013970:	702b      	strb	r3, [r5, #0]
 8013972:	68a3      	ldr	r3, [r4, #8]
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	706b      	strb	r3, [r5, #1]
 8013978:	2102      	movs	r1, #2
 801397a:	68a2      	ldr	r2, [r4, #8]
 801397c:	6923      	ldr	r3, [r4, #16]
 801397e:	440a      	add	r2, r1
 8013980:	7561      	strb	r1, [r4, #21]
 8013982:	440b      	add	r3, r1
 8013984:	60a2      	str	r2, [r4, #8]
 8013986:	6123      	str	r3, [r4, #16]
 8013988:	7da0      	ldrb	r0, [r4, #22]
 801398a:	f080 0001 	eor.w	r0, r0, #1
 801398e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013992:	881b      	ldrh	r3, [r3, #0]
 8013994:	802b      	strh	r3, [r5, #0]
 8013996:	e7ef      	b.n	8013978 <ucdr_deserialize_int16_t+0x90>
 8013998:	68a2      	ldr	r2, [r4, #8]
 801399a:	6923      	ldr	r3, [r4, #16]
 801399c:	1b92      	subs	r2, r2, r6
 801399e:	7da0      	ldrb	r0, [r4, #22]
 80139a0:	1b9b      	subs	r3, r3, r6
 80139a2:	f884 8015 	strb.w	r8, [r4, #21]
 80139a6:	f080 0001 	eor.w	r0, r0, #1
 80139aa:	60a2      	str	r2, [r4, #8]
 80139ac:	6123      	str	r3, [r4, #16]
 80139ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b2:	68a3      	ldr	r3, [r4, #8]
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	706b      	strb	r3, [r5, #1]
 80139b8:	e7c2      	b.n	8013940 <ucdr_deserialize_int16_t+0x58>
 80139ba:	4639      	mov	r1, r7
 80139bc:	4632      	mov	r2, r6
 80139be:	4628      	mov	r0, r5
 80139c0:	f00e fe39 	bl	8022636 <memcpy>
 80139c4:	464a      	mov	r2, r9
 80139c6:	19a8      	adds	r0, r5, r6
 80139c8:	68a1      	ldr	r1, [r4, #8]
 80139ca:	f00e fe34 	bl	8022636 <memcpy>
 80139ce:	e7b7      	b.n	8013940 <ucdr_deserialize_int16_t+0x58>

080139d0 <ucdr_serialize_int32_t>:
 80139d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d4:	b082      	sub	sp, #8
 80139d6:	4604      	mov	r4, r0
 80139d8:	9101      	str	r1, [sp, #4]
 80139da:	2104      	movs	r1, #4
 80139dc:	f000 fc3e 	bl	801425c <ucdr_buffer_alignment>
 80139e0:	4601      	mov	r1, r0
 80139e2:	4620      	mov	r0, r4
 80139e4:	7d67      	ldrb	r7, [r4, #21]
 80139e6:	f000 fc81 	bl	80142ec <ucdr_advance_buffer>
 80139ea:	2104      	movs	r1, #4
 80139ec:	4620      	mov	r0, r4
 80139ee:	f000 fbd5 	bl	801419c <ucdr_check_buffer_available_for>
 80139f2:	2800      	cmp	r0, #0
 80139f4:	d139      	bne.n	8013a6a <ucdr_serialize_int32_t+0x9a>
 80139f6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80139fa:	42ab      	cmp	r3, r5
 80139fc:	d930      	bls.n	8013a60 <ucdr_serialize_int32_t+0x90>
 80139fe:	1b5e      	subs	r6, r3, r5
 8013a00:	60a3      	str	r3, [r4, #8]
 8013a02:	6923      	ldr	r3, [r4, #16]
 8013a04:	4620      	mov	r0, r4
 8013a06:	f1c6 0804 	rsb	r8, r6, #4
 8013a0a:	4433      	add	r3, r6
 8013a0c:	4641      	mov	r1, r8
 8013a0e:	6123      	str	r3, [r4, #16]
 8013a10:	f000 fbd0 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	d04c      	beq.n	8013ab2 <ucdr_serialize_int32_t+0xe2>
 8013a18:	7d23      	ldrb	r3, [r4, #20]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d063      	beq.n	8013ae6 <ucdr_serialize_int32_t+0x116>
 8013a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013a22:	702b      	strb	r3, [r5, #0]
 8013a24:	2e00      	cmp	r6, #0
 8013a26:	d051      	beq.n	8013acc <ucdr_serialize_int32_t+0xfc>
 8013a28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013a2c:	2e01      	cmp	r6, #1
 8013a2e:	706b      	strb	r3, [r5, #1]
 8013a30:	d050      	beq.n	8013ad4 <ucdr_serialize_int32_t+0x104>
 8013a32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013a36:	2e02      	cmp	r6, #2
 8013a38:	70ab      	strb	r3, [r5, #2]
 8013a3a:	d04f      	beq.n	8013adc <ucdr_serialize_int32_t+0x10c>
 8013a3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013a40:	70eb      	strb	r3, [r5, #3]
 8013a42:	6923      	ldr	r3, [r4, #16]
 8013a44:	2104      	movs	r1, #4
 8013a46:	68a2      	ldr	r2, [r4, #8]
 8013a48:	3304      	adds	r3, #4
 8013a4a:	7da0      	ldrb	r0, [r4, #22]
 8013a4c:	4442      	add	r2, r8
 8013a4e:	7561      	strb	r1, [r4, #21]
 8013a50:	1b9e      	subs	r6, r3, r6
 8013a52:	f080 0001 	eor.w	r0, r0, #1
 8013a56:	60a2      	str	r2, [r4, #8]
 8013a58:	6126      	str	r6, [r4, #16]
 8013a5a:	b002      	add	sp, #8
 8013a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a60:	2104      	movs	r1, #4
 8013a62:	4620      	mov	r0, r4
 8013a64:	f000 fba6 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013a68:	b1d0      	cbz	r0, 8013aa0 <ucdr_serialize_int32_t+0xd0>
 8013a6a:	7d23      	ldrb	r3, [r4, #20]
 8013a6c:	2b01      	cmp	r3, #1
 8013a6e:	68a3      	ldr	r3, [r4, #8]
 8013a70:	d01c      	beq.n	8013aac <ucdr_serialize_int32_t+0xdc>
 8013a72:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013a76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a7a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013a7e:	7018      	strb	r0, [r3, #0]
 8013a80:	68a3      	ldr	r3, [r4, #8]
 8013a82:	705a      	strb	r2, [r3, #1]
 8013a84:	68a3      	ldr	r3, [r4, #8]
 8013a86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013a8a:	7099      	strb	r1, [r3, #2]
 8013a8c:	68a3      	ldr	r3, [r4, #8]
 8013a8e:	70da      	strb	r2, [r3, #3]
 8013a90:	2104      	movs	r1, #4
 8013a92:	68a2      	ldr	r2, [r4, #8]
 8013a94:	6923      	ldr	r3, [r4, #16]
 8013a96:	440a      	add	r2, r1
 8013a98:	7561      	strb	r1, [r4, #21]
 8013a9a:	440b      	add	r3, r1
 8013a9c:	60a2      	str	r2, [r4, #8]
 8013a9e:	6123      	str	r3, [r4, #16]
 8013aa0:	7da0      	ldrb	r0, [r4, #22]
 8013aa2:	f080 0001 	eor.w	r0, r0, #1
 8013aa6:	b002      	add	sp, #8
 8013aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aac:	9a01      	ldr	r2, [sp, #4]
 8013aae:	601a      	str	r2, [r3, #0]
 8013ab0:	e7ee      	b.n	8013a90 <ucdr_serialize_int32_t+0xc0>
 8013ab2:	68a2      	ldr	r2, [r4, #8]
 8013ab4:	6923      	ldr	r3, [r4, #16]
 8013ab6:	7da0      	ldrb	r0, [r4, #22]
 8013ab8:	1b92      	subs	r2, r2, r6
 8013aba:	1b9b      	subs	r3, r3, r6
 8013abc:	7567      	strb	r7, [r4, #21]
 8013abe:	f080 0001 	eor.w	r0, r0, #1
 8013ac2:	60a2      	str	r2, [r4, #8]
 8013ac4:	6123      	str	r3, [r4, #16]
 8013ac6:	b002      	add	sp, #8
 8013ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013acc:	68a3      	ldr	r3, [r4, #8]
 8013ace:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013ad2:	701a      	strb	r2, [r3, #0]
 8013ad4:	68a3      	ldr	r3, [r4, #8]
 8013ad6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013ada:	701a      	strb	r2, [r3, #0]
 8013adc:	68a3      	ldr	r3, [r4, #8]
 8013ade:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013ae2:	701a      	strb	r2, [r3, #0]
 8013ae4:	e7ad      	b.n	8013a42 <ucdr_serialize_int32_t+0x72>
 8013ae6:	4628      	mov	r0, r5
 8013ae8:	ad01      	add	r5, sp, #4
 8013aea:	4632      	mov	r2, r6
 8013aec:	4629      	mov	r1, r5
 8013aee:	f00e fda2 	bl	8022636 <memcpy>
 8013af2:	4642      	mov	r2, r8
 8013af4:	19a9      	adds	r1, r5, r6
 8013af6:	68a0      	ldr	r0, [r4, #8]
 8013af8:	f00e fd9d 	bl	8022636 <memcpy>
 8013afc:	e7a1      	b.n	8013a42 <ucdr_serialize_int32_t+0x72>
 8013afe:	bf00      	nop

08013b00 <ucdr_deserialize_int32_t>:
 8013b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b04:	4604      	mov	r4, r0
 8013b06:	460d      	mov	r5, r1
 8013b08:	2104      	movs	r1, #4
 8013b0a:	f000 fba7 	bl	801425c <ucdr_buffer_alignment>
 8013b0e:	4601      	mov	r1, r0
 8013b10:	4620      	mov	r0, r4
 8013b12:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013b16:	f000 fbe9 	bl	80142ec <ucdr_advance_buffer>
 8013b1a:	2104      	movs	r1, #4
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	f000 fb3d 	bl	801419c <ucdr_check_buffer_available_for>
 8013b22:	2800      	cmp	r0, #0
 8013b24:	d138      	bne.n	8013b98 <ucdr_deserialize_int32_t+0x98>
 8013b26:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013b2a:	42b7      	cmp	r7, r6
 8013b2c:	d92f      	bls.n	8013b8e <ucdr_deserialize_int32_t+0x8e>
 8013b2e:	6923      	ldr	r3, [r4, #16]
 8013b30:	4620      	mov	r0, r4
 8013b32:	60a7      	str	r7, [r4, #8]
 8013b34:	1bbf      	subs	r7, r7, r6
 8013b36:	443b      	add	r3, r7
 8013b38:	f1c7 0904 	rsb	r9, r7, #4
 8013b3c:	6123      	str	r3, [r4, #16]
 8013b3e:	4649      	mov	r1, r9
 8013b40:	f000 fb38 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	d046      	beq.n	8013bd6 <ucdr_deserialize_int32_t+0xd6>
 8013b48:	7d23      	ldrb	r3, [r4, #20]
 8013b4a:	2b01      	cmp	r3, #1
 8013b4c:	d05c      	beq.n	8013c08 <ucdr_deserialize_int32_t+0x108>
 8013b4e:	78f3      	ldrb	r3, [r6, #3]
 8013b50:	702b      	strb	r3, [r5, #0]
 8013b52:	2f00      	cmp	r7, #0
 8013b54:	d04c      	beq.n	8013bf0 <ucdr_deserialize_int32_t+0xf0>
 8013b56:	78b3      	ldrb	r3, [r6, #2]
 8013b58:	2f01      	cmp	r7, #1
 8013b5a:	706b      	strb	r3, [r5, #1]
 8013b5c:	f105 0302 	add.w	r3, r5, #2
 8013b60:	d04a      	beq.n	8013bf8 <ucdr_deserialize_int32_t+0xf8>
 8013b62:	7873      	ldrb	r3, [r6, #1]
 8013b64:	2f02      	cmp	r7, #2
 8013b66:	70ab      	strb	r3, [r5, #2]
 8013b68:	f105 0303 	add.w	r3, r5, #3
 8013b6c:	d048      	beq.n	8013c00 <ucdr_deserialize_int32_t+0x100>
 8013b6e:	7833      	ldrb	r3, [r6, #0]
 8013b70:	70eb      	strb	r3, [r5, #3]
 8013b72:	6923      	ldr	r3, [r4, #16]
 8013b74:	2104      	movs	r1, #4
 8013b76:	68a2      	ldr	r2, [r4, #8]
 8013b78:	3304      	adds	r3, #4
 8013b7a:	7da0      	ldrb	r0, [r4, #22]
 8013b7c:	444a      	add	r2, r9
 8013b7e:	7561      	strb	r1, [r4, #21]
 8013b80:	1bdb      	subs	r3, r3, r7
 8013b82:	f080 0001 	eor.w	r0, r0, #1
 8013b86:	60a2      	str	r2, [r4, #8]
 8013b88:	6123      	str	r3, [r4, #16]
 8013b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b8e:	2104      	movs	r1, #4
 8013b90:	4620      	mov	r0, r4
 8013b92:	f000 fb0f 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013b96:	b1b0      	cbz	r0, 8013bc6 <ucdr_deserialize_int32_t+0xc6>
 8013b98:	7d23      	ldrb	r3, [r4, #20]
 8013b9a:	2b01      	cmp	r3, #1
 8013b9c:	68a3      	ldr	r3, [r4, #8]
 8013b9e:	d017      	beq.n	8013bd0 <ucdr_deserialize_int32_t+0xd0>
 8013ba0:	78db      	ldrb	r3, [r3, #3]
 8013ba2:	702b      	strb	r3, [r5, #0]
 8013ba4:	68a3      	ldr	r3, [r4, #8]
 8013ba6:	789b      	ldrb	r3, [r3, #2]
 8013ba8:	706b      	strb	r3, [r5, #1]
 8013baa:	68a3      	ldr	r3, [r4, #8]
 8013bac:	785b      	ldrb	r3, [r3, #1]
 8013bae:	70ab      	strb	r3, [r5, #2]
 8013bb0:	68a3      	ldr	r3, [r4, #8]
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	70eb      	strb	r3, [r5, #3]
 8013bb6:	2104      	movs	r1, #4
 8013bb8:	68a2      	ldr	r2, [r4, #8]
 8013bba:	6923      	ldr	r3, [r4, #16]
 8013bbc:	440a      	add	r2, r1
 8013bbe:	7561      	strb	r1, [r4, #21]
 8013bc0:	440b      	add	r3, r1
 8013bc2:	60a2      	str	r2, [r4, #8]
 8013bc4:	6123      	str	r3, [r4, #16]
 8013bc6:	7da0      	ldrb	r0, [r4, #22]
 8013bc8:	f080 0001 	eor.w	r0, r0, #1
 8013bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	602b      	str	r3, [r5, #0]
 8013bd4:	e7ef      	b.n	8013bb6 <ucdr_deserialize_int32_t+0xb6>
 8013bd6:	68a2      	ldr	r2, [r4, #8]
 8013bd8:	6923      	ldr	r3, [r4, #16]
 8013bda:	1bd2      	subs	r2, r2, r7
 8013bdc:	7da0      	ldrb	r0, [r4, #22]
 8013bde:	1bdb      	subs	r3, r3, r7
 8013be0:	f884 8015 	strb.w	r8, [r4, #21]
 8013be4:	f080 0001 	eor.w	r0, r0, #1
 8013be8:	60a2      	str	r2, [r4, #8]
 8013bea:	6123      	str	r3, [r4, #16]
 8013bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bf0:	68a3      	ldr	r3, [r4, #8]
 8013bf2:	789b      	ldrb	r3, [r3, #2]
 8013bf4:	706b      	strb	r3, [r5, #1]
 8013bf6:	1cab      	adds	r3, r5, #2
 8013bf8:	68a2      	ldr	r2, [r4, #8]
 8013bfa:	7852      	ldrb	r2, [r2, #1]
 8013bfc:	f803 2b01 	strb.w	r2, [r3], #1
 8013c00:	68a2      	ldr	r2, [r4, #8]
 8013c02:	7812      	ldrb	r2, [r2, #0]
 8013c04:	701a      	strb	r2, [r3, #0]
 8013c06:	e7b4      	b.n	8013b72 <ucdr_deserialize_int32_t+0x72>
 8013c08:	4631      	mov	r1, r6
 8013c0a:	463a      	mov	r2, r7
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f00e fd12 	bl	8022636 <memcpy>
 8013c12:	464a      	mov	r2, r9
 8013c14:	19e8      	adds	r0, r5, r7
 8013c16:	68a1      	ldr	r1, [r4, #8]
 8013c18:	f00e fd0d 	bl	8022636 <memcpy>
 8013c1c:	e7a9      	b.n	8013b72 <ucdr_deserialize_int32_t+0x72>
 8013c1e:	bf00      	nop

08013c20 <ucdr_serialize_float>:
 8013c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c24:	4604      	mov	r4, r0
 8013c26:	b082      	sub	sp, #8
 8013c28:	2104      	movs	r1, #4
 8013c2a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013c2e:	f000 fb15 	bl	801425c <ucdr_buffer_alignment>
 8013c32:	4601      	mov	r1, r0
 8013c34:	4620      	mov	r0, r4
 8013c36:	7d67      	ldrb	r7, [r4, #21]
 8013c38:	f000 fb58 	bl	80142ec <ucdr_advance_buffer>
 8013c3c:	2104      	movs	r1, #4
 8013c3e:	4620      	mov	r0, r4
 8013c40:	f000 faac 	bl	801419c <ucdr_check_buffer_available_for>
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d139      	bne.n	8013cbc <ucdr_serialize_float+0x9c>
 8013c48:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013c4c:	42ab      	cmp	r3, r5
 8013c4e:	d930      	bls.n	8013cb2 <ucdr_serialize_float+0x92>
 8013c50:	1b5e      	subs	r6, r3, r5
 8013c52:	60a3      	str	r3, [r4, #8]
 8013c54:	6923      	ldr	r3, [r4, #16]
 8013c56:	4620      	mov	r0, r4
 8013c58:	f1c6 0804 	rsb	r8, r6, #4
 8013c5c:	4433      	add	r3, r6
 8013c5e:	4641      	mov	r1, r8
 8013c60:	6123      	str	r3, [r4, #16]
 8013c62:	f000 faa7 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013c66:	2800      	cmp	r0, #0
 8013c68:	d04c      	beq.n	8013d04 <ucdr_serialize_float+0xe4>
 8013c6a:	7d23      	ldrb	r3, [r4, #20]
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	d063      	beq.n	8013d38 <ucdr_serialize_float+0x118>
 8013c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013c74:	702b      	strb	r3, [r5, #0]
 8013c76:	2e00      	cmp	r6, #0
 8013c78:	d051      	beq.n	8013d1e <ucdr_serialize_float+0xfe>
 8013c7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013c7e:	2e01      	cmp	r6, #1
 8013c80:	706b      	strb	r3, [r5, #1]
 8013c82:	d050      	beq.n	8013d26 <ucdr_serialize_float+0x106>
 8013c84:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013c88:	2e02      	cmp	r6, #2
 8013c8a:	70ab      	strb	r3, [r5, #2]
 8013c8c:	d04f      	beq.n	8013d2e <ucdr_serialize_float+0x10e>
 8013c8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013c92:	70eb      	strb	r3, [r5, #3]
 8013c94:	6923      	ldr	r3, [r4, #16]
 8013c96:	2104      	movs	r1, #4
 8013c98:	68a2      	ldr	r2, [r4, #8]
 8013c9a:	3304      	adds	r3, #4
 8013c9c:	7da0      	ldrb	r0, [r4, #22]
 8013c9e:	4442      	add	r2, r8
 8013ca0:	7561      	strb	r1, [r4, #21]
 8013ca2:	1b9e      	subs	r6, r3, r6
 8013ca4:	f080 0001 	eor.w	r0, r0, #1
 8013ca8:	60a2      	str	r2, [r4, #8]
 8013caa:	6126      	str	r6, [r4, #16]
 8013cac:	b002      	add	sp, #8
 8013cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb2:	2104      	movs	r1, #4
 8013cb4:	4620      	mov	r0, r4
 8013cb6:	f000 fa7d 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013cba:	b1d0      	cbz	r0, 8013cf2 <ucdr_serialize_float+0xd2>
 8013cbc:	7d23      	ldrb	r3, [r4, #20]
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	68a3      	ldr	r3, [r4, #8]
 8013cc2:	d01c      	beq.n	8013cfe <ucdr_serialize_float+0xde>
 8013cc4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013cc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013ccc:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013cd0:	7018      	strb	r0, [r3, #0]
 8013cd2:	68a3      	ldr	r3, [r4, #8]
 8013cd4:	705a      	strb	r2, [r3, #1]
 8013cd6:	68a3      	ldr	r3, [r4, #8]
 8013cd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013cdc:	7099      	strb	r1, [r3, #2]
 8013cde:	68a3      	ldr	r3, [r4, #8]
 8013ce0:	70da      	strb	r2, [r3, #3]
 8013ce2:	2104      	movs	r1, #4
 8013ce4:	68a2      	ldr	r2, [r4, #8]
 8013ce6:	6923      	ldr	r3, [r4, #16]
 8013ce8:	440a      	add	r2, r1
 8013cea:	7561      	strb	r1, [r4, #21]
 8013cec:	440b      	add	r3, r1
 8013cee:	60a2      	str	r2, [r4, #8]
 8013cf0:	6123      	str	r3, [r4, #16]
 8013cf2:	7da0      	ldrb	r0, [r4, #22]
 8013cf4:	f080 0001 	eor.w	r0, r0, #1
 8013cf8:	b002      	add	sp, #8
 8013cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cfe:	9a01      	ldr	r2, [sp, #4]
 8013d00:	601a      	str	r2, [r3, #0]
 8013d02:	e7ee      	b.n	8013ce2 <ucdr_serialize_float+0xc2>
 8013d04:	68a2      	ldr	r2, [r4, #8]
 8013d06:	6923      	ldr	r3, [r4, #16]
 8013d08:	7da0      	ldrb	r0, [r4, #22]
 8013d0a:	1b92      	subs	r2, r2, r6
 8013d0c:	1b9b      	subs	r3, r3, r6
 8013d0e:	7567      	strb	r7, [r4, #21]
 8013d10:	f080 0001 	eor.w	r0, r0, #1
 8013d14:	60a2      	str	r2, [r4, #8]
 8013d16:	6123      	str	r3, [r4, #16]
 8013d18:	b002      	add	sp, #8
 8013d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d1e:	68a3      	ldr	r3, [r4, #8]
 8013d20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013d24:	701a      	strb	r2, [r3, #0]
 8013d26:	68a3      	ldr	r3, [r4, #8]
 8013d28:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013d2c:	701a      	strb	r2, [r3, #0]
 8013d2e:	68a3      	ldr	r3, [r4, #8]
 8013d30:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013d34:	701a      	strb	r2, [r3, #0]
 8013d36:	e7ad      	b.n	8013c94 <ucdr_serialize_float+0x74>
 8013d38:	4628      	mov	r0, r5
 8013d3a:	ad01      	add	r5, sp, #4
 8013d3c:	4632      	mov	r2, r6
 8013d3e:	4629      	mov	r1, r5
 8013d40:	f00e fc79 	bl	8022636 <memcpy>
 8013d44:	4642      	mov	r2, r8
 8013d46:	19a9      	adds	r1, r5, r6
 8013d48:	68a0      	ldr	r0, [r4, #8]
 8013d4a:	f00e fc74 	bl	8022636 <memcpy>
 8013d4e:	e7a1      	b.n	8013c94 <ucdr_serialize_float+0x74>

08013d50 <ucdr_deserialize_float>:
 8013d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d54:	4604      	mov	r4, r0
 8013d56:	460d      	mov	r5, r1
 8013d58:	2104      	movs	r1, #4
 8013d5a:	f000 fa7f 	bl	801425c <ucdr_buffer_alignment>
 8013d5e:	4601      	mov	r1, r0
 8013d60:	4620      	mov	r0, r4
 8013d62:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013d66:	f000 fac1 	bl	80142ec <ucdr_advance_buffer>
 8013d6a:	2104      	movs	r1, #4
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f000 fa15 	bl	801419c <ucdr_check_buffer_available_for>
 8013d72:	2800      	cmp	r0, #0
 8013d74:	d138      	bne.n	8013de8 <ucdr_deserialize_float+0x98>
 8013d76:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013d7a:	42b7      	cmp	r7, r6
 8013d7c:	d92f      	bls.n	8013dde <ucdr_deserialize_float+0x8e>
 8013d7e:	6923      	ldr	r3, [r4, #16]
 8013d80:	4620      	mov	r0, r4
 8013d82:	60a7      	str	r7, [r4, #8]
 8013d84:	1bbf      	subs	r7, r7, r6
 8013d86:	443b      	add	r3, r7
 8013d88:	f1c7 0904 	rsb	r9, r7, #4
 8013d8c:	6123      	str	r3, [r4, #16]
 8013d8e:	4649      	mov	r1, r9
 8013d90:	f000 fa10 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013d94:	2800      	cmp	r0, #0
 8013d96:	d046      	beq.n	8013e26 <ucdr_deserialize_float+0xd6>
 8013d98:	7d23      	ldrb	r3, [r4, #20]
 8013d9a:	2b01      	cmp	r3, #1
 8013d9c:	d05c      	beq.n	8013e58 <ucdr_deserialize_float+0x108>
 8013d9e:	78f3      	ldrb	r3, [r6, #3]
 8013da0:	702b      	strb	r3, [r5, #0]
 8013da2:	2f00      	cmp	r7, #0
 8013da4:	d04c      	beq.n	8013e40 <ucdr_deserialize_float+0xf0>
 8013da6:	78b3      	ldrb	r3, [r6, #2]
 8013da8:	2f01      	cmp	r7, #1
 8013daa:	706b      	strb	r3, [r5, #1]
 8013dac:	f105 0302 	add.w	r3, r5, #2
 8013db0:	d04a      	beq.n	8013e48 <ucdr_deserialize_float+0xf8>
 8013db2:	7873      	ldrb	r3, [r6, #1]
 8013db4:	2f02      	cmp	r7, #2
 8013db6:	70ab      	strb	r3, [r5, #2]
 8013db8:	f105 0303 	add.w	r3, r5, #3
 8013dbc:	d048      	beq.n	8013e50 <ucdr_deserialize_float+0x100>
 8013dbe:	7833      	ldrb	r3, [r6, #0]
 8013dc0:	70eb      	strb	r3, [r5, #3]
 8013dc2:	6923      	ldr	r3, [r4, #16]
 8013dc4:	2104      	movs	r1, #4
 8013dc6:	68a2      	ldr	r2, [r4, #8]
 8013dc8:	3304      	adds	r3, #4
 8013dca:	7da0      	ldrb	r0, [r4, #22]
 8013dcc:	444a      	add	r2, r9
 8013dce:	7561      	strb	r1, [r4, #21]
 8013dd0:	1bdb      	subs	r3, r3, r7
 8013dd2:	f080 0001 	eor.w	r0, r0, #1
 8013dd6:	60a2      	str	r2, [r4, #8]
 8013dd8:	6123      	str	r3, [r4, #16]
 8013dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dde:	2104      	movs	r1, #4
 8013de0:	4620      	mov	r0, r4
 8013de2:	f000 f9e7 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013de6:	b1b0      	cbz	r0, 8013e16 <ucdr_deserialize_float+0xc6>
 8013de8:	7d23      	ldrb	r3, [r4, #20]
 8013dea:	2b01      	cmp	r3, #1
 8013dec:	68a3      	ldr	r3, [r4, #8]
 8013dee:	d017      	beq.n	8013e20 <ucdr_deserialize_float+0xd0>
 8013df0:	78db      	ldrb	r3, [r3, #3]
 8013df2:	702b      	strb	r3, [r5, #0]
 8013df4:	68a3      	ldr	r3, [r4, #8]
 8013df6:	789b      	ldrb	r3, [r3, #2]
 8013df8:	706b      	strb	r3, [r5, #1]
 8013dfa:	68a3      	ldr	r3, [r4, #8]
 8013dfc:	785b      	ldrb	r3, [r3, #1]
 8013dfe:	70ab      	strb	r3, [r5, #2]
 8013e00:	68a3      	ldr	r3, [r4, #8]
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	70eb      	strb	r3, [r5, #3]
 8013e06:	2104      	movs	r1, #4
 8013e08:	68a2      	ldr	r2, [r4, #8]
 8013e0a:	6923      	ldr	r3, [r4, #16]
 8013e0c:	440a      	add	r2, r1
 8013e0e:	7561      	strb	r1, [r4, #21]
 8013e10:	440b      	add	r3, r1
 8013e12:	60a2      	str	r2, [r4, #8]
 8013e14:	6123      	str	r3, [r4, #16]
 8013e16:	7da0      	ldrb	r0, [r4, #22]
 8013e18:	f080 0001 	eor.w	r0, r0, #1
 8013e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	602b      	str	r3, [r5, #0]
 8013e24:	e7ef      	b.n	8013e06 <ucdr_deserialize_float+0xb6>
 8013e26:	68a2      	ldr	r2, [r4, #8]
 8013e28:	6923      	ldr	r3, [r4, #16]
 8013e2a:	1bd2      	subs	r2, r2, r7
 8013e2c:	7da0      	ldrb	r0, [r4, #22]
 8013e2e:	1bdb      	subs	r3, r3, r7
 8013e30:	f884 8015 	strb.w	r8, [r4, #21]
 8013e34:	f080 0001 	eor.w	r0, r0, #1
 8013e38:	60a2      	str	r2, [r4, #8]
 8013e3a:	6123      	str	r3, [r4, #16]
 8013e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e40:	68a3      	ldr	r3, [r4, #8]
 8013e42:	789b      	ldrb	r3, [r3, #2]
 8013e44:	706b      	strb	r3, [r5, #1]
 8013e46:	1cab      	adds	r3, r5, #2
 8013e48:	68a2      	ldr	r2, [r4, #8]
 8013e4a:	7852      	ldrb	r2, [r2, #1]
 8013e4c:	f803 2b01 	strb.w	r2, [r3], #1
 8013e50:	68a2      	ldr	r2, [r4, #8]
 8013e52:	7812      	ldrb	r2, [r2, #0]
 8013e54:	701a      	strb	r2, [r3, #0]
 8013e56:	e7b4      	b.n	8013dc2 <ucdr_deserialize_float+0x72>
 8013e58:	4631      	mov	r1, r6
 8013e5a:	463a      	mov	r2, r7
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	f00e fbea 	bl	8022636 <memcpy>
 8013e62:	464a      	mov	r2, r9
 8013e64:	19e8      	adds	r0, r5, r7
 8013e66:	68a1      	ldr	r1, [r4, #8]
 8013e68:	f00e fbe5 	bl	8022636 <memcpy>
 8013e6c:	e7a9      	b.n	8013dc2 <ucdr_deserialize_float+0x72>
 8013e6e:	bf00      	nop

08013e70 <ucdr_serialize_double>:
 8013e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e74:	4604      	mov	r4, r0
 8013e76:	b082      	sub	sp, #8
 8013e78:	2108      	movs	r1, #8
 8013e7a:	ed8d 0b00 	vstr	d0, [sp]
 8013e7e:	f000 f9ed 	bl	801425c <ucdr_buffer_alignment>
 8013e82:	4601      	mov	r1, r0
 8013e84:	4620      	mov	r0, r4
 8013e86:	7d67      	ldrb	r7, [r4, #21]
 8013e88:	f000 fa30 	bl	80142ec <ucdr_advance_buffer>
 8013e8c:	2108      	movs	r1, #8
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f000 f984 	bl	801419c <ucdr_check_buffer_available_for>
 8013e94:	2800      	cmp	r0, #0
 8013e96:	d14e      	bne.n	8013f36 <ucdr_serialize_double+0xc6>
 8013e98:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013e9c:	42ab      	cmp	r3, r5
 8013e9e:	d945      	bls.n	8013f2c <ucdr_serialize_double+0xbc>
 8013ea0:	1b5e      	subs	r6, r3, r5
 8013ea2:	60a3      	str	r3, [r4, #8]
 8013ea4:	6923      	ldr	r3, [r4, #16]
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	f1c6 0808 	rsb	r8, r6, #8
 8013eac:	4433      	add	r3, r6
 8013eae:	4641      	mov	r1, r8
 8013eb0:	6123      	str	r3, [r4, #16]
 8013eb2:	f000 f97f 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d074      	beq.n	8013fa4 <ucdr_serialize_double+0x134>
 8013eba:	7d23      	ldrb	r3, [r4, #20]
 8013ebc:	2b01      	cmp	r3, #1
 8013ebe:	f000 809b 	beq.w	8013ff8 <ucdr_serialize_double+0x188>
 8013ec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ec6:	702b      	strb	r3, [r5, #0]
 8013ec8:	2e00      	cmp	r6, #0
 8013eca:	d078      	beq.n	8013fbe <ucdr_serialize_double+0x14e>
 8013ecc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013ed0:	2e01      	cmp	r6, #1
 8013ed2:	706b      	strb	r3, [r5, #1]
 8013ed4:	d077      	beq.n	8013fc6 <ucdr_serialize_double+0x156>
 8013ed6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013eda:	2e02      	cmp	r6, #2
 8013edc:	70ab      	strb	r3, [r5, #2]
 8013ede:	d076      	beq.n	8013fce <ucdr_serialize_double+0x15e>
 8013ee0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013ee4:	2e03      	cmp	r6, #3
 8013ee6:	70eb      	strb	r3, [r5, #3]
 8013ee8:	d075      	beq.n	8013fd6 <ucdr_serialize_double+0x166>
 8013eea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013eee:	2e04      	cmp	r6, #4
 8013ef0:	712b      	strb	r3, [r5, #4]
 8013ef2:	d074      	beq.n	8013fde <ucdr_serialize_double+0x16e>
 8013ef4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013ef8:	2e05      	cmp	r6, #5
 8013efa:	716b      	strb	r3, [r5, #5]
 8013efc:	d073      	beq.n	8013fe6 <ucdr_serialize_double+0x176>
 8013efe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013f02:	2e06      	cmp	r6, #6
 8013f04:	71ab      	strb	r3, [r5, #6]
 8013f06:	d072      	beq.n	8013fee <ucdr_serialize_double+0x17e>
 8013f08:	f89d 3000 	ldrb.w	r3, [sp]
 8013f0c:	71eb      	strb	r3, [r5, #7]
 8013f0e:	6923      	ldr	r3, [r4, #16]
 8013f10:	2108      	movs	r1, #8
 8013f12:	68a2      	ldr	r2, [r4, #8]
 8013f14:	3308      	adds	r3, #8
 8013f16:	7da0      	ldrb	r0, [r4, #22]
 8013f18:	4442      	add	r2, r8
 8013f1a:	7561      	strb	r1, [r4, #21]
 8013f1c:	1b9e      	subs	r6, r3, r6
 8013f1e:	f080 0001 	eor.w	r0, r0, #1
 8013f22:	60a2      	str	r2, [r4, #8]
 8013f24:	6126      	str	r6, [r4, #16]
 8013f26:	b002      	add	sp, #8
 8013f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f2c:	2108      	movs	r1, #8
 8013f2e:	4620      	mov	r0, r4
 8013f30:	f000 f940 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8013f34:	b350      	cbz	r0, 8013f8c <ucdr_serialize_double+0x11c>
 8013f36:	7d23      	ldrb	r3, [r4, #20]
 8013f38:	2b01      	cmp	r3, #1
 8013f3a:	d02d      	beq.n	8013f98 <ucdr_serialize_double+0x128>
 8013f3c:	68a3      	ldr	r3, [r4, #8]
 8013f3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013f42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f46:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013f4a:	7018      	strb	r0, [r3, #0]
 8013f4c:	68a3      	ldr	r3, [r4, #8]
 8013f4e:	705a      	strb	r2, [r3, #1]
 8013f50:	68a3      	ldr	r3, [r4, #8]
 8013f52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013f56:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013f5a:	7099      	strb	r1, [r3, #2]
 8013f5c:	68a3      	ldr	r3, [r4, #8]
 8013f5e:	70da      	strb	r2, [r3, #3]
 8013f60:	68a3      	ldr	r3, [r4, #8]
 8013f62:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013f66:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013f6a:	7118      	strb	r0, [r3, #4]
 8013f6c:	68a3      	ldr	r3, [r4, #8]
 8013f6e:	715a      	strb	r2, [r3, #5]
 8013f70:	68a3      	ldr	r3, [r4, #8]
 8013f72:	f89d 2000 	ldrb.w	r2, [sp]
 8013f76:	7199      	strb	r1, [r3, #6]
 8013f78:	68a3      	ldr	r3, [r4, #8]
 8013f7a:	71da      	strb	r2, [r3, #7]
 8013f7c:	2108      	movs	r1, #8
 8013f7e:	68a2      	ldr	r2, [r4, #8]
 8013f80:	6923      	ldr	r3, [r4, #16]
 8013f82:	440a      	add	r2, r1
 8013f84:	7561      	strb	r1, [r4, #21]
 8013f86:	440b      	add	r3, r1
 8013f88:	60a2      	str	r2, [r4, #8]
 8013f8a:	6123      	str	r3, [r4, #16]
 8013f8c:	7da0      	ldrb	r0, [r4, #22]
 8013f8e:	f080 0001 	eor.w	r0, r0, #1
 8013f92:	b002      	add	sp, #8
 8013f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f98:	466b      	mov	r3, sp
 8013f9a:	68a2      	ldr	r2, [r4, #8]
 8013f9c:	cb03      	ldmia	r3!, {r0, r1}
 8013f9e:	6010      	str	r0, [r2, #0]
 8013fa0:	6051      	str	r1, [r2, #4]
 8013fa2:	e7eb      	b.n	8013f7c <ucdr_serialize_double+0x10c>
 8013fa4:	68a2      	ldr	r2, [r4, #8]
 8013fa6:	6923      	ldr	r3, [r4, #16]
 8013fa8:	7da0      	ldrb	r0, [r4, #22]
 8013faa:	1b92      	subs	r2, r2, r6
 8013fac:	1b9b      	subs	r3, r3, r6
 8013fae:	7567      	strb	r7, [r4, #21]
 8013fb0:	f080 0001 	eor.w	r0, r0, #1
 8013fb4:	60a2      	str	r2, [r4, #8]
 8013fb6:	6123      	str	r3, [r4, #16]
 8013fb8:	b002      	add	sp, #8
 8013fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fbe:	68a3      	ldr	r3, [r4, #8]
 8013fc0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013fc4:	701a      	strb	r2, [r3, #0]
 8013fc6:	68a3      	ldr	r3, [r4, #8]
 8013fc8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013fcc:	701a      	strb	r2, [r3, #0]
 8013fce:	68a3      	ldr	r3, [r4, #8]
 8013fd0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013fd4:	701a      	strb	r2, [r3, #0]
 8013fd6:	68a3      	ldr	r3, [r4, #8]
 8013fd8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013fdc:	701a      	strb	r2, [r3, #0]
 8013fde:	68a3      	ldr	r3, [r4, #8]
 8013fe0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013fe4:	701a      	strb	r2, [r3, #0]
 8013fe6:	68a3      	ldr	r3, [r4, #8]
 8013fe8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013fec:	701a      	strb	r2, [r3, #0]
 8013fee:	68a3      	ldr	r3, [r4, #8]
 8013ff0:	f89d 2000 	ldrb.w	r2, [sp]
 8013ff4:	701a      	strb	r2, [r3, #0]
 8013ff6:	e78a      	b.n	8013f0e <ucdr_serialize_double+0x9e>
 8013ff8:	4628      	mov	r0, r5
 8013ffa:	466d      	mov	r5, sp
 8013ffc:	4632      	mov	r2, r6
 8013ffe:	4629      	mov	r1, r5
 8014000:	f00e fb19 	bl	8022636 <memcpy>
 8014004:	4642      	mov	r2, r8
 8014006:	19a9      	adds	r1, r5, r6
 8014008:	68a0      	ldr	r0, [r4, #8]
 801400a:	f00e fb14 	bl	8022636 <memcpy>
 801400e:	e77e      	b.n	8013f0e <ucdr_serialize_double+0x9e>

08014010 <ucdr_deserialize_double>:
 8014010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014014:	4604      	mov	r4, r0
 8014016:	460d      	mov	r5, r1
 8014018:	2108      	movs	r1, #8
 801401a:	f000 f91f 	bl	801425c <ucdr_buffer_alignment>
 801401e:	4601      	mov	r1, r0
 8014020:	4620      	mov	r0, r4
 8014022:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014026:	f000 f961 	bl	80142ec <ucdr_advance_buffer>
 801402a:	2108      	movs	r1, #8
 801402c:	4620      	mov	r0, r4
 801402e:	f000 f8b5 	bl	801419c <ucdr_check_buffer_available_for>
 8014032:	2800      	cmp	r0, #0
 8014034:	d151      	bne.n	80140da <ucdr_deserialize_double+0xca>
 8014036:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801403a:	42be      	cmp	r6, r7
 801403c:	d948      	bls.n	80140d0 <ucdr_deserialize_double+0xc0>
 801403e:	6923      	ldr	r3, [r4, #16]
 8014040:	4620      	mov	r0, r4
 8014042:	60a6      	str	r6, [r4, #8]
 8014044:	1bf6      	subs	r6, r6, r7
 8014046:	4433      	add	r3, r6
 8014048:	f1c6 0908 	rsb	r9, r6, #8
 801404c:	6123      	str	r3, [r4, #16]
 801404e:	4649      	mov	r1, r9
 8014050:	f000 f8b0 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 8014054:	2800      	cmp	r0, #0
 8014056:	d06d      	beq.n	8014134 <ucdr_deserialize_double+0x124>
 8014058:	7d23      	ldrb	r3, [r4, #20]
 801405a:	2b01      	cmp	r3, #1
 801405c:	f000 8093 	beq.w	8014186 <ucdr_deserialize_double+0x176>
 8014060:	79fb      	ldrb	r3, [r7, #7]
 8014062:	702b      	strb	r3, [r5, #0]
 8014064:	2e00      	cmp	r6, #0
 8014066:	d072      	beq.n	801414e <ucdr_deserialize_double+0x13e>
 8014068:	79bb      	ldrb	r3, [r7, #6]
 801406a:	2e01      	cmp	r6, #1
 801406c:	706b      	strb	r3, [r5, #1]
 801406e:	f105 0302 	add.w	r3, r5, #2
 8014072:	d070      	beq.n	8014156 <ucdr_deserialize_double+0x146>
 8014074:	797b      	ldrb	r3, [r7, #5]
 8014076:	2e02      	cmp	r6, #2
 8014078:	70ab      	strb	r3, [r5, #2]
 801407a:	f105 0303 	add.w	r3, r5, #3
 801407e:	d06e      	beq.n	801415e <ucdr_deserialize_double+0x14e>
 8014080:	793b      	ldrb	r3, [r7, #4]
 8014082:	2e03      	cmp	r6, #3
 8014084:	70eb      	strb	r3, [r5, #3]
 8014086:	f105 0304 	add.w	r3, r5, #4
 801408a:	d06c      	beq.n	8014166 <ucdr_deserialize_double+0x156>
 801408c:	78fb      	ldrb	r3, [r7, #3]
 801408e:	2e04      	cmp	r6, #4
 8014090:	712b      	strb	r3, [r5, #4]
 8014092:	f105 0305 	add.w	r3, r5, #5
 8014096:	d06a      	beq.n	801416e <ucdr_deserialize_double+0x15e>
 8014098:	78bb      	ldrb	r3, [r7, #2]
 801409a:	2e05      	cmp	r6, #5
 801409c:	716b      	strb	r3, [r5, #5]
 801409e:	f105 0306 	add.w	r3, r5, #6
 80140a2:	d068      	beq.n	8014176 <ucdr_deserialize_double+0x166>
 80140a4:	787b      	ldrb	r3, [r7, #1]
 80140a6:	2e06      	cmp	r6, #6
 80140a8:	71ab      	strb	r3, [r5, #6]
 80140aa:	f105 0307 	add.w	r3, r5, #7
 80140ae:	d066      	beq.n	801417e <ucdr_deserialize_double+0x16e>
 80140b0:	783b      	ldrb	r3, [r7, #0]
 80140b2:	71eb      	strb	r3, [r5, #7]
 80140b4:	6923      	ldr	r3, [r4, #16]
 80140b6:	2108      	movs	r1, #8
 80140b8:	68a2      	ldr	r2, [r4, #8]
 80140ba:	3308      	adds	r3, #8
 80140bc:	7da0      	ldrb	r0, [r4, #22]
 80140be:	444a      	add	r2, r9
 80140c0:	7561      	strb	r1, [r4, #21]
 80140c2:	1b9e      	subs	r6, r3, r6
 80140c4:	f080 0001 	eor.w	r0, r0, #1
 80140c8:	60a2      	str	r2, [r4, #8]
 80140ca:	6126      	str	r6, [r4, #16]
 80140cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140d0:	2108      	movs	r1, #8
 80140d2:	4620      	mov	r0, r4
 80140d4:	f000 f86e 	bl	80141b4 <ucdr_check_final_buffer_behavior>
 80140d8:	b310      	cbz	r0, 8014120 <ucdr_deserialize_double+0x110>
 80140da:	7d23      	ldrb	r3, [r4, #20]
 80140dc:	2b01      	cmp	r3, #1
 80140de:	68a3      	ldr	r3, [r4, #8]
 80140e0:	d023      	beq.n	801412a <ucdr_deserialize_double+0x11a>
 80140e2:	79db      	ldrb	r3, [r3, #7]
 80140e4:	702b      	strb	r3, [r5, #0]
 80140e6:	68a3      	ldr	r3, [r4, #8]
 80140e8:	799b      	ldrb	r3, [r3, #6]
 80140ea:	706b      	strb	r3, [r5, #1]
 80140ec:	68a3      	ldr	r3, [r4, #8]
 80140ee:	795b      	ldrb	r3, [r3, #5]
 80140f0:	70ab      	strb	r3, [r5, #2]
 80140f2:	68a3      	ldr	r3, [r4, #8]
 80140f4:	791b      	ldrb	r3, [r3, #4]
 80140f6:	70eb      	strb	r3, [r5, #3]
 80140f8:	68a3      	ldr	r3, [r4, #8]
 80140fa:	78db      	ldrb	r3, [r3, #3]
 80140fc:	712b      	strb	r3, [r5, #4]
 80140fe:	68a3      	ldr	r3, [r4, #8]
 8014100:	789b      	ldrb	r3, [r3, #2]
 8014102:	716b      	strb	r3, [r5, #5]
 8014104:	68a3      	ldr	r3, [r4, #8]
 8014106:	785b      	ldrb	r3, [r3, #1]
 8014108:	71ab      	strb	r3, [r5, #6]
 801410a:	68a3      	ldr	r3, [r4, #8]
 801410c:	781b      	ldrb	r3, [r3, #0]
 801410e:	71eb      	strb	r3, [r5, #7]
 8014110:	2108      	movs	r1, #8
 8014112:	68a2      	ldr	r2, [r4, #8]
 8014114:	6923      	ldr	r3, [r4, #16]
 8014116:	440a      	add	r2, r1
 8014118:	7561      	strb	r1, [r4, #21]
 801411a:	440b      	add	r3, r1
 801411c:	60a2      	str	r2, [r4, #8]
 801411e:	6123      	str	r3, [r4, #16]
 8014120:	7da0      	ldrb	r0, [r4, #22]
 8014122:	f080 0001 	eor.w	r0, r0, #1
 8014126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801412a:	681a      	ldr	r2, [r3, #0]
 801412c:	685b      	ldr	r3, [r3, #4]
 801412e:	602a      	str	r2, [r5, #0]
 8014130:	606b      	str	r3, [r5, #4]
 8014132:	e7ed      	b.n	8014110 <ucdr_deserialize_double+0x100>
 8014134:	68a2      	ldr	r2, [r4, #8]
 8014136:	6923      	ldr	r3, [r4, #16]
 8014138:	1b92      	subs	r2, r2, r6
 801413a:	7da0      	ldrb	r0, [r4, #22]
 801413c:	1b9b      	subs	r3, r3, r6
 801413e:	f884 8015 	strb.w	r8, [r4, #21]
 8014142:	f080 0001 	eor.w	r0, r0, #1
 8014146:	60a2      	str	r2, [r4, #8]
 8014148:	6123      	str	r3, [r4, #16]
 801414a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801414e:	68a3      	ldr	r3, [r4, #8]
 8014150:	799b      	ldrb	r3, [r3, #6]
 8014152:	706b      	strb	r3, [r5, #1]
 8014154:	1cab      	adds	r3, r5, #2
 8014156:	68a2      	ldr	r2, [r4, #8]
 8014158:	7952      	ldrb	r2, [r2, #5]
 801415a:	f803 2b01 	strb.w	r2, [r3], #1
 801415e:	68a2      	ldr	r2, [r4, #8]
 8014160:	7912      	ldrb	r2, [r2, #4]
 8014162:	f803 2b01 	strb.w	r2, [r3], #1
 8014166:	68a2      	ldr	r2, [r4, #8]
 8014168:	78d2      	ldrb	r2, [r2, #3]
 801416a:	f803 2b01 	strb.w	r2, [r3], #1
 801416e:	68a2      	ldr	r2, [r4, #8]
 8014170:	7892      	ldrb	r2, [r2, #2]
 8014172:	f803 2b01 	strb.w	r2, [r3], #1
 8014176:	68a2      	ldr	r2, [r4, #8]
 8014178:	7852      	ldrb	r2, [r2, #1]
 801417a:	f803 2b01 	strb.w	r2, [r3], #1
 801417e:	68a2      	ldr	r2, [r4, #8]
 8014180:	7812      	ldrb	r2, [r2, #0]
 8014182:	701a      	strb	r2, [r3, #0]
 8014184:	e796      	b.n	80140b4 <ucdr_deserialize_double+0xa4>
 8014186:	4639      	mov	r1, r7
 8014188:	4632      	mov	r2, r6
 801418a:	4628      	mov	r0, r5
 801418c:	f00e fa53 	bl	8022636 <memcpy>
 8014190:	464a      	mov	r2, r9
 8014192:	19a8      	adds	r0, r5, r6
 8014194:	68a1      	ldr	r1, [r4, #8]
 8014196:	f00e fa4e 	bl	8022636 <memcpy>
 801419a:	e78b      	b.n	80140b4 <ucdr_deserialize_double+0xa4>

0801419c <ucdr_check_buffer_available_for>:
 801419c:	7d83      	ldrb	r3, [r0, #22]
 801419e:	b93b      	cbnz	r3, 80141b0 <ucdr_check_buffer_available_for+0x14>
 80141a0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80141a4:	4419      	add	r1, r3
 80141a6:	4288      	cmp	r0, r1
 80141a8:	bf34      	ite	cc
 80141aa:	2000      	movcc	r0, #0
 80141ac:	2001      	movcs	r0, #1
 80141ae:	4770      	bx	lr
 80141b0:	2000      	movs	r0, #0
 80141b2:	4770      	bx	lr

080141b4 <ucdr_check_final_buffer_behavior>:
 80141b4:	7d83      	ldrb	r3, [r0, #22]
 80141b6:	b943      	cbnz	r3, 80141ca <ucdr_check_final_buffer_behavior+0x16>
 80141b8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80141bc:	b510      	push	{r4, lr}
 80141be:	4291      	cmp	r1, r2
 80141c0:	4604      	mov	r4, r0
 80141c2:	d205      	bcs.n	80141d0 <ucdr_check_final_buffer_behavior+0x1c>
 80141c4:	2301      	movs	r3, #1
 80141c6:	4618      	mov	r0, r3
 80141c8:	bd10      	pop	{r4, pc}
 80141ca:	2300      	movs	r3, #0
 80141cc:	4618      	mov	r0, r3
 80141ce:	4770      	bx	lr
 80141d0:	6982      	ldr	r2, [r0, #24]
 80141d2:	b13a      	cbz	r2, 80141e4 <ucdr_check_final_buffer_behavior+0x30>
 80141d4:	69c1      	ldr	r1, [r0, #28]
 80141d6:	4790      	blx	r2
 80141d8:	f080 0301 	eor.w	r3, r0, #1
 80141dc:	75a0      	strb	r0, [r4, #22]
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	4618      	mov	r0, r3
 80141e2:	bd10      	pop	{r4, pc}
 80141e4:	2001      	movs	r0, #1
 80141e6:	75a0      	strb	r0, [r4, #22]
 80141e8:	e7fa      	b.n	80141e0 <ucdr_check_final_buffer_behavior+0x2c>
 80141ea:	bf00      	nop

080141ec <ucdr_set_on_full_buffer_callback>:
 80141ec:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80141f0:	4770      	bx	lr
 80141f2:	bf00      	nop

080141f4 <ucdr_init_buffer_origin_offset_endian>:
 80141f4:	b410      	push	{r4}
 80141f6:	9c01      	ldr	r4, [sp, #4]
 80141f8:	440a      	add	r2, r1
 80141fa:	6001      	str	r1, [r0, #0]
 80141fc:	6042      	str	r2, [r0, #4]
 80141fe:	190a      	adds	r2, r1, r4
 8014200:	441c      	add	r4, r3
 8014202:	6082      	str	r2, [r0, #8]
 8014204:	2200      	movs	r2, #0
 8014206:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801420a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801420e:	7542      	strb	r2, [r0, #21]
 8014210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014214:	7582      	strb	r2, [r0, #22]
 8014216:	7503      	strb	r3, [r0, #20]
 8014218:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801421c:	4770      	bx	lr
 801421e:	bf00      	nop

08014220 <ucdr_init_buffer_origin_offset>:
 8014220:	b510      	push	{r4, lr}
 8014222:	b082      	sub	sp, #8
 8014224:	9c04      	ldr	r4, [sp, #16]
 8014226:	9400      	str	r4, [sp, #0]
 8014228:	2401      	movs	r4, #1
 801422a:	9401      	str	r4, [sp, #4]
 801422c:	f7ff ffe2 	bl	80141f4 <ucdr_init_buffer_origin_offset_endian>
 8014230:	b002      	add	sp, #8
 8014232:	bd10      	pop	{r4, pc}

08014234 <ucdr_init_buffer_origin>:
 8014234:	b510      	push	{r4, lr}
 8014236:	2400      	movs	r4, #0
 8014238:	b082      	sub	sp, #8
 801423a:	9400      	str	r4, [sp, #0]
 801423c:	f7ff fff0 	bl	8014220 <ucdr_init_buffer_origin_offset>
 8014240:	b002      	add	sp, #8
 8014242:	bd10      	pop	{r4, pc}

08014244 <ucdr_init_buffer>:
 8014244:	2300      	movs	r3, #0
 8014246:	f7ff bff5 	b.w	8014234 <ucdr_init_buffer_origin>
 801424a:	bf00      	nop

0801424c <ucdr_alignment>:
 801424c:	fbb0 f2f1 	udiv	r2, r0, r1
 8014250:	fb02 0011 	mls	r0, r2, r1, r0
 8014254:	1e4b      	subs	r3, r1, #1
 8014256:	1a08      	subs	r0, r1, r0
 8014258:	4018      	ands	r0, r3
 801425a:	4770      	bx	lr

0801425c <ucdr_buffer_alignment>:
 801425c:	7d43      	ldrb	r3, [r0, #21]
 801425e:	428b      	cmp	r3, r1
 8014260:	d209      	bcs.n	8014276 <ucdr_buffer_alignment+0x1a>
 8014262:	6903      	ldr	r3, [r0, #16]
 8014264:	1e4a      	subs	r2, r1, #1
 8014266:	fbb3 f0f1 	udiv	r0, r3, r1
 801426a:	fb01 3010 	mls	r0, r1, r0, r3
 801426e:	1a09      	subs	r1, r1, r0
 8014270:	ea01 0002 	and.w	r0, r1, r2
 8014274:	4770      	bx	lr
 8014276:	2000      	movs	r0, #0
 8014278:	4770      	bx	lr
 801427a:	bf00      	nop

0801427c <ucdr_align_to>:
 801427c:	b538      	push	{r3, r4, r5, lr}
 801427e:	4604      	mov	r4, r0
 8014280:	460d      	mov	r5, r1
 8014282:	f7ff ffeb 	bl	801425c <ucdr_buffer_alignment>
 8014286:	68a3      	ldr	r3, [r4, #8]
 8014288:	7565      	strb	r5, [r4, #21]
 801428a:	181a      	adds	r2, r3, r0
 801428c:	6923      	ldr	r3, [r4, #16]
 801428e:	4418      	add	r0, r3
 8014290:	6863      	ldr	r3, [r4, #4]
 8014292:	4293      	cmp	r3, r2
 8014294:	6120      	str	r0, [r4, #16]
 8014296:	bf28      	it	cs
 8014298:	4613      	movcs	r3, r2
 801429a:	60a3      	str	r3, [r4, #8]
 801429c:	bd38      	pop	{r3, r4, r5, pc}
 801429e:	bf00      	nop

080142a0 <ucdr_buffer_length>:
 80142a0:	6882      	ldr	r2, [r0, #8]
 80142a2:	6800      	ldr	r0, [r0, #0]
 80142a4:	1a10      	subs	r0, r2, r0
 80142a6:	4770      	bx	lr

080142a8 <ucdr_buffer_remaining>:
 80142a8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80142ac:	1a10      	subs	r0, r2, r0
 80142ae:	4770      	bx	lr

080142b0 <ucdr_check_final_buffer_behavior_array>:
 80142b0:	b538      	push	{r3, r4, r5, lr}
 80142b2:	7d83      	ldrb	r3, [r0, #22]
 80142b4:	b9a3      	cbnz	r3, 80142e0 <ucdr_check_final_buffer_behavior_array+0x30>
 80142b6:	4604      	mov	r4, r0
 80142b8:	460d      	mov	r5, r1
 80142ba:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d300      	bcc.n	80142c4 <ucdr_check_final_buffer_behavior_array+0x14>
 80142c2:	b931      	cbnz	r1, 80142d2 <ucdr_check_final_buffer_behavior_array+0x22>
 80142c4:	4620      	mov	r0, r4
 80142c6:	f7ff ffef 	bl	80142a8 <ucdr_buffer_remaining>
 80142ca:	42a8      	cmp	r0, r5
 80142cc:	bf28      	it	cs
 80142ce:	4628      	movcs	r0, r5
 80142d0:	bd38      	pop	{r3, r4, r5, pc}
 80142d2:	6983      	ldr	r3, [r0, #24]
 80142d4:	b133      	cbz	r3, 80142e4 <ucdr_check_final_buffer_behavior_array+0x34>
 80142d6:	69c1      	ldr	r1, [r0, #28]
 80142d8:	4798      	blx	r3
 80142da:	75a0      	strb	r0, [r4, #22]
 80142dc:	2800      	cmp	r0, #0
 80142de:	d0f1      	beq.n	80142c4 <ucdr_check_final_buffer_behavior_array+0x14>
 80142e0:	2000      	movs	r0, #0
 80142e2:	bd38      	pop	{r3, r4, r5, pc}
 80142e4:	2301      	movs	r3, #1
 80142e6:	7583      	strb	r3, [r0, #22]
 80142e8:	e7fa      	b.n	80142e0 <ucdr_check_final_buffer_behavior_array+0x30>
 80142ea:	bf00      	nop

080142ec <ucdr_advance_buffer>:
 80142ec:	b538      	push	{r3, r4, r5, lr}
 80142ee:	4604      	mov	r4, r0
 80142f0:	460d      	mov	r5, r1
 80142f2:	f7ff ff53 	bl	801419c <ucdr_check_buffer_available_for>
 80142f6:	b178      	cbz	r0, 8014318 <ucdr_advance_buffer+0x2c>
 80142f8:	6923      	ldr	r3, [r4, #16]
 80142fa:	68a2      	ldr	r2, [r4, #8]
 80142fc:	442b      	add	r3, r5
 80142fe:	442a      	add	r2, r5
 8014300:	6123      	str	r3, [r4, #16]
 8014302:	2301      	movs	r3, #1
 8014304:	60a2      	str	r2, [r4, #8]
 8014306:	7563      	strb	r3, [r4, #21]
 8014308:	bd38      	pop	{r3, r4, r5, pc}
 801430a:	68a2      	ldr	r2, [r4, #8]
 801430c:	1a2d      	subs	r5, r5, r0
 801430e:	6923      	ldr	r3, [r4, #16]
 8014310:	4402      	add	r2, r0
 8014312:	4418      	add	r0, r3
 8014314:	60a2      	str	r2, [r4, #8]
 8014316:	6120      	str	r0, [r4, #16]
 8014318:	4629      	mov	r1, r5
 801431a:	2201      	movs	r2, #1
 801431c:	4620      	mov	r0, r4
 801431e:	f7ff ffc7 	bl	80142b0 <ucdr_check_final_buffer_behavior_array>
 8014322:	2800      	cmp	r0, #0
 8014324:	d1f1      	bne.n	801430a <ucdr_advance_buffer+0x1e>
 8014326:	2301      	movs	r3, #1
 8014328:	7563      	strb	r3, [r4, #21]
 801432a:	bd38      	pop	{r3, r4, r5, pc}

0801432c <rcl_get_zero_initialized_publisher>:
 801432c:	4b01      	ldr	r3, [pc, #4]	@ (8014334 <rcl_get_zero_initialized_publisher+0x8>)
 801432e:	6818      	ldr	r0, [r3, #0]
 8014330:	4770      	bx	lr
 8014332:	bf00      	nop
 8014334:	08024854 	.word	0x08024854

08014338 <rcl_publisher_init>:
 8014338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801433c:	b088      	sub	sp, #32
 801433e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8014340:	2e00      	cmp	r6, #0
 8014342:	d06b      	beq.n	801441c <rcl_publisher_init+0xe4>
 8014344:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 8014348:	4605      	mov	r5, r0
 801434a:	460f      	mov	r7, r1
 801434c:	4690      	mov	r8, r2
 801434e:	4650      	mov	r0, sl
 8014350:	4699      	mov	r9, r3
 8014352:	f001 f915 	bl	8015580 <rcutils_allocator_is_valid>
 8014356:	f080 0401 	eor.w	r4, r0, #1
 801435a:	b2e4      	uxtb	r4, r4
 801435c:	2c00      	cmp	r4, #0
 801435e:	d15d      	bne.n	801441c <rcl_publisher_init+0xe4>
 8014360:	2d00      	cmp	r5, #0
 8014362:	d05b      	beq.n	801441c <rcl_publisher_init+0xe4>
 8014364:	682b      	ldr	r3, [r5, #0]
 8014366:	b123      	cbz	r3, 8014372 <rcl_publisher_init+0x3a>
 8014368:	2464      	movs	r4, #100	@ 0x64
 801436a:	4620      	mov	r0, r4
 801436c:	b008      	add	sp, #32
 801436e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014372:	4638      	mov	r0, r7
 8014374:	f007 f848 	bl	801b408 <rcl_node_is_valid>
 8014378:	2800      	cmp	r0, #0
 801437a:	d054      	beq.n	8014426 <rcl_publisher_init+0xee>
 801437c:	f1b8 0f00 	cmp.w	r8, #0
 8014380:	d04c      	beq.n	801441c <rcl_publisher_init+0xe4>
 8014382:	fab9 f389 	clz	r3, r9
 8014386:	095b      	lsrs	r3, r3, #5
 8014388:	f1b9 0f00 	cmp.w	r9, #0
 801438c:	d046      	beq.n	801441c <rcl_publisher_init+0xe4>
 801438e:	aa07      	add	r2, sp, #28
 8014390:	9307      	str	r3, [sp, #28]
 8014392:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8014396:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801439a:	9205      	str	r2, [sp, #20]
 801439c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80143a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80143a4:	4649      	mov	r1, r9
 80143a6:	4638      	mov	r0, r7
 80143a8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80143ac:	f007 f884 	bl	801b4b8 <rcl_node_resolve_name>
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d14f      	bne.n	8014454 <rcl_publisher_init+0x11c>
 80143b4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80143b6:	20c8      	movs	r0, #200	@ 0xc8
 80143b8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80143ba:	4798      	blx	r3
 80143bc:	6028      	str	r0, [r5, #0]
 80143be:	2800      	cmp	r0, #0
 80143c0:	d050      	beq.n	8014464 <rcl_publisher_init+0x12c>
 80143c2:	4638      	mov	r0, r7
 80143c4:	f007 f842 	bl	801b44c <rcl_node_get_rmw_handle>
 80143c8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80143cc:	4641      	mov	r1, r8
 80143ce:	9a07      	ldr	r2, [sp, #28]
 80143d0:	9300      	str	r3, [sp, #0]
 80143d2:	4633      	mov	r3, r6
 80143d4:	682c      	ldr	r4, [r5, #0]
 80143d6:	f001 fa21 	bl	801581c <rmw_create_publisher>
 80143da:	682b      	ldr	r3, [r5, #0]
 80143dc:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 80143e0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80143e4:	b370      	cbz	r0, 8014444 <rcl_publisher_init+0x10c>
 80143e6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80143ea:	f001 fafb 	bl	80159e4 <rmw_publisher_get_actual_qos>
 80143ee:	682b      	ldr	r3, [r5, #0]
 80143f0:	4604      	mov	r4, r0
 80143f2:	b9d0      	cbnz	r0, 801442a <rcl_publisher_init+0xf2>
 80143f4:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 80143f8:	4631      	mov	r1, r6
 80143fa:	4618      	mov	r0, r3
 80143fc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8014400:	2270      	movs	r2, #112	@ 0x70
 8014402:	f00e f918 	bl	8022636 <memcpy>
 8014406:	683a      	ldr	r2, [r7, #0]
 8014408:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 801440c:	9807      	ldr	r0, [sp, #28]
 801440e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014410:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014412:	4798      	blx	r3
 8014414:	4620      	mov	r0, r4
 8014416:	b008      	add	sp, #32
 8014418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801441c:	240b      	movs	r4, #11
 801441e:	4620      	mov	r0, r4
 8014420:	b008      	add	sp, #32
 8014422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014426:	24c8      	movs	r4, #200	@ 0xc8
 8014428:	e79f      	b.n	801436a <rcl_publisher_init+0x32>
 801442a:	b1cb      	cbz	r3, 8014460 <rcl_publisher_init+0x128>
 801442c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014430:	b142      	cbz	r2, 8014444 <rcl_publisher_init+0x10c>
 8014432:	4638      	mov	r0, r7
 8014434:	f007 f80a 	bl	801b44c <rcl_node_get_rmw_handle>
 8014438:	682b      	ldr	r3, [r5, #0]
 801443a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 801443e:	f001 fae5 	bl	8015a0c <rmw_destroy_publisher>
 8014442:	682b      	ldr	r3, [r5, #0]
 8014444:	4618      	mov	r0, r3
 8014446:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8014448:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801444a:	2401      	movs	r4, #1
 801444c:	4790      	blx	r2
 801444e:	2300      	movs	r3, #0
 8014450:	602b      	str	r3, [r5, #0]
 8014452:	e7db      	b.n	801440c <rcl_publisher_init+0xd4>
 8014454:	2867      	cmp	r0, #103	@ 0x67
 8014456:	d007      	beq.n	8014468 <rcl_publisher_init+0x130>
 8014458:	2869      	cmp	r0, #105	@ 0x69
 801445a:	d005      	beq.n	8014468 <rcl_publisher_init+0x130>
 801445c:	280a      	cmp	r0, #10
 801445e:	d001      	beq.n	8014464 <rcl_publisher_init+0x12c>
 8014460:	2401      	movs	r4, #1
 8014462:	e7d3      	b.n	801440c <rcl_publisher_init+0xd4>
 8014464:	240a      	movs	r4, #10
 8014466:	e7d1      	b.n	801440c <rcl_publisher_init+0xd4>
 8014468:	2467      	movs	r4, #103	@ 0x67
 801446a:	e7cf      	b.n	801440c <rcl_publisher_init+0xd4>

0801446c <rcl_publisher_get_default_options>:
 801446c:	b570      	push	{r4, r5, r6, lr}
 801446e:	4d14      	ldr	r5, [pc, #80]	@ (80144c0 <rcl_publisher_get_default_options+0x54>)
 8014470:	b088      	sub	sp, #32
 8014472:	4604      	mov	r4, r0
 8014474:	2250      	movs	r2, #80	@ 0x50
 8014476:	4913      	ldr	r1, [pc, #76]	@ (80144c4 <rcl_publisher_get_default_options+0x58>)
 8014478:	4628      	mov	r0, r5
 801447a:	f00e f8dc 	bl	8022636 <memcpy>
 801447e:	a802      	add	r0, sp, #8
 8014480:	f001 f870 	bl	8015564 <rcutils_get_default_allocator>
 8014484:	f10d 0c08 	add.w	ip, sp, #8
 8014488:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801448c:	466e      	mov	r6, sp
 801448e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014492:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014496:	f8dc 3000 	ldr.w	r3, [ip]
 801449a:	4630      	mov	r0, r6
 801449c:	f8ce 3000 	str.w	r3, [lr]
 80144a0:	f001 f8fa 	bl	8015698 <rmw_get_default_publisher_options>
 80144a4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80144a8:	2270      	movs	r2, #112	@ 0x70
 80144aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80144ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80144b2:	4629      	mov	r1, r5
 80144b4:	4620      	mov	r0, r4
 80144b6:	f00e f8be 	bl	8022636 <memcpy>
 80144ba:	4620      	mov	r0, r4
 80144bc:	b008      	add	sp, #32
 80144be:	bd70      	pop	{r4, r5, r6, pc}
 80144c0:	240649e8 	.word	0x240649e8
 80144c4:	08024858 	.word	0x08024858

080144c8 <rcl_publish>:
 80144c8:	b1f8      	cbz	r0, 801450a <rcl_publish+0x42>
 80144ca:	6803      	ldr	r3, [r0, #0]
 80144cc:	b570      	push	{r4, r5, r6, lr}
 80144ce:	4604      	mov	r4, r0
 80144d0:	b1b3      	cbz	r3, 8014500 <rcl_publish+0x38>
 80144d2:	4616      	mov	r6, r2
 80144d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80144d8:	b192      	cbz	r2, 8014500 <rcl_publish+0x38>
 80144da:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80144de:	460d      	mov	r5, r1
 80144e0:	f006 fbb2 	bl	801ac48 <rcl_context_is_valid>
 80144e4:	b160      	cbz	r0, 8014500 <rcl_publish+0x38>
 80144e6:	6823      	ldr	r3, [r4, #0]
 80144e8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80144ec:	b140      	cbz	r0, 8014500 <rcl_publish+0x38>
 80144ee:	b155      	cbz	r5, 8014506 <rcl_publish+0x3e>
 80144f0:	4632      	mov	r2, r6
 80144f2:	4629      	mov	r1, r5
 80144f4:	f001 f932 	bl	801575c <rmw_publish>
 80144f8:	3800      	subs	r0, #0
 80144fa:	bf18      	it	ne
 80144fc:	2001      	movne	r0, #1
 80144fe:	bd70      	pop	{r4, r5, r6, pc}
 8014500:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014504:	bd70      	pop	{r4, r5, r6, pc}
 8014506:	200b      	movs	r0, #11
 8014508:	bd70      	pop	{r4, r5, r6, pc}
 801450a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801450e:	4770      	bx	lr

08014510 <rcl_publisher_is_valid>:
 8014510:	b1a0      	cbz	r0, 801453c <rcl_publisher_is_valid+0x2c>
 8014512:	6803      	ldr	r3, [r0, #0]
 8014514:	b510      	push	{r4, lr}
 8014516:	4604      	mov	r4, r0
 8014518:	b173      	cbz	r3, 8014538 <rcl_publisher_is_valid+0x28>
 801451a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801451e:	b15a      	cbz	r2, 8014538 <rcl_publisher_is_valid+0x28>
 8014520:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014524:	f006 fb90 	bl	801ac48 <rcl_context_is_valid>
 8014528:	b130      	cbz	r0, 8014538 <rcl_publisher_is_valid+0x28>
 801452a:	6823      	ldr	r3, [r4, #0]
 801452c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014530:	3800      	subs	r0, #0
 8014532:	bf18      	it	ne
 8014534:	2001      	movne	r0, #1
 8014536:	bd10      	pop	{r4, pc}
 8014538:	2000      	movs	r0, #0
 801453a:	bd10      	pop	{r4, pc}
 801453c:	2000      	movs	r0, #0
 801453e:	4770      	bx	lr

08014540 <rcl_publisher_is_valid_except_context>:
 8014540:	b130      	cbz	r0, 8014550 <rcl_publisher_is_valid_except_context+0x10>
 8014542:	6800      	ldr	r0, [r0, #0]
 8014544:	b120      	cbz	r0, 8014550 <rcl_publisher_is_valid_except_context+0x10>
 8014546:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801454a:	3800      	subs	r0, #0
 801454c:	bf18      	it	ne
 801454e:	2001      	movne	r0, #1
 8014550:	4770      	bx	lr
 8014552:	bf00      	nop

08014554 <_rclc_check_for_new_data>:
 8014554:	2800      	cmp	r0, #0
 8014556:	d046      	beq.n	80145e6 <_rclc_check_for_new_data+0x92>
 8014558:	4603      	mov	r3, r0
 801455a:	b530      	push	{r4, r5, lr}
 801455c:	7802      	ldrb	r2, [r0, #0]
 801455e:	b085      	sub	sp, #20
 8014560:	2a0a      	cmp	r2, #10
 8014562:	d842      	bhi.n	80145ea <_rclc_check_for_new_data+0x96>
 8014564:	e8df f002 	tbb	[pc, r2]
 8014568:	14181212 	.word	0x14181212
 801456c:	06060614 	.word	0x06060614
 8014570:	2e1a      	.short	0x2e1a
 8014572:	16          	.byte	0x16
 8014573:	00          	.byte	0x00
 8014574:	6a0a      	ldr	r2, [r1, #32]
 8014576:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014578:	2000      	movs	r0, #0
 801457a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801457e:	1a12      	subs	r2, r2, r0
 8014580:	bf18      	it	ne
 8014582:	2201      	movne	r2, #1
 8014584:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8014588:	b005      	add	sp, #20
 801458a:	bd30      	pop	{r4, r5, pc}
 801458c:	680a      	ldr	r2, [r1, #0]
 801458e:	e7f2      	b.n	8014576 <_rclc_check_for_new_data+0x22>
 8014590:	698a      	ldr	r2, [r1, #24]
 8014592:	e7f0      	b.n	8014576 <_rclc_check_for_new_data+0x22>
 8014594:	688a      	ldr	r2, [r1, #8]
 8014596:	e7ee      	b.n	8014576 <_rclc_check_for_new_data+0x22>
 8014598:	690a      	ldr	r2, [r1, #16]
 801459a:	e7ec      	b.n	8014576 <_rclc_check_for_new_data+0x22>
 801459c:	685c      	ldr	r4, [r3, #4]
 801459e:	4608      	mov	r0, r1
 80145a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80145a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80145a8:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 80145ac:	f104 0110 	add.w	r1, r4, #16
 80145b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80145b4:	9500      	str	r5, [sp, #0]
 80145b6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80145ba:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80145be:	f008 ff73 	bl	801d4a8 <rcl_action_client_wait_set_get_entities_ready>
 80145c2:	e7e1      	b.n	8014588 <_rclc_check_for_new_data+0x34>
 80145c4:	685c      	ldr	r4, [r3, #4]
 80145c6:	4608      	mov	r0, r1
 80145c8:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 80145cc:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 80145d0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80145d4:	e9cd 2100 	strd	r2, r1, [sp]
 80145d8:	f104 0220 	add.w	r2, r4, #32
 80145dc:	f104 0110 	add.w	r1, r4, #16
 80145e0:	f009 f97c 	bl	801d8dc <rcl_action_server_wait_set_get_entities_ready>
 80145e4:	e7d0      	b.n	8014588 <_rclc_check_for_new_data+0x34>
 80145e6:	200b      	movs	r0, #11
 80145e8:	4770      	bx	lr
 80145ea:	2001      	movs	r0, #1
 80145ec:	e7cc      	b.n	8014588 <_rclc_check_for_new_data+0x34>
 80145ee:	bf00      	nop

080145f0 <_rclc_take_new_data>:
 80145f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145f2:	b09b      	sub	sp, #108	@ 0x6c
 80145f4:	2800      	cmp	r0, #0
 80145f6:	f000 8088 	beq.w	801470a <_rclc_take_new_data+0x11a>
 80145fa:	7803      	ldrb	r3, [r0, #0]
 80145fc:	4604      	mov	r4, r0
 80145fe:	2b0a      	cmp	r3, #10
 8014600:	f200 8167 	bhi.w	80148d2 <_rclc_take_new_data+0x2e2>
 8014604:	e8df f003 	tbb	[pc, r3]
 8014608:	44152d2d 	.word	0x44152d2d
 801460c:	19191944 	.word	0x19191944
 8014610:	065a      	.short	0x065a
 8014612:	15          	.byte	0x15
 8014613:	00          	.byte	0x00
 8014614:	6840      	ldr	r0, [r0, #4]
 8014616:	f890 3020 	ldrb.w	r3, [r0, #32]
 801461a:	2b00      	cmp	r3, #0
 801461c:	f040 80b2 	bne.w	8014784 <_rclc_take_new_data+0x194>
 8014620:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8014624:	2b00      	cmp	r3, #0
 8014626:	f040 80e4 	bne.w	80147f2 <_rclc_take_new_data+0x202>
 801462a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801462e:	2b00      	cmp	r3, #0
 8014630:	d16f      	bne.n	8014712 <_rclc_take_new_data+0x122>
 8014632:	2500      	movs	r5, #0
 8014634:	4628      	mov	r0, r5
 8014636:	b01b      	add	sp, #108	@ 0x6c
 8014638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801463a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801463c:	6a0b      	ldr	r3, [r1, #32]
 801463e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d0f5      	beq.n	8014632 <_rclc_take_new_data+0x42>
 8014646:	6882      	ldr	r2, [r0, #8]
 8014648:	f100 0110 	add.w	r1, r0, #16
 801464c:	6840      	ldr	r0, [r0, #4]
 801464e:	f007 f9c9 	bl	801b9e4 <rcl_take_request>
 8014652:	4605      	mov	r5, r0
 8014654:	2800      	cmp	r0, #0
 8014656:	d0ec      	beq.n	8014632 <_rclc_take_new_data+0x42>
 8014658:	f240 2359 	movw	r3, #601	@ 0x259
 801465c:	4298      	cmp	r0, r3
 801465e:	d013      	beq.n	8014688 <_rclc_take_new_data+0x98>
 8014660:	e029      	b.n	80146b6 <_rclc_take_new_data+0xc6>
 8014662:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8014664:	680b      	ldr	r3, [r1, #0]
 8014666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d0e1      	beq.n	8014632 <_rclc_take_new_data+0x42>
 801466e:	2300      	movs	r3, #0
 8014670:	aa0a      	add	r2, sp, #40	@ 0x28
 8014672:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8014676:	f007 faf9 	bl	801bc6c <rcl_take>
 801467a:	4605      	mov	r5, r0
 801467c:	2800      	cmp	r0, #0
 801467e:	d0d9      	beq.n	8014634 <_rclc_take_new_data+0x44>
 8014680:	f240 1391 	movw	r3, #401	@ 0x191
 8014684:	4298      	cmp	r0, r3
 8014686:	d116      	bne.n	80146b6 <_rclc_take_new_data+0xc6>
 8014688:	2300      	movs	r3, #0
 801468a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801468e:	e7d1      	b.n	8014634 <_rclc_take_new_data+0x44>
 8014690:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8014692:	698b      	ldr	r3, [r1, #24]
 8014694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d0ca      	beq.n	8014632 <_rclc_take_new_data+0x42>
 801469c:	6882      	ldr	r2, [r0, #8]
 801469e:	f100 0110 	add.w	r1, r0, #16
 80146a2:	6840      	ldr	r0, [r0, #4]
 80146a4:	f006 fa60 	bl	801ab68 <rcl_take_response>
 80146a8:	4605      	mov	r5, r0
 80146aa:	2800      	cmp	r0, #0
 80146ac:	d0c1      	beq.n	8014632 <_rclc_take_new_data+0x42>
 80146ae:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80146b2:	4298      	cmp	r0, r3
 80146b4:	d0be      	beq.n	8014634 <_rclc_take_new_data+0x44>
 80146b6:	f000 ff87 	bl	80155c8 <rcutils_reset_error>
 80146ba:	e7bb      	b.n	8014634 <_rclc_take_new_data+0x44>
 80146bc:	6840      	ldr	r0, [r0, #4]
 80146be:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d17d      	bne.n	80147c2 <_rclc_take_new_data+0x1d2>
 80146c6:	69c3      	ldr	r3, [r0, #28]
 80146c8:	b11b      	cbz	r3, 80146d2 <_rclc_take_new_data+0xe2>
 80146ca:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d144      	bne.n	801475c <_rclc_take_new_data+0x16c>
 80146d2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f040 80ac 	bne.w	8014834 <_rclc_take_new_data+0x244>
 80146dc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d0a6      	beq.n	8014632 <_rclc_take_new_data+0x42>
 80146e4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80146e6:	a90a      	add	r1, sp, #40	@ 0x28
 80146e8:	3010      	adds	r0, #16
 80146ea:	f008 fdb5 	bl	801d258 <rcl_action_take_result_response>
 80146ee:	4605      	mov	r5, r0
 80146f0:	2800      	cmp	r0, #0
 80146f2:	d1e0      	bne.n	80146b6 <_rclc_take_new_data+0xc6>
 80146f4:	6860      	ldr	r0, [r4, #4]
 80146f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80146fa:	f009 fa1f 	bl	801db3c <rclc_action_find_handle_by_result_request_sequence_number>
 80146fe:	2800      	cmp	r0, #0
 8014700:	d098      	beq.n	8014634 <_rclc_take_new_data+0x44>
 8014702:	2301      	movs	r3, #1
 8014704:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8014708:	e794      	b.n	8014634 <_rclc_take_new_data+0x44>
 801470a:	250b      	movs	r5, #11
 801470c:	4628      	mov	r0, r5
 801470e:	b01b      	add	sp, #108	@ 0x6c
 8014710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014712:	ae04      	add	r6, sp, #16
 8014714:	3010      	adds	r0, #16
 8014716:	aa0a      	add	r2, sp, #40	@ 0x28
 8014718:	4631      	mov	r1, r6
 801471a:	f009 f813 	bl	801d744 <rcl_action_take_cancel_request>
 801471e:	4605      	mov	r5, r0
 8014720:	2800      	cmp	r0, #0
 8014722:	d1c8      	bne.n	80146b6 <_rclc_take_new_data+0xc6>
 8014724:	a90a      	add	r1, sp, #40	@ 0x28
 8014726:	6860      	ldr	r0, [r4, #4]
 8014728:	f009 f9c8 	bl	801dabc <rclc_action_find_goal_handle_by_uuid>
 801472c:	4607      	mov	r7, r0
 801472e:	2800      	cmp	r0, #0
 8014730:	f000 80bb 	beq.w	80148aa <_rclc_take_new_data+0x2ba>
 8014734:	2101      	movs	r1, #1
 8014736:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801473a:	f009 f949 	bl	801d9d0 <rcl_action_transition_goal_state>
 801473e:	2803      	cmp	r0, #3
 8014740:	4684      	mov	ip, r0
 8014742:	f040 80a7 	bne.w	8014894 <_rclc_take_new_data+0x2a4>
 8014746:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801474a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801474c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801474e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014752:	e884 0003 	stmia.w	r4, {r0, r1}
 8014756:	f887 c008 	strb.w	ip, [r7, #8]
 801475a:	e76b      	b.n	8014634 <_rclc_take_new_data+0x44>
 801475c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801475e:	3010      	adds	r0, #16
 8014760:	f008 fdfa 	bl	801d358 <rcl_action_take_feedback>
 8014764:	4605      	mov	r5, r0
 8014766:	2800      	cmp	r0, #0
 8014768:	d1a5      	bne.n	80146b6 <_rclc_take_new_data+0xc6>
 801476a:	6860      	ldr	r0, [r4, #4]
 801476c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801476e:	f009 f9a5 	bl	801dabc <rclc_action_find_goal_handle_by_uuid>
 8014772:	4603      	mov	r3, r0
 8014774:	2800      	cmp	r0, #0
 8014776:	f000 80a3 	beq.w	80148c0 <_rclc_take_new_data+0x2d0>
 801477a:	2201      	movs	r2, #1
 801477c:	6860      	ldr	r0, [r4, #4]
 801477e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8014782:	e7a6      	b.n	80146d2 <_rclc_take_new_data+0xe2>
 8014784:	f009 f974 	bl	801da70 <rclc_action_take_goal_handle>
 8014788:	4606      	mov	r6, r0
 801478a:	6860      	ldr	r0, [r4, #4]
 801478c:	2e00      	cmp	r6, #0
 801478e:	f43f af47 	beq.w	8014620 <_rclc_take_new_data+0x30>
 8014792:	6070      	str	r0, [r6, #4]
 8014794:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8014798:	69f2      	ldr	r2, [r6, #28]
 801479a:	3010      	adds	r0, #16
 801479c:	f008 ff1a 	bl	801d5d4 <rcl_action_take_goal_request>
 80147a0:	4605      	mov	r5, r0
 80147a2:	2800      	cmp	r0, #0
 80147a4:	f040 808e 	bne.w	80148c4 <_rclc_take_new_data+0x2d4>
 80147a8:	69f7      	ldr	r7, [r6, #28]
 80147aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80147ac:	7235      	strb	r5, [r6, #8]
 80147ae:	f8c6 0009 	str.w	r0, [r6, #9]
 80147b2:	f8c6 100d 	str.w	r1, [r6, #13]
 80147b6:	6860      	ldr	r0, [r4, #4]
 80147b8:	f8c6 2011 	str.w	r2, [r6, #17]
 80147bc:	f8c6 3015 	str.w	r3, [r6, #21]
 80147c0:	e72e      	b.n	8014620 <_rclc_take_new_data+0x30>
 80147c2:	aa04      	add	r2, sp, #16
 80147c4:	a90a      	add	r1, sp, #40	@ 0x28
 80147c6:	3010      	adds	r0, #16
 80147c8:	f008 fcce 	bl	801d168 <rcl_action_take_goal_response>
 80147cc:	4605      	mov	r5, r0
 80147ce:	2800      	cmp	r0, #0
 80147d0:	f47f af71 	bne.w	80146b6 <_rclc_take_new_data+0xc6>
 80147d4:	6860      	ldr	r0, [r4, #4]
 80147d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80147da:	f009 f99d 	bl	801db18 <rclc_action_find_handle_by_goal_request_sequence_number>
 80147de:	b130      	cbz	r0, 80147ee <_rclc_take_new_data+0x1fe>
 80147e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80147e4:	2201      	movs	r2, #1
 80147e6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80147ea:	f880 2020 	strb.w	r2, [r0, #32]
 80147ee:	6860      	ldr	r0, [r4, #4]
 80147f0:	e769      	b.n	80146c6 <_rclc_take_new_data+0xd6>
 80147f2:	3010      	adds	r0, #16
 80147f4:	aa04      	add	r2, sp, #16
 80147f6:	a90a      	add	r1, sp, #40	@ 0x28
 80147f8:	f008 ff64 	bl	801d6c4 <rcl_action_take_result_request>
 80147fc:	4605      	mov	r5, r0
 80147fe:	2800      	cmp	r0, #0
 8014800:	f47f af59 	bne.w	80146b6 <_rclc_take_new_data+0xc6>
 8014804:	a904      	add	r1, sp, #16
 8014806:	6860      	ldr	r0, [r4, #4]
 8014808:	f009 f958 	bl	801dabc <rclc_action_find_goal_handle_by_uuid>
 801480c:	4607      	mov	r7, r0
 801480e:	b160      	cbz	r0, 801482a <_rclc_take_new_data+0x23a>
 8014810:	ad0a      	add	r5, sp, #40	@ 0x28
 8014812:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8014816:	f04f 0c02 	mov.w	ip, #2
 801481a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801481c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801481e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014822:	e886 0003 	stmia.w	r6, {r0, r1}
 8014826:	f887 c008 	strb.w	ip, [r7, #8]
 801482a:	6860      	ldr	r0, [r4, #4]
 801482c:	2300      	movs	r3, #0
 801482e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8014832:	e6fa      	b.n	801462a <_rclc_take_new_data+0x3a>
 8014834:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8014838:	a90a      	add	r1, sp, #40	@ 0x28
 801483a:	3010      	adds	r0, #16
 801483c:	f008 fd4c 	bl	801d2d8 <rcl_action_take_cancel_response>
 8014840:	4605      	mov	r5, r0
 8014842:	2800      	cmp	r0, #0
 8014844:	f47f af37 	bne.w	80146b6 <_rclc_take_new_data+0xc6>
 8014848:	6860      	ldr	r0, [r4, #4]
 801484a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801484e:	f009 f987 	bl	801db60 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8014852:	4606      	mov	r6, r0
 8014854:	6860      	ldr	r0, [r4, #4]
 8014856:	2e00      	cmp	r6, #0
 8014858:	f43f af40 	beq.w	80146dc <_rclc_take_new_data+0xec>
 801485c:	2701      	movs	r7, #1
 801485e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014860:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8014862:	2b00      	cmp	r3, #0
 8014864:	f43f af3a 	beq.w	80146dc <_rclc_take_new_data+0xec>
 8014868:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801486a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801486e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8014872:	f009 f923 	bl	801dabc <rclc_action_find_goal_handle_by_uuid>
 8014876:	b138      	cbz	r0, 8014888 <_rclc_take_new_data+0x298>
 8014878:	6860      	ldr	r0, [r4, #4]
 801487a:	3501      	adds	r5, #1
 801487c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8014880:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014882:	42ab      	cmp	r3, r5
 8014884:	d8f0      	bhi.n	8014868 <_rclc_take_new_data+0x278>
 8014886:	e729      	b.n	80146dc <_rclc_take_new_data+0xec>
 8014888:	6860      	ldr	r0, [r4, #4]
 801488a:	3501      	adds	r5, #1
 801488c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801488e:	42ab      	cmp	r3, r5
 8014890:	d8ea      	bhi.n	8014868 <_rclc_take_new_data+0x278>
 8014892:	e723      	b.n	80146dc <_rclc_take_new_data+0xec>
 8014894:	ab06      	add	r3, sp, #24
 8014896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014898:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801489c:	2103      	movs	r1, #3
 801489e:	6860      	ldr	r0, [r4, #4]
 80148a0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148a4:	f009 f9d0 	bl	801dc48 <rclc_action_server_goal_cancel_reject>
 80148a8:	e6c4      	b.n	8014634 <_rclc_take_new_data+0x44>
 80148aa:	ab06      	add	r3, sp, #24
 80148ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80148ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80148b2:	2102      	movs	r1, #2
 80148b4:	6860      	ldr	r0, [r4, #4]
 80148b6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148ba:	f009 f9c5 	bl	801dc48 <rclc_action_server_goal_cancel_reject>
 80148be:	e6b9      	b.n	8014634 <_rclc_take_new_data+0x44>
 80148c0:	6860      	ldr	r0, [r4, #4]
 80148c2:	e706      	b.n	80146d2 <_rclc_take_new_data+0xe2>
 80148c4:	4631      	mov	r1, r6
 80148c6:	6860      	ldr	r0, [r4, #4]
 80148c8:	f009 f8e2 	bl	801da90 <rclc_action_remove_used_goal_handle>
 80148cc:	f000 fe7c 	bl	80155c8 <rcutils_reset_error>
 80148d0:	e6b0      	b.n	8014634 <_rclc_take_new_data+0x44>
 80148d2:	2501      	movs	r5, #1
 80148d4:	e6ae      	b.n	8014634 <_rclc_take_new_data+0x44>
 80148d6:	bf00      	nop

080148d8 <_rclc_execute.part.0>:
 80148d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148da:	7803      	ldrb	r3, [r0, #0]
 80148dc:	b085      	sub	sp, #20
 80148de:	4604      	mov	r4, r0
 80148e0:	2b0a      	cmp	r3, #10
 80148e2:	f200 8139 	bhi.w	8014b58 <_rclc_execute.part.0+0x280>
 80148e6:	e8df f003 	tbb	[pc, r3]
 80148ea:	4268      	.short	0x4268
 80148ec:	06a75b4d 	.word	0x06a75b4d
 80148f0:	721d0606 	.word	0x721d0606
 80148f4:	62          	.byte	0x62
 80148f5:	00          	.byte	0x00
 80148f6:	2b06      	cmp	r3, #6
 80148f8:	f000 8126 	beq.w	8014b48 <_rclc_execute.part.0+0x270>
 80148fc:	2b07      	cmp	r3, #7
 80148fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014900:	f040 811c 	bne.w	8014b3c <_rclc_execute.part.0+0x264>
 8014904:	f104 0510 	add.w	r5, r4, #16
 8014908:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 801490c:	6880      	ldr	r0, [r0, #8]
 801490e:	4798      	blx	r3
 8014910:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014912:	4629      	mov	r1, r5
 8014914:	6860      	ldr	r0, [r4, #4]
 8014916:	f007 f8a5 	bl	801ba64 <rcl_send_response>
 801491a:	4604      	mov	r4, r0
 801491c:	b378      	cbz	r0, 801497e <_rclc_execute.part.0+0xa6>
 801491e:	f000 fe53 	bl	80155c8 <rcutils_reset_error>
 8014922:	e02c      	b.n	801497e <_rclc_execute.part.0+0xa6>
 8014924:	6840      	ldr	r0, [r0, #4]
 8014926:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801492a:	2b00      	cmp	r3, #0
 801492c:	f000 808e 	beq.w	8014a4c <_rclc_execute.part.0+0x174>
 8014930:	2600      	movs	r6, #0
 8014932:	2701      	movs	r7, #1
 8014934:	e004      	b.n	8014940 <_rclc_execute.part.0+0x68>
 8014936:	f009 f875 	bl	801da24 <rclc_action_send_result_request>
 801493a:	b998      	cbnz	r0, 8014964 <_rclc_execute.part.0+0x8c>
 801493c:	722f      	strb	r7, [r5, #8]
 801493e:	6860      	ldr	r0, [r4, #4]
 8014940:	f009 f920 	bl	801db84 <rclc_action_find_first_handle_with_goal_response>
 8014944:	4605      	mov	r5, r0
 8014946:	2800      	cmp	r0, #0
 8014948:	d07f      	beq.n	8014a4a <_rclc_execute.part.0+0x172>
 801494a:	6863      	ldr	r3, [r4, #4]
 801494c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801494e:	699b      	ldr	r3, [r3, #24]
 8014950:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8014954:	f885 6020 	strb.w	r6, [r5, #32]
 8014958:	4798      	blx	r3
 801495a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 801495e:	4628      	mov	r0, r5
 8014960:	2b00      	cmp	r3, #0
 8014962:	d1e8      	bne.n	8014936 <_rclc_execute.part.0+0x5e>
 8014964:	6860      	ldr	r0, [r4, #4]
 8014966:	4629      	mov	r1, r5
 8014968:	f009 f892 	bl	801da90 <rclc_action_remove_used_goal_handle>
 801496c:	e7e7      	b.n	801493e <_rclc_execute.part.0+0x66>
 801496e:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8014972:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8014976:	b100      	cbz	r0, 801497a <_rclc_execute.part.0+0xa2>
 8014978:	68a0      	ldr	r0, [r4, #8]
 801497a:	2400      	movs	r4, #0
 801497c:	4798      	blx	r3
 801497e:	4620      	mov	r0, r4
 8014980:	b005      	add	sp, #20
 8014982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014984:	6840      	ldr	r0, [r0, #4]
 8014986:	f007 fca5 	bl	801c2d4 <rcl_timer_call>
 801498a:	f240 3321 	movw	r3, #801	@ 0x321
 801498e:	4604      	mov	r4, r0
 8014990:	4298      	cmp	r0, r3
 8014992:	d001      	beq.n	8014998 <_rclc_execute.part.0+0xc0>
 8014994:	2800      	cmp	r0, #0
 8014996:	d1c2      	bne.n	801491e <_rclc_execute.part.0+0x46>
 8014998:	2400      	movs	r4, #0
 801499a:	4620      	mov	r0, r4
 801499c:	b005      	add	sp, #20
 801499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149a0:	2400      	movs	r4, #0
 80149a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80149a4:	6880      	ldr	r0, [r0, #8]
 80149a6:	4798      	blx	r3
 80149a8:	4620      	mov	r0, r4
 80149aa:	b005      	add	sp, #20
 80149ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149ae:	2400      	movs	r4, #0
 80149b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80149b2:	4798      	blx	r3
 80149b4:	4620      	mov	r0, r4
 80149b6:	b005      	add	sp, #20
 80149b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149ba:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80149be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149c0:	b100      	cbz	r0, 80149c4 <_rclc_execute.part.0+0xec>
 80149c2:	68a0      	ldr	r0, [r4, #8]
 80149c4:	2400      	movs	r4, #0
 80149c6:	4798      	blx	r3
 80149c8:	4620      	mov	r0, r4
 80149ca:	b005      	add	sp, #20
 80149cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149ce:	6840      	ldr	r0, [r0, #4]
 80149d0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80149d4:	bb3b      	cbnz	r3, 8014a26 <_rclc_execute.part.0+0x14e>
 80149d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d07d      	beq.n	8014ada <_rclc_execute.part.0+0x202>
 80149de:	f640 0634 	movw	r6, #2100	@ 0x834
 80149e2:	2701      	movs	r7, #1
 80149e4:	e007      	b.n	80149f6 <_rclc_execute.part.0+0x11e>
 80149e6:	4628      	mov	r0, r5
 80149e8:	f009 f8e4 	bl	801dbb4 <rclc_action_server_response_goal_request>
 80149ec:	4629      	mov	r1, r5
 80149ee:	6860      	ldr	r0, [r4, #4]
 80149f0:	f009 f84e 	bl	801da90 <rclc_action_remove_used_goal_handle>
 80149f4:	6860      	ldr	r0, [r4, #4]
 80149f6:	2100      	movs	r1, #0
 80149f8:	f009 f876 	bl	801dae8 <rclc_action_find_first_handle_by_status>
 80149fc:	4605      	mov	r5, r0
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d068      	beq.n	8014ad4 <_rclc_execute.part.0+0x1fc>
 8014a02:	6863      	ldr	r3, [r4, #4]
 8014a04:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014a06:	699b      	ldr	r3, [r3, #24]
 8014a08:	4798      	blx	r3
 8014a0a:	42b0      	cmp	r0, r6
 8014a0c:	f04f 0100 	mov.w	r1, #0
 8014a10:	d1e9      	bne.n	80149e6 <_rclc_execute.part.0+0x10e>
 8014a12:	2101      	movs	r1, #1
 8014a14:	4628      	mov	r0, r5
 8014a16:	f009 f8cd 	bl	801dbb4 <rclc_action_server_response_goal_request>
 8014a1a:	722f      	strb	r7, [r5, #8]
 8014a1c:	e7ea      	b.n	80149f4 <_rclc_execute.part.0+0x11c>
 8014a1e:	6848      	ldr	r0, [r1, #4]
 8014a20:	f009 f836 	bl	801da90 <rclc_action_remove_used_goal_handle>
 8014a24:	6860      	ldr	r0, [r4, #4]
 8014a26:	f009 f86b 	bl	801db00 <rclc_action_find_first_terminated_handle>
 8014a2a:	4601      	mov	r1, r0
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	d1f6      	bne.n	8014a1e <_rclc_execute.part.0+0x146>
 8014a30:	6860      	ldr	r0, [r4, #4]
 8014a32:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8014a36:	e7ce      	b.n	80149d6 <_rclc_execute.part.0+0xfe>
 8014a38:	2400      	movs	r4, #0
 8014a3a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a3c:	f100 0110 	add.w	r1, r0, #16
 8014a40:	6880      	ldr	r0, [r0, #8]
 8014a42:	4798      	blx	r3
 8014a44:	4620      	mov	r0, r4
 8014a46:	b005      	add	sp, #20
 8014a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a4a:	6860      	ldr	r0, [r4, #4]
 8014a4c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014a50:	b18b      	cbz	r3, 8014a76 <_rclc_execute.part.0+0x19e>
 8014a52:	68c5      	ldr	r5, [r0, #12]
 8014a54:	b32d      	cbz	r5, 8014aa2 <_rclc_execute.part.0+0x1ca>
 8014a56:	2600      	movs	r6, #0
 8014a58:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8014a5c:	b143      	cbz	r3, 8014a70 <_rclc_execute.part.0+0x198>
 8014a5e:	69c3      	ldr	r3, [r0, #28]
 8014a60:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8014a64:	b123      	cbz	r3, 8014a70 <_rclc_execute.part.0+0x198>
 8014a66:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014a68:	4628      	mov	r0, r5
 8014a6a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014a6c:	4798      	blx	r3
 8014a6e:	6860      	ldr	r0, [r4, #4]
 8014a70:	682d      	ldr	r5, [r5, #0]
 8014a72:	2d00      	cmp	r5, #0
 8014a74:	d1f0      	bne.n	8014a58 <_rclc_execute.part.0+0x180>
 8014a76:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014a7a:	b193      	cbz	r3, 8014aa2 <_rclc_execute.part.0+0x1ca>
 8014a7c:	68c5      	ldr	r5, [r0, #12]
 8014a7e:	b185      	cbz	r5, 8014aa2 <_rclc_execute.part.0+0x1ca>
 8014a80:	2600      	movs	r6, #0
 8014a82:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8014a86:	b14b      	cbz	r3, 8014a9c <_rclc_execute.part.0+0x1c4>
 8014a88:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014a8a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8014a8e:	b12b      	cbz	r3, 8014a9c <_rclc_execute.part.0+0x1c4>
 8014a90:	4628      	mov	r0, r5
 8014a92:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8014a96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014a98:	4798      	blx	r3
 8014a9a:	6860      	ldr	r0, [r4, #4]
 8014a9c:	682d      	ldr	r5, [r5, #0]
 8014a9e:	2d00      	cmp	r5, #0
 8014aa0:	d1ef      	bne.n	8014a82 <_rclc_execute.part.0+0x1aa>
 8014aa2:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	f43f af76 	beq.w	8014998 <_rclc_execute.part.0+0xc0>
 8014aac:	2700      	movs	r7, #0
 8014aae:	e00b      	b.n	8014ac8 <_rclc_execute.part.0+0x1f0>
 8014ab0:	6863      	ldr	r3, [r4, #4]
 8014ab2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014ab4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014ab6:	6a1e      	ldr	r6, [r3, #32]
 8014ab8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8014abc:	47b0      	blx	r6
 8014abe:	6860      	ldr	r0, [r4, #4]
 8014ac0:	4629      	mov	r1, r5
 8014ac2:	f008 ffe5 	bl	801da90 <rclc_action_remove_used_goal_handle>
 8014ac6:	6860      	ldr	r0, [r4, #4]
 8014ac8:	f009 f868 	bl	801db9c <rclc_action_find_first_handle_with_result_response>
 8014acc:	4605      	mov	r5, r0
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	d1ee      	bne.n	8014ab0 <_rclc_execute.part.0+0x1d8>
 8014ad2:	e761      	b.n	8014998 <_rclc_execute.part.0+0xc0>
 8014ad4:	6860      	ldr	r0, [r4, #4]
 8014ad6:	f880 5020 	strb.w	r5, [r0, #32]
 8014ada:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	f43f af5a 	beq.w	8014998 <_rclc_execute.part.0+0xc0>
 8014ae4:	68c5      	ldr	r5, [r0, #12]
 8014ae6:	b1b5      	cbz	r5, 8014b16 <_rclc_execute.part.0+0x23e>
 8014ae8:	2602      	movs	r6, #2
 8014aea:	e001      	b.n	8014af0 <_rclc_execute.part.0+0x218>
 8014aec:	682d      	ldr	r5, [r5, #0]
 8014aee:	b195      	cbz	r5, 8014b16 <_rclc_execute.part.0+0x23e>
 8014af0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014af4:	2b03      	cmp	r3, #3
 8014af6:	d1f9      	bne.n	8014aec <_rclc_execute.part.0+0x214>
 8014af8:	69c3      	ldr	r3, [r0, #28]
 8014afa:	4628      	mov	r0, r5
 8014afc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014afe:	4798      	blx	r3
 8014b00:	4603      	mov	r3, r0
 8014b02:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8014b06:	4628      	mov	r0, r5
 8014b08:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014b0c:	b143      	cbz	r3, 8014b20 <_rclc_execute.part.0+0x248>
 8014b0e:	f009 f86f 	bl	801dbf0 <rclc_action_server_goal_cancel_accept>
 8014b12:	6860      	ldr	r0, [r4, #4]
 8014b14:	e7ea      	b.n	8014aec <_rclc_execute.part.0+0x214>
 8014b16:	2300      	movs	r3, #0
 8014b18:	461c      	mov	r4, r3
 8014b1a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8014b1e:	e72e      	b.n	801497e <_rclc_execute.part.0+0xa6>
 8014b20:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014b22:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8014b26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014b2a:	2101      	movs	r1, #1
 8014b2c:	6860      	ldr	r0, [r4, #4]
 8014b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b32:	f009 f889 	bl	801dc48 <rclc_action_server_goal_cancel_reject>
 8014b36:	722e      	strb	r6, [r5, #8]
 8014b38:	6860      	ldr	r0, [r4, #4]
 8014b3a:	e7d7      	b.n	8014aec <_rclc_execute.part.0+0x214>
 8014b3c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014b3e:	f104 0510 	add.w	r5, r4, #16
 8014b42:	6880      	ldr	r0, [r0, #8]
 8014b44:	4798      	blx	r3
 8014b46:	e6e3      	b.n	8014910 <_rclc_execute.part.0+0x38>
 8014b48:	f100 0510 	add.w	r5, r0, #16
 8014b4c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014b4e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8014b50:	4629      	mov	r1, r5
 8014b52:	6880      	ldr	r0, [r0, #8]
 8014b54:	4798      	blx	r3
 8014b56:	e6db      	b.n	8014910 <_rclc_execute.part.0+0x38>
 8014b58:	2401      	movs	r4, #1
 8014b5a:	e710      	b.n	801497e <_rclc_execute.part.0+0xa6>

08014b5c <rclc_executor_trigger_any>:
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	d03d      	beq.n	8014bdc <rclc_executor_trigger_any+0x80>
 8014b60:	2900      	cmp	r1, #0
 8014b62:	d03c      	beq.n	8014bde <rclc_executor_trigger_any+0x82>
 8014b64:	4603      	mov	r3, r0
 8014b66:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	d035      	beq.n	8014bdc <rclc_executor_trigger_any+0x80>
 8014b70:	b430      	push	{r4, r5}
 8014b72:	f893 c000 	ldrb.w	ip, [r3]
 8014b76:	f1bc 0f08 	cmp.w	ip, #8
 8014b7a:	d11d      	bne.n	8014bb8 <rclc_executor_trigger_any+0x5c>
 8014b7c:	685c      	ldr	r4, [r3, #4]
 8014b7e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8014b80:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8014b84:	d105      	bne.n	8014b92 <rclc_executor_trigger_any+0x36>
 8014b86:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8014b8a:	b910      	cbnz	r0, 8014b92 <rclc_executor_trigger_any+0x36>
 8014b8c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8014b90:	b128      	cbz	r0, 8014b9e <rclc_executor_trigger_any+0x42>
 8014b92:	bc30      	pop	{r4, r5}
 8014b94:	4770      	bx	lr
 8014b96:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	d1f9      	bne.n	8014b92 <rclc_executor_trigger_any+0x36>
 8014b9e:	3201      	adds	r2, #1
 8014ba0:	3340      	adds	r3, #64	@ 0x40
 8014ba2:	4291      	cmp	r1, r2
 8014ba4:	d017      	beq.n	8014bd6 <rclc_executor_trigger_any+0x7a>
 8014ba6:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8014baa:	2800      	cmp	r0, #0
 8014bac:	d0f1      	beq.n	8014b92 <rclc_executor_trigger_any+0x36>
 8014bae:	f893 c000 	ldrb.w	ip, [r3]
 8014bb2:	f1bc 0f08 	cmp.w	ip, #8
 8014bb6:	d0e1      	beq.n	8014b7c <rclc_executor_trigger_any+0x20>
 8014bb8:	f1bc 0f09 	cmp.w	ip, #9
 8014bbc:	d1eb      	bne.n	8014b96 <rclc_executor_trigger_any+0x3a>
 8014bbe:	685c      	ldr	r4, [r3, #4]
 8014bc0:	6a25      	ldr	r5, [r4, #32]
 8014bc2:	2d00      	cmp	r5, #0
 8014bc4:	d1e5      	bne.n	8014b92 <rclc_executor_trigger_any+0x36>
 8014bc6:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d1e1      	bne.n	8014b92 <rclc_executor_trigger_any+0x36>
 8014bce:	3201      	adds	r2, #1
 8014bd0:	3340      	adds	r3, #64	@ 0x40
 8014bd2:	4291      	cmp	r1, r2
 8014bd4:	d1e7      	bne.n	8014ba6 <rclc_executor_trigger_any+0x4a>
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	bc30      	pop	{r4, r5}
 8014bda:	4770      	bx	lr
 8014bdc:	4770      	bx	lr
 8014bde:	4608      	mov	r0, r1
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop

08014be4 <rclc_executor_get_zero_initialized_executor>:
 8014be4:	b510      	push	{r4, lr}
 8014be6:	4604      	mov	r4, r0
 8014be8:	2288      	movs	r2, #136	@ 0x88
 8014bea:	4902      	ldr	r1, [pc, #8]	@ (8014bf4 <rclc_executor_get_zero_initialized_executor+0x10>)
 8014bec:	f00d fd23 	bl	8022636 <memcpy>
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	bd10      	pop	{r4, pc}
 8014bf4:	080248a8 	.word	0x080248a8

08014bf8 <rclc_executor_init>:
 8014bf8:	2900      	cmp	r1, #0
 8014bfa:	d06a      	beq.n	8014cd2 <rclc_executor_init+0xda>
 8014bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c00:	4605      	mov	r5, r0
 8014c02:	b0b0      	sub	sp, #192	@ 0xc0
 8014c04:	2800      	cmp	r0, #0
 8014c06:	d05c      	beq.n	8014cc2 <rclc_executor_init+0xca>
 8014c08:	4616      	mov	r6, r2
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	4688      	mov	r8, r1
 8014c0e:	461f      	mov	r7, r3
 8014c10:	f000 fcb6 	bl	8015580 <rcutils_allocator_is_valid>
 8014c14:	2e00      	cmp	r6, #0
 8014c16:	d054      	beq.n	8014cc2 <rclc_executor_init+0xca>
 8014c18:	f080 0401 	eor.w	r4, r0, #1
 8014c1c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8014c20:	d14f      	bne.n	8014cc2 <rclc_executor_init+0xca>
 8014c22:	2288      	movs	r2, #136	@ 0x88
 8014c24:	4930      	ldr	r1, [pc, #192]	@ (8014ce8 <rclc_executor_init+0xf0>)
 8014c26:	a80e      	add	r0, sp, #56	@ 0x38
 8014c28:	f00d fd05 	bl	8022636 <memcpy>
 8014c2c:	a90e      	add	r1, sp, #56	@ 0x38
 8014c2e:	2288      	movs	r2, #136	@ 0x88
 8014c30:	4628      	mov	r0, r5
 8014c32:	f00d fd00 	bl	8022636 <memcpy>
 8014c36:	4668      	mov	r0, sp
 8014c38:	f8c5 8000 	str.w	r8, [r5]
 8014c3c:	60ae      	str	r6, [r5, #8]
 8014c3e:	f007 fcbf 	bl	801c5c0 <rcl_get_zero_initialized_wait_set>
 8014c42:	46ec      	mov	ip, sp
 8014c44:	f105 0e14 	add.w	lr, r5, #20
 8014c48:	f8d7 8000 	ldr.w	r8, [r7]
 8014c4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c60:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8014ce0 <rclc_executor_init+0xe8>
 8014c64:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c68:	f8dc 3000 	ldr.w	r3, [ip]
 8014c6c:	01b0      	lsls	r0, r6, #6
 8014c6e:	6939      	ldr	r1, [r7, #16]
 8014c70:	f8ce 3000 	str.w	r3, [lr]
 8014c74:	612f      	str	r7, [r5, #16]
 8014c76:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8014c7a:	47c0      	blx	r8
 8014c7c:	6068      	str	r0, [r5, #4]
 8014c7e:	b908      	cbnz	r0, 8014c84 <rclc_executor_init+0x8c>
 8014c80:	e029      	b.n	8014cd6 <rclc_executor_init+0xde>
 8014c82:	6868      	ldr	r0, [r5, #4]
 8014c84:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014c88:	3401      	adds	r4, #1
 8014c8a:	4631      	mov	r1, r6
 8014c8c:	f000 fac0 	bl	8015210 <rclc_executor_handle_init>
 8014c90:	42a6      	cmp	r6, r4
 8014c92:	d8f6      	bhi.n	8014c82 <rclc_executor_init+0x8a>
 8014c94:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8014c98:	f000 faae 	bl	80151f8 <rclc_executor_handle_counters_zero_init>
 8014c9c:	4a13      	ldr	r2, [pc, #76]	@ (8014cec <rclc_executor_init+0xf4>)
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	6868      	ldr	r0, [r5, #4]
 8014ca2:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8014ca6:	b168      	cbz	r0, 8014cc4 <rclc_executor_init+0xcc>
 8014ca8:	68ab      	ldr	r3, [r5, #8]
 8014caa:	b173      	cbz	r3, 8014cca <rclc_executor_init+0xd2>
 8014cac:	692a      	ldr	r2, [r5, #16]
 8014cae:	fab2 f382 	clz	r3, r2
 8014cb2:	095b      	lsrs	r3, r3, #5
 8014cb4:	b14a      	cbz	r2, 8014cca <rclc_executor_init+0xd2>
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8014cbc:	b030      	add	sp, #192	@ 0xc0
 8014cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cc2:	200b      	movs	r0, #11
 8014cc4:	b030      	add	sp, #192	@ 0xc0
 8014cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cca:	2000      	movs	r0, #0
 8014ccc:	b030      	add	sp, #192	@ 0xc0
 8014cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd2:	200b      	movs	r0, #11
 8014cd4:	4770      	bx	lr
 8014cd6:	200a      	movs	r0, #10
 8014cd8:	e7f4      	b.n	8014cc4 <rclc_executor_init+0xcc>
 8014cda:	bf00      	nop
 8014cdc:	f3af 8000 	nop.w
 8014ce0:	3b9aca00 	.word	0x3b9aca00
 8014ce4:	00000000 	.word	0x00000000
 8014ce8:	080248a8 	.word	0x080248a8
 8014cec:	08014b5d 	.word	0x08014b5d

08014cf0 <rclc_executor_add_subscription>:
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	bf18      	it	ne
 8014cf4:	2a00      	cmpne	r2, #0
 8014cf6:	b570      	push	{r4, r5, r6, lr}
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	bf0c      	ite	eq
 8014cfc:	2001      	moveq	r0, #1
 8014cfe:	2000      	movne	r0, #0
 8014d00:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014d04:	2900      	cmp	r1, #0
 8014d06:	bf08      	it	eq
 8014d08:	f040 0001 	orreq.w	r0, r0, #1
 8014d0c:	bb28      	cbnz	r0, 8014d5a <rclc_executor_add_subscription+0x6a>
 8014d0e:	fab4 f584 	clz	r5, r4
 8014d12:	096d      	lsrs	r5, r5, #5
 8014d14:	b30c      	cbz	r4, 8014d5a <rclc_executor_add_subscription+0x6a>
 8014d16:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014d1a:	4286      	cmp	r6, r0
 8014d1c:	d301      	bcc.n	8014d22 <rclc_executor_add_subscription+0x32>
 8014d1e:	2001      	movs	r0, #1
 8014d20:	bd70      	pop	{r4, r5, r6, pc}
 8014d22:	6860      	ldr	r0, [r4, #4]
 8014d24:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014d28:	f800 500e 	strb.w	r5, [r0, lr]
 8014d2c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014d30:	3601      	adds	r6, #1
 8014d32:	6303      	str	r3, [r0, #48]	@ 0x30
 8014d34:	2301      	movs	r3, #1
 8014d36:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8014d38:	f104 0514 	add.w	r5, r4, #20
 8014d3c:	f880 c001 	strb.w	ip, [r0, #1]
 8014d40:	8703      	strh	r3, [r0, #56]	@ 0x38
 8014d42:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014d46:	4628      	mov	r0, r5
 8014d48:	60e6      	str	r6, [r4, #12]
 8014d4a:	f007 fc4d 	bl	801c5e8 <rcl_wait_set_is_valid>
 8014d4e:	b930      	cbnz	r0, 8014d5e <rclc_executor_add_subscription+0x6e>
 8014d50:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8014d52:	2000      	movs	r0, #0
 8014d54:	3301      	adds	r3, #1
 8014d56:	64a3      	str	r3, [r4, #72]	@ 0x48
 8014d58:	bd70      	pop	{r4, r5, r6, pc}
 8014d5a:	200b      	movs	r0, #11
 8014d5c:	bd70      	pop	{r4, r5, r6, pc}
 8014d5e:	4628      	mov	r0, r5
 8014d60:	f007 fc48 	bl	801c5f4 <rcl_wait_set_fini>
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d0f3      	beq.n	8014d50 <rclc_executor_add_subscription+0x60>
 8014d68:	bd70      	pop	{r4, r5, r6, pc}
 8014d6a:	bf00      	nop

08014d6c <rclc_executor_add_service>:
 8014d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d6e:	9d06      	ldr	r5, [sp, #24]
 8014d70:	4604      	mov	r4, r0
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	bf18      	it	ne
 8014d76:	2d00      	cmpne	r5, #0
 8014d78:	bf0c      	ite	eq
 8014d7a:	2001      	moveq	r0, #1
 8014d7c:	2000      	movne	r0, #0
 8014d7e:	2a00      	cmp	r2, #0
 8014d80:	bf08      	it	eq
 8014d82:	f040 0001 	orreq.w	r0, r0, #1
 8014d86:	2900      	cmp	r1, #0
 8014d88:	bf08      	it	eq
 8014d8a:	f040 0001 	orreq.w	r0, r0, #1
 8014d8e:	bb40      	cbnz	r0, 8014de2 <rclc_executor_add_service+0x76>
 8014d90:	fab4 f684 	clz	r6, r4
 8014d94:	0976      	lsrs	r6, r6, #5
 8014d96:	b324      	cbz	r4, 8014de2 <rclc_executor_add_service+0x76>
 8014d98:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014d9c:	42b8      	cmp	r0, r7
 8014d9e:	d301      	bcc.n	8014da4 <rclc_executor_add_service+0x38>
 8014da0:	2001      	movs	r0, #1
 8014da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014da4:	6867      	ldr	r7, [r4, #4]
 8014da6:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8014daa:	f100 0c01 	add.w	ip, r0, #1
 8014dae:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014db2:	6283      	str	r3, [r0, #40]	@ 0x28
 8014db4:	2305      	movs	r3, #5
 8014db6:	6305      	str	r5, [r0, #48]	@ 0x30
 8014db8:	f104 0514 	add.w	r5, r4, #20
 8014dbc:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014dc0:	f827 300e 	strh.w	r3, [r7, lr]
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8014dc8:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014dcc:	4628      	mov	r0, r5
 8014dce:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014dd2:	f007 fc09 	bl	801c5e8 <rcl_wait_set_is_valid>
 8014dd6:	b930      	cbnz	r0, 8014de6 <rclc_executor_add_service+0x7a>
 8014dd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8014dda:	2000      	movs	r0, #0
 8014ddc:	3301      	adds	r3, #1
 8014dde:	6563      	str	r3, [r4, #84]	@ 0x54
 8014de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014de2:	200b      	movs	r0, #11
 8014de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014de6:	4628      	mov	r0, r5
 8014de8:	f007 fc04 	bl	801c5f4 <rcl_wait_set_fini>
 8014dec:	2800      	cmp	r0, #0
 8014dee:	d0f3      	beq.n	8014dd8 <rclc_executor_add_service+0x6c>
 8014df0:	e7d7      	b.n	8014da2 <rclc_executor_add_service+0x36>
 8014df2:	bf00      	nop

08014df4 <rclc_executor_prepare>:
 8014df4:	2800      	cmp	r0, #0
 8014df6:	d044      	beq.n	8014e82 <rclc_executor_prepare+0x8e>
 8014df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dfa:	f100 0514 	add.w	r5, r0, #20
 8014dfe:	b09b      	sub	sp, #108	@ 0x6c
 8014e00:	4604      	mov	r4, r0
 8014e02:	4628      	mov	r0, r5
 8014e04:	f007 fbf0 	bl	801c5e8 <rcl_wait_set_is_valid>
 8014e08:	b110      	cbz	r0, 8014e10 <rclc_executor_prepare+0x1c>
 8014e0a:	2000      	movs	r0, #0
 8014e0c:	b01b      	add	sp, #108	@ 0x6c
 8014e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e10:	4628      	mov	r0, r5
 8014e12:	f007 fbef 	bl	801c5f4 <rcl_wait_set_fini>
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d130      	bne.n	8014e7c <rclc_executor_prepare+0x88>
 8014e1a:	a80c      	add	r0, sp, #48	@ 0x30
 8014e1c:	ae04      	add	r6, sp, #16
 8014e1e:	f007 fbcf 	bl	801c5c0 <rcl_get_zero_initialized_wait_set>
 8014e22:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014e26:	46ae      	mov	lr, r5
 8014e28:	6927      	ldr	r7, [r4, #16]
 8014e2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e42:	f8dc 3000 	ldr.w	r3, [ip]
 8014e46:	f8ce 3000 	str.w	r3, [lr]
 8014e4a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014e4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	4628      	mov	r0, r5
 8014e52:	6822      	ldr	r2, [r4, #0]
 8014e54:	6033      	str	r3, [r6, #0]
 8014e56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e58:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8014e5a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014e5e:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8014e62:	e9cd 2100 	strd	r2, r1, [sp]
 8014e66:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8014e68:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014e6a:	f007 fec3 	bl	801cbf4 <rcl_wait_set_init>
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	d0cc      	beq.n	8014e0c <rclc_executor_prepare+0x18>
 8014e72:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014e74:	f000 fba8 	bl	80155c8 <rcutils_reset_error>
 8014e78:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014e7a:	e7c7      	b.n	8014e0c <rclc_executor_prepare+0x18>
 8014e7c:	f000 fba4 	bl	80155c8 <rcutils_reset_error>
 8014e80:	e7cb      	b.n	8014e1a <rclc_executor_prepare+0x26>
 8014e82:	200b      	movs	r0, #11
 8014e84:	4770      	bx	lr
 8014e86:	bf00      	nop

08014e88 <rclc_executor_spin_some.part.0>:
 8014e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e8c:	4605      	mov	r5, r0
 8014e8e:	4691      	mov	r9, r2
 8014e90:	4698      	mov	r8, r3
 8014e92:	f7ff ffaf 	bl	8014df4 <rclc_executor_prepare>
 8014e96:	f105 0614 	add.w	r6, r5, #20
 8014e9a:	4630      	mov	r0, r6
 8014e9c:	f007 fc76 	bl	801c78c <rcl_wait_set_clear>
 8014ea0:	4607      	mov	r7, r0
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	f040 80a8 	bne.w	8014ff8 <rclc_executor_spin_some.part.0+0x170>
 8014ea8:	68ab      	ldr	r3, [r5, #8]
 8014eaa:	b30b      	cbz	r3, 8014ef0 <rclc_executor_spin_some.part.0+0x68>
 8014eac:	4604      	mov	r4, r0
 8014eae:	6869      	ldr	r1, [r5, #4]
 8014eb0:	01a2      	lsls	r2, r4, #6
 8014eb2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014eb6:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8014eba:	b1cb      	cbz	r3, 8014ef0 <rclc_executor_spin_some.part.0+0x68>
 8014ebc:	5c8b      	ldrb	r3, [r1, r2]
 8014ebe:	2b0a      	cmp	r3, #10
 8014ec0:	f200 80de 	bhi.w	8015080 <rclc_executor_spin_some.part.0+0x1f8>
 8014ec4:	e8df f003 	tbb	[pc, r3]
 8014ec8:	8da99d9d 	.word	0x8da99d9d
 8014ecc:	0606068d 	.word	0x0606068d
 8014ed0:	c1ce      	.short	0xc1ce
 8014ed2:	b5          	.byte	0xb5
 8014ed3:	00          	.byte	0x00
 8014ed4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014ed8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014edc:	4630      	mov	r0, r6
 8014ede:	f007 ffa5 	bl	801ce2c <rcl_wait_set_add_service>
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	f040 8087 	bne.w	8014ff6 <rclc_executor_spin_some.part.0+0x16e>
 8014ee8:	3401      	adds	r4, #1
 8014eea:	68ab      	ldr	r3, [r5, #8]
 8014eec:	429c      	cmp	r4, r3
 8014eee:	d3de      	bcc.n	8014eae <rclc_executor_spin_some.part.0+0x26>
 8014ef0:	4643      	mov	r3, r8
 8014ef2:	464a      	mov	r2, r9
 8014ef4:	4630      	mov	r0, r6
 8014ef6:	f007 ffc7 	bl	801ce88 <rcl_wait>
 8014efa:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	f000 80c6 	beq.w	8015090 <rclc_executor_spin_some.part.0+0x208>
 8014f04:	2b01      	cmp	r3, #1
 8014f06:	f040 80bb 	bne.w	8015080 <rclc_executor_spin_some.part.0+0x1f8>
 8014f0a:	68ab      	ldr	r3, [r5, #8]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	f000 8159 	beq.w	80151c4 <rclc_executor_spin_some.part.0+0x33c>
 8014f12:	2400      	movs	r4, #0
 8014f14:	f240 1991 	movw	r9, #401	@ 0x191
 8014f18:	46a0      	mov	r8, r4
 8014f1a:	e00a      	b.n	8014f32 <rclc_executor_spin_some.part.0+0xaa>
 8014f1c:	f7ff fb1a 	bl	8014554 <_rclc_check_for_new_data>
 8014f20:	4604      	mov	r4, r0
 8014f22:	b110      	cbz	r0, 8014f2a <rclc_executor_spin_some.part.0+0xa2>
 8014f24:	4548      	cmp	r0, r9
 8014f26:	f040 80b1 	bne.w	801508c <rclc_executor_spin_some.part.0+0x204>
 8014f2a:	68ab      	ldr	r3, [r5, #8]
 8014f2c:	4598      	cmp	r8, r3
 8014f2e:	f080 8126 	bcs.w	801517e <rclc_executor_spin_some.part.0+0x2f6>
 8014f32:	686a      	ldr	r2, [r5, #4]
 8014f34:	4631      	mov	r1, r6
 8014f36:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014f3a:	f108 0801 	add.w	r8, r8, #1
 8014f3e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8014f42:	f1bc 0f00 	cmp.w	ip, #0
 8014f46:	d1e9      	bne.n	8014f1c <rclc_executor_spin_some.part.0+0x94>
 8014f48:	4619      	mov	r1, r3
 8014f4a:	4610      	mov	r0, r2
 8014f4c:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014f50:	4798      	blx	r3
 8014f52:	2800      	cmp	r0, #0
 8014f54:	f000 809a 	beq.w	801508c <rclc_executor_spin_some.part.0+0x204>
 8014f58:	68ab      	ldr	r3, [r5, #8]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	f000 8096 	beq.w	801508c <rclc_executor_spin_some.part.0+0x204>
 8014f60:	f04f 0800 	mov.w	r8, #0
 8014f64:	f240 1991 	movw	r9, #401	@ 0x191
 8014f68:	e009      	b.n	8014f7e <rclc_executor_spin_some.part.0+0xf6>
 8014f6a:	f7ff fb41 	bl	80145f0 <_rclc_take_new_data>
 8014f6e:	4604      	mov	r4, r0
 8014f70:	b110      	cbz	r0, 8014f78 <rclc_executor_spin_some.part.0+0xf0>
 8014f72:	4548      	cmp	r0, r9
 8014f74:	f040 808a 	bne.w	801508c <rclc_executor_spin_some.part.0+0x204>
 8014f78:	68ab      	ldr	r3, [r5, #8]
 8014f7a:	4598      	cmp	r8, r3
 8014f7c:	d209      	bcs.n	8014f92 <rclc_executor_spin_some.part.0+0x10a>
 8014f7e:	6868      	ldr	r0, [r5, #4]
 8014f80:	4631      	mov	r1, r6
 8014f82:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014f86:	f108 0801 	add.w	r8, r8, #1
 8014f8a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8014f8e:	2a00      	cmp	r2, #0
 8014f90:	d1eb      	bne.n	8014f6a <rclc_executor_spin_some.part.0+0xe2>
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d07a      	beq.n	801508c <rclc_executor_spin_some.part.0+0x204>
 8014f96:	2600      	movs	r6, #0
 8014f98:	e00e      	b.n	8014fb8 <rclc_executor_spin_some.part.0+0x130>
 8014f9a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014f9e:	2a08      	cmp	r2, #8
 8014fa0:	f000 80fc 	beq.w	801519c <rclc_executor_spin_some.part.0+0x314>
 8014fa4:	2a09      	cmp	r2, #9
 8014fa6:	f000 80ee 	beq.w	8015186 <rclc_executor_spin_some.part.0+0x2fe>
 8014faa:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8014fae:	b98a      	cbnz	r2, 8014fd4 <rclc_executor_spin_some.part.0+0x14c>
 8014fb0:	3601      	adds	r6, #1
 8014fb2:	429e      	cmp	r6, r3
 8014fb4:	d267      	bcs.n	8015086 <rclc_executor_spin_some.part.0+0x1fe>
 8014fb6:	2400      	movs	r4, #0
 8014fb8:	686a      	ldr	r2, [r5, #4]
 8014fba:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014fbe:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014fc2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8014fc6:	2900      	cmp	r1, #0
 8014fc8:	d060      	beq.n	801508c <rclc_executor_spin_some.part.0+0x204>
 8014fca:	7841      	ldrb	r1, [r0, #1]
 8014fcc:	2900      	cmp	r1, #0
 8014fce:	d0e4      	beq.n	8014f9a <rclc_executor_spin_some.part.0+0x112>
 8014fd0:	2901      	cmp	r1, #1
 8014fd2:	d1ed      	bne.n	8014fb0 <rclc_executor_spin_some.part.0+0x128>
 8014fd4:	f7ff fc80 	bl	80148d8 <_rclc_execute.part.0>
 8014fd8:	2800      	cmp	r0, #0
 8014fda:	f040 80b5 	bne.w	8015148 <rclc_executor_spin_some.part.0+0x2c0>
 8014fde:	68ab      	ldr	r3, [r5, #8]
 8014fe0:	e7e6      	b.n	8014fb0 <rclc_executor_spin_some.part.0+0x128>
 8014fe2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014fe6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014fea:	4630      	mov	r0, r6
 8014fec:	f007 fef2 	bl	801cdd4 <rcl_wait_set_add_client>
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	f43f af79 	beq.w	8014ee8 <rclc_executor_spin_some.part.0+0x60>
 8014ff6:	4607      	mov	r7, r0
 8014ff8:	f000 fae6 	bl	80155c8 <rcutils_reset_error>
 8014ffc:	4638      	mov	r0, r7
 8014ffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015002:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8015006:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801500a:	4630      	mov	r0, r6
 801500c:	f007 fb92 	bl	801c734 <rcl_wait_set_add_subscription>
 8015010:	2800      	cmp	r0, #0
 8015012:	f43f af69 	beq.w	8014ee8 <rclc_executor_spin_some.part.0+0x60>
 8015016:	4607      	mov	r7, r0
 8015018:	e7ee      	b.n	8014ff8 <rclc_executor_spin_some.part.0+0x170>
 801501a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801501e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015022:	4630      	mov	r0, r6
 8015024:	f007 fea6 	bl	801cd74 <rcl_wait_set_add_timer>
 8015028:	2800      	cmp	r0, #0
 801502a:	f43f af5d 	beq.w	8014ee8 <rclc_executor_spin_some.part.0+0x60>
 801502e:	4607      	mov	r7, r0
 8015030:	e7e2      	b.n	8014ff8 <rclc_executor_spin_some.part.0+0x170>
 8015032:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8015036:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801503a:	4630      	mov	r0, r6
 801503c:	f007 fe6e 	bl	801cd1c <rcl_wait_set_add_guard_condition>
 8015040:	2800      	cmp	r0, #0
 8015042:	f43f af51 	beq.w	8014ee8 <rclc_executor_spin_some.part.0+0x60>
 8015046:	4607      	mov	r7, r0
 8015048:	e7d6      	b.n	8014ff8 <rclc_executor_spin_some.part.0+0x170>
 801504a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801504e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8015052:	4630      	mov	r0, r6
 8015054:	3110      	adds	r1, #16
 8015056:	f008 fbed 	bl	801d834 <rcl_action_wait_set_add_action_server>
 801505a:	2800      	cmp	r0, #0
 801505c:	f43f af44 	beq.w	8014ee8 <rclc_executor_spin_some.part.0+0x60>
 8015060:	4607      	mov	r7, r0
 8015062:	e7c9      	b.n	8014ff8 <rclc_executor_spin_some.part.0+0x170>
 8015064:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015068:	2300      	movs	r3, #0
 801506a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801506e:	4630      	mov	r0, r6
 8015070:	3110      	adds	r1, #16
 8015072:	f008 f9b5 	bl	801d3e0 <rcl_action_wait_set_add_action_client>
 8015076:	2800      	cmp	r0, #0
 8015078:	f43f af36 	beq.w	8014ee8 <rclc_executor_spin_some.part.0+0x60>
 801507c:	4607      	mov	r7, r0
 801507e:	e7bb      	b.n	8014ff8 <rclc_executor_spin_some.part.0+0x170>
 8015080:	2701      	movs	r7, #1
 8015082:	f000 faa1 	bl	80155c8 <rcutils_reset_error>
 8015086:	4638      	mov	r0, r7
 8015088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801508c:	4627      	mov	r7, r4
 801508e:	e7fa      	b.n	8015086 <rclc_executor_spin_some.part.0+0x1fe>
 8015090:	68ab      	ldr	r3, [r5, #8]
 8015092:	2b00      	cmp	r3, #0
 8015094:	f000 8093 	beq.w	80151be <rclc_executor_spin_some.part.0+0x336>
 8015098:	2400      	movs	r4, #0
 801509a:	f240 1991 	movw	r9, #401	@ 0x191
 801509e:	46a0      	mov	r8, r4
 80150a0:	e008      	b.n	80150b4 <rclc_executor_spin_some.part.0+0x22c>
 80150a2:	f7ff fa57 	bl	8014554 <_rclc_check_for_new_data>
 80150a6:	4604      	mov	r4, r0
 80150a8:	b108      	cbz	r0, 80150ae <rclc_executor_spin_some.part.0+0x226>
 80150aa:	4548      	cmp	r0, r9
 80150ac:	d1ee      	bne.n	801508c <rclc_executor_spin_some.part.0+0x204>
 80150ae:	68ab      	ldr	r3, [r5, #8]
 80150b0:	4598      	cmp	r8, r3
 80150b2:	d266      	bcs.n	8015182 <rclc_executor_spin_some.part.0+0x2fa>
 80150b4:	686a      	ldr	r2, [r5, #4]
 80150b6:	4631      	mov	r1, r6
 80150b8:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80150bc:	f108 0801 	add.w	r8, r8, #1
 80150c0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80150c4:	f1bc 0f00 	cmp.w	ip, #0
 80150c8:	d1eb      	bne.n	80150a2 <rclc_executor_spin_some.part.0+0x21a>
 80150ca:	4619      	mov	r1, r3
 80150cc:	4610      	mov	r0, r2
 80150ce:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80150d2:	4798      	blx	r3
 80150d4:	2800      	cmp	r0, #0
 80150d6:	d0d9      	beq.n	801508c <rclc_executor_spin_some.part.0+0x204>
 80150d8:	68ab      	ldr	r3, [r5, #8]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d0d6      	beq.n	801508c <rclc_executor_spin_some.part.0+0x204>
 80150de:	f04f 0a00 	mov.w	sl, #0
 80150e2:	f240 1891 	movw	r8, #401	@ 0x191
 80150e6:	f240 2959 	movw	r9, #601	@ 0x259
 80150ea:	e00e      	b.n	801510a <rclc_executor_spin_some.part.0+0x282>
 80150ec:	f813 300b 	ldrb.w	r3, [r3, fp]
 80150f0:	2b08      	cmp	r3, #8
 80150f2:	d034      	beq.n	801515e <rclc_executor_spin_some.part.0+0x2d6>
 80150f4:	2b09      	cmp	r3, #9
 80150f6:	d029      	beq.n	801514c <rclc_executor_spin_some.part.0+0x2c4>
 80150f8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80150fc:	bb03      	cbnz	r3, 8015140 <rclc_executor_spin_some.part.0+0x2b8>
 80150fe:	f10a 0a01 	add.w	sl, sl, #1
 8015102:	68ab      	ldr	r3, [r5, #8]
 8015104:	459a      	cmp	sl, r3
 8015106:	d2be      	bcs.n	8015086 <rclc_executor_spin_some.part.0+0x1fe>
 8015108:	2400      	movs	r4, #0
 801510a:	6868      	ldr	r0, [r5, #4]
 801510c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8015110:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8015114:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8015118:	2b00      	cmp	r3, #0
 801511a:	d0b7      	beq.n	801508c <rclc_executor_spin_some.part.0+0x204>
 801511c:	4631      	mov	r1, r6
 801511e:	f7ff fa67 	bl	80145f0 <_rclc_take_new_data>
 8015122:	2800      	cmp	r0, #0
 8015124:	bf18      	it	ne
 8015126:	4540      	cmpne	r0, r8
 8015128:	d001      	beq.n	801512e <rclc_executor_spin_some.part.0+0x2a6>
 801512a:	4548      	cmp	r0, r9
 801512c:	d10c      	bne.n	8015148 <rclc_executor_spin_some.part.0+0x2c0>
 801512e:	686b      	ldr	r3, [r5, #4]
 8015130:	eb13 000b 	adds.w	r0, r3, fp
 8015134:	d021      	beq.n	801517a <rclc_executor_spin_some.part.0+0x2f2>
 8015136:	7842      	ldrb	r2, [r0, #1]
 8015138:	2a00      	cmp	r2, #0
 801513a:	d0d7      	beq.n	80150ec <rclc_executor_spin_some.part.0+0x264>
 801513c:	2a01      	cmp	r2, #1
 801513e:	d1de      	bne.n	80150fe <rclc_executor_spin_some.part.0+0x276>
 8015140:	f7ff fbca 	bl	80148d8 <_rclc_execute.part.0>
 8015144:	2800      	cmp	r0, #0
 8015146:	d0da      	beq.n	80150fe <rclc_executor_spin_some.part.0+0x276>
 8015148:	4607      	mov	r7, r0
 801514a:	e79c      	b.n	8015086 <rclc_executor_spin_some.part.0+0x1fe>
 801514c:	6843      	ldr	r3, [r0, #4]
 801514e:	6a1a      	ldr	r2, [r3, #32]
 8015150:	2a00      	cmp	r2, #0
 8015152:	d1f5      	bne.n	8015140 <rclc_executor_spin_some.part.0+0x2b8>
 8015154:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8015158:	2b00      	cmp	r3, #0
 801515a:	d0d0      	beq.n	80150fe <rclc_executor_spin_some.part.0+0x276>
 801515c:	e7f0      	b.n	8015140 <rclc_executor_spin_some.part.0+0x2b8>
 801515e:	6843      	ldr	r3, [r0, #4]
 8015160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015162:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8015166:	d1eb      	bne.n	8015140 <rclc_executor_spin_some.part.0+0x2b8>
 8015168:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801516c:	2a00      	cmp	r2, #0
 801516e:	d1e7      	bne.n	8015140 <rclc_executor_spin_some.part.0+0x2b8>
 8015170:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015174:	2b00      	cmp	r3, #0
 8015176:	d0c2      	beq.n	80150fe <rclc_executor_spin_some.part.0+0x276>
 8015178:	e7e2      	b.n	8015140 <rclc_executor_spin_some.part.0+0x2b8>
 801517a:	270b      	movs	r7, #11
 801517c:	e783      	b.n	8015086 <rclc_executor_spin_some.part.0+0x1fe>
 801517e:	686a      	ldr	r2, [r5, #4]
 8015180:	e6e2      	b.n	8014f48 <rclc_executor_spin_some.part.0+0xc0>
 8015182:	686a      	ldr	r2, [r5, #4]
 8015184:	e7a1      	b.n	80150ca <rclc_executor_spin_some.part.0+0x242>
 8015186:	6842      	ldr	r2, [r0, #4]
 8015188:	6a11      	ldr	r1, [r2, #32]
 801518a:	2900      	cmp	r1, #0
 801518c:	f47f af22 	bne.w	8014fd4 <rclc_executor_spin_some.part.0+0x14c>
 8015190:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8015194:	2a00      	cmp	r2, #0
 8015196:	f43f af0b 	beq.w	8014fb0 <rclc_executor_spin_some.part.0+0x128>
 801519a:	e71b      	b.n	8014fd4 <rclc_executor_spin_some.part.0+0x14c>
 801519c:	6842      	ldr	r2, [r0, #4]
 801519e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80151a0:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 80151a4:	f47f af16 	bne.w	8014fd4 <rclc_executor_spin_some.part.0+0x14c>
 80151a8:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 80151ac:	2900      	cmp	r1, #0
 80151ae:	f47f af11 	bne.w	8014fd4 <rclc_executor_spin_some.part.0+0x14c>
 80151b2:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 80151b6:	2a00      	cmp	r2, #0
 80151b8:	f43f aefa 	beq.w	8014fb0 <rclc_executor_spin_some.part.0+0x128>
 80151bc:	e70a      	b.n	8014fd4 <rclc_executor_spin_some.part.0+0x14c>
 80151be:	686a      	ldr	r2, [r5, #4]
 80151c0:	461c      	mov	r4, r3
 80151c2:	e782      	b.n	80150ca <rclc_executor_spin_some.part.0+0x242>
 80151c4:	686a      	ldr	r2, [r5, #4]
 80151c6:	461c      	mov	r4, r3
 80151c8:	e6be      	b.n	8014f48 <rclc_executor_spin_some.part.0+0xc0>
 80151ca:	bf00      	nop

080151cc <rclc_executor_spin_some>:
 80151cc:	b190      	cbz	r0, 80151f4 <rclc_executor_spin_some+0x28>
 80151ce:	b570      	push	{r4, r5, r6, lr}
 80151d0:	4604      	mov	r4, r0
 80151d2:	6800      	ldr	r0, [r0, #0]
 80151d4:	4616      	mov	r6, r2
 80151d6:	461d      	mov	r5, r3
 80151d8:	f005 fd36 	bl	801ac48 <rcl_context_is_valid>
 80151dc:	b130      	cbz	r0, 80151ec <rclc_executor_spin_some+0x20>
 80151de:	4632      	mov	r2, r6
 80151e0:	462b      	mov	r3, r5
 80151e2:	4620      	mov	r0, r4
 80151e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151e8:	f7ff be4e 	b.w	8014e88 <rclc_executor_spin_some.part.0>
 80151ec:	f000 f9ec 	bl	80155c8 <rcutils_reset_error>
 80151f0:	2001      	movs	r0, #1
 80151f2:	bd70      	pop	{r4, r5, r6, pc}
 80151f4:	200b      	movs	r0, #11
 80151f6:	4770      	bx	lr

080151f8 <rclc_executor_handle_counters_zero_init>:
 80151f8:	b130      	cbz	r0, 8015208 <rclc_executor_handle_counters_zero_init+0x10>
 80151fa:	2220      	movs	r2, #32
 80151fc:	2100      	movs	r1, #0
 80151fe:	b508      	push	{r3, lr}
 8015200:	f00d f8fa 	bl	80223f8 <memset>
 8015204:	2000      	movs	r0, #0
 8015206:	bd08      	pop	{r3, pc}
 8015208:	200b      	movs	r0, #11
 801520a:	4770      	bx	lr
 801520c:	0000      	movs	r0, r0
	...

08015210 <rclc_executor_handle_init>:
 8015210:	4603      	mov	r3, r0
 8015212:	b178      	cbz	r0, 8015234 <rclc_executor_handle_init+0x24>
 8015214:	2200      	movs	r2, #0
 8015216:	f04f 0c0b 	mov.w	ip, #11
 801521a:	6341      	str	r1, [r0, #52]	@ 0x34
 801521c:	4610      	mov	r0, r2
 801521e:	f8a3 c000 	strh.w	ip, [r3]
 8015222:	631a      	str	r2, [r3, #48]	@ 0x30
 8015224:	871a      	strh	r2, [r3, #56]	@ 0x38
 8015226:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8015238 <rclc_executor_handle_init+0x28>
 801522a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801522e:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 8015232:	4770      	bx	lr
 8015234:	200b      	movs	r0, #11
 8015236:	4770      	bx	lr
	...

08015240 <rclc_support_init>:
 8015240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015244:	b086      	sub	sp, #24
 8015246:	b3bb      	cbz	r3, 80152b8 <rclc_support_init+0x78>
 8015248:	4606      	mov	r6, r0
 801524a:	b3a8      	cbz	r0, 80152b8 <rclc_support_init+0x78>
 801524c:	461c      	mov	r4, r3
 801524e:	460f      	mov	r7, r1
 8015250:	4690      	mov	r8, r2
 8015252:	f005 fe65 	bl	801af20 <rcl_get_zero_initialized_init_options>
 8015256:	f104 050c 	add.w	r5, r4, #12
 801525a:	9005      	str	r0, [sp, #20]
 801525c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015260:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015264:	a805      	add	r0, sp, #20
 8015266:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801526a:	f005 fe5b 	bl	801af24 <rcl_init_options_init>
 801526e:	4605      	mov	r5, r0
 8015270:	b9e0      	cbnz	r0, 80152ac <rclc_support_init+0x6c>
 8015272:	ad02      	add	r5, sp, #8
 8015274:	4628      	mov	r0, r5
 8015276:	f005 fcdd 	bl	801ac34 <rcl_get_zero_initialized_context>
 801527a:	4633      	mov	r3, r6
 801527c:	aa05      	add	r2, sp, #20
 801527e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015282:	e886 0003 	stmia.w	r6, {r0, r1}
 8015286:	4641      	mov	r1, r8
 8015288:	4638      	mov	r0, r7
 801528a:	f005 fd43 	bl	801ad14 <rcl_init>
 801528e:	4605      	mov	r5, r0
 8015290:	b9b8      	cbnz	r0, 80152c2 <rclc_support_init+0x82>
 8015292:	4622      	mov	r2, r4
 8015294:	f106 010c 	add.w	r1, r6, #12
 8015298:	2003      	movs	r0, #3
 801529a:	60b4      	str	r4, [r6, #8]
 801529c:	f006 fd66 	bl	801bd6c <rcl_clock_init>
 80152a0:	4605      	mov	r5, r0
 80152a2:	b970      	cbnz	r0, 80152c2 <rclc_support_init+0x82>
 80152a4:	a805      	add	r0, sp, #20
 80152a6:	f005 fea3 	bl	801aff0 <rcl_init_options_fini>
 80152aa:	b108      	cbz	r0, 80152b0 <rclc_support_init+0x70>
 80152ac:	f000 f98c 	bl	80155c8 <rcutils_reset_error>
 80152b0:	4628      	mov	r0, r5
 80152b2:	b006      	add	sp, #24
 80152b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152b8:	250b      	movs	r5, #11
 80152ba:	4628      	mov	r0, r5
 80152bc:	b006      	add	sp, #24
 80152be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c2:	f000 f981 	bl	80155c8 <rcutils_reset_error>
 80152c6:	a805      	add	r0, sp, #20
 80152c8:	f005 fe92 	bl	801aff0 <rcl_init_options_fini>
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d0ef      	beq.n	80152b0 <rclc_support_init+0x70>
 80152d0:	e7ec      	b.n	80152ac <rclc_support_init+0x6c>
 80152d2:	bf00      	nop

080152d4 <rclc_node_init_default>:
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	bf18      	it	ne
 80152d8:	2a00      	cmpne	r2, #0
 80152da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152de:	4616      	mov	r6, r2
 80152e0:	bf0c      	ite	eq
 80152e2:	2201      	moveq	r2, #1
 80152e4:	2200      	movne	r2, #0
 80152e6:	b0a1      	sub	sp, #132	@ 0x84
 80152e8:	2900      	cmp	r1, #0
 80152ea:	bf08      	it	eq
 80152ec:	f042 0201 	orreq.w	r2, r2, #1
 80152f0:	bb22      	cbnz	r2, 801533c <rclc_node_init_default+0x68>
 80152f2:	4604      	mov	r4, r0
 80152f4:	b310      	cbz	r0, 801533c <rclc_node_init_default+0x68>
 80152f6:	f10d 0810 	add.w	r8, sp, #16
 80152fa:	461f      	mov	r7, r3
 80152fc:	460d      	mov	r5, r1
 80152fe:	f10d 0918 	add.w	r9, sp, #24
 8015302:	4640      	mov	r0, r8
 8015304:	f005 ff2e 	bl	801b164 <rcl_get_zero_initialized_node>
 8015308:	e898 0003 	ldmia.w	r8, {r0, r1}
 801530c:	e884 0003 	stmia.w	r4, {r0, r1}
 8015310:	4648      	mov	r0, r9
 8015312:	f006 f8a1 	bl	801b458 <rcl_node_get_default_options>
 8015316:	4640      	mov	r0, r8
 8015318:	f005 ff24 	bl	801b164 <rcl_get_zero_initialized_node>
 801531c:	f8cd 9000 	str.w	r9, [sp]
 8015320:	463b      	mov	r3, r7
 8015322:	4632      	mov	r2, r6
 8015324:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015328:	e884 0003 	stmia.w	r4, {r0, r1}
 801532c:	4629      	mov	r1, r5
 801532e:	4620      	mov	r0, r4
 8015330:	f005 ff22 	bl	801b178 <rcl_node_init>
 8015334:	b930      	cbnz	r0, 8015344 <rclc_node_init_default+0x70>
 8015336:	b021      	add	sp, #132	@ 0x84
 8015338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801533c:	200b      	movs	r0, #11
 801533e:	b021      	add	sp, #132	@ 0x84
 8015340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015344:	9003      	str	r0, [sp, #12]
 8015346:	f000 f93f 	bl	80155c8 <rcutils_reset_error>
 801534a:	f000 f93d 	bl	80155c8 <rcutils_reset_error>
 801534e:	9803      	ldr	r0, [sp, #12]
 8015350:	b021      	add	sp, #132	@ 0x84
 8015352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015356:	bf00      	nop

08015358 <rclc_publisher_init>:
 8015358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801535c:	b0a1      	sub	sp, #132	@ 0x84
 801535e:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 8015360:	2e00      	cmp	r6, #0
 8015362:	bf18      	it	ne
 8015364:	2b00      	cmpne	r3, #0
 8015366:	bf0c      	ite	eq
 8015368:	f04f 0c01 	moveq.w	ip, #1
 801536c:	f04f 0c00 	movne.w	ip, #0
 8015370:	2a00      	cmp	r2, #0
 8015372:	bf08      	it	eq
 8015374:	f04c 0c01 	orreq.w	ip, ip, #1
 8015378:	2900      	cmp	r1, #0
 801537a:	bf08      	it	eq
 801537c:	f04c 0c01 	orreq.w	ip, ip, #1
 8015380:	f1bc 0f00 	cmp.w	ip, #0
 8015384:	d11d      	bne.n	80153c2 <rclc_publisher_init+0x6a>
 8015386:	4604      	mov	r4, r0
 8015388:	b1d8      	cbz	r0, 80153c2 <rclc_publisher_init+0x6a>
 801538a:	f10d 0910 	add.w	r9, sp, #16
 801538e:	461f      	mov	r7, r3
 8015390:	4690      	mov	r8, r2
 8015392:	460d      	mov	r5, r1
 8015394:	f7fe ffca 	bl	801432c <rcl_get_zero_initialized_publisher>
 8015398:	6020      	str	r0, [r4, #0]
 801539a:	4648      	mov	r0, r9
 801539c:	f7ff f866 	bl	801446c <rcl_publisher_get_default_options>
 80153a0:	4631      	mov	r1, r6
 80153a2:	2250      	movs	r2, #80	@ 0x50
 80153a4:	4648      	mov	r0, r9
 80153a6:	f00d f946 	bl	8022636 <memcpy>
 80153aa:	463b      	mov	r3, r7
 80153ac:	4642      	mov	r2, r8
 80153ae:	4629      	mov	r1, r5
 80153b0:	4620      	mov	r0, r4
 80153b2:	f8cd 9000 	str.w	r9, [sp]
 80153b6:	f7fe ffbf 	bl	8014338 <rcl_publisher_init>
 80153ba:	b930      	cbnz	r0, 80153ca <rclc_publisher_init+0x72>
 80153bc:	b021      	add	sp, #132	@ 0x84
 80153be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153c2:	200b      	movs	r0, #11
 80153c4:	b021      	add	sp, #132	@ 0x84
 80153c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153ca:	9003      	str	r0, [sp, #12]
 80153cc:	f000 f8fc 	bl	80155c8 <rcutils_reset_error>
 80153d0:	9803      	ldr	r0, [sp, #12]
 80153d2:	b021      	add	sp, #132	@ 0x84
 80153d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080153d8 <rclc_service_init>:
 80153d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153dc:	b09f      	sub	sp, #124	@ 0x7c
 80153de:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 80153e0:	2e00      	cmp	r6, #0
 80153e2:	bf18      	it	ne
 80153e4:	2b00      	cmpne	r3, #0
 80153e6:	bf0c      	ite	eq
 80153e8:	f04f 0c01 	moveq.w	ip, #1
 80153ec:	f04f 0c00 	movne.w	ip, #0
 80153f0:	2a00      	cmp	r2, #0
 80153f2:	bf08      	it	eq
 80153f4:	f04c 0c01 	orreq.w	ip, ip, #1
 80153f8:	2900      	cmp	r1, #0
 80153fa:	bf08      	it	eq
 80153fc:	f04c 0c01 	orreq.w	ip, ip, #1
 8015400:	f1bc 0f00 	cmp.w	ip, #0
 8015404:	d11d      	bne.n	8015442 <rclc_service_init+0x6a>
 8015406:	4604      	mov	r4, r0
 8015408:	b1d8      	cbz	r0, 8015442 <rclc_service_init+0x6a>
 801540a:	f10d 0910 	add.w	r9, sp, #16
 801540e:	461f      	mov	r7, r3
 8015410:	4690      	mov	r8, r2
 8015412:	460d      	mov	r5, r1
 8015414:	f006 fa24 	bl	801b860 <rcl_get_zero_initialized_service>
 8015418:	6020      	str	r0, [r4, #0]
 801541a:	4648      	mov	r0, r9
 801541c:	f006 fab8 	bl	801b990 <rcl_service_get_default_options>
 8015420:	4631      	mov	r1, r6
 8015422:	2250      	movs	r2, #80	@ 0x50
 8015424:	4648      	mov	r0, r9
 8015426:	f00d f906 	bl	8022636 <memcpy>
 801542a:	463b      	mov	r3, r7
 801542c:	4642      	mov	r2, r8
 801542e:	4629      	mov	r1, r5
 8015430:	4620      	mov	r0, r4
 8015432:	f8cd 9000 	str.w	r9, [sp]
 8015436:	f006 fa19 	bl	801b86c <rcl_service_init>
 801543a:	b930      	cbnz	r0, 801544a <rclc_service_init+0x72>
 801543c:	b01f      	add	sp, #124	@ 0x7c
 801543e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015442:	200b      	movs	r0, #11
 8015444:	b01f      	add	sp, #124	@ 0x7c
 8015446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801544a:	9003      	str	r0, [sp, #12]
 801544c:	f000 f8bc 	bl	80155c8 <rcutils_reset_error>
 8015450:	9803      	ldr	r0, [sp, #12]
 8015452:	b01f      	add	sp, #124	@ 0x7c
 8015454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015458 <rclc_subscription_init>:
 8015458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801545c:	b0a1      	sub	sp, #132	@ 0x84
 801545e:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 8015460:	2e00      	cmp	r6, #0
 8015462:	bf18      	it	ne
 8015464:	2b00      	cmpne	r3, #0
 8015466:	bf0c      	ite	eq
 8015468:	f04f 0c01 	moveq.w	ip, #1
 801546c:	f04f 0c00 	movne.w	ip, #0
 8015470:	2a00      	cmp	r2, #0
 8015472:	bf08      	it	eq
 8015474:	f04c 0c01 	orreq.w	ip, ip, #1
 8015478:	2900      	cmp	r1, #0
 801547a:	bf08      	it	eq
 801547c:	f04c 0c01 	orreq.w	ip, ip, #1
 8015480:	f1bc 0f00 	cmp.w	ip, #0
 8015484:	d11d      	bne.n	80154c2 <rclc_subscription_init+0x6a>
 8015486:	4604      	mov	r4, r0
 8015488:	b1d8      	cbz	r0, 80154c2 <rclc_subscription_init+0x6a>
 801548a:	f10d 0910 	add.w	r9, sp, #16
 801548e:	461f      	mov	r7, r3
 8015490:	4690      	mov	r8, r2
 8015492:	460d      	mov	r5, r1
 8015494:	f006 fb08 	bl	801baa8 <rcl_get_zero_initialized_subscription>
 8015498:	6020      	str	r0, [r4, #0]
 801549a:	4648      	mov	r0, r9
 801549c:	f006 fbb8 	bl	801bc10 <rcl_subscription_get_default_options>
 80154a0:	4631      	mov	r1, r6
 80154a2:	2250      	movs	r2, #80	@ 0x50
 80154a4:	4648      	mov	r0, r9
 80154a6:	f00d f8c6 	bl	8022636 <memcpy>
 80154aa:	463b      	mov	r3, r7
 80154ac:	4642      	mov	r2, r8
 80154ae:	4629      	mov	r1, r5
 80154b0:	4620      	mov	r0, r4
 80154b2:	f8cd 9000 	str.w	r9, [sp]
 80154b6:	f006 fafd 	bl	801bab4 <rcl_subscription_init>
 80154ba:	b930      	cbnz	r0, 80154ca <rclc_subscription_init+0x72>
 80154bc:	b021      	add	sp, #132	@ 0x84
 80154be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154c2:	200b      	movs	r0, #11
 80154c4:	b021      	add	sp, #132	@ 0x84
 80154c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154ca:	9003      	str	r0, [sp, #12]
 80154cc:	f000 f87c 	bl	80155c8 <rcutils_reset_error>
 80154d0:	9803      	ldr	r0, [sp, #12]
 80154d2:	b021      	add	sp, #132	@ 0x84
 80154d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080154d8 <rclc_timer_init_default>:
 80154d8:	b361      	cbz	r1, 8015534 <rclc_timer_init_default+0x5c>
 80154da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154de:	4606      	mov	r6, r0
 80154e0:	b08a      	sub	sp, #40	@ 0x28
 80154e2:	b318      	cbz	r0, 801552c <rclc_timer_init_default+0x54>
 80154e4:	460d      	mov	r5, r1
 80154e6:	4690      	mov	r8, r2
 80154e8:	461f      	mov	r7, r3
 80154ea:	f006 fe37 	bl	801c15c <rcl_get_zero_initialized_timer>
 80154ee:	68ac      	ldr	r4, [r5, #8]
 80154f0:	f10d 0c0c 	add.w	ip, sp, #12
 80154f4:	6030      	str	r0, [r6, #0]
 80154f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154fc:	6823      	ldr	r3, [r4, #0]
 80154fe:	462a      	mov	r2, r5
 8015500:	f105 010c 	add.w	r1, r5, #12
 8015504:	4630      	mov	r0, r6
 8015506:	f8cc 3000 	str.w	r3, [ip]
 801550a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801550c:	e9cd 8700 	strd	r8, r7, [sp]
 8015510:	9302      	str	r3, [sp, #8]
 8015512:	f006 fe29 	bl	801c168 <rcl_timer_init>
 8015516:	b910      	cbnz	r0, 801551e <rclc_timer_init_default+0x46>
 8015518:	b00a      	add	sp, #40	@ 0x28
 801551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801551e:	9009      	str	r0, [sp, #36]	@ 0x24
 8015520:	f000 f852 	bl	80155c8 <rcutils_reset_error>
 8015524:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015526:	b00a      	add	sp, #40	@ 0x28
 8015528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801552c:	200b      	movs	r0, #11
 801552e:	b00a      	add	sp, #40	@ 0x28
 8015530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015534:	200b      	movs	r0, #11
 8015536:	4770      	bx	lr

08015538 <__default_zero_allocate>:
 8015538:	f00c ba86 	b.w	8021a48 <calloc>

0801553c <__default_reallocate>:
 801553c:	f00c bc24 	b.w	8021d88 <realloc>

08015540 <__default_deallocate>:
 8015540:	f00c bb00 	b.w	8021b44 <free>

08015544 <__default_allocate>:
 8015544:	f00c baf6 	b.w	8021b34 <malloc>

08015548 <rcutils_get_zero_initialized_allocator>:
 8015548:	b510      	push	{r4, lr}
 801554a:	4c05      	ldr	r4, [pc, #20]	@ (8015560 <rcutils_get_zero_initialized_allocator+0x18>)
 801554c:	4686      	mov	lr, r0
 801554e:	4684      	mov	ip, r0
 8015550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015552:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015556:	6823      	ldr	r3, [r4, #0]
 8015558:	4670      	mov	r0, lr
 801555a:	f8cc 3000 	str.w	r3, [ip]
 801555e:	bd10      	pop	{r4, pc}
 8015560:	08024930 	.word	0x08024930

08015564 <rcutils_get_default_allocator>:
 8015564:	b510      	push	{r4, lr}
 8015566:	4c05      	ldr	r4, [pc, #20]	@ (801557c <rcutils_get_default_allocator+0x18>)
 8015568:	4686      	mov	lr, r0
 801556a:	4684      	mov	ip, r0
 801556c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801556e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015572:	6823      	ldr	r3, [r4, #0]
 8015574:	4670      	mov	r0, lr
 8015576:	f8cc 3000 	str.w	r3, [ip]
 801557a:	bd10      	pop	{r4, pc}
 801557c:	24000dfc 	.word	0x24000dfc

08015580 <rcutils_allocator_is_valid>:
 8015580:	b158      	cbz	r0, 801559a <rcutils_allocator_is_valid+0x1a>
 8015582:	6803      	ldr	r3, [r0, #0]
 8015584:	b143      	cbz	r3, 8015598 <rcutils_allocator_is_valid+0x18>
 8015586:	6843      	ldr	r3, [r0, #4]
 8015588:	b133      	cbz	r3, 8015598 <rcutils_allocator_is_valid+0x18>
 801558a:	68c3      	ldr	r3, [r0, #12]
 801558c:	b123      	cbz	r3, 8015598 <rcutils_allocator_is_valid+0x18>
 801558e:	6880      	ldr	r0, [r0, #8]
 8015590:	3800      	subs	r0, #0
 8015592:	bf18      	it	ne
 8015594:	2001      	movne	r0, #1
 8015596:	4770      	bx	lr
 8015598:	4618      	mov	r0, r3
 801559a:	4770      	bx	lr

0801559c <rcutils_get_error_string>:
 801559c:	4b06      	ldr	r3, [pc, #24]	@ (80155b8 <rcutils_get_error_string+0x1c>)
 801559e:	781b      	ldrb	r3, [r3, #0]
 80155a0:	b13b      	cbz	r3, 80155b2 <rcutils_get_error_string+0x16>
 80155a2:	4b06      	ldr	r3, [pc, #24]	@ (80155bc <rcutils_get_error_string+0x20>)
 80155a4:	781a      	ldrb	r2, [r3, #0]
 80155a6:	b90a      	cbnz	r2, 80155ac <rcutils_get_error_string+0x10>
 80155a8:	2201      	movs	r2, #1
 80155aa:	701a      	strb	r2, [r3, #0]
 80155ac:	4b04      	ldr	r3, [pc, #16]	@ (80155c0 <rcutils_get_error_string+0x24>)
 80155ae:	7818      	ldrb	r0, [r3, #0]
 80155b0:	4770      	bx	lr
 80155b2:	4b04      	ldr	r3, [pc, #16]	@ (80155c4 <rcutils_get_error_string+0x28>)
 80155b4:	7818      	ldrb	r0, [r3, #0]
 80155b6:	4770      	bx	lr
 80155b8:	24064a58 	.word	0x24064a58
 80155bc:	24064a71 	.word	0x24064a71
 80155c0:	24064a70 	.word	0x24064a70
 80155c4:	08024944 	.word	0x08024944

080155c8 <rcutils_reset_error>:
 80155c8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80155e8 <rcutils_reset_error+0x20>
 80155cc:	2300      	movs	r3, #0
 80155ce:	4a08      	ldr	r2, [pc, #32]	@ (80155f0 <rcutils_reset_error+0x28>)
 80155d0:	4808      	ldr	r0, [pc, #32]	@ (80155f4 <rcutils_reset_error+0x2c>)
 80155d2:	8013      	strh	r3, [r2, #0]
 80155d4:	4908      	ldr	r1, [pc, #32]	@ (80155f8 <rcutils_reset_error+0x30>)
 80155d6:	7003      	strb	r3, [r0, #0]
 80155d8:	700b      	strb	r3, [r1, #0]
 80155da:	ed82 7b02 	vstr	d7, [r2, #8]
 80155de:	4a07      	ldr	r2, [pc, #28]	@ (80155fc <rcutils_reset_error+0x34>)
 80155e0:	7013      	strb	r3, [r2, #0]
 80155e2:	4770      	bx	lr
 80155e4:	f3af 8000 	nop.w
	...
 80155f0:	24064a60 	.word	0x24064a60
 80155f4:	24064a71 	.word	0x24064a71
 80155f8:	24064a70 	.word	0x24064a70
 80155fc:	24064a58 	.word	0x24064a58

08015600 <rcutils_system_time_now>:
 8015600:	b300      	cbz	r0, 8015644 <rcutils_system_time_now+0x44>
 8015602:	b570      	push	{r4, r5, r6, lr}
 8015604:	b084      	sub	sp, #16
 8015606:	4604      	mov	r4, r0
 8015608:	2001      	movs	r0, #1
 801560a:	4669      	mov	r1, sp
 801560c:	f7ec fe9c 	bl	8002348 <clock_gettime>
 8015610:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015614:	2900      	cmp	r1, #0
 8015616:	db12      	blt.n	801563e <rcutils_system_time_now+0x3e>
 8015618:	ea53 0201 	orrs.w	r2, r3, r1
 801561c:	9d02      	ldr	r5, [sp, #8]
 801561e:	d101      	bne.n	8015624 <rcutils_system_time_now+0x24>
 8015620:	2d00      	cmp	r5, #0
 8015622:	db0c      	blt.n	801563e <rcutils_system_time_now+0x3e>
 8015624:	4e08      	ldr	r6, [pc, #32]	@ (8015648 <rcutils_system_time_now+0x48>)
 8015626:	2000      	movs	r0, #0
 8015628:	fba3 3206 	umull	r3, r2, r3, r6
 801562c:	195b      	adds	r3, r3, r5
 801562e:	fb06 2201 	mla	r2, r6, r1, r2
 8015632:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8015636:	e9c4 3200 	strd	r3, r2, [r4]
 801563a:	b004      	add	sp, #16
 801563c:	bd70      	pop	{r4, r5, r6, pc}
 801563e:	2002      	movs	r0, #2
 8015640:	b004      	add	sp, #16
 8015642:	bd70      	pop	{r4, r5, r6, pc}
 8015644:	200b      	movs	r0, #11
 8015646:	4770      	bx	lr
 8015648:	3b9aca00 	.word	0x3b9aca00

0801564c <rcutils_steady_time_now>:
 801564c:	b300      	cbz	r0, 8015690 <rcutils_steady_time_now+0x44>
 801564e:	b570      	push	{r4, r5, r6, lr}
 8015650:	b084      	sub	sp, #16
 8015652:	4604      	mov	r4, r0
 8015654:	2000      	movs	r0, #0
 8015656:	4669      	mov	r1, sp
 8015658:	f7ec fe76 	bl	8002348 <clock_gettime>
 801565c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015660:	2900      	cmp	r1, #0
 8015662:	db12      	blt.n	801568a <rcutils_steady_time_now+0x3e>
 8015664:	ea53 0201 	orrs.w	r2, r3, r1
 8015668:	9d02      	ldr	r5, [sp, #8]
 801566a:	d101      	bne.n	8015670 <rcutils_steady_time_now+0x24>
 801566c:	2d00      	cmp	r5, #0
 801566e:	db0c      	blt.n	801568a <rcutils_steady_time_now+0x3e>
 8015670:	4e08      	ldr	r6, [pc, #32]	@ (8015694 <rcutils_steady_time_now+0x48>)
 8015672:	2000      	movs	r0, #0
 8015674:	fba3 3206 	umull	r3, r2, r3, r6
 8015678:	195b      	adds	r3, r3, r5
 801567a:	fb06 2201 	mla	r2, r6, r1, r2
 801567e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8015682:	e9c4 3200 	strd	r3, r2, [r4]
 8015686:	b004      	add	sp, #16
 8015688:	bd70      	pop	{r4, r5, r6, pc}
 801568a:	2002      	movs	r0, #2
 801568c:	b004      	add	sp, #16
 801568e:	bd70      	pop	{r4, r5, r6, pc}
 8015690:	200b      	movs	r0, #11
 8015692:	4770      	bx	lr
 8015694:	3b9aca00 	.word	0x3b9aca00

08015698 <rmw_get_default_publisher_options>:
 8015698:	2200      	movs	r2, #0
 801569a:	6002      	str	r2, [r0, #0]
 801569c:	7102      	strb	r2, [r0, #4]
 801569e:	4770      	bx	lr

080156a0 <rmw_uros_set_custom_transport>:
 80156a0:	b470      	push	{r4, r5, r6}
 80156a2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80156a6:	b162      	cbz	r2, 80156c2 <rmw_uros_set_custom_transport+0x22>
 80156a8:	b15b      	cbz	r3, 80156c2 <rmw_uros_set_custom_transport+0x22>
 80156aa:	b155      	cbz	r5, 80156c2 <rmw_uros_set_custom_transport+0x22>
 80156ac:	b14e      	cbz	r6, 80156c2 <rmw_uros_set_custom_transport+0x22>
 80156ae:	4c06      	ldr	r4, [pc, #24]	@ (80156c8 <rmw_uros_set_custom_transport+0x28>)
 80156b0:	7020      	strb	r0, [r4, #0]
 80156b2:	2000      	movs	r0, #0
 80156b4:	6166      	str	r6, [r4, #20]
 80156b6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80156ba:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80156be:	bc70      	pop	{r4, r5, r6}
 80156c0:	4770      	bx	lr
 80156c2:	200b      	movs	r0, #11
 80156c4:	bc70      	pop	{r4, r5, r6}
 80156c6:	4770      	bx	lr
 80156c8:	24064a74 	.word	0x24064a74

080156cc <rmw_uros_ping_agent>:
 80156cc:	4b1f      	ldr	r3, [pc, #124]	@ (801574c <rmw_uros_ping_agent+0x80>)
 80156ce:	7b1a      	ldrb	r2, [r3, #12]
 80156d0:	b570      	push	{r4, r5, r6, lr}
 80156d2:	4605      	mov	r5, r0
 80156d4:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80156d8:	460e      	mov	r6, r1
 80156da:	b192      	cbz	r2, 8015702 <rmw_uros_ping_agent+0x36>
 80156dc:	681c      	ldr	r4, [r3, #0]
 80156de:	b184      	cbz	r4, 8015702 <rmw_uros_ping_agent+0x36>
 80156e0:	68a0      	ldr	r0, [r4, #8]
 80156e2:	4632      	mov	r2, r6
 80156e4:	4629      	mov	r1, r5
 80156e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156ea:	f001 ff45 	bl	8017578 <uxr_ping_agent_session>
 80156ee:	6864      	ldr	r4, [r4, #4]
 80156f0:	f080 0301 	eor.w	r3, r0, #1
 80156f4:	b2d8      	uxtb	r0, r3
 80156f6:	b10c      	cbz	r4, 80156fc <rmw_uros_ping_agent+0x30>
 80156f8:	2800      	cmp	r0, #0
 80156fa:	d1f1      	bne.n	80156e0 <rmw_uros_ping_agent+0x14>
 80156fc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015700:	bd70      	pop	{r4, r5, r6, pc}
 8015702:	4b13      	ldr	r3, [pc, #76]	@ (8015750 <rmw_uros_ping_agent+0x84>)
 8015704:	2100      	movs	r1, #0
 8015706:	781a      	ldrb	r2, [r3, #0]
 8015708:	6918      	ldr	r0, [r3, #16]
 801570a:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 801570e:	685a      	ldr	r2, [r3, #4]
 8015710:	909c      	str	r0, [sp, #624]	@ 0x270
 8015712:	92a3      	str	r2, [sp, #652]	@ 0x28c
 8015714:	6958      	ldr	r0, [r3, #20]
 8015716:	68da      	ldr	r2, [r3, #12]
 8015718:	689b      	ldr	r3, [r3, #8]
 801571a:	929b      	str	r2, [sp, #620]	@ 0x26c
 801571c:	466a      	mov	r2, sp
 801571e:	909d      	str	r0, [sp, #628]	@ 0x274
 8015720:	4608      	mov	r0, r1
 8015722:	939a      	str	r3, [sp, #616]	@ 0x268
 8015724:	f000 f9c6 	bl	8015ab4 <rmw_uxrce_transport_init>
 8015728:	2800      	cmp	r0, #0
 801572a:	d1e7      	bne.n	80156fc <rmw_uros_ping_agent+0x30>
 801572c:	4632      	mov	r2, r6
 801572e:	4629      	mov	r1, r5
 8015730:	a89e      	add	r0, sp, #632	@ 0x278
 8015732:	f001 ff6d 	bl	8017610 <uxr_ping_agent_attempts>
 8015736:	4604      	mov	r4, r0
 8015738:	4668      	mov	r0, sp
 801573a:	f001 fee9 	bl	8017510 <uxr_close_custom_transport>
 801573e:	f084 0301 	eor.w	r3, r4, #1
 8015742:	b2d8      	uxtb	r0, r3
 8015744:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015748:	bd70      	pop	{r4, r5, r6, pc}
 801574a:	bf00      	nop
 801574c:	2406938c 	.word	0x2406938c
 8015750:	24064a74 	.word	0x24064a74

08015754 <flush_session>:
 8015754:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8015756:	f002 bcef 	b.w	8018138 <uxr_run_session_until_confirm_delivery>
 801575a:	bf00      	nop

0801575c <rmw_publish>:
 801575c:	2800      	cmp	r0, #0
 801575e:	d053      	beq.n	8015808 <rmw_publish+0xac>
 8015760:	b570      	push	{r4, r5, r6, lr}
 8015762:	460d      	mov	r5, r1
 8015764:	b08e      	sub	sp, #56	@ 0x38
 8015766:	2900      	cmp	r1, #0
 8015768:	d04b      	beq.n	8015802 <rmw_publish+0xa6>
 801576a:	4604      	mov	r4, r0
 801576c:	6800      	ldr	r0, [r0, #0]
 801576e:	f000 fdcf 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 8015772:	2800      	cmp	r0, #0
 8015774:	d045      	beq.n	8015802 <rmw_publish+0xa6>
 8015776:	6866      	ldr	r6, [r4, #4]
 8015778:	2e00      	cmp	r6, #0
 801577a:	d042      	beq.n	8015802 <rmw_publish+0xa6>
 801577c:	69b4      	ldr	r4, [r6, #24]
 801577e:	4628      	mov	r0, r5
 8015780:	6923      	ldr	r3, [r4, #16]
 8015782:	4798      	blx	r3
 8015784:	69f3      	ldr	r3, [r6, #28]
 8015786:	9005      	str	r0, [sp, #20]
 8015788:	b113      	cbz	r3, 8015790 <rmw_publish+0x34>
 801578a:	a805      	add	r0, sp, #20
 801578c:	4798      	blx	r3
 801578e:	9805      	ldr	r0, [sp, #20]
 8015790:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015794:	691b      	ldr	r3, [r3, #16]
 8015796:	9000      	str	r0, [sp, #0]
 8015798:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801579c:	6972      	ldr	r2, [r6, #20]
 801579e:	ab06      	add	r3, sp, #24
 80157a0:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80157a2:	f003 ffc3 	bl	801972c <uxr_prepare_output_stream>
 80157a6:	b1d8      	cbz	r0, 80157e0 <rmw_publish+0x84>
 80157a8:	68a3      	ldr	r3, [r4, #8]
 80157aa:	a906      	add	r1, sp, #24
 80157ac:	4628      	mov	r0, r5
 80157ae:	4798      	blx	r3
 80157b0:	6a33      	ldr	r3, [r6, #32]
 80157b2:	4604      	mov	r4, r0
 80157b4:	b10b      	cbz	r3, 80157ba <rmw_publish+0x5e>
 80157b6:	a806      	add	r0, sp, #24
 80157b8:	4798      	blx	r3
 80157ba:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80157be:	2b01      	cmp	r3, #1
 80157c0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80157c4:	d022      	beq.n	801580c <rmw_publish+0xb0>
 80157c6:	6918      	ldr	r0, [r3, #16]
 80157c8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80157ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157ce:	f002 fcb3 	bl	8018138 <uxr_run_session_until_confirm_delivery>
 80157d2:	4020      	ands	r0, r4
 80157d4:	b2c4      	uxtb	r4, r0
 80157d6:	f084 0001 	eor.w	r0, r4, #1
 80157da:	b2c0      	uxtb	r0, r0
 80157dc:	b00e      	add	sp, #56	@ 0x38
 80157de:	bd70      	pop	{r4, r5, r6, pc}
 80157e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80157e4:	6918      	ldr	r0, [r3, #16]
 80157e6:	9b05      	ldr	r3, [sp, #20]
 80157e8:	9602      	str	r6, [sp, #8]
 80157ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157ee:	9300      	str	r3, [sp, #0]
 80157f0:	4b09      	ldr	r3, [pc, #36]	@ (8015818 <rmw_publish+0xbc>)
 80157f2:	9301      	str	r3, [sp, #4]
 80157f4:	ab06      	add	r3, sp, #24
 80157f6:	6972      	ldr	r2, [r6, #20]
 80157f8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80157fa:	f003 ffc7 	bl	801978c <uxr_prepare_output_stream_fragmented>
 80157fe:	2800      	cmp	r0, #0
 8015800:	d1d2      	bne.n	80157a8 <rmw_publish+0x4c>
 8015802:	2001      	movs	r0, #1
 8015804:	b00e      	add	sp, #56	@ 0x38
 8015806:	bd70      	pop	{r4, r5, r6, pc}
 8015808:	2001      	movs	r0, #1
 801580a:	4770      	bx	lr
 801580c:	6918      	ldr	r0, [r3, #16]
 801580e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015812:	f002 f8d7 	bl	80179c4 <uxr_flash_output_streams>
 8015816:	e7de      	b.n	80157d6 <rmw_publish+0x7a>
 8015818:	08015755 	.word	0x08015755

0801581c <rmw_create_publisher>:
 801581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015820:	b087      	sub	sp, #28
 8015822:	2800      	cmp	r0, #0
 8015824:	f000 80d2 	beq.w	80159cc <rmw_create_publisher+0x1b0>
 8015828:	460e      	mov	r6, r1
 801582a:	2900      	cmp	r1, #0
 801582c:	f000 80ce 	beq.w	80159cc <rmw_create_publisher+0x1b0>
 8015830:	4604      	mov	r4, r0
 8015832:	6800      	ldr	r0, [r0, #0]
 8015834:	4615      	mov	r5, r2
 8015836:	461f      	mov	r7, r3
 8015838:	f000 fd6a 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 801583c:	f080 0001 	eor.w	r0, r0, #1
 8015840:	b2c0      	uxtb	r0, r0
 8015842:	2800      	cmp	r0, #0
 8015844:	f040 80c2 	bne.w	80159cc <rmw_create_publisher+0x1b0>
 8015848:	2d00      	cmp	r5, #0
 801584a:	f000 80bf 	beq.w	80159cc <rmw_create_publisher+0x1b0>
 801584e:	782b      	ldrb	r3, [r5, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	f000 80bb 	beq.w	80159cc <rmw_create_publisher+0x1b0>
 8015856:	2f00      	cmp	r7, #0
 8015858:	f000 80b8 	beq.w	80159cc <rmw_create_publisher+0x1b0>
 801585c:	485e      	ldr	r0, [pc, #376]	@ (80159d8 <rmw_create_publisher+0x1bc>)
 801585e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015862:	f008 ffab 	bl	801e7bc <get_memory>
 8015866:	2800      	cmp	r0, #0
 8015868:	f000 80b0 	beq.w	80159cc <rmw_create_publisher+0x1b0>
 801586c:	6884      	ldr	r4, [r0, #8]
 801586e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8015872:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8015876:	f009 f809 	bl	801e88c <rmw_get_implementation_identifier>
 801587a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801587e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8015882:	4628      	mov	r0, r5
 8015884:	f7ea fd36 	bl	80002f4 <strlen>
 8015888:	3001      	adds	r0, #1
 801588a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801588e:	283c      	cmp	r0, #60	@ 0x3c
 8015890:	f200 808f 	bhi.w	80159b2 <rmw_create_publisher+0x196>
 8015894:	462b      	mov	r3, r5
 8015896:	4a51      	ldr	r2, [pc, #324]	@ (80159dc <rmw_create_publisher+0x1c0>)
 8015898:	213c      	movs	r1, #60	@ 0x3c
 801589a:	4650      	mov	r0, sl
 801589c:	f00c fc3e 	bl	802211c <sniprintf>
 80158a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80158a4:	4639      	mov	r1, r7
 80158a6:	2250      	movs	r2, #80	@ 0x50
 80158a8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80158aa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80158ae:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80158b2:	f00c fec0 	bl	8022636 <memcpy>
 80158b6:	7a3b      	ldrb	r3, [r7, #8]
 80158b8:	4630      	mov	r0, r6
 80158ba:	4949      	ldr	r1, [pc, #292]	@ (80159e0 <rmw_create_publisher+0x1c4>)
 80158bc:	2b02      	cmp	r3, #2
 80158be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80158c2:	bf0c      	ite	eq
 80158c4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80158c8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80158cc:	67a3      	str	r3, [r4, #120]	@ 0x78
 80158ce:	2300      	movs	r3, #0
 80158d0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80158d4:	f000 fd98 	bl	8016408 <get_message_typesupport_handle>
 80158d8:	2800      	cmp	r0, #0
 80158da:	d06a      	beq.n	80159b2 <rmw_create_publisher+0x196>
 80158dc:	6842      	ldr	r2, [r0, #4]
 80158de:	61a2      	str	r2, [r4, #24]
 80158e0:	2a00      	cmp	r2, #0
 80158e2:	d066      	beq.n	80159b2 <rmw_create_publisher+0x196>
 80158e4:	4629      	mov	r1, r5
 80158e6:	463b      	mov	r3, r7
 80158e8:	4648      	mov	r0, r9
 80158ea:	f009 fa3b 	bl	801ed64 <create_topic>
 80158ee:	6260      	str	r0, [r4, #36]	@ 0x24
 80158f0:	2800      	cmp	r0, #0
 80158f2:	d062      	beq.n	80159ba <rmw_create_publisher+0x19e>
 80158f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80158f8:	2103      	movs	r1, #3
 80158fa:	2506      	movs	r5, #6
 80158fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015900:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8015904:	1c42      	adds	r2, r0, #1
 8015906:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801590a:	f001 fe05 	bl	8017518 <uxr_object_id>
 801590e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8015912:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015916:	6120      	str	r0, [r4, #16]
 8015918:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 801591c:	6910      	ldr	r0, [r2, #16]
 801591e:	9500      	str	r5, [sp, #0]
 8015920:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015924:	6819      	ldr	r1, [r3, #0]
 8015926:	6922      	ldr	r2, [r4, #16]
 8015928:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801592c:	f001 fbae 	bl	801708c <uxr_buffer_create_publisher_bin>
 8015930:	4602      	mov	r2, r0
 8015932:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015936:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801593a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801593e:	f000 fbd5 	bl	80160ec <run_xrce_session>
 8015942:	b3b0      	cbz	r0, 80159b2 <rmw_create_publisher+0x196>
 8015944:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015948:	2105      	movs	r1, #5
 801594a:	f10d 0a10 	add.w	sl, sp, #16
 801594e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015952:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8015956:	1c42      	adds	r2, r0, #1
 8015958:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801595c:	f001 fddc 	bl	8017518 <uxr_object_id>
 8015960:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8015964:	4639      	mov	r1, r7
 8015966:	6160      	str	r0, [r4, #20]
 8015968:	691e      	ldr	r6, [r3, #16]
 801596a:	4650      	mov	r0, sl
 801596c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015970:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8015974:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8015978:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 801597c:	f000 fbd2 	bl	8016124 <convert_qos_profile>
 8015980:	9503      	str	r5, [sp, #12]
 8015982:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8015986:	9001      	str	r0, [sp, #4]
 8015988:	4630      	mov	r0, r6
 801598a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801598e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015992:	9300      	str	r3, [sp, #0]
 8015994:	6839      	ldr	r1, [r7, #0]
 8015996:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801599a:	f001 fbd7 	bl	801714c <uxr_buffer_create_datawriter_bin>
 801599e:	4602      	mov	r2, r0
 80159a0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80159a4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80159a8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80159ac:	f000 fb9e 	bl	80160ec <run_xrce_session>
 80159b0:	b970      	cbnz	r0, 80159d0 <rmw_create_publisher+0x1b4>
 80159b2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80159b4:	b108      	cbz	r0, 80159ba <rmw_create_publisher+0x19e>
 80159b6:	f000 fa8b 	bl	8015ed0 <rmw_uxrce_fini_topic_memory>
 80159ba:	4640      	mov	r0, r8
 80159bc:	f04f 0800 	mov.w	r8, #0
 80159c0:	f000 fa2e 	bl	8015e20 <rmw_uxrce_fini_publisher_memory>
 80159c4:	4640      	mov	r0, r8
 80159c6:	b007      	add	sp, #28
 80159c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159cc:	f04f 0800 	mov.w	r8, #0
 80159d0:	4640      	mov	r0, r8
 80159d2:	b007      	add	sp, #28
 80159d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d8:	2406936c 	.word	0x2406936c
 80159dc:	08024958 	.word	0x08024958
 80159e0:	08023788 	.word	0x08023788

080159e4 <rmw_publisher_get_actual_qos>:
 80159e4:	b178      	cbz	r0, 8015a06 <rmw_publisher_get_actual_qos+0x22>
 80159e6:	b510      	push	{r4, lr}
 80159e8:	fab1 f481 	clz	r4, r1
 80159ec:	0964      	lsrs	r4, r4, #5
 80159ee:	b141      	cbz	r1, 8015a02 <rmw_publisher_get_actual_qos+0x1e>
 80159f0:	6843      	ldr	r3, [r0, #4]
 80159f2:	2250      	movs	r2, #80	@ 0x50
 80159f4:	4608      	mov	r0, r1
 80159f6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80159fa:	f00c fe1c 	bl	8022636 <memcpy>
 80159fe:	4620      	mov	r0, r4
 8015a00:	bd10      	pop	{r4, pc}
 8015a02:	200b      	movs	r0, #11
 8015a04:	bd10      	pop	{r4, pc}
 8015a06:	200b      	movs	r0, #11
 8015a08:	4770      	bx	lr
 8015a0a:	bf00      	nop

08015a0c <rmw_destroy_publisher>:
 8015a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a10:	b128      	cbz	r0, 8015a1e <rmw_destroy_publisher+0x12>
 8015a12:	4604      	mov	r4, r0
 8015a14:	6800      	ldr	r0, [r0, #0]
 8015a16:	460d      	mov	r5, r1
 8015a18:	f000 fc7a 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 8015a1c:	b918      	cbnz	r0, 8015a26 <rmw_destroy_publisher+0x1a>
 8015a1e:	2401      	movs	r4, #1
 8015a20:	4620      	mov	r0, r4
 8015a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a26:	6863      	ldr	r3, [r4, #4]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d0f8      	beq.n	8015a1e <rmw_destroy_publisher+0x12>
 8015a2c:	fab5 f485 	clz	r4, r5
 8015a30:	0964      	lsrs	r4, r4, #5
 8015a32:	2d00      	cmp	r5, #0
 8015a34:	d0f3      	beq.n	8015a1e <rmw_destroy_publisher+0x12>
 8015a36:	6828      	ldr	r0, [r5, #0]
 8015a38:	f000 fc6a 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	d0ee      	beq.n	8015a1e <rmw_destroy_publisher+0x12>
 8015a40:	686e      	ldr	r6, [r5, #4]
 8015a42:	2e00      	cmp	r6, #0
 8015a44:	d0eb      	beq.n	8015a1e <rmw_destroy_publisher+0x12>
 8015a46:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8015a48:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8015a4c:	f009 f9da 	bl	801ee04 <destroy_topic>
 8015a50:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015a54:	6972      	ldr	r2, [r6, #20]
 8015a56:	6918      	ldr	r0, [r3, #16]
 8015a58:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015a5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a60:	6819      	ldr	r1, [r3, #0]
 8015a62:	f001 fa5f 	bl	8016f24 <uxr_buffer_delete_entity>
 8015a66:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015a6a:	4680      	mov	r8, r0
 8015a6c:	6932      	ldr	r2, [r6, #16]
 8015a6e:	6918      	ldr	r0, [r3, #16]
 8015a70:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015a74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a78:	6819      	ldr	r1, [r3, #0]
 8015a7a:	f001 fa53 	bl	8016f24 <uxr_buffer_delete_entity>
 8015a7e:	4606      	mov	r6, r0
 8015a80:	6938      	ldr	r0, [r7, #16]
 8015a82:	4642      	mov	r2, r8
 8015a84:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015a88:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015a8c:	f000 fb2e 	bl	80160ec <run_xrce_session>
 8015a90:	693f      	ldr	r7, [r7, #16]
 8015a92:	4632      	mov	r2, r6
 8015a94:	4606      	mov	r6, r0
 8015a96:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015a9a:	4638      	mov	r0, r7
 8015a9c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8015aa0:	f000 fb24 	bl	80160ec <run_xrce_session>
 8015aa4:	b126      	cbz	r6, 8015ab0 <rmw_destroy_publisher+0xa4>
 8015aa6:	b118      	cbz	r0, 8015ab0 <rmw_destroy_publisher+0xa4>
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	f000 f9b9 	bl	8015e20 <rmw_uxrce_fini_publisher_memory>
 8015aae:	e7b7      	b.n	8015a20 <rmw_destroy_publisher+0x14>
 8015ab0:	2402      	movs	r4, #2
 8015ab2:	e7f9      	b.n	8015aa8 <rmw_destroy_publisher+0x9c>

08015ab4 <rmw_uxrce_transport_init>:
 8015ab4:	b508      	push	{r3, lr}
 8015ab6:	b108      	cbz	r0, 8015abc <rmw_uxrce_transport_init+0x8>
 8015ab8:	f100 0210 	add.w	r2, r0, #16
 8015abc:	b139      	cbz	r1, 8015ace <rmw_uxrce_transport_init+0x1a>
 8015abe:	6949      	ldr	r1, [r1, #20]
 8015ac0:	4610      	mov	r0, r2
 8015ac2:	f001 fcf1 	bl	80174a8 <uxr_init_custom_transport>
 8015ac6:	f080 0001 	eor.w	r0, r0, #1
 8015aca:	b2c0      	uxtb	r0, r0
 8015acc:	bd08      	pop	{r3, pc}
 8015ace:	4b04      	ldr	r3, [pc, #16]	@ (8015ae0 <rmw_uxrce_transport_init+0x2c>)
 8015ad0:	4610      	mov	r0, r2
 8015ad2:	6859      	ldr	r1, [r3, #4]
 8015ad4:	f001 fce8 	bl	80174a8 <uxr_init_custom_transport>
 8015ad8:	f080 0001 	eor.w	r0, r0, #1
 8015adc:	b2c0      	uxtb	r0, r0
 8015ade:	bd08      	pop	{r3, pc}
 8015ae0:	24064a74 	.word	0x24064a74

08015ae4 <rmw_uros_epoch_nanos>:
 8015ae4:	4b05      	ldr	r3, [pc, #20]	@ (8015afc <rmw_uros_epoch_nanos+0x18>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	b123      	cbz	r3, 8015af4 <rmw_uros_epoch_nanos+0x10>
 8015aea:	6898      	ldr	r0, [r3, #8]
 8015aec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015af0:	f001 bf5e 	b.w	80179b0 <uxr_epoch_nanos>
 8015af4:	2000      	movs	r0, #0
 8015af6:	2100      	movs	r1, #0
 8015af8:	4770      	bx	lr
 8015afa:	bf00      	nop
 8015afc:	2406938c 	.word	0x2406938c

08015b00 <rmw_uros_sync_session>:
 8015b00:	b508      	push	{r3, lr}
 8015b02:	4b07      	ldr	r3, [pc, #28]	@ (8015b20 <rmw_uros_sync_session+0x20>)
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	b14b      	cbz	r3, 8015b1c <rmw_uros_sync_session+0x1c>
 8015b08:	4601      	mov	r1, r0
 8015b0a:	6898      	ldr	r0, [r3, #8]
 8015b0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015b10:	f002 fb8e 	bl	8018230 <uxr_sync_session>
 8015b14:	f080 0001 	eor.w	r0, r0, #1
 8015b18:	b2c0      	uxtb	r0, r0
 8015b1a:	bd08      	pop	{r3, pc}
 8015b1c:	2001      	movs	r0, #1
 8015b1e:	bd08      	pop	{r3, pc}
 8015b20:	2406938c 	.word	0x2406938c

08015b24 <rmw_uxrce_init_service_memory>:
 8015b24:	b1e2      	cbz	r2, 8015b60 <rmw_uxrce_init_service_memory+0x3c>
 8015b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b2a:	7b05      	ldrb	r5, [r0, #12]
 8015b2c:	4606      	mov	r6, r0
 8015b2e:	b9ad      	cbnz	r5, 8015b5c <rmw_uxrce_init_service_memory+0x38>
 8015b30:	23c8      	movs	r3, #200	@ 0xc8
 8015b32:	4617      	mov	r7, r2
 8015b34:	460c      	mov	r4, r1
 8015b36:	46a8      	mov	r8, r5
 8015b38:	6083      	str	r3, [r0, #8]
 8015b3a:	f240 1301 	movw	r3, #257	@ 0x101
 8015b3e:	e9c0 5500 	strd	r5, r5, [r0]
 8015b42:	8183      	strh	r3, [r0, #12]
 8015b44:	3501      	adds	r5, #1
 8015b46:	4621      	mov	r1, r4
 8015b48:	4630      	mov	r0, r6
 8015b4a:	f008 fe47 	bl	801e7dc <put_memory>
 8015b4e:	42af      	cmp	r7, r5
 8015b50:	60a4      	str	r4, [r4, #8]
 8015b52:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015b56:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015b5a:	d1f3      	bne.n	8015b44 <rmw_uxrce_init_service_memory+0x20>
 8015b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b60:	4770      	bx	lr
 8015b62:	bf00      	nop

08015b64 <rmw_uxrce_init_client_memory>:
 8015b64:	b1e2      	cbz	r2, 8015ba0 <rmw_uxrce_init_client_memory+0x3c>
 8015b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b6a:	7b05      	ldrb	r5, [r0, #12]
 8015b6c:	4606      	mov	r6, r0
 8015b6e:	b9ad      	cbnz	r5, 8015b9c <rmw_uxrce_init_client_memory+0x38>
 8015b70:	23c8      	movs	r3, #200	@ 0xc8
 8015b72:	4617      	mov	r7, r2
 8015b74:	460c      	mov	r4, r1
 8015b76:	46a8      	mov	r8, r5
 8015b78:	6083      	str	r3, [r0, #8]
 8015b7a:	f240 1301 	movw	r3, #257	@ 0x101
 8015b7e:	e9c0 5500 	strd	r5, r5, [r0]
 8015b82:	8183      	strh	r3, [r0, #12]
 8015b84:	3501      	adds	r5, #1
 8015b86:	4621      	mov	r1, r4
 8015b88:	4630      	mov	r0, r6
 8015b8a:	f008 fe27 	bl	801e7dc <put_memory>
 8015b8e:	42af      	cmp	r7, r5
 8015b90:	60a4      	str	r4, [r4, #8]
 8015b92:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015b96:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015b9a:	d1f3      	bne.n	8015b84 <rmw_uxrce_init_client_memory+0x20>
 8015b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ba0:	4770      	bx	lr
 8015ba2:	bf00      	nop

08015ba4 <rmw_uxrce_init_publisher_memory>:
 8015ba4:	b1e2      	cbz	r2, 8015be0 <rmw_uxrce_init_publisher_memory+0x3c>
 8015ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015baa:	7b05      	ldrb	r5, [r0, #12]
 8015bac:	4606      	mov	r6, r0
 8015bae:	b9ad      	cbnz	r5, 8015bdc <rmw_uxrce_init_publisher_memory+0x38>
 8015bb0:	23d8      	movs	r3, #216	@ 0xd8
 8015bb2:	4617      	mov	r7, r2
 8015bb4:	460c      	mov	r4, r1
 8015bb6:	46a8      	mov	r8, r5
 8015bb8:	6083      	str	r3, [r0, #8]
 8015bba:	f240 1301 	movw	r3, #257	@ 0x101
 8015bbe:	e9c0 5500 	strd	r5, r5, [r0]
 8015bc2:	8183      	strh	r3, [r0, #12]
 8015bc4:	3501      	adds	r5, #1
 8015bc6:	4621      	mov	r1, r4
 8015bc8:	4630      	mov	r0, r6
 8015bca:	f008 fe07 	bl	801e7dc <put_memory>
 8015bce:	42af      	cmp	r7, r5
 8015bd0:	60a4      	str	r4, [r4, #8]
 8015bd2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015bd6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015bda:	d1f3      	bne.n	8015bc4 <rmw_uxrce_init_publisher_memory+0x20>
 8015bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015be0:	4770      	bx	lr
 8015be2:	bf00      	nop

08015be4 <rmw_uxrce_init_subscription_memory>:
 8015be4:	b1e2      	cbz	r2, 8015c20 <rmw_uxrce_init_subscription_memory+0x3c>
 8015be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bea:	7b05      	ldrb	r5, [r0, #12]
 8015bec:	4606      	mov	r6, r0
 8015bee:	b9ad      	cbnz	r5, 8015c1c <rmw_uxrce_init_subscription_memory+0x38>
 8015bf0:	23d8      	movs	r3, #216	@ 0xd8
 8015bf2:	4617      	mov	r7, r2
 8015bf4:	460c      	mov	r4, r1
 8015bf6:	46a8      	mov	r8, r5
 8015bf8:	6083      	str	r3, [r0, #8]
 8015bfa:	f240 1301 	movw	r3, #257	@ 0x101
 8015bfe:	e9c0 5500 	strd	r5, r5, [r0]
 8015c02:	8183      	strh	r3, [r0, #12]
 8015c04:	3501      	adds	r5, #1
 8015c06:	4621      	mov	r1, r4
 8015c08:	4630      	mov	r0, r6
 8015c0a:	f008 fde7 	bl	801e7dc <put_memory>
 8015c0e:	42af      	cmp	r7, r5
 8015c10:	60a4      	str	r4, [r4, #8]
 8015c12:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015c16:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015c1a:	d1f3      	bne.n	8015c04 <rmw_uxrce_init_subscription_memory+0x20>
 8015c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c20:	4770      	bx	lr
 8015c22:	bf00      	nop

08015c24 <rmw_uxrce_init_node_memory>:
 8015c24:	b1e2      	cbz	r2, 8015c60 <rmw_uxrce_init_node_memory+0x3c>
 8015c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c2a:	7b05      	ldrb	r5, [r0, #12]
 8015c2c:	4606      	mov	r6, r0
 8015c2e:	b9ad      	cbnz	r5, 8015c5c <rmw_uxrce_init_node_memory+0x38>
 8015c30:	23a4      	movs	r3, #164	@ 0xa4
 8015c32:	4617      	mov	r7, r2
 8015c34:	460c      	mov	r4, r1
 8015c36:	46a8      	mov	r8, r5
 8015c38:	6083      	str	r3, [r0, #8]
 8015c3a:	f240 1301 	movw	r3, #257	@ 0x101
 8015c3e:	e9c0 5500 	strd	r5, r5, [r0]
 8015c42:	8183      	strh	r3, [r0, #12]
 8015c44:	3501      	adds	r5, #1
 8015c46:	4621      	mov	r1, r4
 8015c48:	4630      	mov	r0, r6
 8015c4a:	f008 fdc7 	bl	801e7dc <put_memory>
 8015c4e:	42af      	cmp	r7, r5
 8015c50:	60a4      	str	r4, [r4, #8]
 8015c52:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8015c56:	f804 8c98 	strb.w	r8, [r4, #-152]
 8015c5a:	d1f3      	bne.n	8015c44 <rmw_uxrce_init_node_memory+0x20>
 8015c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c60:	4770      	bx	lr
 8015c62:	bf00      	nop

08015c64 <rmw_uxrce_init_session_memory>:
 8015c64:	b1ea      	cbz	r2, 8015ca2 <rmw_uxrce_init_session_memory+0x3e>
 8015c66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c6a:	7b05      	ldrb	r5, [r0, #12]
 8015c6c:	4606      	mov	r6, r0
 8015c6e:	b9b5      	cbnz	r5, 8015c9e <rmw_uxrce_init_session_memory+0x3a>
 8015c70:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8015c74:	f240 1301 	movw	r3, #257	@ 0x101
 8015c78:	4617      	mov	r7, r2
 8015c7a:	460c      	mov	r4, r1
 8015c7c:	46a9      	mov	r9, r5
 8015c7e:	f8c0 8008 	str.w	r8, [r0, #8]
 8015c82:	8183      	strh	r3, [r0, #12]
 8015c84:	e9c0 5500 	strd	r5, r5, [r0]
 8015c88:	3501      	adds	r5, #1
 8015c8a:	4621      	mov	r1, r4
 8015c8c:	4630      	mov	r0, r6
 8015c8e:	f008 fda5 	bl	801e7dc <put_memory>
 8015c92:	42af      	cmp	r7, r5
 8015c94:	60a4      	str	r4, [r4, #8]
 8015c96:	f884 900c 	strb.w	r9, [r4, #12]
 8015c9a:	4444      	add	r4, r8
 8015c9c:	d1f4      	bne.n	8015c88 <rmw_uxrce_init_session_memory+0x24>
 8015c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ca2:	4770      	bx	lr

08015ca4 <rmw_uxrce_init_topic_memory>:
 8015ca4:	b1e2      	cbz	r2, 8015ce0 <rmw_uxrce_init_topic_memory+0x3c>
 8015ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015caa:	7b05      	ldrb	r5, [r0, #12]
 8015cac:	4606      	mov	r6, r0
 8015cae:	b9ad      	cbnz	r5, 8015cdc <rmw_uxrce_init_topic_memory+0x38>
 8015cb0:	231c      	movs	r3, #28
 8015cb2:	4617      	mov	r7, r2
 8015cb4:	460c      	mov	r4, r1
 8015cb6:	46a8      	mov	r8, r5
 8015cb8:	6083      	str	r3, [r0, #8]
 8015cba:	f240 1301 	movw	r3, #257	@ 0x101
 8015cbe:	e9c0 5500 	strd	r5, r5, [r0]
 8015cc2:	8183      	strh	r3, [r0, #12]
 8015cc4:	3501      	adds	r5, #1
 8015cc6:	4621      	mov	r1, r4
 8015cc8:	4630      	mov	r0, r6
 8015cca:	f008 fd87 	bl	801e7dc <put_memory>
 8015cce:	42af      	cmp	r7, r5
 8015cd0:	60a4      	str	r4, [r4, #8]
 8015cd2:	f104 041c 	add.w	r4, r4, #28
 8015cd6:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015cda:	d1f3      	bne.n	8015cc4 <rmw_uxrce_init_topic_memory+0x20>
 8015cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop

08015ce4 <rmw_uxrce_init_static_input_buffer_memory>:
 8015ce4:	b1ea      	cbz	r2, 8015d22 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8015ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cea:	7b05      	ldrb	r5, [r0, #12]
 8015cec:	4606      	mov	r6, r0
 8015cee:	b9b5      	cbnz	r5, 8015d1e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8015cf0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8015cf4:	4617      	mov	r7, r2
 8015cf6:	460c      	mov	r4, r1
 8015cf8:	46a8      	mov	r8, r5
 8015cfa:	6083      	str	r3, [r0, #8]
 8015cfc:	f240 1301 	movw	r3, #257	@ 0x101
 8015d00:	e9c0 5500 	strd	r5, r5, [r0]
 8015d04:	8183      	strh	r3, [r0, #12]
 8015d06:	3501      	adds	r5, #1
 8015d08:	4621      	mov	r1, r4
 8015d0a:	4630      	mov	r0, r6
 8015d0c:	f008 fd66 	bl	801e7dc <put_memory>
 8015d10:	42af      	cmp	r7, r5
 8015d12:	60a4      	str	r4, [r4, #8]
 8015d14:	f884 800c 	strb.w	r8, [r4, #12]
 8015d18:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8015d1c:	d1f3      	bne.n	8015d06 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8015d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d22:	4770      	bx	lr

08015d24 <rmw_uxrce_init_init_options_impl_memory>:
 8015d24:	b1e2      	cbz	r2, 8015d60 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8015d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d2a:	7b05      	ldrb	r5, [r0, #12]
 8015d2c:	4606      	mov	r6, r0
 8015d2e:	b9ad      	cbnz	r5, 8015d5c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8015d30:	232c      	movs	r3, #44	@ 0x2c
 8015d32:	4617      	mov	r7, r2
 8015d34:	460c      	mov	r4, r1
 8015d36:	46a8      	mov	r8, r5
 8015d38:	6083      	str	r3, [r0, #8]
 8015d3a:	f240 1301 	movw	r3, #257	@ 0x101
 8015d3e:	e9c0 5500 	strd	r5, r5, [r0]
 8015d42:	8183      	strh	r3, [r0, #12]
 8015d44:	3501      	adds	r5, #1
 8015d46:	4621      	mov	r1, r4
 8015d48:	4630      	mov	r0, r6
 8015d4a:	f008 fd47 	bl	801e7dc <put_memory>
 8015d4e:	42af      	cmp	r7, r5
 8015d50:	60a4      	str	r4, [r4, #8]
 8015d52:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8015d56:	f804 8c20 	strb.w	r8, [r4, #-32]
 8015d5a:	d1f3      	bne.n	8015d44 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8015d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d60:	4770      	bx	lr
 8015d62:	bf00      	nop

08015d64 <rmw_uxrce_init_wait_set_memory>:
 8015d64:	b1e2      	cbz	r2, 8015da0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8015d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d6a:	7b05      	ldrb	r5, [r0, #12]
 8015d6c:	4606      	mov	r6, r0
 8015d6e:	b9ad      	cbnz	r5, 8015d9c <rmw_uxrce_init_wait_set_memory+0x38>
 8015d70:	231c      	movs	r3, #28
 8015d72:	4617      	mov	r7, r2
 8015d74:	460c      	mov	r4, r1
 8015d76:	46a8      	mov	r8, r5
 8015d78:	6083      	str	r3, [r0, #8]
 8015d7a:	f240 1301 	movw	r3, #257	@ 0x101
 8015d7e:	e9c0 5500 	strd	r5, r5, [r0]
 8015d82:	8183      	strh	r3, [r0, #12]
 8015d84:	3501      	adds	r5, #1
 8015d86:	4621      	mov	r1, r4
 8015d88:	4630      	mov	r0, r6
 8015d8a:	f008 fd27 	bl	801e7dc <put_memory>
 8015d8e:	42af      	cmp	r7, r5
 8015d90:	60a4      	str	r4, [r4, #8]
 8015d92:	f104 041c 	add.w	r4, r4, #28
 8015d96:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015d9a:	d1f3      	bne.n	8015d84 <rmw_uxrce_init_wait_set_memory+0x20>
 8015d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015da0:	4770      	bx	lr
 8015da2:	bf00      	nop

08015da4 <rmw_uxrce_init_guard_condition_memory>:
 8015da4:	b1e2      	cbz	r2, 8015de0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8015da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015daa:	7b05      	ldrb	r5, [r0, #12]
 8015dac:	4606      	mov	r6, r0
 8015dae:	b9ad      	cbnz	r5, 8015ddc <rmw_uxrce_init_guard_condition_memory+0x38>
 8015db0:	2320      	movs	r3, #32
 8015db2:	4617      	mov	r7, r2
 8015db4:	460c      	mov	r4, r1
 8015db6:	46a8      	mov	r8, r5
 8015db8:	6083      	str	r3, [r0, #8]
 8015dba:	f240 1301 	movw	r3, #257	@ 0x101
 8015dbe:	e9c0 5500 	strd	r5, r5, [r0]
 8015dc2:	8183      	strh	r3, [r0, #12]
 8015dc4:	3501      	adds	r5, #1
 8015dc6:	4621      	mov	r1, r4
 8015dc8:	4630      	mov	r0, r6
 8015dca:	f008 fd07 	bl	801e7dc <put_memory>
 8015dce:	42af      	cmp	r7, r5
 8015dd0:	60a4      	str	r4, [r4, #8]
 8015dd2:	f104 0420 	add.w	r4, r4, #32
 8015dd6:	f804 8c14 	strb.w	r8, [r4, #-20]
 8015dda:	d1f3      	bne.n	8015dc4 <rmw_uxrce_init_guard_condition_memory+0x20>
 8015ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de0:	4770      	bx	lr
 8015de2:	bf00      	nop

08015de4 <rmw_uxrce_fini_session_memory>:
 8015de4:	4601      	mov	r1, r0
 8015de6:	4801      	ldr	r0, [pc, #4]	@ (8015dec <rmw_uxrce_fini_session_memory+0x8>)
 8015de8:	f008 bcf8 	b.w	801e7dc <put_memory>
 8015dec:	2406938c 	.word	0x2406938c

08015df0 <rmw_uxrce_fini_node_memory>:
 8015df0:	b538      	push	{r3, r4, r5, lr}
 8015df2:	4604      	mov	r4, r0
 8015df4:	6800      	ldr	r0, [r0, #0]
 8015df6:	b128      	cbz	r0, 8015e04 <rmw_uxrce_fini_node_memory+0x14>
 8015df8:	4b07      	ldr	r3, [pc, #28]	@ (8015e18 <rmw_uxrce_fini_node_memory+0x28>)
 8015dfa:	6819      	ldr	r1, [r3, #0]
 8015dfc:	f7ea fa70 	bl	80002e0 <strcmp>
 8015e00:	b940      	cbnz	r0, 8015e14 <rmw_uxrce_fini_node_memory+0x24>
 8015e02:	6020      	str	r0, [r4, #0]
 8015e04:	6861      	ldr	r1, [r4, #4]
 8015e06:	b129      	cbz	r1, 8015e14 <rmw_uxrce_fini_node_memory+0x24>
 8015e08:	2500      	movs	r5, #0
 8015e0a:	4804      	ldr	r0, [pc, #16]	@ (8015e1c <rmw_uxrce_fini_node_memory+0x2c>)
 8015e0c:	610d      	str	r5, [r1, #16]
 8015e0e:	f008 fce5 	bl	801e7dc <put_memory>
 8015e12:	6065      	str	r5, [r4, #4]
 8015e14:	bd38      	pop	{r3, r4, r5, pc}
 8015e16:	bf00      	nop
 8015e18:	080258d8 	.word	0x080258d8
 8015e1c:	2406935c 	.word	0x2406935c

08015e20 <rmw_uxrce_fini_publisher_memory>:
 8015e20:	b510      	push	{r4, lr}
 8015e22:	4604      	mov	r4, r0
 8015e24:	6800      	ldr	r0, [r0, #0]
 8015e26:	b128      	cbz	r0, 8015e34 <rmw_uxrce_fini_publisher_memory+0x14>
 8015e28:	4b06      	ldr	r3, [pc, #24]	@ (8015e44 <rmw_uxrce_fini_publisher_memory+0x24>)
 8015e2a:	6819      	ldr	r1, [r3, #0]
 8015e2c:	f7ea fa58 	bl	80002e0 <strcmp>
 8015e30:	b938      	cbnz	r0, 8015e42 <rmw_uxrce_fini_publisher_memory+0x22>
 8015e32:	6020      	str	r0, [r4, #0]
 8015e34:	6861      	ldr	r1, [r4, #4]
 8015e36:	b121      	cbz	r1, 8015e42 <rmw_uxrce_fini_publisher_memory+0x22>
 8015e38:	4803      	ldr	r0, [pc, #12]	@ (8015e48 <rmw_uxrce_fini_publisher_memory+0x28>)
 8015e3a:	f008 fccf 	bl	801e7dc <put_memory>
 8015e3e:	2300      	movs	r3, #0
 8015e40:	6063      	str	r3, [r4, #4]
 8015e42:	bd10      	pop	{r4, pc}
 8015e44:	080258d8 	.word	0x080258d8
 8015e48:	2406936c 	.word	0x2406936c

08015e4c <rmw_uxrce_fini_subscription_memory>:
 8015e4c:	b510      	push	{r4, lr}
 8015e4e:	4604      	mov	r4, r0
 8015e50:	6800      	ldr	r0, [r0, #0]
 8015e52:	b128      	cbz	r0, 8015e60 <rmw_uxrce_fini_subscription_memory+0x14>
 8015e54:	4b06      	ldr	r3, [pc, #24]	@ (8015e70 <rmw_uxrce_fini_subscription_memory+0x24>)
 8015e56:	6819      	ldr	r1, [r3, #0]
 8015e58:	f7ea fa42 	bl	80002e0 <strcmp>
 8015e5c:	b938      	cbnz	r0, 8015e6e <rmw_uxrce_fini_subscription_memory+0x22>
 8015e5e:	6020      	str	r0, [r4, #0]
 8015e60:	6861      	ldr	r1, [r4, #4]
 8015e62:	b121      	cbz	r1, 8015e6e <rmw_uxrce_fini_subscription_memory+0x22>
 8015e64:	4803      	ldr	r0, [pc, #12]	@ (8015e74 <rmw_uxrce_fini_subscription_memory+0x28>)
 8015e66:	f008 fcb9 	bl	801e7dc <put_memory>
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	6063      	str	r3, [r4, #4]
 8015e6e:	bd10      	pop	{r4, pc}
 8015e70:	080258d8 	.word	0x080258d8
 8015e74:	240693ac 	.word	0x240693ac

08015e78 <rmw_uxrce_fini_service_memory>:
 8015e78:	b510      	push	{r4, lr}
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	6800      	ldr	r0, [r0, #0]
 8015e7e:	b128      	cbz	r0, 8015e8c <rmw_uxrce_fini_service_memory+0x14>
 8015e80:	4b06      	ldr	r3, [pc, #24]	@ (8015e9c <rmw_uxrce_fini_service_memory+0x24>)
 8015e82:	6819      	ldr	r1, [r3, #0]
 8015e84:	f7ea fa2c 	bl	80002e0 <strcmp>
 8015e88:	b938      	cbnz	r0, 8015e9a <rmw_uxrce_fini_service_memory+0x22>
 8015e8a:	6020      	str	r0, [r4, #0]
 8015e8c:	6861      	ldr	r1, [r4, #4]
 8015e8e:	b121      	cbz	r1, 8015e9a <rmw_uxrce_fini_service_memory+0x22>
 8015e90:	4803      	ldr	r0, [pc, #12]	@ (8015ea0 <rmw_uxrce_fini_service_memory+0x28>)
 8015e92:	f008 fca3 	bl	801e7dc <put_memory>
 8015e96:	2300      	movs	r3, #0
 8015e98:	6063      	str	r3, [r4, #4]
 8015e9a:	bd10      	pop	{r4, pc}
 8015e9c:	080258d8 	.word	0x080258d8
 8015ea0:	2406937c 	.word	0x2406937c

08015ea4 <rmw_uxrce_fini_client_memory>:
 8015ea4:	b510      	push	{r4, lr}
 8015ea6:	4604      	mov	r4, r0
 8015ea8:	6800      	ldr	r0, [r0, #0]
 8015eaa:	b128      	cbz	r0, 8015eb8 <rmw_uxrce_fini_client_memory+0x14>
 8015eac:	4b06      	ldr	r3, [pc, #24]	@ (8015ec8 <rmw_uxrce_fini_client_memory+0x24>)
 8015eae:	6819      	ldr	r1, [r3, #0]
 8015eb0:	f7ea fa16 	bl	80002e0 <strcmp>
 8015eb4:	b938      	cbnz	r0, 8015ec6 <rmw_uxrce_fini_client_memory+0x22>
 8015eb6:	6020      	str	r0, [r4, #0]
 8015eb8:	6861      	ldr	r1, [r4, #4]
 8015eba:	b121      	cbz	r1, 8015ec6 <rmw_uxrce_fini_client_memory+0x22>
 8015ebc:	4803      	ldr	r0, [pc, #12]	@ (8015ecc <rmw_uxrce_fini_client_memory+0x28>)
 8015ebe:	f008 fc8d 	bl	801e7dc <put_memory>
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	6063      	str	r3, [r4, #4]
 8015ec6:	bd10      	pop	{r4, pc}
 8015ec8:	080258d8 	.word	0x080258d8
 8015ecc:	24064a90 	.word	0x24064a90

08015ed0 <rmw_uxrce_fini_topic_memory>:
 8015ed0:	b510      	push	{r4, lr}
 8015ed2:	4604      	mov	r4, r0
 8015ed4:	4803      	ldr	r0, [pc, #12]	@ (8015ee4 <rmw_uxrce_fini_topic_memory+0x14>)
 8015ed6:	4621      	mov	r1, r4
 8015ed8:	f008 fc80 	bl	801e7dc <put_memory>
 8015edc:	2300      	movs	r3, #0
 8015ede:	61a3      	str	r3, [r4, #24]
 8015ee0:	bd10      	pop	{r4, pc}
 8015ee2:	bf00      	nop
 8015ee4:	240693bc 	.word	0x240693bc

08015ee8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8015ee8:	b082      	sub	sp, #8
 8015eea:	492b      	ldr	r1, [pc, #172]	@ (8015f98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015eec:	b530      	push	{r4, r5, lr}
 8015eee:	680d      	ldr	r5, [r1, #0]
 8015ef0:	ac03      	add	r4, sp, #12
 8015ef2:	e884 000c 	stmia.w	r4, {r2, r3}
 8015ef6:	461c      	mov	r4, r3
 8015ef8:	2d00      	cmp	r5, #0
 8015efa:	d04b      	beq.n	8015f94 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8015efc:	462b      	mov	r3, r5
 8015efe:	2100      	movs	r1, #0
 8015f00:	689a      	ldr	r2, [r3, #8]
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8015f08:	4290      	cmp	r0, r2
 8015f0a:	bf08      	it	eq
 8015f0c:	3101      	addeq	r1, #1
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d1f6      	bne.n	8015f00 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8015f12:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015f16:	2b02      	cmp	r3, #2
 8015f18:	d029      	beq.n	8015f6e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8015f1a:	d820      	bhi.n	8015f5e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8015f1c:	428c      	cmp	r4, r1
 8015f1e:	d828      	bhi.n	8015f72 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015f20:	fab4 f284 	clz	r2, r4
 8015f24:	0952      	lsrs	r2, r2, #5
 8015f26:	b324      	cbz	r4, 8015f72 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015f28:	b1dd      	cbz	r5, 8015f62 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8015f2a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015f2e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8015f32:	e001      	b.n	8015f38 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8015f34:	686d      	ldr	r5, [r5, #4]
 8015f36:	b1ad      	cbz	r5, 8015f64 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015f38:	68ab      	ldr	r3, [r5, #8]
 8015f3a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8015f3e:	4288      	cmp	r0, r1
 8015f40:	d1f8      	bne.n	8015f34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015f42:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8015f46:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8015f4a:	4561      	cmp	r1, ip
 8015f4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015f50:	eb73 0e04 	sbcs.w	lr, r3, r4
 8015f54:	daee      	bge.n	8015f34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015f56:	468c      	mov	ip, r1
 8015f58:	461c      	mov	r4, r3
 8015f5a:	462a      	mov	r2, r5
 8015f5c:	e7ea      	b.n	8015f34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015f5e:	2b03      	cmp	r3, #3
 8015f60:	d0dc      	beq.n	8015f1c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8015f62:	2200      	movs	r2, #0
 8015f64:	4610      	mov	r0, r2
 8015f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f6a:	b002      	add	sp, #8
 8015f6c:	4770      	bx	lr
 8015f6e:	428c      	cmp	r4, r1
 8015f70:	d905      	bls.n	8015f7e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8015f72:	4809      	ldr	r0, [pc, #36]	@ (8015f98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f78:	b002      	add	sp, #8
 8015f7a:	f008 bc1f 	b.w	801e7bc <get_memory>
 8015f7e:	fab4 f284 	clz	r2, r4
 8015f82:	0952      	lsrs	r2, r2, #5
 8015f84:	2c00      	cmp	r4, #0
 8015f86:	d1ed      	bne.n	8015f64 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015f88:	4803      	ldr	r0, [pc, #12]	@ (8015f98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f8e:	b002      	add	sp, #8
 8015f90:	f008 bc14 	b.w	801e7bc <get_memory>
 8015f94:	4629      	mov	r1, r5
 8015f96:	e7bc      	b.n	8015f12 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8015f98:	2406939c 	.word	0x2406939c

08015f9c <rmw_uxrce_find_static_input_buffer_by_owner>:
 8015f9c:	4b12      	ldr	r3, [pc, #72]	@ (8015fe8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	b530      	push	{r4, r5, lr}
 8015fa2:	b1f3      	cbz	r3, 8015fe2 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8015fa4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8015fa8:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8015fac:	2400      	movs	r4, #0
 8015fae:	e001      	b.n	8015fb4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	b1a3      	cbz	r3, 8015fde <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8015fb4:	689a      	ldr	r2, [r3, #8]
 8015fb6:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8015fba:	4288      	cmp	r0, r1
 8015fbc:	d1f8      	bne.n	8015fb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015fbe:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8015fc2:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8015fc6:	4571      	cmp	r1, lr
 8015fc8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8015fcc:	eb72 050c 	sbcs.w	r5, r2, ip
 8015fd0:	daee      	bge.n	8015fb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015fd2:	461c      	mov	r4, r3
 8015fd4:	685b      	ldr	r3, [r3, #4]
 8015fd6:	468e      	mov	lr, r1
 8015fd8:	4694      	mov	ip, r2
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d1ea      	bne.n	8015fb4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015fde:	4620      	mov	r0, r4
 8015fe0:	bd30      	pop	{r4, r5, pc}
 8015fe2:	461c      	mov	r4, r3
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	bd30      	pop	{r4, r5, pc}
 8015fe8:	2406939c 	.word	0x2406939c
 8015fec:	00000000 	.word	0x00000000

08015ff0 <rmw_uxrce_clean_expired_static_input_buffer>:
 8015ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80160e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015ff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff6:	681f      	ldr	r7, [r3, #0]
 8015ff8:	ed2d 8b06 	vpush	{d8-d10}
 8015ffc:	b08d      	sub	sp, #52	@ 0x34
 8015ffe:	f7ff fd71 	bl	8015ae4 <rmw_uros_epoch_nanos>
 8016002:	2f00      	cmp	r7, #0
 8016004:	d05d      	beq.n	80160c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016006:	46b8      	mov	r8, r7
 8016008:	4681      	mov	r9, r0
 801600a:	468a      	mov	sl, r1
 801600c:	ac04      	add	r4, sp, #16
 801600e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016012:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8016016:	2b04      	cmp	r3, #4
 8016018:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 80160d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801601c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 80160d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8016020:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 80160e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8016024:	d03f      	beq.n	80160a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016026:	2b05      	cmp	r3, #5
 8016028:	d044      	beq.n	80160b4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801602a:	2b03      	cmp	r3, #3
 801602c:	d03b      	beq.n	80160a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801602e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016032:	ed8d ab06 	vstr	d10, [sp, #24]
 8016036:	ab08      	add	r3, sp, #32
 8016038:	ed8d 8b08 	vstr	d8, [sp, #32]
 801603c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8016040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016042:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016046:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801604a:	f008 f9d9 	bl	801e400 <rmw_time_equal>
 801604e:	b118      	cbz	r0, 8016058 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8016050:	ed8d 9b04 	vstr	d9, [sp, #16]
 8016054:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016058:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801605c:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8016060:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8016064:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8016068:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801606c:	f008 fa1e 	bl	801e4ac <rmw_time_total_nsec>
 8016070:	1830      	adds	r0, r6, r0
 8016072:	eb47 0101 	adc.w	r1, r7, r1
 8016076:	4548      	cmp	r0, r9
 8016078:	eb71 030a 	sbcs.w	r3, r1, sl
 801607c:	db05      	blt.n	801608a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801607e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8016082:	4591      	cmp	r9, r2
 8016084:	eb7a 0303 	sbcs.w	r3, sl, r3
 8016088:	da03      	bge.n	8016092 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801608a:	4641      	mov	r1, r8
 801608c:	4816      	ldr	r0, [pc, #88]	@ (80160e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801608e:	f008 fba5 	bl	801e7dc <put_memory>
 8016092:	f1bb 0f00 	cmp.w	fp, #0
 8016096:	d014      	beq.n	80160c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016098:	46d8      	mov	r8, fp
 801609a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801609e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80160a2:	2b04      	cmp	r3, #4
 80160a4:	d1bf      	bne.n	8016026 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80160a6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80160aa:	3340      	adds	r3, #64	@ 0x40
 80160ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80160ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80160b2:	e7c0      	b.n	8016036 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80160b4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80160b8:	3348      	adds	r3, #72	@ 0x48
 80160ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80160bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80160c0:	e7b9      	b.n	8016036 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80160c2:	b00d      	add	sp, #52	@ 0x34
 80160c4:	ecbd 8b06 	vpop	{d8-d10}
 80160c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160cc:	f3af 8000 	nop.w
	...
 80160d8:	00000001 	.word	0x00000001
 80160dc:	00000000 	.word	0x00000000
 80160e0:	0000001e 	.word	0x0000001e
 80160e4:	00000000 	.word	0x00000000
 80160e8:	2406939c 	.word	0x2406939c

080160ec <run_xrce_session>:
 80160ec:	b510      	push	{r4, lr}
 80160ee:	788c      	ldrb	r4, [r1, #2]
 80160f0:	b086      	sub	sp, #24
 80160f2:	2c01      	cmp	r4, #1
 80160f4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80160f8:	d00c      	beq.n	8016114 <run_xrce_session+0x28>
 80160fa:	2401      	movs	r4, #1
 80160fc:	4619      	mov	r1, r3
 80160fe:	f10d 020e 	add.w	r2, sp, #14
 8016102:	f10d 0317 	add.w	r3, sp, #23
 8016106:	9400      	str	r4, [sp, #0]
 8016108:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801610c:	f002 f838 	bl	8018180 <uxr_run_session_until_all_status>
 8016110:	b006      	add	sp, #24
 8016112:	bd10      	pop	{r4, pc}
 8016114:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016118:	f001 fc54 	bl	80179c4 <uxr_flash_output_streams>
 801611c:	4620      	mov	r0, r4
 801611e:	b006      	add	sp, #24
 8016120:	bd10      	pop	{r4, pc}
 8016122:	bf00      	nop

08016124 <convert_qos_profile>:
 8016124:	7a4a      	ldrb	r2, [r1, #9]
 8016126:	f891 c008 	ldrb.w	ip, [r1, #8]
 801612a:	2a02      	cmp	r2, #2
 801612c:	bf18      	it	ne
 801612e:	2200      	movne	r2, #0
 8016130:	7002      	strb	r2, [r0, #0]
 8016132:	f1ac 0202 	sub.w	r2, ip, #2
 8016136:	fab2 f282 	clz	r2, r2
 801613a:	0952      	lsrs	r2, r2, #5
 801613c:	7042      	strb	r2, [r0, #1]
 801613e:	780a      	ldrb	r2, [r1, #0]
 8016140:	8889      	ldrh	r1, [r1, #4]
 8016142:	f1a2 0202 	sub.w	r2, r2, #2
 8016146:	8081      	strh	r1, [r0, #4]
 8016148:	fab2 f282 	clz	r2, r2
 801614c:	0952      	lsrs	r2, r2, #5
 801614e:	7082      	strb	r2, [r0, #2]
 8016150:	4770      	bx	lr
 8016152:	bf00      	nop

08016154 <generate_service_topics>:
 8016154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016156:	461d      	mov	r5, r3
 8016158:	b083      	sub	sp, #12
 801615a:	4606      	mov	r6, r0
 801615c:	4c11      	ldr	r4, [pc, #68]	@ (80161a4 <generate_service_topics+0x50>)
 801615e:	4608      	mov	r0, r1
 8016160:	4b11      	ldr	r3, [pc, #68]	@ (80161a8 <generate_service_topics+0x54>)
 8016162:	4617      	mov	r7, r2
 8016164:	4629      	mov	r1, r5
 8016166:	4a11      	ldr	r2, [pc, #68]	@ (80161ac <generate_service_topics+0x58>)
 8016168:	9401      	str	r4, [sp, #4]
 801616a:	9600      	str	r6, [sp, #0]
 801616c:	f00b ffd6 	bl	802211c <sniprintf>
 8016170:	4a0f      	ldr	r2, [pc, #60]	@ (80161b0 <generate_service_topics+0x5c>)
 8016172:	4604      	mov	r4, r0
 8016174:	4b0f      	ldr	r3, [pc, #60]	@ (80161b4 <generate_service_topics+0x60>)
 8016176:	9201      	str	r2, [sp, #4]
 8016178:	4638      	mov	r0, r7
 801617a:	4a0c      	ldr	r2, [pc, #48]	@ (80161ac <generate_service_topics+0x58>)
 801617c:	4629      	mov	r1, r5
 801617e:	9600      	str	r6, [sp, #0]
 8016180:	f00b ffcc 	bl	802211c <sniprintf>
 8016184:	2c00      	cmp	r4, #0
 8016186:	bfa8      	it	ge
 8016188:	42a5      	cmpge	r5, r4
 801618a:	bfcc      	ite	gt
 801618c:	2401      	movgt	r4, #1
 801618e:	2400      	movle	r4, #0
 8016190:	dd05      	ble.n	801619e <generate_service_topics+0x4a>
 8016192:	2800      	cmp	r0, #0
 8016194:	bfa8      	it	ge
 8016196:	4285      	cmpge	r5, r0
 8016198:	bfcc      	ite	gt
 801619a:	2401      	movgt	r4, #1
 801619c:	2400      	movle	r4, #0
 801619e:	4620      	mov	r0, r4
 80161a0:	b003      	add	sp, #12
 80161a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161a4:	0802497c 	.word	0x0802497c
 80161a8:	08024978 	.word	0x08024978
 80161ac:	08024954 	.word	0x08024954
 80161b0:	08024970 	.word	0x08024970
 80161b4:	0802496c 	.word	0x0802496c

080161b8 <generate_service_types>:
 80161b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161bc:	4606      	mov	r6, r0
 80161be:	b087      	sub	sp, #28
 80161c0:	461c      	mov	r4, r3
 80161c2:	6883      	ldr	r3, [r0, #8]
 80161c4:	460d      	mov	r5, r1
 80161c6:	4617      	mov	r7, r2
 80161c8:	4798      	blx	r3
 80161ca:	68f3      	ldr	r3, [r6, #12]
 80161cc:	4606      	mov	r6, r0
 80161ce:	4798      	blx	r3
 80161d0:	2300      	movs	r3, #0
 80161d2:	f8d0 b004 	ldr.w	fp, [r0, #4]
 80161d6:	6872      	ldr	r2, [r6, #4]
 80161d8:	702b      	strb	r3, [r5, #0]
 80161da:	6813      	ldr	r3, [r2, #0]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d03f      	beq.n	8016260 <generate_service_types+0xa8>
 80161e0:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016274 <generate_service_types+0xbc>
 80161e4:	4649      	mov	r1, r9
 80161e6:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 801627c <generate_service_types+0xc4>
 80161ea:	4628      	mov	r0, r5
 80161ec:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8016280 <generate_service_types+0xc8>
 80161f0:	f8cd 8014 	str.w	r8, [sp, #20]
 80161f4:	6852      	ldr	r2, [r2, #4]
 80161f6:	9100      	str	r1, [sp, #0]
 80161f8:	4621      	mov	r1, r4
 80161fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80161fe:	f8cd a004 	str.w	sl, [sp, #4]
 8016202:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8016206:	4a1a      	ldr	r2, [pc, #104]	@ (8016270 <generate_service_types+0xb8>)
 8016208:	f00b ff88 	bl	802211c <sniprintf>
 801620c:	2300      	movs	r3, #0
 801620e:	42a0      	cmp	r0, r4
 8016210:	ea6f 0600 	mvn.w	r6, r0
 8016214:	703b      	strb	r3, [r7, #0]
 8016216:	f8db 3000 	ldr.w	r3, [fp]
 801621a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801621e:	bfac      	ite	ge
 8016220:	2500      	movge	r5, #0
 8016222:	2501      	movlt	r5, #1
 8016224:	b30b      	cbz	r3, 801626a <generate_service_types+0xb2>
 8016226:	4a13      	ldr	r2, [pc, #76]	@ (8016274 <generate_service_types+0xbc>)
 8016228:	f8cd 8014 	str.w	r8, [sp, #20]
 801622c:	402e      	ands	r6, r5
 801622e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8016232:	4638      	mov	r0, r7
 8016234:	9104      	str	r1, [sp, #16]
 8016236:	4621      	mov	r1, r4
 8016238:	e9cd 2a00 	strd	r2, sl, [sp]
 801623c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016240:	4a0b      	ldr	r2, [pc, #44]	@ (8016270 <generate_service_types+0xb8>)
 8016242:	f00b ff6b 	bl	802211c <sniprintf>
 8016246:	2800      	cmp	r0, #0
 8016248:	bfb4      	ite	lt
 801624a:	2600      	movlt	r6, #0
 801624c:	f006 0601 	andge.w	r6, r6, #1
 8016250:	42a0      	cmp	r0, r4
 8016252:	bfac      	ite	ge
 8016254:	2000      	movge	r0, #0
 8016256:	f006 0001 	andlt.w	r0, r6, #1
 801625a:	b007      	add	sp, #28
 801625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016260:	4b05      	ldr	r3, [pc, #20]	@ (8016278 <generate_service_types+0xc0>)
 8016262:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 8016274 <generate_service_types+0xbc>
 8016266:	4619      	mov	r1, r3
 8016268:	e7bd      	b.n	80161e6 <generate_service_types+0x2e>
 801626a:	4b03      	ldr	r3, [pc, #12]	@ (8016278 <generate_service_types+0xc0>)
 801626c:	461a      	mov	r2, r3
 801626e:	e7db      	b.n	8016228 <generate_service_types+0x70>
 8016270:	0802494c 	.word	0x0802494c
 8016274:	08024948 	.word	0x08024948
 8016278:	08025a14 	.word	0x08025a14
 801627c:	0802495c 	.word	0x0802495c
 8016280:	08024960 	.word	0x08024960

08016284 <generate_type_name>:
 8016284:	2300      	movs	r3, #0
 8016286:	b530      	push	{r4, r5, lr}
 8016288:	700b      	strb	r3, [r1, #0]
 801628a:	b087      	sub	sp, #28
 801628c:	6803      	ldr	r3, [r0, #0]
 801628e:	4614      	mov	r4, r2
 8016290:	b1bb      	cbz	r3, 80162c2 <generate_type_name+0x3e>
 8016292:	4a0e      	ldr	r2, [pc, #56]	@ (80162cc <generate_type_name+0x48>)
 8016294:	4615      	mov	r5, r2
 8016296:	9500      	str	r5, [sp, #0]
 8016298:	9203      	str	r2, [sp, #12]
 801629a:	4d0d      	ldr	r5, [pc, #52]	@ (80162d0 <generate_type_name+0x4c>)
 801629c:	6842      	ldr	r2, [r0, #4]
 801629e:	4608      	mov	r0, r1
 80162a0:	490c      	ldr	r1, [pc, #48]	@ (80162d4 <generate_type_name+0x50>)
 80162a2:	9204      	str	r2, [sp, #16]
 80162a4:	9105      	str	r1, [sp, #20]
 80162a6:	9102      	str	r1, [sp, #8]
 80162a8:	4621      	mov	r1, r4
 80162aa:	4a0b      	ldr	r2, [pc, #44]	@ (80162d8 <generate_type_name+0x54>)
 80162ac:	9501      	str	r5, [sp, #4]
 80162ae:	f00b ff35 	bl	802211c <sniprintf>
 80162b2:	2800      	cmp	r0, #0
 80162b4:	bfa8      	it	ge
 80162b6:	4284      	cmpge	r4, r0
 80162b8:	bfcc      	ite	gt
 80162ba:	2001      	movgt	r0, #1
 80162bc:	2000      	movle	r0, #0
 80162be:	b007      	add	sp, #28
 80162c0:	bd30      	pop	{r4, r5, pc}
 80162c2:	4b06      	ldr	r3, [pc, #24]	@ (80162dc <generate_type_name+0x58>)
 80162c4:	4a01      	ldr	r2, [pc, #4]	@ (80162cc <generate_type_name+0x48>)
 80162c6:	461d      	mov	r5, r3
 80162c8:	e7e5      	b.n	8016296 <generate_type_name+0x12>
 80162ca:	bf00      	nop
 80162cc:	08024948 	.word	0x08024948
 80162d0:	08024960 	.word	0x08024960
 80162d4:	0802495c 	.word	0x0802495c
 80162d8:	0802494c 	.word	0x0802494c
 80162dc:	08025a14 	.word	0x08025a14

080162e0 <generate_topic_name>:
 80162e0:	b530      	push	{r4, r5, lr}
 80162e2:	4614      	mov	r4, r2
 80162e4:	b083      	sub	sp, #12
 80162e6:	4605      	mov	r5, r0
 80162e8:	4b07      	ldr	r3, [pc, #28]	@ (8016308 <generate_topic_name+0x28>)
 80162ea:	4a08      	ldr	r2, [pc, #32]	@ (801630c <generate_topic_name+0x2c>)
 80162ec:	4608      	mov	r0, r1
 80162ee:	9500      	str	r5, [sp, #0]
 80162f0:	4621      	mov	r1, r4
 80162f2:	f00b ff13 	bl	802211c <sniprintf>
 80162f6:	2800      	cmp	r0, #0
 80162f8:	bfa8      	it	ge
 80162fa:	4284      	cmpge	r4, r0
 80162fc:	bfcc      	ite	gt
 80162fe:	2001      	movgt	r0, #1
 8016300:	2000      	movle	r0, #0
 8016302:	b003      	add	sp, #12
 8016304:	bd30      	pop	{r4, r5, pc}
 8016306:	bf00      	nop
 8016308:	08024984 	.word	0x08024984
 801630c:	08024964 	.word	0x08024964

08016310 <is_uxrce_rmw_identifier_valid>:
 8016310:	b510      	push	{r4, lr}
 8016312:	4604      	mov	r4, r0
 8016314:	b140      	cbz	r0, 8016328 <is_uxrce_rmw_identifier_valid+0x18>
 8016316:	f008 fab9 	bl	801e88c <rmw_get_implementation_identifier>
 801631a:	4601      	mov	r1, r0
 801631c:	4620      	mov	r0, r4
 801631e:	f7e9 ffdf 	bl	80002e0 <strcmp>
 8016322:	fab0 f080 	clz	r0, r0
 8016326:	0940      	lsrs	r0, r0, #5
 8016328:	bd10      	pop	{r4, pc}
 801632a:	bf00      	nop

0801632c <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 801632c:	4b04      	ldr	r3, [pc, #16]	@ (8016340 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 801632e:	681a      	ldr	r2, [r3, #0]
 8016330:	b10a      	cbz	r2, 8016336 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xa>
 8016332:	4803      	ldr	r0, [pc, #12]	@ (8016340 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 8016334:	4770      	bx	lr
 8016336:	4a03      	ldr	r2, [pc, #12]	@ (8016344 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x18>)
 8016338:	4801      	ldr	r0, [pc, #4]	@ (8016340 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 801633a:	6812      	ldr	r2, [r2, #0]
 801633c:	601a      	str	r2, [r3, #0]
 801633e:	4770      	bx	lr
 8016340:	24000e18 	.word	0x24000e18
 8016344:	24000e94 	.word	0x24000e94

08016348 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016348:	4a02      	ldr	r2, [pc, #8]	@ (8016354 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xc>)
 801634a:	4b03      	ldr	r3, [pc, #12]	@ (8016358 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x10>)
 801634c:	6812      	ldr	r2, [r2, #0]
 801634e:	601a      	str	r2, [r3, #0]
 8016350:	4770      	bx	lr
 8016352:	bf00      	nop
 8016354:	24000e94 	.word	0x24000e94
 8016358:	24000e18 	.word	0x24000e18

0801635c <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_init_function>:
 801635c:	f009 bc62 	b.w	801fc24 <rosgraph_msgs__msg__Clock__init>

08016360 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_fini_function>:
 8016360:	f009 bc72 	b.w	801fc48 <rosgraph_msgs__msg__Clock__fini>

08016364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016364:	b508      	push	{r3, lr}
 8016366:	f7fc fc5f 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801636a:	4b06      	ldr	r3, [pc, #24]	@ (8016384 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 801636c:	4906      	ldr	r1, [pc, #24]	@ (8016388 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x24>)
 801636e:	681a      	ldr	r2, [r3, #0]
 8016370:	60c8      	str	r0, [r1, #12]
 8016372:	b10a      	cbz	r2, 8016378 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>
 8016374:	4803      	ldr	r0, [pc, #12]	@ (8016384 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 8016376:	bd08      	pop	{r3, pc}
 8016378:	4a04      	ldr	r2, [pc, #16]	@ (801638c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x28>)
 801637a:	4802      	ldr	r0, [pc, #8]	@ (8016384 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 801637c:	6812      	ldr	r2, [r2, #0]
 801637e:	601a      	str	r2, [r3, #0]
 8016380:	bd08      	pop	{r3, pc}
 8016382:	bf00      	nop
 8016384:	24000e60 	.word	0x24000e60
 8016388:	24000e24 	.word	0x24000e24
 801638c:	24000e98 	.word	0x24000e98

08016390 <get_serialized_size_rosgraph_msgs__msg__Clock>:
 8016390:	b108      	cbz	r0, 8016396 <get_serialized_size_rosgraph_msgs__msg__Clock+0x6>
 8016392:	f7fc bc57 	b.w	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8016396:	4770      	bx	lr

08016398 <_Clock__max_serialized_size>:
 8016398:	b500      	push	{lr}
 801639a:	b083      	sub	sp, #12
 801639c:	2301      	movs	r3, #1
 801639e:	2100      	movs	r1, #0
 80163a0:	f10d 0007 	add.w	r0, sp, #7
 80163a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80163a8:	f7fc fc9c 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 80163ac:	b003      	add	sp, #12
 80163ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80163b2:	bf00      	nop

080163b4 <_Clock__get_serialized_size>:
 80163b4:	b110      	cbz	r0, 80163bc <_Clock__get_serialized_size+0x8>
 80163b6:	2100      	movs	r1, #0
 80163b8:	f7fc bc44 	b.w	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 80163bc:	4770      	bx	lr
 80163be:	bf00      	nop

080163c0 <_Clock__cdr_deserialize>:
 80163c0:	b570      	push	{r4, r5, r6, lr}
 80163c2:	460c      	mov	r4, r1
 80163c4:	b151      	cbz	r1, 80163dc <_Clock__cdr_deserialize+0x1c>
 80163c6:	4605      	mov	r5, r0
 80163c8:	f7fc fca0 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80163cc:	4603      	mov	r3, r0
 80163ce:	4621      	mov	r1, r4
 80163d0:	4628      	mov	r0, r5
 80163d2:	685b      	ldr	r3, [r3, #4]
 80163d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163d8:	68db      	ldr	r3, [r3, #12]
 80163da:	4718      	bx	r3
 80163dc:	4608      	mov	r0, r1
 80163de:	bd70      	pop	{r4, r5, r6, pc}

080163e0 <_Clock__cdr_serialize>:
 80163e0:	b160      	cbz	r0, 80163fc <_Clock__cdr_serialize+0x1c>
 80163e2:	b570      	push	{r4, r5, r6, lr}
 80163e4:	4604      	mov	r4, r0
 80163e6:	460d      	mov	r5, r1
 80163e8:	f7fc fc90 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80163ec:	4603      	mov	r3, r0
 80163ee:	4629      	mov	r1, r5
 80163f0:	4620      	mov	r0, r4
 80163f2:	685b      	ldr	r3, [r3, #4]
 80163f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163f8:	689b      	ldr	r3, [r3, #8]
 80163fa:	4718      	bx	r3
 80163fc:	4770      	bx	lr
 80163fe:	bf00      	nop

08016400 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016400:	4800      	ldr	r0, [pc, #0]	@ (8016404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x4>)
 8016402:	4770      	bx	lr
 8016404:	24000e6c 	.word	0x24000e6c

08016408 <get_message_typesupport_handle>:
 8016408:	6883      	ldr	r3, [r0, #8]
 801640a:	4718      	bx	r3

0801640c <get_message_typesupport_handle_function>:
 801640c:	b510      	push	{r4, lr}
 801640e:	4604      	mov	r4, r0
 8016410:	6800      	ldr	r0, [r0, #0]
 8016412:	f7e9 ff65 	bl	80002e0 <strcmp>
 8016416:	2800      	cmp	r0, #0
 8016418:	bf0c      	ite	eq
 801641a:	4620      	moveq	r0, r4
 801641c:	2000      	movne	r0, #0
 801641e:	bd10      	pop	{r4, pc}

08016420 <get_service_typesupport_handle>:
 8016420:	6883      	ldr	r3, [r0, #8]
 8016422:	4718      	bx	r3

08016424 <get_service_typesupport_handle_function>:
 8016424:	b510      	push	{r4, lr}
 8016426:	4604      	mov	r4, r0
 8016428:	6800      	ldr	r0, [r0, #0]
 801642a:	f7e9 ff59 	bl	80002e0 <strcmp>
 801642e:	2800      	cmp	r0, #0
 8016430:	bf0c      	ite	eq
 8016432:	4620      	moveq	r0, r4
 8016434:	2000      	movne	r0, #0
 8016436:	bd10      	pop	{r4, pc}

08016438 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801643c:	6805      	ldr	r5, [r0, #0]
 801643e:	4604      	mov	r4, r0
 8016440:	460e      	mov	r6, r1
 8016442:	4628      	mov	r0, r5
 8016444:	f7e9 ff4c 	bl	80002e0 <strcmp>
 8016448:	b1c8      	cbz	r0, 801647e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801644a:	4b11      	ldr	r3, [pc, #68]	@ (8016490 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	429d      	cmp	r5, r3
 8016450:	d112      	bne.n	8016478 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016452:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016456:	f8d8 4000 	ldr.w	r4, [r8]
 801645a:	b16c      	cbz	r4, 8016478 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801645c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016460:	2700      	movs	r7, #0
 8016462:	3d04      	subs	r5, #4
 8016464:	4631      	mov	r1, r6
 8016466:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801646a:	f7e9 ff39 	bl	80002e0 <strcmp>
 801646e:	00bb      	lsls	r3, r7, #2
 8016470:	b140      	cbz	r0, 8016484 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8016472:	3701      	adds	r7, #1
 8016474:	42bc      	cmp	r4, r7
 8016476:	d1f5      	bne.n	8016464 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8016478:	2000      	movs	r0, #0
 801647a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801647e:	4620      	mov	r0, r4
 8016480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016484:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801648c:	58d3      	ldr	r3, [r2, r3]
 801648e:	4718      	bx	r3
 8016490:	24000e94 	.word	0x24000e94

08016494 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8016494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016498:	6805      	ldr	r5, [r0, #0]
 801649a:	4604      	mov	r4, r0
 801649c:	460e      	mov	r6, r1
 801649e:	4628      	mov	r0, r5
 80164a0:	f7e9 ff1e 	bl	80002e0 <strcmp>
 80164a4:	b1c8      	cbz	r0, 80164da <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80164a6:	4b11      	ldr	r3, [pc, #68]	@ (80164ec <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	429d      	cmp	r5, r3
 80164ac:	d112      	bne.n	80164d4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80164ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80164b2:	f8d8 4000 	ldr.w	r4, [r8]
 80164b6:	b16c      	cbz	r4, 80164d4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80164b8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80164bc:	2700      	movs	r7, #0
 80164be:	3d04      	subs	r5, #4
 80164c0:	4631      	mov	r1, r6
 80164c2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80164c6:	f7e9 ff0b 	bl	80002e0 <strcmp>
 80164ca:	00bb      	lsls	r3, r7, #2
 80164cc:	b140      	cbz	r0, 80164e0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80164ce:	3701      	adds	r7, #1
 80164d0:	42bc      	cmp	r4, r7
 80164d2:	d1f5      	bne.n	80164c0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80164d4:	2000      	movs	r0, #0
 80164d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164da:	4620      	mov	r0, r4
 80164dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80164e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164e8:	58d3      	ldr	r3, [r2, r3]
 80164ea:	4718      	bx	r3
 80164ec:	24000e94 	.word	0x24000e94

080164f0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80164f0:	f009 bbae 	b.w	801fc50 <std_msgs__msg__Header__init>

080164f4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80164f4:	f009 bbd0 	b.w	801fc98 <std_msgs__msg__Header__fini>

080164f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80164f8:	b508      	push	{r3, lr}
 80164fa:	f7fc fb95 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80164fe:	4b06      	ldr	r3, [pc, #24]	@ (8016518 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016500:	4906      	ldr	r1, [pc, #24]	@ (801651c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	60c8      	str	r0, [r1, #12]
 8016506:	b10a      	cbz	r2, 801650c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8016508:	4803      	ldr	r0, [pc, #12]	@ (8016518 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801650a:	bd08      	pop	{r3, pc}
 801650c:	4a04      	ldr	r2, [pc, #16]	@ (8016520 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801650e:	4802      	ldr	r0, [pc, #8]	@ (8016518 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016510:	6812      	ldr	r2, [r2, #0]
 8016512:	601a      	str	r2, [r3, #0]
 8016514:	bd08      	pop	{r3, pc}
 8016516:	bf00      	nop
 8016518:	24000f14 	.word	0x24000f14
 801651c:	24000e9c 	.word	0x24000e9c
 8016520:	24000e98 	.word	0x24000e98

08016524 <_Header__max_serialized_size>:
 8016524:	b500      	push	{lr}
 8016526:	b083      	sub	sp, #12
 8016528:	2301      	movs	r3, #1
 801652a:	2100      	movs	r1, #0
 801652c:	f10d 0007 	add.w	r0, sp, #7
 8016530:	f88d 3007 	strb.w	r3, [sp, #7]
 8016534:	f7fc fbd6 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8016538:	b003      	add	sp, #12
 801653a:	f85d fb04 	ldr.w	pc, [sp], #4
 801653e:	bf00      	nop

08016540 <get_serialized_size_std_msgs__msg__Header>:
 8016540:	b570      	push	{r4, r5, r6, lr}
 8016542:	4605      	mov	r5, r0
 8016544:	b168      	cbz	r0, 8016562 <get_serialized_size_std_msgs__msg__Header+0x22>
 8016546:	460c      	mov	r4, r1
 8016548:	f7fc fb7c 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 801654c:	2104      	movs	r1, #4
 801654e:	1826      	adds	r6, r4, r0
 8016550:	f1c4 0405 	rsb	r4, r4, #5
 8016554:	4630      	mov	r0, r6
 8016556:	f7fd fe79 	bl	801424c <ucdr_alignment>
 801655a:	68e9      	ldr	r1, [r5, #12]
 801655c:	440c      	add	r4, r1
 801655e:	4404      	add	r4, r0
 8016560:	19a0      	adds	r0, r4, r6
 8016562:	bd70      	pop	{r4, r5, r6, pc}

08016564 <_Header__cdr_deserialize>:
 8016564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016566:	460c      	mov	r4, r1
 8016568:	b083      	sub	sp, #12
 801656a:	b1e9      	cbz	r1, 80165a8 <_Header__cdr_deserialize+0x44>
 801656c:	4606      	mov	r6, r0
 801656e:	f7fc fbcd 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016572:	4603      	mov	r3, r0
 8016574:	4621      	mov	r1, r4
 8016576:	4630      	mov	r0, r6
 8016578:	685b      	ldr	r3, [r3, #4]
 801657a:	68db      	ldr	r3, [r3, #12]
 801657c:	4798      	blx	r3
 801657e:	6927      	ldr	r7, [r4, #16]
 8016580:	ab01      	add	r3, sp, #4
 8016582:	68a1      	ldr	r1, [r4, #8]
 8016584:	463a      	mov	r2, r7
 8016586:	4630      	mov	r0, r6
 8016588:	f000 fc86 	bl	8016e98 <ucdr_deserialize_sequence_char>
 801658c:	9b01      	ldr	r3, [sp, #4]
 801658e:	4605      	mov	r5, r0
 8016590:	b920      	cbnz	r0, 801659c <_Header__cdr_deserialize+0x38>
 8016592:	429f      	cmp	r7, r3
 8016594:	d30c      	bcc.n	80165b0 <_Header__cdr_deserialize+0x4c>
 8016596:	4628      	mov	r0, r5
 8016598:	b003      	add	sp, #12
 801659a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801659c:	b103      	cbz	r3, 80165a0 <_Header__cdr_deserialize+0x3c>
 801659e:	3b01      	subs	r3, #1
 80165a0:	4628      	mov	r0, r5
 80165a2:	60e3      	str	r3, [r4, #12]
 80165a4:	b003      	add	sp, #12
 80165a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165a8:	460d      	mov	r5, r1
 80165aa:	4628      	mov	r0, r5
 80165ac:	b003      	add	sp, #12
 80165ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165b0:	2101      	movs	r1, #1
 80165b2:	4630      	mov	r0, r6
 80165b4:	75b5      	strb	r5, [r6, #22]
 80165b6:	7571      	strb	r1, [r6, #21]
 80165b8:	60e5      	str	r5, [r4, #12]
 80165ba:	f7fd fe5f 	bl	801427c <ucdr_align_to>
 80165be:	4630      	mov	r0, r6
 80165c0:	9901      	ldr	r1, [sp, #4]
 80165c2:	f7fd fe93 	bl	80142ec <ucdr_advance_buffer>
 80165c6:	4628      	mov	r0, r5
 80165c8:	b003      	add	sp, #12
 80165ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165cc <_Header__cdr_serialize>:
 80165cc:	b308      	cbz	r0, 8016612 <_Header__cdr_serialize+0x46>
 80165ce:	b570      	push	{r4, r5, r6, lr}
 80165d0:	4604      	mov	r4, r0
 80165d2:	460d      	mov	r5, r1
 80165d4:	f7fc fb9a 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80165d8:	4603      	mov	r3, r0
 80165da:	4629      	mov	r1, r5
 80165dc:	4620      	mov	r0, r4
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	689b      	ldr	r3, [r3, #8]
 80165e2:	4798      	blx	r3
 80165e4:	68a6      	ldr	r6, [r4, #8]
 80165e6:	b15e      	cbz	r6, 8016600 <_Header__cdr_serialize+0x34>
 80165e8:	4630      	mov	r0, r6
 80165ea:	f7e9 fe83 	bl	80002f4 <strlen>
 80165ee:	4603      	mov	r3, r0
 80165f0:	1c42      	adds	r2, r0, #1
 80165f2:	4631      	mov	r1, r6
 80165f4:	4628      	mov	r0, r5
 80165f6:	60e3      	str	r3, [r4, #12]
 80165f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165fc:	f000 bc3a 	b.w	8016e74 <ucdr_serialize_sequence_char>
 8016600:	4633      	mov	r3, r6
 8016602:	4632      	mov	r2, r6
 8016604:	4631      	mov	r1, r6
 8016606:	4628      	mov	r0, r5
 8016608:	60e3      	str	r3, [r4, #12]
 801660a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801660e:	f000 bc31 	b.w	8016e74 <ucdr_serialize_sequence_char>
 8016612:	4770      	bx	lr

08016614 <_Header__get_serialized_size>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	4604      	mov	r4, r0
 8016618:	b150      	cbz	r0, 8016630 <_Header__get_serialized_size+0x1c>
 801661a:	2100      	movs	r1, #0
 801661c:	f7fc fb12 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8016620:	2104      	movs	r1, #4
 8016622:	4605      	mov	r5, r0
 8016624:	f7fd fe12 	bl	801424c <ucdr_alignment>
 8016628:	68e2      	ldr	r2, [r4, #12]
 801662a:	3205      	adds	r2, #5
 801662c:	1953      	adds	r3, r2, r5
 801662e:	4418      	add	r0, r3
 8016630:	bd38      	pop	{r3, r4, r5, pc}
 8016632:	bf00      	nop

08016634 <max_serialized_size_std_msgs__msg__Header>:
 8016634:	2301      	movs	r3, #1
 8016636:	b510      	push	{r4, lr}
 8016638:	7003      	strb	r3, [r0, #0]
 801663a:	4604      	mov	r4, r0
 801663c:	f7fc fb52 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8016640:	2300      	movs	r3, #0
 8016642:	7023      	strb	r3, [r4, #0]
 8016644:	bd10      	pop	{r4, pc}
 8016646:	bf00      	nop

08016648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016648:	4800      	ldr	r0, [pc, #0]	@ (801664c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801664a:	4770      	bx	lr
 801664c:	24000f20 	.word	0x24000f20

08016650 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016650:	4b04      	ldr	r3, [pc, #16]	@ (8016664 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8016652:	681a      	ldr	r2, [r3, #0]
 8016654:	b10a      	cbz	r2, 801665a <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 8016656:	4803      	ldr	r0, [pc, #12]	@ (8016664 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8016658:	4770      	bx	lr
 801665a:	4a03      	ldr	r2, [pc, #12]	@ (8016668 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 801665c:	4801      	ldr	r0, [pc, #4]	@ (8016664 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 801665e:	6812      	ldr	r2, [r2, #0]
 8016660:	601a      	str	r2, [r3, #0]
 8016662:	4770      	bx	lr
 8016664:	24000f50 	.word	0x24000f50
 8016668:	24000e94 	.word	0x24000e94

0801666c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801666c:	4a02      	ldr	r2, [pc, #8]	@ (8016678 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 801666e:	4b03      	ldr	r3, [pc, #12]	@ (801667c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8016670:	6812      	ldr	r2, [r2, #0]
 8016672:	601a      	str	r2, [r3, #0]
 8016674:	4770      	bx	lr
 8016676:	bf00      	nop
 8016678:	24000e94 	.word	0x24000e94
 801667c:	24000f50 	.word	0x24000f50

08016680 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016680:	4b04      	ldr	r3, [pc, #16]	@ (8016694 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8016682:	681a      	ldr	r2, [r3, #0]
 8016684:	b10a      	cbz	r2, 801668a <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 8016686:	4803      	ldr	r0, [pc, #12]	@ (8016694 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8016688:	4770      	bx	lr
 801668a:	4a03      	ldr	r2, [pc, #12]	@ (8016698 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 801668c:	4801      	ldr	r0, [pc, #4]	@ (8016694 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 801668e:	6812      	ldr	r2, [r2, #0]
 8016690:	601a      	str	r2, [r3, #0]
 8016692:	4770      	bx	lr
 8016694:	24000f64 	.word	0x24000f64
 8016698:	24000e94 	.word	0x24000e94

0801669c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 801669c:	4a02      	ldr	r2, [pc, #8]	@ (80166a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 801669e:	4b03      	ldr	r3, [pc, #12]	@ (80166ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 80166a0:	6812      	ldr	r2, [r2, #0]
 80166a2:	601a      	str	r2, [r3, #0]
 80166a4:	4770      	bx	lr
 80166a6:	bf00      	nop
 80166a8:	24000e94 	.word	0x24000e94
 80166ac:	24000f64 	.word	0x24000f64

080166b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80166b0:	4b04      	ldr	r3, [pc, #16]	@ (80166c4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80166b2:	681a      	ldr	r2, [r3, #0]
 80166b4:	b10a      	cbz	r2, 80166ba <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 80166b6:	4803      	ldr	r0, [pc, #12]	@ (80166c4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80166b8:	4770      	bx	lr
 80166ba:	4a03      	ldr	r2, [pc, #12]	@ (80166c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 80166bc:	4801      	ldr	r0, [pc, #4]	@ (80166c4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80166be:	6812      	ldr	r2, [r2, #0]
 80166c0:	601a      	str	r2, [r3, #0]
 80166c2:	4770      	bx	lr
 80166c4:	24000f78 	.word	0x24000f78
 80166c8:	24000e94 	.word	0x24000e94

080166cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80166cc:	4a02      	ldr	r2, [pc, #8]	@ (80166d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 80166ce:	4b03      	ldr	r3, [pc, #12]	@ (80166dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 80166d0:	6812      	ldr	r2, [r2, #0]
 80166d2:	601a      	str	r2, [r3, #0]
 80166d4:	4770      	bx	lr
 80166d6:	bf00      	nop
 80166d8:	24000e94 	.word	0x24000e94
 80166dc:	24000f78 	.word	0x24000f78

080166e0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80166e0:	4b04      	ldr	r3, [pc, #16]	@ (80166f4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 80166e2:	681a      	ldr	r2, [r3, #0]
 80166e4:	b10a      	cbz	r2, 80166ea <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 80166e6:	4803      	ldr	r0, [pc, #12]	@ (80166f4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 80166e8:	4770      	bx	lr
 80166ea:	4a03      	ldr	r2, [pc, #12]	@ (80166f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 80166ec:	4801      	ldr	r0, [pc, #4]	@ (80166f4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 80166ee:	6812      	ldr	r2, [r2, #0]
 80166f0:	601a      	str	r2, [r3, #0]
 80166f2:	4770      	bx	lr
 80166f4:	24000f8c 	.word	0x24000f8c
 80166f8:	24000e94 	.word	0x24000e94

080166fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80166fc:	4a02      	ldr	r2, [pc, #8]	@ (8016708 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 80166fe:	4b03      	ldr	r3, [pc, #12]	@ (801670c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8016700:	6812      	ldr	r2, [r2, #0]
 8016702:	601a      	str	r2, [r3, #0]
 8016704:	4770      	bx	lr
 8016706:	bf00      	nop
 8016708:	24000e94 	.word	0x24000e94
 801670c:	24000f8c 	.word	0x24000f8c

08016710 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8016710:	f009 bace 	b.w	801fcb0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08016714 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8016714:	f009 baf0 	b.w	801fcf8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08016718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016718:	b510      	push	{r4, lr}
 801671a:	4c08      	ldr	r4, [pc, #32]	@ (801673c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 801671c:	f7ff feec 	bl	80164f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016720:	60e0      	str	r0, [r4, #12]
 8016722:	f009 fb55 	bl	801fdd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8016726:	4b06      	ldr	r3, [pc, #24]	@ (8016740 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016728:	64a0      	str	r0, [r4, #72]	@ 0x48
 801672a:	681a      	ldr	r2, [r3, #0]
 801672c:	b10a      	cbz	r2, 8016732 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 801672e:	4804      	ldr	r0, [pc, #16]	@ (8016740 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016730:	bd10      	pop	{r4, pc}
 8016732:	4a04      	ldr	r2, [pc, #16]	@ (8016744 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8016734:	4802      	ldr	r0, [pc, #8]	@ (8016740 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016736:	6812      	ldr	r2, [r2, #0]
 8016738:	601a      	str	r2, [r3, #0]
 801673a:	bd10      	pop	{r4, pc}
 801673c:	24000f98 	.word	0x24000f98
 8016740:	24001010 	.word	0x24001010
 8016744:	24000e98 	.word	0x24000e98

08016748 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8016748:	f009 bae2 	b.w	801fd10 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

0801674c <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 801674c:	f009 bb04 	b.w	801fd58 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08016750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016750:	b510      	push	{r4, lr}
 8016752:	4c08      	ldr	r4, [pc, #32]	@ (8016774 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8016754:	f7ff fed0 	bl	80164f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016758:	60e0      	str	r0, [r4, #12]
 801675a:	f009 fb4b 	bl	801fdf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801675e:	4b06      	ldr	r3, [pc, #24]	@ (8016778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8016760:	64a0      	str	r0, [r4, #72]	@ 0x48
 8016762:	681a      	ldr	r2, [r3, #0]
 8016764:	b10a      	cbz	r2, 801676a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8016766:	4804      	ldr	r0, [pc, #16]	@ (8016778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8016768:	bd10      	pop	{r4, pc}
 801676a:	4a04      	ldr	r2, [pc, #16]	@ (801677c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 801676c:	4802      	ldr	r0, [pc, #8]	@ (8016778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 801676e:	6812      	ldr	r2, [r2, #0]
 8016770:	601a      	str	r2, [r3, #0]
 8016772:	bd10      	pop	{r4, pc}
 8016774:	2400101c 	.word	0x2400101c
 8016778:	24001094 	.word	0x24001094
 801677c:	24000e98 	.word	0x24000e98

08016780 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8016780:	f009 baf6 	b.w	801fd70 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08016784 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8016784:	f009 bb06 	b.w	801fd94 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08016788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016788:	b508      	push	{r3, lr}
 801678a:	f7fc fa4d 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801678e:	4b06      	ldr	r3, [pc, #24]	@ (80167a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8016790:	4906      	ldr	r1, [pc, #24]	@ (80167ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8016792:	681a      	ldr	r2, [r3, #0]
 8016794:	60c8      	str	r0, [r1, #12]
 8016796:	b10a      	cbz	r2, 801679c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8016798:	4803      	ldr	r0, [pc, #12]	@ (80167a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 801679a:	bd08      	pop	{r3, pc}
 801679c:	4a04      	ldr	r2, [pc, #16]	@ (80167b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 801679e:	4802      	ldr	r0, [pc, #8]	@ (80167a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80167a0:	6812      	ldr	r2, [r2, #0]
 80167a2:	601a      	str	r2, [r3, #0]
 80167a4:	bd08      	pop	{r3, pc}
 80167a6:	bf00      	nop
 80167a8:	24001118 	.word	0x24001118
 80167ac:	240010a0 	.word	0x240010a0
 80167b0:	24000e98 	.word	0x24000e98

080167b4 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 80167b4:	f009 baf2 	b.w	801fd9c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

080167b8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 80167b8:	f009 bb02 	b.w	801fdc0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

080167bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80167bc:	b508      	push	{r3, lr}
 80167be:	f7fc fa33 	bl	8012c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80167c2:	4b06      	ldr	r3, [pc, #24]	@ (80167dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80167c4:	4906      	ldr	r1, [pc, #24]	@ (80167e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 80167c6:	681a      	ldr	r2, [r3, #0]
 80167c8:	60c8      	str	r0, [r1, #12]
 80167ca:	b10a      	cbz	r2, 80167d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 80167cc:	4803      	ldr	r0, [pc, #12]	@ (80167dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80167ce:	bd08      	pop	{r3, pc}
 80167d0:	4a04      	ldr	r2, [pc, #16]	@ (80167e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 80167d2:	4802      	ldr	r0, [pc, #8]	@ (80167dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80167d4:	6812      	ldr	r2, [r2, #0]
 80167d6:	601a      	str	r2, [r3, #0]
 80167d8:	bd08      	pop	{r3, pc}
 80167da:	bf00      	nop
 80167dc:	2400119c 	.word	0x2400119c
 80167e0:	24001124 	.word	0x24001124
 80167e4:	24000e98 	.word	0x24000e98

080167e8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80167e8:	b538      	push	{r3, r4, r5, lr}
 80167ea:	4604      	mov	r4, r0
 80167ec:	b150      	cbz	r0, 8016804 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 80167ee:	460d      	mov	r5, r1
 80167f0:	f7ff fea6 	bl	8016540 <get_serialized_size_std_msgs__msg__Header>
 80167f4:	4603      	mov	r3, r0
 80167f6:	f104 0018 	add.w	r0, r4, #24
 80167fa:	461c      	mov	r4, r3
 80167fc:	18e9      	adds	r1, r5, r3
 80167fe:	f009 fb07 	bl	801fe10 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8016802:	4420      	add	r0, r4
 8016804:	bd38      	pop	{r3, r4, r5, pc}
 8016806:	bf00      	nop

08016808 <_ActuationCommandStamped__cdr_deserialize>:
 8016808:	b570      	push	{r4, r5, r6, lr}
 801680a:	460c      	mov	r4, r1
 801680c:	b199      	cbz	r1, 8016836 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 801680e:	4605      	mov	r5, r0
 8016810:	f7ff ff1a 	bl	8016648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016814:	4603      	mov	r3, r0
 8016816:	4621      	mov	r1, r4
 8016818:	4628      	mov	r0, r5
 801681a:	685b      	ldr	r3, [r3, #4]
 801681c:	68db      	ldr	r3, [r3, #12]
 801681e:	4798      	blx	r3
 8016820:	f009 fb7e 	bl	801ff20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8016824:	4603      	mov	r3, r0
 8016826:	f104 0118 	add.w	r1, r4, #24
 801682a:	4628      	mov	r0, r5
 801682c:	685b      	ldr	r3, [r3, #4]
 801682e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016832:	68db      	ldr	r3, [r3, #12]
 8016834:	4718      	bx	r3
 8016836:	4608      	mov	r0, r1
 8016838:	bd70      	pop	{r4, r5, r6, pc}
 801683a:	bf00      	nop

0801683c <_ActuationCommandStamped__cdr_serialize>:
 801683c:	b510      	push	{r4, lr}
 801683e:	b082      	sub	sp, #8
 8016840:	9101      	str	r1, [sp, #4]
 8016842:	b1a0      	cbz	r0, 801686e <_ActuationCommandStamped__cdr_serialize+0x32>
 8016844:	4604      	mov	r4, r0
 8016846:	f7ff feff 	bl	8016648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801684a:	4603      	mov	r3, r0
 801684c:	9901      	ldr	r1, [sp, #4]
 801684e:	4620      	mov	r0, r4
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	689b      	ldr	r3, [r3, #8]
 8016854:	4798      	blx	r3
 8016856:	f009 fb63 	bl	801ff20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801685a:	4603      	mov	r3, r0
 801685c:	9901      	ldr	r1, [sp, #4]
 801685e:	f104 0018 	add.w	r0, r4, #24
 8016862:	685b      	ldr	r3, [r3, #4]
 8016864:	689b      	ldr	r3, [r3, #8]
 8016866:	b002      	add	sp, #8
 8016868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801686c:	4718      	bx	r3
 801686e:	b002      	add	sp, #8
 8016870:	bd10      	pop	{r4, pc}
 8016872:	bf00      	nop

08016874 <_ActuationCommandStamped__get_serialized_size>:
 8016874:	b510      	push	{r4, lr}
 8016876:	4604      	mov	r4, r0
 8016878:	b148      	cbz	r0, 801688e <_ActuationCommandStamped__get_serialized_size+0x1a>
 801687a:	2100      	movs	r1, #0
 801687c:	f7ff fe60 	bl	8016540 <get_serialized_size_std_msgs__msg__Header>
 8016880:	4601      	mov	r1, r0
 8016882:	f104 0018 	add.w	r0, r4, #24
 8016886:	460c      	mov	r4, r1
 8016888:	f009 fac2 	bl	801fe10 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801688c:	4420      	add	r0, r4
 801688e:	bd10      	pop	{r4, pc}

08016890 <_ActuationCommandStamped__max_serialized_size>:
 8016890:	b510      	push	{r4, lr}
 8016892:	b082      	sub	sp, #8
 8016894:	2301      	movs	r3, #1
 8016896:	2100      	movs	r1, #0
 8016898:	f10d 0007 	add.w	r0, sp, #7
 801689c:	f88d 3007 	strb.w	r3, [sp, #7]
 80168a0:	f7ff fec8 	bl	8016634 <max_serialized_size_std_msgs__msg__Header>
 80168a4:	4604      	mov	r4, r0
 80168a6:	f10d 0007 	add.w	r0, sp, #7
 80168aa:	4621      	mov	r1, r4
 80168ac:	f009 fb1e 	bl	801feec <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80168b0:	4420      	add	r0, r4
 80168b2:	b002      	add	sp, #8
 80168b4:	bd10      	pop	{r4, pc}
 80168b6:	bf00      	nop

080168b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80168b8:	4800      	ldr	r0, [pc, #0]	@ (80168bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 80168ba:	4770      	bx	lr
 80168bc:	240011a8 	.word	0x240011a8

080168c0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80168c0:	b538      	push	{r3, r4, r5, lr}
 80168c2:	4604      	mov	r4, r0
 80168c4:	b150      	cbz	r0, 80168dc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 80168c6:	460d      	mov	r5, r1
 80168c8:	f7ff fe3a 	bl	8016540 <get_serialized_size_std_msgs__msg__Header>
 80168cc:	4603      	mov	r3, r0
 80168ce:	f104 0018 	add.w	r0, r4, #24
 80168d2:	461c      	mov	r4, r3
 80168d4:	18e9      	adds	r1, r5, r3
 80168d6:	f009 fb27 	bl	801ff28 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80168da:	4420      	add	r0, r4
 80168dc:	bd38      	pop	{r3, r4, r5, pc}
 80168de:	bf00      	nop

080168e0 <_ActuationStatusStamped__cdr_deserialize>:
 80168e0:	b570      	push	{r4, r5, r6, lr}
 80168e2:	460c      	mov	r4, r1
 80168e4:	b199      	cbz	r1, 801690e <_ActuationStatusStamped__cdr_deserialize+0x2e>
 80168e6:	4605      	mov	r5, r0
 80168e8:	f7ff feae 	bl	8016648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80168ec:	4603      	mov	r3, r0
 80168ee:	4621      	mov	r1, r4
 80168f0:	4628      	mov	r0, r5
 80168f2:	685b      	ldr	r3, [r3, #4]
 80168f4:	68db      	ldr	r3, [r3, #12]
 80168f6:	4798      	blx	r3
 80168f8:	f009 fb9e 	bl	8020038 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80168fc:	4603      	mov	r3, r0
 80168fe:	f104 0118 	add.w	r1, r4, #24
 8016902:	4628      	mov	r0, r5
 8016904:	685b      	ldr	r3, [r3, #4]
 8016906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801690a:	68db      	ldr	r3, [r3, #12]
 801690c:	4718      	bx	r3
 801690e:	4608      	mov	r0, r1
 8016910:	bd70      	pop	{r4, r5, r6, pc}
 8016912:	bf00      	nop

08016914 <_ActuationStatusStamped__cdr_serialize>:
 8016914:	b510      	push	{r4, lr}
 8016916:	b082      	sub	sp, #8
 8016918:	9101      	str	r1, [sp, #4]
 801691a:	b1a0      	cbz	r0, 8016946 <_ActuationStatusStamped__cdr_serialize+0x32>
 801691c:	4604      	mov	r4, r0
 801691e:	f7ff fe93 	bl	8016648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016922:	4603      	mov	r3, r0
 8016924:	9901      	ldr	r1, [sp, #4]
 8016926:	4620      	mov	r0, r4
 8016928:	685b      	ldr	r3, [r3, #4]
 801692a:	689b      	ldr	r3, [r3, #8]
 801692c:	4798      	blx	r3
 801692e:	f009 fb83 	bl	8020038 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8016932:	4603      	mov	r3, r0
 8016934:	9901      	ldr	r1, [sp, #4]
 8016936:	f104 0018 	add.w	r0, r4, #24
 801693a:	685b      	ldr	r3, [r3, #4]
 801693c:	689b      	ldr	r3, [r3, #8]
 801693e:	b002      	add	sp, #8
 8016940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016944:	4718      	bx	r3
 8016946:	b002      	add	sp, #8
 8016948:	bd10      	pop	{r4, pc}
 801694a:	bf00      	nop

0801694c <_ActuationStatusStamped__get_serialized_size>:
 801694c:	b510      	push	{r4, lr}
 801694e:	4604      	mov	r4, r0
 8016950:	b148      	cbz	r0, 8016966 <_ActuationStatusStamped__get_serialized_size+0x1a>
 8016952:	2100      	movs	r1, #0
 8016954:	f7ff fdf4 	bl	8016540 <get_serialized_size_std_msgs__msg__Header>
 8016958:	4601      	mov	r1, r0
 801695a:	f104 0018 	add.w	r0, r4, #24
 801695e:	460c      	mov	r4, r1
 8016960:	f009 fae2 	bl	801ff28 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8016964:	4420      	add	r0, r4
 8016966:	bd10      	pop	{r4, pc}

08016968 <_ActuationStatusStamped__max_serialized_size>:
 8016968:	b510      	push	{r4, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	2301      	movs	r3, #1
 801696e:	2100      	movs	r1, #0
 8016970:	f10d 0007 	add.w	r0, sp, #7
 8016974:	f88d 3007 	strb.w	r3, [sp, #7]
 8016978:	f7ff fe5c 	bl	8016634 <max_serialized_size_std_msgs__msg__Header>
 801697c:	4604      	mov	r4, r0
 801697e:	f10d 0007 	add.w	r0, sp, #7
 8016982:	4621      	mov	r1, r4
 8016984:	f009 fb3e 	bl	8020004 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8016988:	4420      	add	r0, r4
 801698a:	b002      	add	sp, #8
 801698c:	bd10      	pop	{r4, pc}
 801698e:	bf00      	nop

08016990 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016990:	4800      	ldr	r0, [pc, #0]	@ (8016994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8016992:	4770      	bx	lr
 8016994:	240011d0 	.word	0x240011d0

08016998 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016998:	b538      	push	{r3, r4, r5, lr}
 801699a:	b158      	cbz	r0, 80169b4 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 801699c:	460d      	mov	r5, r1
 801699e:	f7fc f951 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 80169a2:	2104      	movs	r1, #4
 80169a4:	182c      	adds	r4, r5, r0
 80169a6:	f1c5 0504 	rsb	r5, r5, #4
 80169aa:	4620      	mov	r0, r4
 80169ac:	f7fd fc4e 	bl	801424c <ucdr_alignment>
 80169b0:	4428      	add	r0, r5
 80169b2:	4420      	add	r0, r4
 80169b4:	bd38      	pop	{r3, r4, r5, pc}
 80169b6:	bf00      	nop

080169b8 <_SteeringWheelStatusStamped__cdr_deserialize>:
 80169b8:	b538      	push	{r3, r4, r5, lr}
 80169ba:	460c      	mov	r4, r1
 80169bc:	b179      	cbz	r1, 80169de <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 80169be:	4605      	mov	r5, r0
 80169c0:	f7fc f9a4 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80169c4:	4603      	mov	r3, r0
 80169c6:	4621      	mov	r1, r4
 80169c8:	4628      	mov	r0, r5
 80169ca:	685b      	ldr	r3, [r3, #4]
 80169cc:	68db      	ldr	r3, [r3, #12]
 80169ce:	4798      	blx	r3
 80169d0:	f104 0108 	add.w	r1, r4, #8
 80169d4:	4628      	mov	r0, r5
 80169d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169da:	f7fd b9b9 	b.w	8013d50 <ucdr_deserialize_float>
 80169de:	4608      	mov	r0, r1
 80169e0:	bd38      	pop	{r3, r4, r5, pc}
 80169e2:	bf00      	nop

080169e4 <_SteeringWheelStatusStamped__cdr_serialize>:
 80169e4:	b188      	cbz	r0, 8016a0a <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 80169e6:	b538      	push	{r3, r4, r5, lr}
 80169e8:	4604      	mov	r4, r0
 80169ea:	460d      	mov	r5, r1
 80169ec:	f7fc f98e 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80169f0:	4603      	mov	r3, r0
 80169f2:	4629      	mov	r1, r5
 80169f4:	4620      	mov	r0, r4
 80169f6:	685b      	ldr	r3, [r3, #4]
 80169f8:	689b      	ldr	r3, [r3, #8]
 80169fa:	4798      	blx	r3
 80169fc:	ed94 0a02 	vldr	s0, [r4, #8]
 8016a00:	4628      	mov	r0, r5
 8016a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a06:	f7fd b90b 	b.w	8013c20 <ucdr_serialize_float>
 8016a0a:	4770      	bx	lr

08016a0c <_SteeringWheelStatusStamped__get_serialized_size>:
 8016a0c:	b150      	cbz	r0, 8016a24 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8016a0e:	2100      	movs	r1, #0
 8016a10:	b510      	push	{r4, lr}
 8016a12:	f7fc f917 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8016a16:	4604      	mov	r4, r0
 8016a18:	2104      	movs	r1, #4
 8016a1a:	f7fd fc17 	bl	801424c <ucdr_alignment>
 8016a1e:	4420      	add	r0, r4
 8016a20:	3004      	adds	r0, #4
 8016a22:	bd10      	pop	{r4, pc}
 8016a24:	4770      	bx	lr
 8016a26:	bf00      	nop

08016a28 <_SteeringWheelStatusStamped__max_serialized_size>:
 8016a28:	b510      	push	{r4, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	2301      	movs	r3, #1
 8016a2e:	2100      	movs	r1, #0
 8016a30:	f10d 0007 	add.w	r0, sp, #7
 8016a34:	f88d 3007 	strb.w	r3, [sp, #7]
 8016a38:	f7fc f954 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8016a3c:	4604      	mov	r4, r0
 8016a3e:	2104      	movs	r1, #4
 8016a40:	f7fd fc04 	bl	801424c <ucdr_alignment>
 8016a44:	4420      	add	r0, r4
 8016a46:	3004      	adds	r0, #4
 8016a48:	b002      	add	sp, #8
 8016a4a:	bd10      	pop	{r4, pc}

08016a4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016a4c:	4800      	ldr	r0, [pc, #0]	@ (8016a50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8016a4e:	4770      	bx	lr
 8016a50:	240011f8 	.word	0x240011f8

08016a54 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016a54:	b538      	push	{r3, r4, r5, lr}
 8016a56:	b158      	cbz	r0, 8016a70 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8016a58:	460d      	mov	r5, r1
 8016a5a:	f7fc f8f3 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8016a5e:	2101      	movs	r1, #1
 8016a60:	182c      	adds	r4, r5, r0
 8016a62:	f1c5 0501 	rsb	r5, r5, #1
 8016a66:	4620      	mov	r0, r4
 8016a68:	f7fd fbf0 	bl	801424c <ucdr_alignment>
 8016a6c:	4428      	add	r0, r5
 8016a6e:	4420      	add	r0, r4
 8016a70:	bd38      	pop	{r3, r4, r5, pc}
 8016a72:	bf00      	nop

08016a74 <_VehicleEmergencyStamped__cdr_deserialize>:
 8016a74:	b538      	push	{r3, r4, r5, lr}
 8016a76:	460c      	mov	r4, r1
 8016a78:	b179      	cbz	r1, 8016a9a <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 8016a7a:	4605      	mov	r5, r0
 8016a7c:	f7fc f946 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016a80:	4603      	mov	r3, r0
 8016a82:	4621      	mov	r1, r4
 8016a84:	4628      	mov	r0, r5
 8016a86:	685b      	ldr	r3, [r3, #4]
 8016a88:	68db      	ldr	r3, [r3, #12]
 8016a8a:	4798      	blx	r3
 8016a8c:	f104 0108 	add.w	r1, r4, #8
 8016a90:	4628      	mov	r0, r5
 8016a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a96:	f7fc b953 	b.w	8012d40 <ucdr_deserialize_bool>
 8016a9a:	4608      	mov	r0, r1
 8016a9c:	bd38      	pop	{r3, r4, r5, pc}
 8016a9e:	bf00      	nop

08016aa0 <_VehicleEmergencyStamped__cdr_serialize>:
 8016aa0:	b180      	cbz	r0, 8016ac4 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8016aa2:	b538      	push	{r3, r4, r5, lr}
 8016aa4:	4604      	mov	r4, r0
 8016aa6:	460d      	mov	r5, r1
 8016aa8:	f7fc f930 	bl	8012d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016aac:	4603      	mov	r3, r0
 8016aae:	4629      	mov	r1, r5
 8016ab0:	4620      	mov	r0, r4
 8016ab2:	685b      	ldr	r3, [r3, #4]
 8016ab4:	689b      	ldr	r3, [r3, #8]
 8016ab6:	4798      	blx	r3
 8016ab8:	7a21      	ldrb	r1, [r4, #8]
 8016aba:	4628      	mov	r0, r5
 8016abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ac0:	f7fc b928 	b.w	8012d14 <ucdr_serialize_bool>
 8016ac4:	4770      	bx	lr
 8016ac6:	bf00      	nop

08016ac8 <_VehicleEmergencyStamped__get_serialized_size>:
 8016ac8:	b150      	cbz	r0, 8016ae0 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8016aca:	2100      	movs	r1, #0
 8016acc:	b510      	push	{r4, lr}
 8016ace:	f7fc f8b9 	bl	8012c44 <get_serialized_size_builtin_interfaces__msg__Time>
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	2101      	movs	r1, #1
 8016ad6:	f7fd fbb9 	bl	801424c <ucdr_alignment>
 8016ada:	4420      	add	r0, r4
 8016adc:	3001      	adds	r0, #1
 8016ade:	bd10      	pop	{r4, pc}
 8016ae0:	4770      	bx	lr
 8016ae2:	bf00      	nop

08016ae4 <_VehicleEmergencyStamped__max_serialized_size>:
 8016ae4:	b510      	push	{r4, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	2401      	movs	r4, #1
 8016aea:	2100      	movs	r1, #0
 8016aec:	f10d 0007 	add.w	r0, sp, #7
 8016af0:	f88d 4007 	strb.w	r4, [sp, #7]
 8016af4:	f7fc f8f6 	bl	8012ce4 <max_serialized_size_builtin_interfaces__msg__Time>
 8016af8:	4621      	mov	r1, r4
 8016afa:	4604      	mov	r4, r0
 8016afc:	f7fd fba6 	bl	801424c <ucdr_alignment>
 8016b00:	4420      	add	r0, r4
 8016b02:	3001      	adds	r0, #1
 8016b04:	b002      	add	sp, #8
 8016b06:	bd10      	pop	{r4, pc}

08016b08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016b08:	4800      	ldr	r0, [pc, #0]	@ (8016b0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8016b0a:	4770      	bx	lr
 8016b0c:	24001220 	.word	0x24001220

08016b10 <autoware_control_msgs__msg__Control__init>:
 8016b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b14:	4605      	mov	r5, r0
 8016b16:	b3c0      	cbz	r0, 8016b8a <autoware_control_msgs__msg__Control__init+0x7a>
 8016b18:	f000 f9a6 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	b310      	cbz	r0, 8016b66 <autoware_control_msgs__msg__Control__init+0x56>
 8016b20:	f105 0608 	add.w	r6, r5, #8
 8016b24:	4630      	mov	r0, r6
 8016b26:	f000 f99f 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	d040      	beq.n	8016bb2 <autoware_control_msgs__msg__Control__init+0xa2>
 8016b30:	f105 0710 	add.w	r7, r5, #16
 8016b34:	4638      	mov	r0, r7
 8016b36:	f000 f855 	bl	8016be4 <autoware_control_msgs__msg__Lateral__init>
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	b348      	cbz	r0, 8016b92 <autoware_control_msgs__msg__Control__init+0x82>
 8016b3e:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 8016b42:	4640      	mov	r0, r8
 8016b44:	f000 f87e 	bl	8016c44 <autoware_control_msgs__msg__Longitudinal__init>
 8016b48:	4604      	mov	r4, r0
 8016b4a:	b9d8      	cbnz	r0, 8016b84 <autoware_control_msgs__msg__Control__init+0x74>
 8016b4c:	4628      	mov	r0, r5
 8016b4e:	f000 f98f 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016b52:	4630      	mov	r0, r6
 8016b54:	f000 f98c 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016b58:	4638      	mov	r0, r7
 8016b5a:	f000 f867 	bl	8016c2c <autoware_control_msgs__msg__Lateral__fini>
 8016b5e:	4640      	mov	r0, r8
 8016b60:	f000 f894 	bl	8016c8c <autoware_control_msgs__msg__Longitudinal__fini>
 8016b64:	e00e      	b.n	8016b84 <autoware_control_msgs__msg__Control__init+0x74>
 8016b66:	4628      	mov	r0, r5
 8016b68:	f000 f982 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016b6c:	f105 0008 	add.w	r0, r5, #8
 8016b70:	f000 f97e 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016b74:	f105 0010 	add.w	r0, r5, #16
 8016b78:	f000 f858 	bl	8016c2c <autoware_control_msgs__msg__Lateral__fini>
 8016b7c:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8016b80:	f000 f884 	bl	8016c8c <autoware_control_msgs__msg__Longitudinal__fini>
 8016b84:	4620      	mov	r0, r4
 8016b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b8a:	4604      	mov	r4, r0
 8016b8c:	4620      	mov	r0, r4
 8016b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b92:	4628      	mov	r0, r5
 8016b94:	f000 f96c 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016b98:	4630      	mov	r0, r6
 8016b9a:	f000 f969 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016b9e:	4638      	mov	r0, r7
 8016ba0:	f000 f844 	bl	8016c2c <autoware_control_msgs__msg__Lateral__fini>
 8016ba4:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8016ba8:	f000 f870 	bl	8016c8c <autoware_control_msgs__msg__Longitudinal__fini>
 8016bac:	4620      	mov	r0, r4
 8016bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bb2:	4628      	mov	r0, r5
 8016bb4:	f000 f95c 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016bb8:	4630      	mov	r0, r6
 8016bba:	e7d9      	b.n	8016b70 <autoware_control_msgs__msg__Control__init+0x60>

08016bbc <autoware_control_msgs__msg__Control__fini>:
 8016bbc:	b188      	cbz	r0, 8016be2 <autoware_control_msgs__msg__Control__fini+0x26>
 8016bbe:	b510      	push	{r4, lr}
 8016bc0:	4604      	mov	r4, r0
 8016bc2:	f000 f955 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016bc6:	f104 0008 	add.w	r0, r4, #8
 8016bca:	f000 f951 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016bce:	f104 0010 	add.w	r0, r4, #16
 8016bd2:	f000 f82b 	bl	8016c2c <autoware_control_msgs__msg__Lateral__fini>
 8016bd6:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8016bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bde:	f000 b855 	b.w	8016c8c <autoware_control_msgs__msg__Longitudinal__fini>
 8016be2:	4770      	bx	lr

08016be4 <autoware_control_msgs__msg__Lateral__init>:
 8016be4:	b570      	push	{r4, r5, r6, lr}
 8016be6:	4605      	mov	r5, r0
 8016be8:	b1a8      	cbz	r0, 8016c16 <autoware_control_msgs__msg__Lateral__init+0x32>
 8016bea:	f000 f93d 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016bee:	4604      	mov	r4, r0
 8016bf0:	b140      	cbz	r0, 8016c04 <autoware_control_msgs__msg__Lateral__init+0x20>
 8016bf2:	f105 0608 	add.w	r6, r5, #8
 8016bf6:	4630      	mov	r0, r6
 8016bf8:	f000 f936 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016bfc:	4604      	mov	r4, r0
 8016bfe:	b168      	cbz	r0, 8016c1c <autoware_control_msgs__msg__Lateral__init+0x38>
 8016c00:	4620      	mov	r0, r4
 8016c02:	bd70      	pop	{r4, r5, r6, pc}
 8016c04:	4628      	mov	r0, r5
 8016c06:	f000 f933 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c0a:	f105 0008 	add.w	r0, r5, #8
 8016c0e:	f000 f92f 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c12:	4620      	mov	r0, r4
 8016c14:	bd70      	pop	{r4, r5, r6, pc}
 8016c16:	4604      	mov	r4, r0
 8016c18:	4620      	mov	r0, r4
 8016c1a:	bd70      	pop	{r4, r5, r6, pc}
 8016c1c:	4628      	mov	r0, r5
 8016c1e:	f000 f927 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c22:	4630      	mov	r0, r6
 8016c24:	f000 f924 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c28:	e7ea      	b.n	8016c00 <autoware_control_msgs__msg__Lateral__init+0x1c>
 8016c2a:	bf00      	nop

08016c2c <autoware_control_msgs__msg__Lateral__fini>:
 8016c2c:	b148      	cbz	r0, 8016c42 <autoware_control_msgs__msg__Lateral__fini+0x16>
 8016c2e:	b510      	push	{r4, lr}
 8016c30:	4604      	mov	r4, r0
 8016c32:	f000 f91d 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c36:	f104 0008 	add.w	r0, r4, #8
 8016c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c3e:	f000 b917 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c42:	4770      	bx	lr

08016c44 <autoware_control_msgs__msg__Longitudinal__init>:
 8016c44:	b570      	push	{r4, r5, r6, lr}
 8016c46:	4605      	mov	r5, r0
 8016c48:	b1a8      	cbz	r0, 8016c76 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 8016c4a:	f000 f90d 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016c4e:	4604      	mov	r4, r0
 8016c50:	b140      	cbz	r0, 8016c64 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8016c52:	f105 0608 	add.w	r6, r5, #8
 8016c56:	4630      	mov	r0, r6
 8016c58:	f000 f906 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	b168      	cbz	r0, 8016c7c <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8016c60:	4620      	mov	r0, r4
 8016c62:	bd70      	pop	{r4, r5, r6, pc}
 8016c64:	4628      	mov	r0, r5
 8016c66:	f000 f903 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c6a:	f105 0008 	add.w	r0, r5, #8
 8016c6e:	f000 f8ff 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c72:	4620      	mov	r0, r4
 8016c74:	bd70      	pop	{r4, r5, r6, pc}
 8016c76:	4604      	mov	r4, r0
 8016c78:	4620      	mov	r0, r4
 8016c7a:	bd70      	pop	{r4, r5, r6, pc}
 8016c7c:	4628      	mov	r0, r5
 8016c7e:	f000 f8f7 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c82:	4630      	mov	r0, r6
 8016c84:	f000 f8f4 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c88:	e7ea      	b.n	8016c60 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 8016c8a:	bf00      	nop

08016c8c <autoware_control_msgs__msg__Longitudinal__fini>:
 8016c8c:	b148      	cbz	r0, 8016ca2 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 8016c8e:	b510      	push	{r4, lr}
 8016c90:	4604      	mov	r4, r0
 8016c92:	f000 f8ed 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016c96:	f104 0008 	add.w	r0, r4, #8
 8016c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c9e:	f000 b8e7 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016ca2:	4770      	bx	lr

08016ca4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8016ca4:	b538      	push	{r3, r4, r5, lr}
 8016ca6:	4604      	mov	r4, r0
 8016ca8:	b128      	cbz	r0, 8016cb6 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8016caa:	f000 f8dd 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016cae:	4605      	mov	r5, r0
 8016cb0:	b120      	cbz	r0, 8016cbc <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8016cb2:	4628      	mov	r0, r5
 8016cb4:	bd38      	pop	{r3, r4, r5, pc}
 8016cb6:	4605      	mov	r5, r0
 8016cb8:	4628      	mov	r0, r5
 8016cba:	bd38      	pop	{r3, r4, r5, pc}
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	f000 f8d7 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016cc2:	4628      	mov	r0, r5
 8016cc4:	bd38      	pop	{r3, r4, r5, pc}
 8016cc6:	bf00      	nop

08016cc8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8016cc8:	b108      	cbz	r0, 8016cce <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8016cca:	f000 b8d1 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016cce:	4770      	bx	lr

08016cd0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8016cd0:	3800      	subs	r0, #0
 8016cd2:	bf18      	it	ne
 8016cd4:	2001      	movne	r0, #1
 8016cd6:	4770      	bx	lr

08016cd8 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8016cd8:	4770      	bx	lr
 8016cda:	bf00      	nop

08016cdc <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8016cdc:	b538      	push	{r3, r4, r5, lr}
 8016cde:	4604      	mov	r4, r0
 8016ce0:	b128      	cbz	r0, 8016cee <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8016ce2:	f000 f8c1 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016ce6:	4605      	mov	r5, r0
 8016ce8:	b120      	cbz	r0, 8016cf4 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 8016cea:	4628      	mov	r0, r5
 8016cec:	bd38      	pop	{r3, r4, r5, pc}
 8016cee:	4605      	mov	r5, r0
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	bd38      	pop	{r3, r4, r5, pc}
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f000 f8bb 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016cfa:	4628      	mov	r0, r5
 8016cfc:	bd38      	pop	{r3, r4, r5, pc}
 8016cfe:	bf00      	nop

08016d00 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 8016d00:	b108      	cbz	r0, 8016d06 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8016d02:	f000 b8b5 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016d06:	4770      	bx	lr

08016d08 <autoware_vehicle_msgs__msg__GearCommand__init>:
 8016d08:	b538      	push	{r3, r4, r5, lr}
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	b128      	cbz	r0, 8016d1a <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 8016d0e:	f000 f8ab 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016d12:	4605      	mov	r5, r0
 8016d14:	b120      	cbz	r0, 8016d20 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8016d16:	4628      	mov	r0, r5
 8016d18:	bd38      	pop	{r3, r4, r5, pc}
 8016d1a:	4605      	mov	r5, r0
 8016d1c:	4628      	mov	r0, r5
 8016d1e:	bd38      	pop	{r3, r4, r5, pc}
 8016d20:	4620      	mov	r0, r4
 8016d22:	f000 f8a5 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016d26:	4628      	mov	r0, r5
 8016d28:	bd38      	pop	{r3, r4, r5, pc}
 8016d2a:	bf00      	nop

08016d2c <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8016d2c:	b108      	cbz	r0, 8016d32 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 8016d2e:	f000 b89f 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016d32:	4770      	bx	lr

08016d34 <autoware_vehicle_msgs__msg__GearReport__init>:
 8016d34:	b538      	push	{r3, r4, r5, lr}
 8016d36:	4604      	mov	r4, r0
 8016d38:	b128      	cbz	r0, 8016d46 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 8016d3a:	f000 f895 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016d3e:	4605      	mov	r5, r0
 8016d40:	b120      	cbz	r0, 8016d4c <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 8016d42:	4628      	mov	r0, r5
 8016d44:	bd38      	pop	{r3, r4, r5, pc}
 8016d46:	4605      	mov	r5, r0
 8016d48:	4628      	mov	r0, r5
 8016d4a:	bd38      	pop	{r3, r4, r5, pc}
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	f000 f88f 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016d52:	4628      	mov	r0, r5
 8016d54:	bd38      	pop	{r3, r4, r5, pc}
 8016d56:	bf00      	nop

08016d58 <autoware_vehicle_msgs__msg__GearReport__fini>:
 8016d58:	b108      	cbz	r0, 8016d5e <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 8016d5a:	f000 b889 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016d5e:	4770      	bx	lr

08016d60 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8016d60:	b538      	push	{r3, r4, r5, lr}
 8016d62:	4604      	mov	r4, r0
 8016d64:	b128      	cbz	r0, 8016d72 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8016d66:	f000 f87f 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016d6a:	4605      	mov	r5, r0
 8016d6c:	b120      	cbz	r0, 8016d78 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 8016d6e:	4628      	mov	r0, r5
 8016d70:	bd38      	pop	{r3, r4, r5, pc}
 8016d72:	4605      	mov	r5, r0
 8016d74:	4628      	mov	r0, r5
 8016d76:	bd38      	pop	{r3, r4, r5, pc}
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f000 f879 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016d7e:	4628      	mov	r0, r5
 8016d80:	bd38      	pop	{r3, r4, r5, pc}
 8016d82:	bf00      	nop

08016d84 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8016d84:	b108      	cbz	r0, 8016d8a <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8016d86:	f000 b873 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016d8a:	4770      	bx	lr

08016d8c <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 8016d8c:	b538      	push	{r3, r4, r5, lr}
 8016d8e:	4604      	mov	r4, r0
 8016d90:	b128      	cbz	r0, 8016d9e <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8016d92:	f000 f869 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016d96:	4605      	mov	r5, r0
 8016d98:	b120      	cbz	r0, 8016da4 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 8016d9a:	4628      	mov	r0, r5
 8016d9c:	bd38      	pop	{r3, r4, r5, pc}
 8016d9e:	4605      	mov	r5, r0
 8016da0:	4628      	mov	r0, r5
 8016da2:	bd38      	pop	{r3, r4, r5, pc}
 8016da4:	4620      	mov	r0, r4
 8016da6:	f000 f863 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016daa:	4628      	mov	r0, r5
 8016dac:	bd38      	pop	{r3, r4, r5, pc}
 8016dae:	bf00      	nop

08016db0 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8016db0:	b108      	cbz	r0, 8016db6 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8016db2:	f000 b85d 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016db6:	4770      	bx	lr

08016db8 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8016db8:	b538      	push	{r3, r4, r5, lr}
 8016dba:	4604      	mov	r4, r0
 8016dbc:	b128      	cbz	r0, 8016dca <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 8016dbe:	f000 f853 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016dc2:	4605      	mov	r5, r0
 8016dc4:	b120      	cbz	r0, 8016dd0 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	bd38      	pop	{r3, r4, r5, pc}
 8016dca:	4605      	mov	r5, r0
 8016dcc:	4628      	mov	r0, r5
 8016dce:	bd38      	pop	{r3, r4, r5, pc}
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	f000 f84d 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016dd6:	4628      	mov	r0, r5
 8016dd8:	bd38      	pop	{r3, r4, r5, pc}
 8016dda:	bf00      	nop

08016ddc <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8016ddc:	b108      	cbz	r0, 8016de2 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8016dde:	f000 b847 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016de2:	4770      	bx	lr

08016de4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8016de4:	b538      	push	{r3, r4, r5, lr}
 8016de6:	4604      	mov	r4, r0
 8016de8:	b128      	cbz	r0, 8016df6 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 8016dea:	f000 f83d 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016dee:	4605      	mov	r5, r0
 8016df0:	b120      	cbz	r0, 8016dfc <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8016df2:	4628      	mov	r0, r5
 8016df4:	bd38      	pop	{r3, r4, r5, pc}
 8016df6:	4605      	mov	r5, r0
 8016df8:	4628      	mov	r0, r5
 8016dfa:	bd38      	pop	{r3, r4, r5, pc}
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	f000 f837 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016e02:	4628      	mov	r0, r5
 8016e04:	bd38      	pop	{r3, r4, r5, pc}
 8016e06:	bf00      	nop

08016e08 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8016e08:	b108      	cbz	r0, 8016e0e <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8016e0a:	f000 b831 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016e0e:	4770      	bx	lr

08016e10 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8016e10:	b538      	push	{r3, r4, r5, lr}
 8016e12:	4604      	mov	r4, r0
 8016e14:	b128      	cbz	r0, 8016e22 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8016e16:	f000 f827 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 8016e1a:	4605      	mov	r5, r0
 8016e1c:	b120      	cbz	r0, 8016e28 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 8016e1e:	4628      	mov	r0, r5
 8016e20:	bd38      	pop	{r3, r4, r5, pc}
 8016e22:	4605      	mov	r5, r0
 8016e24:	4628      	mov	r0, r5
 8016e26:	bd38      	pop	{r3, r4, r5, pc}
 8016e28:	4620      	mov	r0, r4
 8016e2a:	f000 f821 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 8016e2e:	4628      	mov	r0, r5
 8016e30:	bd38      	pop	{r3, r4, r5, pc}
 8016e32:	bf00      	nop

08016e34 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8016e34:	b108      	cbz	r0, 8016e3a <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8016e36:	f000 b81b 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 8016e3a:	4770      	bx	lr

08016e3c <autoware_vehicle_msgs__msg__VelocityReport__init>:
 8016e3c:	b538      	push	{r3, r4, r5, lr}
 8016e3e:	4604      	mov	r4, r0
 8016e40:	b128      	cbz	r0, 8016e4e <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 8016e42:	f008 ff05 	bl	801fc50 <std_msgs__msg__Header__init>
 8016e46:	4605      	mov	r5, r0
 8016e48:	b120      	cbz	r0, 8016e54 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 8016e4a:	4628      	mov	r0, r5
 8016e4c:	bd38      	pop	{r3, r4, r5, pc}
 8016e4e:	4605      	mov	r5, r0
 8016e50:	4628      	mov	r0, r5
 8016e52:	bd38      	pop	{r3, r4, r5, pc}
 8016e54:	4620      	mov	r0, r4
 8016e56:	f008 ff1f 	bl	801fc98 <std_msgs__msg__Header__fini>
 8016e5a:	4628      	mov	r0, r5
 8016e5c:	bd38      	pop	{r3, r4, r5, pc}
 8016e5e:	bf00      	nop

08016e60 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8016e60:	b108      	cbz	r0, 8016e66 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8016e62:	f008 bf19 	b.w	801fc98 <std_msgs__msg__Header__fini>
 8016e66:	4770      	bx	lr

08016e68 <builtin_interfaces__msg__Time__init>:
 8016e68:	3800      	subs	r0, #0
 8016e6a:	bf18      	it	ne
 8016e6c:	2001      	movne	r0, #1
 8016e6e:	4770      	bx	lr

08016e70 <builtin_interfaces__msg__Time__fini>:
 8016e70:	4770      	bx	lr
 8016e72:	bf00      	nop

08016e74 <ucdr_serialize_sequence_char>:
 8016e74:	b570      	push	{r4, r5, r6, lr}
 8016e76:	4615      	mov	r5, r2
 8016e78:	460e      	mov	r6, r1
 8016e7a:	7d01      	ldrb	r1, [r0, #20]
 8016e7c:	4604      	mov	r4, r0
 8016e7e:	f7fc fa25 	bl	80132cc <ucdr_serialize_endian_uint32_t>
 8016e82:	b90d      	cbnz	r5, 8016e88 <ucdr_serialize_sequence_char+0x14>
 8016e84:	2001      	movs	r0, #1
 8016e86:	bd70      	pop	{r4, r5, r6, pc}
 8016e88:	462b      	mov	r3, r5
 8016e8a:	4632      	mov	r2, r6
 8016e8c:	7d21      	ldrb	r1, [r4, #20]
 8016e8e:	4620      	mov	r0, r4
 8016e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e94:	f009 b8d4 	b.w	8020040 <ucdr_serialize_endian_array_char>

08016e98 <ucdr_deserialize_sequence_char>:
 8016e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e9c:	461d      	mov	r5, r3
 8016e9e:	4616      	mov	r6, r2
 8016ea0:	460f      	mov	r7, r1
 8016ea2:	461a      	mov	r2, r3
 8016ea4:	7d01      	ldrb	r1, [r0, #20]
 8016ea6:	4604      	mov	r4, r0
 8016ea8:	f7fc fb38 	bl	801351c <ucdr_deserialize_endian_uint32_t>
 8016eac:	682b      	ldr	r3, [r5, #0]
 8016eae:	429e      	cmp	r6, r3
 8016eb0:	d201      	bcs.n	8016eb6 <ucdr_deserialize_sequence_char+0x1e>
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	75a2      	strb	r2, [r4, #22]
 8016eb6:	b913      	cbnz	r3, 8016ebe <ucdr_deserialize_sequence_char+0x26>
 8016eb8:	2001      	movs	r0, #1
 8016eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ebe:	463a      	mov	r2, r7
 8016ec0:	7d21      	ldrb	r1, [r4, #20]
 8016ec2:	4620      	mov	r0, r4
 8016ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec8:	f009 b8ec 	b.w	80200a4 <ucdr_deserialize_endian_array_char>

08016ecc <ucdr_serialize_sequence_uint8_t>:
 8016ecc:	b570      	push	{r4, r5, r6, lr}
 8016ece:	4615      	mov	r5, r2
 8016ed0:	460e      	mov	r6, r1
 8016ed2:	7d01      	ldrb	r1, [r0, #20]
 8016ed4:	4604      	mov	r4, r0
 8016ed6:	f7fc f9f9 	bl	80132cc <ucdr_serialize_endian_uint32_t>
 8016eda:	b90d      	cbnz	r5, 8016ee0 <ucdr_serialize_sequence_uint8_t+0x14>
 8016edc:	2001      	movs	r0, #1
 8016ede:	bd70      	pop	{r4, r5, r6, pc}
 8016ee0:	462b      	mov	r3, r5
 8016ee2:	4632      	mov	r2, r6
 8016ee4:	7d21      	ldrb	r1, [r4, #20]
 8016ee6:	4620      	mov	r0, r4
 8016ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016eec:	f009 b940 	b.w	8020170 <ucdr_serialize_endian_array_uint8_t>

08016ef0 <ucdr_deserialize_sequence_uint8_t>:
 8016ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef4:	461d      	mov	r5, r3
 8016ef6:	4616      	mov	r6, r2
 8016ef8:	460f      	mov	r7, r1
 8016efa:	461a      	mov	r2, r3
 8016efc:	7d01      	ldrb	r1, [r0, #20]
 8016efe:	4604      	mov	r4, r0
 8016f00:	f7fc fb0c 	bl	801351c <ucdr_deserialize_endian_uint32_t>
 8016f04:	682b      	ldr	r3, [r5, #0]
 8016f06:	429e      	cmp	r6, r3
 8016f08:	d201      	bcs.n	8016f0e <ucdr_deserialize_sequence_uint8_t+0x1e>
 8016f0a:	2201      	movs	r2, #1
 8016f0c:	75a2      	strb	r2, [r4, #22]
 8016f0e:	b913      	cbnz	r3, 8016f16 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016f10:	2001      	movs	r0, #1
 8016f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f16:	463a      	mov	r2, r7
 8016f18:	7d21      	ldrb	r1, [r4, #20]
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f20:	f009 b98c 	b.w	802023c <ucdr_deserialize_endian_array_uint8_t>

08016f24 <uxr_buffer_delete_entity>:
 8016f24:	b510      	push	{r4, lr}
 8016f26:	2300      	movs	r3, #0
 8016f28:	b08e      	sub	sp, #56	@ 0x38
 8016f2a:	4604      	mov	r4, r0
 8016f2c:	9103      	str	r1, [sp, #12]
 8016f2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016f32:	2303      	movs	r3, #3
 8016f34:	2204      	movs	r2, #4
 8016f36:	9300      	str	r3, [sp, #0]
 8016f38:	ab06      	add	r3, sp, #24
 8016f3a:	f001 fbcd 	bl	80186d8 <uxr_prepare_stream_to_write_submessage>
 8016f3e:	b918      	cbnz	r0, 8016f48 <uxr_buffer_delete_entity+0x24>
 8016f40:	4604      	mov	r4, r0
 8016f42:	4620      	mov	r0, r4
 8016f44:	b00e      	add	sp, #56	@ 0x38
 8016f46:	bd10      	pop	{r4, pc}
 8016f48:	9902      	ldr	r1, [sp, #8]
 8016f4a:	aa05      	add	r2, sp, #20
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	f001 fcff 	bl	8018950 <uxr_init_base_object_request>
 8016f52:	4604      	mov	r4, r0
 8016f54:	a905      	add	r1, sp, #20
 8016f56:	a806      	add	r0, sp, #24
 8016f58:	f003 fc1a 	bl	801a790 <uxr_serialize_DELETE_Payload>
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	b00e      	add	sp, #56	@ 0x38
 8016f60:	bd10      	pop	{r4, pc}
 8016f62:	bf00      	nop

08016f64 <uxr_common_create_entity>:
 8016f64:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016f68:	b510      	push	{r4, lr}
 8016f6a:	f1bc 0f01 	cmp.w	ip, #1
 8016f6e:	b08c      	sub	sp, #48	@ 0x30
 8016f70:	4604      	mov	r4, r0
 8016f72:	9202      	str	r2, [sp, #8]
 8016f74:	bf0c      	ite	eq
 8016f76:	f003 0201 	andeq.w	r2, r3, #1
 8016f7a:	2200      	movne	r2, #0
 8016f7c:	330e      	adds	r3, #14
 8016f7e:	9103      	str	r1, [sp, #12]
 8016f80:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8016f84:	441a      	add	r2, r3
 8016f86:	ab04      	add	r3, sp, #16
 8016f88:	9101      	str	r1, [sp, #4]
 8016f8a:	2101      	movs	r1, #1
 8016f8c:	b292      	uxth	r2, r2
 8016f8e:	9100      	str	r1, [sp, #0]
 8016f90:	9903      	ldr	r1, [sp, #12]
 8016f92:	f001 fba1 	bl	80186d8 <uxr_prepare_stream_to_write_submessage>
 8016f96:	b918      	cbnz	r0, 8016fa0 <uxr_common_create_entity+0x3c>
 8016f98:	4604      	mov	r4, r0
 8016f9a:	4620      	mov	r0, r4
 8016f9c:	b00c      	add	sp, #48	@ 0x30
 8016f9e:	bd10      	pop	{r4, pc}
 8016fa0:	9902      	ldr	r1, [sp, #8]
 8016fa2:	4620      	mov	r0, r4
 8016fa4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016fa6:	f001 fcd3 	bl	8018950 <uxr_init_base_object_request>
 8016faa:	4604      	mov	r4, r0
 8016fac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016fae:	a804      	add	r0, sp, #16
 8016fb0:	f003 fb32 	bl	801a618 <uxr_serialize_CREATE_Payload>
 8016fb4:	4620      	mov	r0, r4
 8016fb6:	b00c      	add	sp, #48	@ 0x30
 8016fb8:	bd10      	pop	{r4, pc}
 8016fba:	bf00      	nop

08016fbc <uxr_buffer_create_participant_bin>:
 8016fbc:	b570      	push	{r4, r5, r6, lr}
 8016fbe:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8016fc2:	4605      	mov	r5, r0
 8016fc4:	ac11      	add	r4, sp, #68	@ 0x44
 8016fc6:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8016fca:	2303      	movs	r3, #3
 8016fcc:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8016fd0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016fd4:	7223      	strb	r3, [r4, #8]
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	2201      	movs	r2, #1
 8016fda:	f88d 3014 	strb.w	r3, [sp, #20]
 8016fde:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8016fe0:	7122      	strb	r2, [r4, #4]
 8016fe2:	b1cb      	cbz	r3, 8017018 <uxr_buffer_create_participant_bin+0x5c>
 8016fe4:	f88d 201c 	strb.w	r2, [sp, #28]
 8016fe8:	9308      	str	r3, [sp, #32]
 8016fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016fee:	a915      	add	r1, sp, #84	@ 0x54
 8016ff0:	a809      	add	r0, sp, #36	@ 0x24
 8016ff2:	f7fd f927 	bl	8014244 <ucdr_init_buffer>
 8016ff6:	a905      	add	r1, sp, #20
 8016ff8:	a809      	add	r0, sp, #36	@ 0x24
 8016ffa:	f002 fec3 	bl	8019d84 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8016ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017000:	9600      	str	r6, [sp, #0]
 8017002:	4628      	mov	r0, r5
 8017004:	9401      	str	r4, [sp, #4]
 8017006:	60e3      	str	r3, [r4, #12]
 8017008:	b29b      	uxth	r3, r3
 801700a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801700e:	f7ff ffa9 	bl	8016f64 <uxr_common_create_entity>
 8017012:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8017016:	bd70      	pop	{r4, r5, r6, pc}
 8017018:	f88d 301c 	strb.w	r3, [sp, #28]
 801701c:	e7e5      	b.n	8016fea <uxr_buffer_create_participant_bin+0x2e>
 801701e:	bf00      	nop

08017020 <uxr_buffer_create_topic_bin>:
 8017020:	b570      	push	{r4, r5, r6, lr}
 8017022:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8017026:	4605      	mov	r5, r0
 8017028:	4618      	mov	r0, r3
 801702a:	9105      	str	r1, [sp, #20]
 801702c:	a997      	add	r1, sp, #604	@ 0x25c
 801702e:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8017032:	ac13      	add	r4, sp, #76	@ 0x4c
 8017034:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017038:	2302      	movs	r3, #2
 801703a:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801703e:	f000 fa8d 	bl	801755c <uxr_object_id_to_raw>
 8017042:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8017044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017048:	a917      	add	r1, sp, #92	@ 0x5c
 801704a:	a80b      	add	r0, sp, #44	@ 0x2c
 801704c:	9306      	str	r3, [sp, #24]
 801704e:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8017050:	930a      	str	r3, [sp, #40]	@ 0x28
 8017052:	2303      	movs	r3, #3
 8017054:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017058:	2301      	movs	r3, #1
 801705a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801705e:	2300      	movs	r3, #0
 8017060:	f88d 301c 	strb.w	r3, [sp, #28]
 8017064:	f7fd f8ee 	bl	8014244 <ucdr_init_buffer>
 8017068:	a906      	add	r1, sp, #24
 801706a:	a80b      	add	r0, sp, #44	@ 0x2c
 801706c:	f002 feac 	bl	8019dc8 <uxr_serialize_OBJK_Topic_Binary>
 8017070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017072:	4628      	mov	r0, r5
 8017074:	9600      	str	r6, [sp, #0]
 8017076:	9316      	str	r3, [sp, #88]	@ 0x58
 8017078:	b29b      	uxth	r3, r3
 801707a:	9401      	str	r4, [sp, #4]
 801707c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017080:	f7ff ff70 	bl	8016f64 <uxr_common_create_entity>
 8017084:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8017088:	bd70      	pop	{r4, r5, r6, pc}
 801708a:	bf00      	nop

0801708c <uxr_buffer_create_publisher_bin>:
 801708c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801708e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8017092:	2603      	movs	r6, #3
 8017094:	4605      	mov	r5, r0
 8017096:	4618      	mov	r0, r3
 8017098:	9105      	str	r1, [sp, #20]
 801709a:	a992      	add	r1, sp, #584	@ 0x248
 801709c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80170a0:	ac0e      	add	r4, sp, #56	@ 0x38
 80170a2:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80170a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80170aa:	f000 fa57 	bl	801755c <uxr_object_id_to_raw>
 80170ae:	2300      	movs	r3, #0
 80170b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80170b4:	a912      	add	r1, sp, #72	@ 0x48
 80170b6:	a806      	add	r0, sp, #24
 80170b8:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80170bc:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80170c0:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80170c4:	f7fd f8be 	bl	8014244 <ucdr_init_buffer>
 80170c8:	a993      	add	r1, sp, #588	@ 0x24c
 80170ca:	a806      	add	r0, sp, #24
 80170cc:	f002 ff30 	bl	8019f30 <uxr_serialize_OBJK_Publisher_Binary>
 80170d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170d2:	4628      	mov	r0, r5
 80170d4:	9700      	str	r7, [sp, #0]
 80170d6:	9311      	str	r3, [sp, #68]	@ 0x44
 80170d8:	b29b      	uxth	r3, r3
 80170da:	9401      	str	r4, [sp, #4]
 80170dc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80170e0:	f7ff ff40 	bl	8016f64 <uxr_common_create_entity>
 80170e4:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80170e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170ea:	bf00      	nop

080170ec <uxr_buffer_create_subscriber_bin>:
 80170ec:	b570      	push	{r4, r5, r6, lr}
 80170ee:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 80170f2:	4605      	mov	r5, r0
 80170f4:	4618      	mov	r0, r3
 80170f6:	9105      	str	r1, [sp, #20]
 80170f8:	a992      	add	r1, sp, #584	@ 0x248
 80170fa:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80170fe:	ac0e      	add	r4, sp, #56	@ 0x38
 8017100:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017104:	2304      	movs	r3, #4
 8017106:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801710a:	f000 fa27 	bl	801755c <uxr_object_id_to_raw>
 801710e:	2300      	movs	r3, #0
 8017110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017114:	a912      	add	r1, sp, #72	@ 0x48
 8017116:	a806      	add	r0, sp, #24
 8017118:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801711c:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8017120:	2303      	movs	r3, #3
 8017122:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8017126:	f7fd f88d 	bl	8014244 <ucdr_init_buffer>
 801712a:	a993      	add	r1, sp, #588	@ 0x24c
 801712c:	a806      	add	r0, sp, #24
 801712e:	f002 ffaf 	bl	801a090 <uxr_serialize_OBJK_Subscriber_Binary>
 8017132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017134:	4628      	mov	r0, r5
 8017136:	9600      	str	r6, [sp, #0]
 8017138:	9311      	str	r3, [sp, #68]	@ 0x44
 801713a:	b29b      	uxth	r3, r3
 801713c:	9401      	str	r4, [sp, #4]
 801713e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017142:	f7ff ff0f 	bl	8016f64 <uxr_common_create_entity>
 8017146:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801714a:	bd70      	pop	{r4, r5, r6, pc}

0801714c <uxr_buffer_create_datawriter_bin>:
 801714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017150:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8017154:	4606      	mov	r6, r0
 8017156:	4618      	mov	r0, r3
 8017158:	2703      	movs	r7, #3
 801715a:	ac1d      	add	r4, sp, #116	@ 0x74
 801715c:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8017160:	9105      	str	r1, [sp, #20]
 8017162:	a9a1      	add	r1, sp, #644	@ 0x284
 8017164:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8017168:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801716c:	2305      	movs	r3, #5
 801716e:	7123      	strb	r3, [r4, #4]
 8017170:	f000 f9f4 	bl	801755c <uxr_object_id_to_raw>
 8017174:	a90e      	add	r1, sp, #56	@ 0x38
 8017176:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8017178:	7227      	strb	r7, [r4, #8]
 801717a:	f000 f9ef 	bl	801755c <uxr_object_id_to_raw>
 801717e:	2300      	movs	r3, #0
 8017180:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8017184:	3d00      	subs	r5, #0
 8017186:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801718a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801718e:	bf18      	it	ne
 8017190:	2501      	movne	r5, #1
 8017192:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017196:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801719a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801719e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80171a2:	2301      	movs	r3, #1
 80171a4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80171a8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80171ac:	bb8a      	cbnz	r2, 8017212 <uxr_buffer_create_datawriter_bin+0xc6>
 80171ae:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80171b2:	f04f 0c13 	mov.w	ip, #19
 80171b6:	250b      	movs	r5, #11
 80171b8:	2221      	movs	r2, #33	@ 0x21
 80171ba:	2111      	movs	r1, #17
 80171bc:	2009      	movs	r0, #9
 80171be:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80171c2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80171c6:	b923      	cbnz	r3, 80171d2 <uxr_buffer_create_datawriter_bin+0x86>
 80171c8:	4672      	mov	r2, lr
 80171ca:	4661      	mov	r1, ip
 80171cc:	4628      	mov	r0, r5
 80171ce:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80171d2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80171d6:	2b01      	cmp	r3, #1
 80171d8:	d025      	beq.n	8017226 <uxr_buffer_create_datawriter_bin+0xda>
 80171da:	2b03      	cmp	r3, #3
 80171dc:	d029      	beq.n	8017232 <uxr_buffer_create_datawriter_bin+0xe6>
 80171de:	b32b      	cbz	r3, 801722c <uxr_buffer_create_datawriter_bin+0xe0>
 80171e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80171e4:	a921      	add	r1, sp, #132	@ 0x84
 80171e6:	a806      	add	r0, sp, #24
 80171e8:	f7fd f82c 	bl	8014244 <ucdr_init_buffer>
 80171ec:	a90e      	add	r1, sp, #56	@ 0x38
 80171ee:	a806      	add	r0, sp, #24
 80171f0:	f003 f800 	bl	801a1f4 <uxr_serialize_OBJK_DataWriter_Binary>
 80171f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171f6:	f8cd 8000 	str.w	r8, [sp]
 80171fa:	4630      	mov	r0, r6
 80171fc:	9401      	str	r4, [sp, #4]
 80171fe:	60e3      	str	r3, [r4, #12]
 8017200:	b29b      	uxth	r3, r3
 8017202:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017206:	f7ff fead 	bl	8016f64 <uxr_common_create_entity>
 801720a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801720e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017212:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017216:	f04f 0c12 	mov.w	ip, #18
 801721a:	250a      	movs	r5, #10
 801721c:	2220      	movs	r2, #32
 801721e:	2110      	movs	r1, #16
 8017220:	2008      	movs	r0, #8
 8017222:	2702      	movs	r7, #2
 8017224:	e7cd      	b.n	80171c2 <uxr_buffer_create_datawriter_bin+0x76>
 8017226:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801722a:	e7d9      	b.n	80171e0 <uxr_buffer_create_datawriter_bin+0x94>
 801722c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8017230:	e7d6      	b.n	80171e0 <uxr_buffer_create_datawriter_bin+0x94>
 8017232:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017236:	e7d3      	b.n	80171e0 <uxr_buffer_create_datawriter_bin+0x94>

08017238 <uxr_buffer_create_datareader_bin>:
 8017238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801723c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8017240:	4606      	mov	r6, r0
 8017242:	4618      	mov	r0, r3
 8017244:	2703      	movs	r7, #3
 8017246:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017248:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801724c:	9105      	str	r1, [sp, #20]
 801724e:	a9a3      	add	r1, sp, #652	@ 0x28c
 8017250:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8017254:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017258:	2306      	movs	r3, #6
 801725a:	7123      	strb	r3, [r4, #4]
 801725c:	f000 f97e 	bl	801755c <uxr_object_id_to_raw>
 8017260:	a90e      	add	r1, sp, #56	@ 0x38
 8017262:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8017264:	7227      	strb	r7, [r4, #8]
 8017266:	f000 f979 	bl	801755c <uxr_object_id_to_raw>
 801726a:	2300      	movs	r3, #0
 801726c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8017270:	3d00      	subs	r5, #0
 8017272:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8017276:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 801727a:	bf18      	it	ne
 801727c:	2501      	movne	r5, #1
 801727e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8017282:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017286:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801728a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801728e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017292:	2301      	movs	r3, #1
 8017294:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017298:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801729c:	bb8a      	cbnz	r2, 8017302 <uxr_buffer_create_datareader_bin+0xca>
 801729e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80172a2:	f04f 0c13 	mov.w	ip, #19
 80172a6:	250b      	movs	r5, #11
 80172a8:	2221      	movs	r2, #33	@ 0x21
 80172aa:	2111      	movs	r1, #17
 80172ac:	2009      	movs	r0, #9
 80172ae:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80172b2:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80172b6:	b923      	cbnz	r3, 80172c2 <uxr_buffer_create_datareader_bin+0x8a>
 80172b8:	4672      	mov	r2, lr
 80172ba:	4661      	mov	r1, ip
 80172bc:	4628      	mov	r0, r5
 80172be:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80172c2:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80172c6:	2b01      	cmp	r3, #1
 80172c8:	d025      	beq.n	8017316 <uxr_buffer_create_datareader_bin+0xde>
 80172ca:	2b03      	cmp	r3, #3
 80172cc:	d029      	beq.n	8017322 <uxr_buffer_create_datareader_bin+0xea>
 80172ce:	b32b      	cbz	r3, 801731c <uxr_buffer_create_datareader_bin+0xe4>
 80172d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80172d4:	a923      	add	r1, sp, #140	@ 0x8c
 80172d6:	a806      	add	r0, sp, #24
 80172d8:	f7fc ffb4 	bl	8014244 <ucdr_init_buffer>
 80172dc:	a90e      	add	r1, sp, #56	@ 0x38
 80172de:	a806      	add	r0, sp, #24
 80172e0:	f002 ff4c 	bl	801a17c <uxr_serialize_OBJK_DataReader_Binary>
 80172e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172e6:	f8cd 8000 	str.w	r8, [sp]
 80172ea:	4630      	mov	r0, r6
 80172ec:	9401      	str	r4, [sp, #4]
 80172ee:	60e3      	str	r3, [r4, #12]
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80172f6:	f7ff fe35 	bl	8016f64 <uxr_common_create_entity>
 80172fa:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80172fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017302:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017306:	f04f 0c12 	mov.w	ip, #18
 801730a:	250a      	movs	r5, #10
 801730c:	2220      	movs	r2, #32
 801730e:	2110      	movs	r1, #16
 8017310:	2008      	movs	r0, #8
 8017312:	2702      	movs	r7, #2
 8017314:	e7cd      	b.n	80172b2 <uxr_buffer_create_datareader_bin+0x7a>
 8017316:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801731a:	e7d9      	b.n	80172d0 <uxr_buffer_create_datareader_bin+0x98>
 801731c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8017320:	e7d6      	b.n	80172d0 <uxr_buffer_create_datareader_bin+0x98>
 8017322:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017326:	e7d3      	b.n	80172d0 <uxr_buffer_create_datareader_bin+0x98>

08017328 <uxr_buffer_create_replier_bin>:
 8017328:	b570      	push	{r4, r5, r6, lr}
 801732a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801732e:	4605      	mov	r5, r0
 8017330:	4618      	mov	r0, r3
 8017332:	9105      	str	r1, [sp, #20]
 8017334:	a999      	add	r1, sp, #612	@ 0x264
 8017336:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 801733a:	ac15      	add	r4, sp, #84	@ 0x54
 801733c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017340:	2308      	movs	r3, #8
 8017342:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8017346:	f000 f909 	bl	801755c <uxr_object_id_to_raw>
 801734a:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 801734c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017350:	a919      	add	r1, sp, #100	@ 0x64
 8017352:	a80d      	add	r0, sp, #52	@ 0x34
 8017354:	9306      	str	r3, [sp, #24]
 8017356:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8017358:	9307      	str	r3, [sp, #28]
 801735a:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 801735c:	9308      	str	r3, [sp, #32]
 801735e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8017360:	930c      	str	r3, [sp, #48]	@ 0x30
 8017362:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017364:	930a      	str	r3, [sp, #40]	@ 0x28
 8017366:	2301      	movs	r3, #1
 8017368:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801736c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8017370:	2303      	movs	r3, #3
 8017372:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8017376:	f7fc ff65 	bl	8014244 <ucdr_init_buffer>
 801737a:	a906      	add	r1, sp, #24
 801737c:	a80d      	add	r0, sp, #52	@ 0x34
 801737e:	f002 ff65 	bl	801a24c <uxr_serialize_OBJK_Replier_Binary>
 8017382:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017384:	4628      	mov	r0, r5
 8017386:	9600      	str	r6, [sp, #0]
 8017388:	9318      	str	r3, [sp, #96]	@ 0x60
 801738a:	b29b      	uxth	r3, r3
 801738c:	9401      	str	r4, [sp, #4]
 801738e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017392:	f7ff fde7 	bl	8016f64 <uxr_common_create_entity>
 8017396:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 801739a:	bd70      	pop	{r4, r5, r6, pc}

0801739c <get_custom_error>:
 801739c:	4b01      	ldr	r3, [pc, #4]	@ (80173a4 <get_custom_error+0x8>)
 801739e:	7818      	ldrb	r0, [r3, #0]
 80173a0:	4770      	bx	lr
 80173a2:	bf00      	nop
 80173a4:	240693dc 	.word	0x240693dc

080173a8 <recv_custom_msg>:
 80173a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ac:	4693      	mov	fp, r2
 80173ae:	b089      	sub	sp, #36	@ 0x24
 80173b0:	2200      	movs	r2, #0
 80173b2:	4604      	mov	r4, r0
 80173b4:	468a      	mov	sl, r1
 80173b6:	9305      	str	r3, [sp, #20]
 80173b8:	f88d 201e 	strb.w	r2, [sp, #30]
 80173bc:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80173c0:	b322      	cbz	r2, 801740c <recv_custom_msg+0x64>
 80173c2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80173c6:	f10d 081f 	add.w	r8, sp, #31
 80173ca:	af05      	add	r7, sp, #20
 80173cc:	f10d 061e 	add.w	r6, sp, #30
 80173d0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80173d4:	e002      	b.n	80173dc <recv_custom_msg+0x34>
 80173d6:	9b05      	ldr	r3, [sp, #20]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	dd0f      	ble.n	80173fc <recv_custom_msg+0x54>
 80173dc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80173e0:	4623      	mov	r3, r4
 80173e2:	4622      	mov	r2, r4
 80173e4:	4648      	mov	r0, r9
 80173e6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80173ea:	e9cd 5600 	strd	r5, r6, [sp]
 80173ee:	f001 fcc5 	bl	8018d7c <uxr_read_framed_msg>
 80173f2:	2800      	cmp	r0, #0
 80173f4:	d0ef      	beq.n	80173d6 <recv_custom_msg+0x2e>
 80173f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80173fa:	b1b3      	cbz	r3, 801742a <recv_custom_msg+0x82>
 80173fc:	4b0f      	ldr	r3, [pc, #60]	@ (801743c <recv_custom_msg+0x94>)
 80173fe:	2000      	movs	r0, #0
 8017400:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017404:	701a      	strb	r2, [r3, #0]
 8017406:	b009      	add	sp, #36	@ 0x24
 8017408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801740c:	f10d 021f 	add.w	r2, sp, #31
 8017410:	4601      	mov	r1, r0
 8017412:	9200      	str	r2, [sp, #0]
 8017414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017418:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801741c:	47a8      	blx	r5
 801741e:	2800      	cmp	r0, #0
 8017420:	d0ec      	beq.n	80173fc <recv_custom_msg+0x54>
 8017422:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d1e8      	bne.n	80173fc <recv_custom_msg+0x54>
 801742a:	f8cb 0000 	str.w	r0, [fp]
 801742e:	2001      	movs	r0, #1
 8017430:	f8ca 4000 	str.w	r4, [sl]
 8017434:	b009      	add	sp, #36	@ 0x24
 8017436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801743a:	bf00      	nop
 801743c:	240693dc 	.word	0x240693dc

08017440 <send_custom_msg>:
 8017440:	b530      	push	{r4, r5, lr}
 8017442:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8017446:	b087      	sub	sp, #28
 8017448:	4614      	mov	r4, r2
 801744a:	b995      	cbnz	r5, 8017472 <send_custom_msg+0x32>
 801744c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8017450:	f10d 0317 	add.w	r3, sp, #23
 8017454:	47a8      	blx	r5
 8017456:	1e03      	subs	r3, r0, #0
 8017458:	bf18      	it	ne
 801745a:	2301      	movne	r3, #1
 801745c:	42a0      	cmp	r0, r4
 801745e:	bf18      	it	ne
 8017460:	2300      	movne	r3, #0
 8017462:	b91b      	cbnz	r3, 801746c <send_custom_msg+0x2c>
 8017464:	4a0a      	ldr	r2, [pc, #40]	@ (8017490 <send_custom_msg+0x50>)
 8017466:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801746a:	7011      	strb	r1, [r2, #0]
 801746c:	4618      	mov	r0, r3
 801746e:	b007      	add	sp, #28
 8017470:	bd30      	pop	{r4, r5, pc}
 8017472:	460b      	mov	r3, r1
 8017474:	2200      	movs	r2, #0
 8017476:	f10d 0117 	add.w	r1, sp, #23
 801747a:	9400      	str	r4, [sp, #0]
 801747c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017480:	4602      	mov	r2, r0
 8017482:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017486:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801748a:	f001 fa99 	bl	80189c0 <uxr_write_framed_msg>
 801748e:	e7e2      	b.n	8017456 <send_custom_msg+0x16>
 8017490:	240693dc 	.word	0x240693dc

08017494 <uxr_set_custom_transport_callbacks>:
 8017494:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8017498:	9901      	ldr	r1, [sp, #4]
 801749a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801749e:	9b00      	ldr	r3, [sp, #0]
 80174a0:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 80174a4:	4770      	bx	lr
 80174a6:	bf00      	nop

080174a8 <uxr_init_custom_transport>:
 80174a8:	b538      	push	{r3, r4, r5, lr}
 80174aa:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80174ae:	b303      	cbz	r3, 80174f2 <uxr_init_custom_transport+0x4a>
 80174b0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80174b4:	4604      	mov	r4, r0
 80174b6:	b1e2      	cbz	r2, 80174f2 <uxr_init_custom_transport+0x4a>
 80174b8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80174bc:	b1ca      	cbz	r2, 80174f2 <uxr_init_custom_transport+0x4a>
 80174be:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80174c2:	b1b2      	cbz	r2, 80174f2 <uxr_init_custom_transport+0x4a>
 80174c4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80174c8:	4798      	blx	r3
 80174ca:	4605      	mov	r5, r0
 80174cc:	b188      	cbz	r0, 80174f2 <uxr_init_custom_transport+0x4a>
 80174ce:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80174d2:	b98b      	cbnz	r3, 80174f8 <uxr_init_custom_transport+0x50>
 80174d4:	4b0b      	ldr	r3, [pc, #44]	@ (8017504 <uxr_init_custom_transport+0x5c>)
 80174d6:	4628      	mov	r0, r5
 80174d8:	490b      	ldr	r1, [pc, #44]	@ (8017508 <uxr_init_custom_transport+0x60>)
 80174da:	4a0c      	ldr	r2, [pc, #48]	@ (801750c <uxr_init_custom_transport+0x64>)
 80174dc:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80174e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80174e4:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80174e8:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80174ec:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80174f0:	bd38      	pop	{r3, r4, r5, pc}
 80174f2:	2500      	movs	r5, #0
 80174f4:	4628      	mov	r0, r5
 80174f6:	bd38      	pop	{r3, r4, r5, pc}
 80174f8:	2100      	movs	r1, #0
 80174fa:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80174fe:	f001 fa59 	bl	80189b4 <uxr_init_framing_io>
 8017502:	e7e7      	b.n	80174d4 <uxr_init_custom_transport+0x2c>
 8017504:	080173a9 	.word	0x080173a9
 8017508:	08017441 	.word	0x08017441
 801750c:	0801739d 	.word	0x0801739d

08017510 <uxr_close_custom_transport>:
 8017510:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8017514:	4718      	bx	r3
 8017516:	bf00      	nop

08017518 <uxr_object_id>:
 8017518:	b082      	sub	sp, #8
 801751a:	2300      	movs	r3, #0
 801751c:	f88d 1006 	strb.w	r1, [sp, #6]
 8017520:	f360 030f 	bfi	r3, r0, #0, #16
 8017524:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017528:	f362 431f 	bfi	r3, r2, #16, #16
 801752c:	4618      	mov	r0, r3
 801752e:	b002      	add	sp, #8
 8017530:	4770      	bx	lr
 8017532:	bf00      	nop

08017534 <uxr_object_id_from_raw>:
 8017534:	7843      	ldrb	r3, [r0, #1]
 8017536:	b082      	sub	sp, #8
 8017538:	7801      	ldrb	r1, [r0, #0]
 801753a:	2000      	movs	r0, #0
 801753c:	091a      	lsrs	r2, r3, #4
 801753e:	f003 030f 	and.w	r3, r3, #15
 8017542:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017546:	f88d 3006 	strb.w	r3, [sp, #6]
 801754a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801754e:	f362 000f 	bfi	r0, r2, #0, #16
 8017552:	f363 401f 	bfi	r0, r3, #16, #16
 8017556:	b002      	add	sp, #8
 8017558:	4770      	bx	lr
 801755a:	bf00      	nop

0801755c <uxr_object_id_to_raw>:
 801755c:	4602      	mov	r2, r0
 801755e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8017562:	b082      	sub	sp, #8
 8017564:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017568:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801756c:	f881 c000 	strb.w	ip, [r1]
 8017570:	7048      	strb	r0, [r1, #1]
 8017572:	b002      	add	sp, #8
 8017574:	4770      	bx	lr
 8017576:	bf00      	nop

08017578 <uxr_ping_agent_session>:
 8017578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801757c:	4617      	mov	r7, r2
 801757e:	b091      	sub	sp, #68	@ 0x44
 8017580:	2210      	movs	r2, #16
 8017582:	4606      	mov	r6, r0
 8017584:	4688      	mov	r8, r1
 8017586:	a808      	add	r0, sp, #32
 8017588:	eb0d 0102 	add.w	r1, sp, r2
 801758c:	2500      	movs	r5, #0
 801758e:	f7fc fe59 	bl	8014244 <ucdr_init_buffer>
 8017592:	4b1e      	ldr	r3, [pc, #120]	@ (801760c <uxr_ping_agent_session+0x94>)
 8017594:	2402      	movs	r4, #2
 8017596:	462a      	mov	r2, r5
 8017598:	881b      	ldrh	r3, [r3, #0]
 801759a:	a808      	add	r0, sp, #32
 801759c:	9500      	str	r5, [sp, #0]
 801759e:	f8ad 300a 	strh.w	r3, [sp, #10]
 80175a2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80175a6:	7831      	ldrb	r1, [r6, #0]
 80175a8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80175ac:	462b      	mov	r3, r5
 80175ae:	9403      	str	r4, [sp, #12]
 80175b0:	f002 f9b6 	bl	8019920 <uxr_serialize_message_header>
 80175b4:	4621      	mov	r1, r4
 80175b6:	462b      	mov	r3, r5
 80175b8:	2208      	movs	r2, #8
 80175ba:	a808      	add	r0, sp, #32
 80175bc:	f001 ffb4 	bl	8019528 <uxr_buffer_submessage_header>
 80175c0:	4604      	mov	r4, r0
 80175c2:	a902      	add	r1, sp, #8
 80175c4:	a808      	add	r0, sp, #32
 80175c6:	f003 f8b7 	bl	801a738 <uxr_serialize_GET_INFO_Payload>
 80175ca:	b104      	cbz	r4, 80175ce <uxr_ping_agent_session+0x56>
 80175cc:	b918      	cbnz	r0, 80175d6 <uxr_ping_agent_session+0x5e>
 80175ce:	2000      	movs	r0, #0
 80175d0:	b011      	add	sp, #68	@ 0x44
 80175d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175d6:	a808      	add	r0, sp, #32
 80175d8:	f7fc fe62 	bl	80142a0 <ucdr_buffer_length>
 80175dc:	4681      	mov	r9, r0
 80175de:	e00d      	b.n	80175fc <uxr_ping_agent_session+0x84>
 80175e0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80175e2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80175e6:	47a0      	blx	r4
 80175e8:	4604      	mov	r4, r0
 80175ea:	4641      	mov	r1, r8
 80175ec:	4630      	mov	r0, r6
 80175ee:	f000 fe73 	bl	80182d8 <uxr_run_session_until_pong>
 80175f2:	ea04 0c00 	and.w	ip, r4, r0
 80175f6:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80175fa:	d1e9      	bne.n	80175d0 <uxr_ping_agent_session+0x58>
 80175fc:	42af      	cmp	r7, r5
 80175fe:	464a      	mov	r2, r9
 8017600:	a904      	add	r1, sp, #16
 8017602:	f105 0501 	add.w	r5, r5, #1
 8017606:	d1eb      	bne.n	80175e0 <uxr_ping_agent_session+0x68>
 8017608:	e7e1      	b.n	80175ce <uxr_ping_agent_session+0x56>
 801760a:	bf00      	nop
 801760c:	0802355c 	.word	0x0802355c

08017610 <uxr_ping_agent_attempts>:
 8017610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017614:	ed2d 8b02 	vpush	{d8}
 8017618:	b0d3      	sub	sp, #332	@ 0x14c
 801761a:	4606      	mov	r6, r0
 801761c:	468a      	mov	sl, r1
 801761e:	2400      	movs	r4, #0
 8017620:	a90c      	add	r1, sp, #48	@ 0x30
 8017622:	a810      	add	r0, sp, #64	@ 0x40
 8017624:	9205      	str	r2, [sp, #20]
 8017626:	2210      	movs	r2, #16
 8017628:	f7fc fe0c 	bl	8014244 <ucdr_init_buffer>
 801762c:	4b53      	ldr	r3, [pc, #332]	@ (801777c <uxr_ping_agent_attempts+0x16c>)
 801762e:	2502      	movs	r5, #2
 8017630:	4622      	mov	r2, r4
 8017632:	881b      	ldrh	r3, [r3, #0]
 8017634:	2180      	movs	r1, #128	@ 0x80
 8017636:	a810      	add	r0, sp, #64	@ 0x40
 8017638:	9400      	str	r4, [sp, #0]
 801763a:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 801763e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8017642:	9521      	str	r5, [sp, #132]	@ 0x84
 8017644:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 8017648:	4623      	mov	r3, r4
 801764a:	f002 f969 	bl	8019920 <uxr_serialize_message_header>
 801764e:	4623      	mov	r3, r4
 8017650:	4629      	mov	r1, r5
 8017652:	2208      	movs	r2, #8
 8017654:	a810      	add	r0, sp, #64	@ 0x40
 8017656:	f001 ff67 	bl	8019528 <uxr_buffer_submessage_header>
 801765a:	4681      	mov	r9, r0
 801765c:	a920      	add	r1, sp, #128	@ 0x80
 801765e:	a810      	add	r0, sp, #64	@ 0x40
 8017660:	f003 f86a 	bl	801a738 <uxr_serialize_GET_INFO_Payload>
 8017664:	ea09 0000 	and.w	r0, r9, r0
 8017668:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
 801766c:	d107      	bne.n	801767e <uxr_ping_agent_attempts+0x6e>
 801766e:	f04f 0b00 	mov.w	fp, #0
 8017672:	4658      	mov	r0, fp
 8017674:	b053      	add	sp, #332	@ 0x14c
 8017676:	ecbd 8b02 	vpop	{d8}
 801767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767e:	a810      	add	r0, sp, #64	@ 0x40
 8017680:	9404      	str	r4, [sp, #16]
 8017682:	f7fc fe0d 	bl	80142a0 <ucdr_buffer_length>
 8017686:	ee08 0a10 	vmov	s16, r0
 801768a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801768e:	4293      	cmp	r3, r2
 8017690:	d0ed      	beq.n	801766e <uxr_ping_agent_attempts+0x5e>
 8017692:	ee18 2a10 	vmov	r2, s16
 8017696:	a90c      	add	r1, sp, #48	@ 0x30
 8017698:	4655      	mov	r5, sl
 801769a:	f04f 0800 	mov.w	r8, #0
 801769e:	e9d6 0300 	ldrd	r0, r3, [r6]
 80176a2:	4798      	blx	r3
 80176a4:	f001 ff86 	bl	80195b4 <uxr_millis>
 80176a8:	9003      	str	r0, [sp, #12]
 80176aa:	e00b      	b.n	80176c4 <uxr_ping_agent_attempts+0xb4>
 80176ac:	f001 ff82 	bl	80195b4 <uxr_millis>
 80176b0:	9b03      	ldr	r3, [sp, #12]
 80176b2:	1ac0      	subs	r0, r0, r3
 80176b4:	1a2d      	subs	r5, r5, r0
 80176b6:	f001 ff7d 	bl	80195b4 <uxr_millis>
 80176ba:	9003      	str	r0, [sp, #12]
 80176bc:	2d00      	cmp	r5, #0
 80176be:	dd30      	ble.n	8017722 <uxr_ping_agent_attempts+0x112>
 80176c0:	2f00      	cmp	r7, #0
 80176c2:	d02e      	beq.n	8017722 <uxr_ping_agent_attempts+0x112>
 80176c4:	4653      	mov	r3, sl
 80176c6:	aa09      	add	r2, sp, #36	@ 0x24
 80176c8:	a908      	add	r1, sp, #32
 80176ca:	6830      	ldr	r0, [r6, #0]
 80176cc:	68b4      	ldr	r4, [r6, #8]
 80176ce:	464f      	mov	r7, r9
 80176d0:	f8cd 8020 	str.w	r8, [sp, #32]
 80176d4:	47a0      	blx	r4
 80176d6:	4683      	mov	fp, r0
 80176d8:	2800      	cmp	r0, #0
 80176da:	d0e7      	beq.n	80176ac <uxr_ping_agent_attempts+0x9c>
 80176dc:	a818      	add	r0, sp, #96	@ 0x60
 80176de:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80176e2:	f7fc fdaf 	bl	8014244 <ucdr_init_buffer>
 80176e6:	ab07      	add	r3, sp, #28
 80176e8:	f10d 0219 	add.w	r2, sp, #25
 80176ec:	a918      	add	r1, sp, #96	@ 0x60
 80176ee:	a80a      	add	r0, sp, #40	@ 0x28
 80176f0:	e9cd 880a 	strd	r8, r8, [sp, #40]	@ 0x28
 80176f4:	f001 f8e4 	bl	80188c0 <uxr_read_session_header>
 80176f8:	22c8      	movs	r2, #200	@ 0xc8
 80176fa:	2100      	movs	r1, #0
 80176fc:	a820      	add	r0, sp, #128	@ 0x80
 80176fe:	f00a fe7b 	bl	80223f8 <memset>
 8017702:	a818      	add	r0, sp, #96	@ 0x60
 8017704:	f7fc fdd0 	bl	80142a8 <ucdr_buffer_remaining>
 8017708:	2804      	cmp	r0, #4
 801770a:	d816      	bhi.n	801773a <uxr_ping_agent_attempts+0x12a>
 801770c:	f89d 3135 	ldrb.w	r3, [sp, #309]	@ 0x135
 8017710:	2b00      	cmp	r3, #0
 8017712:	bf13      	iteet	ne
 8017714:	f04f 0b01 	movne.w	fp, #1
 8017718:	f04f 0b00 	moveq.w	fp, #0
 801771c:	2701      	moveq	r7, #1
 801771e:	2700      	movne	r7, #0
 8017720:	e7c4      	b.n	80176ac <uxr_ping_agent_attempts+0x9c>
 8017722:	9b04      	ldr	r3, [sp, #16]
 8017724:	3301      	adds	r3, #1
 8017726:	9304      	str	r3, [sp, #16]
 8017728:	f1bb 0f00 	cmp.w	fp, #0
 801772c:	d0ad      	beq.n	801768a <uxr_ping_agent_attempts+0x7a>
 801772e:	4658      	mov	r0, fp
 8017730:	b053      	add	sp, #332	@ 0x14c
 8017732:	ecbd 8b02 	vpop	{d8}
 8017736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801773a:	f10d 031e 	add.w	r3, sp, #30
 801773e:	f10d 021b 	add.w	r2, sp, #27
 8017742:	f10d 011a 	add.w	r1, sp, #26
 8017746:	a818      	add	r0, sp, #96	@ 0x60
 8017748:	f88d 801a 	strb.w	r8, [sp, #26]
 801774c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8017750:	f88d 801b 	strb.w	r8, [sp, #27]
 8017754:	f002 f936 	bl	80199c4 <uxr_deserialize_submessage_header>
 8017758:	a818      	add	r0, sp, #96	@ 0x60
 801775a:	f7fc fda5 	bl	80142a8 <ucdr_buffer_remaining>
 801775e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017762:	4298      	cmp	r0, r3
 8017764:	d3d2      	bcc.n	801770c <uxr_ping_agent_attempts+0xfc>
 8017766:	f89d 301a 	ldrb.w	r3, [sp, #26]
 801776a:	2b06      	cmp	r3, #6
 801776c:	d1ce      	bne.n	801770c <uxr_ping_agent_attempts+0xfc>
 801776e:	a918      	add	r1, sp, #96	@ 0x60
 8017770:	a820      	add	r0, sp, #128	@ 0x80
 8017772:	f88d 8135 	strb.w	r8, [sp, #309]	@ 0x135
 8017776:	f000 f999 	bl	8017aac <read_submessage_info>
 801777a:	e7c7      	b.n	801770c <uxr_ping_agent_attempts+0xfc>
 801777c:	0802355c 	.word	0x0802355c

08017780 <on_get_fragmentation_info>:
 8017780:	b500      	push	{lr}
 8017782:	b08b      	sub	sp, #44	@ 0x2c
 8017784:	4601      	mov	r1, r0
 8017786:	2204      	movs	r2, #4
 8017788:	a802      	add	r0, sp, #8
 801778a:	f7fc fd5b 	bl	8014244 <ucdr_init_buffer>
 801778e:	f10d 0305 	add.w	r3, sp, #5
 8017792:	f10d 0206 	add.w	r2, sp, #6
 8017796:	a901      	add	r1, sp, #4
 8017798:	a802      	add	r0, sp, #8
 801779a:	f001 fedf 	bl	801955c <uxr_read_submessage_header>
 801779e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80177a2:	2b0d      	cmp	r3, #13
 80177a4:	d003      	beq.n	80177ae <on_get_fragmentation_info+0x2e>
 80177a6:	2000      	movs	r0, #0
 80177a8:	b00b      	add	sp, #44	@ 0x2c
 80177aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80177ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80177b2:	f013 0f02 	tst.w	r3, #2
 80177b6:	bf14      	ite	ne
 80177b8:	2002      	movne	r0, #2
 80177ba:	2001      	moveq	r0, #1
 80177bc:	b00b      	add	sp, #44	@ 0x2c
 80177be:	f85d fb04 	ldr.w	pc, [sp], #4
 80177c2:	bf00      	nop

080177c4 <read_submessage_get_info>:
 80177c4:	b570      	push	{r4, r5, r6, lr}
 80177c6:	2500      	movs	r5, #0
 80177c8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80177cc:	460e      	mov	r6, r1
 80177ce:	4604      	mov	r4, r0
 80177d0:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80177d4:	4629      	mov	r1, r5
 80177d6:	a810      	add	r0, sp, #64	@ 0x40
 80177d8:	9503      	str	r5, [sp, #12]
 80177da:	9504      	str	r5, [sp, #16]
 80177dc:	f00a fe0c 	bl	80223f8 <memset>
 80177e0:	a903      	add	r1, sp, #12
 80177e2:	4630      	mov	r0, r6
 80177e4:	f002 ffbe 	bl	801a764 <uxr_deserialize_GET_INFO_Payload>
 80177e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80177ec:	4620      	mov	r0, r4
 80177ee:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80177f2:	f001 f8a5 	bl	8018940 <uxr_session_header_offset>
 80177f6:	462b      	mov	r3, r5
 80177f8:	220c      	movs	r2, #12
 80177fa:	a905      	add	r1, sp, #20
 80177fc:	9000      	str	r0, [sp, #0]
 80177fe:	a808      	add	r0, sp, #32
 8017800:	f7fc fd0e 	bl	8014220 <ucdr_init_buffer_origin_offset>
 8017804:	a910      	add	r1, sp, #64	@ 0x40
 8017806:	a808      	add	r0, sp, #32
 8017808:	f003 f820 	bl	801a84c <uxr_serialize_INFO_Payload>
 801780c:	9b08      	ldr	r3, [sp, #32]
 801780e:	462a      	mov	r2, r5
 8017810:	4629      	mov	r1, r5
 8017812:	4620      	mov	r0, r4
 8017814:	f001 f840 	bl	8018898 <uxr_stamp_session_header>
 8017818:	a808      	add	r0, sp, #32
 801781a:	f7fc fd41 	bl	80142a0 <ucdr_buffer_length>
 801781e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017820:	4602      	mov	r2, r0
 8017822:	a905      	add	r1, sp, #20
 8017824:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017828:	47a0      	blx	r4
 801782a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801782e:	bd70      	pop	{r4, r5, r6, pc}

08017830 <write_submessage_acknack.isra.0>:
 8017830:	b570      	push	{r4, r5, r6, lr}
 8017832:	b092      	sub	sp, #72	@ 0x48
 8017834:	4605      	mov	r5, r0
 8017836:	460e      	mov	r6, r1
 8017838:	4614      	mov	r4, r2
 801783a:	f001 f881 	bl	8018940 <uxr_session_header_offset>
 801783e:	a905      	add	r1, sp, #20
 8017840:	9000      	str	r0, [sp, #0]
 8017842:	2300      	movs	r3, #0
 8017844:	a80a      	add	r0, sp, #40	@ 0x28
 8017846:	2211      	movs	r2, #17
 8017848:	f7fc fcea 	bl	8014220 <ucdr_init_buffer_origin_offset>
 801784c:	2218      	movs	r2, #24
 801784e:	2300      	movs	r3, #0
 8017850:	210a      	movs	r1, #10
 8017852:	fb02 5404 	mla	r4, r2, r4, r5
 8017856:	a80a      	add	r0, sp, #40	@ 0x28
 8017858:	2205      	movs	r2, #5
 801785a:	3450      	adds	r4, #80	@ 0x50
 801785c:	f001 fe64 	bl	8019528 <uxr_buffer_submessage_header>
 8017860:	a903      	add	r1, sp, #12
 8017862:	4620      	mov	r0, r4
 8017864:	f008 fed0 	bl	8020608 <uxr_compute_acknack>
 8017868:	ba40      	rev16	r0, r0
 801786a:	a903      	add	r1, sp, #12
 801786c:	f88d 6010 	strb.w	r6, [sp, #16]
 8017870:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017874:	a80a      	add	r0, sp, #40	@ 0x28
 8017876:	f003 f85b 	bl	801a930 <uxr_serialize_ACKNACK_Payload>
 801787a:	2200      	movs	r2, #0
 801787c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801787e:	4628      	mov	r0, r5
 8017880:	4611      	mov	r1, r2
 8017882:	f001 f809 	bl	8018898 <uxr_stamp_session_header>
 8017886:	a80a      	add	r0, sp, #40	@ 0x28
 8017888:	f7fc fd0a 	bl	80142a0 <ucdr_buffer_length>
 801788c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801788e:	4602      	mov	r2, r0
 8017890:	a905      	add	r1, sp, #20
 8017892:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017896:	47a0      	blx	r4
 8017898:	b012      	add	sp, #72	@ 0x48
 801789a:	bd70      	pop	{r4, r5, r6, pc}
 801789c:	0000      	movs	r0, r0
	...

080178a0 <uxr_init_session>:
 80178a0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80178d8 <uxr_init_session+0x38>
 80178a4:	2300      	movs	r3, #0
 80178a6:	b510      	push	{r4, lr}
 80178a8:	4604      	mov	r4, r0
 80178aa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80178ae:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80178b2:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80178b6:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80178ba:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80178be:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80178c2:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80178c6:	2181      	movs	r1, #129	@ 0x81
 80178c8:	f000 ff4a 	bl	8018760 <uxr_init_session_info>
 80178cc:	f104 0008 	add.w	r0, r4, #8
 80178d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178d4:	f001 bd44 	b.w	8019360 <uxr_init_stream_storage>
	...

080178e0 <uxr_set_status_callback>:
 80178e0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80178e4:	4770      	bx	lr
 80178e6:	bf00      	nop

080178e8 <uxr_set_topic_callback>:
 80178e8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80178ec:	4770      	bx	lr
 80178ee:	bf00      	nop

080178f0 <uxr_set_request_callback>:
 80178f0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80178f4:	4770      	bx	lr
 80178f6:	bf00      	nop

080178f8 <uxr_set_reply_callback>:
 80178f8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80178fc:	4770      	bx	lr
 80178fe:	bf00      	nop

08017900 <uxr_create_output_best_effort_stream>:
 8017900:	b510      	push	{r4, lr}
 8017902:	4604      	mov	r4, r0
 8017904:	b084      	sub	sp, #16
 8017906:	e9cd 2100 	strd	r2, r1, [sp]
 801790a:	f001 f819 	bl	8018940 <uxr_session_header_offset>
 801790e:	4603      	mov	r3, r0
 8017910:	f104 0008 	add.w	r0, r4, #8
 8017914:	e9dd 2100 	ldrd	r2, r1, [sp]
 8017918:	b004      	add	sp, #16
 801791a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801791e:	f001 bd65 	b.w	80193ec <uxr_add_output_best_effort_buffer>
 8017922:	bf00      	nop

08017924 <uxr_create_output_reliable_stream>:
 8017924:	b530      	push	{r4, r5, lr}
 8017926:	b089      	sub	sp, #36	@ 0x24
 8017928:	4604      	mov	r4, r0
 801792a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801792e:	9303      	str	r3, [sp, #12]
 8017930:	f001 f806 	bl	8018940 <uxr_session_header_offset>
 8017934:	4605      	mov	r5, r0
 8017936:	9905      	ldr	r1, [sp, #20]
 8017938:	f104 0008 	add.w	r0, r4, #8
 801793c:	9500      	str	r5, [sp, #0]
 801793e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8017942:	f001 fd67 	bl	8019414 <uxr_add_output_reliable_buffer>
 8017946:	2200      	movs	r2, #0
 8017948:	fa5f fc80 	uxtb.w	ip, r0
 801794c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8017950:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8017954:	0e03      	lsrs	r3, r0, #24
 8017956:	f36c 0207 	bfi	r2, ip, #0, #8
 801795a:	f364 220f 	bfi	r2, r4, #8, #8
 801795e:	f361 4217 	bfi	r2, r1, #16, #8
 8017962:	f363 621f 	bfi	r2, r3, #24, #8
 8017966:	4610      	mov	r0, r2
 8017968:	b009      	add	sp, #36	@ 0x24
 801796a:	bd30      	pop	{r4, r5, pc}

0801796c <uxr_create_input_best_effort_stream>:
 801796c:	b082      	sub	sp, #8
 801796e:	3008      	adds	r0, #8
 8017970:	b002      	add	sp, #8
 8017972:	f001 bd69 	b.w	8019448 <uxr_add_input_best_effort_buffer>
 8017976:	bf00      	nop

08017978 <uxr_create_input_reliable_stream>:
 8017978:	b510      	push	{r4, lr}
 801797a:	4c0c      	ldr	r4, [pc, #48]	@ (80179ac <uxr_create_input_reliable_stream+0x34>)
 801797c:	b084      	sub	sp, #16
 801797e:	3008      	adds	r0, #8
 8017980:	9400      	str	r4, [sp, #0]
 8017982:	f001 fd77 	bl	8019474 <uxr_add_input_reliable_buffer>
 8017986:	2200      	movs	r2, #0
 8017988:	fa5f fe80 	uxtb.w	lr, r0
 801798c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8017990:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8017994:	0e03      	lsrs	r3, r0, #24
 8017996:	f36e 0207 	bfi	r2, lr, #0, #8
 801799a:	f36c 220f 	bfi	r2, ip, #8, #8
 801799e:	f361 4217 	bfi	r2, r1, #16, #8
 80179a2:	f363 621f 	bfi	r2, r3, #24, #8
 80179a6:	4610      	mov	r0, r2
 80179a8:	b004      	add	sp, #16
 80179aa:	bd10      	pop	{r4, pc}
 80179ac:	08017781 	.word	0x08017781

080179b0 <uxr_epoch_nanos>:
 80179b0:	b510      	push	{r4, lr}
 80179b2:	4604      	mov	r4, r0
 80179b4:	f001 fe1a 	bl	80195ec <uxr_nanos>
 80179b8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80179bc:	1ac0      	subs	r0, r0, r3
 80179be:	eb61 0102 	sbc.w	r1, r1, r2
 80179c2:	bd10      	pop	{r4, pc}

080179c4 <uxr_flash_output_streams>:
 80179c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179c8:	7e03      	ldrb	r3, [r0, #24]
 80179ca:	b084      	sub	sp, #16
 80179cc:	4604      	mov	r4, r0
 80179ce:	b1fb      	cbz	r3, 8017a10 <uxr_flash_output_streams+0x4c>
 80179d0:	f04f 0900 	mov.w	r9, #0
 80179d4:	f10d 0802 	add.w	r8, sp, #2
 80179d8:	af03      	add	r7, sp, #12
 80179da:	ae02      	add	r6, sp, #8
 80179dc:	4648      	mov	r0, r9
 80179de:	2201      	movs	r2, #1
 80179e0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80179e4:	4611      	mov	r1, r2
 80179e6:	3508      	adds	r5, #8
 80179e8:	f001 fc60 	bl	80192ac <uxr_stream_id>
 80179ec:	4684      	mov	ip, r0
 80179ee:	4643      	mov	r3, r8
 80179f0:	463a      	mov	r2, r7
 80179f2:	4631      	mov	r1, r6
 80179f4:	4628      	mov	r0, r5
 80179f6:	f8cd c004 	str.w	ip, [sp, #4]
 80179fa:	f008 fe8f 	bl	802071c <uxr_prepare_best_effort_buffer_to_send>
 80179fe:	2800      	cmp	r0, #0
 8017a00:	d13d      	bne.n	8017a7e <uxr_flash_output_streams+0xba>
 8017a02:	f109 0901 	add.w	r9, r9, #1
 8017a06:	7e23      	ldrb	r3, [r4, #24]
 8017a08:	fa5f f089 	uxtb.w	r0, r9
 8017a0c:	4283      	cmp	r3, r0
 8017a0e:	d8e6      	bhi.n	80179de <uxr_flash_output_streams+0x1a>
 8017a10:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8017a14:	b383      	cbz	r3, 8017a78 <uxr_flash_output_streams+0xb4>
 8017a16:	f04f 0900 	mov.w	r9, #0
 8017a1a:	f10d 0802 	add.w	r8, sp, #2
 8017a1e:	af03      	add	r7, sp, #12
 8017a20:	ae02      	add	r6, sp, #8
 8017a22:	4648      	mov	r0, r9
 8017a24:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8017a28:	2201      	movs	r2, #1
 8017a2a:	2102      	movs	r1, #2
 8017a2c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017a30:	f001 fc3c 	bl	80192ac <uxr_stream_id>
 8017a34:	9001      	str	r0, [sp, #4]
 8017a36:	3520      	adds	r5, #32
 8017a38:	e00c      	b.n	8017a54 <uxr_flash_output_streams+0x90>
 8017a3a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017a3e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017a42:	9b02      	ldr	r3, [sp, #8]
 8017a44:	f000 ff28 	bl	8018898 <uxr_stamp_session_header>
 8017a48:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017a4a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017a4e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8017a52:	47d0      	blx	sl
 8017a54:	4643      	mov	r3, r8
 8017a56:	463a      	mov	r2, r7
 8017a58:	4631      	mov	r1, r6
 8017a5a:	4628      	mov	r0, r5
 8017a5c:	f009 f880 	bl	8020b60 <uxr_prepare_next_reliable_buffer_to_send>
 8017a60:	4603      	mov	r3, r0
 8017a62:	4620      	mov	r0, r4
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d1e8      	bne.n	8017a3a <uxr_flash_output_streams+0x76>
 8017a68:	f109 0901 	add.w	r9, r9, #1
 8017a6c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8017a70:	fa5f f089 	uxtb.w	r0, r9
 8017a74:	4283      	cmp	r3, r0
 8017a76:	d8d5      	bhi.n	8017a24 <uxr_flash_output_streams+0x60>
 8017a78:	b004      	add	sp, #16
 8017a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a7e:	9b02      	ldr	r3, [sp, #8]
 8017a80:	4620      	mov	r0, r4
 8017a82:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017a86:	f109 0901 	add.w	r9, r9, #1
 8017a8a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017a8e:	f000 ff03 	bl	8018898 <uxr_stamp_session_header>
 8017a92:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017a94:	9a03      	ldr	r2, [sp, #12]
 8017a96:	685d      	ldr	r5, [r3, #4]
 8017a98:	6818      	ldr	r0, [r3, #0]
 8017a9a:	9902      	ldr	r1, [sp, #8]
 8017a9c:	47a8      	blx	r5
 8017a9e:	7e23      	ldrb	r3, [r4, #24]
 8017aa0:	fa5f f089 	uxtb.w	r0, r9
 8017aa4:	4283      	cmp	r3, r0
 8017aa6:	d89a      	bhi.n	80179de <uxr_flash_output_streams+0x1a>
 8017aa8:	e7b2      	b.n	8017a10 <uxr_flash_output_streams+0x4c>
 8017aaa:	bf00      	nop

08017aac <read_submessage_info>:
 8017aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ab0:	460d      	mov	r5, r1
 8017ab2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8017ab6:	4606      	mov	r6, r0
 8017ab8:	4669      	mov	r1, sp
 8017aba:	4628      	mov	r0, r5
 8017abc:	f002 fd4e 	bl	801a55c <uxr_deserialize_BaseObjectReply>
 8017ac0:	4604      	mov	r4, r0
 8017ac2:	a902      	add	r1, sp, #8
 8017ac4:	4628      	mov	r0, r5
 8017ac6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8017aca:	f7fb f939 	bl	8012d40 <ucdr_deserialize_bool>
 8017ace:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8017ad2:	4004      	ands	r4, r0
 8017ad4:	b2e4      	uxtb	r4, r4
 8017ad6:	b95b      	cbnz	r3, 8017af0 <read_submessage_info+0x44>
 8017ad8:	a987      	add	r1, sp, #540	@ 0x21c
 8017ada:	4628      	mov	r0, r5
 8017adc:	f7fb f930 	bl	8012d40 <ucdr_deserialize_bool>
 8017ae0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8017ae4:	4680      	mov	r8, r0
 8017ae6:	b94b      	cbnz	r3, 8017afc <read_submessage_info+0x50>
 8017ae8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8017aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017af0:	a903      	add	r1, sp, #12
 8017af2:	4628      	mov	r0, r5
 8017af4:	f002 fbde 	bl	801a2b4 <uxr_deserialize_ObjectVariant>
 8017af8:	4004      	ands	r4, r0
 8017afa:	e7ed      	b.n	8017ad8 <read_submessage_info+0x2c>
 8017afc:	a988      	add	r1, sp, #544	@ 0x220
 8017afe:	4628      	mov	r0, r5
 8017b00:	f7fb f94c 	bl	8012d9c <ucdr_deserialize_uint8_t>
 8017b04:	ea14 0f08 	tst.w	r4, r8
 8017b08:	d0ee      	beq.n	8017ae8 <read_submessage_info+0x3c>
 8017b0a:	2800      	cmp	r0, #0
 8017b0c:	d0ec      	beq.n	8017ae8 <read_submessage_info+0x3c>
 8017b0e:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8017b12:	2b0d      	cmp	r3, #13
 8017b14:	d1e8      	bne.n	8017ae8 <read_submessage_info+0x3c>
 8017b16:	a98a      	add	r1, sp, #552	@ 0x228
 8017b18:	4628      	mov	r0, r5
 8017b1a:	f7fb fee5 	bl	80138e8 <ucdr_deserialize_int16_t>
 8017b1e:	b138      	cbz	r0, 8017b30 <read_submessage_info+0x84>
 8017b20:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	dd06      	ble.n	8017b36 <read_submessage_info+0x8a>
 8017b28:	2f00      	cmp	r7, #0
 8017b2a:	bf14      	ite	ne
 8017b2c:	2001      	movne	r0, #1
 8017b2e:	2002      	moveq	r0, #2
 8017b30:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8017b34:	e7d8      	b.n	8017ae8 <read_submessage_info+0x3c>
 8017b36:	2000      	movs	r0, #0
 8017b38:	e7fa      	b.n	8017b30 <read_submessage_info+0x84>
 8017b3a:	bf00      	nop

08017b3c <read_submessage_list>:
 8017b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b40:	4604      	mov	r4, r0
 8017b42:	b097      	sub	sp, #92	@ 0x5c
 8017b44:	460d      	mov	r5, r1
 8017b46:	4ec1      	ldr	r6, [pc, #772]	@ (8017e4c <read_submessage_list+0x310>)
 8017b48:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b4a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017b4e:	aa0c      	add	r2, sp, #48	@ 0x30
 8017b50:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8017b54:	4628      	mov	r0, r5
 8017b56:	f001 fd01 	bl	801955c <uxr_read_submessage_header>
 8017b5a:	2800      	cmp	r0, #0
 8017b5c:	f000 8142 	beq.w	8017de4 <read_submessage_list+0x2a8>
 8017b60:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8017b64:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8017b68:	3b02      	subs	r3, #2
 8017b6a:	2b0d      	cmp	r3, #13
 8017b6c:	d8ed      	bhi.n	8017b4a <read_submessage_list+0xe>
 8017b6e:	a101      	add	r1, pc, #4	@ (adr r1, 8017b74 <read_submessage_list+0x38>)
 8017b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b74:	08017ddb 	.word	0x08017ddb
 8017b78:	08017b4b 	.word	0x08017b4b
 8017b7c:	08017dcb 	.word	0x08017dcb
 8017b80:	08017d69 	.word	0x08017d69
 8017b84:	08017d5f 	.word	0x08017d5f
 8017b88:	08017b4b 	.word	0x08017b4b
 8017b8c:	08017b4b 	.word	0x08017b4b
 8017b90:	08017cb5 	.word	0x08017cb5
 8017b94:	08017c47 	.word	0x08017c47
 8017b98:	08017c07 	.word	0x08017c07
 8017b9c:	08017b4b 	.word	0x08017b4b
 8017ba0:	08017b4b 	.word	0x08017b4b
 8017ba4:	08017b4b 	.word	0x08017b4b
 8017ba8:	08017bad 	.word	0x08017bad
 8017bac:	a910      	add	r1, sp, #64	@ 0x40
 8017bae:	4628      	mov	r0, r5
 8017bb0:	f002 ff20 	bl	801a9f4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8017bb4:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8017bb8:	f1b8 0f00 	cmp.w	r8, #0
 8017bbc:	f000 811a 	beq.w	8017df4 <read_submessage_list+0x2b8>
 8017bc0:	f001 fd14 	bl	80195ec <uxr_nanos>
 8017bc4:	4602      	mov	r2, r0
 8017bc6:	460b      	mov	r3, r1
 8017bc8:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8017bcc:	2100      	movs	r1, #0
 8017bce:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017bd0:	9006      	str	r0, [sp, #24]
 8017bd2:	468c      	mov	ip, r1
 8017bd4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8017bd6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017bda:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017bdc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8017be0:	468c      	mov	ip, r1
 8017be2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017be4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017be8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8017bec:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8017bf0:	fbc7 0106 	smlal	r0, r1, r7, r6
 8017bf4:	e9cd 0100 	strd	r0, r1, [sp]
 8017bf8:	4620      	mov	r0, r4
 8017bfa:	47c0      	blx	r8
 8017bfc:	f04f 0301 	mov.w	r3, #1
 8017c00:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8017c04:	e7a1      	b.n	8017b4a <read_submessage_list+0xe>
 8017c06:	a910      	add	r1, sp, #64	@ 0x40
 8017c08:	4628      	mov	r0, r5
 8017c0a:	f002 fed1 	bl	801a9b0 <uxr_deserialize_HEARTBEAT_Payload>
 8017c0e:	2100      	movs	r1, #0
 8017c10:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017c14:	f001 fb78 	bl	8019308 <uxr_stream_id_from_raw>
 8017c18:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8017c1c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017c1e:	f104 0008 	add.w	r0, r4, #8
 8017c22:	4641      	mov	r1, r8
 8017c24:	f001 fc5e 	bl	80194e4 <uxr_get_input_reliable_stream>
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	d08e      	beq.n	8017b4a <read_submessage_list+0xe>
 8017c2c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8017c30:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8017c34:	f008 fcdc 	bl	80205f0 <uxr_process_heartbeat>
 8017c38:	4642      	mov	r2, r8
 8017c3a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8017c3e:	4620      	mov	r0, r4
 8017c40:	f7ff fdf6 	bl	8017830 <write_submessage_acknack.isra.0>
 8017c44:	e781      	b.n	8017b4a <read_submessage_list+0xe>
 8017c46:	a910      	add	r1, sp, #64	@ 0x40
 8017c48:	4628      	mov	r0, r5
 8017c4a:	f002 fe89 	bl	801a960 <uxr_deserialize_ACKNACK_Payload>
 8017c4e:	2100      	movs	r1, #0
 8017c50:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017c54:	f001 fb58 	bl	8019308 <uxr_stream_id_from_raw>
 8017c58:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8017c5c:	900d      	str	r0, [sp, #52]	@ 0x34
 8017c5e:	f104 0008 	add.w	r0, r4, #8
 8017c62:	f001 fc29 	bl	80194b8 <uxr_get_output_reliable_stream>
 8017c66:	4680      	mov	r8, r0
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	f43f af6e 	beq.w	8017b4a <read_submessage_list+0xe>
 8017c6e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8017c72:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017c76:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8017c7a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8017c7e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8017c82:	b289      	uxth	r1, r1
 8017c84:	f009 f814 	bl	8020cb0 <uxr_process_acknack>
 8017c88:	4640      	mov	r0, r8
 8017c8a:	f008 ffd5 	bl	8020c38 <uxr_begin_output_nack_buffer_it>
 8017c8e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8017c92:	e005      	b.n	8017ca0 <read_submessage_list+0x164>
 8017c94:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017c96:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8017c9a:	e9d3 0900 	ldrd	r0, r9, [r3]
 8017c9e:	47c8      	blx	r9
 8017ca0:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8017ca4:	aa0f      	add	r2, sp, #60	@ 0x3c
 8017ca6:	4651      	mov	r1, sl
 8017ca8:	4640      	mov	r0, r8
 8017caa:	f008 ffc7 	bl	8020c3c <uxr_next_reliable_nack_buffer_to_send>
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	d1f0      	bne.n	8017c94 <read_submessage_list+0x158>
 8017cb2:	e74a      	b.n	8017b4a <read_submessage_list+0xe>
 8017cb4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8017cb8:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017cbc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8017cc0:	4628      	mov	r0, r5
 8017cc2:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8017cc6:	4651      	mov	r1, sl
 8017cc8:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8017ccc:	f1a8 0804 	sub.w	r8, r8, #4
 8017cd0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8017cd4:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8017cd8:	fa1f f888 	uxth.w	r8, r8
 8017cdc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017ce0:	f009 090e 	and.w	r9, r9, #14
 8017ce4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8017ce8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8017cec:	f002 fb84 	bl	801a3f8 <uxr_deserialize_BaseObjectRequest>
 8017cf0:	4650      	mov	r0, sl
 8017cf2:	a90f      	add	r1, sp, #60	@ 0x3c
 8017cf4:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017cf8:	f000 fe4a 	bl	8018990 <uxr_parse_base_object_request>
 8017cfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017cfe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8017d02:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8017d06:	9110      	str	r1, [sp, #64]	@ 0x40
 8017d08:	f1bb 0f00 	cmp.w	fp, #0
 8017d0c:	d006      	beq.n	8017d1c <read_submessage_list+0x1e0>
 8017d0e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017d12:	4652      	mov	r2, sl
 8017d14:	4620      	mov	r0, r4
 8017d16:	9300      	str	r3, [sp, #0]
 8017d18:	2300      	movs	r3, #0
 8017d1a:	47d8      	blx	fp
 8017d1c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017d1e:	b182      	cbz	r2, 8017d42 <read_submessage_list+0x206>
 8017d20:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017d22:	f04f 0c00 	mov.w	ip, #0
 8017d26:	3902      	subs	r1, #2
 8017d28:	e003      	b.n	8017d32 <read_submessage_list+0x1f6>
 8017d2a:	f10c 0c01 	add.w	ip, ip, #1
 8017d2e:	4594      	cmp	ip, r2
 8017d30:	d007      	beq.n	8017d42 <read_submessage_list+0x206>
 8017d32:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8017d36:	4553      	cmp	r3, sl
 8017d38:	d1f7      	bne.n	8017d2a <read_submessage_list+0x1ee>
 8017d3a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	f803 200c 	strb.w	r2, [r3, ip]
 8017d42:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8017d46:	464b      	mov	r3, r9
 8017d48:	4642      	mov	r2, r8
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	9102      	str	r1, [sp, #8]
 8017d4e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017d50:	9101      	str	r1, [sp, #4]
 8017d52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017d54:	9100      	str	r1, [sp, #0]
 8017d56:	4629      	mov	r1, r5
 8017d58:	f009 f86c 	bl	8020e34 <read_submessage_format>
 8017d5c:	e6f5      	b.n	8017b4a <read_submessage_list+0xe>
 8017d5e:	4629      	mov	r1, r5
 8017d60:	4620      	mov	r0, r4
 8017d62:	f7ff fea3 	bl	8017aac <read_submessage_info>
 8017d66:	e6f0      	b.n	8017b4a <read_submessage_list+0xe>
 8017d68:	2a00      	cmp	r2, #0
 8017d6a:	d03e      	beq.n	8017dea <read_submessage_list+0x2ae>
 8017d6c:	a910      	add	r1, sp, #64	@ 0x40
 8017d6e:	4628      	mov	r0, r5
 8017d70:	f002 fd4e 	bl	801a810 <uxr_deserialize_STATUS_Payload>
 8017d74:	a90e      	add	r1, sp, #56	@ 0x38
 8017d76:	aa0d      	add	r2, sp, #52	@ 0x34
 8017d78:	a810      	add	r0, sp, #64	@ 0x40
 8017d7a:	f000 fe09 	bl	8018990 <uxr_parse_base_object_request>
 8017d7e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017d80:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8017d84:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8017d88:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8017d8c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017d8e:	f1ba 0f00 	cmp.w	sl, #0
 8017d92:	d006      	beq.n	8017da2 <read_submessage_list+0x266>
 8017d94:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017d98:	4642      	mov	r2, r8
 8017d9a:	4620      	mov	r0, r4
 8017d9c:	9300      	str	r3, [sp, #0]
 8017d9e:	464b      	mov	r3, r9
 8017da0:	47d0      	blx	sl
 8017da2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017da4:	2a00      	cmp	r2, #0
 8017da6:	f43f aed0 	beq.w	8017b4a <read_submessage_list+0xe>
 8017daa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8017dac:	2100      	movs	r1, #0
 8017dae:	3802      	subs	r0, #2
 8017db0:	e003      	b.n	8017dba <read_submessage_list+0x27e>
 8017db2:	3101      	adds	r1, #1
 8017db4:	4291      	cmp	r1, r2
 8017db6:	f43f aec8 	beq.w	8017b4a <read_submessage_list+0xe>
 8017dba:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8017dbe:	4543      	cmp	r3, r8
 8017dc0:	d1f7      	bne.n	8017db2 <read_submessage_list+0x276>
 8017dc2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017dc4:	f803 9001 	strb.w	r9, [r3, r1]
 8017dc8:	e6bf      	b.n	8017b4a <read_submessage_list+0xe>
 8017dca:	2a00      	cmp	r2, #0
 8017dcc:	f47f aebd 	bne.w	8017b4a <read_submessage_list+0xe>
 8017dd0:	4629      	mov	r1, r5
 8017dd2:	4620      	mov	r0, r4
 8017dd4:	f000 fd20 	bl	8018818 <uxr_read_create_session_status>
 8017dd8:	e6b7      	b.n	8017b4a <read_submessage_list+0xe>
 8017dda:	4629      	mov	r1, r5
 8017ddc:	4620      	mov	r0, r4
 8017dde:	f7ff fcf1 	bl	80177c4 <read_submessage_get_info>
 8017de2:	e6b2      	b.n	8017b4a <read_submessage_list+0xe>
 8017de4:	b017      	add	sp, #92	@ 0x5c
 8017de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dea:	4629      	mov	r1, r5
 8017dec:	4620      	mov	r0, r4
 8017dee:	f000 fd21 	bl	8018834 <uxr_read_delete_session_status>
 8017df2:	e6aa      	b.n	8017b4a <read_submessage_list+0xe>
 8017df4:	f001 fbfa 	bl	80195ec <uxr_nanos>
 8017df8:	4642      	mov	r2, r8
 8017dfa:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017dfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017dfe:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017e02:	1818      	adds	r0, r3, r0
 8017e04:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017e06:	eb42 0101 	adc.w	r1, r2, r1
 8017e0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017e0c:	4642      	mov	r2, r8
 8017e0e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017e12:	469c      	mov	ip, r3
 8017e14:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8017e18:	fbc3 7806 	smlal	r7, r8, r3, r6
 8017e1c:	4643      	mov	r3, r8
 8017e1e:	eb1c 0c07 	adds.w	ip, ip, r7
 8017e22:	eb42 0203 	adc.w	r2, r2, r3
 8017e26:	ebb0 030c 	subs.w	r3, r0, ip
 8017e2a:	eb61 0202 	sbc.w	r2, r1, r2
 8017e2e:	2a00      	cmp	r2, #0
 8017e30:	db08      	blt.n	8017e44 <read_submessage_list+0x308>
 8017e32:	085b      	lsrs	r3, r3, #1
 8017e34:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8017e38:	1052      	asrs	r2, r2, #1
 8017e3a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8017e3e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8017e42:	e6db      	b.n	8017bfc <read_submessage_list+0xc0>
 8017e44:	3301      	adds	r3, #1
 8017e46:	f142 0200 	adc.w	r2, r2, #0
 8017e4a:	e7f2      	b.n	8017e32 <read_submessage_list+0x2f6>
 8017e4c:	3b9aca00 	.word	0x3b9aca00

08017e50 <listen_message_reliably>:
 8017e50:	1e0b      	subs	r3, r1, #0
 8017e52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e56:	bfb8      	it	lt
 8017e58:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8017e5c:	b09d      	sub	sp, #116	@ 0x74
 8017e5e:	4680      	mov	r8, r0
 8017e60:	9305      	str	r3, [sp, #20]
 8017e62:	f001 fba7 	bl	80195b4 <uxr_millis>
 8017e66:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8017e6a:	4681      	mov	r9, r0
 8017e6c:	2a00      	cmp	r2, #0
 8017e6e:	f000 809a 	beq.w	8017fa6 <listen_message_reliably+0x156>
 8017e72:	2600      	movs	r6, #0
 8017e74:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e78:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8017e7c:	460f      	mov	r7, r1
 8017e7e:	4630      	mov	r0, r6
 8017e80:	9303      	str	r3, [sp, #12]
 8017e82:	e00e      	b.n	8017ea2 <listen_message_reliably+0x52>
 8017e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017e86:	3601      	adds	r6, #1
 8017e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017e8a:	455a      	cmp	r2, fp
 8017e8c:	9903      	ldr	r1, [sp, #12]
 8017e8e:	b2f0      	uxtb	r0, r6
 8017e90:	eb73 0101 	sbcs.w	r1, r3, r1
 8017e94:	da01      	bge.n	8017e9a <listen_message_reliably+0x4a>
 8017e96:	4693      	mov	fp, r2
 8017e98:	9303      	str	r3, [sp, #12]
 8017e9a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017e9e:	4283      	cmp	r3, r0
 8017ea0:	d95f      	bls.n	8017f62 <listen_message_reliably+0x112>
 8017ea2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8017ea6:	2102      	movs	r1, #2
 8017ea8:	2201      	movs	r2, #1
 8017eaa:	00e4      	lsls	r4, r4, #3
 8017eac:	f001 f9fe 	bl	80192ac <uxr_stream_id>
 8017eb0:	4601      	mov	r1, r0
 8017eb2:	f104 0520 	add.w	r5, r4, #32
 8017eb6:	463b      	mov	r3, r7
 8017eb8:	464a      	mov	r2, r9
 8017eba:	9109      	str	r1, [sp, #36]	@ 0x24
 8017ebc:	4445      	add	r5, r8
 8017ebe:	4628      	mov	r0, r5
 8017ec0:	f008 fe8e 	bl	8020be0 <uxr_update_output_stream_heartbeat_timestamp>
 8017ec4:	eb08 0304 	add.w	r3, r8, r4
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	d0db      	beq.n	8017e84 <listen_message_reliably+0x34>
 8017ecc:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8017ed0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8017ed4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017ed8:	4640      	mov	r0, r8
 8017eda:	3501      	adds	r5, #1
 8017edc:	4444      	add	r4, r8
 8017ede:	9304      	str	r3, [sp, #16]
 8017ee0:	f000 fd2e 	bl	8018940 <uxr_session_header_offset>
 8017ee4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017ee8:	2300      	movs	r3, #0
 8017eea:	2211      	movs	r2, #17
 8017eec:	a90c      	add	r1, sp, #48	@ 0x30
 8017eee:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8017ef2:	9000      	str	r0, [sp, #0]
 8017ef4:	4650      	mov	r0, sl
 8017ef6:	3601      	adds	r6, #1
 8017ef8:	f7fc f992 	bl	8014220 <ucdr_init_buffer_origin_offset>
 8017efc:	2300      	movs	r3, #0
 8017efe:	2205      	movs	r2, #5
 8017f00:	210b      	movs	r1, #11
 8017f02:	4650      	mov	r0, sl
 8017f04:	f001 fb10 	bl	8019528 <uxr_buffer_submessage_header>
 8017f08:	2101      	movs	r1, #1
 8017f0a:	8968      	ldrh	r0, [r5, #10]
 8017f0c:	f009 f85c 	bl	8020fc8 <uxr_seq_num_add>
 8017f10:	892b      	ldrh	r3, [r5, #8]
 8017f12:	4602      	mov	r2, r0
 8017f14:	a90a      	add	r1, sp, #40	@ 0x28
 8017f16:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017f1a:	4650      	mov	r0, sl
 8017f1c:	9b04      	ldr	r3, [sp, #16]
 8017f1e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017f22:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017f26:	f002 fd2f 	bl	801a988 <uxr_serialize_HEARTBEAT_Payload>
 8017f2a:	2200      	movs	r2, #0
 8017f2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017f2e:	4640      	mov	r0, r8
 8017f30:	4611      	mov	r1, r2
 8017f32:	f000 fcb1 	bl	8018898 <uxr_stamp_session_header>
 8017f36:	4650      	mov	r0, sl
 8017f38:	f7fc f9b2 	bl	80142a0 <ucdr_buffer_length>
 8017f3c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8017f40:	4602      	mov	r2, r0
 8017f42:	a90c      	add	r1, sp, #48	@ 0x30
 8017f44:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017f48:	47a8      	blx	r5
 8017f4a:	9903      	ldr	r1, [sp, #12]
 8017f4c:	b2f0      	uxtb	r0, r6
 8017f4e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8017f52:	455a      	cmp	r2, fp
 8017f54:	eb73 0101 	sbcs.w	r1, r3, r1
 8017f58:	db9d      	blt.n	8017e96 <listen_message_reliably+0x46>
 8017f5a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017f5e:	4283      	cmp	r3, r0
 8017f60:	d89f      	bhi.n	8017ea2 <listen_message_reliably+0x52>
 8017f62:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017f66:	9a03      	ldr	r2, [sp, #12]
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	bf08      	it	eq
 8017f6c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8017f70:	d019      	beq.n	8017fa6 <listen_message_reliably+0x156>
 8017f72:	ebab 0309 	sub.w	r3, fp, r9
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	9d05      	ldr	r5, [sp, #20]
 8017f7a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8017f7e:	aa08      	add	r2, sp, #32
 8017f80:	bf08      	it	eq
 8017f82:	2301      	moveq	r3, #1
 8017f84:	a907      	add	r1, sp, #28
 8017f86:	6884      	ldr	r4, [r0, #8]
 8017f88:	429d      	cmp	r5, r3
 8017f8a:	6800      	ldr	r0, [r0, #0]
 8017f8c:	bfa8      	it	ge
 8017f8e:	461d      	movge	r5, r3
 8017f90:	462b      	mov	r3, r5
 8017f92:	47a0      	blx	r4
 8017f94:	b948      	cbnz	r0, 8017faa <listen_message_reliably+0x15a>
 8017f96:	9b05      	ldr	r3, [sp, #20]
 8017f98:	1b5b      	subs	r3, r3, r5
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	9305      	str	r3, [sp, #20]
 8017f9e:	f73f af60 	bgt.w	8017e62 <listen_message_reliably+0x12>
 8017fa2:	4604      	mov	r4, r0
 8017fa4:	e012      	b.n	8017fcc <listen_message_reliably+0x17c>
 8017fa6:	9b05      	ldr	r3, [sp, #20]
 8017fa8:	e7e5      	b.n	8017f76 <listen_message_reliably+0x126>
 8017faa:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017fae:	4604      	mov	r4, r0
 8017fb0:	2500      	movs	r5, #0
 8017fb2:	a80c      	add	r0, sp, #48	@ 0x30
 8017fb4:	f7fc f946 	bl	8014244 <ucdr_init_buffer>
 8017fb8:	f10d 031a 	add.w	r3, sp, #26
 8017fbc:	aa06      	add	r2, sp, #24
 8017fbe:	a90c      	add	r1, sp, #48	@ 0x30
 8017fc0:	4640      	mov	r0, r8
 8017fc2:	f88d 5018 	strb.w	r5, [sp, #24]
 8017fc6:	f000 fc7b 	bl	80188c0 <uxr_read_session_header>
 8017fca:	b918      	cbnz	r0, 8017fd4 <listen_message_reliably+0x184>
 8017fcc:	4620      	mov	r0, r4
 8017fce:	b01d      	add	sp, #116	@ 0x74
 8017fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fd4:	4629      	mov	r1, r5
 8017fd6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017fda:	f001 f995 	bl	8019308 <uxr_stream_id_from_raw>
 8017fde:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8017fe2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8017fe6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8017fea:	2e01      	cmp	r6, #1
 8017fec:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8017ff0:	d04b      	beq.n	801808a <listen_message_reliably+0x23a>
 8017ff2:	2e02      	cmp	r6, #2
 8017ff4:	d00f      	beq.n	8018016 <listen_message_reliably+0x1c6>
 8017ff6:	2e00      	cmp	r6, #0
 8017ff8:	d1e8      	bne.n	8017fcc <listen_message_reliably+0x17c>
 8017ffa:	4631      	mov	r1, r6
 8017ffc:	4630      	mov	r0, r6
 8017ffe:	f001 f983 	bl	8019308 <uxr_stream_id_from_raw>
 8018002:	4602      	mov	r2, r0
 8018004:	a90c      	add	r1, sp, #48	@ 0x30
 8018006:	4640      	mov	r0, r8
 8018008:	920a      	str	r2, [sp, #40]	@ 0x28
 801800a:	f7ff fd97 	bl	8017b3c <read_submessage_list>
 801800e:	4620      	mov	r0, r4
 8018010:	b01d      	add	sp, #116	@ 0x74
 8018012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018016:	4629      	mov	r1, r5
 8018018:	f108 0008 	add.w	r0, r8, #8
 801801c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8018020:	f001 fa60 	bl	80194e4 <uxr_get_input_reliable_stream>
 8018024:	4607      	mov	r7, r0
 8018026:	b338      	cbz	r0, 8018078 <listen_message_reliably+0x228>
 8018028:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801802a:	a80c      	add	r0, sp, #48	@ 0x30
 801802c:	9203      	str	r2, [sp, #12]
 801802e:	f7fc f93b 	bl	80142a8 <ucdr_buffer_remaining>
 8018032:	4603      	mov	r3, r0
 8018034:	f10d 0019 	add.w	r0, sp, #25
 8018038:	9a03      	ldr	r2, [sp, #12]
 801803a:	4651      	mov	r1, sl
 801803c:	9000      	str	r0, [sp, #0]
 801803e:	4638      	mov	r0, r7
 8018040:	f008 f9da 	bl	80203f8 <uxr_receive_reliable_message>
 8018044:	b1c0      	cbz	r0, 8018078 <listen_message_reliably+0x228>
 8018046:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801804a:	b393      	cbz	r3, 80180b2 <listen_message_reliably+0x262>
 801804c:	ae14      	add	r6, sp, #80	@ 0x50
 801804e:	f04f 0a02 	mov.w	sl, #2
 8018052:	e00a      	b.n	801806a <listen_message_reliably+0x21a>
 8018054:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8018058:	4631      	mov	r1, r6
 801805a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801805e:	4640      	mov	r0, r8
 8018060:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8018064:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018066:	f7ff fd69 	bl	8017b3c <read_submessage_list>
 801806a:	2204      	movs	r2, #4
 801806c:	4631      	mov	r1, r6
 801806e:	4638      	mov	r0, r7
 8018070:	f008 fa44 	bl	80204fc <uxr_next_input_reliable_buffer_available>
 8018074:	2800      	cmp	r0, #0
 8018076:	d1ed      	bne.n	8018054 <listen_message_reliably+0x204>
 8018078:	4640      	mov	r0, r8
 801807a:	462a      	mov	r2, r5
 801807c:	4649      	mov	r1, r9
 801807e:	f7ff fbd7 	bl	8017830 <write_submessage_acknack.isra.0>
 8018082:	4620      	mov	r0, r4
 8018084:	b01d      	add	sp, #116	@ 0x74
 8018086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801808a:	4629      	mov	r1, r5
 801808c:	f108 0008 	add.w	r0, r8, #8
 8018090:	f001 fa1e 	bl	80194d0 <uxr_get_input_best_effort_stream>
 8018094:	2800      	cmp	r0, #0
 8018096:	d099      	beq.n	8017fcc <listen_message_reliably+0x17c>
 8018098:	4651      	mov	r1, sl
 801809a:	f008 f923 	bl	80202e4 <uxr_receive_best_effort_message>
 801809e:	2800      	cmp	r0, #0
 80180a0:	d094      	beq.n	8017fcc <listen_message_reliably+0x17c>
 80180a2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80180a6:	a90c      	add	r1, sp, #48	@ 0x30
 80180a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80180aa:	4640      	mov	r0, r8
 80180ac:	f7ff fd46 	bl	8017b3c <read_submessage_list>
 80180b0:	e78c      	b.n	8017fcc <listen_message_reliably+0x17c>
 80180b2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80180b6:	a90c      	add	r1, sp, #48	@ 0x30
 80180b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80180ba:	4640      	mov	r0, r8
 80180bc:	f7ff fd3e 	bl	8017b3c <read_submessage_list>
 80180c0:	e7c4      	b.n	801804c <listen_message_reliably+0x1fc>
 80180c2:	bf00      	nop

080180c4 <uxr_run_session_timeout>:
 80180c4:	b570      	push	{r4, r5, r6, lr}
 80180c6:	4604      	mov	r4, r0
 80180c8:	460d      	mov	r5, r1
 80180ca:	f001 fa73 	bl	80195b4 <uxr_millis>
 80180ce:	4606      	mov	r6, r0
 80180d0:	4620      	mov	r0, r4
 80180d2:	f7ff fc77 	bl	80179c4 <uxr_flash_output_streams>
 80180d6:	4629      	mov	r1, r5
 80180d8:	4620      	mov	r0, r4
 80180da:	f7ff feb9 	bl	8017e50 <listen_message_reliably>
 80180de:	f001 fa69 	bl	80195b4 <uxr_millis>
 80180e2:	1b83      	subs	r3, r0, r6
 80180e4:	1ae9      	subs	r1, r5, r3
 80180e6:	2900      	cmp	r1, #0
 80180e8:	dcf6      	bgt.n	80180d8 <uxr_run_session_timeout+0x14>
 80180ea:	f104 0008 	add.w	r0, r4, #8
 80180ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180f2:	f001 ba03 	b.w	80194fc <uxr_output_streams_confirmed>
 80180f6:	bf00      	nop

080180f8 <uxr_run_session_until_data>:
 80180f8:	b570      	push	{r4, r5, r6, lr}
 80180fa:	4604      	mov	r4, r0
 80180fc:	460d      	mov	r5, r1
 80180fe:	f001 fa59 	bl	80195b4 <uxr_millis>
 8018102:	4606      	mov	r6, r0
 8018104:	4620      	mov	r0, r4
 8018106:	f7ff fc5d 	bl	80179c4 <uxr_flash_output_streams>
 801810a:	2300      	movs	r3, #0
 801810c:	4629      	mov	r1, r5
 801810e:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8018112:	e005      	b.n	8018120 <uxr_run_session_until_data+0x28>
 8018114:	f001 fa4e 	bl	80195b4 <uxr_millis>
 8018118:	1b83      	subs	r3, r0, r6
 801811a:	1ae9      	subs	r1, r5, r3
 801811c:	2900      	cmp	r1, #0
 801811e:	dd07      	ble.n	8018130 <uxr_run_session_until_data+0x38>
 8018120:	4620      	mov	r0, r4
 8018122:	f7ff fe95 	bl	8017e50 <listen_message_reliably>
 8018126:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801812a:	2800      	cmp	r0, #0
 801812c:	d0f2      	beq.n	8018114 <uxr_run_session_until_data+0x1c>
 801812e:	bd70      	pop	{r4, r5, r6, pc}
 8018130:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8018134:	bd70      	pop	{r4, r5, r6, pc}
 8018136:	bf00      	nop

08018138 <uxr_run_session_until_confirm_delivery>:
 8018138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801813c:	4606      	mov	r6, r0
 801813e:	460d      	mov	r5, r1
 8018140:	f001 fa38 	bl	80195b4 <uxr_millis>
 8018144:	4607      	mov	r7, r0
 8018146:	4630      	mov	r0, r6
 8018148:	f106 0808 	add.w	r8, r6, #8
 801814c:	f7ff fc3a 	bl	80179c4 <uxr_flash_output_streams>
 8018150:	2d00      	cmp	r5, #0
 8018152:	db10      	blt.n	8018176 <uxr_run_session_until_confirm_delivery+0x3e>
 8018154:	462c      	mov	r4, r5
 8018156:	e006      	b.n	8018166 <uxr_run_session_until_confirm_delivery+0x2e>
 8018158:	f7ff fe7a 	bl	8017e50 <listen_message_reliably>
 801815c:	f001 fa2a 	bl	80195b4 <uxr_millis>
 8018160:	1bc3      	subs	r3, r0, r7
 8018162:	1aec      	subs	r4, r5, r3
 8018164:	d407      	bmi.n	8018176 <uxr_run_session_until_confirm_delivery+0x3e>
 8018166:	4640      	mov	r0, r8
 8018168:	f001 f9c8 	bl	80194fc <uxr_output_streams_confirmed>
 801816c:	4603      	mov	r3, r0
 801816e:	4621      	mov	r1, r4
 8018170:	4630      	mov	r0, r6
 8018172:	2b00      	cmp	r3, #0
 8018174:	d0f0      	beq.n	8018158 <uxr_run_session_until_confirm_delivery+0x20>
 8018176:	4640      	mov	r0, r8
 8018178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801817c:	f001 b9be 	b.w	80194fc <uxr_output_streams_confirmed>

08018180 <uxr_run_session_until_all_status>:
 8018180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018184:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8018188:	4606      	mov	r6, r0
 801818a:	4688      	mov	r8, r1
 801818c:	4692      	mov	sl, r2
 801818e:	461f      	mov	r7, r3
 8018190:	f7ff fc18 	bl	80179c4 <uxr_flash_output_streams>
 8018194:	f1bb 0f00 	cmp.w	fp, #0
 8018198:	d004      	beq.n	80181a4 <uxr_run_session_until_all_status+0x24>
 801819a:	465a      	mov	r2, fp
 801819c:	21ff      	movs	r1, #255	@ 0xff
 801819e:	4638      	mov	r0, r7
 80181a0:	f00a f92a 	bl	80223f8 <memset>
 80181a4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80181a8:	1e7d      	subs	r5, r7, #1
 80181aa:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80181ae:	f001 fa01 	bl	80195b4 <uxr_millis>
 80181b2:	4641      	mov	r1, r8
 80181b4:	4681      	mov	r9, r0
 80181b6:	4630      	mov	r0, r6
 80181b8:	f7ff fe4a 	bl	8017e50 <listen_message_reliably>
 80181bc:	f001 f9fa 	bl	80195b4 <uxr_millis>
 80181c0:	eba0 0009 	sub.w	r0, r0, r9
 80181c4:	eba8 0100 	sub.w	r1, r8, r0
 80181c8:	f1bb 0f00 	cmp.w	fp, #0
 80181cc:	d029      	beq.n	8018222 <uxr_run_session_until_all_status+0xa2>
 80181ce:	46ae      	mov	lr, r5
 80181d0:	f04f 0c00 	mov.w	ip, #0
 80181d4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80181d8:	2cff      	cmp	r4, #255	@ 0xff
 80181da:	d015      	beq.n	8018208 <uxr_run_session_until_all_status+0x88>
 80181dc:	f10c 0c01 	add.w	ip, ip, #1
 80181e0:	45e3      	cmp	fp, ip
 80181e2:	d8f7      	bhi.n	80181d4 <uxr_run_session_until_all_status+0x54>
 80181e4:	2300      	movs	r3, #0
 80181e6:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80181e8:	e000      	b.n	80181ec <uxr_run_session_until_all_status+0x6c>
 80181ea:	b158      	cbz	r0, 8018204 <uxr_run_session_until_all_status+0x84>
 80181ec:	462b      	mov	r3, r5
 80181ee:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80181f2:	3302      	adds	r3, #2
 80181f4:	2801      	cmp	r0, #1
 80181f6:	eba3 0307 	sub.w	r3, r3, r7
 80181fa:	bf8c      	ite	hi
 80181fc:	2000      	movhi	r0, #0
 80181fe:	2001      	movls	r0, #1
 8018200:	459b      	cmp	fp, r3
 8018202:	d8f2      	bhi.n	80181ea <uxr_run_session_until_all_status+0x6a>
 8018204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018208:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801820c:	f10c 0c01 	add.w	ip, ip, #1
 8018210:	45dc      	cmp	ip, fp
 8018212:	d201      	bcs.n	8018218 <uxr_run_session_until_all_status+0x98>
 8018214:	2b00      	cmp	r3, #0
 8018216:	d0dd      	beq.n	80181d4 <uxr_run_session_until_all_status+0x54>
 8018218:	2900      	cmp	r1, #0
 801821a:	dde3      	ble.n	80181e4 <uxr_run_session_until_all_status+0x64>
 801821c:	2b00      	cmp	r3, #0
 801821e:	d1ca      	bne.n	80181b6 <uxr_run_session_until_all_status+0x36>
 8018220:	e7e0      	b.n	80181e4 <uxr_run_session_until_all_status+0x64>
 8018222:	2001      	movs	r0, #1
 8018224:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801822c:	0000      	movs	r0, r0
	...

08018230 <uxr_sync_session>:
 8018230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018232:	b093      	sub	sp, #76	@ 0x4c
 8018234:	4604      	mov	r4, r0
 8018236:	460d      	mov	r5, r1
 8018238:	f000 fb82 	bl	8018940 <uxr_session_header_offset>
 801823c:	2214      	movs	r2, #20
 801823e:	2300      	movs	r3, #0
 8018240:	9000      	str	r0, [sp, #0]
 8018242:	a80a      	add	r0, sp, #40	@ 0x28
 8018244:	eb0d 0102 	add.w	r1, sp, r2
 8018248:	f7fb ffea 	bl	8014220 <ucdr_init_buffer_origin_offset>
 801824c:	2300      	movs	r3, #0
 801824e:	2208      	movs	r2, #8
 8018250:	210e      	movs	r1, #14
 8018252:	a80a      	add	r0, sp, #40	@ 0x28
 8018254:	f001 f968 	bl	8019528 <uxr_buffer_submessage_header>
 8018258:	f001 f9c8 	bl	80195ec <uxr_nanos>
 801825c:	460e      	mov	r6, r1
 801825e:	4607      	mov	r7, r0
 8018260:	a31b      	add	r3, pc, #108	@ (adr r3, 80182d0 <uxr_sync_session+0xa0>)
 8018262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018266:	f7e8 f8a3 	bl	80003b0 <__aeabi_ldivmod>
 801826a:	4631      	mov	r1, r6
 801826c:	9003      	str	r0, [sp, #12]
 801826e:	4638      	mov	r0, r7
 8018270:	a317      	add	r3, pc, #92	@ (adr r3, 80182d0 <uxr_sync_session+0xa0>)
 8018272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018276:	f7e8 f89b 	bl	80003b0 <__aeabi_ldivmod>
 801827a:	a903      	add	r1, sp, #12
 801827c:	a80a      	add	r0, sp, #40	@ 0x28
 801827e:	9204      	str	r2, [sp, #16]
 8018280:	f002 fbaa 	bl	801a9d8 <uxr_serialize_TIMESTAMP_Payload>
 8018284:	2200      	movs	r2, #0
 8018286:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018288:	4620      	mov	r0, r4
 801828a:	4611      	mov	r1, r2
 801828c:	f000 fb04 	bl	8018898 <uxr_stamp_session_header>
 8018290:	a80a      	add	r0, sp, #40	@ 0x28
 8018292:	f7fc f805 	bl	80142a0 <ucdr_buffer_length>
 8018296:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018298:	4602      	mov	r2, r0
 801829a:	a905      	add	r1, sp, #20
 801829c:	e9d3 0600 	ldrd	r0, r6, [r3]
 80182a0:	47b0      	blx	r6
 80182a2:	f001 f987 	bl	80195b4 <uxr_millis>
 80182a6:	2300      	movs	r3, #0
 80182a8:	4606      	mov	r6, r0
 80182aa:	4629      	mov	r1, r5
 80182ac:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80182b0:	e000      	b.n	80182b4 <uxr_sync_session+0x84>
 80182b2:	b950      	cbnz	r0, 80182ca <uxr_sync_session+0x9a>
 80182b4:	4620      	mov	r0, r4
 80182b6:	f7ff fdcb 	bl	8017e50 <listen_message_reliably>
 80182ba:	f001 f97b 	bl	80195b4 <uxr_millis>
 80182be:	1b83      	subs	r3, r0, r6
 80182c0:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80182c4:	1ae9      	subs	r1, r5, r3
 80182c6:	2900      	cmp	r1, #0
 80182c8:	dcf3      	bgt.n	80182b2 <uxr_sync_session+0x82>
 80182ca:	b013      	add	sp, #76	@ 0x4c
 80182cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182ce:	bf00      	nop
 80182d0:	3b9aca00 	.word	0x3b9aca00
 80182d4:	00000000 	.word	0x00000000

080182d8 <uxr_run_session_until_pong>:
 80182d8:	b570      	push	{r4, r5, r6, lr}
 80182da:	4604      	mov	r4, r0
 80182dc:	460d      	mov	r5, r1
 80182de:	f001 f969 	bl	80195b4 <uxr_millis>
 80182e2:	4606      	mov	r6, r0
 80182e4:	4620      	mov	r0, r4
 80182e6:	f7ff fb6d 	bl	80179c4 <uxr_flash_output_streams>
 80182ea:	2300      	movs	r3, #0
 80182ec:	4629      	mov	r1, r5
 80182ee:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 80182f2:	e005      	b.n	8018300 <uxr_run_session_until_pong+0x28>
 80182f4:	f001 f95e 	bl	80195b4 <uxr_millis>
 80182f8:	1b83      	subs	r3, r0, r6
 80182fa:	1ae9      	subs	r1, r5, r3
 80182fc:	2900      	cmp	r1, #0
 80182fe:	dd0c      	ble.n	801831a <uxr_run_session_until_pong+0x42>
 8018300:	4620      	mov	r0, r4
 8018302:	f7ff fda5 	bl	8017e50 <listen_message_reliably>
 8018306:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 801830a:	2800      	cmp	r0, #0
 801830c:	d0f2      	beq.n	80182f4 <uxr_run_session_until_pong+0x1c>
 801830e:	f1a0 0001 	sub.w	r0, r0, #1
 8018312:	fab0 f080 	clz	r0, r0
 8018316:	0940      	lsrs	r0, r0, #5
 8018318:	bd70      	pop	{r4, r5, r6, pc}
 801831a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 801831e:	f1a0 0001 	sub.w	r0, r0, #1
 8018322:	fab0 f080 	clz	r0, r0
 8018326:	0940      	lsrs	r0, r0, #5
 8018328:	bd70      	pop	{r4, r5, r6, pc}
 801832a:	bf00      	nop

0801832c <wait_session_status>:
 801832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018330:	4604      	mov	r4, r0
 8018332:	b09d      	sub	sp, #116	@ 0x74
 8018334:	20ff      	movs	r0, #255	@ 0xff
 8018336:	9303      	str	r3, [sp, #12]
 8018338:	7160      	strb	r0, [r4, #5]
 801833a:	2b00      	cmp	r3, #0
 801833c:	f000 80b6 	beq.w	80184ac <wait_session_status+0x180>
 8018340:	4689      	mov	r9, r1
 8018342:	4692      	mov	sl, r2
 8018344:	f04f 0b00 	mov.w	fp, #0
 8018348:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801834a:	4652      	mov	r2, sl
 801834c:	4649      	mov	r1, r9
 801834e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018352:	47a8      	blx	r5
 8018354:	f001 f92e 	bl	80195b4 <uxr_millis>
 8018358:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801835c:	4605      	mov	r5, r0
 801835e:	e009      	b.n	8018374 <wait_session_status+0x48>
 8018360:	f001 f928 	bl	80195b4 <uxr_millis>
 8018364:	1b40      	subs	r0, r0, r5
 8018366:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801836a:	2b00      	cmp	r3, #0
 801836c:	dd40      	ble.n	80183f0 <wait_session_status+0xc4>
 801836e:	7960      	ldrb	r0, [r4, #5]
 8018370:	28ff      	cmp	r0, #255	@ 0xff
 8018372:	d145      	bne.n	8018400 <wait_session_status+0xd4>
 8018374:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8018376:	a908      	add	r1, sp, #32
 8018378:	6896      	ldr	r6, [r2, #8]
 801837a:	6810      	ldr	r0, [r2, #0]
 801837c:	aa09      	add	r2, sp, #36	@ 0x24
 801837e:	47b0      	blx	r6
 8018380:	2800      	cmp	r0, #0
 8018382:	d0ed      	beq.n	8018360 <wait_session_status+0x34>
 8018384:	a80c      	add	r0, sp, #48	@ 0x30
 8018386:	2600      	movs	r6, #0
 8018388:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801838c:	f7fb ff5a 	bl	8014244 <ucdr_init_buffer>
 8018390:	f10d 031e 	add.w	r3, sp, #30
 8018394:	aa07      	add	r2, sp, #28
 8018396:	a90c      	add	r1, sp, #48	@ 0x30
 8018398:	4620      	mov	r0, r4
 801839a:	f88d 601c 	strb.w	r6, [sp, #28]
 801839e:	f000 fa8f 	bl	80188c0 <uxr_read_session_header>
 80183a2:	2800      	cmp	r0, #0
 80183a4:	d0dc      	beq.n	8018360 <wait_session_status+0x34>
 80183a6:	4631      	mov	r1, r6
 80183a8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80183ac:	f000 ffac 	bl	8019308 <uxr_stream_id_from_raw>
 80183b0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80183b4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80183b8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80183bc:	2f01      	cmp	r7, #1
 80183be:	9302      	str	r3, [sp, #8]
 80183c0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80183c4:	d05c      	beq.n	8018480 <wait_session_status+0x154>
 80183c6:	2f02      	cmp	r7, #2
 80183c8:	d020      	beq.n	801840c <wait_session_status+0xe0>
 80183ca:	2f00      	cmp	r7, #0
 80183cc:	d1c8      	bne.n	8018360 <wait_session_status+0x34>
 80183ce:	4639      	mov	r1, r7
 80183d0:	4638      	mov	r0, r7
 80183d2:	f000 ff99 	bl	8019308 <uxr_stream_id_from_raw>
 80183d6:	a90c      	add	r1, sp, #48	@ 0x30
 80183d8:	4602      	mov	r2, r0
 80183da:	900b      	str	r0, [sp, #44]	@ 0x2c
 80183dc:	4620      	mov	r0, r4
 80183de:	f7ff fbad 	bl	8017b3c <read_submessage_list>
 80183e2:	f001 f8e7 	bl	80195b4 <uxr_millis>
 80183e6:	1b40      	subs	r0, r0, r5
 80183e8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	dcbe      	bgt.n	801836e <wait_session_status+0x42>
 80183f0:	f10b 0b01 	add.w	fp, fp, #1
 80183f4:	9b03      	ldr	r3, [sp, #12]
 80183f6:	7960      	ldrb	r0, [r4, #5]
 80183f8:	455b      	cmp	r3, fp
 80183fa:	d001      	beq.n	8018400 <wait_session_status+0xd4>
 80183fc:	28ff      	cmp	r0, #255	@ 0xff
 80183fe:	d0a3      	beq.n	8018348 <wait_session_status+0x1c>
 8018400:	38ff      	subs	r0, #255	@ 0xff
 8018402:	bf18      	it	ne
 8018404:	2001      	movne	r0, #1
 8018406:	b01d      	add	sp, #116	@ 0x74
 8018408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801840c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8018410:	4631      	mov	r1, r6
 8018412:	f104 0008 	add.w	r0, r4, #8
 8018416:	9304      	str	r3, [sp, #16]
 8018418:	f001 f864 	bl	80194e4 <uxr_get_input_reliable_stream>
 801841c:	4680      	mov	r8, r0
 801841e:	b348      	cbz	r0, 8018474 <wait_session_status+0x148>
 8018420:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018422:	a80c      	add	r0, sp, #48	@ 0x30
 8018424:	9205      	str	r2, [sp, #20]
 8018426:	f7fb ff3f 	bl	80142a8 <ucdr_buffer_remaining>
 801842a:	4603      	mov	r3, r0
 801842c:	f10d 001d 	add.w	r0, sp, #29
 8018430:	9a05      	ldr	r2, [sp, #20]
 8018432:	9000      	str	r0, [sp, #0]
 8018434:	4640      	mov	r0, r8
 8018436:	9902      	ldr	r1, [sp, #8]
 8018438:	f007 ffde 	bl	80203f8 <uxr_receive_reliable_message>
 801843c:	b1d0      	cbz	r0, 8018474 <wait_session_status+0x148>
 801843e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d03a      	beq.n	80184bc <wait_session_status+0x190>
 8018446:	9f04      	ldr	r7, [sp, #16]
 8018448:	e00a      	b.n	8018460 <wait_session_status+0x134>
 801844a:	f04f 0302 	mov.w	r3, #2
 801844e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8018452:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8018456:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801845a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801845c:	f7ff fb6e 	bl	8017b3c <read_submessage_list>
 8018460:	a914      	add	r1, sp, #80	@ 0x50
 8018462:	2204      	movs	r2, #4
 8018464:	4640      	mov	r0, r8
 8018466:	f008 f849 	bl	80204fc <uxr_next_input_reliable_buffer_available>
 801846a:	4603      	mov	r3, r0
 801846c:	a914      	add	r1, sp, #80	@ 0x50
 801846e:	4620      	mov	r0, r4
 8018470:	2b00      	cmp	r3, #0
 8018472:	d1ea      	bne.n	801844a <wait_session_status+0x11e>
 8018474:	4632      	mov	r2, r6
 8018476:	9904      	ldr	r1, [sp, #16]
 8018478:	4620      	mov	r0, r4
 801847a:	f7ff f9d9 	bl	8017830 <write_submessage_acknack.isra.0>
 801847e:	e76f      	b.n	8018360 <wait_session_status+0x34>
 8018480:	4631      	mov	r1, r6
 8018482:	f104 0008 	add.w	r0, r4, #8
 8018486:	f001 f823 	bl	80194d0 <uxr_get_input_best_effort_stream>
 801848a:	2800      	cmp	r0, #0
 801848c:	f43f af68 	beq.w	8018360 <wait_session_status+0x34>
 8018490:	9902      	ldr	r1, [sp, #8]
 8018492:	f007 ff27 	bl	80202e4 <uxr_receive_best_effort_message>
 8018496:	2800      	cmp	r0, #0
 8018498:	f43f af62 	beq.w	8018360 <wait_session_status+0x34>
 801849c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80184a0:	a90c      	add	r1, sp, #48	@ 0x30
 80184a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80184a4:	4620      	mov	r0, r4
 80184a6:	f7ff fb49 	bl	8017b3c <read_submessage_list>
 80184aa:	e759      	b.n	8018360 <wait_session_status+0x34>
 80184ac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80184ae:	e9d3 0400 	ldrd	r0, r4, [r3]
 80184b2:	47a0      	blx	r4
 80184b4:	2001      	movs	r0, #1
 80184b6:	b01d      	add	sp, #116	@ 0x74
 80184b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184bc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80184c0:	a90c      	add	r1, sp, #48	@ 0x30
 80184c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80184c4:	4620      	mov	r0, r4
 80184c6:	f7ff fb39 	bl	8017b3c <read_submessage_list>
 80184ca:	e7bc      	b.n	8018446 <wait_session_status+0x11a>

080184cc <uxr_delete_session_retries>:
 80184cc:	b530      	push	{r4, r5, lr}
 80184ce:	b08f      	sub	sp, #60	@ 0x3c
 80184d0:	4604      	mov	r4, r0
 80184d2:	460d      	mov	r5, r1
 80184d4:	f000 fa34 	bl	8018940 <uxr_session_header_offset>
 80184d8:	2300      	movs	r3, #0
 80184da:	2210      	movs	r2, #16
 80184dc:	a902      	add	r1, sp, #8
 80184de:	9000      	str	r0, [sp, #0]
 80184e0:	a806      	add	r0, sp, #24
 80184e2:	f7fb fe9d 	bl	8014220 <ucdr_init_buffer_origin_offset>
 80184e6:	a906      	add	r1, sp, #24
 80184e8:	4620      	mov	r0, r4
 80184ea:	f000 f979 	bl	80187e0 <uxr_buffer_delete_session>
 80184ee:	2200      	movs	r2, #0
 80184f0:	9b06      	ldr	r3, [sp, #24]
 80184f2:	4620      	mov	r0, r4
 80184f4:	4611      	mov	r1, r2
 80184f6:	f000 f9cf 	bl	8018898 <uxr_stamp_session_header>
 80184fa:	a806      	add	r0, sp, #24
 80184fc:	f7fb fed0 	bl	80142a0 <ucdr_buffer_length>
 8018500:	462b      	mov	r3, r5
 8018502:	4602      	mov	r2, r0
 8018504:	a902      	add	r1, sp, #8
 8018506:	4620      	mov	r0, r4
 8018508:	f7ff ff10 	bl	801832c <wait_session_status>
 801850c:	b118      	cbz	r0, 8018516 <uxr_delete_session_retries+0x4a>
 801850e:	7960      	ldrb	r0, [r4, #5]
 8018510:	fab0 f080 	clz	r0, r0
 8018514:	0940      	lsrs	r0, r0, #5
 8018516:	b00f      	add	sp, #60	@ 0x3c
 8018518:	bd30      	pop	{r4, r5, pc}
 801851a:	bf00      	nop

0801851c <uxr_create_session>:
 801851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018520:	f100 0b08 	add.w	fp, r0, #8
 8018524:	4604      	mov	r4, r0
 8018526:	b0ab      	sub	sp, #172	@ 0xac
 8018528:	4658      	mov	r0, fp
 801852a:	465e      	mov	r6, fp
 801852c:	f000 ff22 	bl	8019374 <uxr_reset_stream_storage>
 8018530:	4620      	mov	r0, r4
 8018532:	f000 fa05 	bl	8018940 <uxr_session_header_offset>
 8018536:	2300      	movs	r3, #0
 8018538:	221c      	movs	r2, #28
 801853a:	a90b      	add	r1, sp, #44	@ 0x2c
 801853c:	9000      	str	r0, [sp, #0]
 801853e:	a812      	add	r0, sp, #72	@ 0x48
 8018540:	f7fb fe6e 	bl	8014220 <ucdr_init_buffer_origin_offset>
 8018544:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018546:	a912      	add	r1, sp, #72	@ 0x48
 8018548:	4620      	mov	r0, r4
 801854a:	8a1a      	ldrh	r2, [r3, #16]
 801854c:	3a04      	subs	r2, #4
 801854e:	b292      	uxth	r2, r2
 8018550:	f000 f91c 	bl	801878c <uxr_buffer_create_session>
 8018554:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018556:	4620      	mov	r0, r4
 8018558:	f000 f98a 	bl	8018870 <uxr_stamp_create_session_header>
 801855c:	a812      	add	r0, sp, #72	@ 0x48
 801855e:	f7fb fe9f 	bl	80142a0 <ucdr_buffer_length>
 8018562:	23ff      	movs	r3, #255	@ 0xff
 8018564:	4681      	mov	r9, r0
 8018566:	7163      	strb	r3, [r4, #5]
 8018568:	230a      	movs	r3, #10
 801856a:	9303      	str	r3, [sp, #12]
 801856c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801856e:	464a      	mov	r2, r9
 8018570:	a90b      	add	r1, sp, #44	@ 0x2c
 8018572:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018576:	47a8      	blx	r5
 8018578:	f001 f81c 	bl	80195b4 <uxr_millis>
 801857c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018580:	4605      	mov	r5, r0
 8018582:	e009      	b.n	8018598 <uxr_create_session+0x7c>
 8018584:	f001 f816 	bl	80195b4 <uxr_millis>
 8018588:	1b40      	subs	r0, r0, r5
 801858a:	7962      	ldrb	r2, [r4, #5]
 801858c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018590:	2b00      	cmp	r3, #0
 8018592:	dd38      	ble.n	8018606 <uxr_create_session+0xea>
 8018594:	2aff      	cmp	r2, #255	@ 0xff
 8018596:	d13c      	bne.n	8018612 <uxr_create_session+0xf6>
 8018598:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801859a:	a907      	add	r1, sp, #28
 801859c:	6897      	ldr	r7, [r2, #8]
 801859e:	6810      	ldr	r0, [r2, #0]
 80185a0:	aa08      	add	r2, sp, #32
 80185a2:	47b8      	blx	r7
 80185a4:	2800      	cmp	r0, #0
 80185a6:	d0ed      	beq.n	8018584 <uxr_create_session+0x68>
 80185a8:	a81a      	add	r0, sp, #104	@ 0x68
 80185aa:	2700      	movs	r7, #0
 80185ac:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80185b0:	f7fb fe48 	bl	8014244 <ucdr_init_buffer>
 80185b4:	f10d 031a 	add.w	r3, sp, #26
 80185b8:	aa06      	add	r2, sp, #24
 80185ba:	a91a      	add	r1, sp, #104	@ 0x68
 80185bc:	4620      	mov	r0, r4
 80185be:	f88d 7018 	strb.w	r7, [sp, #24]
 80185c2:	f000 f97d 	bl	80188c0 <uxr_read_session_header>
 80185c6:	2800      	cmp	r0, #0
 80185c8:	d0dc      	beq.n	8018584 <uxr_create_session+0x68>
 80185ca:	4639      	mov	r1, r7
 80185cc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80185d0:	f000 fe9a 	bl	8019308 <uxr_stream_id_from_raw>
 80185d4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80185d8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80185dc:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80185e0:	2f01      	cmp	r7, #1
 80185e2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80185e6:	d053      	beq.n	8018690 <uxr_create_session+0x174>
 80185e8:	2f02      	cmp	r7, #2
 80185ea:	d018      	beq.n	801861e <uxr_create_session+0x102>
 80185ec:	2f00      	cmp	r7, #0
 80185ee:	d1c9      	bne.n	8018584 <uxr_create_session+0x68>
 80185f0:	4639      	mov	r1, r7
 80185f2:	4638      	mov	r0, r7
 80185f4:	f000 fe88 	bl	8019308 <uxr_stream_id_from_raw>
 80185f8:	a91a      	add	r1, sp, #104	@ 0x68
 80185fa:	4602      	mov	r2, r0
 80185fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80185fe:	4620      	mov	r0, r4
 8018600:	f7ff fa9c 	bl	8017b3c <read_submessage_list>
 8018604:	e7be      	b.n	8018584 <uxr_create_session+0x68>
 8018606:	9b03      	ldr	r3, [sp, #12]
 8018608:	3b01      	subs	r3, #1
 801860a:	9303      	str	r3, [sp, #12]
 801860c:	d001      	beq.n	8018612 <uxr_create_session+0xf6>
 801860e:	2aff      	cmp	r2, #255	@ 0xff
 8018610:	d0ac      	beq.n	801856c <uxr_create_session+0x50>
 8018612:	2a00      	cmp	r2, #0
 8018614:	d051      	beq.n	80186ba <uxr_create_session+0x19e>
 8018616:	2000      	movs	r0, #0
 8018618:	b02b      	add	sp, #172	@ 0xac
 801861a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801861e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018622:	4641      	mov	r1, r8
 8018624:	4630      	mov	r0, r6
 8018626:	9304      	str	r3, [sp, #16]
 8018628:	f000 ff5c 	bl	80194e4 <uxr_get_input_reliable_stream>
 801862c:	4682      	mov	sl, r0
 801862e:	b348      	cbz	r0, 8018684 <uxr_create_session+0x168>
 8018630:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018632:	a81a      	add	r0, sp, #104	@ 0x68
 8018634:	9205      	str	r2, [sp, #20]
 8018636:	f7fb fe37 	bl	80142a8 <ucdr_buffer_remaining>
 801863a:	4603      	mov	r3, r0
 801863c:	f10d 0019 	add.w	r0, sp, #25
 8018640:	9a05      	ldr	r2, [sp, #20]
 8018642:	4659      	mov	r1, fp
 8018644:	9000      	str	r0, [sp, #0]
 8018646:	4650      	mov	r0, sl
 8018648:	f007 fed6 	bl	80203f8 <uxr_receive_reliable_message>
 801864c:	b1d0      	cbz	r0, 8018684 <uxr_create_session+0x168>
 801864e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d038      	beq.n	80186c8 <uxr_create_session+0x1ac>
 8018656:	9f04      	ldr	r7, [sp, #16]
 8018658:	e00a      	b.n	8018670 <uxr_create_session+0x154>
 801865a:	f04f 0302 	mov.w	r3, #2
 801865e:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8018662:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8018666:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801866a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801866c:	f7ff fa66 	bl	8017b3c <read_submessage_list>
 8018670:	a922      	add	r1, sp, #136	@ 0x88
 8018672:	2204      	movs	r2, #4
 8018674:	4650      	mov	r0, sl
 8018676:	f007 ff41 	bl	80204fc <uxr_next_input_reliable_buffer_available>
 801867a:	4603      	mov	r3, r0
 801867c:	a922      	add	r1, sp, #136	@ 0x88
 801867e:	4620      	mov	r0, r4
 8018680:	2b00      	cmp	r3, #0
 8018682:	d1ea      	bne.n	801865a <uxr_create_session+0x13e>
 8018684:	4642      	mov	r2, r8
 8018686:	9904      	ldr	r1, [sp, #16]
 8018688:	4620      	mov	r0, r4
 801868a:	f7ff f8d1 	bl	8017830 <write_submessage_acknack.isra.0>
 801868e:	e779      	b.n	8018584 <uxr_create_session+0x68>
 8018690:	4641      	mov	r1, r8
 8018692:	4630      	mov	r0, r6
 8018694:	f000 ff1c 	bl	80194d0 <uxr_get_input_best_effort_stream>
 8018698:	2800      	cmp	r0, #0
 801869a:	f43f af73 	beq.w	8018584 <uxr_create_session+0x68>
 801869e:	4659      	mov	r1, fp
 80186a0:	f007 fe20 	bl	80202e4 <uxr_receive_best_effort_message>
 80186a4:	2800      	cmp	r0, #0
 80186a6:	f43f af6d 	beq.w	8018584 <uxr_create_session+0x68>
 80186aa:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80186ae:	a91a      	add	r1, sp, #104	@ 0x68
 80186b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80186b2:	4620      	mov	r0, r4
 80186b4:	f7ff fa42 	bl	8017b3c <read_submessage_list>
 80186b8:	e764      	b.n	8018584 <uxr_create_session+0x68>
 80186ba:	4630      	mov	r0, r6
 80186bc:	f000 fe5a 	bl	8019374 <uxr_reset_stream_storage>
 80186c0:	2001      	movs	r0, #1
 80186c2:	b02b      	add	sp, #172	@ 0xac
 80186c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186c8:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80186cc:	a91a      	add	r1, sp, #104	@ 0x68
 80186ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80186d0:	4620      	mov	r0, r4
 80186d2:	f7ff fa33 	bl	8017b3c <read_submessage_list>
 80186d6:	e7be      	b.n	8018656 <uxr_create_session+0x13a>

080186d8 <uxr_prepare_stream_to_write_submessage>:
 80186d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186dc:	b082      	sub	sp, #8
 80186de:	4604      	mov	r4, r0
 80186e0:	4610      	mov	r0, r2
 80186e2:	4615      	mov	r5, r2
 80186e4:	461e      	mov	r6, r3
 80186e6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80186ea:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80186ee:	f105 0904 	add.w	r9, r5, #4
 80186f2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80186f6:	9101      	str	r1, [sp, #4]
 80186f8:	f000 ff56 	bl	80195a8 <uxr_submessage_padding>
 80186fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018700:	4481      	add	r9, r0
 8018702:	2b01      	cmp	r3, #1
 8018704:	d01d      	beq.n	8018742 <uxr_prepare_stream_to_write_submessage+0x6a>
 8018706:	2b02      	cmp	r3, #2
 8018708:	d116      	bne.n	8018738 <uxr_prepare_stream_to_write_submessage+0x60>
 801870a:	f104 0008 	add.w	r0, r4, #8
 801870e:	4651      	mov	r1, sl
 8018710:	f000 fed2 	bl	80194b8 <uxr_get_output_reliable_stream>
 8018714:	4604      	mov	r4, r0
 8018716:	b158      	cbz	r0, 8018730 <uxr_prepare_stream_to_write_submessage+0x58>
 8018718:	4649      	mov	r1, r9
 801871a:	4632      	mov	r2, r6
 801871c:	f008 f8b2 	bl	8020884 <uxr_prepare_reliable_buffer_to_write>
 8018720:	4604      	mov	r4, r0
 8018722:	b12c      	cbz	r4, 8018730 <uxr_prepare_stream_to_write_submessage+0x58>
 8018724:	4643      	mov	r3, r8
 8018726:	b2aa      	uxth	r2, r5
 8018728:	4639      	mov	r1, r7
 801872a:	4630      	mov	r0, r6
 801872c:	f000 fefc 	bl	8019528 <uxr_buffer_submessage_header>
 8018730:	4620      	mov	r0, r4
 8018732:	b002      	add	sp, #8
 8018734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018738:	2400      	movs	r4, #0
 801873a:	4620      	mov	r0, r4
 801873c:	b002      	add	sp, #8
 801873e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018742:	f104 0008 	add.w	r0, r4, #8
 8018746:	4651      	mov	r1, sl
 8018748:	f000 feae 	bl	80194a8 <uxr_get_output_best_effort_stream>
 801874c:	4604      	mov	r4, r0
 801874e:	2800      	cmp	r0, #0
 8018750:	d0ee      	beq.n	8018730 <uxr_prepare_stream_to_write_submessage+0x58>
 8018752:	4649      	mov	r1, r9
 8018754:	4632      	mov	r2, r6
 8018756:	f007 ffc1 	bl	80206dc <uxr_prepare_best_effort_buffer_to_write>
 801875a:	4604      	mov	r4, r0
 801875c:	e7e1      	b.n	8018722 <uxr_prepare_stream_to_write_submessage+0x4a>
 801875e:	bf00      	nop

08018760 <uxr_init_session_info>:
 8018760:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8018764:	23ff      	movs	r3, #255	@ 0xff
 8018766:	7102      	strb	r2, [r0, #4]
 8018768:	f880 c001 	strb.w	ip, [r0, #1]
 801876c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018770:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018774:	7001      	strb	r1, [r0, #0]
 8018776:	f880 c002 	strb.w	ip, [r0, #2]
 801877a:	7143      	strb	r3, [r0, #5]
 801877c:	70c2      	strb	r2, [r0, #3]
 801877e:	b500      	push	{lr}
 8018780:	f04f 0e09 	mov.w	lr, #9
 8018784:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018788:	f85d fb04 	ldr.w	pc, [sp], #4

0801878c <uxr_buffer_create_session>:
 801878c:	b530      	push	{r4, r5, lr}
 801878e:	2300      	movs	r3, #0
 8018790:	b089      	sub	sp, #36	@ 0x24
 8018792:	4d12      	ldr	r5, [pc, #72]	@ (80187dc <uxr_buffer_create_session+0x50>)
 8018794:	460c      	mov	r4, r1
 8018796:	9307      	str	r3, [sp, #28]
 8018798:	4619      	mov	r1, r3
 801879a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801879e:	2201      	movs	r2, #1
 80187a0:	9301      	str	r3, [sp, #4]
 80187a2:	80c2      	strh	r2, [r0, #6]
 80187a4:	f88d 2004 	strb.w	r2, [sp, #4]
 80187a8:	682a      	ldr	r2, [r5, #0]
 80187aa:	9303      	str	r3, [sp, #12]
 80187ac:	9200      	str	r2, [sp, #0]
 80187ae:	88aa      	ldrh	r2, [r5, #4]
 80187b0:	9306      	str	r3, [sp, #24]
 80187b2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80187b6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80187ba:	9202      	str	r2, [sp, #8]
 80187bc:	7802      	ldrb	r2, [r0, #0]
 80187be:	4620      	mov	r0, r4
 80187c0:	f88d 200c 	strb.w	r2, [sp, #12]
 80187c4:	2210      	movs	r2, #16
 80187c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80187ca:	f000 fead 	bl	8019528 <uxr_buffer_submessage_header>
 80187ce:	4669      	mov	r1, sp
 80187d0:	4620      	mov	r0, r4
 80187d2:	f001 ff1f 	bl	801a614 <uxr_serialize_CREATE_CLIENT_Payload>
 80187d6:	b009      	add	sp, #36	@ 0x24
 80187d8:	bd30      	pop	{r4, r5, pc}
 80187da:	bf00      	nop
 80187dc:	08023560 	.word	0x08023560

080187e0 <uxr_buffer_delete_session>:
 80187e0:	4a0c      	ldr	r2, [pc, #48]	@ (8018814 <uxr_buffer_delete_session+0x34>)
 80187e2:	2302      	movs	r3, #2
 80187e4:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80187e8:	b510      	push	{r4, lr}
 80187ea:	460c      	mov	r4, r1
 80187ec:	b082      	sub	sp, #8
 80187ee:	8911      	ldrh	r1, [r2, #8]
 80187f0:	2204      	movs	r2, #4
 80187f2:	80c3      	strh	r3, [r0, #6]
 80187f4:	2300      	movs	r3, #0
 80187f6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80187fa:	4620      	mov	r0, r4
 80187fc:	2103      	movs	r1, #3
 80187fe:	f8ad c004 	strh.w	ip, [sp, #4]
 8018802:	f000 fe91 	bl	8019528 <uxr_buffer_submessage_header>
 8018806:	a901      	add	r1, sp, #4
 8018808:	4620      	mov	r0, r4
 801880a:	f001 ffc1 	bl	801a790 <uxr_serialize_DELETE_Payload>
 801880e:	b002      	add	sp, #8
 8018810:	bd10      	pop	{r4, pc}
 8018812:	bf00      	nop
 8018814:	08023560 	.word	0x08023560

08018818 <uxr_read_create_session_status>:
 8018818:	b510      	push	{r4, lr}
 801881a:	460b      	mov	r3, r1
 801881c:	b088      	sub	sp, #32
 801881e:	4604      	mov	r4, r0
 8018820:	a901      	add	r1, sp, #4
 8018822:	4618      	mov	r0, r3
 8018824:	f001 ffc4 	bl	801a7b0 <uxr_deserialize_STATUS_AGENT_Payload>
 8018828:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801882c:	7163      	strb	r3, [r4, #5]
 801882e:	b008      	add	sp, #32
 8018830:	bd10      	pop	{r4, pc}
 8018832:	bf00      	nop

08018834 <uxr_read_delete_session_status>:
 8018834:	b510      	push	{r4, lr}
 8018836:	b084      	sub	sp, #16
 8018838:	4604      	mov	r4, r0
 801883a:	4608      	mov	r0, r1
 801883c:	a902      	add	r1, sp, #8
 801883e:	f001 ffe7 	bl	801a810 <uxr_deserialize_STATUS_Payload>
 8018842:	88e3      	ldrh	r3, [r4, #6]
 8018844:	2b02      	cmp	r3, #2
 8018846:	d001      	beq.n	801884c <uxr_read_delete_session_status+0x18>
 8018848:	b004      	add	sp, #16
 801884a:	bd10      	pop	{r4, pc}
 801884c:	f10d 000a 	add.w	r0, sp, #10
 8018850:	f7fe fe70 	bl	8017534 <uxr_object_id_from_raw>
 8018854:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018858:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801885c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018860:	b29b      	uxth	r3, r3
 8018862:	2b02      	cmp	r3, #2
 8018864:	d1f0      	bne.n	8018848 <uxr_read_delete_session_status+0x14>
 8018866:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801886a:	7163      	strb	r3, [r4, #5]
 801886c:	e7ec      	b.n	8018848 <uxr_read_delete_session_status+0x14>
 801886e:	bf00      	nop

08018870 <uxr_stamp_create_session_header>:
 8018870:	b510      	push	{r4, lr}
 8018872:	2208      	movs	r2, #8
 8018874:	b08a      	sub	sp, #40	@ 0x28
 8018876:	4604      	mov	r4, r0
 8018878:	eb0d 0002 	add.w	r0, sp, r2
 801887c:	f7fb fce2 	bl	8014244 <ucdr_init_buffer>
 8018880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018884:	2300      	movs	r3, #0
 8018886:	a802      	add	r0, sp, #8
 8018888:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801888c:	9400      	str	r4, [sp, #0]
 801888e:	461a      	mov	r2, r3
 8018890:	f001 f846 	bl	8019920 <uxr_serialize_message_header>
 8018894:	b00a      	add	sp, #40	@ 0x28
 8018896:	bd10      	pop	{r4, pc}

08018898 <uxr_stamp_session_header>:
 8018898:	b530      	push	{r4, r5, lr}
 801889a:	b08d      	sub	sp, #52	@ 0x34
 801889c:	4604      	mov	r4, r0
 801889e:	460d      	mov	r5, r1
 80188a0:	4619      	mov	r1, r3
 80188a2:	a804      	add	r0, sp, #16
 80188a4:	9203      	str	r2, [sp, #12]
 80188a6:	2208      	movs	r2, #8
 80188a8:	f7fb fccc 	bl	8014244 <ucdr_init_buffer>
 80188ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188b0:	9b03      	ldr	r3, [sp, #12]
 80188b2:	462a      	mov	r2, r5
 80188b4:	a804      	add	r0, sp, #16
 80188b6:	9400      	str	r4, [sp, #0]
 80188b8:	f001 f832 	bl	8019920 <uxr_serialize_message_header>
 80188bc:	b00d      	add	sp, #52	@ 0x34
 80188be:	bd30      	pop	{r4, r5, pc}

080188c0 <uxr_read_session_header>:
 80188c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188c4:	4607      	mov	r7, r0
 80188c6:	b084      	sub	sp, #16
 80188c8:	4608      	mov	r0, r1
 80188ca:	460c      	mov	r4, r1
 80188cc:	4615      	mov	r5, r2
 80188ce:	461e      	mov	r6, r3
 80188d0:	f7fb fcea 	bl	80142a8 <ucdr_buffer_remaining>
 80188d4:	2808      	cmp	r0, #8
 80188d6:	d803      	bhi.n	80188e0 <uxr_read_session_header+0x20>
 80188d8:	2000      	movs	r0, #0
 80188da:	b004      	add	sp, #16
 80188dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188e0:	f10d 080c 	add.w	r8, sp, #12
 80188e4:	4633      	mov	r3, r6
 80188e6:	462a      	mov	r2, r5
 80188e8:	4620      	mov	r0, r4
 80188ea:	f10d 010b 	add.w	r1, sp, #11
 80188ee:	f8cd 8000 	str.w	r8, [sp]
 80188f2:	f001 f833 	bl	801995c <uxr_deserialize_message_header>
 80188f6:	783a      	ldrb	r2, [r7, #0]
 80188f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80188fc:	4293      	cmp	r3, r2
 80188fe:	d1eb      	bne.n	80188d8 <uxr_read_session_header+0x18>
 8018900:	061b      	lsls	r3, r3, #24
 8018902:	d41b      	bmi.n	801893c <uxr_read_session_header+0x7c>
 8018904:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8018908:	787b      	ldrb	r3, [r7, #1]
 801890a:	429a      	cmp	r2, r3
 801890c:	d003      	beq.n	8018916 <uxr_read_session_header+0x56>
 801890e:	2001      	movs	r0, #1
 8018910:	f080 0001 	eor.w	r0, r0, #1
 8018914:	e7e1      	b.n	80188da <uxr_read_session_header+0x1a>
 8018916:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801891a:	1cb8      	adds	r0, r7, #2
 801891c:	78bb      	ldrb	r3, [r7, #2]
 801891e:	429a      	cmp	r2, r3
 8018920:	d1f5      	bne.n	801890e <uxr_read_session_header+0x4e>
 8018922:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8018926:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801892a:	429a      	cmp	r2, r3
 801892c:	d1ef      	bne.n	801890e <uxr_read_session_header+0x4e>
 801892e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8018932:	7843      	ldrb	r3, [r0, #1]
 8018934:	429a      	cmp	r2, r3
 8018936:	d1ea      	bne.n	801890e <uxr_read_session_header+0x4e>
 8018938:	2000      	movs	r0, #0
 801893a:	e7e9      	b.n	8018910 <uxr_read_session_header+0x50>
 801893c:	2001      	movs	r0, #1
 801893e:	e7cc      	b.n	80188da <uxr_read_session_header+0x1a>

08018940 <uxr_session_header_offset>:
 8018940:	f990 3000 	ldrsb.w	r3, [r0]
 8018944:	2b00      	cmp	r3, #0
 8018946:	bfac      	ite	ge
 8018948:	2008      	movge	r0, #8
 801894a:	2004      	movlt	r0, #4
 801894c:	4770      	bx	lr
 801894e:	bf00      	nop

08018950 <uxr_init_base_object_request>:
 8018950:	b510      	push	{r4, lr}
 8018952:	b082      	sub	sp, #8
 8018954:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8018958:	9101      	str	r1, [sp, #4]
 801895a:	88c3      	ldrh	r3, [r0, #6]
 801895c:	f1a3 010a 	sub.w	r1, r3, #10
 8018960:	b289      	uxth	r1, r1
 8018962:	42a1      	cmp	r1, r4
 8018964:	d80f      	bhi.n	8018986 <uxr_init_base_object_request+0x36>
 8018966:	3301      	adds	r3, #1
 8018968:	b29c      	uxth	r4, r3
 801896a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801896e:	b2db      	uxtb	r3, r3
 8018970:	80c4      	strh	r4, [r0, #6]
 8018972:	1c91      	adds	r1, r2, #2
 8018974:	9801      	ldr	r0, [sp, #4]
 8018976:	f882 c000 	strb.w	ip, [r2]
 801897a:	7053      	strb	r3, [r2, #1]
 801897c:	f7fe fdee 	bl	801755c <uxr_object_id_to_raw>
 8018980:	4620      	mov	r0, r4
 8018982:	b002      	add	sp, #8
 8018984:	bd10      	pop	{r4, pc}
 8018986:	230a      	movs	r3, #10
 8018988:	f04f 0c00 	mov.w	ip, #0
 801898c:	461c      	mov	r4, r3
 801898e:	e7ef      	b.n	8018970 <uxr_init_base_object_request+0x20>

08018990 <uxr_parse_base_object_request>:
 8018990:	b570      	push	{r4, r5, r6, lr}
 8018992:	4604      	mov	r4, r0
 8018994:	3002      	adds	r0, #2
 8018996:	460d      	mov	r5, r1
 8018998:	4616      	mov	r6, r2
 801899a:	f7fe fdcb 	bl	8017534 <uxr_object_id_from_raw>
 801899e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80189a2:	8028      	strh	r0, [r5, #0]
 80189a4:	806b      	strh	r3, [r5, #2]
 80189a6:	7822      	ldrb	r2, [r4, #0]
 80189a8:	7863      	ldrb	r3, [r4, #1]
 80189aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80189ae:	8033      	strh	r3, [r6, #0]
 80189b0:	bd70      	pop	{r4, r5, r6, pc}
 80189b2:	bf00      	nop

080189b4 <uxr_init_framing_io>:
 80189b4:	2300      	movs	r3, #0
 80189b6:	7041      	strb	r1, [r0, #1]
 80189b8:	7003      	strb	r3, [r0, #0]
 80189ba:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80189bc:	4770      	bx	lr
 80189be:	bf00      	nop

080189c0 <uxr_write_framed_msg>:
 80189c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189c4:	4617      	mov	r7, r2
 80189c6:	7842      	ldrb	r2, [r0, #1]
 80189c8:	460e      	mov	r6, r1
 80189ca:	b083      	sub	sp, #12
 80189cc:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80189d0:	469b      	mov	fp, r3
 80189d2:	237e      	movs	r3, #126	@ 0x7e
 80189d4:	4604      	mov	r4, r0
 80189d6:	2901      	cmp	r1, #1
 80189d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80189dc:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80189e0:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80189e4:	f240 8115 	bls.w	8018c12 <uxr_write_framed_msg+0x252>
 80189e8:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80189ec:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80189f0:	2202      	movs	r2, #2
 80189f2:	2901      	cmp	r1, #1
 80189f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80189f8:	d952      	bls.n	8018aa0 <uxr_write_framed_msg+0xe0>
 80189fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189fc:	2103      	movs	r1, #3
 80189fe:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8018a02:	b2dd      	uxtb	r5, r3
 8018a04:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018a08:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018a0c:	2a01      	cmp	r2, #1
 8018a0e:	d95c      	bls.n	8018aca <uxr_write_framed_msg+0x10a>
 8018a10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a12:	1862      	adds	r2, r4, r1
 8018a14:	3101      	adds	r1, #1
 8018a16:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8018a1a:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8018a1e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018a22:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8018a26:	2a01      	cmp	r2, #1
 8018a28:	d961      	bls.n	8018aee <uxr_write_framed_msg+0x12e>
 8018a2a:	1c4a      	adds	r2, r1, #1
 8018a2c:	4421      	add	r1, r4
 8018a2e:	b2d2      	uxtb	r2, r2
 8018a30:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8018a34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d06a      	beq.n	8018b12 <uxr_write_framed_msg+0x152>
 8018a3c:	f04f 0800 	mov.w	r8, #0
 8018a40:	46c1      	mov	r9, r8
 8018a42:	e016      	b.n	8018a72 <uxr_write_framed_msg+0xb2>
 8018a44:	2a29      	cmp	r2, #41	@ 0x29
 8018a46:	d868      	bhi.n	8018b1a <uxr_write_framed_msg+0x15a>
 8018a48:	18a0      	adds	r0, r4, r2
 8018a4a:	3201      	adds	r2, #1
 8018a4c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018a50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a54:	ea88 0101 	eor.w	r1, r8, r1
 8018a58:	4b7d      	ldr	r3, [pc, #500]	@ (8018c50 <uxr_write_framed_msg+0x290>)
 8018a5a:	f109 0901 	add.w	r9, r9, #1
 8018a5e:	b2c9      	uxtb	r1, r1
 8018a60:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8018a64:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8018a68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a6a:	454b      	cmp	r3, r9
 8018a6c:	d969      	bls.n	8018b42 <uxr_write_framed_msg+0x182>
 8018a6e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a72:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8018a76:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8018a7a:	2801      	cmp	r0, #1
 8018a7c:	d8e2      	bhi.n	8018a44 <uxr_write_framed_msg+0x84>
 8018a7e:	1c50      	adds	r0, r2, #1
 8018a80:	b2c0      	uxtb	r0, r0
 8018a82:	2829      	cmp	r0, #41	@ 0x29
 8018a84:	d849      	bhi.n	8018b1a <uxr_write_framed_msg+0x15a>
 8018a86:	18a0      	adds	r0, r4, r2
 8018a88:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8018a8c:	3202      	adds	r2, #2
 8018a8e:	f081 0520 	eor.w	r5, r1, #32
 8018a92:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8018a96:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8018a9a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a9e:	e7d9      	b.n	8018a54 <uxr_write_framed_msg+0x94>
 8018aa0:	2104      	movs	r1, #4
 8018aa2:	f04f 0c03 	mov.w	ip, #3
 8018aa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018aa8:	4422      	add	r2, r4
 8018aaa:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8018aae:	44a4      	add	ip, r4
 8018ab0:	b2dd      	uxtb	r5, r3
 8018ab2:	f080 0020 	eor.w	r0, r0, #32
 8018ab6:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8018aba:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018abe:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8018ac2:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018ac6:	2a01      	cmp	r2, #1
 8018ac8:	d8a2      	bhi.n	8018a10 <uxr_write_framed_msg+0x50>
 8018aca:	1862      	adds	r2, r4, r1
 8018acc:	207d      	movs	r0, #125	@ 0x7d
 8018ace:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018ad0:	f085 0520 	eor.w	r5, r5, #32
 8018ad4:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8018ad8:	3102      	adds	r1, #2
 8018ada:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8018ade:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8018ae2:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018ae6:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8018aea:	2a01      	cmp	r2, #1
 8018aec:	d89d      	bhi.n	8018a2a <uxr_write_framed_msg+0x6a>
 8018aee:	1c4d      	adds	r5, r1, #1
 8018af0:	1c8a      	adds	r2, r1, #2
 8018af2:	f080 0020 	eor.w	r0, r0, #32
 8018af6:	4421      	add	r1, r4
 8018af8:	fa54 f585 	uxtab	r5, r4, r5
 8018afc:	b2d2      	uxtb	r2, r2
 8018afe:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8018b02:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8018b06:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8018b0a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d194      	bne.n	8018a3c <uxr_write_framed_msg+0x7c>
 8018b12:	4619      	mov	r1, r3
 8018b14:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018b18:	e019      	b.n	8018b4e <uxr_write_framed_msg+0x18e>
 8018b1a:	2500      	movs	r5, #0
 8018b1c:	e000      	b.n	8018b20 <uxr_write_framed_msg+0x160>
 8018b1e:	b160      	cbz	r0, 8018b3a <uxr_write_framed_msg+0x17a>
 8018b20:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018b24:	1b52      	subs	r2, r2, r5
 8018b26:	4653      	mov	r3, sl
 8018b28:	4638      	mov	r0, r7
 8018b2a:	4421      	add	r1, r4
 8018b2c:	47b0      	blx	r6
 8018b2e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018b32:	4405      	add	r5, r0
 8018b34:	4295      	cmp	r5, r2
 8018b36:	d3f2      	bcc.n	8018b1e <uxr_write_framed_msg+0x15e>
 8018b38:	d066      	beq.n	8018c08 <uxr_write_framed_msg+0x248>
 8018b3a:	2000      	movs	r0, #0
 8018b3c:	b003      	add	sp, #12
 8018b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b42:	fa5f f188 	uxtb.w	r1, r8
 8018b46:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018b4a:	f8ad 8004 	strh.w	r8, [sp, #4]
 8018b4e:	f04f 0900 	mov.w	r9, #0
 8018b52:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8018b56:	46c8      	mov	r8, r9
 8018b58:	e013      	b.n	8018b82 <uxr_write_framed_msg+0x1c2>
 8018b5a:	2a29      	cmp	r2, #41	@ 0x29
 8018b5c:	d824      	bhi.n	8018ba8 <uxr_write_framed_msg+0x1e8>
 8018b5e:	18a3      	adds	r3, r4, r2
 8018b60:	3201      	adds	r2, #1
 8018b62:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8018b66:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018b6a:	f109 0901 	add.w	r9, r9, #1
 8018b6e:	f1b9 0f02 	cmp.w	r9, #2
 8018b72:	d02d      	beq.n	8018bd0 <uxr_write_framed_msg+0x210>
 8018b74:	f109 0308 	add.w	r3, r9, #8
 8018b78:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018b7c:	446b      	add	r3, sp
 8018b7e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8018b82:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8018b86:	2b01      	cmp	r3, #1
 8018b88:	d8e7      	bhi.n	8018b5a <uxr_write_framed_msg+0x19a>
 8018b8a:	1c53      	adds	r3, r2, #1
 8018b8c:	b2db      	uxtb	r3, r3
 8018b8e:	2b29      	cmp	r3, #41	@ 0x29
 8018b90:	d80a      	bhi.n	8018ba8 <uxr_write_framed_msg+0x1e8>
 8018b92:	18a3      	adds	r3, r4, r2
 8018b94:	f081 0120 	eor.w	r1, r1, #32
 8018b98:	3202      	adds	r2, #2
 8018b9a:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8018b9e:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8018ba2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018ba6:	e7e0      	b.n	8018b6a <uxr_write_framed_msg+0x1aa>
 8018ba8:	2500      	movs	r5, #0
 8018baa:	e001      	b.n	8018bb0 <uxr_write_framed_msg+0x1f0>
 8018bac:	2800      	cmp	r0, #0
 8018bae:	d0c4      	beq.n	8018b3a <uxr_write_framed_msg+0x17a>
 8018bb0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018bb4:	1b52      	subs	r2, r2, r5
 8018bb6:	4653      	mov	r3, sl
 8018bb8:	4638      	mov	r0, r7
 8018bba:	4421      	add	r1, r4
 8018bbc:	47b0      	blx	r6
 8018bbe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018bc2:	4405      	add	r5, r0
 8018bc4:	4295      	cmp	r5, r2
 8018bc6:	d3f1      	bcc.n	8018bac <uxr_write_framed_msg+0x1ec>
 8018bc8:	d1b7      	bne.n	8018b3a <uxr_write_framed_msg+0x17a>
 8018bca:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8018bce:	e7d1      	b.n	8018b74 <uxr_write_framed_msg+0x1b4>
 8018bd0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018bd4:	b19a      	cbz	r2, 8018bfe <uxr_write_framed_msg+0x23e>
 8018bd6:	2500      	movs	r5, #0
 8018bd8:	e001      	b.n	8018bde <uxr_write_framed_msg+0x21e>
 8018bda:	2800      	cmp	r0, #0
 8018bdc:	d0ad      	beq.n	8018b3a <uxr_write_framed_msg+0x17a>
 8018bde:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018be2:	1b52      	subs	r2, r2, r5
 8018be4:	4653      	mov	r3, sl
 8018be6:	4638      	mov	r0, r7
 8018be8:	4421      	add	r1, r4
 8018bea:	47b0      	blx	r6
 8018bec:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018bf0:	4405      	add	r5, r0
 8018bf2:	4295      	cmp	r5, r2
 8018bf4:	d3f1      	bcc.n	8018bda <uxr_write_framed_msg+0x21a>
 8018bf6:	d1a0      	bne.n	8018b3a <uxr_write_framed_msg+0x17a>
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c00:	b298      	uxth	r0, r3
 8018c02:	b003      	add	sp, #12
 8018c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c08:	f04f 0300 	mov.w	r3, #0
 8018c0c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018c10:	e72a      	b.n	8018a68 <uxr_write_framed_msg+0xa8>
 8018c12:	217d      	movs	r1, #125	@ 0x7d
 8018c14:	f082 0220 	eor.w	r2, r2, #32
 8018c18:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8018c1c:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8018c20:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8018c24:	2203      	movs	r2, #3
 8018c26:	2901      	cmp	r1, #1
 8018c28:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018c2c:	d803      	bhi.n	8018c36 <uxr_write_framed_msg+0x276>
 8018c2e:	2105      	movs	r1, #5
 8018c30:	f04f 0c04 	mov.w	ip, #4
 8018c34:	e737      	b.n	8018aa6 <uxr_write_framed_msg+0xe6>
 8018c36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c38:	2104      	movs	r1, #4
 8018c3a:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8018c3e:	b2dd      	uxtb	r5, r3
 8018c40:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018c44:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018c48:	2a01      	cmp	r2, #1
 8018c4a:	f63f aee1 	bhi.w	8018a10 <uxr_write_framed_msg+0x50>
 8018c4e:	e73c      	b.n	8018aca <uxr_write_framed_msg+0x10a>
 8018c50:	080250c0 	.word	0x080250c0

08018c54 <uxr_framing_read_transport>:
 8018c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c58:	4604      	mov	r4, r0
 8018c5a:	b085      	sub	sp, #20
 8018c5c:	4692      	mov	sl, r2
 8018c5e:	4689      	mov	r9, r1
 8018c60:	461d      	mov	r5, r3
 8018c62:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018c64:	f000 fca6 	bl	80195b4 <uxr_millis>
 8018c68:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018c6c:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8018c70:	4680      	mov	r8, r0
 8018c72:	42ba      	cmp	r2, r7
 8018c74:	d05f      	beq.n	8018d36 <uxr_framing_read_transport+0xe2>
 8018c76:	d817      	bhi.n	8018ca8 <uxr_framing_read_transport+0x54>
 8018c78:	3f01      	subs	r7, #1
 8018c7a:	1aba      	subs	r2, r7, r2
 8018c7c:	2700      	movs	r7, #0
 8018c7e:	b2d2      	uxtb	r2, r2
 8018c80:	42b2      	cmp	r2, r6
 8018c82:	d81a      	bhi.n	8018cba <uxr_framing_read_transport+0x66>
 8018c84:	19d3      	adds	r3, r2, r7
 8018c86:	42b3      	cmp	r3, r6
 8018c88:	d852      	bhi.n	8018d30 <uxr_framing_read_transport+0xdc>
 8018c8a:	b9d2      	cbnz	r2, 8018cc2 <uxr_framing_read_transport+0x6e>
 8018c8c:	2600      	movs	r6, #0
 8018c8e:	f000 fc91 	bl	80195b4 <uxr_millis>
 8018c92:	682b      	ldr	r3, [r5, #0]
 8018c94:	eba0 0008 	sub.w	r0, r0, r8
 8018c98:	1a1b      	subs	r3, r3, r0
 8018c9a:	4630      	mov	r0, r6
 8018c9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018ca0:	602b      	str	r3, [r5, #0]
 8018ca2:	b005      	add	sp, #20
 8018ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ca8:	2f00      	cmp	r7, #0
 8018caa:	d060      	beq.n	8018d6e <uxr_framing_read_transport+0x11a>
 8018cac:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8018cb0:	3f01      	subs	r7, #1
 8018cb2:	b2d2      	uxtb	r2, r2
 8018cb4:	b2ff      	uxtb	r7, r7
 8018cb6:	42b2      	cmp	r2, r6
 8018cb8:	d9e4      	bls.n	8018c84 <uxr_framing_read_transport+0x30>
 8018cba:	b2f2      	uxtb	r2, r6
 8018cbc:	2700      	movs	r7, #0
 8018cbe:	2a00      	cmp	r2, #0
 8018cc0:	d0e4      	beq.n	8018c8c <uxr_framing_read_transport+0x38>
 8018cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cc4:	4650      	mov	r0, sl
 8018cc6:	9203      	str	r2, [sp, #12]
 8018cc8:	9300      	str	r3, [sp, #0]
 8018cca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018cce:	682b      	ldr	r3, [r5, #0]
 8018cd0:	3102      	adds	r1, #2
 8018cd2:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8018d78 <uxr_framing_read_transport+0x124>
 8018cd6:	4421      	add	r1, r4
 8018cd8:	47c8      	blx	r9
 8018cda:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018cde:	4606      	mov	r6, r0
 8018ce0:	4403      	add	r3, r0
 8018ce2:	0859      	lsrs	r1, r3, #1
 8018ce4:	fbab 2101 	umull	r2, r1, fp, r1
 8018ce8:	222a      	movs	r2, #42	@ 0x2a
 8018cea:	0889      	lsrs	r1, r1, #2
 8018cec:	fb02 3111 	mls	r1, r2, r1, r3
 8018cf0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018cf4:	2800      	cmp	r0, #0
 8018cf6:	d0c9      	beq.n	8018c8c <uxr_framing_read_transport+0x38>
 8018cf8:	9a03      	ldr	r2, [sp, #12]
 8018cfa:	4290      	cmp	r0, r2
 8018cfc:	d1c7      	bne.n	8018c8e <uxr_framing_read_transport+0x3a>
 8018cfe:	2f00      	cmp	r7, #0
 8018d00:	d0c5      	beq.n	8018c8e <uxr_framing_read_transport+0x3a>
 8018d02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d04:	3102      	adds	r1, #2
 8018d06:	463a      	mov	r2, r7
 8018d08:	4650      	mov	r0, sl
 8018d0a:	4421      	add	r1, r4
 8018d0c:	9300      	str	r3, [sp, #0]
 8018d0e:	2300      	movs	r3, #0
 8018d10:	47c8      	blx	r9
 8018d12:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018d16:	4406      	add	r6, r0
 8018d18:	1813      	adds	r3, r2, r0
 8018d1a:	085a      	lsrs	r2, r3, #1
 8018d1c:	fbab 1b02 	umull	r1, fp, fp, r2
 8018d20:	222a      	movs	r2, #42	@ 0x2a
 8018d22:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8018d26:	fb02 331b 	mls	r3, r2, fp, r3
 8018d2a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018d2e:	e7ae      	b.n	8018c8e <uxr_framing_read_transport+0x3a>
 8018d30:	1ab6      	subs	r6, r6, r2
 8018d32:	b2f7      	uxtb	r7, r6
 8018d34:	e7a9      	b.n	8018c8a <uxr_framing_read_transport+0x36>
 8018d36:	2300      	movs	r3, #0
 8018d38:	2e28      	cmp	r6, #40	@ 0x28
 8018d3a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8018d3c:	d9bd      	bls.n	8018cba <uxr_framing_read_transport+0x66>
 8018d3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d40:	2229      	movs	r2, #41	@ 0x29
 8018d42:	1ca1      	adds	r1, r4, #2
 8018d44:	4650      	mov	r0, sl
 8018d46:	9300      	str	r3, [sp, #0]
 8018d48:	682b      	ldr	r3, [r5, #0]
 8018d4a:	47c8      	blx	r9
 8018d4c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018d50:	4606      	mov	r6, r0
 8018d52:	212a      	movs	r1, #42	@ 0x2a
 8018d54:	4403      	add	r3, r0
 8018d56:	4808      	ldr	r0, [pc, #32]	@ (8018d78 <uxr_framing_read_transport+0x124>)
 8018d58:	085a      	lsrs	r2, r3, #1
 8018d5a:	fba0 0202 	umull	r0, r2, r0, r2
 8018d5e:	0892      	lsrs	r2, r2, #2
 8018d60:	fb01 3312 	mls	r3, r1, r2, r3
 8018d64:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018d68:	2e00      	cmp	r6, #0
 8018d6a:	d08f      	beq.n	8018c8c <uxr_framing_read_transport+0x38>
 8018d6c:	e78f      	b.n	8018c8e <uxr_framing_read_transport+0x3a>
 8018d6e:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8018d72:	b2d2      	uxtb	r2, r2
 8018d74:	e784      	b.n	8018c80 <uxr_framing_read_transport+0x2c>
 8018d76:	bf00      	nop
 8018d78:	30c30c31 	.word	0x30c30c31

08018d7c <uxr_read_framed_msg>:
 8018d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d80:	461e      	mov	r6, r3
 8018d82:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8018d86:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8018d8a:	b083      	sub	sp, #12
 8018d8c:	4604      	mov	r4, r0
 8018d8e:	4688      	mov	r8, r1
 8018d90:	429d      	cmp	r5, r3
 8018d92:	4691      	mov	r9, r2
 8018d94:	f000 818c 	beq.w	80190b0 <uxr_read_framed_msg+0x334>
 8018d98:	7823      	ldrb	r3, [r4, #0]
 8018d9a:	4dc3      	ldr	r5, [pc, #780]	@ (80190a8 <uxr_read_framed_msg+0x32c>)
 8018d9c:	4fc3      	ldr	r7, [pc, #780]	@ (80190ac <uxr_read_framed_msg+0x330>)
 8018d9e:	2b07      	cmp	r3, #7
 8018da0:	d8fd      	bhi.n	8018d9e <uxr_read_framed_msg+0x22>
 8018da2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018da6:	011c      	.short	0x011c
 8018da8:	00d900fb 	.word	0x00d900fb
 8018dac:	008f00ba 	.word	0x008f00ba
 8018db0:	00320051 	.word	0x00320051
 8018db4:	0008      	.short	0x0008
 8018db6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018dba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018dbe:	4299      	cmp	r1, r3
 8018dc0:	f000 814d 	beq.w	801905e <uxr_read_framed_msg+0x2e2>
 8018dc4:	18e2      	adds	r2, r4, r3
 8018dc6:	7892      	ldrb	r2, [r2, #2]
 8018dc8:	2a7d      	cmp	r2, #125	@ 0x7d
 8018dca:	f000 81b8 	beq.w	801913e <uxr_read_framed_msg+0x3c2>
 8018dce:	3301      	adds	r3, #1
 8018dd0:	212a      	movs	r1, #42	@ 0x2a
 8018dd2:	2a7e      	cmp	r2, #126	@ 0x7e
 8018dd4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018dd8:	fba5 c000 	umull	ip, r0, r5, r0
 8018ddc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018de0:	fb01 3310 	mls	r3, r1, r0, r3
 8018de4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018de8:	f000 8257 	beq.w	801929a <uxr_read_framed_msg+0x51e>
 8018dec:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018dee:	2000      	movs	r0, #0
 8018df0:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8018df2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018df6:	7020      	strb	r0, [r4, #0]
 8018df8:	b29b      	uxth	r3, r3
 8018dfa:	4299      	cmp	r1, r3
 8018dfc:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018dfe:	f000 8178 	beq.w	80190f2 <uxr_read_framed_msg+0x376>
 8018e02:	2000      	movs	r0, #0
 8018e04:	b003      	add	sp, #12
 8018e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e0a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018e0e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018e12:	4298      	cmp	r0, r3
 8018e14:	f000 8132 	beq.w	801907c <uxr_read_framed_msg+0x300>
 8018e18:	18e2      	adds	r2, r4, r3
 8018e1a:	7891      	ldrb	r1, [r2, #2]
 8018e1c:	297d      	cmp	r1, #125	@ 0x7d
 8018e1e:	f000 8170 	beq.w	8019102 <uxr_read_framed_msg+0x386>
 8018e22:	3301      	adds	r3, #1
 8018e24:	202a      	movs	r0, #42	@ 0x2a
 8018e26:	297e      	cmp	r1, #126	@ 0x7e
 8018e28:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018e2c:	fba5 c202 	umull	ip, r2, r5, r2
 8018e30:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018e34:	fb00 3312 	mls	r3, r0, r2, r3
 8018e38:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e3c:	f000 821d 	beq.w	801927a <uxr_read_framed_msg+0x4fe>
 8018e40:	2307      	movs	r3, #7
 8018e42:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8018e44:	7023      	strb	r3, [r4, #0]
 8018e46:	e7aa      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 8018e48:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018e4a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018e4e:	459e      	cmp	lr, r3
 8018e50:	d827      	bhi.n	8018ea2 <uxr_read_framed_msg+0x126>
 8018e52:	e032      	b.n	8018eba <uxr_read_framed_msg+0x13e>
 8018e54:	fba5 b101 	umull	fp, r1, r5, r1
 8018e58:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018e5c:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018e60:	0889      	lsrs	r1, r1, #2
 8018e62:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8018e66:	fb0b 0111 	mls	r1, fp, r1, r0
 8018e6a:	f000 80d4 	beq.w	8019016 <uxr_read_framed_msg+0x29a>
 8018e6e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018e72:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8018e76:	f000 80cb 	beq.w	8019010 <uxr_read_framed_msg+0x294>
 8018e7a:	f806 c003 	strb.w	ip, [r6, r3]
 8018e7e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8018e80:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018e82:	ea80 010c 	eor.w	r1, r0, ip
 8018e86:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018e8a:	3301      	adds	r3, #1
 8018e8c:	b2c9      	uxtb	r1, r1
 8018e8e:	b29b      	uxth	r3, r3
 8018e90:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8018e94:	4573      	cmp	r3, lr
 8018e96:	8663      	strh	r3, [r4, #50]	@ 0x32
 8018e98:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8018e9c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8018e9e:	f080 811d 	bcs.w	80190dc <uxr_read_framed_msg+0x360>
 8018ea2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018ea6:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8018eaa:	1c50      	adds	r0, r2, #1
 8018eac:	eb04 0c02 	add.w	ip, r4, r2
 8018eb0:	4592      	cmp	sl, r2
 8018eb2:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8018eb6:	d1cd      	bne.n	8018e54 <uxr_read_framed_msg+0xd8>
 8018eb8:	459e      	cmp	lr, r3
 8018eba:	f040 8114 	bne.w	80190e6 <uxr_read_framed_msg+0x36a>
 8018ebe:	2306      	movs	r3, #6
 8018ec0:	7023      	strb	r3, [r4, #0]
 8018ec2:	e76c      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 8018ec4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018ec8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018ecc:	4298      	cmp	r0, r3
 8018ece:	f000 80c6 	beq.w	801905e <uxr_read_framed_msg+0x2e2>
 8018ed2:	18e2      	adds	r2, r4, r3
 8018ed4:	7891      	ldrb	r1, [r2, #2]
 8018ed6:	297d      	cmp	r1, #125	@ 0x7d
 8018ed8:	f000 8193 	beq.w	8019202 <uxr_read_framed_msg+0x486>
 8018edc:	3301      	adds	r3, #1
 8018ede:	202a      	movs	r0, #42	@ 0x2a
 8018ee0:	297e      	cmp	r1, #126	@ 0x7e
 8018ee2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018ee6:	fba5 c202 	umull	ip, r2, r5, r2
 8018eea:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018eee:	fb00 3312 	mls	r3, r0, r2, r3
 8018ef2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ef6:	f000 81d0 	beq.w	801929a <uxr_read_framed_msg+0x51e>
 8018efa:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8018efc:	2000      	movs	r0, #0
 8018efe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018f02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018f04:	8660      	strh	r0, [r4, #50]	@ 0x32
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018f0a:	428b      	cmp	r3, r1
 8018f0c:	8623      	strh	r3, [r4, #48]	@ 0x30
 8018f0e:	f240 80e2 	bls.w	80190d6 <uxr_read_framed_msg+0x35a>
 8018f12:	7020      	strb	r0, [r4, #0]
 8018f14:	b003      	add	sp, #12
 8018f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f1a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018f1e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018f22:	4298      	cmp	r0, r3
 8018f24:	f000 80aa 	beq.w	801907c <uxr_read_framed_msg+0x300>
 8018f28:	18e2      	adds	r2, r4, r3
 8018f2a:	7891      	ldrb	r1, [r2, #2]
 8018f2c:	297d      	cmp	r1, #125	@ 0x7d
 8018f2e:	f000 8186 	beq.w	801923e <uxr_read_framed_msg+0x4c2>
 8018f32:	3301      	adds	r3, #1
 8018f34:	202a      	movs	r0, #42	@ 0x2a
 8018f36:	297e      	cmp	r1, #126	@ 0x7e
 8018f38:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018f3c:	fba5 c202 	umull	ip, r2, r5, r2
 8018f40:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018f44:	fb00 3312 	mls	r3, r0, r2, r3
 8018f48:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018f4c:	f000 8195 	beq.w	801927a <uxr_read_framed_msg+0x4fe>
 8018f50:	2304      	movs	r3, #4
 8018f52:	8621      	strh	r1, [r4, #48]	@ 0x30
 8018f54:	7023      	strb	r3, [r4, #0]
 8018f56:	e722      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 8018f58:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018f5c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018f60:	4290      	cmp	r0, r2
 8018f62:	f000 80b4 	beq.w	80190ce <uxr_read_framed_msg+0x352>
 8018f66:	18a3      	adds	r3, r4, r2
 8018f68:	7899      	ldrb	r1, [r3, #2]
 8018f6a:	297d      	cmp	r1, #125	@ 0x7d
 8018f6c:	f000 8107 	beq.w	801917e <uxr_read_framed_msg+0x402>
 8018f70:	3201      	adds	r2, #1
 8018f72:	232a      	movs	r3, #42	@ 0x2a
 8018f74:	297e      	cmp	r1, #126	@ 0x7e
 8018f76:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8018f7a:	fba5 c000 	umull	ip, r0, r5, r0
 8018f7e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018f82:	fb03 2210 	mls	r2, r3, r0, r2
 8018f86:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018f8a:	f000 818a 	beq.w	80192a2 <uxr_read_framed_msg+0x526>
 8018f8e:	7863      	ldrb	r3, [r4, #1]
 8018f90:	428b      	cmp	r3, r1
 8018f92:	bf0c      	ite	eq
 8018f94:	2303      	moveq	r3, #3
 8018f96:	2300      	movne	r3, #0
 8018f98:	7023      	strb	r3, [r4, #0]
 8018f9a:	e700      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018fa2:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8018fa6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018faa:	4299      	cmp	r1, r3
 8018fac:	d06a      	beq.n	8019084 <uxr_read_framed_msg+0x308>
 8018fae:	18e2      	adds	r2, r4, r3
 8018fb0:	7890      	ldrb	r0, [r2, #2]
 8018fb2:	287d      	cmp	r0, #125	@ 0x7d
 8018fb4:	f000 8100 	beq.w	80191b8 <uxr_read_framed_msg+0x43c>
 8018fb8:	3301      	adds	r3, #1
 8018fba:	212a      	movs	r1, #42	@ 0x2a
 8018fbc:	287e      	cmp	r0, #126	@ 0x7e
 8018fbe:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8018fc2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018fc6:	fba5 c202 	umull	ip, r2, r5, r2
 8018fca:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018fce:	fb01 3312 	mls	r3, r1, r2, r3
 8018fd2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018fd6:	d055      	beq.n	8019084 <uxr_read_framed_msg+0x308>
 8018fd8:	2302      	movs	r3, #2
 8018fda:	7023      	strb	r3, [r4, #0]
 8018fdc:	e6df      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 8018fde:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8018fe2:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018fe6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018fea:	1c5a      	adds	r2, r3, #1
 8018fec:	459c      	cmp	ip, r3
 8018fee:	eb04 0103 	add.w	r1, r4, r3
 8018ff2:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8018ff6:	f43f af04 	beq.w	8018e02 <uxr_read_framed_msg+0x86>
 8018ffa:	fba5 0303 	umull	r0, r3, r5, r3
 8018ffe:	7889      	ldrb	r1, [r1, #2]
 8019000:	089b      	lsrs	r3, r3, #2
 8019002:	297e      	cmp	r1, #126	@ 0x7e
 8019004:	fb0e 2313 	mls	r3, lr, r3, r2
 8019008:	b2db      	uxtb	r3, r3
 801900a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801900e:	d1ec      	bne.n	8018fea <uxr_read_framed_msg+0x26e>
 8019010:	2301      	movs	r3, #1
 8019012:	7023      	strb	r3, [r4, #0]
 8019014:	e6c3      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 8019016:	1c50      	adds	r0, r2, #1
 8019018:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801901c:	3202      	adds	r2, #2
 801901e:	0841      	lsrs	r1, r0, #1
 8019020:	fba5 c101 	umull	ip, r1, r5, r1
 8019024:	0889      	lsrs	r1, r1, #2
 8019026:	fb0b 0111 	mls	r1, fp, r1, r0
 801902a:	1860      	adds	r0, r4, r1
 801902c:	b2c9      	uxtb	r1, r1
 801902e:	458a      	cmp	sl, r1
 8019030:	f43f af42 	beq.w	8018eb8 <uxr_read_framed_msg+0x13c>
 8019034:	0851      	lsrs	r1, r2, #1
 8019036:	7880      	ldrb	r0, [r0, #2]
 8019038:	fba5 a101 	umull	sl, r1, r5, r1
 801903c:	287e      	cmp	r0, #126	@ 0x7e
 801903e:	f080 0c20 	eor.w	ip, r0, #32
 8019042:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019046:	fb0b 2211 	mls	r2, fp, r1, r2
 801904a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801904e:	f47f af14 	bne.w	8018e7a <uxr_read_framed_msg+0xfe>
 8019052:	459e      	cmp	lr, r3
 8019054:	f43f af33 	beq.w	8018ebe <uxr_read_framed_msg+0x142>
 8019058:	2301      	movs	r3, #1
 801905a:	7023      	strb	r3, [r4, #0]
 801905c:	e69f      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 801905e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019060:	9300      	str	r3, [sp, #0]
 8019062:	2301      	movs	r3, #1
 8019064:	9301      	str	r3, [sp, #4]
 8019066:	464a      	mov	r2, r9
 8019068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801906a:	4641      	mov	r1, r8
 801906c:	4620      	mov	r0, r4
 801906e:	f7ff fdf1 	bl	8018c54 <uxr_framing_read_transport>
 8019072:	2800      	cmp	r0, #0
 8019074:	f43f aec5 	beq.w	8018e02 <uxr_read_framed_msg+0x86>
 8019078:	7823      	ldrb	r3, [r4, #0]
 801907a:	e690      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 801907c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801907e:	9300      	str	r3, [sp, #0]
 8019080:	2302      	movs	r3, #2
 8019082:	e7ef      	b.n	8019064 <uxr_read_framed_msg+0x2e8>
 8019084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019086:	464a      	mov	r2, r9
 8019088:	4641      	mov	r1, r8
 801908a:	4620      	mov	r0, r4
 801908c:	9300      	str	r3, [sp, #0]
 801908e:	2304      	movs	r3, #4
 8019090:	9301      	str	r3, [sp, #4]
 8019092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019094:	f7ff fdde 	bl	8018c54 <uxr_framing_read_transport>
 8019098:	2800      	cmp	r0, #0
 801909a:	d1ed      	bne.n	8019078 <uxr_read_framed_msg+0x2fc>
 801909c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80190a0:	2b7e      	cmp	r3, #126	@ 0x7e
 80190a2:	d0e9      	beq.n	8019078 <uxr_read_framed_msg+0x2fc>
 80190a4:	e6ad      	b.n	8018e02 <uxr_read_framed_msg+0x86>
 80190a6:	bf00      	nop
 80190a8:	30c30c31 	.word	0x30c30c31
 80190ac:	080250c0 	.word	0x080250c0
 80190b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80190b2:	9300      	str	r3, [sp, #0]
 80190b4:	2305      	movs	r3, #5
 80190b6:	9301      	str	r3, [sp, #4]
 80190b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80190ba:	f7ff fdcb 	bl	8018c54 <uxr_framing_read_transport>
 80190be:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80190c2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80190c6:	429a      	cmp	r2, r3
 80190c8:	f43f ae9b 	beq.w	8018e02 <uxr_read_framed_msg+0x86>
 80190cc:	e664      	b.n	8018d98 <uxr_read_framed_msg+0x1c>
 80190ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80190d0:	9300      	str	r3, [sp, #0]
 80190d2:	2303      	movs	r3, #3
 80190d4:	e7c6      	b.n	8019064 <uxr_read_framed_msg+0x2e8>
 80190d6:	2305      	movs	r3, #5
 80190d8:	7023      	strb	r3, [r4, #0]
 80190da:	e660      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 80190dc:	f43f aeef 	beq.w	8018ebe <uxr_read_framed_msg+0x142>
 80190e0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80190e4:	d094      	beq.n	8019010 <uxr_read_framed_msg+0x294>
 80190e6:	ebae 0303 	sub.w	r3, lr, r3
 80190ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80190ec:	3302      	adds	r3, #2
 80190ee:	9200      	str	r2, [sp, #0]
 80190f0:	e7b8      	b.n	8019064 <uxr_read_framed_msg+0x2e8>
 80190f2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80190f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190f8:	7013      	strb	r3, [r2, #0]
 80190fa:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80190fc:	b003      	add	sp, #12
 80190fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019102:	1c59      	adds	r1, r3, #1
 8019104:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019108:	084a      	lsrs	r2, r1, #1
 801910a:	fba5 e202 	umull	lr, r2, r5, r2
 801910e:	0892      	lsrs	r2, r2, #2
 8019110:	fb0c 1212 	mls	r2, ip, r2, r1
 8019114:	b2d1      	uxtb	r1, r2
 8019116:	4288      	cmp	r0, r1
 8019118:	d0b0      	beq.n	801907c <uxr_read_framed_msg+0x300>
 801911a:	3302      	adds	r3, #2
 801911c:	4422      	add	r2, r4
 801911e:	7891      	ldrb	r1, [r2, #2]
 8019120:	085a      	lsrs	r2, r3, #1
 8019122:	fba5 0202 	umull	r0, r2, r5, r2
 8019126:	297e      	cmp	r1, #126	@ 0x7e
 8019128:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801912c:	fb0c 3312 	mls	r3, ip, r2, r3
 8019130:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019134:	f000 80a1 	beq.w	801927a <uxr_read_framed_msg+0x4fe>
 8019138:	f081 0120 	eor.w	r1, r1, #32
 801913c:	e680      	b.n	8018e40 <uxr_read_framed_msg+0xc4>
 801913e:	f103 0c01 	add.w	ip, r3, #1
 8019142:	202a      	movs	r0, #42	@ 0x2a
 8019144:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019148:	fba5 e202 	umull	lr, r2, r5, r2
 801914c:	0892      	lsrs	r2, r2, #2
 801914e:	fb00 c212 	mls	r2, r0, r2, ip
 8019152:	fa5f fc82 	uxtb.w	ip, r2
 8019156:	4561      	cmp	r1, ip
 8019158:	d081      	beq.n	801905e <uxr_read_framed_msg+0x2e2>
 801915a:	3302      	adds	r3, #2
 801915c:	4422      	add	r2, r4
 801915e:	0859      	lsrs	r1, r3, #1
 8019160:	7892      	ldrb	r2, [r2, #2]
 8019162:	fba5 c101 	umull	ip, r1, r5, r1
 8019166:	2a7e      	cmp	r2, #126	@ 0x7e
 8019168:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801916c:	fb00 3311 	mls	r3, r0, r1, r3
 8019170:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019174:	f000 8091 	beq.w	801929a <uxr_read_framed_msg+0x51e>
 8019178:	f082 0220 	eor.w	r2, r2, #32
 801917c:	e636      	b.n	8018dec <uxr_read_framed_msg+0x70>
 801917e:	1c51      	adds	r1, r2, #1
 8019180:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019184:	084b      	lsrs	r3, r1, #1
 8019186:	fba5 e303 	umull	lr, r3, r5, r3
 801918a:	089b      	lsrs	r3, r3, #2
 801918c:	fb0c 1313 	mls	r3, ip, r3, r1
 8019190:	b2d9      	uxtb	r1, r3
 8019192:	4288      	cmp	r0, r1
 8019194:	d09b      	beq.n	80190ce <uxr_read_framed_msg+0x352>
 8019196:	3202      	adds	r2, #2
 8019198:	4423      	add	r3, r4
 801919a:	0850      	lsrs	r0, r2, #1
 801919c:	789b      	ldrb	r3, [r3, #2]
 801919e:	fba5 1000 	umull	r1, r0, r5, r0
 80191a2:	2b7e      	cmp	r3, #126	@ 0x7e
 80191a4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80191a8:	fb0c 2210 	mls	r2, ip, r0, r2
 80191ac:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80191b0:	d077      	beq.n	80192a2 <uxr_read_framed_msg+0x526>
 80191b2:	f083 0120 	eor.w	r1, r3, #32
 80191b6:	e6ea      	b.n	8018f8e <uxr_read_framed_msg+0x212>
 80191b8:	f103 0c01 	add.w	ip, r3, #1
 80191bc:	202a      	movs	r0, #42	@ 0x2a
 80191be:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80191c2:	fba5 e202 	umull	lr, r2, r5, r2
 80191c6:	0892      	lsrs	r2, r2, #2
 80191c8:	fb00 c212 	mls	r2, r0, r2, ip
 80191cc:	fa5f fc82 	uxtb.w	ip, r2
 80191d0:	4561      	cmp	r1, ip
 80191d2:	f43f af57 	beq.w	8019084 <uxr_read_framed_msg+0x308>
 80191d6:	3302      	adds	r3, #2
 80191d8:	4422      	add	r2, r4
 80191da:	7891      	ldrb	r1, [r2, #2]
 80191dc:	085a      	lsrs	r2, r3, #1
 80191de:	fba5 c202 	umull	ip, r2, r5, r2
 80191e2:	297e      	cmp	r1, #126	@ 0x7e
 80191e4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80191e8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80191ec:	fb00 3312 	mls	r3, r0, r2, r3
 80191f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80191f4:	f43f af46 	beq.w	8019084 <uxr_read_framed_msg+0x308>
 80191f8:	f081 0120 	eor.w	r1, r1, #32
 80191fc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8019200:	e6ea      	b.n	8018fd8 <uxr_read_framed_msg+0x25c>
 8019202:	1c59      	adds	r1, r3, #1
 8019204:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019208:	084a      	lsrs	r2, r1, #1
 801920a:	fba5 e202 	umull	lr, r2, r5, r2
 801920e:	0892      	lsrs	r2, r2, #2
 8019210:	fb0c 1212 	mls	r2, ip, r2, r1
 8019214:	b2d1      	uxtb	r1, r2
 8019216:	4288      	cmp	r0, r1
 8019218:	f43f af21 	beq.w	801905e <uxr_read_framed_msg+0x2e2>
 801921c:	3302      	adds	r3, #2
 801921e:	4422      	add	r2, r4
 8019220:	7891      	ldrb	r1, [r2, #2]
 8019222:	085a      	lsrs	r2, r3, #1
 8019224:	fba5 0202 	umull	r0, r2, r5, r2
 8019228:	297e      	cmp	r1, #126	@ 0x7e
 801922a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801922e:	fb0c 3312 	mls	r3, ip, r2, r3
 8019232:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019236:	d030      	beq.n	801929a <uxr_read_framed_msg+0x51e>
 8019238:	f081 0120 	eor.w	r1, r1, #32
 801923c:	e65d      	b.n	8018efa <uxr_read_framed_msg+0x17e>
 801923e:	1c59      	adds	r1, r3, #1
 8019240:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019244:	084a      	lsrs	r2, r1, #1
 8019246:	fba5 e202 	umull	lr, r2, r5, r2
 801924a:	0892      	lsrs	r2, r2, #2
 801924c:	fb0c 1212 	mls	r2, ip, r2, r1
 8019250:	b2d1      	uxtb	r1, r2
 8019252:	4288      	cmp	r0, r1
 8019254:	f43f af12 	beq.w	801907c <uxr_read_framed_msg+0x300>
 8019258:	3302      	adds	r3, #2
 801925a:	4422      	add	r2, r4
 801925c:	7891      	ldrb	r1, [r2, #2]
 801925e:	085a      	lsrs	r2, r3, #1
 8019260:	fba5 0202 	umull	r0, r2, r5, r2
 8019264:	297e      	cmp	r1, #126	@ 0x7e
 8019266:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801926a:	fb0c 3312 	mls	r3, ip, r2, r3
 801926e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019272:	d002      	beq.n	801927a <uxr_read_framed_msg+0x4fe>
 8019274:	f081 0120 	eor.w	r1, r1, #32
 8019278:	e66a      	b.n	8018f50 <uxr_read_framed_msg+0x1d4>
 801927a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801927c:	9300      	str	r3, [sp, #0]
 801927e:	2302      	movs	r3, #2
 8019280:	9301      	str	r3, [sp, #4]
 8019282:	464a      	mov	r2, r9
 8019284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019286:	4641      	mov	r1, r8
 8019288:	4620      	mov	r0, r4
 801928a:	f7ff fce3 	bl	8018c54 <uxr_framing_read_transport>
 801928e:	2800      	cmp	r0, #0
 8019290:	f47f aef2 	bne.w	8019078 <uxr_read_framed_msg+0x2fc>
 8019294:	2301      	movs	r3, #1
 8019296:	7023      	strb	r3, [r4, #0]
 8019298:	e581      	b.n	8018d9e <uxr_read_framed_msg+0x22>
 801929a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801929c:	9300      	str	r3, [sp, #0]
 801929e:	2301      	movs	r3, #1
 80192a0:	e7ee      	b.n	8019280 <uxr_read_framed_msg+0x504>
 80192a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80192a4:	9300      	str	r3, [sp, #0]
 80192a6:	2303      	movs	r3, #3
 80192a8:	e7ea      	b.n	8019280 <uxr_read_framed_msg+0x504>
 80192aa:	bf00      	nop

080192ac <uxr_stream_id>:
 80192ac:	2901      	cmp	r1, #1
 80192ae:	4684      	mov	ip, r0
 80192b0:	b500      	push	{lr}
 80192b2:	b083      	sub	sp, #12
 80192b4:	d01f      	beq.n	80192f6 <uxr_stream_id+0x4a>
 80192b6:	2902      	cmp	r1, #2
 80192b8:	f04f 0e00 	mov.w	lr, #0
 80192bc:	d020      	beq.n	8019300 <uxr_stream_id+0x54>
 80192be:	2300      	movs	r3, #0
 80192c0:	2000      	movs	r0, #0
 80192c2:	f36e 0307 	bfi	r3, lr, #0, #8
 80192c6:	f36c 230f 	bfi	r3, ip, #8, #8
 80192ca:	f361 4317 	bfi	r3, r1, #16, #8
 80192ce:	f362 631f 	bfi	r3, r2, #24, #8
 80192d2:	fa5f fc83 	uxtb.w	ip, r3
 80192d6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80192da:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80192de:	0e1b      	lsrs	r3, r3, #24
 80192e0:	f36c 0007 	bfi	r0, ip, #0, #8
 80192e4:	f361 200f 	bfi	r0, r1, #8, #8
 80192e8:	f362 4017 	bfi	r0, r2, #16, #8
 80192ec:	f363 601f 	bfi	r0, r3, #24, #8
 80192f0:	b003      	add	sp, #12
 80192f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80192f6:	f100 0e01 	add.w	lr, r0, #1
 80192fa:	fa5f fe8e 	uxtb.w	lr, lr
 80192fe:	e7de      	b.n	80192be <uxr_stream_id+0x12>
 8019300:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8019304:	e7db      	b.n	80192be <uxr_stream_id+0x12>
 8019306:	bf00      	nop

08019308 <uxr_stream_id_from_raw>:
 8019308:	b082      	sub	sp, #8
 801930a:	b130      	cbz	r0, 801931a <uxr_stream_id_from_raw+0x12>
 801930c:	0603      	lsls	r3, r0, #24
 801930e:	d421      	bmi.n	8019354 <uxr_stream_id_from_raw+0x4c>
 8019310:	1e42      	subs	r2, r0, #1
 8019312:	f04f 0c01 	mov.w	ip, #1
 8019316:	b2d2      	uxtb	r2, r2
 8019318:	e001      	b.n	801931e <uxr_stream_id_from_raw+0x16>
 801931a:	4684      	mov	ip, r0
 801931c:	4602      	mov	r2, r0
 801931e:	2300      	movs	r3, #0
 8019320:	f360 0307 	bfi	r3, r0, #0, #8
 8019324:	2000      	movs	r0, #0
 8019326:	f362 230f 	bfi	r3, r2, #8, #8
 801932a:	f36c 4317 	bfi	r3, ip, #16, #8
 801932e:	f361 631f 	bfi	r3, r1, #24, #8
 8019332:	fa5f fc83 	uxtb.w	ip, r3
 8019336:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801933a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801933e:	0e1b      	lsrs	r3, r3, #24
 8019340:	f36c 0007 	bfi	r0, ip, #0, #8
 8019344:	f361 200f 	bfi	r0, r1, #8, #8
 8019348:	f362 4017 	bfi	r0, r2, #16, #8
 801934c:	f363 601f 	bfi	r0, r3, #24, #8
 8019350:	b002      	add	sp, #8
 8019352:	4770      	bx	lr
 8019354:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8019358:	f04f 0c02 	mov.w	ip, #2
 801935c:	e7df      	b.n	801931e <uxr_stream_id_from_raw+0x16>
 801935e:	bf00      	nop

08019360 <uxr_init_stream_storage>:
 8019360:	2300      	movs	r3, #0
 8019362:	7403      	strb	r3, [r0, #16]
 8019364:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8019368:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801936c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8019370:	4770      	bx	lr
 8019372:	bf00      	nop

08019374 <uxr_reset_stream_storage>:
 8019374:	b570      	push	{r4, r5, r6, lr}
 8019376:	7c03      	ldrb	r3, [r0, #16]
 8019378:	4604      	mov	r4, r0
 801937a:	b14b      	cbz	r3, 8019390 <uxr_reset_stream_storage+0x1c>
 801937c:	4606      	mov	r6, r0
 801937e:	2500      	movs	r5, #0
 8019380:	4630      	mov	r0, r6
 8019382:	3501      	adds	r5, #1
 8019384:	f007 f9a4 	bl	80206d0 <uxr_reset_output_best_effort_stream>
 8019388:	7c23      	ldrb	r3, [r4, #16]
 801938a:	3610      	adds	r6, #16
 801938c:	42ab      	cmp	r3, r5
 801938e:	d8f7      	bhi.n	8019380 <uxr_reset_stream_storage+0xc>
 8019390:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019394:	b15b      	cbz	r3, 80193ae <uxr_reset_stream_storage+0x3a>
 8019396:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801939a:	2500      	movs	r5, #0
 801939c:	4630      	mov	r0, r6
 801939e:	3501      	adds	r5, #1
 80193a0:	f006 ff9c 	bl	80202dc <uxr_reset_input_best_effort_stream>
 80193a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80193a8:	3602      	adds	r6, #2
 80193aa:	42ab      	cmp	r3, r5
 80193ac:	d8f6      	bhi.n	801939c <uxr_reset_stream_storage+0x28>
 80193ae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80193b2:	b15b      	cbz	r3, 80193cc <uxr_reset_stream_storage+0x58>
 80193b4:	f104 0618 	add.w	r6, r4, #24
 80193b8:	2500      	movs	r5, #0
 80193ba:	4630      	mov	r0, r6
 80193bc:	3501      	adds	r5, #1
 80193be:	f007 fa33 	bl	8020828 <uxr_reset_output_reliable_stream>
 80193c2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80193c6:	3628      	adds	r6, #40	@ 0x28
 80193c8:	42ab      	cmp	r3, r5
 80193ca:	d8f6      	bhi.n	80193ba <uxr_reset_stream_storage+0x46>
 80193cc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80193d0:	b15b      	cbz	r3, 80193ea <uxr_reset_stream_storage+0x76>
 80193d2:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80193d6:	2500      	movs	r5, #0
 80193d8:	4630      	mov	r0, r6
 80193da:	3501      	adds	r5, #1
 80193dc:	f006 ffea 	bl	80203b4 <uxr_reset_input_reliable_stream>
 80193e0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80193e4:	3618      	adds	r6, #24
 80193e6:	42ab      	cmp	r3, r5
 80193e8:	d8f6      	bhi.n	80193d8 <uxr_reset_stream_storage+0x64>
 80193ea:	bd70      	pop	{r4, r5, r6, pc}

080193ec <uxr_add_output_best_effort_buffer>:
 80193ec:	b510      	push	{r4, lr}
 80193ee:	7c04      	ldrb	r4, [r0, #16]
 80193f0:	b082      	sub	sp, #8
 80193f2:	f104 0c01 	add.w	ip, r4, #1
 80193f6:	f880 c010 	strb.w	ip, [r0, #16]
 80193fa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80193fe:	f007 f95d 	bl	80206bc <uxr_init_output_best_effort_stream>
 8019402:	2201      	movs	r2, #1
 8019404:	4620      	mov	r0, r4
 8019406:	4611      	mov	r1, r2
 8019408:	b002      	add	sp, #8
 801940a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801940e:	f7ff bf4d 	b.w	80192ac <uxr_stream_id>
 8019412:	bf00      	nop

08019414 <uxr_add_output_reliable_buffer>:
 8019414:	b510      	push	{r4, lr}
 8019416:	b084      	sub	sp, #16
 8019418:	4684      	mov	ip, r0
 801941a:	2028      	movs	r0, #40	@ 0x28
 801941c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019420:	9400      	str	r4, [sp, #0]
 8019422:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8019426:	fb00 c004 	mla	r0, r0, r4, ip
 801942a:	f104 0e01 	add.w	lr, r4, #1
 801942e:	3018      	adds	r0, #24
 8019430:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8019434:	f007 f9c2 	bl	80207bc <uxr_init_output_reliable_stream>
 8019438:	2201      	movs	r2, #1
 801943a:	2102      	movs	r1, #2
 801943c:	4620      	mov	r0, r4
 801943e:	b004      	add	sp, #16
 8019440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019444:	f7ff bf32 	b.w	80192ac <uxr_stream_id>

08019448 <uxr_add_input_best_effort_buffer>:
 8019448:	b510      	push	{r4, lr}
 801944a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801944e:	b082      	sub	sp, #8
 8019450:	1c62      	adds	r2, r4, #1
 8019452:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8019456:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801945a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801945e:	f006 ff39 	bl	80202d4 <uxr_init_input_best_effort_stream>
 8019462:	2200      	movs	r2, #0
 8019464:	2101      	movs	r1, #1
 8019466:	4620      	mov	r0, r4
 8019468:	b002      	add	sp, #8
 801946a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801946e:	f7ff bf1d 	b.w	80192ac <uxr_stream_id>
 8019472:	bf00      	nop

08019474 <uxr_add_input_reliable_buffer>:
 8019474:	b510      	push	{r4, lr}
 8019476:	b084      	sub	sp, #16
 8019478:	4684      	mov	ip, r0
 801947a:	2018      	movs	r0, #24
 801947c:	9c06      	ldr	r4, [sp, #24]
 801947e:	9400      	str	r4, [sp, #0]
 8019480:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8019484:	fb00 c004 	mla	r0, r0, r4, ip
 8019488:	f104 0e01 	add.w	lr, r4, #1
 801948c:	3048      	adds	r0, #72	@ 0x48
 801948e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8019492:	f006 ff69 	bl	8020368 <uxr_init_input_reliable_stream>
 8019496:	2200      	movs	r2, #0
 8019498:	2102      	movs	r1, #2
 801949a:	4620      	mov	r0, r4
 801949c:	b004      	add	sp, #16
 801949e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194a2:	f7ff bf03 	b.w	80192ac <uxr_stream_id>
 80194a6:	bf00      	nop

080194a8 <uxr_get_output_best_effort_stream>:
 80194a8:	7c03      	ldrb	r3, [r0, #16]
 80194aa:	428b      	cmp	r3, r1
 80194ac:	bf8c      	ite	hi
 80194ae:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80194b2:	2000      	movls	r0, #0
 80194b4:	4770      	bx	lr
 80194b6:	bf00      	nop

080194b8 <uxr_get_output_reliable_stream>:
 80194b8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80194bc:	428b      	cmp	r3, r1
 80194be:	d904      	bls.n	80194ca <uxr_get_output_reliable_stream+0x12>
 80194c0:	2328      	movs	r3, #40	@ 0x28
 80194c2:	fb03 0001 	mla	r0, r3, r1, r0
 80194c6:	3018      	adds	r0, #24
 80194c8:	4770      	bx	lr
 80194ca:	2000      	movs	r0, #0
 80194cc:	4770      	bx	lr
 80194ce:	bf00      	nop

080194d0 <uxr_get_input_best_effort_stream>:
 80194d0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80194d4:	428b      	cmp	r3, r1
 80194d6:	d903      	bls.n	80194e0 <uxr_get_input_best_effort_stream+0x10>
 80194d8:	3121      	adds	r1, #33	@ 0x21
 80194da:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80194de:	4770      	bx	lr
 80194e0:	2000      	movs	r0, #0
 80194e2:	4770      	bx	lr

080194e4 <uxr_get_input_reliable_stream>:
 80194e4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80194e8:	428b      	cmp	r3, r1
 80194ea:	d904      	bls.n	80194f6 <uxr_get_input_reliable_stream+0x12>
 80194ec:	2318      	movs	r3, #24
 80194ee:	fb03 0001 	mla	r0, r3, r1, r0
 80194f2:	3048      	adds	r0, #72	@ 0x48
 80194f4:	4770      	bx	lr
 80194f6:	2000      	movs	r0, #0
 80194f8:	4770      	bx	lr
 80194fa:	bf00      	nop

080194fc <uxr_output_streams_confirmed>:
 80194fc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019500:	b183      	cbz	r3, 8019524 <uxr_output_streams_confirmed+0x28>
 8019502:	b570      	push	{r4, r5, r6, lr}
 8019504:	4606      	mov	r6, r0
 8019506:	f100 0518 	add.w	r5, r0, #24
 801950a:	2400      	movs	r4, #0
 801950c:	e000      	b.n	8019510 <uxr_output_streams_confirmed+0x14>
 801950e:	b140      	cbz	r0, 8019522 <uxr_output_streams_confirmed+0x26>
 8019510:	4628      	mov	r0, r5
 8019512:	3401      	adds	r4, #1
 8019514:	f007 fbfc 	bl	8020d10 <uxr_is_output_up_to_date>
 8019518:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801951c:	3528      	adds	r5, #40	@ 0x28
 801951e:	42a3      	cmp	r3, r4
 8019520:	d8f5      	bhi.n	801950e <uxr_output_streams_confirmed+0x12>
 8019522:	bd70      	pop	{r4, r5, r6, pc}
 8019524:	2001      	movs	r0, #1
 8019526:	4770      	bx	lr

08019528 <uxr_buffer_submessage_header>:
 8019528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801952a:	460e      	mov	r6, r1
 801952c:	2104      	movs	r1, #4
 801952e:	4604      	mov	r4, r0
 8019530:	4615      	mov	r5, r2
 8019532:	461f      	mov	r7, r3
 8019534:	f7fa fea2 	bl	801427c <ucdr_align_to>
 8019538:	2301      	movs	r3, #1
 801953a:	4631      	mov	r1, r6
 801953c:	4620      	mov	r0, r4
 801953e:	ea47 0203 	orr.w	r2, r7, r3
 8019542:	7523      	strb	r3, [r4, #20]
 8019544:	462b      	mov	r3, r5
 8019546:	f000 fa29 	bl	801999c <uxr_serialize_submessage_header>
 801954a:	4620      	mov	r0, r4
 801954c:	f7fa feac 	bl	80142a8 <ucdr_buffer_remaining>
 8019550:	42a8      	cmp	r0, r5
 8019552:	bf34      	ite	cc
 8019554:	2000      	movcc	r0, #0
 8019556:	2001      	movcs	r0, #1
 8019558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801955a:	bf00      	nop

0801955c <uxr_read_submessage_header>:
 801955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019560:	4604      	mov	r4, r0
 8019562:	460d      	mov	r5, r1
 8019564:	2104      	movs	r1, #4
 8019566:	4616      	mov	r6, r2
 8019568:	4698      	mov	r8, r3
 801956a:	f7fa fe87 	bl	801427c <ucdr_align_to>
 801956e:	4620      	mov	r0, r4
 8019570:	f7fa fe9a 	bl	80142a8 <ucdr_buffer_remaining>
 8019574:	2803      	cmp	r0, #3
 8019576:	bf8c      	ite	hi
 8019578:	2701      	movhi	r7, #1
 801957a:	2700      	movls	r7, #0
 801957c:	d802      	bhi.n	8019584 <uxr_read_submessage_header+0x28>
 801957e:	4638      	mov	r0, r7
 8019580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019584:	4633      	mov	r3, r6
 8019586:	4642      	mov	r2, r8
 8019588:	4620      	mov	r0, r4
 801958a:	4629      	mov	r1, r5
 801958c:	f000 fa1a 	bl	80199c4 <uxr_deserialize_submessage_header>
 8019590:	f898 3000 	ldrb.w	r3, [r8]
 8019594:	4638      	mov	r0, r7
 8019596:	f003 0201 	and.w	r2, r3, #1
 801959a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801959e:	f888 3000 	strb.w	r3, [r8]
 80195a2:	7522      	strb	r2, [r4, #20]
 80195a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080195a8 <uxr_submessage_padding>:
 80195a8:	f010 0003 	ands.w	r0, r0, #3
 80195ac:	bf18      	it	ne
 80195ae:	f1c0 0004 	rsbne	r0, r0, #4
 80195b2:	4770      	bx	lr

080195b4 <uxr_millis>:
 80195b4:	b510      	push	{r4, lr}
 80195b6:	b084      	sub	sp, #16
 80195b8:	2001      	movs	r0, #1
 80195ba:	4669      	mov	r1, sp
 80195bc:	f7e8 fec4 	bl	8002348 <clock_gettime>
 80195c0:	4908      	ldr	r1, [pc, #32]	@ (80195e4 <uxr_millis+0x30>)
 80195c2:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80195c6:	fba0 0301 	umull	r0, r3, r0, r1
 80195ca:	1900      	adds	r0, r0, r4
 80195cc:	fb01 3102 	mla	r1, r1, r2, r3
 80195d0:	4a05      	ldr	r2, [pc, #20]	@ (80195e8 <uxr_millis+0x34>)
 80195d2:	f04f 0300 	mov.w	r3, #0
 80195d6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80195da:	f7e6 fee9 	bl	80003b0 <__aeabi_ldivmod>
 80195de:	b004      	add	sp, #16
 80195e0:	bd10      	pop	{r4, pc}
 80195e2:	bf00      	nop
 80195e4:	3b9aca00 	.word	0x3b9aca00
 80195e8:	000f4240 	.word	0x000f4240

080195ec <uxr_nanos>:
 80195ec:	b510      	push	{r4, lr}
 80195ee:	b084      	sub	sp, #16
 80195f0:	2001      	movs	r0, #1
 80195f2:	4669      	mov	r1, sp
 80195f4:	f7e8 fea8 	bl	8002348 <clock_gettime>
 80195f8:	4a06      	ldr	r2, [pc, #24]	@ (8019614 <uxr_nanos+0x28>)
 80195fa:	9800      	ldr	r0, [sp, #0]
 80195fc:	9902      	ldr	r1, [sp, #8]
 80195fe:	fba0 0302 	umull	r0, r3, r0, r2
 8019602:	9c01      	ldr	r4, [sp, #4]
 8019604:	1840      	adds	r0, r0, r1
 8019606:	fb02 3304 	mla	r3, r2, r4, r3
 801960a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801960e:	b004      	add	sp, #16
 8019610:	bd10      	pop	{r4, pc}
 8019612:	bf00      	nop
 8019614:	3b9aca00 	.word	0x3b9aca00

08019618 <on_full_output_buffer_fragmented>:
 8019618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801961c:	460c      	mov	r4, r1
 801961e:	b08a      	sub	sp, #40	@ 0x28
 8019620:	4606      	mov	r6, r0
 8019622:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8019626:	f104 0008 	add.w	r0, r4, #8
 801962a:	f7ff ff45 	bl	80194b8 <uxr_get_output_reliable_stream>
 801962e:	4605      	mov	r5, r0
 8019630:	f007 fb78 	bl	8020d24 <get_available_free_slots>
 8019634:	b968      	cbnz	r0, 8019652 <on_full_output_buffer_fragmented+0x3a>
 8019636:	4620      	mov	r0, r4
 8019638:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801963c:	4798      	blx	r3
 801963e:	b918      	cbnz	r0, 8019648 <on_full_output_buffer_fragmented+0x30>
 8019640:	2001      	movs	r0, #1
 8019642:	b00a      	add	sp, #40	@ 0x28
 8019644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019648:	4628      	mov	r0, r5
 801964a:	f007 fb6b 	bl	8020d24 <get_available_free_slots>
 801964e:	2800      	cmp	r0, #0
 8019650:	d0f6      	beq.n	8019640 <on_full_output_buffer_fragmented+0x28>
 8019652:	8929      	ldrh	r1, [r5, #8]
 8019654:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8019658:	89eb      	ldrh	r3, [r5, #14]
 801965a:	7b28      	ldrb	r0, [r5, #12]
 801965c:	686f      	ldr	r7, [r5, #4]
 801965e:	1a12      	subs	r2, r2, r0
 8019660:	fbb3 f0f1 	udiv	r0, r3, r1
 8019664:	fbb7 f7f1 	udiv	r7, r7, r1
 8019668:	fb01 3110 	mls	r1, r1, r0, r3
 801966c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8019670:	b289      	uxth	r1, r1
 8019672:	fb07 f101 	mul.w	r1, r7, r1
 8019676:	3f04      	subs	r7, #4
 8019678:	443a      	add	r2, r7
 801967a:	3104      	adds	r1, #4
 801967c:	fa1f f882 	uxth.w	r8, r2
 8019680:	463a      	mov	r2, r7
 8019682:	eba3 0308 	sub.w	r3, r3, r8
 8019686:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801968a:	682b      	ldr	r3, [r5, #0]
 801968c:	4419      	add	r1, r3
 801968e:	2300      	movs	r3, #0
 8019690:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019694:	9000      	str	r0, [sp, #0]
 8019696:	a802      	add	r0, sp, #8
 8019698:	f7fa fdc2 	bl	8014220 <ucdr_init_buffer_origin_offset>
 801969c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80196a0:	f102 0308 	add.w	r3, r2, #8
 80196a4:	42bb      	cmp	r3, r7
 80196a6:	d927      	bls.n	80196f8 <on_full_output_buffer_fragmented+0xe0>
 80196a8:	4642      	mov	r2, r8
 80196aa:	2300      	movs	r3, #0
 80196ac:	210d      	movs	r1, #13
 80196ae:	a802      	add	r0, sp, #8
 80196b0:	f7ff ff3a 	bl	8019528 <uxr_buffer_submessage_header>
 80196b4:	8929      	ldrh	r1, [r5, #8]
 80196b6:	89eb      	ldrh	r3, [r5, #14]
 80196b8:	686a      	ldr	r2, [r5, #4]
 80196ba:	fbb3 f0f1 	udiv	r0, r3, r1
 80196be:	fbb2 f2f1 	udiv	r2, r2, r1
 80196c2:	fb01 3310 	mls	r3, r1, r0, r3
 80196c6:	b29b      	uxth	r3, r3
 80196c8:	fb02 f303 	mul.w	r3, r2, r3
 80196cc:	682a      	ldr	r2, [r5, #0]
 80196ce:	50d7      	str	r7, [r2, r3]
 80196d0:	2101      	movs	r1, #1
 80196d2:	89e8      	ldrh	r0, [r5, #14]
 80196d4:	f007 fc78 	bl	8020fc8 <uxr_seq_num_add>
 80196d8:	9904      	ldr	r1, [sp, #16]
 80196da:	9a03      	ldr	r2, [sp, #12]
 80196dc:	81e8      	strh	r0, [r5, #14]
 80196de:	4630      	mov	r0, r6
 80196e0:	1a52      	subs	r2, r2, r1
 80196e2:	f7fa fdaf 	bl	8014244 <ucdr_init_buffer>
 80196e6:	4630      	mov	r0, r6
 80196e8:	4622      	mov	r2, r4
 80196ea:	490f      	ldr	r1, [pc, #60]	@ (8019728 <on_full_output_buffer_fragmented+0x110>)
 80196ec:	f7fa fd7e 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 80196f0:	2000      	movs	r0, #0
 80196f2:	b00a      	add	sp, #40	@ 0x28
 80196f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196f8:	b292      	uxth	r2, r2
 80196fa:	2302      	movs	r3, #2
 80196fc:	210d      	movs	r1, #13
 80196fe:	a802      	add	r0, sp, #8
 8019700:	f7ff ff12 	bl	8019528 <uxr_buffer_submessage_header>
 8019704:	8928      	ldrh	r0, [r5, #8]
 8019706:	89eb      	ldrh	r3, [r5, #14]
 8019708:	6869      	ldr	r1, [r5, #4]
 801970a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801970e:	fbb3 f7f0 	udiv	r7, r3, r0
 8019712:	fbb1 f1f0 	udiv	r1, r1, r0
 8019716:	fb00 3317 	mls	r3, r0, r7, r3
 801971a:	3208      	adds	r2, #8
 801971c:	b29b      	uxth	r3, r3
 801971e:	fb01 f303 	mul.w	r3, r1, r3
 8019722:	6829      	ldr	r1, [r5, #0]
 8019724:	50ca      	str	r2, [r1, r3]
 8019726:	e7d3      	b.n	80196d0 <on_full_output_buffer_fragmented+0xb8>
 8019728:	08019619 	.word	0x08019619

0801972c <uxr_prepare_output_stream>:
 801972c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801972e:	b087      	sub	sp, #28
 8019730:	2707      	movs	r7, #7
 8019732:	2500      	movs	r5, #0
 8019734:	461c      	mov	r4, r3
 8019736:	4606      	mov	r6, r0
 8019738:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801973c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801973e:	e9cd 7500 	strd	r7, r5, [sp]
 8019742:	3204      	adds	r2, #4
 8019744:	f7fe ffc8 	bl	80186d8 <uxr_prepare_stream_to_write_submessage>
 8019748:	f080 0201 	eor.w	r2, r0, #1
 801974c:	b2d2      	uxtb	r2, r2
 801974e:	75a2      	strb	r2, [r4, #22]
 8019750:	b112      	cbz	r2, 8019758 <uxr_prepare_output_stream+0x2c>
 8019752:	4628      	mov	r0, r5
 8019754:	b007      	add	sp, #28
 8019756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019758:	aa05      	add	r2, sp, #20
 801975a:	9902      	ldr	r1, [sp, #8]
 801975c:	4630      	mov	r0, r6
 801975e:	f7ff f8f7 	bl	8018950 <uxr_init_base_object_request>
 8019762:	a905      	add	r1, sp, #20
 8019764:	4605      	mov	r5, r0
 8019766:	4620      	mov	r0, r4
 8019768:	f001 f8d2 	bl	801a910 <uxr_serialize_WRITE_DATA_Payload_Data>
 801976c:	69a6      	ldr	r6, [r4, #24]
 801976e:	69e7      	ldr	r7, [r4, #28]
 8019770:	4620      	mov	r0, r4
 8019772:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8019776:	1a52      	subs	r2, r2, r1
 8019778:	f7fa fd64 	bl	8014244 <ucdr_init_buffer>
 801977c:	4620      	mov	r0, r4
 801977e:	463a      	mov	r2, r7
 8019780:	4631      	mov	r1, r6
 8019782:	f7fa fd33 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 8019786:	4628      	mov	r0, r5
 8019788:	b007      	add	sp, #28
 801978a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801978c <uxr_prepare_output_stream_fragmented>:
 801978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019790:	b091      	sub	sp, #68	@ 0x44
 8019792:	4605      	mov	r5, r0
 8019794:	3008      	adds	r0, #8
 8019796:	461e      	mov	r6, r3
 8019798:	9105      	str	r1, [sp, #20]
 801979a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801979e:	9204      	str	r2, [sp, #16]
 80197a0:	f7ff fe8a 	bl	80194b8 <uxr_get_output_reliable_stream>
 80197a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80197a8:	2b01      	cmp	r3, #1
 80197aa:	f000 8093 	beq.w	80198d4 <uxr_prepare_output_stream_fragmented+0x148>
 80197ae:	4604      	mov	r4, r0
 80197b0:	2800      	cmp	r0, #0
 80197b2:	f000 808f 	beq.w	80198d4 <uxr_prepare_output_stream_fragmented+0x148>
 80197b6:	f007 fab5 	bl	8020d24 <get_available_free_slots>
 80197ba:	2800      	cmp	r0, #0
 80197bc:	f000 8085 	beq.w	80198ca <uxr_prepare_output_stream_fragmented+0x13e>
 80197c0:	8923      	ldrh	r3, [r4, #8]
 80197c2:	89e7      	ldrh	r7, [r4, #14]
 80197c4:	6862      	ldr	r2, [r4, #4]
 80197c6:	fbb7 f9f3 	udiv	r9, r7, r3
 80197ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80197ce:	fb03 7919 	mls	r9, r3, r9, r7
 80197d2:	6823      	ldr	r3, [r4, #0]
 80197d4:	f1a2 0b04 	sub.w	fp, r2, #4
 80197d8:	9203      	str	r2, [sp, #12]
 80197da:	fa1f f989 	uxth.w	r9, r9
 80197de:	fb02 f909 	mul.w	r9, r2, r9
 80197e2:	f109 0904 	add.w	r9, r9, #4
 80197e6:	4499      	add	r9, r3
 80197e8:	7b23      	ldrb	r3, [r4, #12]
 80197ea:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80197ee:	4543      	cmp	r3, r8
 80197f0:	d37c      	bcc.n	80198ec <uxr_prepare_output_stream_fragmented+0x160>
 80197f2:	f1ab 0a04 	sub.w	sl, fp, #4
 80197f6:	465a      	mov	r2, fp
 80197f8:	4649      	mov	r1, r9
 80197fa:	a808      	add	r0, sp, #32
 80197fc:	ebaa 0a03 	sub.w	sl, sl, r3
 8019800:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8019802:	f8cd 8000 	str.w	r8, [sp]
 8019806:	3308      	adds	r3, #8
 8019808:	fa1f fa8a 	uxth.w	sl, sl
 801980c:	9302      	str	r3, [sp, #8]
 801980e:	2300      	movs	r3, #0
 8019810:	f7fa fd06 	bl	8014220 <ucdr_init_buffer_origin_offset>
 8019814:	9b02      	ldr	r3, [sp, #8]
 8019816:	4652      	mov	r2, sl
 8019818:	210d      	movs	r1, #13
 801981a:	455b      	cmp	r3, fp
 801981c:	bf34      	ite	cc
 801981e:	2302      	movcc	r3, #2
 8019820:	2300      	movcs	r3, #0
 8019822:	a808      	add	r0, sp, #32
 8019824:	f7ff fe80 	bl	8019528 <uxr_buffer_submessage_header>
 8019828:	8921      	ldrh	r1, [r4, #8]
 801982a:	6863      	ldr	r3, [r4, #4]
 801982c:	4638      	mov	r0, r7
 801982e:	fbb7 f2f1 	udiv	r2, r7, r1
 8019832:	fbb3 f3f1 	udiv	r3, r3, r1
 8019836:	fb01 7212 	mls	r2, r1, r2, r7
 801983a:	2101      	movs	r1, #1
 801983c:	b292      	uxth	r2, r2
 801983e:	fb02 f303 	mul.w	r3, r2, r3
 8019842:	6822      	ldr	r2, [r4, #0]
 8019844:	f842 b003 	str.w	fp, [r2, r3]
 8019848:	f007 fbbe 	bl	8020fc8 <uxr_seq_num_add>
 801984c:	9b03      	ldr	r3, [sp, #12]
 801984e:	f108 0104 	add.w	r1, r8, #4
 8019852:	4607      	mov	r7, r0
 8019854:	f1a3 0208 	sub.w	r2, r3, #8
 8019858:	4630      	mov	r0, r6
 801985a:	4449      	add	r1, r9
 801985c:	eba2 0208 	sub.w	r2, r2, r8
 8019860:	f7fa fcf0 	bl	8014244 <ucdr_init_buffer>
 8019864:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8019866:	2107      	movs	r1, #7
 8019868:	81e7      	strh	r7, [r4, #14]
 801986a:	1d1a      	adds	r2, r3, #4
 801986c:	2300      	movs	r3, #0
 801986e:	4630      	mov	r0, r6
 8019870:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8019874:	bf28      	it	cs
 8019876:	461a      	movcs	r2, r3
 8019878:	b292      	uxth	r2, r2
 801987a:	f7ff fe55 	bl	8019528 <uxr_buffer_submessage_header>
 801987e:	aa07      	add	r2, sp, #28
 8019880:	9904      	ldr	r1, [sp, #16]
 8019882:	4628      	mov	r0, r5
 8019884:	f7ff f864 	bl	8018950 <uxr_init_base_object_request>
 8019888:	4604      	mov	r4, r0
 801988a:	b320      	cbz	r0, 80198d6 <uxr_prepare_output_stream_fragmented+0x14a>
 801988c:	a907      	add	r1, sp, #28
 801988e:	4630      	mov	r0, r6
 8019890:	f001 f83e 	bl	801a910 <uxr_serialize_WRITE_DATA_Payload_Data>
 8019894:	4630      	mov	r0, r6
 8019896:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801989a:	1a52      	subs	r2, r2, r1
 801989c:	f7fa fcd2 	bl	8014244 <ucdr_init_buffer>
 80198a0:	9b05      	ldr	r3, [sp, #20]
 80198a2:	9a02      	ldr	r2, [sp, #8]
 80198a4:	4630      	mov	r0, r6
 80198a6:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80198aa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80198ac:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 80198b0:	462a      	mov	r2, r5
 80198b2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80198b6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80198b8:	4918      	ldr	r1, [pc, #96]	@ (801991c <uxr_prepare_output_stream_fragmented+0x190>)
 80198ba:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80198be:	f7fa fc95 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 80198c2:	4620      	mov	r0, r4
 80198c4:	b011      	add	sp, #68	@ 0x44
 80198c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ca:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80198cc:	4628      	mov	r0, r5
 80198ce:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80198d0:	4798      	blx	r3
 80198d2:	b920      	cbnz	r0, 80198de <uxr_prepare_output_stream_fragmented+0x152>
 80198d4:	2400      	movs	r4, #0
 80198d6:	4620      	mov	r0, r4
 80198d8:	b011      	add	sp, #68	@ 0x44
 80198da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198de:	4620      	mov	r0, r4
 80198e0:	f007 fa20 	bl	8020d24 <get_available_free_slots>
 80198e4:	2800      	cmp	r0, #0
 80198e6:	f47f af6b 	bne.w	80197c0 <uxr_prepare_output_stream_fragmented+0x34>
 80198ea:	e7f3      	b.n	80198d4 <uxr_prepare_output_stream_fragmented+0x148>
 80198ec:	4638      	mov	r0, r7
 80198ee:	2101      	movs	r1, #1
 80198f0:	f007 fb6a 	bl	8020fc8 <uxr_seq_num_add>
 80198f4:	8922      	ldrh	r2, [r4, #8]
 80198f6:	6863      	ldr	r3, [r4, #4]
 80198f8:	4607      	mov	r7, r0
 80198fa:	fbb3 f9f2 	udiv	r9, r3, r2
 80198fe:	fbb0 f3f2 	udiv	r3, r0, r2
 8019902:	fb02 0313 	mls	r3, r2, r3, r0
 8019906:	b29b      	uxth	r3, r3
 8019908:	fb03 f909 	mul.w	r9, r3, r9
 801990c:	6823      	ldr	r3, [r4, #0]
 801990e:	f109 0904 	add.w	r9, r9, #4
 8019912:	4499      	add	r9, r3
 8019914:	7b23      	ldrb	r3, [r4, #12]
 8019916:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801991a:	e76a      	b.n	80197f2 <uxr_prepare_output_stream_fragmented+0x66>
 801991c:	08019619 	.word	0x08019619

08019920 <uxr_serialize_message_header>:
 8019920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019922:	4616      	mov	r6, r2
 8019924:	b083      	sub	sp, #12
 8019926:	4604      	mov	r4, r0
 8019928:	460d      	mov	r5, r1
 801992a:	9301      	str	r3, [sp, #4]
 801992c:	9f08      	ldr	r7, [sp, #32]
 801992e:	f7f9 fa1f 	bl	8012d70 <ucdr_serialize_uint8_t>
 8019932:	4631      	mov	r1, r6
 8019934:	4620      	mov	r0, r4
 8019936:	f7f9 fa1b 	bl	8012d70 <ucdr_serialize_uint8_t>
 801993a:	9a01      	ldr	r2, [sp, #4]
 801993c:	2101      	movs	r1, #1
 801993e:	4620      	mov	r0, r4
 8019940:	f7f9 fac2 	bl	8012ec8 <ucdr_serialize_endian_uint16_t>
 8019944:	062b      	lsls	r3, r5, #24
 8019946:	d501      	bpl.n	801994c <uxr_serialize_message_header+0x2c>
 8019948:	b003      	add	sp, #12
 801994a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801994c:	2204      	movs	r2, #4
 801994e:	4639      	mov	r1, r7
 8019950:	4620      	mov	r0, r4
 8019952:	b003      	add	sp, #12
 8019954:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019958:	f006 bbd8 	b.w	802010c <ucdr_serialize_array_uint8_t>

0801995c <uxr_deserialize_message_header>:
 801995c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801995e:	4616      	mov	r6, r2
 8019960:	b083      	sub	sp, #12
 8019962:	4604      	mov	r4, r0
 8019964:	460d      	mov	r5, r1
 8019966:	9301      	str	r3, [sp, #4]
 8019968:	9f08      	ldr	r7, [sp, #32]
 801996a:	f7f9 fa17 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801996e:	4631      	mov	r1, r6
 8019970:	4620      	mov	r0, r4
 8019972:	f7f9 fa13 	bl	8012d9c <ucdr_deserialize_uint8_t>
 8019976:	9a01      	ldr	r2, [sp, #4]
 8019978:	2101      	movs	r1, #1
 801997a:	4620      	mov	r0, r4
 801997c:	f7f9 fb98 	bl	80130b0 <ucdr_deserialize_endian_uint16_t>
 8019980:	f995 3000 	ldrsb.w	r3, [r5]
 8019984:	2b00      	cmp	r3, #0
 8019986:	da01      	bge.n	801998c <uxr_deserialize_message_header+0x30>
 8019988:	b003      	add	sp, #12
 801998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801998c:	2204      	movs	r2, #4
 801998e:	4639      	mov	r1, r7
 8019990:	4620      	mov	r0, r4
 8019992:	b003      	add	sp, #12
 8019994:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019998:	f006 bc1c 	b.w	80201d4 <ucdr_deserialize_array_uint8_t>

0801999c <uxr_serialize_submessage_header>:
 801999c:	b530      	push	{r4, r5, lr}
 801999e:	4615      	mov	r5, r2
 80199a0:	b083      	sub	sp, #12
 80199a2:	4604      	mov	r4, r0
 80199a4:	9301      	str	r3, [sp, #4]
 80199a6:	f7f9 f9e3 	bl	8012d70 <ucdr_serialize_uint8_t>
 80199aa:	4629      	mov	r1, r5
 80199ac:	4620      	mov	r0, r4
 80199ae:	f7f9 f9df 	bl	8012d70 <ucdr_serialize_uint8_t>
 80199b2:	9a01      	ldr	r2, [sp, #4]
 80199b4:	2101      	movs	r1, #1
 80199b6:	4620      	mov	r0, r4
 80199b8:	b003      	add	sp, #12
 80199ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80199be:	f7f9 ba83 	b.w	8012ec8 <ucdr_serialize_endian_uint16_t>
 80199c2:	bf00      	nop

080199c4 <uxr_deserialize_submessage_header>:
 80199c4:	b530      	push	{r4, r5, lr}
 80199c6:	4615      	mov	r5, r2
 80199c8:	b083      	sub	sp, #12
 80199ca:	4604      	mov	r4, r0
 80199cc:	9301      	str	r3, [sp, #4]
 80199ce:	f7f9 f9e5 	bl	8012d9c <ucdr_deserialize_uint8_t>
 80199d2:	4629      	mov	r1, r5
 80199d4:	4620      	mov	r0, r4
 80199d6:	f7f9 f9e1 	bl	8012d9c <ucdr_deserialize_uint8_t>
 80199da:	9a01      	ldr	r2, [sp, #4]
 80199dc:	2101      	movs	r1, #1
 80199de:	4620      	mov	r0, r4
 80199e0:	b003      	add	sp, #12
 80199e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80199e6:	f7f9 bb63 	b.w	80130b0 <ucdr_deserialize_endian_uint16_t>
 80199ea:	bf00      	nop

080199ec <uxr_serialize_CLIENT_Representation>:
 80199ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199f0:	2204      	movs	r2, #4
 80199f2:	460e      	mov	r6, r1
 80199f4:	4605      	mov	r5, r0
 80199f6:	f006 fb89 	bl	802010c <ucdr_serialize_array_uint8_t>
 80199fa:	4607      	mov	r7, r0
 80199fc:	2202      	movs	r2, #2
 80199fe:	1d31      	adds	r1, r6, #4
 8019a00:	4628      	mov	r0, r5
 8019a02:	f006 fb83 	bl	802010c <ucdr_serialize_array_uint8_t>
 8019a06:	4038      	ands	r0, r7
 8019a08:	2202      	movs	r2, #2
 8019a0a:	1db1      	adds	r1, r6, #6
 8019a0c:	b2c7      	uxtb	r7, r0
 8019a0e:	4628      	mov	r0, r5
 8019a10:	f006 fb7c 	bl	802010c <ucdr_serialize_array_uint8_t>
 8019a14:	2204      	movs	r2, #4
 8019a16:	4007      	ands	r7, r0
 8019a18:	f106 0108 	add.w	r1, r6, #8
 8019a1c:	4628      	mov	r0, r5
 8019a1e:	f006 fb75 	bl	802010c <ucdr_serialize_array_uint8_t>
 8019a22:	4007      	ands	r7, r0
 8019a24:	7b31      	ldrb	r1, [r6, #12]
 8019a26:	4628      	mov	r0, r5
 8019a28:	f7f9 f9a2 	bl	8012d70 <ucdr_serialize_uint8_t>
 8019a2c:	7b71      	ldrb	r1, [r6, #13]
 8019a2e:	4007      	ands	r7, r0
 8019a30:	4628      	mov	r0, r5
 8019a32:	f7f9 f96f 	bl	8012d14 <ucdr_serialize_bool>
 8019a36:	7b73      	ldrb	r3, [r6, #13]
 8019a38:	ea07 0800 	and.w	r8, r7, r0
 8019a3c:	b93b      	cbnz	r3, 8019a4e <uxr_serialize_CLIENT_Representation+0x62>
 8019a3e:	8bb1      	ldrh	r1, [r6, #28]
 8019a40:	4628      	mov	r0, r5
 8019a42:	f7f9 f9c1 	bl	8012dc8 <ucdr_serialize_uint16_t>
 8019a46:	ea08 0000 	and.w	r0, r8, r0
 8019a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a4e:	6931      	ldr	r1, [r6, #16]
 8019a50:	4628      	mov	r0, r5
 8019a52:	f7f9 fba3 	bl	801319c <ucdr_serialize_uint32_t>
 8019a56:	6933      	ldr	r3, [r6, #16]
 8019a58:	b1e3      	cbz	r3, 8019a94 <uxr_serialize_CLIENT_Representation+0xa8>
 8019a5a:	b1c0      	cbz	r0, 8019a8e <uxr_serialize_CLIENT_Representation+0xa2>
 8019a5c:	4637      	mov	r7, r6
 8019a5e:	f04f 0900 	mov.w	r9, #0
 8019a62:	e000      	b.n	8019a66 <uxr_serialize_CLIENT_Representation+0x7a>
 8019a64:	b19c      	cbz	r4, 8019a8e <uxr_serialize_CLIENT_Representation+0xa2>
 8019a66:	6979      	ldr	r1, [r7, #20]
 8019a68:	4628      	mov	r0, r5
 8019a6a:	f006 fc1b 	bl	80202a4 <ucdr_serialize_string>
 8019a6e:	69b9      	ldr	r1, [r7, #24]
 8019a70:	4604      	mov	r4, r0
 8019a72:	4628      	mov	r0, r5
 8019a74:	f006 fc16 	bl	80202a4 <ucdr_serialize_string>
 8019a78:	f109 0901 	add.w	r9, r9, #1
 8019a7c:	6933      	ldr	r3, [r6, #16]
 8019a7e:	4004      	ands	r4, r0
 8019a80:	3708      	adds	r7, #8
 8019a82:	4599      	cmp	r9, r3
 8019a84:	b2e4      	uxtb	r4, r4
 8019a86:	d3ed      	bcc.n	8019a64 <uxr_serialize_CLIENT_Representation+0x78>
 8019a88:	ea08 0804 	and.w	r8, r8, r4
 8019a8c:	e7d7      	b.n	8019a3e <uxr_serialize_CLIENT_Representation+0x52>
 8019a8e:	f04f 0800 	mov.w	r8, #0
 8019a92:	e7d4      	b.n	8019a3e <uxr_serialize_CLIENT_Representation+0x52>
 8019a94:	ea08 0800 	and.w	r8, r8, r0
 8019a98:	e7d1      	b.n	8019a3e <uxr_serialize_CLIENT_Representation+0x52>
 8019a9a:	bf00      	nop

08019a9c <uxr_deserialize_CLIENT_Representation>:
 8019a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019aa0:	2204      	movs	r2, #4
 8019aa2:	460c      	mov	r4, r1
 8019aa4:	4605      	mov	r5, r0
 8019aa6:	f006 fb95 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 8019aaa:	4607      	mov	r7, r0
 8019aac:	2202      	movs	r2, #2
 8019aae:	1d21      	adds	r1, r4, #4
 8019ab0:	4628      	mov	r0, r5
 8019ab2:	f006 fb8f 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 8019ab6:	4038      	ands	r0, r7
 8019ab8:	2202      	movs	r2, #2
 8019aba:	1da1      	adds	r1, r4, #6
 8019abc:	b2c6      	uxtb	r6, r0
 8019abe:	4628      	mov	r0, r5
 8019ac0:	f006 fb88 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 8019ac4:	2204      	movs	r2, #4
 8019ac6:	4006      	ands	r6, r0
 8019ac8:	f104 0108 	add.w	r1, r4, #8
 8019acc:	4628      	mov	r0, r5
 8019ace:	f006 fb81 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 8019ad2:	4006      	ands	r6, r0
 8019ad4:	f104 010c 	add.w	r1, r4, #12
 8019ad8:	4628      	mov	r0, r5
 8019ada:	f7f9 f95f 	bl	8012d9c <ucdr_deserialize_uint8_t>
 8019ade:	f104 010d 	add.w	r1, r4, #13
 8019ae2:	ea06 0700 	and.w	r7, r6, r0
 8019ae6:	4628      	mov	r0, r5
 8019ae8:	f7f9 f92a 	bl	8012d40 <ucdr_deserialize_bool>
 8019aec:	7b63      	ldrb	r3, [r4, #13]
 8019aee:	4007      	ands	r7, r0
 8019af0:	b93b      	cbnz	r3, 8019b02 <uxr_deserialize_CLIENT_Representation+0x66>
 8019af2:	f104 011c 	add.w	r1, r4, #28
 8019af6:	4628      	mov	r0, r5
 8019af8:	f7f9 fa66 	bl	8012fc8 <ucdr_deserialize_uint16_t>
 8019afc:	4038      	ands	r0, r7
 8019afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b02:	f104 0110 	add.w	r1, r4, #16
 8019b06:	4628      	mov	r0, r5
 8019b08:	f7f9 fc78 	bl	80133fc <ucdr_deserialize_uint32_t>
 8019b0c:	6923      	ldr	r3, [r4, #16]
 8019b0e:	2b01      	cmp	r3, #1
 8019b10:	d903      	bls.n	8019b1a <uxr_deserialize_CLIENT_Representation+0x7e>
 8019b12:	2301      	movs	r3, #1
 8019b14:	2700      	movs	r7, #0
 8019b16:	75ab      	strb	r3, [r5, #22]
 8019b18:	e7eb      	b.n	8019af2 <uxr_deserialize_CLIENT_Representation+0x56>
 8019b1a:	b30b      	cbz	r3, 8019b60 <uxr_deserialize_CLIENT_Representation+0xc4>
 8019b1c:	b1f0      	cbz	r0, 8019b5c <uxr_deserialize_CLIENT_Representation+0xc0>
 8019b1e:	46a0      	mov	r8, r4
 8019b20:	f04f 0900 	mov.w	r9, #0
 8019b24:	e000      	b.n	8019b28 <uxr_deserialize_CLIENT_Representation+0x8c>
 8019b26:	b1ce      	cbz	r6, 8019b5c <uxr_deserialize_CLIENT_Representation+0xc0>
 8019b28:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8019b2c:	f108 0808 	add.w	r8, r8, #8
 8019b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019b34:	4628      	mov	r0, r5
 8019b36:	f006 fbc5 	bl	80202c4 <ucdr_deserialize_string>
 8019b3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019b3e:	4606      	mov	r6, r0
 8019b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019b44:	4628      	mov	r0, r5
 8019b46:	f109 0901 	add.w	r9, r9, #1
 8019b4a:	f006 fbbb 	bl	80202c4 <ucdr_deserialize_string>
 8019b4e:	6923      	ldr	r3, [r4, #16]
 8019b50:	4006      	ands	r6, r0
 8019b52:	4599      	cmp	r9, r3
 8019b54:	b2f6      	uxtb	r6, r6
 8019b56:	d3e6      	bcc.n	8019b26 <uxr_deserialize_CLIENT_Representation+0x8a>
 8019b58:	4037      	ands	r7, r6
 8019b5a:	e7ca      	b.n	8019af2 <uxr_deserialize_CLIENT_Representation+0x56>
 8019b5c:	2700      	movs	r7, #0
 8019b5e:	e7c8      	b.n	8019af2 <uxr_deserialize_CLIENT_Representation+0x56>
 8019b60:	4007      	ands	r7, r0
 8019b62:	e7c6      	b.n	8019af2 <uxr_deserialize_CLIENT_Representation+0x56>

08019b64 <uxr_serialize_AGENT_Representation>:
 8019b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b68:	2204      	movs	r2, #4
 8019b6a:	460f      	mov	r7, r1
 8019b6c:	4605      	mov	r5, r0
 8019b6e:	f006 facd 	bl	802010c <ucdr_serialize_array_uint8_t>
 8019b72:	4604      	mov	r4, r0
 8019b74:	2202      	movs	r2, #2
 8019b76:	1d39      	adds	r1, r7, #4
 8019b78:	4628      	mov	r0, r5
 8019b7a:	f006 fac7 	bl	802010c <ucdr_serialize_array_uint8_t>
 8019b7e:	4020      	ands	r0, r4
 8019b80:	2202      	movs	r2, #2
 8019b82:	1db9      	adds	r1, r7, #6
 8019b84:	b2c4      	uxtb	r4, r0
 8019b86:	4628      	mov	r0, r5
 8019b88:	f006 fac0 	bl	802010c <ucdr_serialize_array_uint8_t>
 8019b8c:	7a39      	ldrb	r1, [r7, #8]
 8019b8e:	4004      	ands	r4, r0
 8019b90:	4628      	mov	r0, r5
 8019b92:	f7f9 f8bf 	bl	8012d14 <ucdr_serialize_bool>
 8019b96:	7a3b      	ldrb	r3, [r7, #8]
 8019b98:	ea00 0804 	and.w	r8, r0, r4
 8019b9c:	b913      	cbnz	r3, 8019ba4 <uxr_serialize_AGENT_Representation+0x40>
 8019b9e:	4640      	mov	r0, r8
 8019ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ba4:	68f9      	ldr	r1, [r7, #12]
 8019ba6:	4628      	mov	r0, r5
 8019ba8:	f7f9 faf8 	bl	801319c <ucdr_serialize_uint32_t>
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	b303      	cbz	r3, 8019bf2 <uxr_serialize_AGENT_Representation+0x8e>
 8019bb0:	b1d0      	cbz	r0, 8019be8 <uxr_serialize_AGENT_Representation+0x84>
 8019bb2:	463e      	mov	r6, r7
 8019bb4:	f04f 0900 	mov.w	r9, #0
 8019bb8:	e000      	b.n	8019bbc <uxr_serialize_AGENT_Representation+0x58>
 8019bba:	b1ac      	cbz	r4, 8019be8 <uxr_serialize_AGENT_Representation+0x84>
 8019bbc:	6931      	ldr	r1, [r6, #16]
 8019bbe:	4628      	mov	r0, r5
 8019bc0:	f006 fb70 	bl	80202a4 <ucdr_serialize_string>
 8019bc4:	6971      	ldr	r1, [r6, #20]
 8019bc6:	4604      	mov	r4, r0
 8019bc8:	4628      	mov	r0, r5
 8019bca:	f006 fb6b 	bl	80202a4 <ucdr_serialize_string>
 8019bce:	f109 0901 	add.w	r9, r9, #1
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	4004      	ands	r4, r0
 8019bd6:	3608      	adds	r6, #8
 8019bd8:	4599      	cmp	r9, r3
 8019bda:	b2e4      	uxtb	r4, r4
 8019bdc:	d3ed      	bcc.n	8019bba <uxr_serialize_AGENT_Representation+0x56>
 8019bde:	ea08 0804 	and.w	r8, r8, r4
 8019be2:	4640      	mov	r0, r8
 8019be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019be8:	f04f 0800 	mov.w	r8, #0
 8019bec:	4640      	mov	r0, r8
 8019bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bf2:	ea08 0800 	and.w	r8, r8, r0
 8019bf6:	e7d2      	b.n	8019b9e <uxr_serialize_AGENT_Representation+0x3a>

08019bf8 <uxr_serialize_DATAWRITER_Representation>:
 8019bf8:	b570      	push	{r4, r5, r6, lr}
 8019bfa:	460d      	mov	r5, r1
 8019bfc:	7809      	ldrb	r1, [r1, #0]
 8019bfe:	4606      	mov	r6, r0
 8019c00:	f7f9 f8b6 	bl	8012d70 <ucdr_serialize_uint8_t>
 8019c04:	4604      	mov	r4, r0
 8019c06:	b130      	cbz	r0, 8019c16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019c08:	782b      	ldrb	r3, [r5, #0]
 8019c0a:	2b02      	cmp	r3, #2
 8019c0c:	d00c      	beq.n	8019c28 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019c0e:	2b03      	cmp	r3, #3
 8019c10:	d010      	beq.n	8019c34 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8019c12:	2b01      	cmp	r3, #1
 8019c14:	d008      	beq.n	8019c28 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019c16:	2202      	movs	r2, #2
 8019c18:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019c1c:	4630      	mov	r0, r6
 8019c1e:	f006 fa75 	bl	802010c <ucdr_serialize_array_uint8_t>
 8019c22:	4020      	ands	r0, r4
 8019c24:	b2c0      	uxtb	r0, r0
 8019c26:	bd70      	pop	{r4, r5, r6, pc}
 8019c28:	6869      	ldr	r1, [r5, #4]
 8019c2a:	4630      	mov	r0, r6
 8019c2c:	f006 fb3a 	bl	80202a4 <ucdr_serialize_string>
 8019c30:	4604      	mov	r4, r0
 8019c32:	e7f0      	b.n	8019c16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019c34:	4629      	mov	r1, r5
 8019c36:	4630      	mov	r0, r6
 8019c38:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019c3c:	3104      	adds	r1, #4
 8019c3e:	f7fd f945 	bl	8016ecc <ucdr_serialize_sequence_uint8_t>
 8019c42:	4604      	mov	r4, r0
 8019c44:	e7e7      	b.n	8019c16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019c46:	bf00      	nop

08019c48 <uxr_serialize_ObjectVariant.part.0>:
 8019c48:	b570      	push	{r4, r5, r6, lr}
 8019c4a:	780b      	ldrb	r3, [r1, #0]
 8019c4c:	460c      	mov	r4, r1
 8019c4e:	4605      	mov	r5, r0
 8019c50:	3b01      	subs	r3, #1
 8019c52:	2b0d      	cmp	r3, #13
 8019c54:	d854      	bhi.n	8019d00 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019c56:	e8df f003 	tbb	[pc, r3]
 8019c5a:	0730      	.short	0x0730
 8019c5c:	07071b1b 	.word	0x07071b1b
 8019c60:	0c530707 	.word	0x0c530707
 8019c64:	494e0c0c 	.word	0x494e0c0c
 8019c68:	3104      	adds	r1, #4
 8019c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c6e:	f7ff bfc3 	b.w	8019bf8 <uxr_serialize_DATAWRITER_Representation>
 8019c72:	7909      	ldrb	r1, [r1, #4]
 8019c74:	f7f9 f87c 	bl	8012d70 <ucdr_serialize_uint8_t>
 8019c78:	b1e8      	cbz	r0, 8019cb6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8019c7a:	7923      	ldrb	r3, [r4, #4]
 8019c7c:	2b01      	cmp	r3, #1
 8019c7e:	d001      	beq.n	8019c84 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8019c80:	2b02      	cmp	r3, #2
 8019c82:	d13d      	bne.n	8019d00 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019c84:	68a1      	ldr	r1, [r4, #8]
 8019c86:	4628      	mov	r0, r5
 8019c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c8c:	f006 bb0a 	b.w	80202a4 <ucdr_serialize_string>
 8019c90:	7909      	ldrb	r1, [r1, #4]
 8019c92:	f7f9 f86d 	bl	8012d70 <ucdr_serialize_uint8_t>
 8019c96:	4606      	mov	r6, r0
 8019c98:	b120      	cbz	r0, 8019ca4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019c9a:	7923      	ldrb	r3, [r4, #4]
 8019c9c:	2b02      	cmp	r3, #2
 8019c9e:	d039      	beq.n	8019d14 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8019ca0:	2b03      	cmp	r3, #3
 8019ca2:	d02f      	beq.n	8019d04 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8019ca4:	2202      	movs	r2, #2
 8019ca6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8019caa:	4628      	mov	r0, r5
 8019cac:	f006 fa2e 	bl	802010c <ucdr_serialize_array_uint8_t>
 8019cb0:	4030      	ands	r0, r6
 8019cb2:	b2c0      	uxtb	r0, r0
 8019cb4:	bd70      	pop	{r4, r5, r6, pc}
 8019cb6:	2000      	movs	r0, #0
 8019cb8:	bd70      	pop	{r4, r5, r6, pc}
 8019cba:	7909      	ldrb	r1, [r1, #4]
 8019cbc:	f7f9 f858 	bl	8012d70 <ucdr_serialize_uint8_t>
 8019cc0:	4606      	mov	r6, r0
 8019cc2:	b158      	cbz	r0, 8019cdc <uxr_serialize_ObjectVariant.part.0+0x94>
 8019cc4:	7923      	ldrb	r3, [r4, #4]
 8019cc6:	2b02      	cmp	r3, #2
 8019cc8:	d003      	beq.n	8019cd2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8019cca:	2b03      	cmp	r3, #3
 8019ccc:	d028      	beq.n	8019d20 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8019cce:	2b01      	cmp	r3, #1
 8019cd0:	d104      	bne.n	8019cdc <uxr_serialize_ObjectVariant.part.0+0x94>
 8019cd2:	68a1      	ldr	r1, [r4, #8]
 8019cd4:	4628      	mov	r0, r5
 8019cd6:	f006 fae5 	bl	80202a4 <ucdr_serialize_string>
 8019cda:	4606      	mov	r6, r0
 8019cdc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8019ce0:	4628      	mov	r0, r5
 8019ce2:	f7f9 fd81 	bl	80137e8 <ucdr_serialize_int16_t>
 8019ce6:	4030      	ands	r0, r6
 8019ce8:	b2c0      	uxtb	r0, r0
 8019cea:	bd70      	pop	{r4, r5, r6, pc}
 8019cec:	3104      	adds	r1, #4
 8019cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cf2:	f7ff be7b 	b.w	80199ec <uxr_serialize_CLIENT_Representation>
 8019cf6:	3104      	adds	r1, #4
 8019cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cfc:	f7ff bf32 	b.w	8019b64 <uxr_serialize_AGENT_Representation>
 8019d00:	2001      	movs	r0, #1
 8019d02:	bd70      	pop	{r4, r5, r6, pc}
 8019d04:	68a2      	ldr	r2, [r4, #8]
 8019d06:	f104 010c 	add.w	r1, r4, #12
 8019d0a:	4628      	mov	r0, r5
 8019d0c:	f7fd f8de 	bl	8016ecc <ucdr_serialize_sequence_uint8_t>
 8019d10:	4606      	mov	r6, r0
 8019d12:	e7c7      	b.n	8019ca4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019d14:	68a1      	ldr	r1, [r4, #8]
 8019d16:	4628      	mov	r0, r5
 8019d18:	f006 fac4 	bl	80202a4 <ucdr_serialize_string>
 8019d1c:	4606      	mov	r6, r0
 8019d1e:	e7c1      	b.n	8019ca4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019d20:	68a2      	ldr	r2, [r4, #8]
 8019d22:	f104 010c 	add.w	r1, r4, #12
 8019d26:	4628      	mov	r0, r5
 8019d28:	f7fd f8d0 	bl	8016ecc <ucdr_serialize_sequence_uint8_t>
 8019d2c:	4606      	mov	r6, r0
 8019d2e:	e7d5      	b.n	8019cdc <uxr_serialize_ObjectVariant.part.0+0x94>

08019d30 <uxr_deserialize_DATAWRITER_Representation>:
 8019d30:	b570      	push	{r4, r5, r6, lr}
 8019d32:	4606      	mov	r6, r0
 8019d34:	460d      	mov	r5, r1
 8019d36:	f7f9 f831 	bl	8012d9c <ucdr_deserialize_uint8_t>
 8019d3a:	4604      	mov	r4, r0
 8019d3c:	b130      	cbz	r0, 8019d4c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019d3e:	782b      	ldrb	r3, [r5, #0]
 8019d40:	2b02      	cmp	r3, #2
 8019d42:	d00c      	beq.n	8019d5e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019d44:	2b03      	cmp	r3, #3
 8019d46:	d012      	beq.n	8019d6e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8019d48:	2b01      	cmp	r3, #1
 8019d4a:	d008      	beq.n	8019d5e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019d4c:	2202      	movs	r2, #2
 8019d4e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019d52:	4630      	mov	r0, r6
 8019d54:	f006 fa3e 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 8019d58:	4020      	ands	r0, r4
 8019d5a:	b2c0      	uxtb	r0, r0
 8019d5c:	bd70      	pop	{r4, r5, r6, pc}
 8019d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019d62:	6869      	ldr	r1, [r5, #4]
 8019d64:	4630      	mov	r0, r6
 8019d66:	f006 faad 	bl	80202c4 <ucdr_deserialize_string>
 8019d6a:	4604      	mov	r4, r0
 8019d6c:	e7ee      	b.n	8019d4c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019d6e:	1d2b      	adds	r3, r5, #4
 8019d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019d74:	f105 0108 	add.w	r1, r5, #8
 8019d78:	4630      	mov	r0, r6
 8019d7a:	f7fd f8b9 	bl	8016ef0 <ucdr_deserialize_sequence_uint8_t>
 8019d7e:	4604      	mov	r4, r0
 8019d80:	e7e4      	b.n	8019d4c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019d82:	bf00      	nop

08019d84 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8019d84:	b570      	push	{r4, r5, r6, lr}
 8019d86:	460d      	mov	r5, r1
 8019d88:	7809      	ldrb	r1, [r1, #0]
 8019d8a:	4606      	mov	r6, r0
 8019d8c:	f7f8 ffc2 	bl	8012d14 <ucdr_serialize_bool>
 8019d90:	782b      	ldrb	r3, [r5, #0]
 8019d92:	4604      	mov	r4, r0
 8019d94:	b94b      	cbnz	r3, 8019daa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8019d96:	7a29      	ldrb	r1, [r5, #8]
 8019d98:	4630      	mov	r0, r6
 8019d9a:	f7f8 ffbb 	bl	8012d14 <ucdr_serialize_bool>
 8019d9e:	7a2b      	ldrb	r3, [r5, #8]
 8019da0:	4004      	ands	r4, r0
 8019da2:	b2e4      	uxtb	r4, r4
 8019da4:	b943      	cbnz	r3, 8019db8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8019da6:	4620      	mov	r0, r4
 8019da8:	bd70      	pop	{r4, r5, r6, pc}
 8019daa:	6869      	ldr	r1, [r5, #4]
 8019dac:	4630      	mov	r0, r6
 8019dae:	f006 fa79 	bl	80202a4 <ucdr_serialize_string>
 8019db2:	4004      	ands	r4, r0
 8019db4:	b2e4      	uxtb	r4, r4
 8019db6:	e7ee      	b.n	8019d96 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8019db8:	68e9      	ldr	r1, [r5, #12]
 8019dba:	4630      	mov	r0, r6
 8019dbc:	f006 fa72 	bl	80202a4 <ucdr_serialize_string>
 8019dc0:	4004      	ands	r4, r0
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	bd70      	pop	{r4, r5, r6, pc}
 8019dc6:	bf00      	nop

08019dc8 <uxr_serialize_OBJK_Topic_Binary>:
 8019dc8:	b570      	push	{r4, r5, r6, lr}
 8019dca:	460d      	mov	r5, r1
 8019dcc:	4606      	mov	r6, r0
 8019dce:	6809      	ldr	r1, [r1, #0]
 8019dd0:	f006 fa68 	bl	80202a4 <ucdr_serialize_string>
 8019dd4:	4604      	mov	r4, r0
 8019dd6:	7929      	ldrb	r1, [r5, #4]
 8019dd8:	4630      	mov	r0, r6
 8019dda:	f7f8 ff9b 	bl	8012d14 <ucdr_serialize_bool>
 8019dde:	792b      	ldrb	r3, [r5, #4]
 8019de0:	4004      	ands	r4, r0
 8019de2:	b2e4      	uxtb	r4, r4
 8019de4:	b943      	cbnz	r3, 8019df8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8019de6:	7b29      	ldrb	r1, [r5, #12]
 8019de8:	4630      	mov	r0, r6
 8019dea:	f7f8 ff93 	bl	8012d14 <ucdr_serialize_bool>
 8019dee:	7b2b      	ldrb	r3, [r5, #12]
 8019df0:	4004      	ands	r4, r0
 8019df2:	b93b      	cbnz	r3, 8019e04 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8019df4:	4620      	mov	r0, r4
 8019df6:	bd70      	pop	{r4, r5, r6, pc}
 8019df8:	68a9      	ldr	r1, [r5, #8]
 8019dfa:	4630      	mov	r0, r6
 8019dfc:	f006 fa52 	bl	80202a4 <ucdr_serialize_string>
 8019e00:	4004      	ands	r4, r0
 8019e02:	e7f0      	b.n	8019de6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8019e04:	6929      	ldr	r1, [r5, #16]
 8019e06:	4630      	mov	r0, r6
 8019e08:	f006 fa4c 	bl	80202a4 <ucdr_serialize_string>
 8019e0c:	4004      	ands	r4, r0
 8019e0e:	b2e4      	uxtb	r4, r4
 8019e10:	4620      	mov	r0, r4
 8019e12:	bd70      	pop	{r4, r5, r6, pc}

08019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8019e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e18:	460c      	mov	r4, r1
 8019e1a:	7809      	ldrb	r1, [r1, #0]
 8019e1c:	4606      	mov	r6, r0
 8019e1e:	f7f8 ff79 	bl	8012d14 <ucdr_serialize_bool>
 8019e22:	7823      	ldrb	r3, [r4, #0]
 8019e24:	4605      	mov	r5, r0
 8019e26:	b96b      	cbnz	r3, 8019e44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8019e28:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019e2c:	4630      	mov	r0, r6
 8019e2e:	f7f8 ff71 	bl	8012d14 <ucdr_serialize_bool>
 8019e32:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019e36:	4005      	ands	r5, r0
 8019e38:	b2ed      	uxtb	r5, r5
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d169      	bne.n	8019f12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8019e3e:	4628      	mov	r0, r5
 8019e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e44:	6861      	ldr	r1, [r4, #4]
 8019e46:	4630      	mov	r0, r6
 8019e48:	f7f9 f9a8 	bl	801319c <ucdr_serialize_uint32_t>
 8019e4c:	6863      	ldr	r3, [r4, #4]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d06b      	beq.n	8019f2a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8019e52:	2800      	cmp	r0, #0
 8019e54:	d067      	beq.n	8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e56:	68a1      	ldr	r1, [r4, #8]
 8019e58:	4630      	mov	r0, r6
 8019e5a:	f006 fa23 	bl	80202a4 <ucdr_serialize_string>
 8019e5e:	6863      	ldr	r3, [r4, #4]
 8019e60:	2b01      	cmp	r3, #1
 8019e62:	d953      	bls.n	8019f0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019e64:	2800      	cmp	r0, #0
 8019e66:	d05e      	beq.n	8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e68:	68e1      	ldr	r1, [r4, #12]
 8019e6a:	4630      	mov	r0, r6
 8019e6c:	f006 fa1a 	bl	80202a4 <ucdr_serialize_string>
 8019e70:	6863      	ldr	r3, [r4, #4]
 8019e72:	2b02      	cmp	r3, #2
 8019e74:	d94a      	bls.n	8019f0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019e76:	2800      	cmp	r0, #0
 8019e78:	d055      	beq.n	8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e7a:	6921      	ldr	r1, [r4, #16]
 8019e7c:	4630      	mov	r0, r6
 8019e7e:	f006 fa11 	bl	80202a4 <ucdr_serialize_string>
 8019e82:	6863      	ldr	r3, [r4, #4]
 8019e84:	2b03      	cmp	r3, #3
 8019e86:	d941      	bls.n	8019f0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019e88:	2800      	cmp	r0, #0
 8019e8a:	d04c      	beq.n	8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e8c:	6961      	ldr	r1, [r4, #20]
 8019e8e:	4630      	mov	r0, r6
 8019e90:	f006 fa08 	bl	80202a4 <ucdr_serialize_string>
 8019e94:	6863      	ldr	r3, [r4, #4]
 8019e96:	2b04      	cmp	r3, #4
 8019e98:	d938      	bls.n	8019f0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019e9a:	2800      	cmp	r0, #0
 8019e9c:	d043      	beq.n	8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e9e:	69a1      	ldr	r1, [r4, #24]
 8019ea0:	4630      	mov	r0, r6
 8019ea2:	f006 f9ff 	bl	80202a4 <ucdr_serialize_string>
 8019ea6:	6863      	ldr	r3, [r4, #4]
 8019ea8:	2b05      	cmp	r3, #5
 8019eaa:	d92f      	bls.n	8019f0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019eac:	2800      	cmp	r0, #0
 8019eae:	d03a      	beq.n	8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019eb0:	69e1      	ldr	r1, [r4, #28]
 8019eb2:	4630      	mov	r0, r6
 8019eb4:	f006 f9f6 	bl	80202a4 <ucdr_serialize_string>
 8019eb8:	6863      	ldr	r3, [r4, #4]
 8019eba:	2b06      	cmp	r3, #6
 8019ebc:	d926      	bls.n	8019f0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019ebe:	b390      	cbz	r0, 8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019ec0:	6a21      	ldr	r1, [r4, #32]
 8019ec2:	4630      	mov	r0, r6
 8019ec4:	f006 f9ee 	bl	80202a4 <ucdr_serialize_string>
 8019ec8:	6863      	ldr	r3, [r4, #4]
 8019eca:	2b07      	cmp	r3, #7
 8019ecc:	d91e      	bls.n	8019f0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019ece:	b350      	cbz	r0, 8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019ed0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019ed2:	4630      	mov	r0, r6
 8019ed4:	f006 f9e6 	bl	80202a4 <ucdr_serialize_string>
 8019ed8:	6863      	ldr	r3, [r4, #4]
 8019eda:	2b08      	cmp	r3, #8
 8019edc:	d916      	bls.n	8019f0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019ede:	b310      	cbz	r0, 8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019ee0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019ee2:	4630      	mov	r0, r6
 8019ee4:	f006 f9de 	bl	80202a4 <ucdr_serialize_string>
 8019ee8:	6863      	ldr	r3, [r4, #4]
 8019eea:	2b09      	cmp	r3, #9
 8019eec:	d90e      	bls.n	8019f0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019eee:	b1d0      	cbz	r0, 8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019ef0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019ef4:	2709      	movs	r7, #9
 8019ef6:	e000      	b.n	8019efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8019ef8:	b1a8      	cbz	r0, 8019f26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019efa:	f858 1b04 	ldr.w	r1, [r8], #4
 8019efe:	4630      	mov	r0, r6
 8019f00:	f006 f9d0 	bl	80202a4 <ucdr_serialize_string>
 8019f04:	3701      	adds	r7, #1
 8019f06:	6862      	ldr	r2, [r4, #4]
 8019f08:	4297      	cmp	r7, r2
 8019f0a:	d3f5      	bcc.n	8019ef8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8019f0c:	4005      	ands	r5, r0
 8019f0e:	b2ed      	uxtb	r5, r5
 8019f10:	e78a      	b.n	8019e28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019f12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019f14:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019f18:	4630      	mov	r0, r6
 8019f1a:	f7fc ffd7 	bl	8016ecc <ucdr_serialize_sequence_uint8_t>
 8019f1e:	4005      	ands	r5, r0
 8019f20:	4628      	mov	r0, r5
 8019f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f26:	2500      	movs	r5, #0
 8019f28:	e77e      	b.n	8019e28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019f2a:	4028      	ands	r0, r5
 8019f2c:	b2c5      	uxtb	r5, r0
 8019f2e:	e77b      	b.n	8019e28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08019f30 <uxr_serialize_OBJK_Publisher_Binary>:
 8019f30:	b570      	push	{r4, r5, r6, lr}
 8019f32:	460d      	mov	r5, r1
 8019f34:	7809      	ldrb	r1, [r1, #0]
 8019f36:	4606      	mov	r6, r0
 8019f38:	f7f8 feec 	bl	8012d14 <ucdr_serialize_bool>
 8019f3c:	782b      	ldrb	r3, [r5, #0]
 8019f3e:	4604      	mov	r4, r0
 8019f40:	b94b      	cbnz	r3, 8019f56 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8019f42:	7a29      	ldrb	r1, [r5, #8]
 8019f44:	4630      	mov	r0, r6
 8019f46:	f7f8 fee5 	bl	8012d14 <ucdr_serialize_bool>
 8019f4a:	7a2b      	ldrb	r3, [r5, #8]
 8019f4c:	4004      	ands	r4, r0
 8019f4e:	b2e4      	uxtb	r4, r4
 8019f50:	b943      	cbnz	r3, 8019f64 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8019f52:	4620      	mov	r0, r4
 8019f54:	bd70      	pop	{r4, r5, r6, pc}
 8019f56:	6869      	ldr	r1, [r5, #4]
 8019f58:	4630      	mov	r0, r6
 8019f5a:	f006 f9a3 	bl	80202a4 <ucdr_serialize_string>
 8019f5e:	4004      	ands	r4, r0
 8019f60:	b2e4      	uxtb	r4, r4
 8019f62:	e7ee      	b.n	8019f42 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8019f64:	f105 010c 	add.w	r1, r5, #12
 8019f68:	4630      	mov	r0, r6
 8019f6a:	f7ff ff53 	bl	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8019f6e:	4004      	ands	r4, r0
 8019f70:	4620      	mov	r0, r4
 8019f72:	bd70      	pop	{r4, r5, r6, pc}

08019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8019f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f78:	460c      	mov	r4, r1
 8019f7a:	7809      	ldrb	r1, [r1, #0]
 8019f7c:	4606      	mov	r6, r0
 8019f7e:	f7f8 fec9 	bl	8012d14 <ucdr_serialize_bool>
 8019f82:	7823      	ldrb	r3, [r4, #0]
 8019f84:	4605      	mov	r5, r0
 8019f86:	b96b      	cbnz	r3, 8019fa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8019f88:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019f8c:	4630      	mov	r0, r6
 8019f8e:	f7f8 fec1 	bl	8012d14 <ucdr_serialize_bool>
 8019f92:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019f96:	4005      	ands	r5, r0
 8019f98:	b2ed      	uxtb	r5, r5
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d169      	bne.n	801a072 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8019f9e:	4628      	mov	r0, r5
 8019fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fa4:	6861      	ldr	r1, [r4, #4]
 8019fa6:	4630      	mov	r0, r6
 8019fa8:	f7f9 f8f8 	bl	801319c <ucdr_serialize_uint32_t>
 8019fac:	6863      	ldr	r3, [r4, #4]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d06b      	beq.n	801a08a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8019fb2:	2800      	cmp	r0, #0
 8019fb4:	d067      	beq.n	801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019fb6:	68a1      	ldr	r1, [r4, #8]
 8019fb8:	4630      	mov	r0, r6
 8019fba:	f006 f973 	bl	80202a4 <ucdr_serialize_string>
 8019fbe:	6863      	ldr	r3, [r4, #4]
 8019fc0:	2b01      	cmp	r3, #1
 8019fc2:	d953      	bls.n	801a06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019fc4:	2800      	cmp	r0, #0
 8019fc6:	d05e      	beq.n	801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019fc8:	68e1      	ldr	r1, [r4, #12]
 8019fca:	4630      	mov	r0, r6
 8019fcc:	f006 f96a 	bl	80202a4 <ucdr_serialize_string>
 8019fd0:	6863      	ldr	r3, [r4, #4]
 8019fd2:	2b02      	cmp	r3, #2
 8019fd4:	d94a      	bls.n	801a06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019fd6:	2800      	cmp	r0, #0
 8019fd8:	d055      	beq.n	801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019fda:	6921      	ldr	r1, [r4, #16]
 8019fdc:	4630      	mov	r0, r6
 8019fde:	f006 f961 	bl	80202a4 <ucdr_serialize_string>
 8019fe2:	6863      	ldr	r3, [r4, #4]
 8019fe4:	2b03      	cmp	r3, #3
 8019fe6:	d941      	bls.n	801a06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019fe8:	2800      	cmp	r0, #0
 8019fea:	d04c      	beq.n	801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019fec:	6961      	ldr	r1, [r4, #20]
 8019fee:	4630      	mov	r0, r6
 8019ff0:	f006 f958 	bl	80202a4 <ucdr_serialize_string>
 8019ff4:	6863      	ldr	r3, [r4, #4]
 8019ff6:	2b04      	cmp	r3, #4
 8019ff8:	d938      	bls.n	801a06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ffa:	2800      	cmp	r0, #0
 8019ffc:	d043      	beq.n	801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ffe:	69a1      	ldr	r1, [r4, #24]
 801a000:	4630      	mov	r0, r6
 801a002:	f006 f94f 	bl	80202a4 <ucdr_serialize_string>
 801a006:	6863      	ldr	r3, [r4, #4]
 801a008:	2b05      	cmp	r3, #5
 801a00a:	d92f      	bls.n	801a06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a00c:	2800      	cmp	r0, #0
 801a00e:	d03a      	beq.n	801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a010:	69e1      	ldr	r1, [r4, #28]
 801a012:	4630      	mov	r0, r6
 801a014:	f006 f946 	bl	80202a4 <ucdr_serialize_string>
 801a018:	6863      	ldr	r3, [r4, #4]
 801a01a:	2b06      	cmp	r3, #6
 801a01c:	d926      	bls.n	801a06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a01e:	b390      	cbz	r0, 801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a020:	6a21      	ldr	r1, [r4, #32]
 801a022:	4630      	mov	r0, r6
 801a024:	f006 f93e 	bl	80202a4 <ucdr_serialize_string>
 801a028:	6863      	ldr	r3, [r4, #4]
 801a02a:	2b07      	cmp	r3, #7
 801a02c:	d91e      	bls.n	801a06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a02e:	b350      	cbz	r0, 801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a030:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801a032:	4630      	mov	r0, r6
 801a034:	f006 f936 	bl	80202a4 <ucdr_serialize_string>
 801a038:	6863      	ldr	r3, [r4, #4]
 801a03a:	2b08      	cmp	r3, #8
 801a03c:	d916      	bls.n	801a06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a03e:	b310      	cbz	r0, 801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a040:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801a042:	4630      	mov	r0, r6
 801a044:	f006 f92e 	bl	80202a4 <ucdr_serialize_string>
 801a048:	6863      	ldr	r3, [r4, #4]
 801a04a:	2b09      	cmp	r3, #9
 801a04c:	d90e      	bls.n	801a06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a04e:	b1d0      	cbz	r0, 801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a050:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801a054:	2709      	movs	r7, #9
 801a056:	e000      	b.n	801a05a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801a058:	b1a8      	cbz	r0, 801a086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a05a:	f858 1b04 	ldr.w	r1, [r8], #4
 801a05e:	4630      	mov	r0, r6
 801a060:	f006 f920 	bl	80202a4 <ucdr_serialize_string>
 801a064:	3701      	adds	r7, #1
 801a066:	6862      	ldr	r2, [r4, #4]
 801a068:	4297      	cmp	r7, r2
 801a06a:	d3f5      	bcc.n	801a058 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801a06c:	4005      	ands	r5, r0
 801a06e:	b2ed      	uxtb	r5, r5
 801a070:	e78a      	b.n	8019f88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a072:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a074:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a078:	4630      	mov	r0, r6
 801a07a:	f7fc ff27 	bl	8016ecc <ucdr_serialize_sequence_uint8_t>
 801a07e:	4005      	ands	r5, r0
 801a080:	4628      	mov	r0, r5
 801a082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a086:	2500      	movs	r5, #0
 801a088:	e77e      	b.n	8019f88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a08a:	4028      	ands	r0, r5
 801a08c:	b2c5      	uxtb	r5, r0
 801a08e:	e77b      	b.n	8019f88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801a090 <uxr_serialize_OBJK_Subscriber_Binary>:
 801a090:	b570      	push	{r4, r5, r6, lr}
 801a092:	460d      	mov	r5, r1
 801a094:	7809      	ldrb	r1, [r1, #0]
 801a096:	4606      	mov	r6, r0
 801a098:	f7f8 fe3c 	bl	8012d14 <ucdr_serialize_bool>
 801a09c:	782b      	ldrb	r3, [r5, #0]
 801a09e:	4604      	mov	r4, r0
 801a0a0:	b94b      	cbnz	r3, 801a0b6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801a0a2:	7a29      	ldrb	r1, [r5, #8]
 801a0a4:	4630      	mov	r0, r6
 801a0a6:	f7f8 fe35 	bl	8012d14 <ucdr_serialize_bool>
 801a0aa:	7a2b      	ldrb	r3, [r5, #8]
 801a0ac:	4004      	ands	r4, r0
 801a0ae:	b2e4      	uxtb	r4, r4
 801a0b0:	b943      	cbnz	r3, 801a0c4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801a0b2:	4620      	mov	r0, r4
 801a0b4:	bd70      	pop	{r4, r5, r6, pc}
 801a0b6:	6869      	ldr	r1, [r5, #4]
 801a0b8:	4630      	mov	r0, r6
 801a0ba:	f006 f8f3 	bl	80202a4 <ucdr_serialize_string>
 801a0be:	4004      	ands	r4, r0
 801a0c0:	b2e4      	uxtb	r4, r4
 801a0c2:	e7ee      	b.n	801a0a2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a0c4:	f105 010c 	add.w	r1, r5, #12
 801a0c8:	4630      	mov	r0, r6
 801a0ca:	f7ff ff53 	bl	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a0ce:	4004      	ands	r4, r0
 801a0d0:	4620      	mov	r0, r4
 801a0d2:	bd70      	pop	{r4, r5, r6, pc}

0801a0d4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a0d4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a0d8:	4688      	mov	r8, r1
 801a0da:	4681      	mov	r9, r0
 801a0dc:	8809      	ldrh	r1, [r1, #0]
 801a0de:	f7f8 fe73 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a0e2:	4606      	mov	r6, r0
 801a0e4:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a0e8:	4648      	mov	r0, r9
 801a0ea:	f7f8 fe13 	bl	8012d14 <ucdr_serialize_bool>
 801a0ee:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a0f2:	4006      	ands	r6, r0
 801a0f4:	b2f5      	uxtb	r5, r6
 801a0f6:	b9eb      	cbnz	r3, 801a134 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a0f8:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a0fc:	4648      	mov	r0, r9
 801a0fe:	f7f8 fe09 	bl	8012d14 <ucdr_serialize_bool>
 801a102:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a106:	4005      	ands	r5, r0
 801a108:	bb7b      	cbnz	r3, 801a16a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a10a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a10e:	4648      	mov	r0, r9
 801a110:	f7f8 fe00 	bl	8012d14 <ucdr_serialize_bool>
 801a114:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a118:	4005      	ands	r5, r0
 801a11a:	b9f3      	cbnz	r3, 801a15a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a11c:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a120:	4648      	mov	r0, r9
 801a122:	f7f8 fdf7 	bl	8012d14 <ucdr_serialize_bool>
 801a126:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a12a:	4005      	ands	r5, r0
 801a12c:	b94b      	cbnz	r3, 801a142 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a12e:	4628      	mov	r0, r5
 801a130:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a134:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a138:	4648      	mov	r0, r9
 801a13a:	f7f8 fe45 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a13e:	4005      	ands	r5, r0
 801a140:	e7da      	b.n	801a0f8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a142:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a146:	f108 011c 	add.w	r1, r8, #28
 801a14a:	4648      	mov	r0, r9
 801a14c:	f7fc febe 	bl	8016ecc <ucdr_serialize_sequence_uint8_t>
 801a150:	4028      	ands	r0, r5
 801a152:	b2c5      	uxtb	r5, r0
 801a154:	4628      	mov	r0, r5
 801a156:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a15a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a15e:	4648      	mov	r0, r9
 801a160:	f7f9 f81c 	bl	801319c <ucdr_serialize_uint32_t>
 801a164:	4028      	ands	r0, r5
 801a166:	b2c5      	uxtb	r5, r0
 801a168:	e7d8      	b.n	801a11c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a16a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a16e:	4648      	mov	r0, r9
 801a170:	f7f9 f814 	bl	801319c <ucdr_serialize_uint32_t>
 801a174:	4028      	ands	r0, r5
 801a176:	b2c5      	uxtb	r5, r0
 801a178:	e7c7      	b.n	801a10a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a17a:	bf00      	nop

0801a17c <uxr_serialize_OBJK_DataReader_Binary>:
 801a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a17e:	2202      	movs	r2, #2
 801a180:	460c      	mov	r4, r1
 801a182:	4606      	mov	r6, r0
 801a184:	f005 ffc2 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a188:	4605      	mov	r5, r0
 801a18a:	78a1      	ldrb	r1, [r4, #2]
 801a18c:	4630      	mov	r0, r6
 801a18e:	f7f8 fdc1 	bl	8012d14 <ucdr_serialize_bool>
 801a192:	78a3      	ldrb	r3, [r4, #2]
 801a194:	4005      	ands	r5, r0
 801a196:	b2ed      	uxtb	r5, r5
 801a198:	b90b      	cbnz	r3, 801a19e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a19a:	4628      	mov	r0, r5
 801a19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a19e:	f104 0108 	add.w	r1, r4, #8
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	f7ff ff96 	bl	801a0d4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a1a8:	4607      	mov	r7, r0
 801a1aa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a1ae:	4630      	mov	r0, r6
 801a1b0:	f7f8 fdb0 	bl	8012d14 <ucdr_serialize_bool>
 801a1b4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a1b8:	4038      	ands	r0, r7
 801a1ba:	b2c7      	uxtb	r7, r0
 801a1bc:	b95b      	cbnz	r3, 801a1d6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a1be:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801a1c2:	4630      	mov	r0, r6
 801a1c4:	f7f8 fda6 	bl	8012d14 <ucdr_serialize_bool>
 801a1c8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a1cc:	4007      	ands	r7, r0
 801a1ce:	b94b      	cbnz	r3, 801a1e4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a1d0:	403d      	ands	r5, r7
 801a1d2:	4628      	mov	r0, r5
 801a1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1d6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801a1da:	4630      	mov	r0, r6
 801a1dc:	f7f9 fa34 	bl	8013648 <ucdr_serialize_uint64_t>
 801a1e0:	4007      	ands	r7, r0
 801a1e2:	e7ec      	b.n	801a1be <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a1e4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801a1e6:	4630      	mov	r0, r6
 801a1e8:	f006 f85c 	bl	80202a4 <ucdr_serialize_string>
 801a1ec:	4007      	ands	r7, r0
 801a1ee:	b2ff      	uxtb	r7, r7
 801a1f0:	e7ee      	b.n	801a1d0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a1f2:	bf00      	nop

0801a1f4 <uxr_serialize_OBJK_DataWriter_Binary>:
 801a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1f6:	2202      	movs	r2, #2
 801a1f8:	460d      	mov	r5, r1
 801a1fa:	4606      	mov	r6, r0
 801a1fc:	f005 ff86 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a200:	4604      	mov	r4, r0
 801a202:	78a9      	ldrb	r1, [r5, #2]
 801a204:	4630      	mov	r0, r6
 801a206:	f7f8 fd85 	bl	8012d14 <ucdr_serialize_bool>
 801a20a:	78ab      	ldrb	r3, [r5, #2]
 801a20c:	4004      	ands	r4, r0
 801a20e:	b2e4      	uxtb	r4, r4
 801a210:	b90b      	cbnz	r3, 801a216 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801a212:	4620      	mov	r0, r4
 801a214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a216:	f105 0108 	add.w	r1, r5, #8
 801a21a:	4630      	mov	r0, r6
 801a21c:	f7ff ff5a 	bl	801a0d4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a220:	4607      	mov	r7, r0
 801a222:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801a226:	4630      	mov	r0, r6
 801a228:	f7f8 fd74 	bl	8012d14 <ucdr_serialize_bool>
 801a22c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801a230:	4038      	ands	r0, r7
 801a232:	b2c7      	uxtb	r7, r0
 801a234:	b913      	cbnz	r3, 801a23c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a236:	403c      	ands	r4, r7
 801a238:	4620      	mov	r0, r4
 801a23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a23c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801a240:	4630      	mov	r0, r6
 801a242:	f7f9 fa01 	bl	8013648 <ucdr_serialize_uint64_t>
 801a246:	4007      	ands	r7, r0
 801a248:	e7f5      	b.n	801a236 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a24a:	bf00      	nop

0801a24c <uxr_serialize_OBJK_Replier_Binary>:
 801a24c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801a250:	460f      	mov	r7, r1
 801a252:	4680      	mov	r8, r0
 801a254:	6809      	ldr	r1, [r1, #0]
 801a256:	f006 f825 	bl	80202a4 <ucdr_serialize_string>
 801a25a:	4605      	mov	r5, r0
 801a25c:	6879      	ldr	r1, [r7, #4]
 801a25e:	4640      	mov	r0, r8
 801a260:	f006 f820 	bl	80202a4 <ucdr_serialize_string>
 801a264:	4005      	ands	r5, r0
 801a266:	68b9      	ldr	r1, [r7, #8]
 801a268:	4640      	mov	r0, r8
 801a26a:	b2ec      	uxtb	r4, r5
 801a26c:	f006 f81a 	bl	80202a4 <ucdr_serialize_string>
 801a270:	7b39      	ldrb	r1, [r7, #12]
 801a272:	4004      	ands	r4, r0
 801a274:	4640      	mov	r0, r8
 801a276:	f7f8 fd4d 	bl	8012d14 <ucdr_serialize_bool>
 801a27a:	7b3b      	ldrb	r3, [r7, #12]
 801a27c:	4004      	ands	r4, r0
 801a27e:	b94b      	cbnz	r3, 801a294 <uxr_serialize_OBJK_Replier_Binary+0x48>
 801a280:	7d39      	ldrb	r1, [r7, #20]
 801a282:	4640      	mov	r0, r8
 801a284:	f7f8 fd46 	bl	8012d14 <ucdr_serialize_bool>
 801a288:	7d3b      	ldrb	r3, [r7, #20]
 801a28a:	4004      	ands	r4, r0
 801a28c:	b943      	cbnz	r3, 801a2a0 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801a28e:	4620      	mov	r0, r4
 801a290:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a294:	6939      	ldr	r1, [r7, #16]
 801a296:	4640      	mov	r0, r8
 801a298:	f006 f804 	bl	80202a4 <ucdr_serialize_string>
 801a29c:	4004      	ands	r4, r0
 801a29e:	e7ef      	b.n	801a280 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801a2a0:	69b9      	ldr	r1, [r7, #24]
 801a2a2:	4640      	mov	r0, r8
 801a2a4:	f005 fffe 	bl	80202a4 <ucdr_serialize_string>
 801a2a8:	4004      	ands	r4, r0
 801a2aa:	b2e4      	uxtb	r4, r4
 801a2ac:	4620      	mov	r0, r4
 801a2ae:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a2b2:	bf00      	nop

0801a2b4 <uxr_deserialize_ObjectVariant>:
 801a2b4:	b570      	push	{r4, r5, r6, lr}
 801a2b6:	4605      	mov	r5, r0
 801a2b8:	460e      	mov	r6, r1
 801a2ba:	f7f8 fd6f 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a2be:	b168      	cbz	r0, 801a2dc <uxr_deserialize_ObjectVariant+0x28>
 801a2c0:	7833      	ldrb	r3, [r6, #0]
 801a2c2:	4604      	mov	r4, r0
 801a2c4:	3b01      	subs	r3, #1
 801a2c6:	2b0d      	cmp	r3, #13
 801a2c8:	d809      	bhi.n	801a2de <uxr_deserialize_ObjectVariant+0x2a>
 801a2ca:	e8df f003 	tbb	[pc, r3]
 801a2ce:	0a41      	.short	0x0a41
 801a2d0:	0a0a2323 	.word	0x0a0a2323
 801a2d4:	10080a0a 	.word	0x10080a0a
 801a2d8:	565c1010 	.word	0x565c1010
 801a2dc:	2400      	movs	r4, #0
 801a2de:	4620      	mov	r0, r4
 801a2e0:	bd70      	pop	{r4, r5, r6, pc}
 801a2e2:	1d31      	adds	r1, r6, #4
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2ea:	f7ff bd21 	b.w	8019d30 <uxr_deserialize_DATAWRITER_Representation>
 801a2ee:	1d31      	adds	r1, r6, #4
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	f7f8 fd53 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a2f6:	2800      	cmp	r0, #0
 801a2f8:	d0f0      	beq.n	801a2dc <uxr_deserialize_ObjectVariant+0x28>
 801a2fa:	7933      	ldrb	r3, [r6, #4]
 801a2fc:	2b01      	cmp	r3, #1
 801a2fe:	d001      	beq.n	801a304 <uxr_deserialize_ObjectVariant+0x50>
 801a300:	2b02      	cmp	r3, #2
 801a302:	d1ec      	bne.n	801a2de <uxr_deserialize_ObjectVariant+0x2a>
 801a304:	68b1      	ldr	r1, [r6, #8]
 801a306:	4628      	mov	r0, r5
 801a308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a30c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a310:	f005 bfd8 	b.w	80202c4 <ucdr_deserialize_string>
 801a314:	1d31      	adds	r1, r6, #4
 801a316:	4628      	mov	r0, r5
 801a318:	f7f8 fd40 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a31c:	4604      	mov	r4, r0
 801a31e:	b170      	cbz	r0, 801a33e <uxr_deserialize_ObjectVariant+0x8a>
 801a320:	7933      	ldrb	r3, [r6, #4]
 801a322:	2b02      	cmp	r3, #2
 801a324:	d04c      	beq.n	801a3c0 <uxr_deserialize_ObjectVariant+0x10c>
 801a326:	2b03      	cmp	r3, #3
 801a328:	d109      	bne.n	801a33e <uxr_deserialize_ObjectVariant+0x8a>
 801a32a:	f106 0308 	add.w	r3, r6, #8
 801a32e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a332:	f106 010c 	add.w	r1, r6, #12
 801a336:	4628      	mov	r0, r5
 801a338:	f7fc fdda 	bl	8016ef0 <ucdr_deserialize_sequence_uint8_t>
 801a33c:	4604      	mov	r4, r0
 801a33e:	2202      	movs	r2, #2
 801a340:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a344:	4628      	mov	r0, r5
 801a346:	f005 ff45 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a34a:	4020      	ands	r0, r4
 801a34c:	b2c4      	uxtb	r4, r0
 801a34e:	e7c6      	b.n	801a2de <uxr_deserialize_ObjectVariant+0x2a>
 801a350:	1d31      	adds	r1, r6, #4
 801a352:	4628      	mov	r0, r5
 801a354:	f7f8 fd22 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a358:	4604      	mov	r4, r0
 801a35a:	b130      	cbz	r0, 801a36a <uxr_deserialize_ObjectVariant+0xb6>
 801a35c:	7933      	ldrb	r3, [r6, #4]
 801a35e:	2b02      	cmp	r3, #2
 801a360:	d036      	beq.n	801a3d0 <uxr_deserialize_ObjectVariant+0x11c>
 801a362:	2b03      	cmp	r3, #3
 801a364:	d03c      	beq.n	801a3e0 <uxr_deserialize_ObjectVariant+0x12c>
 801a366:	2b01      	cmp	r3, #1
 801a368:	d032      	beq.n	801a3d0 <uxr_deserialize_ObjectVariant+0x11c>
 801a36a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a36e:	4628      	mov	r0, r5
 801a370:	f7f9 faba 	bl	80138e8 <ucdr_deserialize_int16_t>
 801a374:	4020      	ands	r0, r4
 801a376:	b2c4      	uxtb	r4, r0
 801a378:	e7b1      	b.n	801a2de <uxr_deserialize_ObjectVariant+0x2a>
 801a37a:	1d31      	adds	r1, r6, #4
 801a37c:	4628      	mov	r0, r5
 801a37e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a382:	f7ff bb8b 	b.w	8019a9c <uxr_deserialize_CLIENT_Representation>
 801a386:	2204      	movs	r2, #4
 801a388:	4628      	mov	r0, r5
 801a38a:	18b1      	adds	r1, r6, r2
 801a38c:	f005 ff22 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a390:	4604      	mov	r4, r0
 801a392:	2202      	movs	r2, #2
 801a394:	f106 0108 	add.w	r1, r6, #8
 801a398:	4628      	mov	r0, r5
 801a39a:	f005 ff1b 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a39e:	4004      	ands	r4, r0
 801a3a0:	2202      	movs	r2, #2
 801a3a2:	f106 010a 	add.w	r1, r6, #10
 801a3a6:	4628      	mov	r0, r5
 801a3a8:	b2e4      	uxtb	r4, r4
 801a3aa:	f005 ff13 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a3ae:	4603      	mov	r3, r0
 801a3b0:	f106 010c 	add.w	r1, r6, #12
 801a3b4:	4628      	mov	r0, r5
 801a3b6:	401c      	ands	r4, r3
 801a3b8:	f7f8 fcc2 	bl	8012d40 <ucdr_deserialize_bool>
 801a3bc:	4004      	ands	r4, r0
 801a3be:	e78e      	b.n	801a2de <uxr_deserialize_ObjectVariant+0x2a>
 801a3c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a3c4:	68b1      	ldr	r1, [r6, #8]
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	f005 ff7c 	bl	80202c4 <ucdr_deserialize_string>
 801a3cc:	4604      	mov	r4, r0
 801a3ce:	e7b6      	b.n	801a33e <uxr_deserialize_ObjectVariant+0x8a>
 801a3d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a3d4:	68b1      	ldr	r1, [r6, #8]
 801a3d6:	4628      	mov	r0, r5
 801a3d8:	f005 ff74 	bl	80202c4 <ucdr_deserialize_string>
 801a3dc:	4604      	mov	r4, r0
 801a3de:	e7c4      	b.n	801a36a <uxr_deserialize_ObjectVariant+0xb6>
 801a3e0:	f106 0308 	add.w	r3, r6, #8
 801a3e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a3e8:	f106 010c 	add.w	r1, r6, #12
 801a3ec:	4628      	mov	r0, r5
 801a3ee:	f7fc fd7f 	bl	8016ef0 <ucdr_deserialize_sequence_uint8_t>
 801a3f2:	4604      	mov	r4, r0
 801a3f4:	e7b9      	b.n	801a36a <uxr_deserialize_ObjectVariant+0xb6>
 801a3f6:	bf00      	nop

0801a3f8 <uxr_deserialize_BaseObjectRequest>:
 801a3f8:	b570      	push	{r4, r5, r6, lr}
 801a3fa:	2202      	movs	r2, #2
 801a3fc:	4605      	mov	r5, r0
 801a3fe:	460e      	mov	r6, r1
 801a400:	f005 fee8 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a404:	2202      	movs	r2, #2
 801a406:	4604      	mov	r4, r0
 801a408:	4628      	mov	r0, r5
 801a40a:	18b1      	adds	r1, r6, r2
 801a40c:	f005 fee2 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a410:	4020      	ands	r0, r4
 801a412:	b2c0      	uxtb	r0, r0
 801a414:	bd70      	pop	{r4, r5, r6, pc}
 801a416:	bf00      	nop

0801a418 <uxr_serialize_ActivityInfoVariant>:
 801a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a41c:	460e      	mov	r6, r1
 801a41e:	7809      	ldrb	r1, [r1, #0]
 801a420:	4680      	mov	r8, r0
 801a422:	f7f8 fca5 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a426:	4607      	mov	r7, r0
 801a428:	b138      	cbz	r0, 801a43a <uxr_serialize_ActivityInfoVariant+0x22>
 801a42a:	7833      	ldrb	r3, [r6, #0]
 801a42c:	2b06      	cmp	r3, #6
 801a42e:	f000 8081 	beq.w	801a534 <uxr_serialize_ActivityInfoVariant+0x11c>
 801a432:	2b0d      	cmp	r3, #13
 801a434:	d014      	beq.n	801a460 <uxr_serialize_ActivityInfoVariant+0x48>
 801a436:	2b05      	cmp	r3, #5
 801a438:	d002      	beq.n	801a440 <uxr_serialize_ActivityInfoVariant+0x28>
 801a43a:	4638      	mov	r0, r7
 801a43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a440:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a444:	4640      	mov	r0, r8
 801a446:	f7f9 f9cf 	bl	80137e8 <ucdr_serialize_int16_t>
 801a44a:	4607      	mov	r7, r0
 801a44c:	4640      	mov	r0, r8
 801a44e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801a452:	f7f9 f8f9 	bl	8013648 <ucdr_serialize_uint64_t>
 801a456:	4038      	ands	r0, r7
 801a458:	b2c7      	uxtb	r7, r0
 801a45a:	4638      	mov	r0, r7
 801a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a460:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a464:	4640      	mov	r0, r8
 801a466:	f7f9 f9bf 	bl	80137e8 <ucdr_serialize_int16_t>
 801a46a:	68f1      	ldr	r1, [r6, #12]
 801a46c:	4607      	mov	r7, r0
 801a46e:	4640      	mov	r0, r8
 801a470:	f7f8 fe94 	bl	801319c <ucdr_serialize_uint32_t>
 801a474:	68f3      	ldr	r3, [r6, #12]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d0ed      	beq.n	801a456 <uxr_serialize_ActivityInfoVariant+0x3e>
 801a47a:	b318      	cbz	r0, 801a4c4 <uxr_serialize_ActivityInfoVariant+0xac>
 801a47c:	f106 090c 	add.w	r9, r6, #12
 801a480:	2400      	movs	r4, #0
 801a482:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801a486:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801a48a:	7c29      	ldrb	r1, [r5, #16]
 801a48c:	4640      	mov	r0, r8
 801a48e:	f7f8 fc6f 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a492:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801a496:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a49a:	2800      	cmp	r0, #0
 801a49c:	d051      	beq.n	801a542 <uxr_serialize_ActivityInfoVariant+0x12a>
 801a49e:	7c2b      	ldrb	r3, [r5, #16]
 801a4a0:	00c9      	lsls	r1, r1, #3
 801a4a2:	2b03      	cmp	r3, #3
 801a4a4:	d854      	bhi.n	801a550 <uxr_serialize_ActivityInfoVariant+0x138>
 801a4a6:	e8df f003 	tbb	[pc, r3]
 801a4aa:	2133      	.short	0x2133
 801a4ac:	020f      	.short	0x020f
 801a4ae:	4449      	add	r1, r9
 801a4b0:	4640      	mov	r0, r8
 801a4b2:	6889      	ldr	r1, [r1, #8]
 801a4b4:	f005 fef6 	bl	80202a4 <ucdr_serialize_string>
 801a4b8:	3401      	adds	r4, #1
 801a4ba:	68f2      	ldr	r2, [r6, #12]
 801a4bc:	4294      	cmp	r4, r2
 801a4be:	d244      	bcs.n	801a54a <uxr_serialize_ActivityInfoVariant+0x132>
 801a4c0:	2800      	cmp	r0, #0
 801a4c2:	d1de      	bne.n	801a482 <uxr_serialize_ActivityInfoVariant+0x6a>
 801a4c4:	2700      	movs	r7, #0
 801a4c6:	e7b8      	b.n	801a43a <uxr_serialize_ActivityInfoVariant+0x22>
 801a4c8:	3108      	adds	r1, #8
 801a4ca:	44a2      	add	sl, r4
 801a4cc:	2210      	movs	r2, #16
 801a4ce:	4640      	mov	r0, r8
 801a4d0:	4449      	add	r1, r9
 801a4d2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a4d6:	f005 fe19 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a4da:	4605      	mov	r5, r0
 801a4dc:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801a4e0:	4640      	mov	r0, r8
 801a4e2:	f7f8 fe5b 	bl	801319c <ucdr_serialize_uint32_t>
 801a4e6:	4028      	ands	r0, r5
 801a4e8:	b2c0      	uxtb	r0, r0
 801a4ea:	e7e5      	b.n	801a4b8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a4ec:	3108      	adds	r1, #8
 801a4ee:	44a2      	add	sl, r4
 801a4f0:	2204      	movs	r2, #4
 801a4f2:	4640      	mov	r0, r8
 801a4f4:	4449      	add	r1, r9
 801a4f6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a4fa:	f005 fe07 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a4fe:	4605      	mov	r5, r0
 801a500:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801a504:	4640      	mov	r0, r8
 801a506:	f7f8 fc5f 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a50a:	4028      	ands	r0, r5
 801a50c:	b2c0      	uxtb	r0, r0
 801a50e:	e7d3      	b.n	801a4b8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a510:	3108      	adds	r1, #8
 801a512:	44a2      	add	sl, r4
 801a514:	2202      	movs	r2, #2
 801a516:	4640      	mov	r0, r8
 801a518:	4449      	add	r1, r9
 801a51a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a51e:	f005 fdf5 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a522:	4605      	mov	r5, r0
 801a524:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801a528:	4640      	mov	r0, r8
 801a52a:	f7f8 fc21 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a52e:	4028      	ands	r0, r5
 801a530:	b2c0      	uxtb	r0, r0
 801a532:	e7c1      	b.n	801a4b8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a534:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a538:	4640      	mov	r0, r8
 801a53a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a53e:	f7f9 b953 	b.w	80137e8 <ucdr_serialize_int16_t>
 801a542:	3401      	adds	r4, #1
 801a544:	68f2      	ldr	r2, [r6, #12]
 801a546:	42a2      	cmp	r2, r4
 801a548:	d8bc      	bhi.n	801a4c4 <uxr_serialize_ActivityInfoVariant+0xac>
 801a54a:	4007      	ands	r7, r0
 801a54c:	b2ff      	uxtb	r7, r7
 801a54e:	e774      	b.n	801a43a <uxr_serialize_ActivityInfoVariant+0x22>
 801a550:	3401      	adds	r4, #1
 801a552:	68f3      	ldr	r3, [r6, #12]
 801a554:	3518      	adds	r5, #24
 801a556:	429c      	cmp	r4, r3
 801a558:	d397      	bcc.n	801a48a <uxr_serialize_ActivityInfoVariant+0x72>
 801a55a:	e76e      	b.n	801a43a <uxr_serialize_ActivityInfoVariant+0x22>

0801a55c <uxr_deserialize_BaseObjectReply>:
 801a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a560:	2202      	movs	r2, #2
 801a562:	4606      	mov	r6, r0
 801a564:	460f      	mov	r7, r1
 801a566:	f005 fe35 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a56a:	2202      	movs	r2, #2
 801a56c:	4605      	mov	r5, r0
 801a56e:	4630      	mov	r0, r6
 801a570:	18b9      	adds	r1, r7, r2
 801a572:	f005 fe2f 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a576:	4680      	mov	r8, r0
 801a578:	1d39      	adds	r1, r7, #4
 801a57a:	4630      	mov	r0, r6
 801a57c:	f7f8 fc0e 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a580:	ea05 0508 	and.w	r5, r5, r8
 801a584:	4604      	mov	r4, r0
 801a586:	1d79      	adds	r1, r7, #5
 801a588:	4630      	mov	r0, r6
 801a58a:	402c      	ands	r4, r5
 801a58c:	f7f8 fc06 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a590:	4020      	ands	r0, r4
 801a592:	b2c0      	uxtb	r0, r0
 801a594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a598 <uxr_serialize_ReadSpecification>:
 801a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a59a:	460e      	mov	r6, r1
 801a59c:	4607      	mov	r7, r0
 801a59e:	7809      	ldrb	r1, [r1, #0]
 801a5a0:	f7f8 fbe6 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a5a4:	4604      	mov	r4, r0
 801a5a6:	7871      	ldrb	r1, [r6, #1]
 801a5a8:	4638      	mov	r0, r7
 801a5aa:	f7f8 fbe1 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a5ae:	4004      	ands	r4, r0
 801a5b0:	78b1      	ldrb	r1, [r6, #2]
 801a5b2:	4638      	mov	r0, r7
 801a5b4:	f7f8 fbae 	bl	8012d14 <ucdr_serialize_bool>
 801a5b8:	78b3      	ldrb	r3, [r6, #2]
 801a5ba:	b2e4      	uxtb	r4, r4
 801a5bc:	4004      	ands	r4, r0
 801a5be:	b943      	cbnz	r3, 801a5d2 <uxr_serialize_ReadSpecification+0x3a>
 801a5c0:	7a31      	ldrb	r1, [r6, #8]
 801a5c2:	4638      	mov	r0, r7
 801a5c4:	f7f8 fba6 	bl	8012d14 <ucdr_serialize_bool>
 801a5c8:	7a33      	ldrb	r3, [r6, #8]
 801a5ca:	4004      	ands	r4, r0
 801a5cc:	b93b      	cbnz	r3, 801a5de <uxr_serialize_ReadSpecification+0x46>
 801a5ce:	4620      	mov	r0, r4
 801a5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5d2:	6871      	ldr	r1, [r6, #4]
 801a5d4:	4638      	mov	r0, r7
 801a5d6:	f005 fe65 	bl	80202a4 <ucdr_serialize_string>
 801a5da:	4004      	ands	r4, r0
 801a5dc:	e7f0      	b.n	801a5c0 <uxr_serialize_ReadSpecification+0x28>
 801a5de:	8971      	ldrh	r1, [r6, #10]
 801a5e0:	4638      	mov	r0, r7
 801a5e2:	f7f8 fbf1 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a5e6:	4605      	mov	r5, r0
 801a5e8:	89b1      	ldrh	r1, [r6, #12]
 801a5ea:	4638      	mov	r0, r7
 801a5ec:	f7f8 fbec 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a5f0:	4005      	ands	r5, r0
 801a5f2:	89f1      	ldrh	r1, [r6, #14]
 801a5f4:	4638      	mov	r0, r7
 801a5f6:	b2ed      	uxtb	r5, r5
 801a5f8:	f7f8 fbe6 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a5fc:	8a31      	ldrh	r1, [r6, #16]
 801a5fe:	4025      	ands	r5, r4
 801a600:	4604      	mov	r4, r0
 801a602:	4638      	mov	r0, r7
 801a604:	4025      	ands	r5, r4
 801a606:	f7f8 fbdf 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a60a:	ea00 0405 	and.w	r4, r0, r5
 801a60e:	4620      	mov	r0, r4
 801a610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a612:	bf00      	nop

0801a614 <uxr_serialize_CREATE_CLIENT_Payload>:
 801a614:	f7ff b9ea 	b.w	80199ec <uxr_serialize_CLIENT_Representation>

0801a618 <uxr_serialize_CREATE_Payload>:
 801a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a61a:	2202      	movs	r2, #2
 801a61c:	4607      	mov	r7, r0
 801a61e:	460e      	mov	r6, r1
 801a620:	f005 fd74 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a624:	2202      	movs	r2, #2
 801a626:	4605      	mov	r5, r0
 801a628:	4638      	mov	r0, r7
 801a62a:	18b1      	adds	r1, r6, r2
 801a62c:	f005 fd6e 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a630:	7931      	ldrb	r1, [r6, #4]
 801a632:	4604      	mov	r4, r0
 801a634:	4638      	mov	r0, r7
 801a636:	f7f8 fb9b 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a63a:	b170      	cbz	r0, 801a65a <uxr_serialize_CREATE_Payload+0x42>
 801a63c:	7933      	ldrb	r3, [r6, #4]
 801a63e:	402c      	ands	r4, r5
 801a640:	3b01      	subs	r3, #1
 801a642:	b2e4      	uxtb	r4, r4
 801a644:	2b0d      	cmp	r3, #13
 801a646:	d809      	bhi.n	801a65c <uxr_serialize_CREATE_Payload+0x44>
 801a648:	e8df f003 	tbb	[pc, r3]
 801a64c:	23230a4c 	.word	0x23230a4c
 801a650:	0a0a0a0a 	.word	0x0a0a0a0a
 801a654:	12121208 	.word	0x12121208
 801a658:	3e45      	.short	0x3e45
 801a65a:	2400      	movs	r4, #0
 801a65c:	4620      	mov	r0, r4
 801a65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a660:	f106 0108 	add.w	r1, r6, #8
 801a664:	4638      	mov	r0, r7
 801a666:	f7ff fac7 	bl	8019bf8 <uxr_serialize_DATAWRITER_Representation>
 801a66a:	4004      	ands	r4, r0
 801a66c:	4620      	mov	r0, r4
 801a66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a670:	7a31      	ldrb	r1, [r6, #8]
 801a672:	4638      	mov	r0, r7
 801a674:	f7f8 fb7c 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a678:	2800      	cmp	r0, #0
 801a67a:	d0ee      	beq.n	801a65a <uxr_serialize_CREATE_Payload+0x42>
 801a67c:	7a33      	ldrb	r3, [r6, #8]
 801a67e:	2b01      	cmp	r3, #1
 801a680:	d001      	beq.n	801a686 <uxr_serialize_CREATE_Payload+0x6e>
 801a682:	2b02      	cmp	r3, #2
 801a684:	d1ea      	bne.n	801a65c <uxr_serialize_CREATE_Payload+0x44>
 801a686:	68f1      	ldr	r1, [r6, #12]
 801a688:	4638      	mov	r0, r7
 801a68a:	f005 fe0b 	bl	80202a4 <ucdr_serialize_string>
 801a68e:	4004      	ands	r4, r0
 801a690:	e7e4      	b.n	801a65c <uxr_serialize_CREATE_Payload+0x44>
 801a692:	7a31      	ldrb	r1, [r6, #8]
 801a694:	4638      	mov	r0, r7
 801a696:	f7f8 fb6b 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a69a:	4605      	mov	r5, r0
 801a69c:	b158      	cbz	r0, 801a6b6 <uxr_serialize_CREATE_Payload+0x9e>
 801a69e:	7a33      	ldrb	r3, [r6, #8]
 801a6a0:	2b02      	cmp	r3, #2
 801a6a2:	d034      	beq.n	801a70e <uxr_serialize_CREATE_Payload+0xf6>
 801a6a4:	2b03      	cmp	r3, #3
 801a6a6:	d106      	bne.n	801a6b6 <uxr_serialize_CREATE_Payload+0x9e>
 801a6a8:	68f2      	ldr	r2, [r6, #12]
 801a6aa:	f106 0110 	add.w	r1, r6, #16
 801a6ae:	4638      	mov	r0, r7
 801a6b0:	f7fc fc0c 	bl	8016ecc <ucdr_serialize_sequence_uint8_t>
 801a6b4:	4605      	mov	r5, r0
 801a6b6:	2202      	movs	r2, #2
 801a6b8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801a6bc:	4638      	mov	r0, r7
 801a6be:	f005 fd25 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a6c2:	4028      	ands	r0, r5
 801a6c4:	4004      	ands	r4, r0
 801a6c6:	e7c9      	b.n	801a65c <uxr_serialize_CREATE_Payload+0x44>
 801a6c8:	f106 0108 	add.w	r1, r6, #8
 801a6cc:	4638      	mov	r0, r7
 801a6ce:	f7ff f98d 	bl	80199ec <uxr_serialize_CLIENT_Representation>
 801a6d2:	4004      	ands	r4, r0
 801a6d4:	e7c2      	b.n	801a65c <uxr_serialize_CREATE_Payload+0x44>
 801a6d6:	f106 0108 	add.w	r1, r6, #8
 801a6da:	4638      	mov	r0, r7
 801a6dc:	f7ff fa42 	bl	8019b64 <uxr_serialize_AGENT_Representation>
 801a6e0:	4004      	ands	r4, r0
 801a6e2:	e7bb      	b.n	801a65c <uxr_serialize_CREATE_Payload+0x44>
 801a6e4:	7a31      	ldrb	r1, [r6, #8]
 801a6e6:	4638      	mov	r0, r7
 801a6e8:	f7f8 fb42 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a6ec:	4605      	mov	r5, r0
 801a6ee:	b130      	cbz	r0, 801a6fe <uxr_serialize_CREATE_Payload+0xe6>
 801a6f0:	7a33      	ldrb	r3, [r6, #8]
 801a6f2:	2b02      	cmp	r3, #2
 801a6f4:	d011      	beq.n	801a71a <uxr_serialize_CREATE_Payload+0x102>
 801a6f6:	2b03      	cmp	r3, #3
 801a6f8:	d015      	beq.n	801a726 <uxr_serialize_CREATE_Payload+0x10e>
 801a6fa:	2b01      	cmp	r3, #1
 801a6fc:	d00d      	beq.n	801a71a <uxr_serialize_CREATE_Payload+0x102>
 801a6fe:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801a702:	4638      	mov	r0, r7
 801a704:	f7f9 f870 	bl	80137e8 <ucdr_serialize_int16_t>
 801a708:	4028      	ands	r0, r5
 801a70a:	4004      	ands	r4, r0
 801a70c:	e7a6      	b.n	801a65c <uxr_serialize_CREATE_Payload+0x44>
 801a70e:	68f1      	ldr	r1, [r6, #12]
 801a710:	4638      	mov	r0, r7
 801a712:	f005 fdc7 	bl	80202a4 <ucdr_serialize_string>
 801a716:	4605      	mov	r5, r0
 801a718:	e7cd      	b.n	801a6b6 <uxr_serialize_CREATE_Payload+0x9e>
 801a71a:	68f1      	ldr	r1, [r6, #12]
 801a71c:	4638      	mov	r0, r7
 801a71e:	f005 fdc1 	bl	80202a4 <ucdr_serialize_string>
 801a722:	4605      	mov	r5, r0
 801a724:	e7eb      	b.n	801a6fe <uxr_serialize_CREATE_Payload+0xe6>
 801a726:	68f2      	ldr	r2, [r6, #12]
 801a728:	f106 0110 	add.w	r1, r6, #16
 801a72c:	4638      	mov	r0, r7
 801a72e:	f7fc fbcd 	bl	8016ecc <ucdr_serialize_sequence_uint8_t>
 801a732:	4605      	mov	r5, r0
 801a734:	e7e3      	b.n	801a6fe <uxr_serialize_CREATE_Payload+0xe6>
 801a736:	bf00      	nop

0801a738 <uxr_serialize_GET_INFO_Payload>:
 801a738:	b570      	push	{r4, r5, r6, lr}
 801a73a:	2202      	movs	r2, #2
 801a73c:	4605      	mov	r5, r0
 801a73e:	460e      	mov	r6, r1
 801a740:	f005 fce4 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a744:	2202      	movs	r2, #2
 801a746:	4604      	mov	r4, r0
 801a748:	4628      	mov	r0, r5
 801a74a:	18b1      	adds	r1, r6, r2
 801a74c:	f005 fcde 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a750:	4603      	mov	r3, r0
 801a752:	6871      	ldr	r1, [r6, #4]
 801a754:	4628      	mov	r0, r5
 801a756:	401c      	ands	r4, r3
 801a758:	f7f8 fd20 	bl	801319c <ucdr_serialize_uint32_t>
 801a75c:	b2e4      	uxtb	r4, r4
 801a75e:	4020      	ands	r0, r4
 801a760:	bd70      	pop	{r4, r5, r6, pc}
 801a762:	bf00      	nop

0801a764 <uxr_deserialize_GET_INFO_Payload>:
 801a764:	b570      	push	{r4, r5, r6, lr}
 801a766:	2202      	movs	r2, #2
 801a768:	4605      	mov	r5, r0
 801a76a:	460e      	mov	r6, r1
 801a76c:	f005 fd32 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a770:	2202      	movs	r2, #2
 801a772:	4604      	mov	r4, r0
 801a774:	4628      	mov	r0, r5
 801a776:	18b1      	adds	r1, r6, r2
 801a778:	f005 fd2c 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a77c:	4603      	mov	r3, r0
 801a77e:	1d31      	adds	r1, r6, #4
 801a780:	4628      	mov	r0, r5
 801a782:	401c      	ands	r4, r3
 801a784:	f7f8 fe3a 	bl	80133fc <ucdr_deserialize_uint32_t>
 801a788:	b2e4      	uxtb	r4, r4
 801a78a:	4020      	ands	r0, r4
 801a78c:	bd70      	pop	{r4, r5, r6, pc}
 801a78e:	bf00      	nop

0801a790 <uxr_serialize_DELETE_Payload>:
 801a790:	b570      	push	{r4, r5, r6, lr}
 801a792:	2202      	movs	r2, #2
 801a794:	4605      	mov	r5, r0
 801a796:	460e      	mov	r6, r1
 801a798:	f005 fcb8 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a79c:	2202      	movs	r2, #2
 801a79e:	4604      	mov	r4, r0
 801a7a0:	4628      	mov	r0, r5
 801a7a2:	18b1      	adds	r1, r6, r2
 801a7a4:	f005 fcb2 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a7a8:	4020      	ands	r0, r4
 801a7aa:	b2c0      	uxtb	r0, r0
 801a7ac:	bd70      	pop	{r4, r5, r6, pc}
 801a7ae:	bf00      	nop

0801a7b0 <uxr_deserialize_STATUS_AGENT_Payload>:
 801a7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a7b4:	460e      	mov	r6, r1
 801a7b6:	4605      	mov	r5, r0
 801a7b8:	f7f8 faf0 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a7bc:	4604      	mov	r4, r0
 801a7be:	1c71      	adds	r1, r6, #1
 801a7c0:	4628      	mov	r0, r5
 801a7c2:	f7f8 faeb 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a7c6:	2204      	movs	r2, #4
 801a7c8:	4681      	mov	r9, r0
 801a7ca:	4628      	mov	r0, r5
 801a7cc:	18b1      	adds	r1, r6, r2
 801a7ce:	f005 fd01 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a7d2:	f106 0108 	add.w	r1, r6, #8
 801a7d6:	4680      	mov	r8, r0
 801a7d8:	2202      	movs	r2, #2
 801a7da:	4628      	mov	r0, r5
 801a7dc:	f005 fcfa 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a7e0:	ea04 0309 	and.w	r3, r4, r9
 801a7e4:	4607      	mov	r7, r0
 801a7e6:	2202      	movs	r2, #2
 801a7e8:	b2db      	uxtb	r3, r3
 801a7ea:	f106 010a 	add.w	r1, r6, #10
 801a7ee:	4628      	mov	r0, r5
 801a7f0:	ea03 0408 	and.w	r4, r3, r8
 801a7f4:	f005 fcee 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	4628      	mov	r0, r5
 801a7fc:	403c      	ands	r4, r7
 801a7fe:	f106 010c 	add.w	r1, r6, #12
 801a802:	461d      	mov	r5, r3
 801a804:	f7f8 fa9c 	bl	8012d40 <ucdr_deserialize_bool>
 801a808:	4025      	ands	r5, r4
 801a80a:	4028      	ands	r0, r5
 801a80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a810 <uxr_deserialize_STATUS_Payload>:
 801a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a814:	2202      	movs	r2, #2
 801a816:	4606      	mov	r6, r0
 801a818:	460f      	mov	r7, r1
 801a81a:	f005 fcdb 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a81e:	2202      	movs	r2, #2
 801a820:	4605      	mov	r5, r0
 801a822:	4630      	mov	r0, r6
 801a824:	18b9      	adds	r1, r7, r2
 801a826:	f005 fcd5 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a82a:	4680      	mov	r8, r0
 801a82c:	1d39      	adds	r1, r7, #4
 801a82e:	4630      	mov	r0, r6
 801a830:	f7f8 fab4 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a834:	ea05 0508 	and.w	r5, r5, r8
 801a838:	4604      	mov	r4, r0
 801a83a:	1d79      	adds	r1, r7, #5
 801a83c:	4630      	mov	r0, r6
 801a83e:	402c      	ands	r4, r5
 801a840:	f7f8 faac 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a844:	4020      	ands	r0, r4
 801a846:	b2c0      	uxtb	r0, r0
 801a848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a84c <uxr_serialize_INFO_Payload>:
 801a84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a850:	2202      	movs	r2, #2
 801a852:	460c      	mov	r4, r1
 801a854:	4605      	mov	r5, r0
 801a856:	f005 fc59 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a85a:	2202      	movs	r2, #2
 801a85c:	4680      	mov	r8, r0
 801a85e:	4628      	mov	r0, r5
 801a860:	18a1      	adds	r1, r4, r2
 801a862:	f005 fc53 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a866:	4607      	mov	r7, r0
 801a868:	7921      	ldrb	r1, [r4, #4]
 801a86a:	4628      	mov	r0, r5
 801a86c:	f7f8 fa80 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a870:	ea08 0807 	and.w	r8, r8, r7
 801a874:	4606      	mov	r6, r0
 801a876:	7961      	ldrb	r1, [r4, #5]
 801a878:	4628      	mov	r0, r5
 801a87a:	ea06 0608 	and.w	r6, r6, r8
 801a87e:	f7f8 fa77 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a882:	7a21      	ldrb	r1, [r4, #8]
 801a884:	4030      	ands	r0, r6
 801a886:	b2c7      	uxtb	r7, r0
 801a888:	4628      	mov	r0, r5
 801a88a:	f7f8 fa43 	bl	8012d14 <ucdr_serialize_bool>
 801a88e:	7a23      	ldrb	r3, [r4, #8]
 801a890:	4606      	mov	r6, r0
 801a892:	b96b      	cbnz	r3, 801a8b0 <uxr_serialize_INFO_Payload+0x64>
 801a894:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801a898:	4628      	mov	r0, r5
 801a89a:	f7f8 fa3b 	bl	8012d14 <ucdr_serialize_bool>
 801a89e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801a8a2:	4030      	ands	r0, r6
 801a8a4:	b2c6      	uxtb	r6, r0
 801a8a6:	b983      	cbnz	r3, 801a8ca <uxr_serialize_INFO_Payload+0x7e>
 801a8a8:	ea06 0007 	and.w	r0, r6, r7
 801a8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8b0:	7b21      	ldrb	r1, [r4, #12]
 801a8b2:	4628      	mov	r0, r5
 801a8b4:	f7f8 fa5c 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a8b8:	b188      	cbz	r0, 801a8de <uxr_serialize_INFO_Payload+0x92>
 801a8ba:	f104 010c 	add.w	r1, r4, #12
 801a8be:	4628      	mov	r0, r5
 801a8c0:	f7ff f9c2 	bl	8019c48 <uxr_serialize_ObjectVariant.part.0>
 801a8c4:	4030      	ands	r0, r6
 801a8c6:	b2c6      	uxtb	r6, r0
 801a8c8:	e7e4      	b.n	801a894 <uxr_serialize_INFO_Payload+0x48>
 801a8ca:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	f7ff fda2 	bl	801a418 <uxr_serialize_ActivityInfoVariant>
 801a8d4:	4006      	ands	r6, r0
 801a8d6:	ea06 0007 	and.w	r0, r6, r7
 801a8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8de:	4606      	mov	r6, r0
 801a8e0:	e7d8      	b.n	801a894 <uxr_serialize_INFO_Payload+0x48>
 801a8e2:	bf00      	nop

0801a8e4 <uxr_serialize_READ_DATA_Payload>:
 801a8e4:	b570      	push	{r4, r5, r6, lr}
 801a8e6:	2202      	movs	r2, #2
 801a8e8:	4605      	mov	r5, r0
 801a8ea:	460e      	mov	r6, r1
 801a8ec:	f005 fc0e 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a8f0:	2202      	movs	r2, #2
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	4628      	mov	r0, r5
 801a8f6:	18b1      	adds	r1, r6, r2
 801a8f8:	f005 fc08 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	1d31      	adds	r1, r6, #4
 801a900:	4628      	mov	r0, r5
 801a902:	401c      	ands	r4, r3
 801a904:	f7ff fe48 	bl	801a598 <uxr_serialize_ReadSpecification>
 801a908:	b2e4      	uxtb	r4, r4
 801a90a:	4020      	ands	r0, r4
 801a90c:	bd70      	pop	{r4, r5, r6, pc}
 801a90e:	bf00      	nop

0801a910 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801a910:	b570      	push	{r4, r5, r6, lr}
 801a912:	2202      	movs	r2, #2
 801a914:	4605      	mov	r5, r0
 801a916:	460e      	mov	r6, r1
 801a918:	f005 fbf8 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a91c:	2202      	movs	r2, #2
 801a91e:	4604      	mov	r4, r0
 801a920:	4628      	mov	r0, r5
 801a922:	18b1      	adds	r1, r6, r2
 801a924:	f005 fbf2 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a928:	4020      	ands	r0, r4
 801a92a:	b2c0      	uxtb	r0, r0
 801a92c:	bd70      	pop	{r4, r5, r6, pc}
 801a92e:	bf00      	nop

0801a930 <uxr_serialize_ACKNACK_Payload>:
 801a930:	b570      	push	{r4, r5, r6, lr}
 801a932:	460c      	mov	r4, r1
 801a934:	4605      	mov	r5, r0
 801a936:	460e      	mov	r6, r1
 801a938:	f834 1b02 	ldrh.w	r1, [r4], #2
 801a93c:	f7f8 fa44 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a940:	2202      	movs	r2, #2
 801a942:	4621      	mov	r1, r4
 801a944:	4604      	mov	r4, r0
 801a946:	4628      	mov	r0, r5
 801a948:	f005 fbe0 	bl	802010c <ucdr_serialize_array_uint8_t>
 801a94c:	4603      	mov	r3, r0
 801a94e:	7931      	ldrb	r1, [r6, #4]
 801a950:	4628      	mov	r0, r5
 801a952:	401c      	ands	r4, r3
 801a954:	f7f8 fa0c 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a958:	b2e4      	uxtb	r4, r4
 801a95a:	4020      	ands	r0, r4
 801a95c:	bd70      	pop	{r4, r5, r6, pc}
 801a95e:	bf00      	nop

0801a960 <uxr_deserialize_ACKNACK_Payload>:
 801a960:	b570      	push	{r4, r5, r6, lr}
 801a962:	460e      	mov	r6, r1
 801a964:	4605      	mov	r5, r0
 801a966:	f7f8 fb2f 	bl	8012fc8 <ucdr_deserialize_uint16_t>
 801a96a:	2202      	movs	r2, #2
 801a96c:	4604      	mov	r4, r0
 801a96e:	4628      	mov	r0, r5
 801a970:	18b1      	adds	r1, r6, r2
 801a972:	f005 fc2f 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801a976:	4603      	mov	r3, r0
 801a978:	1d31      	adds	r1, r6, #4
 801a97a:	4628      	mov	r0, r5
 801a97c:	401c      	ands	r4, r3
 801a97e:	f7f8 fa0d 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a982:	b2e4      	uxtb	r4, r4
 801a984:	4020      	ands	r0, r4
 801a986:	bd70      	pop	{r4, r5, r6, pc}

0801a988 <uxr_serialize_HEARTBEAT_Payload>:
 801a988:	b570      	push	{r4, r5, r6, lr}
 801a98a:	460d      	mov	r5, r1
 801a98c:	4606      	mov	r6, r0
 801a98e:	8809      	ldrh	r1, [r1, #0]
 801a990:	f7f8 fa1a 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a994:	8869      	ldrh	r1, [r5, #2]
 801a996:	4604      	mov	r4, r0
 801a998:	4630      	mov	r0, r6
 801a99a:	f7f8 fa15 	bl	8012dc8 <ucdr_serialize_uint16_t>
 801a99e:	4603      	mov	r3, r0
 801a9a0:	7929      	ldrb	r1, [r5, #4]
 801a9a2:	4630      	mov	r0, r6
 801a9a4:	401c      	ands	r4, r3
 801a9a6:	f7f8 f9e3 	bl	8012d70 <ucdr_serialize_uint8_t>
 801a9aa:	b2e4      	uxtb	r4, r4
 801a9ac:	4020      	ands	r0, r4
 801a9ae:	bd70      	pop	{r4, r5, r6, pc}

0801a9b0 <uxr_deserialize_HEARTBEAT_Payload>:
 801a9b0:	b570      	push	{r4, r5, r6, lr}
 801a9b2:	460e      	mov	r6, r1
 801a9b4:	4605      	mov	r5, r0
 801a9b6:	f7f8 fb07 	bl	8012fc8 <ucdr_deserialize_uint16_t>
 801a9ba:	4604      	mov	r4, r0
 801a9bc:	1cb1      	adds	r1, r6, #2
 801a9be:	4628      	mov	r0, r5
 801a9c0:	f7f8 fb02 	bl	8012fc8 <ucdr_deserialize_uint16_t>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	1d31      	adds	r1, r6, #4
 801a9c8:	4628      	mov	r0, r5
 801a9ca:	401c      	ands	r4, r3
 801a9cc:	f7f8 f9e6 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801a9d0:	b2e4      	uxtb	r4, r4
 801a9d2:	4020      	ands	r0, r4
 801a9d4:	bd70      	pop	{r4, r5, r6, pc}
 801a9d6:	bf00      	nop

0801a9d8 <uxr_serialize_TIMESTAMP_Payload>:
 801a9d8:	b570      	push	{r4, r5, r6, lr}
 801a9da:	460d      	mov	r5, r1
 801a9dc:	4606      	mov	r6, r0
 801a9de:	6809      	ldr	r1, [r1, #0]
 801a9e0:	f7f8 fff6 	bl	80139d0 <ucdr_serialize_int32_t>
 801a9e4:	4604      	mov	r4, r0
 801a9e6:	6869      	ldr	r1, [r5, #4]
 801a9e8:	4630      	mov	r0, r6
 801a9ea:	f7f8 fbd7 	bl	801319c <ucdr_serialize_uint32_t>
 801a9ee:	4020      	ands	r0, r4
 801a9f0:	b2c0      	uxtb	r0, r0
 801a9f2:	bd70      	pop	{r4, r5, r6, pc}

0801a9f4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9f8:	460e      	mov	r6, r1
 801a9fa:	4605      	mov	r5, r0
 801a9fc:	f7f9 f880 	bl	8013b00 <ucdr_deserialize_int32_t>
 801aa00:	4607      	mov	r7, r0
 801aa02:	1d31      	adds	r1, r6, #4
 801aa04:	4628      	mov	r0, r5
 801aa06:	f7f8 fcf9 	bl	80133fc <ucdr_deserialize_uint32_t>
 801aa0a:	4680      	mov	r8, r0
 801aa0c:	f106 0108 	add.w	r1, r6, #8
 801aa10:	4628      	mov	r0, r5
 801aa12:	f7f9 f875 	bl	8013b00 <ucdr_deserialize_int32_t>
 801aa16:	ea07 0708 	and.w	r7, r7, r8
 801aa1a:	4604      	mov	r4, r0
 801aa1c:	f106 010c 	add.w	r1, r6, #12
 801aa20:	4628      	mov	r0, r5
 801aa22:	403c      	ands	r4, r7
 801aa24:	f7f8 fcea 	bl	80133fc <ucdr_deserialize_uint32_t>
 801aa28:	f106 0110 	add.w	r1, r6, #16
 801aa2c:	4004      	ands	r4, r0
 801aa2e:	4628      	mov	r0, r5
 801aa30:	f7f9 f866 	bl	8013b00 <ucdr_deserialize_int32_t>
 801aa34:	4603      	mov	r3, r0
 801aa36:	b2e4      	uxtb	r4, r4
 801aa38:	4628      	mov	r0, r5
 801aa3a:	461d      	mov	r5, r3
 801aa3c:	f106 0114 	add.w	r1, r6, #20
 801aa40:	f7f8 fcdc 	bl	80133fc <ucdr_deserialize_uint32_t>
 801aa44:	402c      	ands	r4, r5
 801aa46:	4020      	ands	r0, r4
 801aa48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801aa4c <uxr_serialize_SampleIdentity>:
 801aa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa50:	4604      	mov	r4, r0
 801aa52:	460d      	mov	r5, r1
 801aa54:	220c      	movs	r2, #12
 801aa56:	f005 fb59 	bl	802010c <ucdr_serialize_array_uint8_t>
 801aa5a:	2203      	movs	r2, #3
 801aa5c:	f105 010c 	add.w	r1, r5, #12
 801aa60:	4607      	mov	r7, r0
 801aa62:	4620      	mov	r0, r4
 801aa64:	f005 fb52 	bl	802010c <ucdr_serialize_array_uint8_t>
 801aa68:	7be9      	ldrb	r1, [r5, #15]
 801aa6a:	4680      	mov	r8, r0
 801aa6c:	4620      	mov	r0, r4
 801aa6e:	f7f8 f97f 	bl	8012d70 <ucdr_serialize_uint8_t>
 801aa72:	6929      	ldr	r1, [r5, #16]
 801aa74:	4606      	mov	r6, r0
 801aa76:	4620      	mov	r0, r4
 801aa78:	f7f8 ffaa 	bl	80139d0 <ucdr_serialize_int32_t>
 801aa7c:	ea07 0708 	and.w	r7, r7, r8
 801aa80:	4603      	mov	r3, r0
 801aa82:	4620      	mov	r0, r4
 801aa84:	403e      	ands	r6, r7
 801aa86:	6969      	ldr	r1, [r5, #20]
 801aa88:	461c      	mov	r4, r3
 801aa8a:	f7f8 fb87 	bl	801319c <ucdr_serialize_uint32_t>
 801aa8e:	4034      	ands	r4, r6
 801aa90:	4020      	ands	r0, r4
 801aa92:	b2c0      	uxtb	r0, r0
 801aa94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801aa98 <uxr_deserialize_SampleIdentity>:
 801aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa9c:	4604      	mov	r4, r0
 801aa9e:	460d      	mov	r5, r1
 801aaa0:	220c      	movs	r2, #12
 801aaa2:	f005 fb97 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801aaa6:	2203      	movs	r2, #3
 801aaa8:	f105 010c 	add.w	r1, r5, #12
 801aaac:	4607      	mov	r7, r0
 801aaae:	4620      	mov	r0, r4
 801aab0:	f005 fb90 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 801aab4:	f105 010f 	add.w	r1, r5, #15
 801aab8:	4680      	mov	r8, r0
 801aaba:	4620      	mov	r0, r4
 801aabc:	f7f8 f96e 	bl	8012d9c <ucdr_deserialize_uint8_t>
 801aac0:	f105 0110 	add.w	r1, r5, #16
 801aac4:	4606      	mov	r6, r0
 801aac6:	4620      	mov	r0, r4
 801aac8:	f7f9 f81a 	bl	8013b00 <ucdr_deserialize_int32_t>
 801aacc:	ea07 0708 	and.w	r7, r7, r8
 801aad0:	4603      	mov	r3, r0
 801aad2:	4620      	mov	r0, r4
 801aad4:	403e      	ands	r6, r7
 801aad6:	f105 0114 	add.w	r1, r5, #20
 801aada:	461c      	mov	r4, r3
 801aadc:	f7f8 fc8e 	bl	80133fc <ucdr_deserialize_uint32_t>
 801aae0:	4034      	ands	r4, r6
 801aae2:	4020      	ands	r0, r4
 801aae4:	b2c0      	uxtb	r0, r0
 801aae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aaea:	bf00      	nop

0801aaec <rcl_client_get_rmw_handle>:
 801aaec:	b118      	cbz	r0, 801aaf6 <rcl_client_get_rmw_handle+0xa>
 801aaee:	6800      	ldr	r0, [r0, #0]
 801aaf0:	b108      	cbz	r0, 801aaf6 <rcl_client_get_rmw_handle+0xa>
 801aaf2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801aaf6:	4770      	bx	lr

0801aaf8 <rcl_send_request>:
 801aaf8:	b570      	push	{r4, r5, r6, lr}
 801aafa:	b082      	sub	sp, #8
 801aafc:	b1f8      	cbz	r0, 801ab3e <rcl_send_request+0x46>
 801aafe:	4604      	mov	r4, r0
 801ab00:	6800      	ldr	r0, [r0, #0]
 801ab02:	b1e0      	cbz	r0, 801ab3e <rcl_send_request+0x46>
 801ab04:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801ab08:	b1cb      	cbz	r3, 801ab3e <rcl_send_request+0x46>
 801ab0a:	460e      	mov	r6, r1
 801ab0c:	b1e1      	cbz	r1, 801ab48 <rcl_send_request+0x50>
 801ab0e:	4615      	mov	r5, r2
 801ab10:	b1d2      	cbz	r2, 801ab48 <rcl_send_request+0x50>
 801ab12:	2105      	movs	r1, #5
 801ab14:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801ab18:	f003 f8b6 	bl	801dc88 <__atomic_load_8>
 801ab1c:	4602      	mov	r2, r0
 801ab1e:	460b      	mov	r3, r1
 801ab20:	4631      	mov	r1, r6
 801ab22:	e9c5 2300 	strd	r2, r3, [r5]
 801ab26:	6823      	ldr	r3, [r4, #0]
 801ab28:	462a      	mov	r2, r5
 801ab2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801ab2e:	f004 faa1 	bl	801f074 <rmw_send_request>
 801ab32:	4606      	mov	r6, r0
 801ab34:	b160      	cbz	r0, 801ab50 <rcl_send_request+0x58>
 801ab36:	2601      	movs	r6, #1
 801ab38:	4630      	mov	r0, r6
 801ab3a:	b002      	add	sp, #8
 801ab3c:	bd70      	pop	{r4, r5, r6, pc}
 801ab3e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801ab42:	4630      	mov	r0, r6
 801ab44:	b002      	add	sp, #8
 801ab46:	bd70      	pop	{r4, r5, r6, pc}
 801ab48:	260b      	movs	r6, #11
 801ab4a:	4630      	mov	r0, r6
 801ab4c:	b002      	add	sp, #8
 801ab4e:	bd70      	pop	{r4, r5, r6, pc}
 801ab50:	6820      	ldr	r0, [r4, #0]
 801ab52:	2105      	movs	r1, #5
 801ab54:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ab58:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801ab5c:	9100      	str	r1, [sp, #0]
 801ab5e:	f003 f8ff 	bl	801dd60 <__atomic_exchange_8>
 801ab62:	4630      	mov	r0, r6
 801ab64:	b002      	add	sp, #8
 801ab66:	bd70      	pop	{r4, r5, r6, pc}

0801ab68 <rcl_take_response>:
 801ab68:	b570      	push	{r4, r5, r6, lr}
 801ab6a:	468e      	mov	lr, r1
 801ab6c:	b08c      	sub	sp, #48	@ 0x30
 801ab6e:	460c      	mov	r4, r1
 801ab70:	4616      	mov	r6, r2
 801ab72:	f10d 0c18 	add.w	ip, sp, #24
 801ab76:	4605      	mov	r5, r0
 801ab78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ab7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab80:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ab84:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ab88:	b35d      	cbz	r5, 801abe2 <rcl_take_response+0x7a>
 801ab8a:	682b      	ldr	r3, [r5, #0]
 801ab8c:	b34b      	cbz	r3, 801abe2 <rcl_take_response+0x7a>
 801ab8e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801ab92:	b330      	cbz	r0, 801abe2 <rcl_take_response+0x7a>
 801ab94:	b346      	cbz	r6, 801abe8 <rcl_take_response+0x80>
 801ab96:	2300      	movs	r3, #0
 801ab98:	4632      	mov	r2, r6
 801ab9a:	a902      	add	r1, sp, #8
 801ab9c:	f88d 3007 	strb.w	r3, [sp, #7]
 801aba0:	f10d 0307 	add.w	r3, sp, #7
 801aba4:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801abf0 <rcl_take_response+0x88>
 801aba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801abac:	ed8d 7b04 	vstr	d7, [sp, #16]
 801abb0:	f004 fb68 	bl	801f284 <rmw_take_response>
 801abb4:	4605      	mov	r5, r0
 801abb6:	b9c8      	cbnz	r0, 801abec <rcl_take_response+0x84>
 801abb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801abbc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801abc0:	2a00      	cmp	r2, #0
 801abc2:	bf08      	it	eq
 801abc4:	461d      	moveq	r5, r3
 801abc6:	f10d 0e18 	add.w	lr, sp, #24
 801abca:	46a4      	mov	ip, r4
 801abcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801abd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801abd4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801abd8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801abdc:	4628      	mov	r0, r5
 801abde:	b00c      	add	sp, #48	@ 0x30
 801abe0:	bd70      	pop	{r4, r5, r6, pc}
 801abe2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801abe6:	e7ee      	b.n	801abc6 <rcl_take_response+0x5e>
 801abe8:	250b      	movs	r5, #11
 801abea:	e7ec      	b.n	801abc6 <rcl_take_response+0x5e>
 801abec:	2501      	movs	r5, #1
 801abee:	e7ea      	b.n	801abc6 <rcl_take_response+0x5e>
	...

0801abf8 <rcl_client_is_valid>:
 801abf8:	b130      	cbz	r0, 801ac08 <rcl_client_is_valid+0x10>
 801abfa:	6800      	ldr	r0, [r0, #0]
 801abfc:	b120      	cbz	r0, 801ac08 <rcl_client_is_valid+0x10>
 801abfe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801ac02:	3800      	subs	r0, #0
 801ac04:	bf18      	it	ne
 801ac06:	2001      	movne	r0, #1
 801ac08:	4770      	bx	lr
 801ac0a:	bf00      	nop

0801ac0c <rcl_convert_rmw_ret_to_rcl_ret>:
 801ac0c:	280b      	cmp	r0, #11
 801ac0e:	dc0d      	bgt.n	801ac2c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801ac10:	2800      	cmp	r0, #0
 801ac12:	db09      	blt.n	801ac28 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ac14:	280b      	cmp	r0, #11
 801ac16:	d807      	bhi.n	801ac28 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ac18:	e8df f000 	tbb	[pc, r0]
 801ac1c:	07060607 	.word	0x07060607
 801ac20:	06060606 	.word	0x06060606
 801ac24:	07070606 	.word	0x07070606
 801ac28:	2001      	movs	r0, #1
 801ac2a:	4770      	bx	lr
 801ac2c:	28cb      	cmp	r0, #203	@ 0xcb
 801ac2e:	bf18      	it	ne
 801ac30:	2001      	movne	r0, #1
 801ac32:	4770      	bx	lr

0801ac34 <rcl_get_zero_initialized_context>:
 801ac34:	4a03      	ldr	r2, [pc, #12]	@ (801ac44 <rcl_get_zero_initialized_context+0x10>)
 801ac36:	4603      	mov	r3, r0
 801ac38:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ac3c:	e883 0003 	stmia.w	r3, {r0, r1}
 801ac40:	4618      	mov	r0, r3
 801ac42:	4770      	bx	lr
 801ac44:	080252c0 	.word	0x080252c0

0801ac48 <rcl_context_is_valid>:
 801ac48:	b118      	cbz	r0, 801ac52 <rcl_context_is_valid+0xa>
 801ac4a:	6840      	ldr	r0, [r0, #4]
 801ac4c:	3800      	subs	r0, #0
 801ac4e:	bf18      	it	ne
 801ac50:	2001      	movne	r0, #1
 801ac52:	4770      	bx	lr

0801ac54 <__cleanup_context>:
 801ac54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac58:	4606      	mov	r6, r0
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	6800      	ldr	r0, [r0, #0]
 801ac5e:	6073      	str	r3, [r6, #4]
 801ac60:	2800      	cmp	r0, #0
 801ac62:	d049      	beq.n	801acf8 <__cleanup_context+0xa4>
 801ac64:	6947      	ldr	r7, [r0, #20]
 801ac66:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ac6a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801ac6e:	b137      	cbz	r7, 801ac7e <__cleanup_context+0x2a>
 801ac70:	3014      	adds	r0, #20
 801ac72:	f000 f9bd 	bl	801aff0 <rcl_init_options_fini>
 801ac76:	4607      	mov	r7, r0
 801ac78:	2800      	cmp	r0, #0
 801ac7a:	d144      	bne.n	801ad06 <__cleanup_context+0xb2>
 801ac7c:	6830      	ldr	r0, [r6, #0]
 801ac7e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ac80:	b143      	cbz	r3, 801ac94 <__cleanup_context+0x40>
 801ac82:	3028      	adds	r0, #40	@ 0x28
 801ac84:	f004 f83c 	bl	801ed00 <rmw_context_fini>
 801ac88:	b118      	cbz	r0, 801ac92 <__cleanup_context+0x3e>
 801ac8a:	2f00      	cmp	r7, #0
 801ac8c:	d03e      	beq.n	801ad0c <__cleanup_context+0xb8>
 801ac8e:	f7fa fc9b 	bl	80155c8 <rcutils_reset_error>
 801ac92:	6830      	ldr	r0, [r6, #0]
 801ac94:	6a03      	ldr	r3, [r0, #32]
 801ac96:	b1db      	cbz	r3, 801acd0 <__cleanup_context+0x7c>
 801ac98:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801ac9c:	2a01      	cmp	r2, #1
 801ac9e:	f17c 0100 	sbcs.w	r1, ip, #0
 801aca2:	db11      	blt.n	801acc8 <__cleanup_context+0x74>
 801aca4:	2400      	movs	r4, #0
 801aca6:	4625      	mov	r5, r4
 801aca8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801acac:	4649      	mov	r1, r9
 801acae:	b1b8      	cbz	r0, 801ace0 <__cleanup_context+0x8c>
 801acb0:	47c0      	blx	r8
 801acb2:	6833      	ldr	r3, [r6, #0]
 801acb4:	3401      	adds	r4, #1
 801acb6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801acba:	f145 0500 	adc.w	r5, r5, #0
 801acbe:	6a1b      	ldr	r3, [r3, #32]
 801acc0:	4294      	cmp	r4, r2
 801acc2:	eb75 010c 	sbcs.w	r1, r5, ip
 801acc6:	dbef      	blt.n	801aca8 <__cleanup_context+0x54>
 801acc8:	4618      	mov	r0, r3
 801acca:	4649      	mov	r1, r9
 801accc:	47c0      	blx	r8
 801acce:	6830      	ldr	r0, [r6, #0]
 801acd0:	4649      	mov	r1, r9
 801acd2:	47c0      	blx	r8
 801acd4:	2300      	movs	r3, #0
 801acd6:	4638      	mov	r0, r7
 801acd8:	e9c6 3300 	strd	r3, r3, [r6]
 801acdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ace0:	3401      	adds	r4, #1
 801ace2:	f145 0500 	adc.w	r5, r5, #0
 801ace6:	4294      	cmp	r4, r2
 801ace8:	eb75 010c 	sbcs.w	r1, r5, ip
 801acec:	dbdc      	blt.n	801aca8 <__cleanup_context+0x54>
 801acee:	4618      	mov	r0, r3
 801acf0:	4649      	mov	r1, r9
 801acf2:	47c0      	blx	r8
 801acf4:	6830      	ldr	r0, [r6, #0]
 801acf6:	e7eb      	b.n	801acd0 <__cleanup_context+0x7c>
 801acf8:	4607      	mov	r7, r0
 801acfa:	2300      	movs	r3, #0
 801acfc:	4638      	mov	r0, r7
 801acfe:	e9c6 3300 	strd	r3, r3, [r6]
 801ad02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad06:	f7fa fc5f 	bl	80155c8 <rcutils_reset_error>
 801ad0a:	e7b7      	b.n	801ac7c <__cleanup_context+0x28>
 801ad0c:	f7ff ff7e 	bl	801ac0c <rcl_convert_rmw_ret_to_rcl_ret>
 801ad10:	4607      	mov	r7, r0
 801ad12:	e7bc      	b.n	801ac8e <__cleanup_context+0x3a>

0801ad14 <rcl_init>:
 801ad14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad18:	1e05      	subs	r5, r0, #0
 801ad1a:	b09e      	sub	sp, #120	@ 0x78
 801ad1c:	460e      	mov	r6, r1
 801ad1e:	4690      	mov	r8, r2
 801ad20:	461f      	mov	r7, r3
 801ad22:	f340 809f 	ble.w	801ae64 <rcl_init+0x150>
 801ad26:	2900      	cmp	r1, #0
 801ad28:	f000 809f 	beq.w	801ae6a <rcl_init+0x156>
 801ad2c:	f1a1 0e04 	sub.w	lr, r1, #4
 801ad30:	f04f 0c00 	mov.w	ip, #0
 801ad34:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801ad38:	f10c 0c01 	add.w	ip, ip, #1
 801ad3c:	2c00      	cmp	r4, #0
 801ad3e:	f000 8094 	beq.w	801ae6a <rcl_init+0x156>
 801ad42:	4565      	cmp	r5, ip
 801ad44:	d1f6      	bne.n	801ad34 <rcl_init+0x20>
 801ad46:	f1b8 0f00 	cmp.w	r8, #0
 801ad4a:	f000 808e 	beq.w	801ae6a <rcl_init+0x156>
 801ad4e:	f8d8 4000 	ldr.w	r4, [r8]
 801ad52:	2c00      	cmp	r4, #0
 801ad54:	f000 8089 	beq.w	801ae6a <rcl_init+0x156>
 801ad58:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801ad5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad62:	6823      	ldr	r3, [r4, #0]
 801ad64:	a819      	add	r0, sp, #100	@ 0x64
 801ad66:	f8cc 3000 	str.w	r3, [ip]
 801ad6a:	f7fa fc09 	bl	8015580 <rcutils_allocator_is_valid>
 801ad6e:	f080 0001 	eor.w	r0, r0, #1
 801ad72:	b2c0      	uxtb	r0, r0
 801ad74:	2800      	cmp	r0, #0
 801ad76:	d178      	bne.n	801ae6a <rcl_init+0x156>
 801ad78:	2f00      	cmp	r7, #0
 801ad7a:	d076      	beq.n	801ae6a <rcl_init+0x156>
 801ad7c:	683b      	ldr	r3, [r7, #0]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d178      	bne.n	801ae74 <rcl_init+0x160>
 801ad82:	2178      	movs	r1, #120	@ 0x78
 801ad84:	2001      	movs	r0, #1
 801ad86:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801ad8a:	4798      	blx	r3
 801ad8c:	4604      	mov	r4, r0
 801ad8e:	6038      	str	r0, [r7, #0]
 801ad90:	2800      	cmp	r0, #0
 801ad92:	f000 80b6 	beq.w	801af02 <rcl_init+0x1ee>
 801ad96:	a802      	add	r0, sp, #8
 801ad98:	f003 faea 	bl	801e370 <rmw_get_zero_initialized_context>
 801ad9c:	a902      	add	r1, sp, #8
 801ad9e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801ada2:	2250      	movs	r2, #80	@ 0x50
 801ada4:	f007 fc47 	bl	8022636 <memcpy>
 801ada8:	ac19      	add	r4, sp, #100	@ 0x64
 801adaa:	f8d7 e000 	ldr.w	lr, [r7]
 801adae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801adb0:	46f4      	mov	ip, lr
 801adb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801adb6:	6823      	ldr	r3, [r4, #0]
 801adb8:	f10e 0114 	add.w	r1, lr, #20
 801adbc:	4640      	mov	r0, r8
 801adbe:	f8cc 3000 	str.w	r3, [ip]
 801adc2:	f000 f93f 	bl	801b044 <rcl_init_options_copy>
 801adc6:	4604      	mov	r4, r0
 801adc8:	2800      	cmp	r0, #0
 801adca:	d144      	bne.n	801ae56 <rcl_init+0x142>
 801adcc:	f8d7 9000 	ldr.w	r9, [r7]
 801add0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801add4:	f8c9 0020 	str.w	r0, [r9, #32]
 801add8:	f8c9 5018 	str.w	r5, [r9, #24]
 801addc:	f8c9 801c 	str.w	r8, [r9, #28]
 801ade0:	2d00      	cmp	r5, #0
 801ade2:	d04e      	beq.n	801ae82 <rcl_init+0x16e>
 801ade4:	2e00      	cmp	r6, #0
 801ade6:	d04c      	beq.n	801ae82 <rcl_init+0x16e>
 801ade8:	2104      	movs	r1, #4
 801adea:	4628      	mov	r0, r5
 801adec:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801adf0:	4798      	blx	r3
 801adf2:	f8c9 0020 	str.w	r0, [r9, #32]
 801adf6:	f8d7 9000 	ldr.w	r9, [r7]
 801adfa:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801adfe:	46ca      	mov	sl, r9
 801ae00:	b343      	cbz	r3, 801ae54 <rcl_init+0x140>
 801ae02:	2d01      	cmp	r5, #1
 801ae04:	f178 0300 	sbcs.w	r3, r8, #0
 801ae08:	db3b      	blt.n	801ae82 <rcl_init+0x16e>
 801ae0a:	2400      	movs	r4, #0
 801ae0c:	3e04      	subs	r6, #4
 801ae0e:	46a1      	mov	r9, r4
 801ae10:	e00b      	b.n	801ae2a <rcl_init+0x116>
 801ae12:	6831      	ldr	r1, [r6, #0]
 801ae14:	f007 fc0f 	bl	8022636 <memcpy>
 801ae18:	3401      	adds	r4, #1
 801ae1a:	f149 0900 	adc.w	r9, r9, #0
 801ae1e:	45c8      	cmp	r8, r9
 801ae20:	bf08      	it	eq
 801ae22:	42a5      	cmpeq	r5, r4
 801ae24:	d02b      	beq.n	801ae7e <rcl_init+0x16a>
 801ae26:	f8d7 a000 	ldr.w	sl, [r7]
 801ae2a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801ae2e:	f7e5 fa61 	bl	80002f4 <strlen>
 801ae32:	1c42      	adds	r2, r0, #1
 801ae34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ae36:	4610      	mov	r0, r2
 801ae38:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801ae3a:	f8da a020 	ldr.w	sl, [sl, #32]
 801ae3e:	9201      	str	r2, [sp, #4]
 801ae40:	4798      	blx	r3
 801ae42:	683b      	ldr	r3, [r7, #0]
 801ae44:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801ae48:	6a1b      	ldr	r3, [r3, #32]
 801ae4a:	9a01      	ldr	r2, [sp, #4]
 801ae4c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ae50:	2800      	cmp	r0, #0
 801ae52:	d1de      	bne.n	801ae12 <rcl_init+0xfe>
 801ae54:	240a      	movs	r4, #10
 801ae56:	4638      	mov	r0, r7
 801ae58:	f7ff fefc 	bl	801ac54 <__cleanup_context>
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	b01e      	add	sp, #120	@ 0x78
 801ae60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae64:	2900      	cmp	r1, #0
 801ae66:	f43f af6e 	beq.w	801ad46 <rcl_init+0x32>
 801ae6a:	240b      	movs	r4, #11
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	b01e      	add	sp, #120	@ 0x78
 801ae70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae74:	2464      	movs	r4, #100	@ 0x64
 801ae76:	4620      	mov	r0, r4
 801ae78:	b01e      	add	sp, #120	@ 0x78
 801ae7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae7e:	f8d7 9000 	ldr.w	r9, [r7]
 801ae82:	4926      	ldr	r1, [pc, #152]	@ (801af1c <rcl_init+0x208>)
 801ae84:	680b      	ldr	r3, [r1, #0]
 801ae86:	3301      	adds	r3, #1
 801ae88:	d036      	beq.n	801aef8 <rcl_init+0x1e4>
 801ae8a:	461a      	mov	r2, r3
 801ae8c:	2400      	movs	r4, #0
 801ae8e:	600b      	str	r3, [r1, #0]
 801ae90:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ae94:	607b      	str	r3, [r7, #4]
 801ae96:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ae98:	3301      	adds	r3, #1
 801ae9a:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801ae9e:	d034      	beq.n	801af0a <rcl_init+0x1f6>
 801aea0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801aea4:	b93b      	cbnz	r3, 801aeb6 <rcl_init+0x1a2>
 801aea6:	3030      	adds	r0, #48	@ 0x30
 801aea8:	f000 f93a 	bl	801b120 <rcl_get_localhost_only>
 801aeac:	4604      	mov	r4, r0
 801aeae:	2800      	cmp	r0, #0
 801aeb0:	d1d1      	bne.n	801ae56 <rcl_init+0x142>
 801aeb2:	683b      	ldr	r3, [r7, #0]
 801aeb4:	6958      	ldr	r0, [r3, #20]
 801aeb6:	aa18      	add	r2, sp, #96	@ 0x60
 801aeb8:	a917      	add	r1, sp, #92	@ 0x5c
 801aeba:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801aebc:	f001 fb6e 	bl	801c59c <rcl_validate_enclave_name>
 801aec0:	4604      	mov	r4, r0
 801aec2:	2800      	cmp	r0, #0
 801aec4:	d1c7      	bne.n	801ae56 <rcl_init+0x142>
 801aec6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aec8:	b9eb      	cbnz	r3, 801af06 <rcl_init+0x1f2>
 801aeca:	6839      	ldr	r1, [r7, #0]
 801aecc:	694b      	ldr	r3, [r1, #20]
 801aece:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801aed2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801aed4:	f000 fc72 	bl	801b7bc <rcl_get_security_options_from_environment>
 801aed8:	4604      	mov	r4, r0
 801aeda:	2800      	cmp	r0, #0
 801aedc:	d1bb      	bne.n	801ae56 <rcl_init+0x142>
 801aede:	6839      	ldr	r1, [r7, #0]
 801aee0:	6948      	ldr	r0, [r1, #20]
 801aee2:	3128      	adds	r1, #40	@ 0x28
 801aee4:	3018      	adds	r0, #24
 801aee6:	f003 fdd5 	bl	801ea94 <rmw_init>
 801aeea:	4604      	mov	r4, r0
 801aeec:	2800      	cmp	r0, #0
 801aeee:	d0bd      	beq.n	801ae6c <rcl_init+0x158>
 801aef0:	f7ff fe8c 	bl	801ac0c <rcl_convert_rmw_ret_to_rcl_ret>
 801aef4:	4604      	mov	r4, r0
 801aef6:	e7ae      	b.n	801ae56 <rcl_init+0x142>
 801aef8:	2201      	movs	r2, #1
 801aefa:	461c      	mov	r4, r3
 801aefc:	600a      	str	r2, [r1, #0]
 801aefe:	4613      	mov	r3, r2
 801af00:	e7c6      	b.n	801ae90 <rcl_init+0x17c>
 801af02:	240a      	movs	r4, #10
 801af04:	e7b2      	b.n	801ae6c <rcl_init+0x158>
 801af06:	2401      	movs	r4, #1
 801af08:	e7a5      	b.n	801ae56 <rcl_init+0x142>
 801af0a:	3024      	adds	r0, #36	@ 0x24
 801af0c:	f006 f87c 	bl	8021008 <rcl_get_default_domain_id>
 801af10:	4604      	mov	r4, r0
 801af12:	2800      	cmp	r0, #0
 801af14:	d19f      	bne.n	801ae56 <rcl_init+0x142>
 801af16:	683b      	ldr	r3, [r7, #0]
 801af18:	6958      	ldr	r0, [r3, #20]
 801af1a:	e7c1      	b.n	801aea0 <rcl_init+0x18c>
 801af1c:	240693e0 	.word	0x240693e0

0801af20 <rcl_get_zero_initialized_init_options>:
 801af20:	2000      	movs	r0, #0
 801af22:	4770      	bx	lr

0801af24 <rcl_init_options_init>:
 801af24:	b084      	sub	sp, #16
 801af26:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af28:	b097      	sub	sp, #92	@ 0x5c
 801af2a:	ae1d      	add	r6, sp, #116	@ 0x74
 801af2c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801af30:	2800      	cmp	r0, #0
 801af32:	d058      	beq.n	801afe6 <rcl_init_options_init+0xc2>
 801af34:	6803      	ldr	r3, [r0, #0]
 801af36:	4605      	mov	r5, r0
 801af38:	b133      	cbz	r3, 801af48 <rcl_init_options_init+0x24>
 801af3a:	2464      	movs	r4, #100	@ 0x64
 801af3c:	4620      	mov	r0, r4
 801af3e:	b017      	add	sp, #92	@ 0x5c
 801af40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801af44:	b004      	add	sp, #16
 801af46:	4770      	bx	lr
 801af48:	4630      	mov	r0, r6
 801af4a:	f7fa fb19 	bl	8015580 <rcutils_allocator_is_valid>
 801af4e:	2800      	cmp	r0, #0
 801af50:	d049      	beq.n	801afe6 <rcl_init_options_init+0xc2>
 801af52:	46b4      	mov	ip, r6
 801af54:	ac11      	add	r4, sp, #68	@ 0x44
 801af56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801af5c:	f8dc 3000 	ldr.w	r3, [ip]
 801af60:	2050      	movs	r0, #80	@ 0x50
 801af62:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801af64:	6023      	str	r3, [r4, #0]
 801af66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af68:	4798      	blx	r3
 801af6a:	4604      	mov	r4, r0
 801af6c:	6028      	str	r0, [r5, #0]
 801af6e:	2800      	cmp	r0, #0
 801af70:	d03b      	beq.n	801afea <rcl_init_options_init+0xc6>
 801af72:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801af76:	4686      	mov	lr, r0
 801af78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801af80:	f8dc 3000 	ldr.w	r3, [ip]
 801af84:	a802      	add	r0, sp, #8
 801af86:	f8ce 3000 	str.w	r3, [lr]
 801af8a:	f003 fa05 	bl	801e398 <rmw_get_zero_initialized_init_options>
 801af8e:	f10d 0e08 	add.w	lr, sp, #8
 801af92:	f104 0c18 	add.w	ip, r4, #24
 801af96:	682f      	ldr	r7, [r5, #0]
 801af98:	ac20      	add	r4, sp, #128	@ 0x80
 801af9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801af9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afa2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801afa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801afae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afb2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801afb6:	e88c 0003 	stmia.w	ip, {r0, r1}
 801afba:	e894 0003 	ldmia.w	r4, {r0, r1}
 801afbe:	e88d 0003 	stmia.w	sp, {r0, r1}
 801afc2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801afc6:	f107 0018 	add.w	r0, r7, #24
 801afca:	f003 fc65 	bl	801e898 <rmw_init_options_init>
 801afce:	4604      	mov	r4, r0
 801afd0:	2800      	cmp	r0, #0
 801afd2:	d0b3      	beq.n	801af3c <rcl_init_options_init+0x18>
 801afd4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801afd6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801afd8:	6828      	ldr	r0, [r5, #0]
 801afda:	4798      	blx	r3
 801afdc:	4620      	mov	r0, r4
 801afde:	f7ff fe15 	bl	801ac0c <rcl_convert_rmw_ret_to_rcl_ret>
 801afe2:	4604      	mov	r4, r0
 801afe4:	e7aa      	b.n	801af3c <rcl_init_options_init+0x18>
 801afe6:	240b      	movs	r4, #11
 801afe8:	e7a8      	b.n	801af3c <rcl_init_options_init+0x18>
 801afea:	240a      	movs	r4, #10
 801afec:	e7a6      	b.n	801af3c <rcl_init_options_init+0x18>
 801afee:	bf00      	nop

0801aff0 <rcl_init_options_fini>:
 801aff0:	b530      	push	{r4, r5, lr}
 801aff2:	b087      	sub	sp, #28
 801aff4:	b1f0      	cbz	r0, 801b034 <rcl_init_options_fini+0x44>
 801aff6:	6803      	ldr	r3, [r0, #0]
 801aff8:	4604      	mov	r4, r0
 801affa:	b1db      	cbz	r3, 801b034 <rcl_init_options_fini+0x44>
 801affc:	469c      	mov	ip, r3
 801affe:	f10d 0e04 	add.w	lr, sp, #4
 801b002:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b006:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b00a:	f8dc 3000 	ldr.w	r3, [ip]
 801b00e:	a801      	add	r0, sp, #4
 801b010:	f8ce 3000 	str.w	r3, [lr]
 801b014:	f7fa fab4 	bl	8015580 <rcutils_allocator_is_valid>
 801b018:	b160      	cbz	r0, 801b034 <rcl_init_options_fini+0x44>
 801b01a:	6820      	ldr	r0, [r4, #0]
 801b01c:	3018      	adds	r0, #24
 801b01e:	f003 fcf5 	bl	801ea0c <rmw_init_options_fini>
 801b022:	4605      	mov	r5, r0
 801b024:	b950      	cbnz	r0, 801b03c <rcl_init_options_fini+0x4c>
 801b026:	6820      	ldr	r0, [r4, #0]
 801b028:	9b02      	ldr	r3, [sp, #8]
 801b02a:	9905      	ldr	r1, [sp, #20]
 801b02c:	4798      	blx	r3
 801b02e:	4628      	mov	r0, r5
 801b030:	b007      	add	sp, #28
 801b032:	bd30      	pop	{r4, r5, pc}
 801b034:	250b      	movs	r5, #11
 801b036:	4628      	mov	r0, r5
 801b038:	b007      	add	sp, #28
 801b03a:	bd30      	pop	{r4, r5, pc}
 801b03c:	f7ff fde6 	bl	801ac0c <rcl_convert_rmw_ret_to_rcl_ret>
 801b040:	4605      	mov	r5, r0
 801b042:	e7f8      	b.n	801b036 <rcl_init_options_fini+0x46>

0801b044 <rcl_init_options_copy>:
 801b044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b048:	b094      	sub	sp, #80	@ 0x50
 801b04a:	2800      	cmp	r0, #0
 801b04c:	d05b      	beq.n	801b106 <rcl_init_options_copy+0xc2>
 801b04e:	4604      	mov	r4, r0
 801b050:	6800      	ldr	r0, [r0, #0]
 801b052:	2800      	cmp	r0, #0
 801b054:	d057      	beq.n	801b106 <rcl_init_options_copy+0xc2>
 801b056:	460e      	mov	r6, r1
 801b058:	f7fa fa92 	bl	8015580 <rcutils_allocator_is_valid>
 801b05c:	2e00      	cmp	r6, #0
 801b05e:	d052      	beq.n	801b106 <rcl_init_options_copy+0xc2>
 801b060:	f080 0001 	eor.w	r0, r0, #1
 801b064:	b2c0      	uxtb	r0, r0
 801b066:	2800      	cmp	r0, #0
 801b068:	d14d      	bne.n	801b106 <rcl_init_options_copy+0xc2>
 801b06a:	6833      	ldr	r3, [r6, #0]
 801b06c:	b123      	cbz	r3, 801b078 <rcl_init_options_copy+0x34>
 801b06e:	2464      	movs	r4, #100	@ 0x64
 801b070:	4620      	mov	r0, r4
 801b072:	b014      	add	sp, #80	@ 0x50
 801b074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b078:	6827      	ldr	r7, [r4, #0]
 801b07a:	ad0f      	add	r5, sp, #60	@ 0x3c
 801b07c:	46bc      	mov	ip, r7
 801b07e:	f8d7 8000 	ldr.w	r8, [r7]
 801b082:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b088:	f8dc 3000 	ldr.w	r3, [ip]
 801b08c:	2050      	movs	r0, #80	@ 0x50
 801b08e:	4619      	mov	r1, r3
 801b090:	602b      	str	r3, [r5, #0]
 801b092:	47c0      	blx	r8
 801b094:	4605      	mov	r5, r0
 801b096:	6030      	str	r0, [r6, #0]
 801b098:	b3d0      	cbz	r0, 801b110 <rcl_init_options_copy+0xcc>
 801b09a:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801b09e:	4686      	mov	lr, r0
 801b0a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b0a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b0a8:	f8dc 3000 	ldr.w	r3, [ip]
 801b0ac:	4668      	mov	r0, sp
 801b0ae:	f8ce 3000 	str.w	r3, [lr]
 801b0b2:	f003 f971 	bl	801e398 <rmw_get_zero_initialized_init_options>
 801b0b6:	46ee      	mov	lr, sp
 801b0b8:	f105 0c18 	add.w	ip, r5, #24
 801b0bc:	6824      	ldr	r4, [r4, #0]
 801b0be:	6835      	ldr	r5, [r6, #0]
 801b0c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b0c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b0c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b0cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b0d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b0d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b0d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b0dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b0e0:	f104 0018 	add.w	r0, r4, #24
 801b0e4:	f105 0118 	add.w	r1, r5, #24
 801b0e8:	f003 fc3e 	bl	801e968 <rmw_init_options_copy>
 801b0ec:	4604      	mov	r4, r0
 801b0ee:	2800      	cmp	r0, #0
 801b0f0:	d0be      	beq.n	801b070 <rcl_init_options_copy+0x2c>
 801b0f2:	f7fa fa53 	bl	801559c <rcutils_get_error_string>
 801b0f6:	f7fa fa67 	bl	80155c8 <rcutils_reset_error>
 801b0fa:	4630      	mov	r0, r6
 801b0fc:	f7ff ff78 	bl	801aff0 <rcl_init_options_fini>
 801b100:	b140      	cbz	r0, 801b114 <rcl_init_options_copy+0xd0>
 801b102:	4604      	mov	r4, r0
 801b104:	e7b4      	b.n	801b070 <rcl_init_options_copy+0x2c>
 801b106:	240b      	movs	r4, #11
 801b108:	4620      	mov	r0, r4
 801b10a:	b014      	add	sp, #80	@ 0x50
 801b10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b110:	240a      	movs	r4, #10
 801b112:	e7ad      	b.n	801b070 <rcl_init_options_copy+0x2c>
 801b114:	4620      	mov	r0, r4
 801b116:	b014      	add	sp, #80	@ 0x50
 801b118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b11c:	f7ff bd76 	b.w	801ac0c <rcl_convert_rmw_ret_to_rcl_ret>

0801b120 <rcl_get_localhost_only>:
 801b120:	b510      	push	{r4, lr}
 801b122:	2300      	movs	r3, #0
 801b124:	b082      	sub	sp, #8
 801b126:	9301      	str	r3, [sp, #4]
 801b128:	b1b8      	cbz	r0, 801b15a <rcl_get_localhost_only+0x3a>
 801b12a:	4604      	mov	r4, r0
 801b12c:	a901      	add	r1, sp, #4
 801b12e:	480c      	ldr	r0, [pc, #48]	@ (801b160 <rcl_get_localhost_only+0x40>)
 801b130:	f002 fe4e 	bl	801ddd0 <rcutils_get_env>
 801b134:	b110      	cbz	r0, 801b13c <rcl_get_localhost_only+0x1c>
 801b136:	2001      	movs	r0, #1
 801b138:	b002      	add	sp, #8
 801b13a:	bd10      	pop	{r4, pc}
 801b13c:	9b01      	ldr	r3, [sp, #4]
 801b13e:	b113      	cbz	r3, 801b146 <rcl_get_localhost_only+0x26>
 801b140:	781a      	ldrb	r2, [r3, #0]
 801b142:	2a31      	cmp	r2, #49	@ 0x31
 801b144:	d004      	beq.n	801b150 <rcl_get_localhost_only+0x30>
 801b146:	2302      	movs	r3, #2
 801b148:	2000      	movs	r0, #0
 801b14a:	7023      	strb	r3, [r4, #0]
 801b14c:	b002      	add	sp, #8
 801b14e:	bd10      	pop	{r4, pc}
 801b150:	785b      	ldrb	r3, [r3, #1]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d1f7      	bne.n	801b146 <rcl_get_localhost_only+0x26>
 801b156:	2301      	movs	r3, #1
 801b158:	e7f6      	b.n	801b148 <rcl_get_localhost_only+0x28>
 801b15a:	200b      	movs	r0, #11
 801b15c:	b002      	add	sp, #8
 801b15e:	bd10      	pop	{r4, pc}
 801b160:	080252c8 	.word	0x080252c8

0801b164 <rcl_get_zero_initialized_node>:
 801b164:	4a03      	ldr	r2, [pc, #12]	@ (801b174 <rcl_get_zero_initialized_node+0x10>)
 801b166:	4603      	mov	r3, r0
 801b168:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b16c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b170:	4618      	mov	r0, r3
 801b172:	4770      	bx	lr
 801b174:	080252f0 	.word	0x080252f0

0801b178 <rcl_node_init>:
 801b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b17c:	b0a9      	sub	sp, #164	@ 0xa4
 801b17e:	4604      	mov	r4, r0
 801b180:	460e      	mov	r6, r1
 801b182:	4615      	mov	r5, r2
 801b184:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801b188:	a823      	add	r0, sp, #140	@ 0x8c
 801b18a:	461f      	mov	r7, r3
 801b18c:	f006 f9b0 	bl	80214f0 <rcl_guard_condition_get_default_options>
 801b190:	f1b8 0f00 	cmp.w	r8, #0
 801b194:	f000 80f3 	beq.w	801b37e <rcl_node_init+0x206>
 801b198:	4640      	mov	r0, r8
 801b19a:	f7fa f9f1 	bl	8015580 <rcutils_allocator_is_valid>
 801b19e:	2d00      	cmp	r5, #0
 801b1a0:	bf18      	it	ne
 801b1a2:	2c00      	cmpne	r4, #0
 801b1a4:	f080 0001 	eor.w	r0, r0, #1
 801b1a8:	bf0c      	ite	eq
 801b1aa:	f04f 0c01 	moveq.w	ip, #1
 801b1ae:	f04f 0c00 	movne.w	ip, #0
 801b1b2:	2e00      	cmp	r6, #0
 801b1b4:	bf08      	it	eq
 801b1b6:	f04c 0c01 	orreq.w	ip, ip, #1
 801b1ba:	ea4c 0c00 	orr.w	ip, ip, r0
 801b1be:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801b1c2:	f040 80dc 	bne.w	801b37e <rcl_node_init+0x206>
 801b1c6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b1ca:	f1ba 0f00 	cmp.w	sl, #0
 801b1ce:	f040 80fc 	bne.w	801b3ca <rcl_node_init+0x252>
 801b1d2:	2f00      	cmp	r7, #0
 801b1d4:	f000 80d3 	beq.w	801b37e <rcl_node_init+0x206>
 801b1d8:	4638      	mov	r0, r7
 801b1da:	f7ff fd35 	bl	801ac48 <rcl_context_is_valid>
 801b1de:	4683      	mov	fp, r0
 801b1e0:	2800      	cmp	r0, #0
 801b1e2:	f000 80d2 	beq.w	801b38a <rcl_node_init+0x212>
 801b1e6:	4652      	mov	r2, sl
 801b1e8:	4630      	mov	r0, r6
 801b1ea:	a922      	add	r1, sp, #136	@ 0x88
 801b1ec:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 801b1f0:	f003 fa84 	bl	801e6fc <rmw_validate_node_name>
 801b1f4:	4682      	mov	sl, r0
 801b1f6:	2800      	cmp	r0, #0
 801b1f8:	f040 80c3 	bne.w	801b382 <rcl_node_init+0x20a>
 801b1fc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b1fe:	2800      	cmp	r0, #0
 801b200:	f040 80f1 	bne.w	801b3e6 <rcl_node_init+0x26e>
 801b204:	4628      	mov	r0, r5
 801b206:	f7e5 f875 	bl	80002f4 <strlen>
 801b20a:	2800      	cmp	r0, #0
 801b20c:	f040 80c0 	bne.w	801b390 <rcl_node_init+0x218>
 801b210:	4d79      	ldr	r5, [pc, #484]	@ (801b3f8 <rcl_node_init+0x280>)
 801b212:	a922      	add	r1, sp, #136	@ 0x88
 801b214:	2200      	movs	r2, #0
 801b216:	4628      	mov	r0, r5
 801b218:	f003 fa52 	bl	801e6c0 <rmw_validate_namespace>
 801b21c:	4682      	mov	sl, r0
 801b21e:	2800      	cmp	r0, #0
 801b220:	f040 80af 	bne.w	801b382 <rcl_node_init+0x20a>
 801b224:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b226:	2800      	cmp	r0, #0
 801b228:	f040 80d5 	bne.w	801b3d6 <rcl_node_init+0x25e>
 801b22c:	f8d8 3000 	ldr.w	r3, [r8]
 801b230:	2078      	movs	r0, #120	@ 0x78
 801b232:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b236:	4798      	blx	r3
 801b238:	4682      	mov	sl, r0
 801b23a:	6060      	str	r0, [r4, #4]
 801b23c:	2800      	cmp	r0, #0
 801b23e:	f000 80cf 	beq.w	801b3e0 <rcl_node_init+0x268>
 801b242:	2200      	movs	r2, #0
 801b244:	2300      	movs	r3, #0
 801b246:	a808      	add	r0, sp, #32
 801b248:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801b24c:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 801b250:	f000 f902 	bl	801b458 <rcl_node_get_default_options>
 801b254:	a908      	add	r1, sp, #32
 801b256:	4650      	mov	r0, sl
 801b258:	2268      	movs	r2, #104	@ 0x68
 801b25a:	f007 f9ec 	bl	8022636 <memcpy>
 801b25e:	6861      	ldr	r1, [r4, #4]
 801b260:	4640      	mov	r0, r8
 801b262:	6027      	str	r7, [r4, #0]
 801b264:	f000 f906 	bl	801b474 <rcl_node_options_copy>
 801b268:	2800      	cmp	r0, #0
 801b26a:	d158      	bne.n	801b31e <rcl_node_init+0x1a6>
 801b26c:	4628      	mov	r0, r5
 801b26e:	f7e5 f841 	bl	80002f4 <strlen>
 801b272:	4428      	add	r0, r5
 801b274:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801b278:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801b27c:	2b2f      	cmp	r3, #47	@ 0x2f
 801b27e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b282:	9300      	str	r3, [sp, #0]
 801b284:	bf0c      	ite	eq
 801b286:	4b5d      	ldreq	r3, [pc, #372]	@ (801b3fc <rcl_node_init+0x284>)
 801b288:	4b5d      	ldrne	r3, [pc, #372]	@ (801b400 <rcl_node_init+0x288>)
 801b28a:	9302      	str	r3, [sp, #8]
 801b28c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b290:	9301      	str	r3, [sp, #4]
 801b292:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b296:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b29a:	f002 fdc1 	bl	801de20 <rcutils_format_string_limit>
 801b29e:	6823      	ldr	r3, [r4, #0]
 801b2a0:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801b2a4:	4631      	mov	r1, r6
 801b2a6:	6818      	ldr	r0, [r3, #0]
 801b2a8:	462a      	mov	r2, r5
 801b2aa:	6866      	ldr	r6, [r4, #4]
 801b2ac:	3028      	adds	r0, #40	@ 0x28
 801b2ae:	f003 fe4b 	bl	801ef48 <rmw_create_node>
 801b2b2:	6863      	ldr	r3, [r4, #4]
 801b2b4:	66b0      	str	r0, [r6, #104]	@ 0x68
 801b2b6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b2b8:	2800      	cmp	r0, #0
 801b2ba:	d032      	beq.n	801b322 <rcl_node_init+0x1aa>
 801b2bc:	f003 fed4 	bl	801f068 <rmw_node_get_graph_guard_condition>
 801b2c0:	4682      	mov	sl, r0
 801b2c2:	b360      	cbz	r0, 801b31e <rcl_node_init+0x1a6>
 801b2c4:	f8d8 3000 	ldr.w	r3, [r8]
 801b2c8:	2008      	movs	r0, #8
 801b2ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b2ce:	6866      	ldr	r6, [r4, #4]
 801b2d0:	4798      	blx	r3
 801b2d2:	6863      	ldr	r3, [r4, #4]
 801b2d4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801b2d6:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801b2da:	f1bb 0f00 	cmp.w	fp, #0
 801b2de:	d020      	beq.n	801b322 <rcl_node_init+0x1aa>
 801b2e0:	a806      	add	r0, sp, #24
 801b2e2:	ae23      	add	r6, sp, #140	@ 0x8c
 801b2e4:	f006 f82a 	bl	802133c <rcl_get_zero_initialized_guard_condition>
 801b2e8:	a806      	add	r0, sp, #24
 801b2ea:	6863      	ldr	r3, [r4, #4]
 801b2ec:	46c4      	mov	ip, r8
 801b2ee:	c803      	ldmia	r0, {r0, r1}
 801b2f0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801b2f4:	e88b 0003 	stmia.w	fp, {r0, r1}
 801b2f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b2fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b2fe:	f8dc 3000 	ldr.w	r3, [ip]
 801b302:	6033      	str	r3, [r6, #0]
 801b304:	ab28      	add	r3, sp, #160	@ 0xa0
 801b306:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801b30a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b30e:	4651      	mov	r1, sl
 801b310:	463a      	mov	r2, r7
 801b312:	4670      	mov	r0, lr
 801b314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b316:	f006 f869 	bl	80213ec <rcl_guard_condition_init_from_rmw>
 801b31a:	4682      	mov	sl, r0
 801b31c:	b328      	cbz	r0, 801b36a <rcl_node_init+0x1f2>
 801b31e:	6863      	ldr	r3, [r4, #4]
 801b320:	b1f3      	cbz	r3, 801b360 <rcl_node_init+0x1e8>
 801b322:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801b324:	b128      	cbz	r0, 801b332 <rcl_node_init+0x1ba>
 801b326:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b32a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b32e:	4798      	blx	r3
 801b330:	6863      	ldr	r3, [r4, #4]
 801b332:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b334:	b110      	cbz	r0, 801b33c <rcl_node_init+0x1c4>
 801b336:	f003 fe19 	bl	801ef6c <rmw_destroy_node>
 801b33a:	6863      	ldr	r3, [r4, #4]
 801b33c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b33e:	b148      	cbz	r0, 801b354 <rcl_node_init+0x1dc>
 801b340:	f006 f8b0 	bl	80214a4 <rcl_guard_condition_fini>
 801b344:	6863      	ldr	r3, [r4, #4]
 801b346:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b34a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b34c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b350:	4798      	blx	r3
 801b352:	6863      	ldr	r3, [r4, #4]
 801b354:	4618      	mov	r0, r3
 801b356:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b35a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b35e:	4798      	blx	r3
 801b360:	2300      	movs	r3, #0
 801b362:	f04f 0a01 	mov.w	sl, #1
 801b366:	e9c4 3300 	strd	r3, r3, [r4]
 801b36a:	f1b9 0f00 	cmp.w	r9, #0
 801b36e:	d008      	beq.n	801b382 <rcl_node_init+0x20a>
 801b370:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b374:	4628      	mov	r0, r5
 801b376:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b37a:	4798      	blx	r3
 801b37c:	e001      	b.n	801b382 <rcl_node_init+0x20a>
 801b37e:	f04f 0a0b 	mov.w	sl, #11
 801b382:	4650      	mov	r0, sl
 801b384:	b029      	add	sp, #164	@ 0xa4
 801b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b38a:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801b38e:	e7f8      	b.n	801b382 <rcl_node_init+0x20a>
 801b390:	782b      	ldrb	r3, [r5, #0]
 801b392:	2b2f      	cmp	r3, #47	@ 0x2f
 801b394:	f43f af3d 	beq.w	801b212 <rcl_node_init+0x9a>
 801b398:	9503      	str	r5, [sp, #12]
 801b39a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b39e:	9300      	str	r3, [sp, #0]
 801b3a0:	4b18      	ldr	r3, [pc, #96]	@ (801b404 <rcl_node_init+0x28c>)
 801b3a2:	9302      	str	r3, [sp, #8]
 801b3a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b3a8:	9301      	str	r3, [sp, #4]
 801b3aa:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b3ae:	f002 fd37 	bl	801de20 <rcutils_format_string_limit>
 801b3b2:	4605      	mov	r5, r0
 801b3b4:	b1e0      	cbz	r0, 801b3f0 <rcl_node_init+0x278>
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	a922      	add	r1, sp, #136	@ 0x88
 801b3ba:	9222      	str	r2, [sp, #136]	@ 0x88
 801b3bc:	f003 f980 	bl	801e6c0 <rmw_validate_namespace>
 801b3c0:	4682      	mov	sl, r0
 801b3c2:	2800      	cmp	r0, #0
 801b3c4:	d1d4      	bne.n	801b370 <rcl_node_init+0x1f8>
 801b3c6:	46d9      	mov	r9, fp
 801b3c8:	e72c      	b.n	801b224 <rcl_node_init+0xac>
 801b3ca:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801b3ce:	4650      	mov	r0, sl
 801b3d0:	b029      	add	sp, #164	@ 0xa4
 801b3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3d6:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801b3da:	f003 f983 	bl	801e6e4 <rmw_namespace_validation_result_string>
 801b3de:	e7c4      	b.n	801b36a <rcl_node_init+0x1f2>
 801b3e0:	f04f 0a0a 	mov.w	sl, #10
 801b3e4:	e7c1      	b.n	801b36a <rcl_node_init+0x1f2>
 801b3e6:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801b3ea:	f003 f9db 	bl	801e7a4 <rmw_node_name_validation_result_string>
 801b3ee:	e7c8      	b.n	801b382 <rcl_node_init+0x20a>
 801b3f0:	f04f 0a0a 	mov.w	sl, #10
 801b3f4:	e7c5      	b.n	801b382 <rcl_node_init+0x20a>
 801b3f6:	bf00      	nop
 801b3f8:	080252e0 	.word	0x080252e0
 801b3fc:	08024964 	.word	0x08024964
 801b400:	080252e8 	.word	0x080252e8
 801b404:	080252e4 	.word	0x080252e4

0801b408 <rcl_node_is_valid>:
 801b408:	b130      	cbz	r0, 801b418 <rcl_node_is_valid+0x10>
 801b40a:	6843      	ldr	r3, [r0, #4]
 801b40c:	b123      	cbz	r3, 801b418 <rcl_node_is_valid+0x10>
 801b40e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b410:	b113      	cbz	r3, 801b418 <rcl_node_is_valid+0x10>
 801b412:	6800      	ldr	r0, [r0, #0]
 801b414:	f7ff bc18 	b.w	801ac48 <rcl_context_is_valid>
 801b418:	2000      	movs	r0, #0
 801b41a:	4770      	bx	lr

0801b41c <rcl_node_get_name>:
 801b41c:	b120      	cbz	r0, 801b428 <rcl_node_get_name+0xc>
 801b41e:	6840      	ldr	r0, [r0, #4]
 801b420:	b110      	cbz	r0, 801b428 <rcl_node_get_name+0xc>
 801b422:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b424:	b100      	cbz	r0, 801b428 <rcl_node_get_name+0xc>
 801b426:	6880      	ldr	r0, [r0, #8]
 801b428:	4770      	bx	lr
 801b42a:	bf00      	nop

0801b42c <rcl_node_get_namespace>:
 801b42c:	b120      	cbz	r0, 801b438 <rcl_node_get_namespace+0xc>
 801b42e:	6840      	ldr	r0, [r0, #4]
 801b430:	b110      	cbz	r0, 801b438 <rcl_node_get_namespace+0xc>
 801b432:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b434:	b100      	cbz	r0, 801b438 <rcl_node_get_namespace+0xc>
 801b436:	68c0      	ldr	r0, [r0, #12]
 801b438:	4770      	bx	lr
 801b43a:	bf00      	nop

0801b43c <rcl_node_get_options>:
 801b43c:	b128      	cbz	r0, 801b44a <rcl_node_get_options+0xe>
 801b43e:	6840      	ldr	r0, [r0, #4]
 801b440:	b118      	cbz	r0, 801b44a <rcl_node_get_options+0xe>
 801b442:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b444:	2b00      	cmp	r3, #0
 801b446:	bf08      	it	eq
 801b448:	2000      	moveq	r0, #0
 801b44a:	4770      	bx	lr

0801b44c <rcl_node_get_rmw_handle>:
 801b44c:	b110      	cbz	r0, 801b454 <rcl_node_get_rmw_handle+0x8>
 801b44e:	6840      	ldr	r0, [r0, #4]
 801b450:	b100      	cbz	r0, 801b454 <rcl_node_get_rmw_handle+0x8>
 801b452:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b454:	4770      	bx	lr
 801b456:	bf00      	nop

0801b458 <rcl_node_get_default_options>:
 801b458:	b510      	push	{r4, lr}
 801b45a:	4604      	mov	r4, r0
 801b45c:	2268      	movs	r2, #104	@ 0x68
 801b45e:	2100      	movs	r1, #0
 801b460:	f006 ffca 	bl	80223f8 <memset>
 801b464:	4620      	mov	r0, r4
 801b466:	f7fa f87d 	bl	8015564 <rcutils_get_default_allocator>
 801b46a:	2301      	movs	r3, #1
 801b46c:	4620      	mov	r0, r4
 801b46e:	7523      	strb	r3, [r4, #20]
 801b470:	bd10      	pop	{r4, pc}
 801b472:	bf00      	nop

0801b474 <rcl_node_options_copy>:
 801b474:	2800      	cmp	r0, #0
 801b476:	bf18      	it	ne
 801b478:	4288      	cmpne	r0, r1
 801b47a:	d01b      	beq.n	801b4b4 <rcl_node_options_copy+0x40>
 801b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b47e:	fab1 f681 	clz	r6, r1
 801b482:	460c      	mov	r4, r1
 801b484:	0976      	lsrs	r6, r6, #5
 801b486:	b199      	cbz	r1, 801b4b0 <rcl_node_options_copy+0x3c>
 801b488:	4605      	mov	r5, r0
 801b48a:	8a87      	ldrh	r7, [r0, #20]
 801b48c:	4684      	mov	ip, r0
 801b48e:	468e      	mov	lr, r1
 801b490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b492:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b496:	682b      	ldr	r3, [r5, #0]
 801b498:	2250      	movs	r2, #80	@ 0x50
 801b49a:	f10c 0118 	add.w	r1, ip, #24
 801b49e:	f104 0018 	add.w	r0, r4, #24
 801b4a2:	f8ce 3000 	str.w	r3, [lr]
 801b4a6:	82a7      	strh	r7, [r4, #20]
 801b4a8:	f007 f8c5 	bl	8022636 <memcpy>
 801b4ac:	4630      	mov	r0, r6
 801b4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4b0:	200b      	movs	r0, #11
 801b4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4b4:	200b      	movs	r0, #11
 801b4b6:	4770      	bx	lr

0801b4b8 <rcl_node_resolve_name>:
 801b4b8:	b082      	sub	sp, #8
 801b4ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4be:	b091      	sub	sp, #68	@ 0x44
 801b4c0:	ac1a      	add	r4, sp, #104	@ 0x68
 801b4c2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801b4c6:	e884 000c 	stmia.w	r4, {r2, r3}
 801b4ca:	2800      	cmp	r0, #0
 801b4cc:	d03d      	beq.n	801b54a <rcl_node_resolve_name+0x92>
 801b4ce:	460c      	mov	r4, r1
 801b4d0:	4605      	mov	r5, r0
 801b4d2:	f7ff ffb3 	bl	801b43c <rcl_node_get_options>
 801b4d6:	2800      	cmp	r0, #0
 801b4d8:	d03a      	beq.n	801b550 <rcl_node_resolve_name+0x98>
 801b4da:	4628      	mov	r0, r5
 801b4dc:	f7ff ff9e 	bl	801b41c <rcl_node_get_name>
 801b4e0:	4606      	mov	r6, r0
 801b4e2:	4628      	mov	r0, r5
 801b4e4:	ad0b      	add	r5, sp, #44	@ 0x2c
 801b4e6:	f7ff ffa1 	bl	801b42c <rcl_node_get_namespace>
 801b4ea:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801b4ee:	4607      	mov	r7, r0
 801b4f0:	46ac      	mov	ip, r5
 801b4f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b4f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b4fa:	f8de 3000 	ldr.w	r3, [lr]
 801b4fe:	f8cc 3000 	str.w	r3, [ip]
 801b502:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b504:	b30b      	cbz	r3, 801b54a <rcl_node_resolve_name+0x92>
 801b506:	4689      	mov	r9, r1
 801b508:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801b50c:	f002 fe00 	bl	801e110 <rcutils_get_zero_initialized_string_map>
 801b510:	ab10      	add	r3, sp, #64	@ 0x40
 801b512:	9008      	str	r0, [sp, #32]
 801b514:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b518:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b51c:	2100      	movs	r1, #0
 801b51e:	a808      	add	r0, sp, #32
 801b520:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b524:	f002 fe6a 	bl	801e1fc <rcutils_string_map_init>
 801b528:	4683      	mov	fp, r0
 801b52a:	b1a0      	cbz	r0, 801b556 <rcl_node_resolve_name+0x9e>
 801b52c:	f7fa f836 	bl	801559c <rcutils_get_error_string>
 801b530:	f7fa f84a 	bl	80155c8 <rcutils_reset_error>
 801b534:	f1bb 0f0a 	cmp.w	fp, #10
 801b538:	bf18      	it	ne
 801b53a:	f04f 0b01 	movne.w	fp, #1
 801b53e:	4658      	mov	r0, fp
 801b540:	b011      	add	sp, #68	@ 0x44
 801b542:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b546:	b002      	add	sp, #8
 801b548:	4770      	bx	lr
 801b54a:	f04f 0b0b 	mov.w	fp, #11
 801b54e:	e7f6      	b.n	801b53e <rcl_node_resolve_name+0x86>
 801b550:	f04f 0b01 	mov.w	fp, #1
 801b554:	e7f3      	b.n	801b53e <rcl_node_resolve_name+0x86>
 801b556:	9009      	str	r0, [sp, #36]	@ 0x24
 801b558:	9007      	str	r0, [sp, #28]
 801b55a:	a808      	add	r0, sp, #32
 801b55c:	f005 fee8 	bl	8021330 <rcl_get_default_topic_name_substitutions>
 801b560:	4683      	mov	fp, r0
 801b562:	b180      	cbz	r0, 801b586 <rcl_node_resolve_name+0xce>
 801b564:	280a      	cmp	r0, #10
 801b566:	a808      	add	r0, sp, #32
 801b568:	bf18      	it	ne
 801b56a:	f04f 0b01 	movne.w	fp, #1
 801b56e:	f002 fe85 	bl	801e27c <rcutils_string_map_fini>
 801b572:	4604      	mov	r4, r0
 801b574:	2800      	cmp	r0, #0
 801b576:	d15b      	bne.n	801b630 <rcl_node_resolve_name+0x178>
 801b578:	4651      	mov	r1, sl
 801b57a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b57c:	47c8      	blx	r9
 801b57e:	4651      	mov	r1, sl
 801b580:	4620      	mov	r0, r4
 801b582:	47c8      	blx	r9
 801b584:	e7db      	b.n	801b53e <rcl_node_resolve_name+0x86>
 801b586:	ab09      	add	r3, sp, #36	@ 0x24
 801b588:	46ec      	mov	ip, sp
 801b58a:	9305      	str	r3, [sp, #20]
 801b58c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b58e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b592:	682b      	ldr	r3, [r5, #0]
 801b594:	463a      	mov	r2, r7
 801b596:	4631      	mov	r1, r6
 801b598:	4620      	mov	r0, r4
 801b59a:	f8cc 3000 	str.w	r3, [ip]
 801b59e:	ab08      	add	r3, sp, #32
 801b5a0:	f005 fd66 	bl	8021070 <rcl_expand_topic_name>
 801b5a4:	4683      	mov	fp, r0
 801b5a6:	b9d8      	cbnz	r0, 801b5e0 <rcl_node_resolve_name+0x128>
 801b5a8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b5aa:	4602      	mov	r2, r0
 801b5ac:	9009      	str	r0, [sp, #36]	@ 0x24
 801b5ae:	a90a      	add	r1, sp, #40	@ 0x28
 801b5b0:	4620      	mov	r0, r4
 801b5b2:	f002 ffb5 	bl	801e520 <rmw_validate_full_topic_name>
 801b5b6:	bb50      	cbnz	r0, 801b60e <rcl_node_resolve_name+0x156>
 801b5b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b5ba:	2d00      	cmp	r5, #0
 801b5bc:	d140      	bne.n	801b640 <rcl_node_resolve_name+0x188>
 801b5be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b5c0:	a808      	add	r0, sp, #32
 801b5c2:	601c      	str	r4, [r3, #0]
 801b5c4:	f002 fe5a 	bl	801e27c <rcutils_string_map_fini>
 801b5c8:	4683      	mov	fp, r0
 801b5ca:	2800      	cmp	r0, #0
 801b5cc:	d043      	beq.n	801b656 <rcl_node_resolve_name+0x19e>
 801b5ce:	f7f9 ffe5 	bl	801559c <rcutils_get_error_string>
 801b5d2:	46a8      	mov	r8, r5
 801b5d4:	f04f 0b01 	mov.w	fp, #1
 801b5d8:	462c      	mov	r4, r5
 801b5da:	f7f9 fff5 	bl	80155c8 <rcutils_reset_error>
 801b5de:	e00a      	b.n	801b5f6 <rcl_node_resolve_name+0x13e>
 801b5e0:	2867      	cmp	r0, #103	@ 0x67
 801b5e2:	bf14      	ite	ne
 801b5e4:	f04f 0800 	movne.w	r8, #0
 801b5e8:	f008 0801 	andeq.w	r8, r8, #1
 801b5ec:	9c07      	ldr	r4, [sp, #28]
 801b5ee:	a808      	add	r0, sp, #32
 801b5f0:	f002 fe44 	bl	801e27c <rcutils_string_map_fini>
 801b5f4:	bb50      	cbnz	r0, 801b64c <rcl_node_resolve_name+0x194>
 801b5f6:	4651      	mov	r1, sl
 801b5f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b5fa:	47c8      	blx	r9
 801b5fc:	4651      	mov	r1, sl
 801b5fe:	4620      	mov	r0, r4
 801b600:	47c8      	blx	r9
 801b602:	f1b8 0f00 	cmp.w	r8, #0
 801b606:	bf18      	it	ne
 801b608:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801b60c:	e797      	b.n	801b53e <rcl_node_resolve_name+0x86>
 801b60e:	f7f9 ffc5 	bl	801559c <rcutils_get_error_string>
 801b612:	f7f9 ffd9 	bl	80155c8 <rcutils_reset_error>
 801b616:	a808      	add	r0, sp, #32
 801b618:	f002 fe30 	bl	801e27c <rcutils_string_map_fini>
 801b61c:	b998      	cbnz	r0, 801b646 <rcl_node_resolve_name+0x18e>
 801b61e:	4651      	mov	r1, sl
 801b620:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b622:	47c8      	blx	r9
 801b624:	4651      	mov	r1, sl
 801b626:	4620      	mov	r0, r4
 801b628:	f04f 0b01 	mov.w	fp, #1
 801b62c:	47c8      	blx	r9
 801b62e:	e786      	b.n	801b53e <rcl_node_resolve_name+0x86>
 801b630:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b634:	f7f9 ffb2 	bl	801559c <rcutils_get_error_string>
 801b638:	f7f9 ffc6 	bl	80155c8 <rcutils_reset_error>
 801b63c:	4644      	mov	r4, r8
 801b63e:	e7da      	b.n	801b5f6 <rcl_node_resolve_name+0x13e>
 801b640:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801b644:	e7d3      	b.n	801b5ee <rcl_node_resolve_name+0x136>
 801b646:	46d8      	mov	r8, fp
 801b648:	f04f 0b01 	mov.w	fp, #1
 801b64c:	f7f9 ffa6 	bl	801559c <rcutils_get_error_string>
 801b650:	f7f9 ffba 	bl	80155c8 <rcutils_reset_error>
 801b654:	e7cf      	b.n	801b5f6 <rcl_node_resolve_name+0x13e>
 801b656:	4651      	mov	r1, sl
 801b658:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b65a:	47c8      	blx	r9
 801b65c:	4651      	mov	r1, sl
 801b65e:	4658      	mov	r0, fp
 801b660:	47c8      	blx	r9
 801b662:	e76c      	b.n	801b53e <rcl_node_resolve_name+0x86>

0801b664 <exact_match_lookup>:
 801b664:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b666:	f102 0708 	add.w	r7, r2, #8
 801b66a:	460b      	mov	r3, r1
 801b66c:	b085      	sub	sp, #20
 801b66e:	4614      	mov	r4, r2
 801b670:	4606      	mov	r6, r0
 801b672:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b676:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b67a:	4618      	mov	r0, r3
 801b67c:	4919      	ldr	r1, [pc, #100]	@ (801b6e4 <exact_match_lookup+0x80>)
 801b67e:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b682:	f002 fbbf 	bl	801de04 <rcutils_join_path>
 801b686:	7833      	ldrb	r3, [r6, #0]
 801b688:	4605      	mov	r5, r0
 801b68a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b68c:	d023      	beq.n	801b6d6 <exact_match_lookup+0x72>
 801b68e:	f104 030c 	add.w	r3, r4, #12
 801b692:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b696:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b69a:	1c70      	adds	r0, r6, #1
 801b69c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b6a0:	f002 fbb6 	bl	801de10 <rcutils_to_native_path>
 801b6a4:	4606      	mov	r6, r0
 801b6a6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b6aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b6ae:	4631      	mov	r1, r6
 801b6b0:	4628      	mov	r0, r5
 801b6b2:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b6b6:	f002 fba5 	bl	801de04 <rcutils_join_path>
 801b6ba:	4603      	mov	r3, r0
 801b6bc:	4630      	mov	r0, r6
 801b6be:	6862      	ldr	r2, [r4, #4]
 801b6c0:	461e      	mov	r6, r3
 801b6c2:	6921      	ldr	r1, [r4, #16]
 801b6c4:	4790      	blx	r2
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	4635      	mov	r5, r6
 801b6ca:	6863      	ldr	r3, [r4, #4]
 801b6cc:	6921      	ldr	r1, [r4, #16]
 801b6ce:	4798      	blx	r3
 801b6d0:	4628      	mov	r0, r5
 801b6d2:	b005      	add	sp, #20
 801b6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6d6:	7873      	ldrb	r3, [r6, #1]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d1d8      	bne.n	801b68e <exact_match_lookup+0x2a>
 801b6dc:	4628      	mov	r0, r5
 801b6de:	b005      	add	sp, #20
 801b6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6e2:	bf00      	nop
 801b6e4:	08025334 	.word	0x08025334

0801b6e8 <rcl_get_secure_root>:
 801b6e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b6ec:	b085      	sub	sp, #20
 801b6ee:	b168      	cbz	r0, 801b70c <rcl_get_secure_root+0x24>
 801b6f0:	4607      	mov	r7, r0
 801b6f2:	4608      	mov	r0, r1
 801b6f4:	460c      	mov	r4, r1
 801b6f6:	f7f9 ff43 	bl	8015580 <rcutils_allocator_is_valid>
 801b6fa:	b138      	cbz	r0, 801b70c <rcl_get_secure_root+0x24>
 801b6fc:	2300      	movs	r3, #0
 801b6fe:	482d      	ldr	r0, [pc, #180]	@ (801b7b4 <rcl_get_secure_root+0xcc>)
 801b700:	a903      	add	r1, sp, #12
 801b702:	9303      	str	r3, [sp, #12]
 801b704:	f002 fb64 	bl	801ddd0 <rcutils_get_env>
 801b708:	4605      	mov	r5, r0
 801b70a:	b120      	cbz	r0, 801b716 <rcl_get_secure_root+0x2e>
 801b70c:	2500      	movs	r5, #0
 801b70e:	4628      	mov	r0, r5
 801b710:	b005      	add	sp, #20
 801b712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b716:	9b03      	ldr	r3, [sp, #12]
 801b718:	781a      	ldrb	r2, [r3, #0]
 801b71a:	2a00      	cmp	r2, #0
 801b71c:	d0f6      	beq.n	801b70c <rcl_get_secure_root+0x24>
 801b71e:	f104 090c 	add.w	r9, r4, #12
 801b722:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b726:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b72a:	4618      	mov	r0, r3
 801b72c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b730:	f002 fcb0 	bl	801e094 <rcutils_strdup>
 801b734:	4680      	mov	r8, r0
 801b736:	2800      	cmp	r0, #0
 801b738:	d0e8      	beq.n	801b70c <rcl_get_secure_root+0x24>
 801b73a:	a903      	add	r1, sp, #12
 801b73c:	481e      	ldr	r0, [pc, #120]	@ (801b7b8 <rcl_get_secure_root+0xd0>)
 801b73e:	9503      	str	r5, [sp, #12]
 801b740:	f002 fb46 	bl	801ddd0 <rcutils_get_env>
 801b744:	b160      	cbz	r0, 801b760 <rcl_get_secure_root+0x78>
 801b746:	2600      	movs	r6, #0
 801b748:	4630      	mov	r0, r6
 801b74a:	6863      	ldr	r3, [r4, #4]
 801b74c:	6921      	ldr	r1, [r4, #16]
 801b74e:	4798      	blx	r3
 801b750:	4640      	mov	r0, r8
 801b752:	6863      	ldr	r3, [r4, #4]
 801b754:	6921      	ldr	r1, [r4, #16]
 801b756:	4798      	blx	r3
 801b758:	4628      	mov	r0, r5
 801b75a:	b005      	add	sp, #20
 801b75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b760:	9b03      	ldr	r3, [sp, #12]
 801b762:	781e      	ldrb	r6, [r3, #0]
 801b764:	b1f6      	cbz	r6, 801b7a4 <rcl_get_secure_root+0xbc>
 801b766:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b76a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b76e:	4618      	mov	r0, r3
 801b770:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b774:	f002 fc8e 	bl	801e094 <rcutils_strdup>
 801b778:	4606      	mov	r6, r0
 801b77a:	2800      	cmp	r0, #0
 801b77c:	d0e3      	beq.n	801b746 <rcl_get_secure_root+0x5e>
 801b77e:	4622      	mov	r2, r4
 801b780:	4641      	mov	r1, r8
 801b782:	f7ff ff6f 	bl	801b664 <exact_match_lookup>
 801b786:	4605      	mov	r5, r0
 801b788:	2d00      	cmp	r5, #0
 801b78a:	d0dd      	beq.n	801b748 <rcl_get_secure_root+0x60>
 801b78c:	4628      	mov	r0, r5
 801b78e:	f002 fb37 	bl	801de00 <rcutils_is_directory>
 801b792:	4603      	mov	r3, r0
 801b794:	2800      	cmp	r0, #0
 801b796:	d1d7      	bne.n	801b748 <rcl_get_secure_root+0x60>
 801b798:	4628      	mov	r0, r5
 801b79a:	6921      	ldr	r1, [r4, #16]
 801b79c:	461d      	mov	r5, r3
 801b79e:	6863      	ldr	r3, [r4, #4]
 801b7a0:	4798      	blx	r3
 801b7a2:	e7d1      	b.n	801b748 <rcl_get_secure_root+0x60>
 801b7a4:	4622      	mov	r2, r4
 801b7a6:	4638      	mov	r0, r7
 801b7a8:	4641      	mov	r1, r8
 801b7aa:	f7ff ff5b 	bl	801b664 <exact_match_lookup>
 801b7ae:	4605      	mov	r5, r0
 801b7b0:	e7ea      	b.n	801b788 <rcl_get_secure_root+0xa0>
 801b7b2:	bf00      	nop
 801b7b4:	08025340 	.word	0x08025340
 801b7b8:	08025358 	.word	0x08025358

0801b7bc <rcl_get_security_options_from_environment>:
 801b7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7c0:	b082      	sub	sp, #8
 801b7c2:	2300      	movs	r3, #0
 801b7c4:	4606      	mov	r6, r0
 801b7c6:	460f      	mov	r7, r1
 801b7c8:	4821      	ldr	r0, [pc, #132]	@ (801b850 <rcl_get_security_options_from_environment+0x94>)
 801b7ca:	a901      	add	r1, sp, #4
 801b7cc:	4690      	mov	r8, r2
 801b7ce:	9301      	str	r3, [sp, #4]
 801b7d0:	f002 fafe 	bl	801ddd0 <rcutils_get_env>
 801b7d4:	b120      	cbz	r0, 801b7e0 <rcl_get_security_options_from_environment+0x24>
 801b7d6:	2501      	movs	r5, #1
 801b7d8:	4628      	mov	r0, r5
 801b7da:	b002      	add	sp, #8
 801b7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7e0:	4604      	mov	r4, r0
 801b7e2:	491c      	ldr	r1, [pc, #112]	@ (801b854 <rcl_get_security_options_from_environment+0x98>)
 801b7e4:	9801      	ldr	r0, [sp, #4]
 801b7e6:	f7e4 fd7b 	bl	80002e0 <strcmp>
 801b7ea:	4605      	mov	r5, r0
 801b7ec:	b9f0      	cbnz	r0, 801b82c <rcl_get_security_options_from_environment+0x70>
 801b7ee:	9001      	str	r0, [sp, #4]
 801b7f0:	f1b8 0f00 	cmp.w	r8, #0
 801b7f4:	d021      	beq.n	801b83a <rcl_get_security_options_from_environment+0x7e>
 801b7f6:	a901      	add	r1, sp, #4
 801b7f8:	4817      	ldr	r0, [pc, #92]	@ (801b858 <rcl_get_security_options_from_environment+0x9c>)
 801b7fa:	f002 fae9 	bl	801ddd0 <rcutils_get_env>
 801b7fe:	2800      	cmp	r0, #0
 801b800:	d1e9      	bne.n	801b7d6 <rcl_get_security_options_from_environment+0x1a>
 801b802:	4916      	ldr	r1, [pc, #88]	@ (801b85c <rcl_get_security_options_from_environment+0xa0>)
 801b804:	9801      	ldr	r0, [sp, #4]
 801b806:	f7e4 fd6b 	bl	80002e0 <strcmp>
 801b80a:	4603      	mov	r3, r0
 801b80c:	4639      	mov	r1, r7
 801b80e:	4630      	mov	r0, r6
 801b810:	fab3 f383 	clz	r3, r3
 801b814:	095b      	lsrs	r3, r3, #5
 801b816:	f888 3000 	strb.w	r3, [r8]
 801b81a:	f7ff ff65 	bl	801b6e8 <rcl_get_secure_root>
 801b81e:	b170      	cbz	r0, 801b83e <rcl_get_security_options_from_environment+0x82>
 801b820:	f8c8 0004 	str.w	r0, [r8, #4]
 801b824:	4628      	mov	r0, r5
 801b826:	b002      	add	sp, #8
 801b828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b82c:	4625      	mov	r5, r4
 801b82e:	f888 4000 	strb.w	r4, [r8]
 801b832:	4628      	mov	r0, r5
 801b834:	b002      	add	sp, #8
 801b836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b83a:	250b      	movs	r5, #11
 801b83c:	e7cc      	b.n	801b7d8 <rcl_get_security_options_from_environment+0x1c>
 801b83e:	f898 5000 	ldrb.w	r5, [r8]
 801b842:	f1a5 0501 	sub.w	r5, r5, #1
 801b846:	fab5 f585 	clz	r5, r5
 801b84a:	096d      	lsrs	r5, r5, #5
 801b84c:	e7c4      	b.n	801b7d8 <rcl_get_security_options_from_environment+0x1c>
 801b84e:	bf00      	nop
 801b850:	080252f8 	.word	0x080252f8
 801b854:	0802530c 	.word	0x0802530c
 801b858:	08025314 	.word	0x08025314
 801b85c:	0802532c 	.word	0x0802532c

0801b860 <rcl_get_zero_initialized_service>:
 801b860:	4b01      	ldr	r3, [pc, #4]	@ (801b868 <rcl_get_zero_initialized_service+0x8>)
 801b862:	6818      	ldr	r0, [r3, #0]
 801b864:	4770      	bx	lr
 801b866:	bf00      	nop
 801b868:	08025378 	.word	0x08025378

0801b86c <rcl_service_init>:
 801b86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b870:	b088      	sub	sp, #32
 801b872:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b874:	b1ff      	cbz	r7, 801b8b6 <rcl_service_init+0x4a>
 801b876:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b87a:	4605      	mov	r5, r0
 801b87c:	460e      	mov	r6, r1
 801b87e:	4691      	mov	r9, r2
 801b880:	4650      	mov	r0, sl
 801b882:	4698      	mov	r8, r3
 801b884:	f7f9 fe7c 	bl	8015580 <rcutils_allocator_is_valid>
 801b888:	f080 0401 	eor.w	r4, r0, #1
 801b88c:	b2e4      	uxtb	r4, r4
 801b88e:	b994      	cbnz	r4, 801b8b6 <rcl_service_init+0x4a>
 801b890:	b18d      	cbz	r5, 801b8b6 <rcl_service_init+0x4a>
 801b892:	4630      	mov	r0, r6
 801b894:	f7ff fdb8 	bl	801b408 <rcl_node_is_valid>
 801b898:	2800      	cmp	r0, #0
 801b89a:	d05d      	beq.n	801b958 <rcl_service_init+0xec>
 801b89c:	f1b8 0f00 	cmp.w	r8, #0
 801b8a0:	d009      	beq.n	801b8b6 <rcl_service_init+0x4a>
 801b8a2:	f1b9 0f00 	cmp.w	r9, #0
 801b8a6:	d006      	beq.n	801b8b6 <rcl_service_init+0x4a>
 801b8a8:	682b      	ldr	r3, [r5, #0]
 801b8aa:	b14b      	cbz	r3, 801b8c0 <rcl_service_init+0x54>
 801b8ac:	2464      	movs	r4, #100	@ 0x64
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	b008      	add	sp, #32
 801b8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8b6:	240b      	movs	r4, #11
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	b008      	add	sp, #32
 801b8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8c0:	aa07      	add	r2, sp, #28
 801b8c2:	9304      	str	r3, [sp, #16]
 801b8c4:	9307      	str	r3, [sp, #28]
 801b8c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b8ca:	9205      	str	r2, [sp, #20]
 801b8cc:	2201      	movs	r2, #1
 801b8ce:	9203      	str	r2, [sp, #12]
 801b8d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b8d4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b8d8:	4641      	mov	r1, r8
 801b8da:	4630      	mov	r0, r6
 801b8dc:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b8e0:	f7ff fdea 	bl	801b4b8 <rcl_node_resolve_name>
 801b8e4:	2800      	cmp	r0, #0
 801b8e6:	d146      	bne.n	801b976 <rcl_service_init+0x10a>
 801b8e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b8ea:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801b8ee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b8f0:	4798      	blx	r3
 801b8f2:	6028      	str	r0, [r5, #0]
 801b8f4:	2800      	cmp	r0, #0
 801b8f6:	d046      	beq.n	801b986 <rcl_service_init+0x11a>
 801b8f8:	4630      	mov	r0, r6
 801b8fa:	f7ff fda7 	bl	801b44c <rcl_node_get_rmw_handle>
 801b8fe:	463b      	mov	r3, r7
 801b900:	4649      	mov	r1, r9
 801b902:	9a07      	ldr	r2, [sp, #28]
 801b904:	682c      	ldr	r4, [r5, #0]
 801b906:	f003 fd05 	bl	801f314 <rmw_create_service>
 801b90a:	682b      	ldr	r3, [r5, #0]
 801b90c:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 801b910:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b914:	b338      	cbz	r0, 801b966 <rcl_service_init+0xfa>
 801b916:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801b91a:	f003 fe2d 	bl	801f578 <rmw_service_request_subscription_get_actual_qos>
 801b91e:	bb00      	cbnz	r0, 801b962 <rcl_service_init+0xf6>
 801b920:	682b      	ldr	r3, [r5, #0]
 801b922:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 801b926:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b92a:	f003 fe11 	bl	801f550 <rmw_service_response_publisher_get_actual_qos>
 801b92e:	4604      	mov	r4, r0
 801b930:	b9b8      	cbnz	r0, 801b962 <rcl_service_init+0xf6>
 801b932:	6828      	ldr	r0, [r5, #0]
 801b934:	2268      	movs	r2, #104	@ 0x68
 801b936:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801b93a:	4639      	mov	r1, r7
 801b93c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 801b940:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 801b944:	f006 fe77 	bl	8022636 <memcpy>
 801b948:	9807      	ldr	r0, [sp, #28]
 801b94a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b94c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b94e:	4798      	blx	r3
 801b950:	4620      	mov	r0, r4
 801b952:	b008      	add	sp, #32
 801b954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b958:	24c8      	movs	r4, #200	@ 0xc8
 801b95a:	4620      	mov	r0, r4
 801b95c:	b008      	add	sp, #32
 801b95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b962:	682b      	ldr	r3, [r5, #0]
 801b964:	b16b      	cbz	r3, 801b982 <rcl_service_init+0x116>
 801b966:	4618      	mov	r0, r3
 801b968:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b96a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b96c:	2401      	movs	r4, #1
 801b96e:	4790      	blx	r2
 801b970:	2300      	movs	r3, #0
 801b972:	602b      	str	r3, [r5, #0]
 801b974:	e7e8      	b.n	801b948 <rcl_service_init+0xdc>
 801b976:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 801b97a:	2b01      	cmp	r3, #1
 801b97c:	d905      	bls.n	801b98a <rcl_service_init+0x11e>
 801b97e:	280a      	cmp	r0, #10
 801b980:	d001      	beq.n	801b986 <rcl_service_init+0x11a>
 801b982:	2401      	movs	r4, #1
 801b984:	e7e0      	b.n	801b948 <rcl_service_init+0xdc>
 801b986:	240a      	movs	r4, #10
 801b988:	e7de      	b.n	801b948 <rcl_service_init+0xdc>
 801b98a:	2468      	movs	r4, #104	@ 0x68
 801b98c:	e7dc      	b.n	801b948 <rcl_service_init+0xdc>
 801b98e:	bf00      	nop

0801b990 <rcl_service_get_default_options>:
 801b990:	b530      	push	{r4, r5, lr}
 801b992:	4d0f      	ldr	r5, [pc, #60]	@ (801b9d0 <rcl_service_get_default_options+0x40>)
 801b994:	b087      	sub	sp, #28
 801b996:	4604      	mov	r4, r0
 801b998:	2250      	movs	r2, #80	@ 0x50
 801b99a:	490e      	ldr	r1, [pc, #56]	@ (801b9d4 <rcl_service_get_default_options+0x44>)
 801b99c:	4628      	mov	r0, r5
 801b99e:	f006 fe4a 	bl	8022636 <memcpy>
 801b9a2:	4668      	mov	r0, sp
 801b9a4:	f7f9 fdde 	bl	8015564 <rcutils_get_default_allocator>
 801b9a8:	46ec      	mov	ip, sp
 801b9aa:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801b9ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b9b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b9b6:	f8dc 3000 	ldr.w	r3, [ip]
 801b9ba:	2268      	movs	r2, #104	@ 0x68
 801b9bc:	4629      	mov	r1, r5
 801b9be:	4620      	mov	r0, r4
 801b9c0:	f8ce 3000 	str.w	r3, [lr]
 801b9c4:	f006 fe37 	bl	8022636 <memcpy>
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	b007      	add	sp, #28
 801b9cc:	bd30      	pop	{r4, r5, pc}
 801b9ce:	bf00      	nop
 801b9d0:	240693e8 	.word	0x240693e8
 801b9d4:	08025380 	.word	0x08025380

0801b9d8 <rcl_service_get_rmw_handle>:
 801b9d8:	b118      	cbz	r0, 801b9e2 <rcl_service_get_rmw_handle+0xa>
 801b9da:	6800      	ldr	r0, [r0, #0]
 801b9dc:	b108      	cbz	r0, 801b9e2 <rcl_service_get_rmw_handle+0xa>
 801b9de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b9e2:	4770      	bx	lr

0801b9e4 <rcl_take_request>:
 801b9e4:	b570      	push	{r4, r5, r6, lr}
 801b9e6:	468e      	mov	lr, r1
 801b9e8:	b08c      	sub	sp, #48	@ 0x30
 801b9ea:	460c      	mov	r4, r1
 801b9ec:	4616      	mov	r6, r2
 801b9ee:	f10d 0c18 	add.w	ip, sp, #24
 801b9f2:	4605      	mov	r5, r0
 801b9f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b9f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b9fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ba00:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ba04:	b30d      	cbz	r5, 801ba4a <rcl_take_request+0x66>
 801ba06:	682b      	ldr	r3, [r5, #0]
 801ba08:	b1fb      	cbz	r3, 801ba4a <rcl_take_request+0x66>
 801ba0a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801ba0e:	b1e0      	cbz	r0, 801ba4a <rcl_take_request+0x66>
 801ba10:	b336      	cbz	r6, 801ba60 <rcl_take_request+0x7c>
 801ba12:	2300      	movs	r3, #0
 801ba14:	4632      	mov	r2, r6
 801ba16:	a902      	add	r1, sp, #8
 801ba18:	f88d 3007 	strb.w	r3, [sp, #7]
 801ba1c:	f10d 0307 	add.w	r3, sp, #7
 801ba20:	f003 fb76 	bl	801f110 <rmw_take_request>
 801ba24:	4605      	mov	r5, r0
 801ba26:	b198      	cbz	r0, 801ba50 <rcl_take_request+0x6c>
 801ba28:	280a      	cmp	r0, #10
 801ba2a:	bf18      	it	ne
 801ba2c:	2501      	movne	r5, #1
 801ba2e:	f10d 0e18 	add.w	lr, sp, #24
 801ba32:	46a4      	mov	ip, r4
 801ba34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ba38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ba3c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ba40:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ba44:	4628      	mov	r0, r5
 801ba46:	b00c      	add	sp, #48	@ 0x30
 801ba48:	bd70      	pop	{r4, r5, r6, pc}
 801ba4a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801ba4e:	e7ee      	b.n	801ba2e <rcl_take_request+0x4a>
 801ba50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801ba54:	f240 2359 	movw	r3, #601	@ 0x259
 801ba58:	2a00      	cmp	r2, #0
 801ba5a:	bf08      	it	eq
 801ba5c:	461d      	moveq	r5, r3
 801ba5e:	e7e6      	b.n	801ba2e <rcl_take_request+0x4a>
 801ba60:	250b      	movs	r5, #11
 801ba62:	e7e4      	b.n	801ba2e <rcl_take_request+0x4a>

0801ba64 <rcl_send_response>:
 801ba64:	b170      	cbz	r0, 801ba84 <rcl_send_response+0x20>
 801ba66:	6800      	ldr	r0, [r0, #0]
 801ba68:	b160      	cbz	r0, 801ba84 <rcl_send_response+0x20>
 801ba6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801ba6e:	b148      	cbz	r0, 801ba84 <rcl_send_response+0x20>
 801ba70:	b169      	cbz	r1, 801ba8e <rcl_send_response+0x2a>
 801ba72:	b510      	push	{r4, lr}
 801ba74:	b14a      	cbz	r2, 801ba8a <rcl_send_response+0x26>
 801ba76:	f003 fba9 	bl	801f1cc <rmw_send_response>
 801ba7a:	b110      	cbz	r0, 801ba82 <rcl_send_response+0x1e>
 801ba7c:	2802      	cmp	r0, #2
 801ba7e:	bf18      	it	ne
 801ba80:	2001      	movne	r0, #1
 801ba82:	bd10      	pop	{r4, pc}
 801ba84:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801ba88:	4770      	bx	lr
 801ba8a:	200b      	movs	r0, #11
 801ba8c:	bd10      	pop	{r4, pc}
 801ba8e:	200b      	movs	r0, #11
 801ba90:	4770      	bx	lr
 801ba92:	bf00      	nop

0801ba94 <rcl_service_is_valid>:
 801ba94:	b130      	cbz	r0, 801baa4 <rcl_service_is_valid+0x10>
 801ba96:	6800      	ldr	r0, [r0, #0]
 801ba98:	b120      	cbz	r0, 801baa4 <rcl_service_is_valid+0x10>
 801ba9a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801ba9e:	3800      	subs	r0, #0
 801baa0:	bf18      	it	ne
 801baa2:	2001      	movne	r0, #1
 801baa4:	4770      	bx	lr
 801baa6:	bf00      	nop

0801baa8 <rcl_get_zero_initialized_subscription>:
 801baa8:	4b01      	ldr	r3, [pc, #4]	@ (801bab0 <rcl_get_zero_initialized_subscription+0x8>)
 801baaa:	6818      	ldr	r0, [r3, #0]
 801baac:	4770      	bx	lr
 801baae:	bf00      	nop
 801bab0:	080253d0 	.word	0x080253d0

0801bab4 <rcl_subscription_init>:
 801bab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bab8:	b088      	sub	sp, #32
 801baba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801babc:	b1ff      	cbz	r7, 801bafe <rcl_subscription_init+0x4a>
 801babe:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801bac2:	4605      	mov	r5, r0
 801bac4:	460e      	mov	r6, r1
 801bac6:	4691      	mov	r9, r2
 801bac8:	4650      	mov	r0, sl
 801baca:	4698      	mov	r8, r3
 801bacc:	f7f9 fd58 	bl	8015580 <rcutils_allocator_is_valid>
 801bad0:	f080 0401 	eor.w	r4, r0, #1
 801bad4:	b2e4      	uxtb	r4, r4
 801bad6:	b994      	cbnz	r4, 801bafe <rcl_subscription_init+0x4a>
 801bad8:	b18d      	cbz	r5, 801bafe <rcl_subscription_init+0x4a>
 801bada:	4630      	mov	r0, r6
 801badc:	f7ff fc94 	bl	801b408 <rcl_node_is_valid>
 801bae0:	2800      	cmp	r0, #0
 801bae2:	d055      	beq.n	801bb90 <rcl_subscription_init+0xdc>
 801bae4:	f1b9 0f00 	cmp.w	r9, #0
 801bae8:	d009      	beq.n	801bafe <rcl_subscription_init+0x4a>
 801baea:	f1b8 0f00 	cmp.w	r8, #0
 801baee:	d006      	beq.n	801bafe <rcl_subscription_init+0x4a>
 801baf0:	682b      	ldr	r3, [r5, #0]
 801baf2:	b14b      	cbz	r3, 801bb08 <rcl_subscription_init+0x54>
 801baf4:	2464      	movs	r4, #100	@ 0x64
 801baf6:	4620      	mov	r0, r4
 801baf8:	b008      	add	sp, #32
 801bafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bafe:	240b      	movs	r4, #11
 801bb00:	4620      	mov	r0, r4
 801bb02:	b008      	add	sp, #32
 801bb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb08:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801bb0c:	aa07      	add	r2, sp, #28
 801bb0e:	9307      	str	r3, [sp, #28]
 801bb10:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801bb14:	9205      	str	r2, [sp, #20]
 801bb16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bb1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bb1e:	4641      	mov	r1, r8
 801bb20:	4630      	mov	r0, r6
 801bb22:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801bb26:	f7ff fcc7 	bl	801b4b8 <rcl_node_resolve_name>
 801bb2a:	2800      	cmp	r0, #0
 801bb2c:	d15f      	bne.n	801bbee <rcl_subscription_init+0x13a>
 801bb2e:	21c8      	movs	r1, #200	@ 0xc8
 801bb30:	2001      	movs	r0, #1
 801bb32:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 801bb36:	4798      	blx	r3
 801bb38:	6028      	str	r0, [r5, #0]
 801bb3a:	2800      	cmp	r0, #0
 801bb3c:	d05f      	beq.n	801bbfe <rcl_subscription_init+0x14a>
 801bb3e:	4630      	mov	r0, r6
 801bb40:	f7ff fc84 	bl	801b44c <rcl_node_get_rmw_handle>
 801bb44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801bb48:	4649      	mov	r1, r9
 801bb4a:	9a07      	ldr	r2, [sp, #28]
 801bb4c:	9300      	str	r3, [sp, #0]
 801bb4e:	463b      	mov	r3, r7
 801bb50:	682c      	ldr	r4, [r5, #0]
 801bb52:	f003 fd25 	bl	801f5a0 <rmw_create_subscription>
 801bb56:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801bb5a:	682c      	ldr	r4, [r5, #0]
 801bb5c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801bb60:	b348      	cbz	r0, 801bbb6 <rcl_subscription_init+0x102>
 801bb62:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 801bb66:	f003 fe11 	bl	801f78c <rmw_subscription_get_actual_qos>
 801bb6a:	4604      	mov	r4, r0
 801bb6c:	b9a8      	cbnz	r0, 801bb9a <rcl_subscription_init+0xe6>
 801bb6e:	6828      	ldr	r0, [r5, #0]
 801bb70:	2270      	movs	r2, #112	@ 0x70
 801bb72:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801bb76:	4639      	mov	r1, r7
 801bb78:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801bb7c:	f006 fd5b 	bl	8022636 <memcpy>
 801bb80:	9807      	ldr	r0, [sp, #28]
 801bb82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bb84:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801bb86:	4798      	blx	r3
 801bb88:	4620      	mov	r0, r4
 801bb8a:	b008      	add	sp, #32
 801bb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb90:	24c8      	movs	r4, #200	@ 0xc8
 801bb92:	4620      	mov	r0, r4
 801bb94:	b008      	add	sp, #32
 801bb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb9a:	682c      	ldr	r4, [r5, #0]
 801bb9c:	b36c      	cbz	r4, 801bbfa <rcl_subscription_init+0x146>
 801bb9e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 801bba2:	b14b      	cbz	r3, 801bbb8 <rcl_subscription_init+0x104>
 801bba4:	4630      	mov	r0, r6
 801bba6:	f7ff fc51 	bl	801b44c <rcl_node_get_rmw_handle>
 801bbaa:	682b      	ldr	r3, [r5, #0]
 801bbac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 801bbb0:	f003 fe00 	bl	801f7b4 <rmw_destroy_subscription>
 801bbb4:	682c      	ldr	r4, [r5, #0]
 801bbb6:	b194      	cbz	r4, 801bbde <rcl_subscription_init+0x12a>
 801bbb8:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801bbbc:	4630      	mov	r0, r6
 801bbbe:	f7f9 fcdf 	bl	8015580 <rcutils_allocator_is_valid>
 801bbc2:	b158      	cbz	r0, 801bbdc <rcl_subscription_init+0x128>
 801bbc4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801bbc6:	b148      	cbz	r0, 801bbdc <rcl_subscription_init+0x128>
 801bbc8:	4631      	mov	r1, r6
 801bbca:	f002 fbf9 	bl	801e3c0 <rmw_subscription_content_filter_options_fini>
 801bbce:	4606      	mov	r6, r0
 801bbd0:	b9c8      	cbnz	r0, 801bc06 <rcl_subscription_init+0x152>
 801bbd2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801bbd4:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801bbd6:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801bbd8:	4798      	blx	r3
 801bbda:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801bbdc:	682c      	ldr	r4, [r5, #0]
 801bbde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801bbe4:	2401      	movs	r4, #1
 801bbe6:	4798      	blx	r3
 801bbe8:	2300      	movs	r3, #0
 801bbea:	602b      	str	r3, [r5, #0]
 801bbec:	e7c8      	b.n	801bb80 <rcl_subscription_init+0xcc>
 801bbee:	2867      	cmp	r0, #103	@ 0x67
 801bbf0:	d007      	beq.n	801bc02 <rcl_subscription_init+0x14e>
 801bbf2:	2869      	cmp	r0, #105	@ 0x69
 801bbf4:	d005      	beq.n	801bc02 <rcl_subscription_init+0x14e>
 801bbf6:	280a      	cmp	r0, #10
 801bbf8:	d001      	beq.n	801bbfe <rcl_subscription_init+0x14a>
 801bbfa:	2401      	movs	r4, #1
 801bbfc:	e7c0      	b.n	801bb80 <rcl_subscription_init+0xcc>
 801bbfe:	240a      	movs	r4, #10
 801bc00:	e7be      	b.n	801bb80 <rcl_subscription_init+0xcc>
 801bc02:	2467      	movs	r4, #103	@ 0x67
 801bc04:	e7bc      	b.n	801bb80 <rcl_subscription_init+0xcc>
 801bc06:	f7ff f801 	bl	801ac0c <rcl_convert_rmw_ret_to_rcl_ret>
 801bc0a:	682c      	ldr	r4, [r5, #0]
 801bc0c:	e7e7      	b.n	801bbde <rcl_subscription_init+0x12a>
 801bc0e:	bf00      	nop

0801bc10 <rcl_subscription_get_default_options>:
 801bc10:	b570      	push	{r4, r5, r6, lr}
 801bc12:	4d14      	ldr	r5, [pc, #80]	@ (801bc64 <rcl_subscription_get_default_options+0x54>)
 801bc14:	b08a      	sub	sp, #40	@ 0x28
 801bc16:	4604      	mov	r4, r0
 801bc18:	2250      	movs	r2, #80	@ 0x50
 801bc1a:	4913      	ldr	r1, [pc, #76]	@ (801bc68 <rcl_subscription_get_default_options+0x58>)
 801bc1c:	4628      	mov	r0, r5
 801bc1e:	f006 fd0a 	bl	8022636 <memcpy>
 801bc22:	a804      	add	r0, sp, #16
 801bc24:	f7f9 fc9e 	bl	8015564 <rcutils_get_default_allocator>
 801bc28:	f10d 0c10 	add.w	ip, sp, #16
 801bc2c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801bc30:	466e      	mov	r6, sp
 801bc32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bc36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bc3a:	f8dc 3000 	ldr.w	r3, [ip]
 801bc3e:	4630      	mov	r0, r6
 801bc40:	f8ce 3000 	str.w	r3, [lr]
 801bc44:	f002 fbd6 	bl	801e3f4 <rmw_get_default_subscription_options>
 801bc48:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801bc4c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801bc50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bc54:	2270      	movs	r2, #112	@ 0x70
 801bc56:	4629      	mov	r1, r5
 801bc58:	4620      	mov	r0, r4
 801bc5a:	f006 fcec 	bl	8022636 <memcpy>
 801bc5e:	4620      	mov	r0, r4
 801bc60:	b00a      	add	sp, #40	@ 0x28
 801bc62:	bd70      	pop	{r4, r5, r6, pc}
 801bc64:	24069450 	.word	0x24069450
 801bc68:	080253d8 	.word	0x080253d8

0801bc6c <rcl_take>:
 801bc6c:	2800      	cmp	r0, #0
 801bc6e:	d049      	beq.n	801bd04 <rcl_take+0x98>
 801bc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc74:	4615      	mov	r5, r2
 801bc76:	6802      	ldr	r2, [r0, #0]
 801bc78:	b0a4      	sub	sp, #144	@ 0x90
 801bc7a:	4604      	mov	r4, r0
 801bc7c:	2a00      	cmp	r2, #0
 801bc7e:	d039      	beq.n	801bcf4 <rcl_take+0x88>
 801bc80:	461f      	mov	r7, r3
 801bc82:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801bc86:	b3ab      	cbz	r3, 801bcf4 <rcl_take+0x88>
 801bc88:	460e      	mov	r6, r1
 801bc8a:	2900      	cmp	r1, #0
 801bc8c:	d038      	beq.n	801bd00 <rcl_take+0x94>
 801bc8e:	2d00      	cmp	r5, #0
 801bc90:	d03c      	beq.n	801bd0c <rcl_take+0xa0>
 801bc92:	a802      	add	r0, sp, #8
 801bc94:	f04f 0800 	mov.w	r8, #0
 801bc98:	f002 fc3a 	bl	801e510 <rmw_get_zero_initialized_message_info>
 801bc9c:	f10d 0c08 	add.w	ip, sp, #8
 801bca0:	46ae      	mov	lr, r5
 801bca2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bca6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bcaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bcae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bcb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bcb6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bcba:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801bcbe:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801bcc2:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801bcc6:	462b      	mov	r3, r5
 801bcc8:	6820      	ldr	r0, [r4, #0]
 801bcca:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801bcce:	4631      	mov	r1, r6
 801bcd0:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bcd4:	9700      	str	r7, [sp, #0]
 801bcd6:	f003 fdcf 	bl	801f878 <rmw_take_with_info>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	b9c0      	cbnz	r0, 801bd10 <rcl_take+0xa4>
 801bcde:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801bce2:	f240 1291 	movw	r2, #401	@ 0x191
 801bce6:	2900      	cmp	r1, #0
 801bce8:	bf08      	it	eq
 801bcea:	4613      	moveq	r3, r2
 801bcec:	4618      	mov	r0, r3
 801bcee:	b024      	add	sp, #144	@ 0x90
 801bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcf4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	b024      	add	sp, #144	@ 0x90
 801bcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd00:	230b      	movs	r3, #11
 801bd02:	e7f3      	b.n	801bcec <rcl_take+0x80>
 801bd04:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bd08:	4618      	mov	r0, r3
 801bd0a:	4770      	bx	lr
 801bd0c:	ad14      	add	r5, sp, #80	@ 0x50
 801bd0e:	e7c0      	b.n	801bc92 <rcl_take+0x26>
 801bd10:	f7fe ff7c 	bl	801ac0c <rcl_convert_rmw_ret_to_rcl_ret>
 801bd14:	4603      	mov	r3, r0
 801bd16:	e7e9      	b.n	801bcec <rcl_take+0x80>

0801bd18 <rcl_subscription_get_rmw_handle>:
 801bd18:	b118      	cbz	r0, 801bd22 <rcl_subscription_get_rmw_handle+0xa>
 801bd1a:	6800      	ldr	r0, [r0, #0]
 801bd1c:	b108      	cbz	r0, 801bd22 <rcl_subscription_get_rmw_handle+0xa>
 801bd1e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bd22:	4770      	bx	lr

0801bd24 <rcl_subscription_is_valid>:
 801bd24:	b130      	cbz	r0, 801bd34 <rcl_subscription_is_valid+0x10>
 801bd26:	6800      	ldr	r0, [r0, #0]
 801bd28:	b120      	cbz	r0, 801bd34 <rcl_subscription_is_valid+0x10>
 801bd2a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bd2e:	3800      	subs	r0, #0
 801bd30:	bf18      	it	ne
 801bd32:	2001      	movne	r0, #1
 801bd34:	4770      	bx	lr
 801bd36:	bf00      	nop

0801bd38 <rcl_get_system_time>:
 801bd38:	4608      	mov	r0, r1
 801bd3a:	f7f9 bc61 	b.w	8015600 <rcutils_system_time_now>
 801bd3e:	bf00      	nop

0801bd40 <rcl_get_steady_time>:
 801bd40:	4608      	mov	r0, r1
 801bd42:	f7f9 bc83 	b.w	801564c <rcutils_steady_time_now>
 801bd46:	bf00      	nop

0801bd48 <rcl_get_ros_time>:
 801bd48:	7a03      	ldrb	r3, [r0, #8]
 801bd4a:	b510      	push	{r4, lr}
 801bd4c:	460c      	mov	r4, r1
 801bd4e:	b143      	cbz	r3, 801bd62 <rcl_get_ros_time+0x1a>
 801bd50:	2105      	movs	r1, #5
 801bd52:	f001 ff99 	bl	801dc88 <__atomic_load_8>
 801bd56:	4602      	mov	r2, r0
 801bd58:	460b      	mov	r3, r1
 801bd5a:	2000      	movs	r0, #0
 801bd5c:	e9c4 2300 	strd	r2, r3, [r4]
 801bd60:	bd10      	pop	{r4, pc}
 801bd62:	4608      	mov	r0, r1
 801bd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd68:	f7f9 bc4a 	b.w	8015600 <rcutils_system_time_now>

0801bd6c <rcl_clock_init>:
 801bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd6e:	4605      	mov	r5, r0
 801bd70:	4610      	mov	r0, r2
 801bd72:	4614      	mov	r4, r2
 801bd74:	460e      	mov	r6, r1
 801bd76:	f7f9 fc03 	bl	8015580 <rcutils_allocator_is_valid>
 801bd7a:	b128      	cbz	r0, 801bd88 <rcl_clock_init+0x1c>
 801bd7c:	2d03      	cmp	r5, #3
 801bd7e:	d803      	bhi.n	801bd88 <rcl_clock_init+0x1c>
 801bd80:	e8df f005 	tbb	[pc, r5]
 801bd84:	0659301f 	.word	0x0659301f
 801bd88:	f04f 0c0b 	mov.w	ip, #11
 801bd8c:	4660      	mov	r0, ip
 801bd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd90:	2c00      	cmp	r4, #0
 801bd92:	d0f9      	beq.n	801bd88 <rcl_clock_init+0x1c>
 801bd94:	fab6 f386 	clz	r3, r6
 801bd98:	095b      	lsrs	r3, r3, #5
 801bd9a:	2e00      	cmp	r6, #0
 801bd9c:	d0f4      	beq.n	801bd88 <rcl_clock_init+0x1c>
 801bd9e:	6133      	str	r3, [r6, #16]
 801bda0:	469c      	mov	ip, r3
 801bda2:	f106 0514 	add.w	r5, r6, #20
 801bda6:	4f32      	ldr	r7, [pc, #200]	@ (801be70 <rcl_clock_init+0x104>)
 801bda8:	f04f 0e03 	mov.w	lr, #3
 801bdac:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bdb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bdb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bdb4:	6823      	ldr	r3, [r4, #0]
 801bdb6:	4660      	mov	r0, ip
 801bdb8:	602b      	str	r3, [r5, #0]
 801bdba:	60f7      	str	r7, [r6, #12]
 801bdbc:	f886 e000 	strb.w	lr, [r6]
 801bdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdc2:	2e00      	cmp	r6, #0
 801bdc4:	d0e0      	beq.n	801bd88 <rcl_clock_init+0x1c>
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	f106 0514 	add.w	r5, r6, #20
 801bdcc:	7033      	strb	r3, [r6, #0]
 801bdce:	469c      	mov	ip, r3
 801bdd0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bdd4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bdd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bdda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bddc:	6823      	ldr	r3, [r4, #0]
 801bdde:	4660      	mov	r0, ip
 801bde0:	602b      	str	r3, [r5, #0]
 801bde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bde4:	2c00      	cmp	r4, #0
 801bde6:	d0cf      	beq.n	801bd88 <rcl_clock_init+0x1c>
 801bde8:	fab6 f586 	clz	r5, r6
 801bdec:	096d      	lsrs	r5, r5, #5
 801bdee:	2e00      	cmp	r6, #0
 801bdf0:	d0ca      	beq.n	801bd88 <rcl_clock_init+0x1c>
 801bdf2:	46a6      	mov	lr, r4
 801bdf4:	7035      	strb	r5, [r6, #0]
 801bdf6:	f106 0c14 	add.w	ip, r6, #20
 801bdfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bdfe:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801be02:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801be06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801be0a:	f8de 3000 	ldr.w	r3, [lr]
 801be0e:	2010      	movs	r0, #16
 801be10:	f8cc 3000 	str.w	r3, [ip]
 801be14:	6823      	ldr	r3, [r4, #0]
 801be16:	6921      	ldr	r1, [r4, #16]
 801be18:	4798      	blx	r3
 801be1a:	6130      	str	r0, [r6, #16]
 801be1c:	b320      	cbz	r0, 801be68 <rcl_clock_init+0xfc>
 801be1e:	2200      	movs	r2, #0
 801be20:	2300      	movs	r3, #0
 801be22:	46ac      	mov	ip, r5
 801be24:	7205      	strb	r5, [r0, #8]
 801be26:	e9c0 2300 	strd	r2, r3, [r0]
 801be2a:	4a12      	ldr	r2, [pc, #72]	@ (801be74 <rcl_clock_init+0x108>)
 801be2c:	2301      	movs	r3, #1
 801be2e:	4660      	mov	r0, ip
 801be30:	60f2      	str	r2, [r6, #12]
 801be32:	7033      	strb	r3, [r6, #0]
 801be34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be36:	2c00      	cmp	r4, #0
 801be38:	d0a6      	beq.n	801bd88 <rcl_clock_init+0x1c>
 801be3a:	fab6 f386 	clz	r3, r6
 801be3e:	095b      	lsrs	r3, r3, #5
 801be40:	2e00      	cmp	r6, #0
 801be42:	d0a1      	beq.n	801bd88 <rcl_clock_init+0x1c>
 801be44:	6133      	str	r3, [r6, #16]
 801be46:	469c      	mov	ip, r3
 801be48:	f106 0514 	add.w	r5, r6, #20
 801be4c:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801be78 <rcl_clock_init+0x10c>
 801be50:	2702      	movs	r7, #2
 801be52:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801be56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801be5a:	6823      	ldr	r3, [r4, #0]
 801be5c:	4660      	mov	r0, ip
 801be5e:	602b      	str	r3, [r5, #0]
 801be60:	f8c6 e00c 	str.w	lr, [r6, #12]
 801be64:	7037      	strb	r7, [r6, #0]
 801be66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be68:	f04f 0c0a 	mov.w	ip, #10
 801be6c:	e78e      	b.n	801bd8c <rcl_clock_init+0x20>
 801be6e:	bf00      	nop
 801be70:	0801bd41 	.word	0x0801bd41
 801be74:	0801bd49 	.word	0x0801bd49
 801be78:	0801bd39 	.word	0x0801bd39

0801be7c <rcl_clock_get_now>:
 801be7c:	b140      	cbz	r0, 801be90 <rcl_clock_get_now+0x14>
 801be7e:	b139      	cbz	r1, 801be90 <rcl_clock_get_now+0x14>
 801be80:	7803      	ldrb	r3, [r0, #0]
 801be82:	b11b      	cbz	r3, 801be8c <rcl_clock_get_now+0x10>
 801be84:	68c3      	ldr	r3, [r0, #12]
 801be86:	b10b      	cbz	r3, 801be8c <rcl_clock_get_now+0x10>
 801be88:	6900      	ldr	r0, [r0, #16]
 801be8a:	4718      	bx	r3
 801be8c:	2001      	movs	r0, #1
 801be8e:	4770      	bx	lr
 801be90:	200b      	movs	r0, #11
 801be92:	4770      	bx	lr

0801be94 <rcl_clock_add_jump_callback>:
 801be94:	b082      	sub	sp, #8
 801be96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be9a:	a906      	add	r1, sp, #24
 801be9c:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 801bea0:	e881 000c 	stmia.w	r1, {r2, r3}
 801bea4:	b330      	cbz	r0, 801bef4 <rcl_clock_add_jump_callback+0x60>
 801bea6:	4604      	mov	r4, r0
 801bea8:	3014      	adds	r0, #20
 801beaa:	f7f9 fb69 	bl	8015580 <rcutils_allocator_is_valid>
 801beae:	b30d      	cbz	r5, 801bef4 <rcl_clock_add_jump_callback+0x60>
 801beb0:	f080 0301 	eor.w	r3, r0, #1
 801beb4:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801beb8:	d11c      	bne.n	801bef4 <rcl_clock_add_jump_callback+0x60>
 801beba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bebc:	2a00      	cmp	r2, #0
 801bebe:	db19      	blt.n	801bef4 <rcl_clock_add_jump_callback+0x60>
 801bec0:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801bec4:	2901      	cmp	r1, #1
 801bec6:	f172 0200 	sbcs.w	r2, r2, #0
 801beca:	da13      	bge.n	801bef4 <rcl_clock_add_jump_callback+0x60>
 801becc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801bed0:	2f00      	cmp	r7, #0
 801bed2:	d040      	beq.n	801bf56 <rcl_clock_add_jump_callback+0xc2>
 801bed4:	4602      	mov	r2, r0
 801bed6:	e003      	b.n	801bee0 <rcl_clock_add_jump_callback+0x4c>
 801bed8:	42bb      	cmp	r3, r7
 801beda:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 801bede:	d010      	beq.n	801bf02 <rcl_clock_add_jump_callback+0x6e>
 801bee0:	6811      	ldr	r1, [r2, #0]
 801bee2:	3301      	adds	r3, #1
 801bee4:	42a9      	cmp	r1, r5
 801bee6:	d1f7      	bne.n	801bed8 <rcl_clock_add_jump_callback+0x44>
 801bee8:	6a11      	ldr	r1, [r2, #32]
 801beea:	42b1      	cmp	r1, r6
 801beec:	d1f4      	bne.n	801bed8 <rcl_clock_add_jump_callback+0x44>
 801beee:	f04f 0e01 	mov.w	lr, #1
 801bef2:	e001      	b.n	801bef8 <rcl_clock_add_jump_callback+0x64>
 801bef4:	f04f 0e0b 	mov.w	lr, #11
 801bef8:	4670      	mov	r0, lr
 801befa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801befe:	b002      	add	sp, #8
 801bf00:	4770      	bx	lr
 801bf02:	3301      	adds	r3, #1
 801bf04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bf08:	00d9      	lsls	r1, r3, #3
 801bf0a:	69e3      	ldr	r3, [r4, #28]
 801bf0c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801bf0e:	4798      	blx	r3
 801bf10:	b1f0      	cbz	r0, 801bf50 <rcl_clock_add_jump_callback+0xbc>
 801bf12:	68a3      	ldr	r3, [r4, #8]
 801bf14:	f10d 0c18 	add.w	ip, sp, #24
 801bf18:	6060      	str	r0, [r4, #4]
 801bf1a:	f04f 0e00 	mov.w	lr, #0
 801bf1e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801bf22:	f103 0801 	add.w	r8, r3, #1
 801bf26:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801bf2a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801bf2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bf32:	f105 0708 	add.w	r7, r5, #8
 801bf36:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bf38:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801bf3c:	e887 0003 	stmia.w	r7, {r0, r1}
 801bf40:	4670      	mov	r0, lr
 801bf42:	622e      	str	r6, [r5, #32]
 801bf44:	f8c4 8008 	str.w	r8, [r4, #8]
 801bf48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf4c:	b002      	add	sp, #8
 801bf4e:	4770      	bx	lr
 801bf50:	f04f 0e0a 	mov.w	lr, #10
 801bf54:	e7d0      	b.n	801bef8 <rcl_clock_add_jump_callback+0x64>
 801bf56:	2128      	movs	r1, #40	@ 0x28
 801bf58:	e7d7      	b.n	801bf0a <rcl_clock_add_jump_callback+0x76>
 801bf5a:	bf00      	nop

0801bf5c <rcl_clock_remove_jump_callback>:
 801bf5c:	2800      	cmp	r0, #0
 801bf5e:	d05f      	beq.n	801c020 <rcl_clock_remove_jump_callback+0xc4>
 801bf60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf64:	4605      	mov	r5, r0
 801bf66:	3014      	adds	r0, #20
 801bf68:	460f      	mov	r7, r1
 801bf6a:	4692      	mov	sl, r2
 801bf6c:	f7f9 fb08 	bl	8015580 <rcutils_allocator_is_valid>
 801bf70:	f080 0001 	eor.w	r0, r0, #1
 801bf74:	b2c0      	uxtb	r0, r0
 801bf76:	2800      	cmp	r0, #0
 801bf78:	d13f      	bne.n	801bffa <rcl_clock_remove_jump_callback+0x9e>
 801bf7a:	2f00      	cmp	r7, #0
 801bf7c:	d03d      	beq.n	801bffa <rcl_clock_remove_jump_callback+0x9e>
 801bf7e:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801bf82:	f1b8 0f00 	cmp.w	r8, #0
 801bf86:	d00c      	beq.n	801bfa2 <rcl_clock_remove_jump_callback+0x46>
 801bf88:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801bf8c:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801bf90:	464c      	mov	r4, r9
 801bf92:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801bf96:	6823      	ldr	r3, [r4, #0]
 801bf98:	42bb      	cmp	r3, r7
 801bf9a:	d005      	beq.n	801bfa8 <rcl_clock_remove_jump_callback+0x4c>
 801bf9c:	3428      	adds	r4, #40	@ 0x28
 801bf9e:	42a6      	cmp	r6, r4
 801bfa0:	d1f9      	bne.n	801bf96 <rcl_clock_remove_jump_callback+0x3a>
 801bfa2:	2001      	movs	r0, #1
 801bfa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfa8:	6a23      	ldr	r3, [r4, #32]
 801bfaa:	3428      	adds	r4, #40	@ 0x28
 801bfac:	42a6      	cmp	r6, r4
 801bfae:	d02f      	beq.n	801c010 <rcl_clock_remove_jump_callback+0xb4>
 801bfb0:	4553      	cmp	r3, sl
 801bfb2:	d1f0      	bne.n	801bf96 <rcl_clock_remove_jump_callback+0x3a>
 801bfb4:	46a6      	mov	lr, r4
 801bfb6:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801bfba:	3428      	adds	r4, #40	@ 0x28
 801bfbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bfc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bfc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bfc8:	42a6      	cmp	r6, r4
 801bfca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bfce:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801bfd2:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bfd6:	d1ed      	bne.n	801bfb4 <rcl_clock_remove_jump_callback+0x58>
 801bfd8:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801bfdc:	60ac      	str	r4, [r5, #8]
 801bfde:	b17c      	cbz	r4, 801c000 <rcl_clock_remove_jump_callback+0xa4>
 801bfe0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801bfe4:	69eb      	ldr	r3, [r5, #28]
 801bfe6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801bfe8:	4648      	mov	r0, r9
 801bfea:	00e1      	lsls	r1, r4, #3
 801bfec:	4798      	blx	r3
 801bfee:	4603      	mov	r3, r0
 801bff0:	b1c0      	cbz	r0, 801c024 <rcl_clock_remove_jump_callback+0xc8>
 801bff2:	2000      	movs	r0, #0
 801bff4:	606b      	str	r3, [r5, #4]
 801bff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bffa:	200b      	movs	r0, #11
 801bffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c000:	4648      	mov	r0, r9
 801c002:	69ab      	ldr	r3, [r5, #24]
 801c004:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801c006:	4798      	blx	r3
 801c008:	4620      	mov	r0, r4
 801c00a:	606c      	str	r4, [r5, #4]
 801c00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c010:	4553      	cmp	r3, sl
 801c012:	d1c6      	bne.n	801bfa2 <rcl_clock_remove_jump_callback+0x46>
 801c014:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801c018:	60ac      	str	r4, [r5, #8]
 801c01a:	2c00      	cmp	r4, #0
 801c01c:	d1e0      	bne.n	801bfe0 <rcl_clock_remove_jump_callback+0x84>
 801c01e:	e7ef      	b.n	801c000 <rcl_clock_remove_jump_callback+0xa4>
 801c020:	200b      	movs	r0, #11
 801c022:	4770      	bx	lr
 801c024:	200a      	movs	r0, #10
 801c026:	e7e9      	b.n	801bffc <rcl_clock_remove_jump_callback+0xa0>

0801c028 <_rcl_timer_time_jump>:
 801c028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c02c:	4605      	mov	r5, r0
 801c02e:	b084      	sub	sp, #16
 801c030:	4614      	mov	r4, r2
 801c032:	b131      	cbz	r1, 801c042 <_rcl_timer_time_jump+0x1a>
 801c034:	7803      	ldrb	r3, [r0, #0]
 801c036:	3b02      	subs	r3, #2
 801c038:	2b01      	cmp	r3, #1
 801c03a:	d93f      	bls.n	801c0bc <_rcl_timer_time_jump+0x94>
 801c03c:	b004      	add	sp, #16
 801c03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c042:	6813      	ldr	r3, [r2, #0]
 801c044:	a902      	add	r1, sp, #8
 801c046:	6818      	ldr	r0, [r3, #0]
 801c048:	f7ff ff18 	bl	801be7c <rcl_clock_get_now>
 801c04c:	2800      	cmp	r0, #0
 801c04e:	d1f5      	bne.n	801c03c <_rcl_timer_time_jump+0x14>
 801c050:	6820      	ldr	r0, [r4, #0]
 801c052:	2105      	movs	r1, #5
 801c054:	3020      	adds	r0, #32
 801c056:	f001 fe17 	bl	801dc88 <__atomic_load_8>
 801c05a:	6823      	ldr	r3, [r4, #0]
 801c05c:	4681      	mov	r9, r0
 801c05e:	4688      	mov	r8, r1
 801c060:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801c064:	2105      	movs	r1, #5
 801c066:	f001 fe0f 	bl	801dc88 <__atomic_load_8>
 801c06a:	4607      	mov	r7, r0
 801c06c:	6820      	ldr	r0, [r4, #0]
 801c06e:	460e      	mov	r6, r1
 801c070:	2105      	movs	r1, #5
 801c072:	3018      	adds	r0, #24
 801c074:	f001 fe08 	bl	801dc88 <__atomic_load_8>
 801c078:	782b      	ldrb	r3, [r5, #0]
 801c07a:	4682      	mov	sl, r0
 801c07c:	460d      	mov	r5, r1
 801c07e:	3b02      	subs	r3, #2
 801c080:	9a02      	ldr	r2, [sp, #8]
 801c082:	2b01      	cmp	r3, #1
 801c084:	9b03      	ldr	r3, [sp, #12]
 801c086:	d937      	bls.n	801c0f8 <_rcl_timer_time_jump+0xd0>
 801c088:	42ba      	cmp	r2, r7
 801c08a:	eb73 0106 	sbcs.w	r1, r3, r6
 801c08e:	da60      	bge.n	801c152 <_rcl_timer_time_jump+0x12a>
 801c090:	454a      	cmp	r2, r9
 801c092:	eb73 0108 	sbcs.w	r1, r3, r8
 801c096:	dad1      	bge.n	801c03c <_rcl_timer_time_jump+0x14>
 801c098:	eb1a 0202 	adds.w	r2, sl, r2
 801c09c:	6820      	ldr	r0, [r4, #0]
 801c09e:	eb43 0305 	adc.w	r3, r3, r5
 801c0a2:	2505      	movs	r5, #5
 801c0a4:	3028      	adds	r0, #40	@ 0x28
 801c0a6:	9500      	str	r5, [sp, #0]
 801c0a8:	f001 fe24 	bl	801dcf4 <__atomic_store_8>
 801c0ac:	6820      	ldr	r0, [r4, #0]
 801c0ae:	9500      	str	r5, [sp, #0]
 801c0b0:	3020      	adds	r0, #32
 801c0b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c0b6:	f001 fe1d 	bl	801dcf4 <__atomic_store_8>
 801c0ba:	e7bf      	b.n	801c03c <_rcl_timer_time_jump+0x14>
 801c0bc:	6813      	ldr	r3, [r2, #0]
 801c0be:	a902      	add	r1, sp, #8
 801c0c0:	6818      	ldr	r0, [r3, #0]
 801c0c2:	f7ff fedb 	bl	801be7c <rcl_clock_get_now>
 801c0c6:	2800      	cmp	r0, #0
 801c0c8:	d1b8      	bne.n	801c03c <_rcl_timer_time_jump+0x14>
 801c0ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c0ce:	4313      	orrs	r3, r2
 801c0d0:	d0b4      	beq.n	801c03c <_rcl_timer_time_jump+0x14>
 801c0d2:	6820      	ldr	r0, [r4, #0]
 801c0d4:	2105      	movs	r1, #5
 801c0d6:	3028      	adds	r0, #40	@ 0x28
 801c0d8:	f001 fdd6 	bl	801dc88 <__atomic_load_8>
 801c0dc:	9d02      	ldr	r5, [sp, #8]
 801c0de:	4602      	mov	r2, r0
 801c0e0:	9b03      	ldr	r3, [sp, #12]
 801c0e2:	6820      	ldr	r0, [r4, #0]
 801c0e4:	1b52      	subs	r2, r2, r5
 801c0e6:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 801c0ea:	eb61 0303 	sbc.w	r3, r1, r3
 801c0ee:	2105      	movs	r1, #5
 801c0f0:	9100      	str	r1, [sp, #0]
 801c0f2:	f001 fdff 	bl	801dcf4 <__atomic_store_8>
 801c0f6:	e7a1      	b.n	801c03c <_rcl_timer_time_jump+0x14>
 801c0f8:	4313      	orrs	r3, r2
 801c0fa:	d09f      	beq.n	801c03c <_rcl_timer_time_jump+0x14>
 801c0fc:	6820      	ldr	r0, [r4, #0]
 801c0fe:	f04f 0805 	mov.w	r8, #5
 801c102:	2300      	movs	r3, #0
 801c104:	2200      	movs	r2, #0
 801c106:	3030      	adds	r0, #48	@ 0x30
 801c108:	f8cd 8000 	str.w	r8, [sp]
 801c10c:	f001 fe28 	bl	801dd60 <__atomic_exchange_8>
 801c110:	ea51 0300 	orrs.w	r3, r1, r0
 801c114:	4606      	mov	r6, r0
 801c116:	460f      	mov	r7, r1
 801c118:	d090      	beq.n	801c03c <_rcl_timer_time_jump+0x14>
 801c11a:	9a02      	ldr	r2, [sp, #8]
 801c11c:	9b03      	ldr	r3, [sp, #12]
 801c11e:	1a12      	subs	r2, r2, r0
 801c120:	f8cd 8000 	str.w	r8, [sp]
 801c124:	6820      	ldr	r0, [r4, #0]
 801c126:	eb63 0301 	sbc.w	r3, r3, r1
 801c12a:	eb12 020a 	adds.w	r2, r2, sl
 801c12e:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 801c132:	eb43 0305 	adc.w	r3, r3, r5
 801c136:	f001 fddd 	bl	801dcf4 <__atomic_store_8>
 801c13a:	f8cd 8000 	str.w	r8, [sp]
 801c13e:	6820      	ldr	r0, [r4, #0]
 801c140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c144:	3020      	adds	r0, #32
 801c146:	1b92      	subs	r2, r2, r6
 801c148:	eb63 0307 	sbc.w	r3, r3, r7
 801c14c:	f001 fdd2 	bl	801dcf4 <__atomic_store_8>
 801c150:	e774      	b.n	801c03c <_rcl_timer_time_jump+0x14>
 801c152:	6820      	ldr	r0, [r4, #0]
 801c154:	3008      	adds	r0, #8
 801c156:	f005 f9e7 	bl	8021528 <rcl_trigger_guard_condition>
 801c15a:	e76f      	b.n	801c03c <_rcl_timer_time_jump+0x14>

0801c15c <rcl_get_zero_initialized_timer>:
 801c15c:	4b01      	ldr	r3, [pc, #4]	@ (801c164 <rcl_get_zero_initialized_timer+0x8>)
 801c15e:	6818      	ldr	r0, [r3, #0]
 801c160:	4770      	bx	lr
 801c162:	bf00      	nop
 801c164:	08025428 	.word	0x08025428

0801c168 <rcl_timer_init>:
 801c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c16c:	b0ab      	sub	sp, #172	@ 0xac
 801c16e:	460d      	mov	r5, r1
 801c170:	4604      	mov	r4, r0
 801c172:	4692      	mov	sl, r2
 801c174:	a837      	add	r0, sp, #220	@ 0xdc
 801c176:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 801c178:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 801c17c:	f7f9 fa00 	bl	8015580 <rcutils_allocator_is_valid>
 801c180:	fab5 f385 	clz	r3, r5
 801c184:	095b      	lsrs	r3, r3, #5
 801c186:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 801c18a:	2c00      	cmp	r4, #0
 801c18c:	bf08      	it	eq
 801c18e:	f043 0301 	orreq.w	r3, r3, #1
 801c192:	2b00      	cmp	r3, #0
 801c194:	d164      	bne.n	801c260 <rcl_timer_init+0xf8>
 801c196:	f080 0001 	eor.w	r0, r0, #1
 801c19a:	b2c0      	uxtb	r0, r0
 801c19c:	2800      	cmp	r0, #0
 801c19e:	d15f      	bne.n	801c260 <rcl_timer_init+0xf8>
 801c1a0:	6823      	ldr	r3, [r4, #0]
 801c1a2:	b123      	cbz	r3, 801c1ae <rcl_timer_init+0x46>
 801c1a4:	2664      	movs	r6, #100	@ 0x64
 801c1a6:	4630      	mov	r0, r6
 801c1a8:	b02b      	add	sp, #172	@ 0xac
 801c1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1ae:	a908      	add	r1, sp, #32
 801c1b0:	4628      	mov	r0, r5
 801c1b2:	f7ff fe63 	bl	801be7c <rcl_clock_get_now>
 801c1b6:	4606      	mov	r6, r0
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	d1f4      	bne.n	801c1a6 <rcl_timer_init+0x3e>
 801c1bc:	f10d 0b18 	add.w	fp, sp, #24
 801c1c0:	ae0b      	add	r6, sp, #44	@ 0x2c
 801c1c2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801c1c6:	4658      	mov	r0, fp
 801c1c8:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801c1cc:	f005 f8b6 	bl	802133c <rcl_get_zero_initialized_guard_condition>
 801c1d0:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801c1d4:	e889 0003 	stmia.w	r9, {r0, r1}
 801c1d8:	4630      	mov	r0, r6
 801c1da:	f005 f989 	bl	80214f0 <rcl_guard_condition_get_default_options>
 801c1de:	ab0d      	add	r3, sp, #52	@ 0x34
 801c1e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c1e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c1e8:	4651      	mov	r1, sl
 801c1ea:	4648      	mov	r0, r9
 801c1ec:	e896 000c 	ldmia.w	r6, {r2, r3}
 801c1f0:	f005 f8ae 	bl	8021350 <rcl_guard_condition_init>
 801c1f4:	4606      	mov	r6, r0
 801c1f6:	2800      	cmp	r0, #0
 801c1f8:	d1d5      	bne.n	801c1a6 <rcl_timer_init+0x3e>
 801c1fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c1fc:	781b      	ldrb	r3, [r3, #0]
 801c1fe:	2b01      	cmp	r3, #1
 801c200:	d033      	beq.n	801c26a <rcl_timer_init+0x102>
 801c202:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801c204:	4642      	mov	r2, r8
 801c206:	463b      	mov	r3, r7
 801c208:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 801c20c:	911a      	str	r1, [sp, #104]	@ 0x68
 801c20e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801c212:	f04f 0a00 	mov.w	sl, #0
 801c216:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801c21a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c21e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801c2c8 <rcl_timer_init+0x160>
 801c222:	eb12 0008 	adds.w	r0, r2, r8
 801c226:	eb47 0103 	adc.w	r1, r7, r3
 801c22a:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801c22e:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801c232:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801c236:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c23a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c23e:	f8de 3000 	ldr.w	r3, [lr]
 801c242:	2050      	movs	r0, #80	@ 0x50
 801c244:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 801c248:	4619      	mov	r1, r3
 801c24a:	f8cc 3000 	str.w	r3, [ip]
 801c24e:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801c250:	4798      	blx	r3
 801c252:	6020      	str	r0, [r4, #0]
 801c254:	b358      	cbz	r0, 801c2ae <rcl_timer_init+0x146>
 801c256:	2250      	movs	r2, #80	@ 0x50
 801c258:	a916      	add	r1, sp, #88	@ 0x58
 801c25a:	f006 f9ec 	bl	8022636 <memcpy>
 801c25e:	e7a2      	b.n	801c1a6 <rcl_timer_init+0x3e>
 801c260:	260b      	movs	r6, #11
 801c262:	4630      	mov	r0, r6
 801c264:	b02b      	add	sp, #172	@ 0xac
 801c266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c26a:	2001      	movs	r0, #1
 801c26c:	2100      	movs	r1, #0
 801c26e:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801c272:	ab12      	add	r3, sp, #72	@ 0x48
 801c274:	4a16      	ldr	r2, [pc, #88]	@ (801c2d0 <rcl_timer_init+0x168>)
 801c276:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801c27a:	9405      	str	r4, [sp, #20]
 801c27c:	9204      	str	r2, [sp, #16]
 801c27e:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801c282:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c286:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c28a:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801c28e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c290:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c294:	4628      	mov	r0, r5
 801c296:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801c29a:	f7ff fdfb 	bl	801be94 <rcl_clock_add_jump_callback>
 801c29e:	4603      	mov	r3, r0
 801c2a0:	2800      	cmp	r0, #0
 801c2a2:	d0ae      	beq.n	801c202 <rcl_timer_init+0x9a>
 801c2a4:	4648      	mov	r0, r9
 801c2a6:	461e      	mov	r6, r3
 801c2a8:	f005 f8fc 	bl	80214a4 <rcl_guard_condition_fini>
 801c2ac:	e77b      	b.n	801c1a6 <rcl_timer_init+0x3e>
 801c2ae:	4648      	mov	r0, r9
 801c2b0:	260a      	movs	r6, #10
 801c2b2:	f005 f8f7 	bl	80214a4 <rcl_guard_condition_fini>
 801c2b6:	4622      	mov	r2, r4
 801c2b8:	4905      	ldr	r1, [pc, #20]	@ (801c2d0 <rcl_timer_init+0x168>)
 801c2ba:	4628      	mov	r0, r5
 801c2bc:	f7ff fe4e 	bl	801bf5c <rcl_clock_remove_jump_callback>
 801c2c0:	e771      	b.n	801c1a6 <rcl_timer_init+0x3e>
 801c2c2:	bf00      	nop
 801c2c4:	f3af 8000 	nop.w
	...
 801c2d0:	0801c029 	.word	0x0801c029

0801c2d4 <rcl_timer_call>:
 801c2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2d8:	b087      	sub	sp, #28
 801c2da:	2800      	cmp	r0, #0
 801c2dc:	d06c      	beq.n	801c3b8 <rcl_timer_call+0xe4>
 801c2de:	6803      	ldr	r3, [r0, #0]
 801c2e0:	4604      	mov	r4, r0
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d062      	beq.n	801c3ac <rcl_timer_call+0xd8>
 801c2e6:	f3bf 8f5b 	dmb	ish
 801c2ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c2ee:	f3bf 8f5b 	dmb	ish
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d14f      	bne.n	801c396 <rcl_timer_call+0xc2>
 801c2f6:	6803      	ldr	r3, [r0, #0]
 801c2f8:	a904      	add	r1, sp, #16
 801c2fa:	6818      	ldr	r0, [r3, #0]
 801c2fc:	f7ff fdbe 	bl	801be7c <rcl_clock_get_now>
 801c300:	4605      	mov	r5, r0
 801c302:	2800      	cmp	r0, #0
 801c304:	d149      	bne.n	801c39a <rcl_timer_call+0xc6>
 801c306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	db49      	blt.n	801c3a2 <rcl_timer_call+0xce>
 801c30e:	2605      	movs	r6, #5
 801c310:	6820      	ldr	r0, [r4, #0]
 801c312:	9600      	str	r6, [sp, #0]
 801c314:	3020      	adds	r0, #32
 801c316:	f001 fd23 	bl	801dd60 <__atomic_exchange_8>
 801c31a:	6823      	ldr	r3, [r4, #0]
 801c31c:	4680      	mov	r8, r0
 801c31e:	f3bf 8f5b 	dmb	ish
 801c322:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c326:	f3bf 8f5b 	dmb	ish
 801c32a:	6820      	ldr	r0, [r4, #0]
 801c32c:	4689      	mov	r9, r1
 801c32e:	4631      	mov	r1, r6
 801c330:	3028      	adds	r0, #40	@ 0x28
 801c332:	f001 fca9 	bl	801dc88 <__atomic_load_8>
 801c336:	460f      	mov	r7, r1
 801c338:	4631      	mov	r1, r6
 801c33a:	4606      	mov	r6, r0
 801c33c:	6820      	ldr	r0, [r4, #0]
 801c33e:	3018      	adds	r0, #24
 801c340:	f001 fca2 	bl	801dc88 <__atomic_load_8>
 801c344:	4602      	mov	r2, r0
 801c346:	9804      	ldr	r0, [sp, #16]
 801c348:	460b      	mov	r3, r1
 801c34a:	18b6      	adds	r6, r6, r2
 801c34c:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c350:	4692      	mov	sl, r2
 801c352:	eb47 0701 	adc.w	r7, r7, r1
 801c356:	4286      	cmp	r6, r0
 801c358:	eb77 010c 	sbcs.w	r1, r7, ip
 801c35c:	da04      	bge.n	801c368 <rcl_timer_call+0x94>
 801c35e:	ea53 0102 	orrs.w	r1, r3, r2
 801c362:	d12e      	bne.n	801c3c2 <rcl_timer_call+0xee>
 801c364:	4606      	mov	r6, r0
 801c366:	4667      	mov	r7, ip
 801c368:	6820      	ldr	r0, [r4, #0]
 801c36a:	2105      	movs	r1, #5
 801c36c:	4632      	mov	r2, r6
 801c36e:	463b      	mov	r3, r7
 801c370:	3028      	adds	r0, #40	@ 0x28
 801c372:	9100      	str	r1, [sp, #0]
 801c374:	f001 fcbe 	bl	801dcf4 <__atomic_store_8>
 801c378:	f1bb 0f00 	cmp.w	fp, #0
 801c37c:	d00d      	beq.n	801c39a <rcl_timer_call+0xc6>
 801c37e:	9a04      	ldr	r2, [sp, #16]
 801c380:	4620      	mov	r0, r4
 801c382:	9b05      	ldr	r3, [sp, #20]
 801c384:	ebb2 0208 	subs.w	r2, r2, r8
 801c388:	eb63 0309 	sbc.w	r3, r3, r9
 801c38c:	47d8      	blx	fp
 801c38e:	4628      	mov	r0, r5
 801c390:	b007      	add	sp, #28
 801c392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c396:	f240 3521 	movw	r5, #801	@ 0x321
 801c39a:	4628      	mov	r0, r5
 801c39c:	b007      	add	sp, #28
 801c39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3a2:	2501      	movs	r5, #1
 801c3a4:	4628      	mov	r0, r5
 801c3a6:	b007      	add	sp, #28
 801c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3ac:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801c3b0:	4628      	mov	r0, r5
 801c3b2:	b007      	add	sp, #28
 801c3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3b8:	250b      	movs	r5, #11
 801c3ba:	4628      	mov	r0, r5
 801c3bc:	b007      	add	sp, #28
 801c3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3c2:	1b80      	subs	r0, r0, r6
 801c3c4:	eb6c 0107 	sbc.w	r1, ip, r7
 801c3c8:	3801      	subs	r0, #1
 801c3ca:	f161 0100 	sbc.w	r1, r1, #0
 801c3ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c3d2:	f7e3 ffed 	bl	80003b0 <__aeabi_ldivmod>
 801c3d6:	9b02      	ldr	r3, [sp, #8]
 801c3d8:	3001      	adds	r0, #1
 801c3da:	f141 0100 	adc.w	r1, r1, #0
 801c3de:	fb00 f303 	mul.w	r3, r0, r3
 801c3e2:	fb01 330a 	mla	r3, r1, sl, r3
 801c3e6:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c3ea:	1986      	adds	r6, r0, r6
 801c3ec:	4453      	add	r3, sl
 801c3ee:	eb43 0707 	adc.w	r7, r3, r7
 801c3f2:	e7b9      	b.n	801c368 <rcl_timer_call+0x94>

0801c3f4 <rcl_timer_is_ready>:
 801c3f4:	b570      	push	{r4, r5, r6, lr}
 801c3f6:	b082      	sub	sp, #8
 801c3f8:	b380      	cbz	r0, 801c45c <rcl_timer_is_ready+0x68>
 801c3fa:	6803      	ldr	r3, [r0, #0]
 801c3fc:	4604      	mov	r4, r0
 801c3fe:	b38b      	cbz	r3, 801c464 <rcl_timer_is_ready+0x70>
 801c400:	460d      	mov	r5, r1
 801c402:	b359      	cbz	r1, 801c45c <rcl_timer_is_ready+0x68>
 801c404:	f3bf 8f5b 	dmb	ish
 801c408:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c40c:	f3bf 8f5b 	dmb	ish
 801c410:	b953      	cbnz	r3, 801c428 <rcl_timer_is_ready+0x34>
 801c412:	6803      	ldr	r3, [r0, #0]
 801c414:	4669      	mov	r1, sp
 801c416:	6818      	ldr	r0, [r3, #0]
 801c418:	f7ff fd30 	bl	801be7c <rcl_clock_get_now>
 801c41c:	4606      	mov	r6, r0
 801c41e:	b148      	cbz	r0, 801c434 <rcl_timer_is_ready+0x40>
 801c420:	f240 3321 	movw	r3, #801	@ 0x321
 801c424:	4298      	cmp	r0, r3
 801c426:	d102      	bne.n	801c42e <rcl_timer_is_ready+0x3a>
 801c428:	2300      	movs	r3, #0
 801c42a:	461e      	mov	r6, r3
 801c42c:	702b      	strb	r3, [r5, #0]
 801c42e:	4630      	mov	r0, r6
 801c430:	b002      	add	sp, #8
 801c432:	bd70      	pop	{r4, r5, r6, pc}
 801c434:	6820      	ldr	r0, [r4, #0]
 801c436:	2105      	movs	r1, #5
 801c438:	3028      	adds	r0, #40	@ 0x28
 801c43a:	f001 fc25 	bl	801dc88 <__atomic_load_8>
 801c43e:	9b00      	ldr	r3, [sp, #0]
 801c440:	1ac0      	subs	r0, r0, r3
 801c442:	9b01      	ldr	r3, [sp, #4]
 801c444:	eb61 0103 	sbc.w	r1, r1, r3
 801c448:	2801      	cmp	r0, #1
 801c44a:	4630      	mov	r0, r6
 801c44c:	f171 0300 	sbcs.w	r3, r1, #0
 801c450:	bfb4      	ite	lt
 801c452:	2301      	movlt	r3, #1
 801c454:	2300      	movge	r3, #0
 801c456:	702b      	strb	r3, [r5, #0]
 801c458:	b002      	add	sp, #8
 801c45a:	bd70      	pop	{r4, r5, r6, pc}
 801c45c:	260b      	movs	r6, #11
 801c45e:	4630      	mov	r0, r6
 801c460:	b002      	add	sp, #8
 801c462:	bd70      	pop	{r4, r5, r6, pc}
 801c464:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c468:	e7e1      	b.n	801c42e <rcl_timer_is_ready+0x3a>
 801c46a:	bf00      	nop

0801c46c <rcl_timer_get_time_until_next_call>:
 801c46c:	b570      	push	{r4, r5, r6, lr}
 801c46e:	b082      	sub	sp, #8
 801c470:	b330      	cbz	r0, 801c4c0 <rcl_timer_get_time_until_next_call+0x54>
 801c472:	6803      	ldr	r3, [r0, #0]
 801c474:	4604      	mov	r4, r0
 801c476:	b33b      	cbz	r3, 801c4c8 <rcl_timer_get_time_until_next_call+0x5c>
 801c478:	460d      	mov	r5, r1
 801c47a:	b309      	cbz	r1, 801c4c0 <rcl_timer_get_time_until_next_call+0x54>
 801c47c:	f3bf 8f5b 	dmb	ish
 801c480:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c484:	f3bf 8f5b 	dmb	ish
 801c488:	b9ab      	cbnz	r3, 801c4b6 <rcl_timer_get_time_until_next_call+0x4a>
 801c48a:	6803      	ldr	r3, [r0, #0]
 801c48c:	4669      	mov	r1, sp
 801c48e:	6818      	ldr	r0, [r3, #0]
 801c490:	f7ff fcf4 	bl	801be7c <rcl_clock_get_now>
 801c494:	4606      	mov	r6, r0
 801c496:	b958      	cbnz	r0, 801c4b0 <rcl_timer_get_time_until_next_call+0x44>
 801c498:	6820      	ldr	r0, [r4, #0]
 801c49a:	2105      	movs	r1, #5
 801c49c:	3028      	adds	r0, #40	@ 0x28
 801c49e:	f001 fbf3 	bl	801dc88 <__atomic_load_8>
 801c4a2:	9b00      	ldr	r3, [sp, #0]
 801c4a4:	1ac0      	subs	r0, r0, r3
 801c4a6:	9b01      	ldr	r3, [sp, #4]
 801c4a8:	eb61 0103 	sbc.w	r1, r1, r3
 801c4ac:	6028      	str	r0, [r5, #0]
 801c4ae:	6069      	str	r1, [r5, #4]
 801c4b0:	4630      	mov	r0, r6
 801c4b2:	b002      	add	sp, #8
 801c4b4:	bd70      	pop	{r4, r5, r6, pc}
 801c4b6:	f240 3621 	movw	r6, #801	@ 0x321
 801c4ba:	4630      	mov	r0, r6
 801c4bc:	b002      	add	sp, #8
 801c4be:	bd70      	pop	{r4, r5, r6, pc}
 801c4c0:	260b      	movs	r6, #11
 801c4c2:	4630      	mov	r0, r6
 801c4c4:	b002      	add	sp, #8
 801c4c6:	bd70      	pop	{r4, r5, r6, pc}
 801c4c8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c4cc:	e7f0      	b.n	801c4b0 <rcl_timer_get_time_until_next_call+0x44>
 801c4ce:	bf00      	nop

0801c4d0 <rcl_timer_get_guard_condition>:
 801c4d0:	b130      	cbz	r0, 801c4e0 <rcl_timer_get_guard_condition+0x10>
 801c4d2:	6800      	ldr	r0, [r0, #0]
 801c4d4:	b120      	cbz	r0, 801c4e0 <rcl_timer_get_guard_condition+0x10>
 801c4d6:	68c3      	ldr	r3, [r0, #12]
 801c4d8:	b10b      	cbz	r3, 801c4de <rcl_timer_get_guard_condition+0xe>
 801c4da:	3008      	adds	r0, #8
 801c4dc:	4770      	bx	lr
 801c4de:	4618      	mov	r0, r3
 801c4e0:	4770      	bx	lr
 801c4e2:	bf00      	nop

0801c4e4 <rcl_validate_enclave_name_with_size>:
 801c4e4:	2800      	cmp	r0, #0
 801c4e6:	d049      	beq.n	801c57c <rcl_validate_enclave_name_with_size+0x98>
 801c4e8:	b570      	push	{r4, r5, r6, lr}
 801c4ea:	4615      	mov	r5, r2
 801c4ec:	b0c2      	sub	sp, #264	@ 0x108
 801c4ee:	b19a      	cbz	r2, 801c518 <rcl_validate_enclave_name_with_size+0x34>
 801c4f0:	461e      	mov	r6, r3
 801c4f2:	466a      	mov	r2, sp
 801c4f4:	ab01      	add	r3, sp, #4
 801c4f6:	460c      	mov	r4, r1
 801c4f8:	f002 f88e 	bl	801e618 <rmw_validate_namespace_with_size>
 801c4fc:	4684      	mov	ip, r0
 801c4fe:	b9b8      	cbnz	r0, 801c530 <rcl_validate_enclave_name_with_size+0x4c>
 801c500:	9900      	ldr	r1, [sp, #0]
 801c502:	b171      	cbz	r1, 801c522 <rcl_validate_enclave_name_with_size+0x3e>
 801c504:	2907      	cmp	r1, #7
 801c506:	d019      	beq.n	801c53c <rcl_validate_enclave_name_with_size+0x58>
 801c508:	1e4b      	subs	r3, r1, #1
 801c50a:	2b05      	cmp	r3, #5
 801c50c:	d83a      	bhi.n	801c584 <rcl_validate_enclave_name_with_size+0xa0>
 801c50e:	e8df f003 	tbb	[pc, r3]
 801c512:	2926      	.short	0x2926
 801c514:	1d322f2c 	.word	0x1d322f2c
 801c518:	f04f 0c0b 	mov.w	ip, #11
 801c51c:	4660      	mov	r0, ip
 801c51e:	b042      	add	sp, #264	@ 0x108
 801c520:	bd70      	pop	{r4, r5, r6, pc}
 801c522:	2907      	cmp	r1, #7
 801c524:	d00a      	beq.n	801c53c <rcl_validate_enclave_name_with_size+0x58>
 801c526:	2300      	movs	r3, #0
 801c528:	4660      	mov	r0, ip
 801c52a:	602b      	str	r3, [r5, #0]
 801c52c:	b042      	add	sp, #264	@ 0x108
 801c52e:	bd70      	pop	{r4, r5, r6, pc}
 801c530:	f7fe fb6c 	bl	801ac0c <rcl_convert_rmw_ret_to_rcl_ret>
 801c534:	4684      	mov	ip, r0
 801c536:	4660      	mov	r0, ip
 801c538:	b042      	add	sp, #264	@ 0x108
 801c53a:	bd70      	pop	{r4, r5, r6, pc}
 801c53c:	2cff      	cmp	r4, #255	@ 0xff
 801c53e:	d9f2      	bls.n	801c526 <rcl_validate_enclave_name_with_size+0x42>
 801c540:	6029      	str	r1, [r5, #0]
 801c542:	2e00      	cmp	r6, #0
 801c544:	d0ea      	beq.n	801c51c <rcl_validate_enclave_name_with_size+0x38>
 801c546:	23fe      	movs	r3, #254	@ 0xfe
 801c548:	6033      	str	r3, [r6, #0]
 801c54a:	e7e7      	b.n	801c51c <rcl_validate_enclave_name_with_size+0x38>
 801c54c:	2306      	movs	r3, #6
 801c54e:	602b      	str	r3, [r5, #0]
 801c550:	2e00      	cmp	r6, #0
 801c552:	d0e3      	beq.n	801c51c <rcl_validate_enclave_name_with_size+0x38>
 801c554:	9b01      	ldr	r3, [sp, #4]
 801c556:	4660      	mov	r0, ip
 801c558:	6033      	str	r3, [r6, #0]
 801c55a:	b042      	add	sp, #264	@ 0x108
 801c55c:	bd70      	pop	{r4, r5, r6, pc}
 801c55e:	2301      	movs	r3, #1
 801c560:	602b      	str	r3, [r5, #0]
 801c562:	e7f5      	b.n	801c550 <rcl_validate_enclave_name_with_size+0x6c>
 801c564:	2302      	movs	r3, #2
 801c566:	602b      	str	r3, [r5, #0]
 801c568:	e7f2      	b.n	801c550 <rcl_validate_enclave_name_with_size+0x6c>
 801c56a:	2303      	movs	r3, #3
 801c56c:	602b      	str	r3, [r5, #0]
 801c56e:	e7ef      	b.n	801c550 <rcl_validate_enclave_name_with_size+0x6c>
 801c570:	2304      	movs	r3, #4
 801c572:	602b      	str	r3, [r5, #0]
 801c574:	e7ec      	b.n	801c550 <rcl_validate_enclave_name_with_size+0x6c>
 801c576:	2305      	movs	r3, #5
 801c578:	602b      	str	r3, [r5, #0]
 801c57a:	e7e9      	b.n	801c550 <rcl_validate_enclave_name_with_size+0x6c>
 801c57c:	f04f 0c0b 	mov.w	ip, #11
 801c580:	4660      	mov	r0, ip
 801c582:	4770      	bx	lr
 801c584:	460b      	mov	r3, r1
 801c586:	4a04      	ldr	r2, [pc, #16]	@ (801c598 <rcl_validate_enclave_name_with_size+0xb4>)
 801c588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c58c:	a802      	add	r0, sp, #8
 801c58e:	f001 fd33 	bl	801dff8 <rcutils_snprintf>
 801c592:	f04f 0c01 	mov.w	ip, #1
 801c596:	e7c1      	b.n	801c51c <rcl_validate_enclave_name_with_size+0x38>
 801c598:	0802542c 	.word	0x0802542c

0801c59c <rcl_validate_enclave_name>:
 801c59c:	b168      	cbz	r0, 801c5ba <rcl_validate_enclave_name+0x1e>
 801c59e:	b570      	push	{r4, r5, r6, lr}
 801c5a0:	460d      	mov	r5, r1
 801c5a2:	4616      	mov	r6, r2
 801c5a4:	4604      	mov	r4, r0
 801c5a6:	f7e3 fea5 	bl	80002f4 <strlen>
 801c5aa:	4633      	mov	r3, r6
 801c5ac:	4601      	mov	r1, r0
 801c5ae:	462a      	mov	r2, r5
 801c5b0:	4620      	mov	r0, r4
 801c5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c5b6:	f7ff bf95 	b.w	801c4e4 <rcl_validate_enclave_name_with_size>
 801c5ba:	200b      	movs	r0, #11
 801c5bc:	4770      	bx	lr
 801c5be:	bf00      	nop

0801c5c0 <rcl_get_zero_initialized_wait_set>:
 801c5c0:	b510      	push	{r4, lr}
 801c5c2:	4c08      	ldr	r4, [pc, #32]	@ (801c5e4 <rcl_get_zero_initialized_wait_set+0x24>)
 801c5c4:	4686      	mov	lr, r0
 801c5c6:	4684      	mov	ip, r0
 801c5c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c5ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c5ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c5d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c5d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c5d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c5da:	6823      	ldr	r3, [r4, #0]
 801c5dc:	4670      	mov	r0, lr
 801c5de:	f8cc 3000 	str.w	r3, [ip]
 801c5e2:	bd10      	pop	{r4, pc}
 801c5e4:	0802548c 	.word	0x0802548c

0801c5e8 <rcl_wait_set_is_valid>:
 801c5e8:	b118      	cbz	r0, 801c5f2 <rcl_wait_set_is_valid+0xa>
 801c5ea:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801c5ec:	3800      	subs	r0, #0
 801c5ee:	bf18      	it	ne
 801c5f0:	2001      	movne	r0, #1
 801c5f2:	4770      	bx	lr

0801c5f4 <rcl_wait_set_fini>:
 801c5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5f8:	b082      	sub	sp, #8
 801c5fa:	2800      	cmp	r0, #0
 801c5fc:	f000 8095 	beq.w	801c72a <rcl_wait_set_fini+0x136>
 801c600:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801c602:	4604      	mov	r4, r0
 801c604:	2e00      	cmp	r6, #0
 801c606:	f000 808c 	beq.w	801c722 <rcl_wait_set_fini+0x12e>
 801c60a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801c60c:	f003 faf6 	bl	801fbfc <rmw_destroy_wait_set>
 801c610:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c612:	1e06      	subs	r6, r0, #0
 801c614:	bf18      	it	ne
 801c616:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801c61a:	2d00      	cmp	r5, #0
 801c61c:	f000 8081 	beq.w	801c722 <rcl_wait_set_fini+0x12e>
 801c620:	2700      	movs	r7, #0
 801c622:	6820      	ldr	r0, [r4, #0]
 801c624:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c628:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c62a:	6067      	str	r7, [r4, #4]
 801c62c:	602f      	str	r7, [r5, #0]
 801c62e:	b120      	cbz	r0, 801c63a <rcl_wait_set_fini+0x46>
 801c630:	9101      	str	r1, [sp, #4]
 801c632:	47c0      	blx	r8
 801c634:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c636:	9901      	ldr	r1, [sp, #4]
 801c638:	6027      	str	r7, [r4, #0]
 801c63a:	68a8      	ldr	r0, [r5, #8]
 801c63c:	b120      	cbz	r0, 801c648 <rcl_wait_set_fini+0x54>
 801c63e:	47c0      	blx	r8
 801c640:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c642:	2300      	movs	r3, #0
 801c644:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c648:	f04f 0800 	mov.w	r8, #0
 801c64c:	68a0      	ldr	r0, [r4, #8]
 801c64e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c650:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c652:	f8c4 800c 	str.w	r8, [r4, #12]
 801c656:	f8c5 800c 	str.w	r8, [r5, #12]
 801c65a:	b128      	cbz	r0, 801c668 <rcl_wait_set_fini+0x74>
 801c65c:	47b8      	blx	r7
 801c65e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c660:	f8c4 8008 	str.w	r8, [r4, #8]
 801c664:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c666:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c668:	f04f 0800 	mov.w	r8, #0
 801c66c:	6968      	ldr	r0, [r5, #20]
 801c66e:	f8c5 8010 	str.w	r8, [r5, #16]
 801c672:	b128      	cbz	r0, 801c680 <rcl_wait_set_fini+0x8c>
 801c674:	47b8      	blx	r7
 801c676:	f8c5 8014 	str.w	r8, [r5, #20]
 801c67a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c67c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c67e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c680:	f04f 0800 	mov.w	r8, #0
 801c684:	6920      	ldr	r0, [r4, #16]
 801c686:	f8c4 8014 	str.w	r8, [r4, #20]
 801c68a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801c68e:	b128      	cbz	r0, 801c69c <rcl_wait_set_fini+0xa8>
 801c690:	47b8      	blx	r7
 801c692:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c694:	f8c4 8010 	str.w	r8, [r4, #16]
 801c698:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c69a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c69c:	f04f 0800 	mov.w	r8, #0
 801c6a0:	69a0      	ldr	r0, [r4, #24]
 801c6a2:	f8c4 801c 	str.w	r8, [r4, #28]
 801c6a6:	f8c5 8018 	str.w	r8, [r5, #24]
 801c6aa:	b128      	cbz	r0, 801c6b8 <rcl_wait_set_fini+0xc4>
 801c6ac:	9101      	str	r1, [sp, #4]
 801c6ae:	47b8      	blx	r7
 801c6b0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c6b2:	9901      	ldr	r1, [sp, #4]
 801c6b4:	f8c4 8018 	str.w	r8, [r4, #24]
 801c6b8:	6a28      	ldr	r0, [r5, #32]
 801c6ba:	b120      	cbz	r0, 801c6c6 <rcl_wait_set_fini+0xd2>
 801c6bc:	47b8      	blx	r7
 801c6be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c6c6:	2700      	movs	r7, #0
 801c6c8:	6a20      	ldr	r0, [r4, #32]
 801c6ca:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c6ce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c6d0:	6267      	str	r7, [r4, #36]	@ 0x24
 801c6d2:	626f      	str	r7, [r5, #36]	@ 0x24
 801c6d4:	b120      	cbz	r0, 801c6e0 <rcl_wait_set_fini+0xec>
 801c6d6:	9101      	str	r1, [sp, #4]
 801c6d8:	47c0      	blx	r8
 801c6da:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c6dc:	9901      	ldr	r1, [sp, #4]
 801c6de:	6227      	str	r7, [r4, #32]
 801c6e0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c6e2:	b120      	cbz	r0, 801c6ee <rcl_wait_set_fini+0xfa>
 801c6e4:	47c0      	blx	r8
 801c6e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c6e8:	2300      	movs	r3, #0
 801c6ea:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801c6ee:	2700      	movs	r7, #0
 801c6f0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c6f2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c6f6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c6f8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801c6fa:	632f      	str	r7, [r5, #48]	@ 0x30
 801c6fc:	b120      	cbz	r0, 801c708 <rcl_wait_set_fini+0x114>
 801c6fe:	9101      	str	r1, [sp, #4]
 801c700:	47c0      	blx	r8
 801c702:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c704:	9901      	ldr	r1, [sp, #4]
 801c706:	62a7      	str	r7, [r4, #40]	@ 0x28
 801c708:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801c70a:	b120      	cbz	r0, 801c716 <rcl_wait_set_fini+0x122>
 801c70c:	47c0      	blx	r8
 801c70e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c710:	2300      	movs	r3, #0
 801c712:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801c716:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801c718:	4628      	mov	r0, r5
 801c71a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c71c:	4798      	blx	r3
 801c71e:	2300      	movs	r3, #0
 801c720:	6323      	str	r3, [r4, #48]	@ 0x30
 801c722:	4630      	mov	r0, r6
 801c724:	b002      	add	sp, #8
 801c726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c72a:	260b      	movs	r6, #11
 801c72c:	4630      	mov	r0, r6
 801c72e:	b002      	add	sp, #8
 801c730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c734 <rcl_wait_set_add_subscription>:
 801c734:	b318      	cbz	r0, 801c77e <rcl_wait_set_add_subscription+0x4a>
 801c736:	b538      	push	{r3, r4, r5, lr}
 801c738:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c73a:	4604      	mov	r4, r0
 801c73c:	b30b      	cbz	r3, 801c782 <rcl_wait_set_add_subscription+0x4e>
 801c73e:	b319      	cbz	r1, 801c788 <rcl_wait_set_add_subscription+0x54>
 801c740:	681d      	ldr	r5, [r3, #0]
 801c742:	6840      	ldr	r0, [r0, #4]
 801c744:	4285      	cmp	r5, r0
 801c746:	d217      	bcs.n	801c778 <rcl_wait_set_add_subscription+0x44>
 801c748:	1c68      	adds	r0, r5, #1
 801c74a:	6018      	str	r0, [r3, #0]
 801c74c:	6823      	ldr	r3, [r4, #0]
 801c74e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c752:	b102      	cbz	r2, 801c756 <rcl_wait_set_add_subscription+0x22>
 801c754:	6015      	str	r5, [r2, #0]
 801c756:	4608      	mov	r0, r1
 801c758:	f7ff fade 	bl	801bd18 <rcl_subscription_get_rmw_handle>
 801c75c:	b150      	cbz	r0, 801c774 <rcl_wait_set_add_subscription+0x40>
 801c75e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c760:	6842      	ldr	r2, [r0, #4]
 801c762:	2000      	movs	r0, #0
 801c764:	689b      	ldr	r3, [r3, #8]
 801c766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c76a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c76c:	6853      	ldr	r3, [r2, #4]
 801c76e:	3301      	adds	r3, #1
 801c770:	6053      	str	r3, [r2, #4]
 801c772:	bd38      	pop	{r3, r4, r5, pc}
 801c774:	2001      	movs	r0, #1
 801c776:	bd38      	pop	{r3, r4, r5, pc}
 801c778:	f240 3086 	movw	r0, #902	@ 0x386
 801c77c:	bd38      	pop	{r3, r4, r5, pc}
 801c77e:	200b      	movs	r0, #11
 801c780:	4770      	bx	lr
 801c782:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c786:	bd38      	pop	{r3, r4, r5, pc}
 801c788:	200b      	movs	r0, #11
 801c78a:	bd38      	pop	{r3, r4, r5, pc}

0801c78c <rcl_wait_set_clear>:
 801c78c:	2800      	cmp	r0, #0
 801c78e:	d074      	beq.n	801c87a <rcl_wait_set_clear+0xee>
 801c790:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c792:	b510      	push	{r4, lr}
 801c794:	4604      	mov	r4, r0
 801c796:	2b00      	cmp	r3, #0
 801c798:	d071      	beq.n	801c87e <rcl_wait_set_clear+0xf2>
 801c79a:	6800      	ldr	r0, [r0, #0]
 801c79c:	b138      	cbz	r0, 801c7ae <rcl_wait_set_clear+0x22>
 801c79e:	6862      	ldr	r2, [r4, #4]
 801c7a0:	2100      	movs	r1, #0
 801c7a2:	0092      	lsls	r2, r2, #2
 801c7a4:	f005 fe28 	bl	80223f8 <memset>
 801c7a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c7aa:	2200      	movs	r2, #0
 801c7ac:	601a      	str	r2, [r3, #0]
 801c7ae:	68a0      	ldr	r0, [r4, #8]
 801c7b0:	b138      	cbz	r0, 801c7c2 <rcl_wait_set_clear+0x36>
 801c7b2:	68e2      	ldr	r2, [r4, #12]
 801c7b4:	2100      	movs	r1, #0
 801c7b6:	0092      	lsls	r2, r2, #2
 801c7b8:	f005 fe1e 	bl	80223f8 <memset>
 801c7bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c7be:	2200      	movs	r2, #0
 801c7c0:	60da      	str	r2, [r3, #12]
 801c7c2:	69a0      	ldr	r0, [r4, #24]
 801c7c4:	b138      	cbz	r0, 801c7d6 <rcl_wait_set_clear+0x4a>
 801c7c6:	69e2      	ldr	r2, [r4, #28]
 801c7c8:	2100      	movs	r1, #0
 801c7ca:	0092      	lsls	r2, r2, #2
 801c7cc:	f005 fe14 	bl	80223f8 <memset>
 801c7d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c7d2:	2200      	movs	r2, #0
 801c7d4:	619a      	str	r2, [r3, #24]
 801c7d6:	6a20      	ldr	r0, [r4, #32]
 801c7d8:	b138      	cbz	r0, 801c7ea <rcl_wait_set_clear+0x5e>
 801c7da:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801c7dc:	2100      	movs	r1, #0
 801c7de:	0092      	lsls	r2, r2, #2
 801c7e0:	f005 fe0a 	bl	80223f8 <memset>
 801c7e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	625a      	str	r2, [r3, #36]	@ 0x24
 801c7ea:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c7ec:	b138      	cbz	r0, 801c7fe <rcl_wait_set_clear+0x72>
 801c7ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c7f0:	2100      	movs	r1, #0
 801c7f2:	0092      	lsls	r2, r2, #2
 801c7f4:	f005 fe00 	bl	80223f8 <memset>
 801c7f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	631a      	str	r2, [r3, #48]	@ 0x30
 801c7fe:	6920      	ldr	r0, [r4, #16]
 801c800:	b138      	cbz	r0, 801c812 <rcl_wait_set_clear+0x86>
 801c802:	6962      	ldr	r2, [r4, #20]
 801c804:	2100      	movs	r1, #0
 801c806:	0092      	lsls	r2, r2, #2
 801c808:	f005 fdf6 	bl	80223f8 <memset>
 801c80c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c80e:	2200      	movs	r2, #0
 801c810:	641a      	str	r2, [r3, #64]	@ 0x40
 801c812:	6898      	ldr	r0, [r3, #8]
 801c814:	b138      	cbz	r0, 801c826 <rcl_wait_set_clear+0x9a>
 801c816:	685a      	ldr	r2, [r3, #4]
 801c818:	2100      	movs	r1, #0
 801c81a:	0092      	lsls	r2, r2, #2
 801c81c:	f005 fdec 	bl	80223f8 <memset>
 801c820:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c822:	2200      	movs	r2, #0
 801c824:	605a      	str	r2, [r3, #4]
 801c826:	6958      	ldr	r0, [r3, #20]
 801c828:	b138      	cbz	r0, 801c83a <rcl_wait_set_clear+0xae>
 801c82a:	691a      	ldr	r2, [r3, #16]
 801c82c:	2100      	movs	r1, #0
 801c82e:	0092      	lsls	r2, r2, #2
 801c830:	f005 fde2 	bl	80223f8 <memset>
 801c834:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c836:	2200      	movs	r2, #0
 801c838:	611a      	str	r2, [r3, #16]
 801c83a:	6a18      	ldr	r0, [r3, #32]
 801c83c:	b138      	cbz	r0, 801c84e <rcl_wait_set_clear+0xc2>
 801c83e:	69da      	ldr	r2, [r3, #28]
 801c840:	2100      	movs	r1, #0
 801c842:	0092      	lsls	r2, r2, #2
 801c844:	f005 fdd8 	bl	80223f8 <memset>
 801c848:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c84a:	2200      	movs	r2, #0
 801c84c:	61da      	str	r2, [r3, #28]
 801c84e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801c850:	b138      	cbz	r0, 801c862 <rcl_wait_set_clear+0xd6>
 801c852:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c854:	2100      	movs	r1, #0
 801c856:	0092      	lsls	r2, r2, #2
 801c858:	f005 fdce 	bl	80223f8 <memset>
 801c85c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c85e:	2200      	movs	r2, #0
 801c860:	629a      	str	r2, [r3, #40]	@ 0x28
 801c862:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801c864:	b140      	cbz	r0, 801c878 <rcl_wait_set_clear+0xec>
 801c866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c868:	2100      	movs	r1, #0
 801c86a:	0092      	lsls	r2, r2, #2
 801c86c:	f005 fdc4 	bl	80223f8 <memset>
 801c870:	2300      	movs	r3, #0
 801c872:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c874:	4618      	mov	r0, r3
 801c876:	6353      	str	r3, [r2, #52]	@ 0x34
 801c878:	bd10      	pop	{r4, pc}
 801c87a:	200b      	movs	r0, #11
 801c87c:	4770      	bx	lr
 801c87e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c882:	bd10      	pop	{r4, pc}

0801c884 <rcl_wait_set_resize>:
 801c884:	2800      	cmp	r0, #0
 801c886:	f000 8180 	beq.w	801cb8a <rcl_wait_set_resize+0x306>
 801c88a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c88e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801c890:	b083      	sub	sp, #12
 801c892:	4605      	mov	r5, r0
 801c894:	2c00      	cmp	r4, #0
 801c896:	f000 817a 	beq.w	801cb8e <rcl_wait_set_resize+0x30a>
 801c89a:	f04f 0900 	mov.w	r9, #0
 801c89e:	461f      	mov	r7, r3
 801c8a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801c8a4:	4688      	mov	r8, r1
 801c8a6:	4616      	mov	r6, r2
 801c8a8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801c8ac:	f8c0 9004 	str.w	r9, [r0, #4]
 801c8b0:	f8c4 9000 	str.w	r9, [r4]
 801c8b4:	2900      	cmp	r1, #0
 801c8b6:	f000 80bf 	beq.w	801ca38 <rcl_wait_set_resize+0x1b4>
 801c8ba:	008c      	lsls	r4, r1, #2
 801c8bc:	4652      	mov	r2, sl
 801c8be:	6800      	ldr	r0, [r0, #0]
 801c8c0:	4621      	mov	r1, r4
 801c8c2:	9301      	str	r3, [sp, #4]
 801c8c4:	4798      	blx	r3
 801c8c6:	9b01      	ldr	r3, [sp, #4]
 801c8c8:	6028      	str	r0, [r5, #0]
 801c8ca:	2800      	cmp	r0, #0
 801c8cc:	f000 80f6 	beq.w	801cabc <rcl_wait_set_resize+0x238>
 801c8d0:	4622      	mov	r2, r4
 801c8d2:	4649      	mov	r1, r9
 801c8d4:	9301      	str	r3, [sp, #4]
 801c8d6:	f005 fd8f 	bl	80223f8 <memset>
 801c8da:	f8c5 8004 	str.w	r8, [r5, #4]
 801c8de:	4652      	mov	r2, sl
 801c8e0:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801c8e4:	4621      	mov	r1, r4
 801c8e6:	9b01      	ldr	r3, [sp, #4]
 801c8e8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c8ec:	f8c8 9004 	str.w	r9, [r8, #4]
 801c8f0:	4798      	blx	r3
 801c8f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c8f4:	f8c8 0008 	str.w	r0, [r8, #8]
 801c8f8:	689b      	ldr	r3, [r3, #8]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	f000 814a 	beq.w	801cb94 <rcl_wait_set_resize+0x310>
 801c900:	4622      	mov	r2, r4
 801c902:	4649      	mov	r1, r9
 801c904:	4618      	mov	r0, r3
 801c906:	f005 fd77 	bl	80223f8 <memset>
 801c90a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c90c:	f04f 0800 	mov.w	r8, #0
 801c910:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c914:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801c918:	f8c5 800c 	str.w	r8, [r5, #12]
 801c91c:	f8c4 800c 	str.w	r8, [r4, #12]
 801c920:	2e00      	cmp	r6, #0
 801c922:	f040 809b 	bne.w	801ca5c <rcl_wait_set_resize+0x1d8>
 801c926:	68a8      	ldr	r0, [r5, #8]
 801c928:	b128      	cbz	r0, 801c936 <rcl_wait_set_resize+0xb2>
 801c92a:	4649      	mov	r1, r9
 801c92c:	4790      	blx	r2
 801c92e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c930:	60ae      	str	r6, [r5, #8]
 801c932:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c936:	f04f 0800 	mov.w	r8, #0
 801c93a:	19f6      	adds	r6, r6, r7
 801c93c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c940:	f040 80a2 	bne.w	801ca88 <rcl_wait_set_resize+0x204>
 801c944:	6960      	ldr	r0, [r4, #20]
 801c946:	b130      	cbz	r0, 801c956 <rcl_wait_set_resize+0xd2>
 801c948:	4649      	mov	r1, r9
 801c94a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801c94c:	4798      	blx	r3
 801c94e:	6166      	str	r6, [r4, #20]
 801c950:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c952:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c956:	2600      	movs	r6, #0
 801c958:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c95c:	616e      	str	r6, [r5, #20]
 801c95e:	6426      	str	r6, [r4, #64]	@ 0x40
 801c960:	2f00      	cmp	r7, #0
 801c962:	f040 80af 	bne.w	801cac4 <rcl_wait_set_resize+0x240>
 801c966:	6928      	ldr	r0, [r5, #16]
 801c968:	b138      	cbz	r0, 801c97a <rcl_wait_set_resize+0xf6>
 801c96a:	4649      	mov	r1, r9
 801c96c:	47d0      	blx	sl
 801c96e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c970:	612f      	str	r7, [r5, #16]
 801c972:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c976:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c97a:	2600      	movs	r6, #0
 801c97c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c97e:	61ee      	str	r6, [r5, #28]
 801c980:	61a6      	str	r6, [r4, #24]
 801c982:	2b00      	cmp	r3, #0
 801c984:	f040 8093 	bne.w	801caae <rcl_wait_set_resize+0x22a>
 801c988:	69a8      	ldr	r0, [r5, #24]
 801c98a:	b120      	cbz	r0, 801c996 <rcl_wait_set_resize+0x112>
 801c98c:	4649      	mov	r1, r9
 801c98e:	47d0      	blx	sl
 801c990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c992:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c994:	61ab      	str	r3, [r5, #24]
 801c996:	6a20      	ldr	r0, [r4, #32]
 801c998:	b128      	cbz	r0, 801c9a6 <rcl_wait_set_resize+0x122>
 801c99a:	4649      	mov	r1, r9
 801c99c:	47d0      	blx	sl
 801c99e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9a0:	2300      	movs	r3, #0
 801c9a2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c9a6:	2600      	movs	r6, #0
 801c9a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9aa:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c9ac:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c9b0:	626e      	str	r6, [r5, #36]	@ 0x24
 801c9b2:	6266      	str	r6, [r4, #36]	@ 0x24
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	f000 8098 	beq.w	801caea <rcl_wait_set_resize+0x266>
 801c9ba:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c9be:	463a      	mov	r2, r7
 801c9c0:	6a28      	ldr	r0, [r5, #32]
 801c9c2:	4651      	mov	r1, sl
 801c9c4:	47c8      	blx	r9
 801c9c6:	6228      	str	r0, [r5, #32]
 801c9c8:	2800      	cmp	r0, #0
 801c9ca:	d077      	beq.n	801cabc <rcl_wait_set_resize+0x238>
 801c9cc:	4652      	mov	r2, sl
 801c9ce:	4631      	mov	r1, r6
 801c9d0:	f005 fd12 	bl	80223f8 <memset>
 801c9d4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9d8:	463a      	mov	r2, r7
 801c9da:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801c9dc:	4651      	mov	r1, sl
 801c9de:	626b      	str	r3, [r5, #36]	@ 0x24
 801c9e0:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c9e2:	47c8      	blx	r9
 801c9e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c9e6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801c9e8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801c9ea:	2c00      	cmp	r4, #0
 801c9ec:	f000 80f2 	beq.w	801cbd4 <rcl_wait_set_resize+0x350>
 801c9f0:	4620      	mov	r0, r4
 801c9f2:	4652      	mov	r2, sl
 801c9f4:	4631      	mov	r1, r6
 801c9f6:	f005 fcff 	bl	80223f8 <memset>
 801c9fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9fc:	2600      	movs	r6, #0
 801c9fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca00:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801ca02:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801ca06:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801ca08:	6326      	str	r6, [r4, #48]	@ 0x30
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	f040 8097 	bne.w	801cb3e <rcl_wait_set_resize+0x2ba>
 801ca10:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801ca12:	b120      	cbz	r0, 801ca1e <rcl_wait_set_resize+0x19a>
 801ca14:	4639      	mov	r1, r7
 801ca16:	47c0      	blx	r8
 801ca18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca1c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801ca1e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801ca20:	2800      	cmp	r0, #0
 801ca22:	d04c      	beq.n	801cabe <rcl_wait_set_resize+0x23a>
 801ca24:	4639      	mov	r1, r7
 801ca26:	47c0      	blx	r8
 801ca28:	2300      	movs	r3, #0
 801ca2a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801ca2c:	4618      	mov	r0, r3
 801ca2e:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801ca32:	b003      	add	sp, #12
 801ca34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca38:	6800      	ldr	r0, [r0, #0]
 801ca3a:	b120      	cbz	r0, 801ca46 <rcl_wait_set_resize+0x1c2>
 801ca3c:	4651      	mov	r1, sl
 801ca3e:	47d8      	blx	fp
 801ca40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca42:	f8c5 8000 	str.w	r8, [r5]
 801ca46:	68a0      	ldr	r0, [r4, #8]
 801ca48:	2800      	cmp	r0, #0
 801ca4a:	f43f af5f 	beq.w	801c90c <rcl_wait_set_resize+0x88>
 801ca4e:	4651      	mov	r1, sl
 801ca50:	47d8      	blx	fp
 801ca52:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca54:	2300      	movs	r3, #0
 801ca56:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801ca5a:	e757      	b.n	801c90c <rcl_wait_set_resize+0x88>
 801ca5c:	00b4      	lsls	r4, r6, #2
 801ca5e:	464a      	mov	r2, r9
 801ca60:	68a8      	ldr	r0, [r5, #8]
 801ca62:	4621      	mov	r1, r4
 801ca64:	4798      	blx	r3
 801ca66:	60a8      	str	r0, [r5, #8]
 801ca68:	b340      	cbz	r0, 801cabc <rcl_wait_set_resize+0x238>
 801ca6a:	4622      	mov	r2, r4
 801ca6c:	4641      	mov	r1, r8
 801ca6e:	f005 fcc3 	bl	80223f8 <memset>
 801ca72:	f04f 0800 	mov.w	r8, #0
 801ca76:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca78:	60ee      	str	r6, [r5, #12]
 801ca7a:	19f6      	adds	r6, r6, r7
 801ca7c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801ca80:	f8c4 8010 	str.w	r8, [r4, #16]
 801ca84:	f43f af5e 	beq.w	801c944 <rcl_wait_set_resize+0xc0>
 801ca88:	00b6      	lsls	r6, r6, #2
 801ca8a:	464a      	mov	r2, r9
 801ca8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801ca8e:	6960      	ldr	r0, [r4, #20]
 801ca90:	4631      	mov	r1, r6
 801ca92:	4798      	blx	r3
 801ca94:	4681      	mov	r9, r0
 801ca96:	6160      	str	r0, [r4, #20]
 801ca98:	2800      	cmp	r0, #0
 801ca9a:	f000 8084 	beq.w	801cba6 <rcl_wait_set_resize+0x322>
 801ca9e:	4632      	mov	r2, r6
 801caa0:	4641      	mov	r1, r8
 801caa2:	f005 fca9 	bl	80223f8 <memset>
 801caa6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801caa8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801caac:	e753      	b.n	801c956 <rcl_wait_set_resize+0xd2>
 801caae:	009c      	lsls	r4, r3, #2
 801cab0:	464a      	mov	r2, r9
 801cab2:	69a8      	ldr	r0, [r5, #24]
 801cab4:	4621      	mov	r1, r4
 801cab6:	47c0      	blx	r8
 801cab8:	61a8      	str	r0, [r5, #24]
 801caba:	bb40      	cbnz	r0, 801cb0e <rcl_wait_set_resize+0x28a>
 801cabc:	200a      	movs	r0, #10
 801cabe:	b003      	add	sp, #12
 801cac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cac4:	00bc      	lsls	r4, r7, #2
 801cac6:	464a      	mov	r2, r9
 801cac8:	6928      	ldr	r0, [r5, #16]
 801caca:	4621      	mov	r1, r4
 801cacc:	47c0      	blx	r8
 801cace:	6128      	str	r0, [r5, #16]
 801cad0:	2800      	cmp	r0, #0
 801cad2:	d0f3      	beq.n	801cabc <rcl_wait_set_resize+0x238>
 801cad4:	4622      	mov	r2, r4
 801cad6:	4631      	mov	r1, r6
 801cad8:	f005 fc8e 	bl	80223f8 <memset>
 801cadc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801cade:	616f      	str	r7, [r5, #20]
 801cae0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801cae4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801cae8:	e747      	b.n	801c97a <rcl_wait_set_resize+0xf6>
 801caea:	6a28      	ldr	r0, [r5, #32]
 801caec:	b120      	cbz	r0, 801caf8 <rcl_wait_set_resize+0x274>
 801caee:	4639      	mov	r1, r7
 801caf0:	47c0      	blx	r8
 801caf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801caf4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801caf6:	622b      	str	r3, [r5, #32]
 801caf8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801cafa:	2800      	cmp	r0, #0
 801cafc:	f43f af7e 	beq.w	801c9fc <rcl_wait_set_resize+0x178>
 801cb00:	4639      	mov	r1, r7
 801cb02:	47c0      	blx	r8
 801cb04:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801cb06:	2300      	movs	r3, #0
 801cb08:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801cb0c:	e776      	b.n	801c9fc <rcl_wait_set_resize+0x178>
 801cb0e:	4622      	mov	r2, r4
 801cb10:	4631      	mov	r1, r6
 801cb12:	f005 fc71 	bl	80223f8 <memset>
 801cb16:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801cb18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cb1a:	464a      	mov	r2, r9
 801cb1c:	6a38      	ldr	r0, [r7, #32]
 801cb1e:	4621      	mov	r1, r4
 801cb20:	61eb      	str	r3, [r5, #28]
 801cb22:	61fe      	str	r6, [r7, #28]
 801cb24:	47c0      	blx	r8
 801cb26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cb28:	6238      	str	r0, [r7, #32]
 801cb2a:	6a1f      	ldr	r7, [r3, #32]
 801cb2c:	2f00      	cmp	r7, #0
 801cb2e:	d04a      	beq.n	801cbc6 <rcl_wait_set_resize+0x342>
 801cb30:	4622      	mov	r2, r4
 801cb32:	4631      	mov	r1, r6
 801cb34:	4638      	mov	r0, r7
 801cb36:	f005 fc5f 	bl	80223f8 <memset>
 801cb3a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801cb3c:	e733      	b.n	801c9a6 <rcl_wait_set_resize+0x122>
 801cb3e:	009c      	lsls	r4, r3, #2
 801cb40:	463a      	mov	r2, r7
 801cb42:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801cb44:	4621      	mov	r1, r4
 801cb46:	47c8      	blx	r9
 801cb48:	62a8      	str	r0, [r5, #40]	@ 0x28
 801cb4a:	2800      	cmp	r0, #0
 801cb4c:	d0b6      	beq.n	801cabc <rcl_wait_set_resize+0x238>
 801cb4e:	4622      	mov	r2, r4
 801cb50:	4631      	mov	r1, r6
 801cb52:	f005 fc51 	bl	80223f8 <memset>
 801cb56:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801cb5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb5c:	463a      	mov	r2, r7
 801cb5e:	4621      	mov	r1, r4
 801cb60:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801cb64:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801cb66:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801cb6a:	47c8      	blx	r9
 801cb6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cb6e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801cb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d034      	beq.n	801cbe2 <rcl_wait_set_resize+0x35e>
 801cb78:	4622      	mov	r2, r4
 801cb7a:	4631      	mov	r1, r6
 801cb7c:	4618      	mov	r0, r3
 801cb7e:	f005 fc3b 	bl	80223f8 <memset>
 801cb82:	4630      	mov	r0, r6
 801cb84:	b003      	add	sp, #12
 801cb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb8a:	200b      	movs	r0, #11
 801cb8c:	4770      	bx	lr
 801cb8e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cb92:	e794      	b.n	801cabe <rcl_wait_set_resize+0x23a>
 801cb94:	6828      	ldr	r0, [r5, #0]
 801cb96:	4651      	mov	r1, sl
 801cb98:	9301      	str	r3, [sp, #4]
 801cb9a:	47d8      	blx	fp
 801cb9c:	9b01      	ldr	r3, [sp, #4]
 801cb9e:	200a      	movs	r0, #10
 801cba0:	e9c5 3300 	strd	r3, r3, [r5]
 801cba4:	e78b      	b.n	801cabe <rcl_wait_set_resize+0x23a>
 801cba6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cba8:	68a8      	ldr	r0, [r5, #8]
 801cbaa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801cbac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cbae:	4798      	blx	r3
 801cbb0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cbb2:	6928      	ldr	r0, [r5, #16]
 801cbb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801cbb6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801cbb8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801cbbc:	4790      	blx	r2
 801cbbe:	200a      	movs	r0, #10
 801cbc0:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801cbc4:	e77b      	b.n	801cabe <rcl_wait_set_resize+0x23a>
 801cbc6:	69a8      	ldr	r0, [r5, #24]
 801cbc8:	4649      	mov	r1, r9
 801cbca:	47d0      	blx	sl
 801cbcc:	200a      	movs	r0, #10
 801cbce:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801cbd2:	e774      	b.n	801cabe <rcl_wait_set_resize+0x23a>
 801cbd4:	6a28      	ldr	r0, [r5, #32]
 801cbd6:	4639      	mov	r1, r7
 801cbd8:	47c0      	blx	r8
 801cbda:	200a      	movs	r0, #10
 801cbdc:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801cbe0:	e76d      	b.n	801cabe <rcl_wait_set_resize+0x23a>
 801cbe2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801cbe4:	4639      	mov	r1, r7
 801cbe6:	9301      	str	r3, [sp, #4]
 801cbe8:	47c0      	blx	r8
 801cbea:	9b01      	ldr	r3, [sp, #4]
 801cbec:	200a      	movs	r0, #10
 801cbee:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801cbf2:	e764      	b.n	801cabe <rcl_wait_set_resize+0x23a>

0801cbf4 <rcl_wait_set_init>:
 801cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbf8:	b085      	sub	sp, #20
 801cbfa:	4605      	mov	r5, r0
 801cbfc:	460e      	mov	r6, r1
 801cbfe:	4617      	mov	r7, r2
 801cc00:	a812      	add	r0, sp, #72	@ 0x48
 801cc02:	4698      	mov	r8, r3
 801cc04:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 801cc08:	f7f8 fcba 	bl	8015580 <rcutils_allocator_is_valid>
 801cc0c:	2d00      	cmp	r5, #0
 801cc0e:	d072      	beq.n	801ccf6 <rcl_wait_set_init+0x102>
 801cc10:	f080 0001 	eor.w	r0, r0, #1
 801cc14:	b2c0      	uxtb	r0, r0
 801cc16:	2800      	cmp	r0, #0
 801cc18:	d16d      	bne.n	801ccf6 <rcl_wait_set_init+0x102>
 801cc1a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801cc1e:	f1ba 0f00 	cmp.w	sl, #0
 801cc22:	d004      	beq.n	801cc2e <rcl_wait_set_init+0x3a>
 801cc24:	2464      	movs	r4, #100	@ 0x64
 801cc26:	4620      	mov	r0, r4
 801cc28:	b005      	add	sp, #20
 801cc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc2e:	f1b9 0f00 	cmp.w	r9, #0
 801cc32:	d060      	beq.n	801ccf6 <rcl_wait_set_init+0x102>
 801cc34:	4648      	mov	r0, r9
 801cc36:	f7fe f807 	bl	801ac48 <rcl_context_is_valid>
 801cc3a:	2800      	cmp	r0, #0
 801cc3c:	d068      	beq.n	801cd10 <rcl_wait_set_init+0x11c>
 801cc3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cc40:	205c      	movs	r0, #92	@ 0x5c
 801cc42:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801cc44:	4798      	blx	r3
 801cc46:	6328      	str	r0, [r5, #48]	@ 0x30
 801cc48:	2800      	cmp	r0, #0
 801cc4a:	d063      	beq.n	801cd14 <rcl_wait_set_init+0x120>
 801cc4c:	225c      	movs	r2, #92	@ 0x5c
 801cc4e:	4651      	mov	r1, sl
 801cc50:	f005 fbd2 	bl	80223f8 <memset>
 801cc54:	ac12      	add	r4, sp, #72	@ 0x48
 801cc56:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801cc5a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801cc5e:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801cc62:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801cc66:	eb03 0e02 	add.w	lr, r3, r2
 801cc6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cc6c:	f8d9 9000 	ldr.w	r9, [r9]
 801cc70:	449e      	add	lr, r3
 801cc72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cc74:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801cc78:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801cc7c:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801cc80:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801cc84:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 801cc88:	44be      	add	lr, r7
 801cc8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc8e:	6823      	ldr	r3, [r4, #0]
 801cc90:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801cc94:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 801cc98:	f8cc 3000 	str.w	r3, [ip]
 801cc9c:	f002 ffa4 	bl	801fbe8 <rmw_create_wait_set>
 801cca0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cca2:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801cca6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cca8:	b350      	cbz	r0, 801cd00 <rcl_wait_set_init+0x10c>
 801ccaa:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ccac:	4643      	mov	r3, r8
 801ccae:	463a      	mov	r2, r7
 801ccb0:	4631      	mov	r1, r6
 801ccb2:	9402      	str	r4, [sp, #8]
 801ccb4:	4628      	mov	r0, r5
 801ccb6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ccb8:	9401      	str	r4, [sp, #4]
 801ccba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ccbc:	9400      	str	r4, [sp, #0]
 801ccbe:	f7ff fde1 	bl	801c884 <rcl_wait_set_resize>
 801ccc2:	4604      	mov	r4, r0
 801ccc4:	2800      	cmp	r0, #0
 801ccc6:	d0ae      	beq.n	801cc26 <rcl_wait_set_init+0x32>
 801ccc8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ccca:	bb2b      	cbnz	r3, 801cd18 <rcl_wait_set_init+0x124>
 801cccc:	2600      	movs	r6, #0
 801ccce:	4628      	mov	r0, r5
 801ccd0:	4633      	mov	r3, r6
 801ccd2:	4632      	mov	r2, r6
 801ccd4:	4631      	mov	r1, r6
 801ccd6:	9600      	str	r6, [sp, #0]
 801ccd8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801ccdc:	f7ff fdd2 	bl	801c884 <rcl_wait_set_resize>
 801cce0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cce2:	2800      	cmp	r0, #0
 801cce4:	d09f      	beq.n	801cc26 <rcl_wait_set_init+0x32>
 801cce6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801cce8:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801ccea:	4798      	blx	r3
 801ccec:	4620      	mov	r0, r4
 801ccee:	632e      	str	r6, [r5, #48]	@ 0x30
 801ccf0:	b005      	add	sp, #20
 801ccf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccf6:	240b      	movs	r4, #11
 801ccf8:	4620      	mov	r0, r4
 801ccfa:	b005      	add	sp, #20
 801ccfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd00:	2401      	movs	r4, #1
 801cd02:	f002 ff7b 	bl	801fbfc <rmw_destroy_wait_set>
 801cd06:	2800      	cmp	r0, #0
 801cd08:	bf18      	it	ne
 801cd0a:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801cd0e:	e7dd      	b.n	801cccc <rcl_wait_set_init+0xd8>
 801cd10:	2465      	movs	r4, #101	@ 0x65
 801cd12:	e788      	b.n	801cc26 <rcl_wait_set_init+0x32>
 801cd14:	240a      	movs	r4, #10
 801cd16:	e786      	b.n	801cc26 <rcl_wait_set_init+0x32>
 801cd18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cd1a:	e7f2      	b.n	801cd02 <rcl_wait_set_init+0x10e>

0801cd1c <rcl_wait_set_add_guard_condition>:
 801cd1c:	b318      	cbz	r0, 801cd66 <rcl_wait_set_add_guard_condition+0x4a>
 801cd1e:	b538      	push	{r3, r4, r5, lr}
 801cd20:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cd22:	4604      	mov	r4, r0
 801cd24:	b30b      	cbz	r3, 801cd6a <rcl_wait_set_add_guard_condition+0x4e>
 801cd26:	b319      	cbz	r1, 801cd70 <rcl_wait_set_add_guard_condition+0x54>
 801cd28:	68dd      	ldr	r5, [r3, #12]
 801cd2a:	68c0      	ldr	r0, [r0, #12]
 801cd2c:	4285      	cmp	r5, r0
 801cd2e:	d217      	bcs.n	801cd60 <rcl_wait_set_add_guard_condition+0x44>
 801cd30:	1c68      	adds	r0, r5, #1
 801cd32:	60d8      	str	r0, [r3, #12]
 801cd34:	68a3      	ldr	r3, [r4, #8]
 801cd36:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cd3a:	b102      	cbz	r2, 801cd3e <rcl_wait_set_add_guard_condition+0x22>
 801cd3c:	6015      	str	r5, [r2, #0]
 801cd3e:	4608      	mov	r0, r1
 801cd40:	f004 fc02 	bl	8021548 <rcl_guard_condition_get_rmw_handle>
 801cd44:	b150      	cbz	r0, 801cd5c <rcl_wait_set_add_guard_condition+0x40>
 801cd46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd48:	6842      	ldr	r2, [r0, #4]
 801cd4a:	2000      	movs	r0, #0
 801cd4c:	695b      	ldr	r3, [r3, #20]
 801cd4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd52:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cd54:	6913      	ldr	r3, [r2, #16]
 801cd56:	3301      	adds	r3, #1
 801cd58:	6113      	str	r3, [r2, #16]
 801cd5a:	bd38      	pop	{r3, r4, r5, pc}
 801cd5c:	2001      	movs	r0, #1
 801cd5e:	bd38      	pop	{r3, r4, r5, pc}
 801cd60:	f240 3086 	movw	r0, #902	@ 0x386
 801cd64:	bd38      	pop	{r3, r4, r5, pc}
 801cd66:	200b      	movs	r0, #11
 801cd68:	4770      	bx	lr
 801cd6a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cd6e:	bd38      	pop	{r3, r4, r5, pc}
 801cd70:	200b      	movs	r0, #11
 801cd72:	bd38      	pop	{r3, r4, r5, pc}

0801cd74 <rcl_wait_set_add_timer>:
 801cd74:	b328      	cbz	r0, 801cdc2 <rcl_wait_set_add_timer+0x4e>
 801cd76:	b538      	push	{r3, r4, r5, lr}
 801cd78:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cd7a:	4604      	mov	r4, r0
 801cd7c:	b31b      	cbz	r3, 801cdc6 <rcl_wait_set_add_timer+0x52>
 801cd7e:	b329      	cbz	r1, 801cdcc <rcl_wait_set_add_timer+0x58>
 801cd80:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801cd82:	6965      	ldr	r5, [r4, #20]
 801cd84:	42a8      	cmp	r0, r5
 801cd86:	d219      	bcs.n	801cdbc <rcl_wait_set_add_timer+0x48>
 801cd88:	1c45      	adds	r5, r0, #1
 801cd8a:	641d      	str	r5, [r3, #64]	@ 0x40
 801cd8c:	6923      	ldr	r3, [r4, #16]
 801cd8e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801cd92:	b102      	cbz	r2, 801cd96 <rcl_wait_set_add_timer+0x22>
 801cd94:	6010      	str	r0, [r2, #0]
 801cd96:	4608      	mov	r0, r1
 801cd98:	f7ff fb9a 	bl	801c4d0 <rcl_timer_get_guard_condition>
 801cd9c:	b168      	cbz	r0, 801cdba <rcl_wait_set_add_timer+0x46>
 801cd9e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cda0:	68e3      	ldr	r3, [r4, #12]
 801cda2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801cda4:	3b01      	subs	r3, #1
 801cda6:	441d      	add	r5, r3
 801cda8:	f004 fbce 	bl	8021548 <rcl_guard_condition_get_rmw_handle>
 801cdac:	b180      	cbz	r0, 801cdd0 <rcl_wait_set_add_timer+0x5c>
 801cdae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cdb0:	6842      	ldr	r2, [r0, #4]
 801cdb2:	2000      	movs	r0, #0
 801cdb4:	695b      	ldr	r3, [r3, #20]
 801cdb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cdba:	bd38      	pop	{r3, r4, r5, pc}
 801cdbc:	f240 3086 	movw	r0, #902	@ 0x386
 801cdc0:	bd38      	pop	{r3, r4, r5, pc}
 801cdc2:	200b      	movs	r0, #11
 801cdc4:	4770      	bx	lr
 801cdc6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cdca:	bd38      	pop	{r3, r4, r5, pc}
 801cdcc:	200b      	movs	r0, #11
 801cdce:	bd38      	pop	{r3, r4, r5, pc}
 801cdd0:	2001      	movs	r0, #1
 801cdd2:	bd38      	pop	{r3, r4, r5, pc}

0801cdd4 <rcl_wait_set_add_client>:
 801cdd4:	b318      	cbz	r0, 801ce1e <rcl_wait_set_add_client+0x4a>
 801cdd6:	b538      	push	{r3, r4, r5, lr}
 801cdd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cdda:	4604      	mov	r4, r0
 801cddc:	b30b      	cbz	r3, 801ce22 <rcl_wait_set_add_client+0x4e>
 801cdde:	b319      	cbz	r1, 801ce28 <rcl_wait_set_add_client+0x54>
 801cde0:	699d      	ldr	r5, [r3, #24]
 801cde2:	69c0      	ldr	r0, [r0, #28]
 801cde4:	4285      	cmp	r5, r0
 801cde6:	d217      	bcs.n	801ce18 <rcl_wait_set_add_client+0x44>
 801cde8:	1c68      	adds	r0, r5, #1
 801cdea:	6198      	str	r0, [r3, #24]
 801cdec:	69a3      	ldr	r3, [r4, #24]
 801cdee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cdf2:	b102      	cbz	r2, 801cdf6 <rcl_wait_set_add_client+0x22>
 801cdf4:	6015      	str	r5, [r2, #0]
 801cdf6:	4608      	mov	r0, r1
 801cdf8:	f7fd fe78 	bl	801aaec <rcl_client_get_rmw_handle>
 801cdfc:	b150      	cbz	r0, 801ce14 <rcl_wait_set_add_client+0x40>
 801cdfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ce00:	6842      	ldr	r2, [r0, #4]
 801ce02:	2000      	movs	r0, #0
 801ce04:	6a1b      	ldr	r3, [r3, #32]
 801ce06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ce0a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801ce0c:	69d3      	ldr	r3, [r2, #28]
 801ce0e:	3301      	adds	r3, #1
 801ce10:	61d3      	str	r3, [r2, #28]
 801ce12:	bd38      	pop	{r3, r4, r5, pc}
 801ce14:	2001      	movs	r0, #1
 801ce16:	bd38      	pop	{r3, r4, r5, pc}
 801ce18:	f240 3086 	movw	r0, #902	@ 0x386
 801ce1c:	bd38      	pop	{r3, r4, r5, pc}
 801ce1e:	200b      	movs	r0, #11
 801ce20:	4770      	bx	lr
 801ce22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ce26:	bd38      	pop	{r3, r4, r5, pc}
 801ce28:	200b      	movs	r0, #11
 801ce2a:	bd38      	pop	{r3, r4, r5, pc}

0801ce2c <rcl_wait_set_add_service>:
 801ce2c:	b318      	cbz	r0, 801ce76 <rcl_wait_set_add_service+0x4a>
 801ce2e:	b538      	push	{r3, r4, r5, lr}
 801ce30:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ce32:	4604      	mov	r4, r0
 801ce34:	b30b      	cbz	r3, 801ce7a <rcl_wait_set_add_service+0x4e>
 801ce36:	b319      	cbz	r1, 801ce80 <rcl_wait_set_add_service+0x54>
 801ce38:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801ce3a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801ce3c:	4285      	cmp	r5, r0
 801ce3e:	d217      	bcs.n	801ce70 <rcl_wait_set_add_service+0x44>
 801ce40:	1c68      	adds	r0, r5, #1
 801ce42:	6258      	str	r0, [r3, #36]	@ 0x24
 801ce44:	6a23      	ldr	r3, [r4, #32]
 801ce46:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801ce4a:	b102      	cbz	r2, 801ce4e <rcl_wait_set_add_service+0x22>
 801ce4c:	6015      	str	r5, [r2, #0]
 801ce4e:	4608      	mov	r0, r1
 801ce50:	f7fe fdc2 	bl	801b9d8 <rcl_service_get_rmw_handle>
 801ce54:	b150      	cbz	r0, 801ce6c <rcl_wait_set_add_service+0x40>
 801ce56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ce58:	6842      	ldr	r2, [r0, #4]
 801ce5a:	2000      	movs	r0, #0
 801ce5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ce62:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801ce64:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801ce66:	3301      	adds	r3, #1
 801ce68:	6293      	str	r3, [r2, #40]	@ 0x28
 801ce6a:	bd38      	pop	{r3, r4, r5, pc}
 801ce6c:	2001      	movs	r0, #1
 801ce6e:	bd38      	pop	{r3, r4, r5, pc}
 801ce70:	f240 3086 	movw	r0, #902	@ 0x386
 801ce74:	bd38      	pop	{r3, r4, r5, pc}
 801ce76:	200b      	movs	r0, #11
 801ce78:	4770      	bx	lr
 801ce7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ce7e:	bd38      	pop	{r3, r4, r5, pc}
 801ce80:	200b      	movs	r0, #11
 801ce82:	bd38      	pop	{r3, r4, r5, pc}
 801ce84:	0000      	movs	r0, r0
	...

0801ce88 <rcl_wait>:
 801ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce8c:	ed2d 8b02 	vpush	{d8}
 801ce90:	b08d      	sub	sp, #52	@ 0x34
 801ce92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ce96:	2800      	cmp	r0, #0
 801ce98:	f000 814f 	beq.w	801d13a <rcl_wait+0x2b2>
 801ce9c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801ce9e:	4605      	mov	r5, r0
 801cea0:	2e00      	cmp	r6, #0
 801cea2:	f000 811a 	beq.w	801d0da <rcl_wait+0x252>
 801cea6:	6843      	ldr	r3, [r0, #4]
 801cea8:	b983      	cbnz	r3, 801cecc <rcl_wait+0x44>
 801ceaa:	68eb      	ldr	r3, [r5, #12]
 801ceac:	b973      	cbnz	r3, 801cecc <rcl_wait+0x44>
 801ceae:	696b      	ldr	r3, [r5, #20]
 801ceb0:	b963      	cbnz	r3, 801cecc <rcl_wait+0x44>
 801ceb2:	69eb      	ldr	r3, [r5, #28]
 801ceb4:	b953      	cbnz	r3, 801cecc <rcl_wait+0x44>
 801ceb6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801ceb8:	b943      	cbnz	r3, 801cecc <rcl_wait+0x44>
 801ceba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801cebc:	b933      	cbnz	r3, 801cecc <rcl_wait+0x44>
 801cebe:	f240 3085 	movw	r0, #901	@ 0x385
 801cec2:	b00d      	add	sp, #52	@ 0x34
 801cec4:	ecbd 8b02 	vpop	{d8}
 801cec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cecc:	9b04      	ldr	r3, [sp, #16]
 801cece:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801ced0:	2b01      	cmp	r3, #1
 801ced2:	9b05      	ldr	r3, [sp, #20]
 801ced4:	f173 0300 	sbcs.w	r3, r3, #0
 801ced8:	f2c0 80f8 	blt.w	801d0cc <rcl_wait+0x244>
 801cedc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801cee0:	2a00      	cmp	r2, #0
 801cee2:	f000 810f 	beq.w	801d104 <rcl_wait+0x27c>
 801cee6:	2400      	movs	r4, #0
 801cee8:	4613      	mov	r3, r2
 801ceea:	f240 3921 	movw	r9, #801	@ 0x321
 801ceee:	4632      	mov	r2, r6
 801cef0:	46a2      	mov	sl, r4
 801cef2:	46a3      	mov	fp, r4
 801cef4:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 801d158 <rcl_wait+0x2d0>
 801cef8:	e014      	b.n	801cf24 <rcl_wait+0x9c>
 801cefa:	2800      	cmp	r0, #0
 801cefc:	d1e1      	bne.n	801cec2 <rcl_wait+0x3a>
 801cefe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cf02:	4542      	cmp	r2, r8
 801cf04:	eb73 0107 	sbcs.w	r1, r3, r7
 801cf08:	da03      	bge.n	801cf12 <rcl_wait+0x8a>
 801cf0a:	4690      	mov	r8, r2
 801cf0c:	461f      	mov	r7, r3
 801cf0e:	f04f 0b01 	mov.w	fp, #1
 801cf12:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801cf14:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801cf16:	3401      	adds	r4, #1
 801cf18:	f14a 0a00 	adc.w	sl, sl, #0
 801cf1c:	429c      	cmp	r4, r3
 801cf1e:	f17a 0100 	sbcs.w	r1, sl, #0
 801cf22:	d228      	bcs.n	801cf76 <rcl_wait+0xee>
 801cf24:	6928      	ldr	r0, [r5, #16]
 801cf26:	a908      	add	r1, sp, #32
 801cf28:	00a6      	lsls	r6, r4, #2
 801cf2a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801cf2e:	2800      	cmp	r0, #0
 801cf30:	d0f1      	beq.n	801cf16 <rcl_wait+0x8e>
 801cf32:	68eb      	ldr	r3, [r5, #12]
 801cf34:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801cf38:	4423      	add	r3, r4
 801cf3a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801cf3e:	f1be 0f00 	cmp.w	lr, #0
 801cf42:	d006      	beq.n	801cf52 <rcl_wait+0xca>
 801cf44:	6913      	ldr	r3, [r2, #16]
 801cf46:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801cf4a:	3301      	adds	r3, #1
 801cf4c:	6113      	str	r3, [r2, #16]
 801cf4e:	692b      	ldr	r3, [r5, #16]
 801cf50:	5998      	ldr	r0, [r3, r6]
 801cf52:	ed8d 8b08 	vstr	d8, [sp, #32]
 801cf56:	f7ff fa89 	bl	801c46c <rcl_timer_get_time_until_next_call>
 801cf5a:	4548      	cmp	r0, r9
 801cf5c:	d1cd      	bne.n	801cefa <rcl_wait+0x72>
 801cf5e:	692b      	ldr	r3, [r5, #16]
 801cf60:	2200      	movs	r2, #0
 801cf62:	3401      	adds	r4, #1
 801cf64:	519a      	str	r2, [r3, r6]
 801cf66:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801cf68:	f14a 0a00 	adc.w	sl, sl, #0
 801cf6c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801cf6e:	429c      	cmp	r4, r3
 801cf70:	f17a 0100 	sbcs.w	r1, sl, #0
 801cf74:	d3d6      	bcc.n	801cf24 <rcl_wait+0x9c>
 801cf76:	4659      	mov	r1, fp
 801cf78:	4616      	mov	r6, r2
 801cf7a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801cf7e:	4313      	orrs	r3, r2
 801cf80:	f040 80b4 	bne.w	801d0ec <rcl_wait+0x264>
 801cf84:	2300      	movs	r3, #0
 801cf86:	2200      	movs	r2, #0
 801cf88:	460c      	mov	r4, r1
 801cf8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cf8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801cf92:	ab08      	add	r3, sp, #32
 801cf94:	9302      	str	r3, [sp, #8]
 801cf96:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801cf9a:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801cf9c:	f106 0110 	add.w	r1, r6, #16
 801cfa0:	9300      	str	r3, [sp, #0]
 801cfa2:	1d30      	adds	r0, r6, #4
 801cfa4:	f106 031c 	add.w	r3, r6, #28
 801cfa8:	9201      	str	r2, [sp, #4]
 801cfaa:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801cfae:	f002 fcb7 	bl	801f920 <rmw_wait>
 801cfb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cfb4:	4680      	mov	r8, r0
 801cfb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cfb8:	b1e2      	cbz	r2, 801cff4 <rcl_wait+0x16c>
 801cfba:	f04f 0900 	mov.w	r9, #0
 801cfbe:	464f      	mov	r7, r9
 801cfc0:	692a      	ldr	r2, [r5, #16]
 801cfc2:	f10d 011f 	add.w	r1, sp, #31
 801cfc6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801cfca:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801cfce:	b160      	cbz	r0, 801cfea <rcl_wait+0x162>
 801cfd0:	f88d 701f 	strb.w	r7, [sp, #31]
 801cfd4:	f7ff fa0e 	bl	801c3f4 <rcl_timer_is_ready>
 801cfd8:	2800      	cmp	r0, #0
 801cfda:	f47f af72 	bne.w	801cec2 <rcl_wait+0x3a>
 801cfde:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801cfe2:	b90b      	cbnz	r3, 801cfe8 <rcl_wait+0x160>
 801cfe4:	692a      	ldr	r2, [r5, #16]
 801cfe6:	5193      	str	r3, [r2, r6]
 801cfe8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cfea:	f109 0901 	add.w	r9, r9, #1
 801cfee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cff0:	454a      	cmp	r2, r9
 801cff2:	d8e5      	bhi.n	801cfc0 <rcl_wait+0x138>
 801cff4:	f038 0002 	bics.w	r0, r8, #2
 801cff8:	d176      	bne.n	801d0e8 <rcl_wait+0x260>
 801cffa:	686f      	ldr	r7, [r5, #4]
 801cffc:	b17f      	cbz	r7, 801d01e <rcl_wait+0x196>
 801cffe:	4602      	mov	r2, r0
 801d000:	e002      	b.n	801d008 <rcl_wait+0x180>
 801d002:	3201      	adds	r2, #1
 801d004:	42ba      	cmp	r2, r7
 801d006:	d00a      	beq.n	801d01e <rcl_wait+0x196>
 801d008:	6899      	ldr	r1, [r3, #8]
 801d00a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d00e:	2900      	cmp	r1, #0
 801d010:	d1f7      	bne.n	801d002 <rcl_wait+0x17a>
 801d012:	682e      	ldr	r6, [r5, #0]
 801d014:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801d018:	3201      	adds	r2, #1
 801d01a:	42ba      	cmp	r2, r7
 801d01c:	d1f4      	bne.n	801d008 <rcl_wait+0x180>
 801d01e:	68ef      	ldr	r7, [r5, #12]
 801d020:	b17f      	cbz	r7, 801d042 <rcl_wait+0x1ba>
 801d022:	2200      	movs	r2, #0
 801d024:	e002      	b.n	801d02c <rcl_wait+0x1a4>
 801d026:	3201      	adds	r2, #1
 801d028:	42ba      	cmp	r2, r7
 801d02a:	d00a      	beq.n	801d042 <rcl_wait+0x1ba>
 801d02c:	6959      	ldr	r1, [r3, #20]
 801d02e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d032:	2900      	cmp	r1, #0
 801d034:	d1f7      	bne.n	801d026 <rcl_wait+0x19e>
 801d036:	68ae      	ldr	r6, [r5, #8]
 801d038:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801d03c:	3201      	adds	r2, #1
 801d03e:	42ba      	cmp	r2, r7
 801d040:	d1f4      	bne.n	801d02c <rcl_wait+0x1a4>
 801d042:	69ef      	ldr	r7, [r5, #28]
 801d044:	b17f      	cbz	r7, 801d066 <rcl_wait+0x1de>
 801d046:	2200      	movs	r2, #0
 801d048:	e002      	b.n	801d050 <rcl_wait+0x1c8>
 801d04a:	3201      	adds	r2, #1
 801d04c:	42ba      	cmp	r2, r7
 801d04e:	d00a      	beq.n	801d066 <rcl_wait+0x1de>
 801d050:	6a19      	ldr	r1, [r3, #32]
 801d052:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d056:	2900      	cmp	r1, #0
 801d058:	d1f7      	bne.n	801d04a <rcl_wait+0x1c2>
 801d05a:	69ae      	ldr	r6, [r5, #24]
 801d05c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801d060:	3201      	adds	r2, #1
 801d062:	42ba      	cmp	r2, r7
 801d064:	d1f4      	bne.n	801d050 <rcl_wait+0x1c8>
 801d066:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 801d068:	b17f      	cbz	r7, 801d08a <rcl_wait+0x202>
 801d06a:	2200      	movs	r2, #0
 801d06c:	e002      	b.n	801d074 <rcl_wait+0x1ec>
 801d06e:	3201      	adds	r2, #1
 801d070:	42ba      	cmp	r2, r7
 801d072:	d00a      	beq.n	801d08a <rcl_wait+0x202>
 801d074:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801d076:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d07a:	2900      	cmp	r1, #0
 801d07c:	d1f7      	bne.n	801d06e <rcl_wait+0x1e6>
 801d07e:	6a2e      	ldr	r6, [r5, #32]
 801d080:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801d084:	3201      	adds	r2, #1
 801d086:	42ba      	cmp	r2, r7
 801d088:	d1f4      	bne.n	801d074 <rcl_wait+0x1ec>
 801d08a:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801d08c:	b17f      	cbz	r7, 801d0ae <rcl_wait+0x226>
 801d08e:	2200      	movs	r2, #0
 801d090:	e002      	b.n	801d098 <rcl_wait+0x210>
 801d092:	3201      	adds	r2, #1
 801d094:	42ba      	cmp	r2, r7
 801d096:	d00a      	beq.n	801d0ae <rcl_wait+0x226>
 801d098:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801d09a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d09e:	2900      	cmp	r1, #0
 801d0a0:	d1f7      	bne.n	801d092 <rcl_wait+0x20a>
 801d0a2:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 801d0a4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801d0a8:	3201      	adds	r2, #1
 801d0aa:	42ba      	cmp	r2, r7
 801d0ac:	d1f4      	bne.n	801d098 <rcl_wait+0x210>
 801d0ae:	f1b8 0f02 	cmp.w	r8, #2
 801d0b2:	f47f af06 	bne.w	801cec2 <rcl_wait+0x3a>
 801d0b6:	f084 0301 	eor.w	r3, r4, #1
 801d0ba:	b2db      	uxtb	r3, r3
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	bf18      	it	ne
 801d0c0:	2002      	movne	r0, #2
 801d0c2:	b00d      	add	sp, #52	@ 0x34
 801d0c4:	ecbd 8b02 	vpop	{d8}
 801d0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0cc:	2a00      	cmp	r2, #0
 801d0ce:	d03a      	beq.n	801d146 <rcl_wait+0x2be>
 801d0d0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d0d4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801d0d8:	e705      	b.n	801cee6 <rcl_wait+0x5e>
 801d0da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d0de:	b00d      	add	sp, #52	@ 0x34
 801d0e0:	ecbd 8b02 	vpop	{d8}
 801d0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0e8:	2001      	movs	r0, #1
 801d0ea:	e6ea      	b.n	801cec2 <rcl_wait+0x3a>
 801d0ec:	9b04      	ldr	r3, [sp, #16]
 801d0ee:	460c      	mov	r4, r1
 801d0f0:	2b01      	cmp	r3, #1
 801d0f2:	9b05      	ldr	r3, [sp, #20]
 801d0f4:	f173 0300 	sbcs.w	r3, r3, #0
 801d0f8:	bfa8      	it	ge
 801d0fa:	f044 0401 	orrge.w	r4, r4, #1
 801d0fe:	b914      	cbnz	r4, 801d106 <rcl_wait+0x27e>
 801d100:	4623      	mov	r3, r4
 801d102:	e747      	b.n	801cf94 <rcl_wait+0x10c>
 801d104:	4611      	mov	r1, r2
 801d106:	2f00      	cmp	r7, #0
 801d108:	da02      	bge.n	801d110 <rcl_wait+0x288>
 801d10a:	f04f 0800 	mov.w	r8, #0
 801d10e:	4647      	mov	r7, r8
 801d110:	460c      	mov	r4, r1
 801d112:	4640      	mov	r0, r8
 801d114:	4639      	mov	r1, r7
 801d116:	a312      	add	r3, pc, #72	@ (adr r3, 801d160 <rcl_wait+0x2d8>)
 801d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d11c:	f7e3 f948 	bl	80003b0 <__aeabi_ldivmod>
 801d120:	a30f      	add	r3, pc, #60	@ (adr r3, 801d160 <rcl_wait+0x2d8>)
 801d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d126:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d12a:	4640      	mov	r0, r8
 801d12c:	4639      	mov	r1, r7
 801d12e:	f7e3 f93f 	bl	80003b0 <__aeabi_ldivmod>
 801d132:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801d136:	ab08      	add	r3, sp, #32
 801d138:	e72c      	b.n	801cf94 <rcl_wait+0x10c>
 801d13a:	200b      	movs	r0, #11
 801d13c:	b00d      	add	sp, #52	@ 0x34
 801d13e:	ecbd 8b02 	vpop	{d8}
 801d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d146:	4611      	mov	r1, r2
 801d148:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d14c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801d150:	e713      	b.n	801cf7a <rcl_wait+0xf2>
 801d152:	bf00      	nop
 801d154:	f3af 8000 	nop.w
 801d158:	ffffffff 	.word	0xffffffff
 801d15c:	7fffffff 	.word	0x7fffffff
 801d160:	3b9aca00 	.word	0x3b9aca00
 801d164:	00000000 	.word	0x00000000

0801d168 <rcl_action_take_goal_response>:
 801d168:	2800      	cmp	r0, #0
 801d16a:	d039      	beq.n	801d1e0 <rcl_action_take_goal_response+0x78>
 801d16c:	b570      	push	{r4, r5, r6, lr}
 801d16e:	4604      	mov	r4, r0
 801d170:	6800      	ldr	r0, [r0, #0]
 801d172:	b380      	cbz	r0, 801d1d6 <rcl_action_take_goal_response+0x6e>
 801d174:	460e      	mov	r6, r1
 801d176:	4615      	mov	r5, r2
 801d178:	f7fd fd3e 	bl	801abf8 <rcl_client_is_valid>
 801d17c:	b330      	cbz	r0, 801d1cc <rcl_action_take_goal_response+0x64>
 801d17e:	6820      	ldr	r0, [r4, #0]
 801d180:	3004      	adds	r0, #4
 801d182:	f7fd fd39 	bl	801abf8 <rcl_client_is_valid>
 801d186:	b308      	cbz	r0, 801d1cc <rcl_action_take_goal_response+0x64>
 801d188:	6820      	ldr	r0, [r4, #0]
 801d18a:	3008      	adds	r0, #8
 801d18c:	f7fd fd34 	bl	801abf8 <rcl_client_is_valid>
 801d190:	b1e0      	cbz	r0, 801d1cc <rcl_action_take_goal_response+0x64>
 801d192:	6820      	ldr	r0, [r4, #0]
 801d194:	300c      	adds	r0, #12
 801d196:	f7fe fdc5 	bl	801bd24 <rcl_subscription_is_valid>
 801d19a:	b1b8      	cbz	r0, 801d1cc <rcl_action_take_goal_response+0x64>
 801d19c:	6820      	ldr	r0, [r4, #0]
 801d19e:	3010      	adds	r0, #16
 801d1a0:	f7fe fdc0 	bl	801bd24 <rcl_subscription_is_valid>
 801d1a4:	b190      	cbz	r0, 801d1cc <rcl_action_take_goal_response+0x64>
 801d1a6:	b1cd      	cbz	r5, 801d1dc <rcl_action_take_goal_response+0x74>
 801d1a8:	b1c6      	cbz	r6, 801d1dc <rcl_action_take_goal_response+0x74>
 801d1aa:	462a      	mov	r2, r5
 801d1ac:	4631      	mov	r1, r6
 801d1ae:	6820      	ldr	r0, [r4, #0]
 801d1b0:	f7fd fcda 	bl	801ab68 <rcl_take_response>
 801d1b4:	b148      	cbz	r0, 801d1ca <rcl_action_take_goal_response+0x62>
 801d1b6:	280a      	cmp	r0, #10
 801d1b8:	d007      	beq.n	801d1ca <rcl_action_take_goal_response+0x62>
 801d1ba:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d1be:	f640 0337 	movw	r3, #2103	@ 0x837
 801d1c2:	4290      	cmp	r0, r2
 801d1c4:	bf0c      	ite	eq
 801d1c6:	4618      	moveq	r0, r3
 801d1c8:	2001      	movne	r0, #1
 801d1ca:	bd70      	pop	{r4, r5, r6, pc}
 801d1cc:	f7f8 f9fc 	bl	80155c8 <rcutils_reset_error>
 801d1d0:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1d4:	bd70      	pop	{r4, r5, r6, pc}
 801d1d6:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1da:	bd70      	pop	{r4, r5, r6, pc}
 801d1dc:	200b      	movs	r0, #11
 801d1de:	bd70      	pop	{r4, r5, r6, pc}
 801d1e0:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1e4:	4770      	bx	lr
 801d1e6:	bf00      	nop

0801d1e8 <rcl_action_send_result_request>:
 801d1e8:	b390      	cbz	r0, 801d250 <rcl_action_send_result_request+0x68>
 801d1ea:	b570      	push	{r4, r5, r6, lr}
 801d1ec:	4604      	mov	r4, r0
 801d1ee:	6800      	ldr	r0, [r0, #0]
 801d1f0:	b348      	cbz	r0, 801d246 <rcl_action_send_result_request+0x5e>
 801d1f2:	460e      	mov	r6, r1
 801d1f4:	4615      	mov	r5, r2
 801d1f6:	f7fd fcff 	bl	801abf8 <rcl_client_is_valid>
 801d1fa:	b1f8      	cbz	r0, 801d23c <rcl_action_send_result_request+0x54>
 801d1fc:	6820      	ldr	r0, [r4, #0]
 801d1fe:	3004      	adds	r0, #4
 801d200:	f7fd fcfa 	bl	801abf8 <rcl_client_is_valid>
 801d204:	b1d0      	cbz	r0, 801d23c <rcl_action_send_result_request+0x54>
 801d206:	6820      	ldr	r0, [r4, #0]
 801d208:	3008      	adds	r0, #8
 801d20a:	f7fd fcf5 	bl	801abf8 <rcl_client_is_valid>
 801d20e:	b1a8      	cbz	r0, 801d23c <rcl_action_send_result_request+0x54>
 801d210:	6820      	ldr	r0, [r4, #0]
 801d212:	300c      	adds	r0, #12
 801d214:	f7fe fd86 	bl	801bd24 <rcl_subscription_is_valid>
 801d218:	b180      	cbz	r0, 801d23c <rcl_action_send_result_request+0x54>
 801d21a:	6820      	ldr	r0, [r4, #0]
 801d21c:	3010      	adds	r0, #16
 801d21e:	f7fe fd81 	bl	801bd24 <rcl_subscription_is_valid>
 801d222:	b158      	cbz	r0, 801d23c <rcl_action_send_result_request+0x54>
 801d224:	b195      	cbz	r5, 801d24c <rcl_action_send_result_request+0x64>
 801d226:	b18e      	cbz	r6, 801d24c <rcl_action_send_result_request+0x64>
 801d228:	6820      	ldr	r0, [r4, #0]
 801d22a:	462a      	mov	r2, r5
 801d22c:	4631      	mov	r1, r6
 801d22e:	3008      	adds	r0, #8
 801d230:	f7fd fc62 	bl	801aaf8 <rcl_send_request>
 801d234:	3800      	subs	r0, #0
 801d236:	bf18      	it	ne
 801d238:	2001      	movne	r0, #1
 801d23a:	bd70      	pop	{r4, r5, r6, pc}
 801d23c:	f7f8 f9c4 	bl	80155c8 <rcutils_reset_error>
 801d240:	f640 0036 	movw	r0, #2102	@ 0x836
 801d244:	bd70      	pop	{r4, r5, r6, pc}
 801d246:	f640 0036 	movw	r0, #2102	@ 0x836
 801d24a:	bd70      	pop	{r4, r5, r6, pc}
 801d24c:	200b      	movs	r0, #11
 801d24e:	bd70      	pop	{r4, r5, r6, pc}
 801d250:	f640 0036 	movw	r0, #2102	@ 0x836
 801d254:	4770      	bx	lr
 801d256:	bf00      	nop

0801d258 <rcl_action_take_result_response>:
 801d258:	2800      	cmp	r0, #0
 801d25a:	d03a      	beq.n	801d2d2 <rcl_action_take_result_response+0x7a>
 801d25c:	b570      	push	{r4, r5, r6, lr}
 801d25e:	4604      	mov	r4, r0
 801d260:	6800      	ldr	r0, [r0, #0]
 801d262:	b388      	cbz	r0, 801d2c8 <rcl_action_take_result_response+0x70>
 801d264:	460e      	mov	r6, r1
 801d266:	4615      	mov	r5, r2
 801d268:	f7fd fcc6 	bl	801abf8 <rcl_client_is_valid>
 801d26c:	b338      	cbz	r0, 801d2be <rcl_action_take_result_response+0x66>
 801d26e:	6820      	ldr	r0, [r4, #0]
 801d270:	3004      	adds	r0, #4
 801d272:	f7fd fcc1 	bl	801abf8 <rcl_client_is_valid>
 801d276:	b310      	cbz	r0, 801d2be <rcl_action_take_result_response+0x66>
 801d278:	6820      	ldr	r0, [r4, #0]
 801d27a:	3008      	adds	r0, #8
 801d27c:	f7fd fcbc 	bl	801abf8 <rcl_client_is_valid>
 801d280:	b1e8      	cbz	r0, 801d2be <rcl_action_take_result_response+0x66>
 801d282:	6820      	ldr	r0, [r4, #0]
 801d284:	300c      	adds	r0, #12
 801d286:	f7fe fd4d 	bl	801bd24 <rcl_subscription_is_valid>
 801d28a:	b1c0      	cbz	r0, 801d2be <rcl_action_take_result_response+0x66>
 801d28c:	6820      	ldr	r0, [r4, #0]
 801d28e:	3010      	adds	r0, #16
 801d290:	f7fe fd48 	bl	801bd24 <rcl_subscription_is_valid>
 801d294:	b198      	cbz	r0, 801d2be <rcl_action_take_result_response+0x66>
 801d296:	b1d5      	cbz	r5, 801d2ce <rcl_action_take_result_response+0x76>
 801d298:	b1ce      	cbz	r6, 801d2ce <rcl_action_take_result_response+0x76>
 801d29a:	6820      	ldr	r0, [r4, #0]
 801d29c:	462a      	mov	r2, r5
 801d29e:	4631      	mov	r1, r6
 801d2a0:	3008      	adds	r0, #8
 801d2a2:	f7fd fc61 	bl	801ab68 <rcl_take_response>
 801d2a6:	b148      	cbz	r0, 801d2bc <rcl_action_take_result_response+0x64>
 801d2a8:	280a      	cmp	r0, #10
 801d2aa:	d007      	beq.n	801d2bc <rcl_action_take_result_response+0x64>
 801d2ac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d2b0:	f640 0337 	movw	r3, #2103	@ 0x837
 801d2b4:	4290      	cmp	r0, r2
 801d2b6:	bf0c      	ite	eq
 801d2b8:	4618      	moveq	r0, r3
 801d2ba:	2001      	movne	r0, #1
 801d2bc:	bd70      	pop	{r4, r5, r6, pc}
 801d2be:	f7f8 f983 	bl	80155c8 <rcutils_reset_error>
 801d2c2:	f640 0036 	movw	r0, #2102	@ 0x836
 801d2c6:	bd70      	pop	{r4, r5, r6, pc}
 801d2c8:	f640 0036 	movw	r0, #2102	@ 0x836
 801d2cc:	bd70      	pop	{r4, r5, r6, pc}
 801d2ce:	200b      	movs	r0, #11
 801d2d0:	bd70      	pop	{r4, r5, r6, pc}
 801d2d2:	f640 0036 	movw	r0, #2102	@ 0x836
 801d2d6:	4770      	bx	lr

0801d2d8 <rcl_action_take_cancel_response>:
 801d2d8:	2800      	cmp	r0, #0
 801d2da:	d03a      	beq.n	801d352 <rcl_action_take_cancel_response+0x7a>
 801d2dc:	b570      	push	{r4, r5, r6, lr}
 801d2de:	4604      	mov	r4, r0
 801d2e0:	6800      	ldr	r0, [r0, #0]
 801d2e2:	b388      	cbz	r0, 801d348 <rcl_action_take_cancel_response+0x70>
 801d2e4:	460e      	mov	r6, r1
 801d2e6:	4615      	mov	r5, r2
 801d2e8:	f7fd fc86 	bl	801abf8 <rcl_client_is_valid>
 801d2ec:	b338      	cbz	r0, 801d33e <rcl_action_take_cancel_response+0x66>
 801d2ee:	6820      	ldr	r0, [r4, #0]
 801d2f0:	3004      	adds	r0, #4
 801d2f2:	f7fd fc81 	bl	801abf8 <rcl_client_is_valid>
 801d2f6:	b310      	cbz	r0, 801d33e <rcl_action_take_cancel_response+0x66>
 801d2f8:	6820      	ldr	r0, [r4, #0]
 801d2fa:	3008      	adds	r0, #8
 801d2fc:	f7fd fc7c 	bl	801abf8 <rcl_client_is_valid>
 801d300:	b1e8      	cbz	r0, 801d33e <rcl_action_take_cancel_response+0x66>
 801d302:	6820      	ldr	r0, [r4, #0]
 801d304:	300c      	adds	r0, #12
 801d306:	f7fe fd0d 	bl	801bd24 <rcl_subscription_is_valid>
 801d30a:	b1c0      	cbz	r0, 801d33e <rcl_action_take_cancel_response+0x66>
 801d30c:	6820      	ldr	r0, [r4, #0]
 801d30e:	3010      	adds	r0, #16
 801d310:	f7fe fd08 	bl	801bd24 <rcl_subscription_is_valid>
 801d314:	b198      	cbz	r0, 801d33e <rcl_action_take_cancel_response+0x66>
 801d316:	b1d5      	cbz	r5, 801d34e <rcl_action_take_cancel_response+0x76>
 801d318:	b1ce      	cbz	r6, 801d34e <rcl_action_take_cancel_response+0x76>
 801d31a:	6820      	ldr	r0, [r4, #0]
 801d31c:	462a      	mov	r2, r5
 801d31e:	4631      	mov	r1, r6
 801d320:	3004      	adds	r0, #4
 801d322:	f7fd fc21 	bl	801ab68 <rcl_take_response>
 801d326:	b148      	cbz	r0, 801d33c <rcl_action_take_cancel_response+0x64>
 801d328:	280a      	cmp	r0, #10
 801d32a:	d007      	beq.n	801d33c <rcl_action_take_cancel_response+0x64>
 801d32c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d330:	f640 0337 	movw	r3, #2103	@ 0x837
 801d334:	4290      	cmp	r0, r2
 801d336:	bf0c      	ite	eq
 801d338:	4618      	moveq	r0, r3
 801d33a:	2001      	movne	r0, #1
 801d33c:	bd70      	pop	{r4, r5, r6, pc}
 801d33e:	f7f8 f943 	bl	80155c8 <rcutils_reset_error>
 801d342:	f640 0036 	movw	r0, #2102	@ 0x836
 801d346:	bd70      	pop	{r4, r5, r6, pc}
 801d348:	f640 0036 	movw	r0, #2102	@ 0x836
 801d34c:	bd70      	pop	{r4, r5, r6, pc}
 801d34e:	200b      	movs	r0, #11
 801d350:	bd70      	pop	{r4, r5, r6, pc}
 801d352:	f640 0036 	movw	r0, #2102	@ 0x836
 801d356:	4770      	bx	lr

0801d358 <rcl_action_take_feedback>:
 801d358:	2800      	cmp	r0, #0
 801d35a:	d038      	beq.n	801d3ce <rcl_action_take_feedback+0x76>
 801d35c:	b530      	push	{r4, r5, lr}
 801d35e:	4604      	mov	r4, r0
 801d360:	6800      	ldr	r0, [r0, #0]
 801d362:	b091      	sub	sp, #68	@ 0x44
 801d364:	b378      	cbz	r0, 801d3c6 <rcl_action_take_feedback+0x6e>
 801d366:	460d      	mov	r5, r1
 801d368:	f7fd fc46 	bl	801abf8 <rcl_client_is_valid>
 801d36c:	b328      	cbz	r0, 801d3ba <rcl_action_take_feedback+0x62>
 801d36e:	6820      	ldr	r0, [r4, #0]
 801d370:	3004      	adds	r0, #4
 801d372:	f7fd fc41 	bl	801abf8 <rcl_client_is_valid>
 801d376:	b300      	cbz	r0, 801d3ba <rcl_action_take_feedback+0x62>
 801d378:	6820      	ldr	r0, [r4, #0]
 801d37a:	3008      	adds	r0, #8
 801d37c:	f7fd fc3c 	bl	801abf8 <rcl_client_is_valid>
 801d380:	b1d8      	cbz	r0, 801d3ba <rcl_action_take_feedback+0x62>
 801d382:	6820      	ldr	r0, [r4, #0]
 801d384:	300c      	adds	r0, #12
 801d386:	f7fe fccd 	bl	801bd24 <rcl_subscription_is_valid>
 801d38a:	b1b0      	cbz	r0, 801d3ba <rcl_action_take_feedback+0x62>
 801d38c:	6820      	ldr	r0, [r4, #0]
 801d38e:	3010      	adds	r0, #16
 801d390:	f7fe fcc8 	bl	801bd24 <rcl_subscription_is_valid>
 801d394:	b188      	cbz	r0, 801d3ba <rcl_action_take_feedback+0x62>
 801d396:	b1ed      	cbz	r5, 801d3d4 <rcl_action_take_feedback+0x7c>
 801d398:	6820      	ldr	r0, [r4, #0]
 801d39a:	2300      	movs	r3, #0
 801d39c:	466a      	mov	r2, sp
 801d39e:	4629      	mov	r1, r5
 801d3a0:	300c      	adds	r0, #12
 801d3a2:	f7fe fc63 	bl	801bc6c <rcl_take>
 801d3a6:	b160      	cbz	r0, 801d3c2 <rcl_action_take_feedback+0x6a>
 801d3a8:	f240 1391 	movw	r3, #401	@ 0x191
 801d3ac:	4298      	cmp	r0, r3
 801d3ae:	d014      	beq.n	801d3da <rcl_action_take_feedback+0x82>
 801d3b0:	280a      	cmp	r0, #10
 801d3b2:	bf18      	it	ne
 801d3b4:	2001      	movne	r0, #1
 801d3b6:	b011      	add	sp, #68	@ 0x44
 801d3b8:	bd30      	pop	{r4, r5, pc}
 801d3ba:	f7f8 f905 	bl	80155c8 <rcutils_reset_error>
 801d3be:	f640 0036 	movw	r0, #2102	@ 0x836
 801d3c2:	b011      	add	sp, #68	@ 0x44
 801d3c4:	bd30      	pop	{r4, r5, pc}
 801d3c6:	f640 0036 	movw	r0, #2102	@ 0x836
 801d3ca:	b011      	add	sp, #68	@ 0x44
 801d3cc:	bd30      	pop	{r4, r5, pc}
 801d3ce:	f640 0036 	movw	r0, #2102	@ 0x836
 801d3d2:	4770      	bx	lr
 801d3d4:	200b      	movs	r0, #11
 801d3d6:	b011      	add	sp, #68	@ 0x44
 801d3d8:	bd30      	pop	{r4, r5, pc}
 801d3da:	f640 0037 	movw	r0, #2103	@ 0x837
 801d3de:	e7f0      	b.n	801d3c2 <rcl_action_take_feedback+0x6a>

0801d3e0 <rcl_action_wait_set_add_action_client>:
 801d3e0:	2800      	cmp	r0, #0
 801d3e2:	d048      	beq.n	801d476 <rcl_action_wait_set_add_action_client+0x96>
 801d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3e6:	460c      	mov	r4, r1
 801d3e8:	2900      	cmp	r1, #0
 801d3ea:	d03c      	beq.n	801d466 <rcl_action_wait_set_add_action_client+0x86>
 801d3ec:	4605      	mov	r5, r0
 801d3ee:	6808      	ldr	r0, [r1, #0]
 801d3f0:	2800      	cmp	r0, #0
 801d3f2:	d038      	beq.n	801d466 <rcl_action_wait_set_add_action_client+0x86>
 801d3f4:	4617      	mov	r7, r2
 801d3f6:	461e      	mov	r6, r3
 801d3f8:	f7fd fbfe 	bl	801abf8 <rcl_client_is_valid>
 801d3fc:	b3b0      	cbz	r0, 801d46c <rcl_action_wait_set_add_action_client+0x8c>
 801d3fe:	6820      	ldr	r0, [r4, #0]
 801d400:	3004      	adds	r0, #4
 801d402:	f7fd fbf9 	bl	801abf8 <rcl_client_is_valid>
 801d406:	b388      	cbz	r0, 801d46c <rcl_action_wait_set_add_action_client+0x8c>
 801d408:	6820      	ldr	r0, [r4, #0]
 801d40a:	3008      	adds	r0, #8
 801d40c:	f7fd fbf4 	bl	801abf8 <rcl_client_is_valid>
 801d410:	b360      	cbz	r0, 801d46c <rcl_action_wait_set_add_action_client+0x8c>
 801d412:	6820      	ldr	r0, [r4, #0]
 801d414:	300c      	adds	r0, #12
 801d416:	f7fe fc85 	bl	801bd24 <rcl_subscription_is_valid>
 801d41a:	b338      	cbz	r0, 801d46c <rcl_action_wait_set_add_action_client+0x8c>
 801d41c:	6820      	ldr	r0, [r4, #0]
 801d41e:	3010      	adds	r0, #16
 801d420:	f7fe fc80 	bl	801bd24 <rcl_subscription_is_valid>
 801d424:	b310      	cbz	r0, 801d46c <rcl_action_wait_set_add_action_client+0x8c>
 801d426:	6821      	ldr	r1, [r4, #0]
 801d428:	4628      	mov	r0, r5
 801d42a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801d42e:	f7ff fcd1 	bl	801cdd4 <rcl_wait_set_add_client>
 801d432:	b9b8      	cbnz	r0, 801d464 <rcl_action_wait_set_add_action_client+0x84>
 801d434:	6821      	ldr	r1, [r4, #0]
 801d436:	4628      	mov	r0, r5
 801d438:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801d43c:	3104      	adds	r1, #4
 801d43e:	f7ff fcc9 	bl	801cdd4 <rcl_wait_set_add_client>
 801d442:	b978      	cbnz	r0, 801d464 <rcl_action_wait_set_add_action_client+0x84>
 801d444:	6821      	ldr	r1, [r4, #0]
 801d446:	4628      	mov	r0, r5
 801d448:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801d44c:	3108      	adds	r1, #8
 801d44e:	f7ff fcc1 	bl	801cdd4 <rcl_wait_set_add_client>
 801d452:	b938      	cbnz	r0, 801d464 <rcl_action_wait_set_add_action_client+0x84>
 801d454:	6821      	ldr	r1, [r4, #0]
 801d456:	4628      	mov	r0, r5
 801d458:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801d45c:	310c      	adds	r1, #12
 801d45e:	f7ff f969 	bl	801c734 <rcl_wait_set_add_subscription>
 801d462:	b158      	cbz	r0, 801d47c <rcl_action_wait_set_add_action_client+0x9c>
 801d464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d466:	f640 0036 	movw	r0, #2102	@ 0x836
 801d46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d46c:	f7f8 f8ac 	bl	80155c8 <rcutils_reset_error>
 801d470:	f640 0036 	movw	r0, #2102	@ 0x836
 801d474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d476:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d47a:	4770      	bx	lr
 801d47c:	6821      	ldr	r1, [r4, #0]
 801d47e:	4628      	mov	r0, r5
 801d480:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801d484:	3110      	adds	r1, #16
 801d486:	f7ff f955 	bl	801c734 <rcl_wait_set_add_subscription>
 801d48a:	2800      	cmp	r0, #0
 801d48c:	d1ea      	bne.n	801d464 <rcl_action_wait_set_add_action_client+0x84>
 801d48e:	b11f      	cbz	r7, 801d498 <rcl_action_wait_set_add_action_client+0xb8>
 801d490:	6823      	ldr	r3, [r4, #0]
 801d492:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801d496:	603b      	str	r3, [r7, #0]
 801d498:	2e00      	cmp	r6, #0
 801d49a:	d0e3      	beq.n	801d464 <rcl_action_wait_set_add_action_client+0x84>
 801d49c:	6823      	ldr	r3, [r4, #0]
 801d49e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801d4a2:	6033      	str	r3, [r6, #0]
 801d4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d4a6:	bf00      	nop

0801d4a8 <rcl_action_client_wait_set_get_entities_ready>:
 801d4a8:	2800      	cmp	r0, #0
 801d4aa:	d050      	beq.n	801d54e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4b0:	460c      	mov	r4, r1
 801d4b2:	2900      	cmp	r1, #0
 801d4b4:	d03e      	beq.n	801d534 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d4b6:	4605      	mov	r5, r0
 801d4b8:	6808      	ldr	r0, [r1, #0]
 801d4ba:	2800      	cmp	r0, #0
 801d4bc:	d03a      	beq.n	801d534 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d4be:	4616      	mov	r6, r2
 801d4c0:	461f      	mov	r7, r3
 801d4c2:	f7fd fb99 	bl	801abf8 <rcl_client_is_valid>
 801d4c6:	2800      	cmp	r0, #0
 801d4c8:	d038      	beq.n	801d53c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d4ca:	6820      	ldr	r0, [r4, #0]
 801d4cc:	3004      	adds	r0, #4
 801d4ce:	f7fd fb93 	bl	801abf8 <rcl_client_is_valid>
 801d4d2:	2800      	cmp	r0, #0
 801d4d4:	d032      	beq.n	801d53c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d4d6:	6820      	ldr	r0, [r4, #0]
 801d4d8:	3008      	adds	r0, #8
 801d4da:	f7fd fb8d 	bl	801abf8 <rcl_client_is_valid>
 801d4de:	b368      	cbz	r0, 801d53c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d4e0:	6820      	ldr	r0, [r4, #0]
 801d4e2:	300c      	adds	r0, #12
 801d4e4:	f7fe fc1e 	bl	801bd24 <rcl_subscription_is_valid>
 801d4e8:	b340      	cbz	r0, 801d53c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d4ea:	6820      	ldr	r0, [r4, #0]
 801d4ec:	3010      	adds	r0, #16
 801d4ee:	f7fe fc19 	bl	801bd24 <rcl_subscription_is_valid>
 801d4f2:	b318      	cbz	r0, 801d53c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d4f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 801d4f8:	2a00      	cmp	r2, #0
 801d4fa:	bf18      	it	ne
 801d4fc:	2b00      	cmpne	r3, #0
 801d4fe:	9b08      	ldr	r3, [sp, #32]
 801d500:	bf0c      	ite	eq
 801d502:	2101      	moveq	r1, #1
 801d504:	2100      	movne	r1, #0
 801d506:	2b00      	cmp	r3, #0
 801d508:	bf08      	it	eq
 801d50a:	f041 0101 	orreq.w	r1, r1, #1
 801d50e:	2f00      	cmp	r7, #0
 801d510:	bf08      	it	eq
 801d512:	f041 0101 	orreq.w	r1, r1, #1
 801d516:	b9b9      	cbnz	r1, 801d548 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d518:	b1b6      	cbz	r6, 801d548 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d51a:	6823      	ldr	r3, [r4, #0]
 801d51c:	686c      	ldr	r4, [r5, #4]
 801d51e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801d522:	428a      	cmp	r2, r1
 801d524:	4610      	mov	r0, r2
 801d526:	bf38      	it	cc
 801d528:	4608      	movcc	r0, r1
 801d52a:	4284      	cmp	r4, r0
 801d52c:	d812      	bhi.n	801d554 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d52e:	2001      	movs	r0, #1
 801d530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d534:	f640 0036 	movw	r0, #2102	@ 0x836
 801d538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d53c:	f7f8 f844 	bl	80155c8 <rcutils_reset_error>
 801d540:	f640 0036 	movw	r0, #2102	@ 0x836
 801d544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d548:	200b      	movs	r0, #11
 801d54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d54e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d552:	4770      	bx	lr
 801d554:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 801d558:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801d55c:	45f0      	cmp	r8, lr
 801d55e:	4640      	mov	r0, r8
 801d560:	69ec      	ldr	r4, [r5, #28]
 801d562:	bf38      	it	cc
 801d564:	4670      	movcc	r0, lr
 801d566:	4560      	cmp	r0, ip
 801d568:	bf38      	it	cc
 801d56a:	4660      	movcc	r0, ip
 801d56c:	4284      	cmp	r4, r0
 801d56e:	d9de      	bls.n	801d52e <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d570:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d574:	682d      	ldr	r5, [r5, #0]
 801d576:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d57a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d57e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d582:	1a18      	subs	r0, r3, r0
 801d584:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d588:	f103 0c0c 	add.w	ip, r3, #12
 801d58c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d590:	fab0 f080 	clz	r0, r0
 801d594:	eba5 050c 	sub.w	r5, r5, ip
 801d598:	0940      	lsrs	r0, r0, #5
 801d59a:	fab5 f585 	clz	r5, r5
 801d59e:	096d      	lsrs	r5, r5, #5
 801d5a0:	7035      	strb	r5, [r6, #0]
 801d5a2:	f103 0510 	add.w	r5, r3, #16
 801d5a6:	1b64      	subs	r4, r4, r5
 801d5a8:	9d08      	ldr	r5, [sp, #32]
 801d5aa:	fab4 f484 	clz	r4, r4
 801d5ae:	0964      	lsrs	r4, r4, #5
 801d5b0:	703c      	strb	r4, [r7, #0]
 801d5b2:	1d1c      	adds	r4, r3, #4
 801d5b4:	3308      	adds	r3, #8
 801d5b6:	7028      	strb	r0, [r5, #0]
 801d5b8:	1b09      	subs	r1, r1, r4
 801d5ba:	2000      	movs	r0, #0
 801d5bc:	1ad3      	subs	r3, r2, r3
 801d5be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d5c0:	fab1 f181 	clz	r1, r1
 801d5c4:	fab3 f383 	clz	r3, r3
 801d5c8:	0949      	lsrs	r1, r1, #5
 801d5ca:	095b      	lsrs	r3, r3, #5
 801d5cc:	7011      	strb	r1, [r2, #0]
 801d5ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d5d0:	7013      	strb	r3, [r2, #0]
 801d5d2:	e7b1      	b.n	801d538 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d5d4 <rcl_action_take_goal_request>:
 801d5d4:	2800      	cmp	r0, #0
 801d5d6:	d039      	beq.n	801d64c <rcl_action_take_goal_request+0x78>
 801d5d8:	b570      	push	{r4, r5, r6, lr}
 801d5da:	4604      	mov	r4, r0
 801d5dc:	6800      	ldr	r0, [r0, #0]
 801d5de:	b380      	cbz	r0, 801d642 <rcl_action_take_goal_request+0x6e>
 801d5e0:	460e      	mov	r6, r1
 801d5e2:	4615      	mov	r5, r2
 801d5e4:	f7fe fa56 	bl	801ba94 <rcl_service_is_valid>
 801d5e8:	b330      	cbz	r0, 801d638 <rcl_action_take_goal_request+0x64>
 801d5ea:	6820      	ldr	r0, [r4, #0]
 801d5ec:	3004      	adds	r0, #4
 801d5ee:	f7fe fa51 	bl	801ba94 <rcl_service_is_valid>
 801d5f2:	b308      	cbz	r0, 801d638 <rcl_action_take_goal_request+0x64>
 801d5f4:	6820      	ldr	r0, [r4, #0]
 801d5f6:	3008      	adds	r0, #8
 801d5f8:	f7fe fa4c 	bl	801ba94 <rcl_service_is_valid>
 801d5fc:	b1e0      	cbz	r0, 801d638 <rcl_action_take_goal_request+0x64>
 801d5fe:	6820      	ldr	r0, [r4, #0]
 801d600:	300c      	adds	r0, #12
 801d602:	f7f6 ff85 	bl	8014510 <rcl_publisher_is_valid>
 801d606:	b1b8      	cbz	r0, 801d638 <rcl_action_take_goal_request+0x64>
 801d608:	6820      	ldr	r0, [r4, #0]
 801d60a:	3010      	adds	r0, #16
 801d60c:	f7f6 ff80 	bl	8014510 <rcl_publisher_is_valid>
 801d610:	b190      	cbz	r0, 801d638 <rcl_action_take_goal_request+0x64>
 801d612:	b1cd      	cbz	r5, 801d648 <rcl_action_take_goal_request+0x74>
 801d614:	b1c6      	cbz	r6, 801d648 <rcl_action_take_goal_request+0x74>
 801d616:	462a      	mov	r2, r5
 801d618:	4631      	mov	r1, r6
 801d61a:	6820      	ldr	r0, [r4, #0]
 801d61c:	f7fe f9e2 	bl	801b9e4 <rcl_take_request>
 801d620:	b148      	cbz	r0, 801d636 <rcl_action_take_goal_request+0x62>
 801d622:	280a      	cmp	r0, #10
 801d624:	d007      	beq.n	801d636 <rcl_action_take_goal_request+0x62>
 801d626:	f240 2259 	movw	r2, #601	@ 0x259
 801d62a:	f640 0399 	movw	r3, #2201	@ 0x899
 801d62e:	4290      	cmp	r0, r2
 801d630:	bf0c      	ite	eq
 801d632:	4618      	moveq	r0, r3
 801d634:	2001      	movne	r0, #1
 801d636:	bd70      	pop	{r4, r5, r6, pc}
 801d638:	f7f7 ffc6 	bl	80155c8 <rcutils_reset_error>
 801d63c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d640:	bd70      	pop	{r4, r5, r6, pc}
 801d642:	f640 0098 	movw	r0, #2200	@ 0x898
 801d646:	bd70      	pop	{r4, r5, r6, pc}
 801d648:	200b      	movs	r0, #11
 801d64a:	bd70      	pop	{r4, r5, r6, pc}
 801d64c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d650:	4770      	bx	lr
 801d652:	bf00      	nop

0801d654 <rcl_action_send_goal_response>:
 801d654:	b390      	cbz	r0, 801d6bc <rcl_action_send_goal_response+0x68>
 801d656:	b570      	push	{r4, r5, r6, lr}
 801d658:	4604      	mov	r4, r0
 801d65a:	6800      	ldr	r0, [r0, #0]
 801d65c:	b348      	cbz	r0, 801d6b2 <rcl_action_send_goal_response+0x5e>
 801d65e:	460e      	mov	r6, r1
 801d660:	4615      	mov	r5, r2
 801d662:	f7fe fa17 	bl	801ba94 <rcl_service_is_valid>
 801d666:	b1f8      	cbz	r0, 801d6a8 <rcl_action_send_goal_response+0x54>
 801d668:	6820      	ldr	r0, [r4, #0]
 801d66a:	3004      	adds	r0, #4
 801d66c:	f7fe fa12 	bl	801ba94 <rcl_service_is_valid>
 801d670:	b1d0      	cbz	r0, 801d6a8 <rcl_action_send_goal_response+0x54>
 801d672:	6820      	ldr	r0, [r4, #0]
 801d674:	3008      	adds	r0, #8
 801d676:	f7fe fa0d 	bl	801ba94 <rcl_service_is_valid>
 801d67a:	b1a8      	cbz	r0, 801d6a8 <rcl_action_send_goal_response+0x54>
 801d67c:	6820      	ldr	r0, [r4, #0]
 801d67e:	300c      	adds	r0, #12
 801d680:	f7f6 ff46 	bl	8014510 <rcl_publisher_is_valid>
 801d684:	b180      	cbz	r0, 801d6a8 <rcl_action_send_goal_response+0x54>
 801d686:	6820      	ldr	r0, [r4, #0]
 801d688:	3010      	adds	r0, #16
 801d68a:	f7f6 ff41 	bl	8014510 <rcl_publisher_is_valid>
 801d68e:	b158      	cbz	r0, 801d6a8 <rcl_action_send_goal_response+0x54>
 801d690:	b195      	cbz	r5, 801d6b8 <rcl_action_send_goal_response+0x64>
 801d692:	b18e      	cbz	r6, 801d6b8 <rcl_action_send_goal_response+0x64>
 801d694:	462a      	mov	r2, r5
 801d696:	4631      	mov	r1, r6
 801d698:	6820      	ldr	r0, [r4, #0]
 801d69a:	f7fe f9e3 	bl	801ba64 <rcl_send_response>
 801d69e:	b110      	cbz	r0, 801d6a6 <rcl_action_send_goal_response+0x52>
 801d6a0:	2802      	cmp	r0, #2
 801d6a2:	bf18      	it	ne
 801d6a4:	2001      	movne	r0, #1
 801d6a6:	bd70      	pop	{r4, r5, r6, pc}
 801d6a8:	f7f7 ff8e 	bl	80155c8 <rcutils_reset_error>
 801d6ac:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6b0:	bd70      	pop	{r4, r5, r6, pc}
 801d6b2:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6b6:	bd70      	pop	{r4, r5, r6, pc}
 801d6b8:	200b      	movs	r0, #11
 801d6ba:	bd70      	pop	{r4, r5, r6, pc}
 801d6bc:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6c0:	4770      	bx	lr
 801d6c2:	bf00      	nop

0801d6c4 <rcl_action_take_result_request>:
 801d6c4:	2800      	cmp	r0, #0
 801d6c6:	d03a      	beq.n	801d73e <rcl_action_take_result_request+0x7a>
 801d6c8:	b570      	push	{r4, r5, r6, lr}
 801d6ca:	4604      	mov	r4, r0
 801d6cc:	6800      	ldr	r0, [r0, #0]
 801d6ce:	b388      	cbz	r0, 801d734 <rcl_action_take_result_request+0x70>
 801d6d0:	460e      	mov	r6, r1
 801d6d2:	4615      	mov	r5, r2
 801d6d4:	f7fe f9de 	bl	801ba94 <rcl_service_is_valid>
 801d6d8:	b338      	cbz	r0, 801d72a <rcl_action_take_result_request+0x66>
 801d6da:	6820      	ldr	r0, [r4, #0]
 801d6dc:	3004      	adds	r0, #4
 801d6de:	f7fe f9d9 	bl	801ba94 <rcl_service_is_valid>
 801d6e2:	b310      	cbz	r0, 801d72a <rcl_action_take_result_request+0x66>
 801d6e4:	6820      	ldr	r0, [r4, #0]
 801d6e6:	3008      	adds	r0, #8
 801d6e8:	f7fe f9d4 	bl	801ba94 <rcl_service_is_valid>
 801d6ec:	b1e8      	cbz	r0, 801d72a <rcl_action_take_result_request+0x66>
 801d6ee:	6820      	ldr	r0, [r4, #0]
 801d6f0:	300c      	adds	r0, #12
 801d6f2:	f7f6 ff0d 	bl	8014510 <rcl_publisher_is_valid>
 801d6f6:	b1c0      	cbz	r0, 801d72a <rcl_action_take_result_request+0x66>
 801d6f8:	6820      	ldr	r0, [r4, #0]
 801d6fa:	3010      	adds	r0, #16
 801d6fc:	f7f6 ff08 	bl	8014510 <rcl_publisher_is_valid>
 801d700:	b198      	cbz	r0, 801d72a <rcl_action_take_result_request+0x66>
 801d702:	b1d5      	cbz	r5, 801d73a <rcl_action_take_result_request+0x76>
 801d704:	b1ce      	cbz	r6, 801d73a <rcl_action_take_result_request+0x76>
 801d706:	6820      	ldr	r0, [r4, #0]
 801d708:	462a      	mov	r2, r5
 801d70a:	4631      	mov	r1, r6
 801d70c:	3008      	adds	r0, #8
 801d70e:	f7fe f969 	bl	801b9e4 <rcl_take_request>
 801d712:	b148      	cbz	r0, 801d728 <rcl_action_take_result_request+0x64>
 801d714:	280a      	cmp	r0, #10
 801d716:	d007      	beq.n	801d728 <rcl_action_take_result_request+0x64>
 801d718:	f240 2259 	movw	r2, #601	@ 0x259
 801d71c:	f640 0399 	movw	r3, #2201	@ 0x899
 801d720:	4290      	cmp	r0, r2
 801d722:	bf0c      	ite	eq
 801d724:	4618      	moveq	r0, r3
 801d726:	2001      	movne	r0, #1
 801d728:	bd70      	pop	{r4, r5, r6, pc}
 801d72a:	f7f7 ff4d 	bl	80155c8 <rcutils_reset_error>
 801d72e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d732:	bd70      	pop	{r4, r5, r6, pc}
 801d734:	f640 0098 	movw	r0, #2200	@ 0x898
 801d738:	bd70      	pop	{r4, r5, r6, pc}
 801d73a:	200b      	movs	r0, #11
 801d73c:	bd70      	pop	{r4, r5, r6, pc}
 801d73e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d742:	4770      	bx	lr

0801d744 <rcl_action_take_cancel_request>:
 801d744:	2800      	cmp	r0, #0
 801d746:	d03a      	beq.n	801d7be <rcl_action_take_cancel_request+0x7a>
 801d748:	b570      	push	{r4, r5, r6, lr}
 801d74a:	4604      	mov	r4, r0
 801d74c:	6800      	ldr	r0, [r0, #0]
 801d74e:	b388      	cbz	r0, 801d7b4 <rcl_action_take_cancel_request+0x70>
 801d750:	460e      	mov	r6, r1
 801d752:	4615      	mov	r5, r2
 801d754:	f7fe f99e 	bl	801ba94 <rcl_service_is_valid>
 801d758:	b338      	cbz	r0, 801d7aa <rcl_action_take_cancel_request+0x66>
 801d75a:	6820      	ldr	r0, [r4, #0]
 801d75c:	3004      	adds	r0, #4
 801d75e:	f7fe f999 	bl	801ba94 <rcl_service_is_valid>
 801d762:	b310      	cbz	r0, 801d7aa <rcl_action_take_cancel_request+0x66>
 801d764:	6820      	ldr	r0, [r4, #0]
 801d766:	3008      	adds	r0, #8
 801d768:	f7fe f994 	bl	801ba94 <rcl_service_is_valid>
 801d76c:	b1e8      	cbz	r0, 801d7aa <rcl_action_take_cancel_request+0x66>
 801d76e:	6820      	ldr	r0, [r4, #0]
 801d770:	300c      	adds	r0, #12
 801d772:	f7f6 fecd 	bl	8014510 <rcl_publisher_is_valid>
 801d776:	b1c0      	cbz	r0, 801d7aa <rcl_action_take_cancel_request+0x66>
 801d778:	6820      	ldr	r0, [r4, #0]
 801d77a:	3010      	adds	r0, #16
 801d77c:	f7f6 fec8 	bl	8014510 <rcl_publisher_is_valid>
 801d780:	b198      	cbz	r0, 801d7aa <rcl_action_take_cancel_request+0x66>
 801d782:	b1d5      	cbz	r5, 801d7ba <rcl_action_take_cancel_request+0x76>
 801d784:	b1ce      	cbz	r6, 801d7ba <rcl_action_take_cancel_request+0x76>
 801d786:	6820      	ldr	r0, [r4, #0]
 801d788:	462a      	mov	r2, r5
 801d78a:	4631      	mov	r1, r6
 801d78c:	3004      	adds	r0, #4
 801d78e:	f7fe f929 	bl	801b9e4 <rcl_take_request>
 801d792:	b148      	cbz	r0, 801d7a8 <rcl_action_take_cancel_request+0x64>
 801d794:	280a      	cmp	r0, #10
 801d796:	d007      	beq.n	801d7a8 <rcl_action_take_cancel_request+0x64>
 801d798:	f240 2259 	movw	r2, #601	@ 0x259
 801d79c:	f640 0399 	movw	r3, #2201	@ 0x899
 801d7a0:	4290      	cmp	r0, r2
 801d7a2:	bf0c      	ite	eq
 801d7a4:	4618      	moveq	r0, r3
 801d7a6:	2001      	movne	r0, #1
 801d7a8:	bd70      	pop	{r4, r5, r6, pc}
 801d7aa:	f7f7 ff0d 	bl	80155c8 <rcutils_reset_error>
 801d7ae:	f640 0098 	movw	r0, #2200	@ 0x898
 801d7b2:	bd70      	pop	{r4, r5, r6, pc}
 801d7b4:	f640 0098 	movw	r0, #2200	@ 0x898
 801d7b8:	bd70      	pop	{r4, r5, r6, pc}
 801d7ba:	200b      	movs	r0, #11
 801d7bc:	bd70      	pop	{r4, r5, r6, pc}
 801d7be:	f640 0098 	movw	r0, #2200	@ 0x898
 801d7c2:	4770      	bx	lr

0801d7c4 <rcl_action_send_cancel_response>:
 801d7c4:	b398      	cbz	r0, 801d82e <rcl_action_send_cancel_response+0x6a>
 801d7c6:	b570      	push	{r4, r5, r6, lr}
 801d7c8:	4604      	mov	r4, r0
 801d7ca:	6800      	ldr	r0, [r0, #0]
 801d7cc:	b350      	cbz	r0, 801d824 <rcl_action_send_cancel_response+0x60>
 801d7ce:	460e      	mov	r6, r1
 801d7d0:	4615      	mov	r5, r2
 801d7d2:	f7fe f95f 	bl	801ba94 <rcl_service_is_valid>
 801d7d6:	b300      	cbz	r0, 801d81a <rcl_action_send_cancel_response+0x56>
 801d7d8:	6820      	ldr	r0, [r4, #0]
 801d7da:	3004      	adds	r0, #4
 801d7dc:	f7fe f95a 	bl	801ba94 <rcl_service_is_valid>
 801d7e0:	b1d8      	cbz	r0, 801d81a <rcl_action_send_cancel_response+0x56>
 801d7e2:	6820      	ldr	r0, [r4, #0]
 801d7e4:	3008      	adds	r0, #8
 801d7e6:	f7fe f955 	bl	801ba94 <rcl_service_is_valid>
 801d7ea:	b1b0      	cbz	r0, 801d81a <rcl_action_send_cancel_response+0x56>
 801d7ec:	6820      	ldr	r0, [r4, #0]
 801d7ee:	300c      	adds	r0, #12
 801d7f0:	f7f6 fe8e 	bl	8014510 <rcl_publisher_is_valid>
 801d7f4:	b188      	cbz	r0, 801d81a <rcl_action_send_cancel_response+0x56>
 801d7f6:	6820      	ldr	r0, [r4, #0]
 801d7f8:	3010      	adds	r0, #16
 801d7fa:	f7f6 fe89 	bl	8014510 <rcl_publisher_is_valid>
 801d7fe:	b160      	cbz	r0, 801d81a <rcl_action_send_cancel_response+0x56>
 801d800:	b19d      	cbz	r5, 801d82a <rcl_action_send_cancel_response+0x66>
 801d802:	b196      	cbz	r6, 801d82a <rcl_action_send_cancel_response+0x66>
 801d804:	6820      	ldr	r0, [r4, #0]
 801d806:	462a      	mov	r2, r5
 801d808:	4631      	mov	r1, r6
 801d80a:	3004      	adds	r0, #4
 801d80c:	f7fe f92a 	bl	801ba64 <rcl_send_response>
 801d810:	b110      	cbz	r0, 801d818 <rcl_action_send_cancel_response+0x54>
 801d812:	2802      	cmp	r0, #2
 801d814:	bf18      	it	ne
 801d816:	2001      	movne	r0, #1
 801d818:	bd70      	pop	{r4, r5, r6, pc}
 801d81a:	f7f7 fed5 	bl	80155c8 <rcutils_reset_error>
 801d81e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d822:	bd70      	pop	{r4, r5, r6, pc}
 801d824:	f640 0098 	movw	r0, #2200	@ 0x898
 801d828:	bd70      	pop	{r4, r5, r6, pc}
 801d82a:	200b      	movs	r0, #11
 801d82c:	bd70      	pop	{r4, r5, r6, pc}
 801d82e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d832:	4770      	bx	lr

0801d834 <rcl_action_wait_set_add_action_server>:
 801d834:	2800      	cmp	r0, #0
 801d836:	d04d      	beq.n	801d8d4 <rcl_action_wait_set_add_action_server+0xa0>
 801d838:	b570      	push	{r4, r5, r6, lr}
 801d83a:	460c      	mov	r4, r1
 801d83c:	b159      	cbz	r1, 801d856 <rcl_action_wait_set_add_action_server+0x22>
 801d83e:	4605      	mov	r5, r0
 801d840:	6808      	ldr	r0, [r1, #0]
 801d842:	b140      	cbz	r0, 801d856 <rcl_action_wait_set_add_action_server+0x22>
 801d844:	4616      	mov	r6, r2
 801d846:	f7fe f925 	bl	801ba94 <rcl_service_is_valid>
 801d84a:	b120      	cbz	r0, 801d856 <rcl_action_wait_set_add_action_server+0x22>
 801d84c:	6820      	ldr	r0, [r4, #0]
 801d84e:	3004      	adds	r0, #4
 801d850:	f7fe f920 	bl	801ba94 <rcl_service_is_valid>
 801d854:	b910      	cbnz	r0, 801d85c <rcl_action_wait_set_add_action_server+0x28>
 801d856:	f640 0098 	movw	r0, #2200	@ 0x898
 801d85a:	bd70      	pop	{r4, r5, r6, pc}
 801d85c:	6820      	ldr	r0, [r4, #0]
 801d85e:	3008      	adds	r0, #8
 801d860:	f7fe f918 	bl	801ba94 <rcl_service_is_valid>
 801d864:	2800      	cmp	r0, #0
 801d866:	d0f6      	beq.n	801d856 <rcl_action_wait_set_add_action_server+0x22>
 801d868:	6820      	ldr	r0, [r4, #0]
 801d86a:	300c      	adds	r0, #12
 801d86c:	f7f6 fe68 	bl	8014540 <rcl_publisher_is_valid_except_context>
 801d870:	2800      	cmp	r0, #0
 801d872:	d0f0      	beq.n	801d856 <rcl_action_wait_set_add_action_server+0x22>
 801d874:	6820      	ldr	r0, [r4, #0]
 801d876:	3010      	adds	r0, #16
 801d878:	f7f6 fe62 	bl	8014540 <rcl_publisher_is_valid_except_context>
 801d87c:	2800      	cmp	r0, #0
 801d87e:	d0ea      	beq.n	801d856 <rcl_action_wait_set_add_action_server+0x22>
 801d880:	6821      	ldr	r1, [r4, #0]
 801d882:	4628      	mov	r0, r5
 801d884:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801d888:	f7ff fad0 	bl	801ce2c <rcl_wait_set_add_service>
 801d88c:	2800      	cmp	r0, #0
 801d88e:	d1e4      	bne.n	801d85a <rcl_action_wait_set_add_action_server+0x26>
 801d890:	6821      	ldr	r1, [r4, #0]
 801d892:	4628      	mov	r0, r5
 801d894:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801d898:	3104      	adds	r1, #4
 801d89a:	f7ff fac7 	bl	801ce2c <rcl_wait_set_add_service>
 801d89e:	2800      	cmp	r0, #0
 801d8a0:	d1db      	bne.n	801d85a <rcl_action_wait_set_add_action_server+0x26>
 801d8a2:	6821      	ldr	r1, [r4, #0]
 801d8a4:	4628      	mov	r0, r5
 801d8a6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801d8aa:	3108      	adds	r1, #8
 801d8ac:	f7ff fabe 	bl	801ce2c <rcl_wait_set_add_service>
 801d8b0:	2800      	cmp	r0, #0
 801d8b2:	d1d2      	bne.n	801d85a <rcl_action_wait_set_add_action_server+0x26>
 801d8b4:	6821      	ldr	r1, [r4, #0]
 801d8b6:	4628      	mov	r0, r5
 801d8b8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801d8bc:	3114      	adds	r1, #20
 801d8be:	f7ff fa59 	bl	801cd74 <rcl_wait_set_add_timer>
 801d8c2:	2800      	cmp	r0, #0
 801d8c4:	d1c9      	bne.n	801d85a <rcl_action_wait_set_add_action_server+0x26>
 801d8c6:	2e00      	cmp	r6, #0
 801d8c8:	d0c7      	beq.n	801d85a <rcl_action_wait_set_add_action_server+0x26>
 801d8ca:	6823      	ldr	r3, [r4, #0]
 801d8cc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801d8d0:	6033      	str	r3, [r6, #0]
 801d8d2:	bd70      	pop	{r4, r5, r6, pc}
 801d8d4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d8d8:	4770      	bx	lr
 801d8da:	bf00      	nop

0801d8dc <rcl_action_server_wait_set_get_entities_ready>:
 801d8dc:	2800      	cmp	r0, #0
 801d8de:	d067      	beq.n	801d9b0 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8e4:	460c      	mov	r4, r1
 801d8e6:	b161      	cbz	r1, 801d902 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d8e8:	4605      	mov	r5, r0
 801d8ea:	6808      	ldr	r0, [r1, #0]
 801d8ec:	b148      	cbz	r0, 801d902 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d8ee:	4616      	mov	r6, r2
 801d8f0:	4698      	mov	r8, r3
 801d8f2:	f7fe f8cf 	bl	801ba94 <rcl_service_is_valid>
 801d8f6:	b120      	cbz	r0, 801d902 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d8f8:	6820      	ldr	r0, [r4, #0]
 801d8fa:	3004      	adds	r0, #4
 801d8fc:	f7fe f8ca 	bl	801ba94 <rcl_service_is_valid>
 801d900:	b918      	cbnz	r0, 801d90a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d902:	f640 0098 	movw	r0, #2200	@ 0x898
 801d906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d90a:	6820      	ldr	r0, [r4, #0]
 801d90c:	3008      	adds	r0, #8
 801d90e:	f7fe f8c1 	bl	801ba94 <rcl_service_is_valid>
 801d912:	2800      	cmp	r0, #0
 801d914:	d0f5      	beq.n	801d902 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d916:	6820      	ldr	r0, [r4, #0]
 801d918:	300c      	adds	r0, #12
 801d91a:	f7f6 fe11 	bl	8014540 <rcl_publisher_is_valid_except_context>
 801d91e:	2800      	cmp	r0, #0
 801d920:	d0ef      	beq.n	801d902 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d922:	6820      	ldr	r0, [r4, #0]
 801d924:	3010      	adds	r0, #16
 801d926:	f7f6 fe0b 	bl	8014540 <rcl_publisher_is_valid_except_context>
 801d92a:	2800      	cmp	r0, #0
 801d92c:	d0e9      	beq.n	801d902 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d92e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d932:	2a00      	cmp	r2, #0
 801d934:	bf18      	it	ne
 801d936:	2b00      	cmpne	r3, #0
 801d938:	bf0c      	ite	eq
 801d93a:	2101      	moveq	r1, #1
 801d93c:	2100      	movne	r1, #0
 801d93e:	f1b8 0f00 	cmp.w	r8, #0
 801d942:	bf08      	it	eq
 801d944:	f041 0101 	orreq.w	r1, r1, #1
 801d948:	bba9      	cbnz	r1, 801d9b6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d94a:	b3a6      	cbz	r6, 801d9b6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d94c:	6821      	ldr	r1, [r4, #0]
 801d94e:	2000      	movs	r0, #0
 801d950:	692c      	ldr	r4, [r5, #16]
 801d952:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801d956:	6a2f      	ldr	r7, [r5, #32]
 801d958:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d95c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 801d960:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801d964:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d968:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d96c:	1a64      	subs	r4, r4, r1
 801d96e:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801d972:	fab4 f484 	clz	r4, r4
 801d976:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d97a:	0964      	lsrs	r4, r4, #5
 801d97c:	7034      	strb	r4, [r6, #0]
 801d97e:	1d0c      	adds	r4, r1, #4
 801d980:	1b2c      	subs	r4, r5, r4
 801d982:	fab4 f484 	clz	r4, r4
 801d986:	0964      	lsrs	r4, r4, #5
 801d988:	f888 4000 	strb.w	r4, [r8]
 801d98c:	f101 0408 	add.w	r4, r1, #8
 801d990:	1b1b      	subs	r3, r3, r4
 801d992:	9c06      	ldr	r4, [sp, #24]
 801d994:	fab3 f383 	clz	r3, r3
 801d998:	095b      	lsrs	r3, r3, #5
 801d99a:	7023      	strb	r3, [r4, #0]
 801d99c:	f101 0314 	add.w	r3, r1, #20
 801d9a0:	1ad3      	subs	r3, r2, r3
 801d9a2:	9a07      	ldr	r2, [sp, #28]
 801d9a4:	fab3 f383 	clz	r3, r3
 801d9a8:	095b      	lsrs	r3, r3, #5
 801d9aa:	7013      	strb	r3, [r2, #0]
 801d9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9b0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d9b4:	4770      	bx	lr
 801d9b6:	200b      	movs	r0, #11
 801d9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d9bc <_execute_event_handler>:
 801d9bc:	2002      	movs	r0, #2
 801d9be:	4770      	bx	lr

0801d9c0 <_cancel_goal_event_handler>:
 801d9c0:	2003      	movs	r0, #3
 801d9c2:	4770      	bx	lr

0801d9c4 <_succeed_event_handler>:
 801d9c4:	2004      	movs	r0, #4
 801d9c6:	4770      	bx	lr

0801d9c8 <_abort_event_handler>:
 801d9c8:	2006      	movs	r0, #6
 801d9ca:	4770      	bx	lr

0801d9cc <_canceled_event_handler>:
 801d9cc:	2005      	movs	r0, #5
 801d9ce:	4770      	bx	lr

0801d9d0 <rcl_action_transition_goal_state>:
 801d9d0:	b2c2      	uxtb	r2, r0
 801d9d2:	2a06      	cmp	r2, #6
 801d9d4:	d810      	bhi.n	801d9f8 <rcl_action_transition_goal_state+0x28>
 801d9d6:	2904      	cmp	r1, #4
 801d9d8:	d80e      	bhi.n	801d9f8 <rcl_action_transition_goal_state+0x28>
 801d9da:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d9de:	b410      	push	{r4}
 801d9e0:	1853      	adds	r3, r2, r1
 801d9e2:	4c06      	ldr	r4, [pc, #24]	@ (801d9fc <rcl_action_transition_goal_state+0x2c>)
 801d9e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d9e8:	b113      	cbz	r3, 801d9f0 <rcl_action_transition_goal_state+0x20>
 801d9ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9ee:	4718      	bx	r3
 801d9f0:	2000      	movs	r0, #0
 801d9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9f6:	4770      	bx	lr
 801d9f8:	2000      	movs	r0, #0
 801d9fa:	4770      	bx	lr
 801d9fc:	080254c0 	.word	0x080254c0

0801da00 <rcl_action_get_zero_initialized_cancel_response>:
 801da00:	b510      	push	{r4, lr}
 801da02:	4c07      	ldr	r4, [pc, #28]	@ (801da20 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801da04:	4686      	mov	lr, r0
 801da06:	4684      	mov	ip, r0
 801da08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801da0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801da0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801da10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801da14:	6823      	ldr	r3, [r4, #0]
 801da16:	4670      	mov	r0, lr
 801da18:	f8cc 3000 	str.w	r3, [ip]
 801da1c:	bd10      	pop	{r4, pc}
 801da1e:	bf00      	nop
 801da20:	0802554c 	.word	0x0802554c

0801da24 <rclc_action_send_result_request>:
 801da24:	b1d0      	cbz	r0, 801da5c <rclc_action_send_result_request+0x38>
 801da26:	4684      	mov	ip, r0
 801da28:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801da2c:	b500      	push	{lr}
 801da2e:	b087      	sub	sp, #28
 801da30:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801da34:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801da38:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801da3c:	f10d 0e08 	add.w	lr, sp, #8
 801da40:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801da44:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801da48:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801da4c:	a902      	add	r1, sp, #8
 801da4e:	3010      	adds	r0, #16
 801da50:	f7ff fbca 	bl	801d1e8 <rcl_action_send_result_request>
 801da54:	b920      	cbnz	r0, 801da60 <rclc_action_send_result_request+0x3c>
 801da56:	b007      	add	sp, #28
 801da58:	f85d fb04 	ldr.w	pc, [sp], #4
 801da5c:	200b      	movs	r0, #11
 801da5e:	4770      	bx	lr
 801da60:	9001      	str	r0, [sp, #4]
 801da62:	f7f7 fdb1 	bl	80155c8 <rcutils_reset_error>
 801da66:	9801      	ldr	r0, [sp, #4]
 801da68:	b007      	add	sp, #28
 801da6a:	f85d fb04 	ldr.w	pc, [sp], #4
 801da6e:	bf00      	nop

0801da70 <rclc_action_take_goal_handle>:
 801da70:	b160      	cbz	r0, 801da8c <rclc_action_take_goal_handle+0x1c>
 801da72:	6883      	ldr	r3, [r0, #8]
 801da74:	b143      	cbz	r3, 801da88 <rclc_action_take_goal_handle+0x18>
 801da76:	6819      	ldr	r1, [r3, #0]
 801da78:	2200      	movs	r2, #0
 801da7a:	6081      	str	r1, [r0, #8]
 801da7c:	721a      	strb	r2, [r3, #8]
 801da7e:	68c1      	ldr	r1, [r0, #12]
 801da80:	621a      	str	r2, [r3, #32]
 801da82:	849a      	strh	r2, [r3, #36]	@ 0x24
 801da84:	6019      	str	r1, [r3, #0]
 801da86:	60c3      	str	r3, [r0, #12]
 801da88:	4618      	mov	r0, r3
 801da8a:	4770      	bx	lr
 801da8c:	4603      	mov	r3, r0
 801da8e:	e7fb      	b.n	801da88 <rclc_action_take_goal_handle+0x18>

0801da90 <rclc_action_remove_used_goal_handle>:
 801da90:	b180      	cbz	r0, 801dab4 <rclc_action_remove_used_goal_handle+0x24>
 801da92:	b179      	cbz	r1, 801dab4 <rclc_action_remove_used_goal_handle+0x24>
 801da94:	68c3      	ldr	r3, [r0, #12]
 801da96:	4299      	cmp	r1, r3
 801da98:	d00d      	beq.n	801dab6 <rclc_action_remove_used_goal_handle+0x26>
 801da9a:	b12b      	cbz	r3, 801daa8 <rclc_action_remove_used_goal_handle+0x18>
 801da9c:	681a      	ldr	r2, [r3, #0]
 801da9e:	4291      	cmp	r1, r2
 801daa0:	d003      	beq.n	801daaa <rclc_action_remove_used_goal_handle+0x1a>
 801daa2:	4613      	mov	r3, r2
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	d1f9      	bne.n	801da9c <rclc_action_remove_used_goal_handle+0xc>
 801daa8:	4770      	bx	lr
 801daaa:	680a      	ldr	r2, [r1, #0]
 801daac:	601a      	str	r2, [r3, #0]
 801daae:	6883      	ldr	r3, [r0, #8]
 801dab0:	600b      	str	r3, [r1, #0]
 801dab2:	6081      	str	r1, [r0, #8]
 801dab4:	4770      	bx	lr
 801dab6:	680b      	ldr	r3, [r1, #0]
 801dab8:	60c3      	str	r3, [r0, #12]
 801daba:	e7f8      	b.n	801daae <rclc_action_remove_used_goal_handle+0x1e>

0801dabc <rclc_action_find_goal_handle_by_uuid>:
 801dabc:	b538      	push	{r3, r4, r5, lr}
 801dabe:	b181      	cbz	r1, 801dae2 <rclc_action_find_goal_handle_by_uuid+0x26>
 801dac0:	b178      	cbz	r0, 801dae2 <rclc_action_find_goal_handle_by_uuid+0x26>
 801dac2:	68c4      	ldr	r4, [r0, #12]
 801dac4:	460d      	mov	r5, r1
 801dac6:	b914      	cbnz	r4, 801dace <rclc_action_find_goal_handle_by_uuid+0x12>
 801dac8:	e009      	b.n	801dade <rclc_action_find_goal_handle_by_uuid+0x22>
 801daca:	6824      	ldr	r4, [r4, #0]
 801dacc:	b13c      	cbz	r4, 801dade <rclc_action_find_goal_handle_by_uuid+0x22>
 801dace:	f104 0009 	add.w	r0, r4, #9
 801dad2:	2210      	movs	r2, #16
 801dad4:	4629      	mov	r1, r5
 801dad6:	f004 fc65 	bl	80223a4 <memcmp>
 801dada:	2800      	cmp	r0, #0
 801dadc:	d1f5      	bne.n	801daca <rclc_action_find_goal_handle_by_uuid+0xe>
 801dade:	4620      	mov	r0, r4
 801dae0:	bd38      	pop	{r3, r4, r5, pc}
 801dae2:	2400      	movs	r4, #0
 801dae4:	4620      	mov	r0, r4
 801dae6:	bd38      	pop	{r3, r4, r5, pc}

0801dae8 <rclc_action_find_first_handle_by_status>:
 801dae8:	b140      	cbz	r0, 801dafc <rclc_action_find_first_handle_by_status+0x14>
 801daea:	68c0      	ldr	r0, [r0, #12]
 801daec:	b910      	cbnz	r0, 801daf4 <rclc_action_find_first_handle_by_status+0xc>
 801daee:	e005      	b.n	801dafc <rclc_action_find_first_handle_by_status+0x14>
 801daf0:	6800      	ldr	r0, [r0, #0]
 801daf2:	b118      	cbz	r0, 801dafc <rclc_action_find_first_handle_by_status+0x14>
 801daf4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801daf8:	428b      	cmp	r3, r1
 801dafa:	d1f9      	bne.n	801daf0 <rclc_action_find_first_handle_by_status+0x8>
 801dafc:	4770      	bx	lr
 801dafe:	bf00      	nop

0801db00 <rclc_action_find_first_terminated_handle>:
 801db00:	b140      	cbz	r0, 801db14 <rclc_action_find_first_terminated_handle+0x14>
 801db02:	68c0      	ldr	r0, [r0, #12]
 801db04:	b910      	cbnz	r0, 801db0c <rclc_action_find_first_terminated_handle+0xc>
 801db06:	e005      	b.n	801db14 <rclc_action_find_first_terminated_handle+0x14>
 801db08:	6800      	ldr	r0, [r0, #0]
 801db0a:	b118      	cbz	r0, 801db14 <rclc_action_find_first_terminated_handle+0x14>
 801db0c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801db10:	2b03      	cmp	r3, #3
 801db12:	ddf9      	ble.n	801db08 <rclc_action_find_first_terminated_handle+0x8>
 801db14:	4770      	bx	lr
 801db16:	bf00      	nop

0801db18 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801db18:	b170      	cbz	r0, 801db38 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801db1a:	68c0      	ldr	r0, [r0, #12]
 801db1c:	b160      	cbz	r0, 801db38 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801db1e:	b410      	push	{r4}
 801db20:	e001      	b.n	801db26 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801db22:	6800      	ldr	r0, [r0, #0]
 801db24:	b128      	cbz	r0, 801db32 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801db26:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801db2a:	4299      	cmp	r1, r3
 801db2c:	bf08      	it	eq
 801db2e:	4294      	cmpeq	r4, r2
 801db30:	d1f7      	bne.n	801db22 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801db32:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db36:	4770      	bx	lr
 801db38:	4770      	bx	lr
 801db3a:	bf00      	nop

0801db3c <rclc_action_find_handle_by_result_request_sequence_number>:
 801db3c:	b170      	cbz	r0, 801db5c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801db3e:	68c0      	ldr	r0, [r0, #12]
 801db40:	b160      	cbz	r0, 801db5c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801db42:	b410      	push	{r4}
 801db44:	e001      	b.n	801db4a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801db46:	6800      	ldr	r0, [r0, #0]
 801db48:	b128      	cbz	r0, 801db56 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801db4a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801db4e:	4299      	cmp	r1, r3
 801db50:	bf08      	it	eq
 801db52:	4294      	cmpeq	r4, r2
 801db54:	d1f7      	bne.n	801db46 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801db56:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db5a:	4770      	bx	lr
 801db5c:	4770      	bx	lr
 801db5e:	bf00      	nop

0801db60 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801db60:	b170      	cbz	r0, 801db80 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801db62:	68c0      	ldr	r0, [r0, #12]
 801db64:	b160      	cbz	r0, 801db80 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801db66:	b410      	push	{r4}
 801db68:	e001      	b.n	801db6e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801db6a:	6800      	ldr	r0, [r0, #0]
 801db6c:	b128      	cbz	r0, 801db7a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801db6e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801db72:	4299      	cmp	r1, r3
 801db74:	bf08      	it	eq
 801db76:	4294      	cmpeq	r4, r2
 801db78:	d1f7      	bne.n	801db6a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801db7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db7e:	4770      	bx	lr
 801db80:	4770      	bx	lr
 801db82:	bf00      	nop

0801db84 <rclc_action_find_first_handle_with_goal_response>:
 801db84:	b140      	cbz	r0, 801db98 <rclc_action_find_first_handle_with_goal_response+0x14>
 801db86:	68c0      	ldr	r0, [r0, #12]
 801db88:	b910      	cbnz	r0, 801db90 <rclc_action_find_first_handle_with_goal_response+0xc>
 801db8a:	e005      	b.n	801db98 <rclc_action_find_first_handle_with_goal_response+0x14>
 801db8c:	6800      	ldr	r0, [r0, #0]
 801db8e:	b118      	cbz	r0, 801db98 <rclc_action_find_first_handle_with_goal_response+0x14>
 801db90:	f890 3020 	ldrb.w	r3, [r0, #32]
 801db94:	2b00      	cmp	r3, #0
 801db96:	d0f9      	beq.n	801db8c <rclc_action_find_first_handle_with_goal_response+0x8>
 801db98:	4770      	bx	lr
 801db9a:	bf00      	nop

0801db9c <rclc_action_find_first_handle_with_result_response>:
 801db9c:	b140      	cbz	r0, 801dbb0 <rclc_action_find_first_handle_with_result_response+0x14>
 801db9e:	68c0      	ldr	r0, [r0, #12]
 801dba0:	b910      	cbnz	r0, 801dba8 <rclc_action_find_first_handle_with_result_response+0xc>
 801dba2:	e005      	b.n	801dbb0 <rclc_action_find_first_handle_with_result_response+0x14>
 801dba4:	6800      	ldr	r0, [r0, #0]
 801dba6:	b118      	cbz	r0, 801dbb0 <rclc_action_find_first_handle_with_result_response+0x14>
 801dba8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d0f9      	beq.n	801dba4 <rclc_action_find_first_handle_with_result_response+0x8>
 801dbb0:	4770      	bx	lr
 801dbb2:	bf00      	nop

0801dbb4 <rclc_action_server_response_goal_request>:
 801dbb4:	b198      	cbz	r0, 801dbde <rclc_action_server_response_goal_request+0x2a>
 801dbb6:	2200      	movs	r2, #0
 801dbb8:	460b      	mov	r3, r1
 801dbba:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801dbbe:	b510      	push	{r4, lr}
 801dbc0:	6844      	ldr	r4, [r0, #4]
 801dbc2:	b086      	sub	sp, #24
 801dbc4:	f104 0010 	add.w	r0, r4, #16
 801dbc8:	9205      	str	r2, [sp, #20]
 801dbca:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801dbce:	aa03      	add	r2, sp, #12
 801dbd0:	f88d 300c 	strb.w	r3, [sp, #12]
 801dbd4:	f7ff fd3e 	bl	801d654 <rcl_action_send_goal_response>
 801dbd8:	b918      	cbnz	r0, 801dbe2 <rclc_action_server_response_goal_request+0x2e>
 801dbda:	b006      	add	sp, #24
 801dbdc:	bd10      	pop	{r4, pc}
 801dbde:	200b      	movs	r0, #11
 801dbe0:	4770      	bx	lr
 801dbe2:	9001      	str	r0, [sp, #4]
 801dbe4:	f7f7 fcf0 	bl	80155c8 <rcutils_reset_error>
 801dbe8:	9801      	ldr	r0, [sp, #4]
 801dbea:	b006      	add	sp, #24
 801dbec:	bd10      	pop	{r4, pc}
 801dbee:	bf00      	nop

0801dbf0 <rclc_action_server_goal_cancel_accept>:
 801dbf0:	b310      	cbz	r0, 801dc38 <rclc_action_server_goal_cancel_accept+0x48>
 801dbf2:	b510      	push	{r4, lr}
 801dbf4:	b090      	sub	sp, #64	@ 0x40
 801dbf6:	4604      	mov	r4, r0
 801dbf8:	a806      	add	r0, sp, #24
 801dbfa:	f7ff ff01 	bl	801da00 <rcl_action_get_zero_initialized_cancel_response>
 801dbfe:	2300      	movs	r3, #0
 801dc00:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801dc04:	46ec      	mov	ip, sp
 801dc06:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801dc0a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801dc0e:	f88d 3018 	strb.w	r3, [sp, #24]
 801dc12:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801dc16:	f8cd d01c 	str.w	sp, [sp, #28]
 801dc1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dc1e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801dc40 <rclc_action_server_goal_cancel_accept+0x50>
 801dc22:	6860      	ldr	r0, [r4, #4]
 801dc24:	aa06      	add	r2, sp, #24
 801dc26:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801dc2a:	3010      	adds	r0, #16
 801dc2c:	ed8d 7b08 	vstr	d7, [sp, #32]
 801dc30:	f7ff fdc8 	bl	801d7c4 <rcl_action_send_cancel_response>
 801dc34:	b010      	add	sp, #64	@ 0x40
 801dc36:	bd10      	pop	{r4, pc}
 801dc38:	200b      	movs	r0, #11
 801dc3a:	4770      	bx	lr
 801dc3c:	f3af 8000 	nop.w
 801dc40:	00000001 	.word	0x00000001
 801dc44:	00000001 	.word	0x00000001

0801dc48 <rclc_action_server_goal_cancel_reject>:
 801dc48:	b082      	sub	sp, #8
 801dc4a:	b530      	push	{r4, r5, lr}
 801dc4c:	b08b      	sub	sp, #44	@ 0x2c
 801dc4e:	ac0e      	add	r4, sp, #56	@ 0x38
 801dc50:	e884 000c 	stmia.w	r4, {r2, r3}
 801dc54:	b188      	cbz	r0, 801dc7a <rclc_action_server_goal_cancel_reject+0x32>
 801dc56:	4604      	mov	r4, r0
 801dc58:	a801      	add	r0, sp, #4
 801dc5a:	460d      	mov	r5, r1
 801dc5c:	f7ff fed0 	bl	801da00 <rcl_action_get_zero_initialized_cancel_response>
 801dc60:	aa01      	add	r2, sp, #4
 801dc62:	a90e      	add	r1, sp, #56	@ 0x38
 801dc64:	f104 0010 	add.w	r0, r4, #16
 801dc68:	f88d 5004 	strb.w	r5, [sp, #4]
 801dc6c:	f7ff fdaa 	bl	801d7c4 <rcl_action_send_cancel_response>
 801dc70:	b00b      	add	sp, #44	@ 0x2c
 801dc72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dc76:	b002      	add	sp, #8
 801dc78:	4770      	bx	lr
 801dc7a:	200b      	movs	r0, #11
 801dc7c:	b00b      	add	sp, #44	@ 0x2c
 801dc7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dc82:	b002      	add	sp, #8
 801dc84:	4770      	bx	lr
 801dc86:	bf00      	nop

0801dc88 <__atomic_load_8>:
 801dc88:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801dc8c:	4a16      	ldr	r2, [pc, #88]	@ (801dce8 <__atomic_load_8+0x60>)
 801dc8e:	4b17      	ldr	r3, [pc, #92]	@ (801dcec <__atomic_load_8+0x64>)
 801dc90:	f04f 0c01 	mov.w	ip, #1
 801dc94:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801dc98:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801dc9c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801dca0:	fb02 f101 	mul.w	r1, r2, r1
 801dca4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801dca8:	fba3 2301 	umull	r2, r3, r3, r1
 801dcac:	091b      	lsrs	r3, r3, #4
 801dcae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801dcb2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801dcb6:	b4d0      	push	{r4, r6, r7}
 801dcb8:	1ac9      	subs	r1, r1, r3
 801dcba:	4c0d      	ldr	r4, [pc, #52]	@ (801dcf0 <__atomic_load_8+0x68>)
 801dcbc:	1862      	adds	r2, r4, r1
 801dcbe:	e8d2 3f4f 	ldrexb	r3, [r2]
 801dcc2:	e8c2 cf46 	strexb	r6, ip, [r2]
 801dcc6:	2e00      	cmp	r6, #0
 801dcc8:	d1f9      	bne.n	801dcbe <__atomic_load_8+0x36>
 801dcca:	b2db      	uxtb	r3, r3
 801dccc:	f3bf 8f5b 	dmb	ish
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d1f4      	bne.n	801dcbe <__atomic_load_8+0x36>
 801dcd4:	e9d0 6700 	ldrd	r6, r7, [r0]
 801dcd8:	f3bf 8f5b 	dmb	ish
 801dcdc:	5463      	strb	r3, [r4, r1]
 801dcde:	4630      	mov	r0, r6
 801dce0:	4639      	mov	r1, r7
 801dce2:	bcd0      	pop	{r4, r6, r7}
 801dce4:	4770      	bx	lr
 801dce6:	bf00      	nop
 801dce8:	27d4eb2d 	.word	0x27d4eb2d
 801dcec:	b21642c9 	.word	0xb21642c9
 801dcf0:	240694c0 	.word	0x240694c0

0801dcf4 <__atomic_store_8>:
 801dcf4:	b570      	push	{r4, r5, r6, lr}
 801dcf6:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801dcfa:	4916      	ldr	r1, [pc, #88]	@ (801dd54 <__atomic_store_8+0x60>)
 801dcfc:	4c16      	ldr	r4, [pc, #88]	@ (801dd58 <__atomic_store_8+0x64>)
 801dcfe:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801dd02:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801dd06:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801dd0a:	fb01 fe0e 	mul.w	lr, r1, lr
 801dd0e:	4913      	ldr	r1, [pc, #76]	@ (801dd5c <__atomic_store_8+0x68>)
 801dd10:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801dd14:	fba1 510e 	umull	r5, r1, r1, lr
 801dd18:	f04f 0501 	mov.w	r5, #1
 801dd1c:	0909      	lsrs	r1, r1, #4
 801dd1e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801dd22:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801dd26:	ebae 0e01 	sub.w	lr, lr, r1
 801dd2a:	eb04 0c0e 	add.w	ip, r4, lr
 801dd2e:	e8dc 1f4f 	ldrexb	r1, [ip]
 801dd32:	e8cc 5f46 	strexb	r6, r5, [ip]
 801dd36:	2e00      	cmp	r6, #0
 801dd38:	d1f9      	bne.n	801dd2e <__atomic_store_8+0x3a>
 801dd3a:	b2c9      	uxtb	r1, r1
 801dd3c:	f3bf 8f5b 	dmb	ish
 801dd40:	2900      	cmp	r1, #0
 801dd42:	d1f4      	bne.n	801dd2e <__atomic_store_8+0x3a>
 801dd44:	e9c0 2300 	strd	r2, r3, [r0]
 801dd48:	f3bf 8f5b 	dmb	ish
 801dd4c:	f804 100e 	strb.w	r1, [r4, lr]
 801dd50:	bd70      	pop	{r4, r5, r6, pc}
 801dd52:	bf00      	nop
 801dd54:	27d4eb2d 	.word	0x27d4eb2d
 801dd58:	240694c0 	.word	0x240694c0
 801dd5c:	b21642c9 	.word	0xb21642c9

0801dd60 <__atomic_exchange_8>:
 801dd60:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801dd64:	4917      	ldr	r1, [pc, #92]	@ (801ddc4 <__atomic_exchange_8+0x64>)
 801dd66:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801dd6a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801dd6e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801dd72:	fb01 fc0c 	mul.w	ip, r1, ip
 801dd76:	4914      	ldr	r1, [pc, #80]	@ (801ddc8 <__atomic_exchange_8+0x68>)
 801dd78:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801dd7c:	b570      	push	{r4, r5, r6, lr}
 801dd7e:	4686      	mov	lr, r0
 801dd80:	fba1 010c 	umull	r0, r1, r1, ip
 801dd84:	4d11      	ldr	r5, [pc, #68]	@ (801ddcc <__atomic_exchange_8+0x6c>)
 801dd86:	f04f 0001 	mov.w	r0, #1
 801dd8a:	0909      	lsrs	r1, r1, #4
 801dd8c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801dd90:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801dd94:	ebac 0c01 	sub.w	ip, ip, r1
 801dd98:	eb05 010c 	add.w	r1, r5, ip
 801dd9c:	e8d1 4f4f 	ldrexb	r4, [r1]
 801dda0:	e8c1 0f46 	strexb	r6, r0, [r1]
 801dda4:	2e00      	cmp	r6, #0
 801dda6:	d1f9      	bne.n	801dd9c <__atomic_exchange_8+0x3c>
 801dda8:	b2e4      	uxtb	r4, r4
 801ddaa:	f3bf 8f5b 	dmb	ish
 801ddae:	2c00      	cmp	r4, #0
 801ddb0:	d1f4      	bne.n	801dd9c <__atomic_exchange_8+0x3c>
 801ddb2:	e9de 0100 	ldrd	r0, r1, [lr]
 801ddb6:	e9ce 2300 	strd	r2, r3, [lr]
 801ddba:	f3bf 8f5b 	dmb	ish
 801ddbe:	f805 400c 	strb.w	r4, [r5, ip]
 801ddc2:	bd70      	pop	{r4, r5, r6, pc}
 801ddc4:	27d4eb2d 	.word	0x27d4eb2d
 801ddc8:	b21642c9 	.word	0xb21642c9
 801ddcc:	240694c0 	.word	0x240694c0

0801ddd0 <rcutils_get_env>:
 801ddd0:	b168      	cbz	r0, 801ddee <rcutils_get_env+0x1e>
 801ddd2:	b510      	push	{r4, lr}
 801ddd4:	460c      	mov	r4, r1
 801ddd6:	b129      	cbz	r1, 801dde4 <rcutils_get_env+0x14>
 801ddd8:	f003 fe64 	bl	8021aa4 <getenv>
 801dddc:	b120      	cbz	r0, 801dde8 <rcutils_get_env+0x18>
 801ddde:	6020      	str	r0, [r4, #0]
 801dde0:	2000      	movs	r0, #0
 801dde2:	bd10      	pop	{r4, pc}
 801dde4:	4803      	ldr	r0, [pc, #12]	@ (801ddf4 <rcutils_get_env+0x24>)
 801dde6:	bd10      	pop	{r4, pc}
 801dde8:	4b03      	ldr	r3, [pc, #12]	@ (801ddf8 <rcutils_get_env+0x28>)
 801ddea:	6023      	str	r3, [r4, #0]
 801ddec:	bd10      	pop	{r4, pc}
 801ddee:	4803      	ldr	r0, [pc, #12]	@ (801ddfc <rcutils_get_env+0x2c>)
 801ddf0:	4770      	bx	lr
 801ddf2:	bf00      	nop
 801ddf4:	0802558c 	.word	0x0802558c
 801ddf8:	08025a14 	.word	0x08025a14
 801ddfc:	08025570 	.word	0x08025570

0801de00 <rcutils_is_directory>:
 801de00:	2000      	movs	r0, #0
 801de02:	4770      	bx	lr

0801de04 <rcutils_join_path>:
 801de04:	b082      	sub	sp, #8
 801de06:	2000      	movs	r0, #0
 801de08:	e88d 000c 	stmia.w	sp, {r2, r3}
 801de0c:	b002      	add	sp, #8
 801de0e:	4770      	bx	lr

0801de10 <rcutils_to_native_path>:
 801de10:	b084      	sub	sp, #16
 801de12:	2000      	movs	r0, #0
 801de14:	f10d 0c04 	add.w	ip, sp, #4
 801de18:	b004      	add	sp, #16
 801de1a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801de1e:	4770      	bx	lr

0801de20 <rcutils_format_string_limit>:
 801de20:	b40f      	push	{r0, r1, r2, r3}
 801de22:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de24:	b083      	sub	sp, #12
 801de26:	ac08      	add	r4, sp, #32
 801de28:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801de2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801de2e:	b326      	cbz	r6, 801de7a <rcutils_format_string_limit+0x5a>
 801de30:	a808      	add	r0, sp, #32
 801de32:	f7f7 fba5 	bl	8015580 <rcutils_allocator_is_valid>
 801de36:	b300      	cbz	r0, 801de7a <rcutils_format_string_limit+0x5a>
 801de38:	2100      	movs	r1, #0
 801de3a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801de3c:	4632      	mov	r2, r6
 801de3e:	4608      	mov	r0, r1
 801de40:	e9cd 3300 	strd	r3, r3, [sp]
 801de44:	f000 f906 	bl	801e054 <rcutils_vsnprintf>
 801de48:	1c43      	adds	r3, r0, #1
 801de4a:	4605      	mov	r5, r0
 801de4c:	d015      	beq.n	801de7a <rcutils_format_string_limit+0x5a>
 801de4e:	1c47      	adds	r7, r0, #1
 801de50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de52:	429f      	cmp	r7, r3
 801de54:	d901      	bls.n	801de5a <rcutils_format_string_limit+0x3a>
 801de56:	1e5d      	subs	r5, r3, #1
 801de58:	461f      	mov	r7, r3
 801de5a:	9b08      	ldr	r3, [sp, #32]
 801de5c:	4638      	mov	r0, r7
 801de5e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801de60:	4798      	blx	r3
 801de62:	4604      	mov	r4, r0
 801de64:	b148      	cbz	r0, 801de7a <rcutils_format_string_limit+0x5a>
 801de66:	4632      	mov	r2, r6
 801de68:	4639      	mov	r1, r7
 801de6a:	9b01      	ldr	r3, [sp, #4]
 801de6c:	f000 f8f2 	bl	801e054 <rcutils_vsnprintf>
 801de70:	2800      	cmp	r0, #0
 801de72:	db09      	blt.n	801de88 <rcutils_format_string_limit+0x68>
 801de74:	2300      	movs	r3, #0
 801de76:	5563      	strb	r3, [r4, r5]
 801de78:	e000      	b.n	801de7c <rcutils_format_string_limit+0x5c>
 801de7a:	2400      	movs	r4, #0
 801de7c:	4620      	mov	r0, r4
 801de7e:	b003      	add	sp, #12
 801de80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801de84:	b004      	add	sp, #16
 801de86:	4770      	bx	lr
 801de88:	4620      	mov	r0, r4
 801de8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de8c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801de8e:	2400      	movs	r4, #0
 801de90:	4798      	blx	r3
 801de92:	e7f3      	b.n	801de7c <rcutils_format_string_limit+0x5c>

0801de94 <rcutils_repl_str>:
 801de94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de98:	ed2d 8b02 	vpush	{d8}
 801de9c:	b087      	sub	sp, #28
 801de9e:	2600      	movs	r6, #0
 801dea0:	4680      	mov	r8, r0
 801dea2:	468a      	mov	sl, r1
 801dea4:	9000      	str	r0, [sp, #0]
 801dea6:	4608      	mov	r0, r1
 801dea8:	ee08 2a10 	vmov	s16, r2
 801deac:	4699      	mov	r9, r3
 801deae:	2510      	movs	r5, #16
 801deb0:	f7e2 fa20 	bl	80002f4 <strlen>
 801deb4:	4637      	mov	r7, r6
 801deb6:	46b3      	mov	fp, r6
 801deb8:	9001      	str	r0, [sp, #4]
 801deba:	e01e      	b.n	801defa <rcutils_repl_str+0x66>
 801debc:	f10b 0b01 	add.w	fp, fp, #1
 801dec0:	9b01      	ldr	r3, [sp, #4]
 801dec2:	455e      	cmp	r6, fp
 801dec4:	eb04 0803 	add.w	r8, r4, r3
 801dec8:	d211      	bcs.n	801deee <rcutils_repl_str+0x5a>
 801deca:	442e      	add	r6, r5
 801decc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ded0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801ded4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ded8:	00b1      	lsls	r1, r6, #2
 801deda:	4798      	blx	r3
 801dedc:	2800      	cmp	r0, #0
 801dede:	f000 8088 	beq.w	801dff2 <rcutils_repl_str+0x15e>
 801dee2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801dee6:	4607      	mov	r7, r0
 801dee8:	bf28      	it	cs
 801deea:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801deee:	9a00      	ldr	r2, [sp, #0]
 801def0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801def4:	1aa4      	subs	r4, r4, r2
 801def6:	f843 4c04 	str.w	r4, [r3, #-4]
 801defa:	4651      	mov	r1, sl
 801defc:	4640      	mov	r0, r8
 801defe:	f004 faa2 	bl	8022446 <strstr>
 801df02:	4604      	mov	r4, r0
 801df04:	4638      	mov	r0, r7
 801df06:	2c00      	cmp	r4, #0
 801df08:	d1d8      	bne.n	801debc <rcutils_repl_str+0x28>
 801df0a:	4640      	mov	r0, r8
 801df0c:	f7e2 f9f2 	bl	80002f4 <strlen>
 801df10:	9b00      	ldr	r3, [sp, #0]
 801df12:	eba8 0803 	sub.w	r8, r8, r3
 801df16:	eb08 0400 	add.w	r4, r8, r0
 801df1a:	9402      	str	r4, [sp, #8]
 801df1c:	f1bb 0f00 	cmp.w	fp, #0
 801df20:	d045      	beq.n	801dfae <rcutils_repl_str+0x11a>
 801df22:	ee18 0a10 	vmov	r0, s16
 801df26:	f7e2 f9e5 	bl	80002f4 <strlen>
 801df2a:	9a01      	ldr	r2, [sp, #4]
 801df2c:	4606      	mov	r6, r0
 801df2e:	f8d9 3000 	ldr.w	r3, [r9]
 801df32:	1a82      	subs	r2, r0, r2
 801df34:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801df38:	fb0b 4202 	mla	r2, fp, r2, r4
 801df3c:	1c50      	adds	r0, r2, #1
 801df3e:	9205      	str	r2, [sp, #20]
 801df40:	4798      	blx	r3
 801df42:	4682      	mov	sl, r0
 801df44:	2800      	cmp	r0, #0
 801df46:	d054      	beq.n	801dff2 <rcutils_repl_str+0x15e>
 801df48:	683a      	ldr	r2, [r7, #0]
 801df4a:	463d      	mov	r5, r7
 801df4c:	9900      	ldr	r1, [sp, #0]
 801df4e:	2401      	movs	r4, #1
 801df50:	f004 fb71 	bl	8022636 <memcpy>
 801df54:	683b      	ldr	r3, [r7, #0]
 801df56:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801df5a:	eb0a 0803 	add.w	r8, sl, r3
 801df5e:	ee18 7a10 	vmov	r7, s16
 801df62:	f8dd a000 	ldr.w	sl, [sp]
 801df66:	f8cd 9000 	str.w	r9, [sp]
 801df6a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801df6e:	4632      	mov	r2, r6
 801df70:	4639      	mov	r1, r7
 801df72:	4640      	mov	r0, r8
 801df74:	44b0      	add	r8, r6
 801df76:	f004 fb5e 	bl	8022636 <memcpy>
 801df7a:	f855 2b04 	ldr.w	r2, [r5], #4
 801df7e:	45a3      	cmp	fp, r4
 801df80:	444a      	add	r2, r9
 801df82:	eb0a 0102 	add.w	r1, sl, r2
 801df86:	d02a      	beq.n	801dfde <rcutils_repl_str+0x14a>
 801df88:	6828      	ldr	r0, [r5, #0]
 801df8a:	1a82      	subs	r2, r0, r2
 801df8c:	4640      	mov	r0, r8
 801df8e:	4490      	add	r8, r2
 801df90:	f004 fb51 	bl	8022636 <memcpy>
 801df94:	1c62      	adds	r2, r4, #1
 801df96:	45a3      	cmp	fp, r4
 801df98:	4614      	mov	r4, r2
 801df9a:	d8e8      	bhi.n	801df6e <rcutils_repl_str+0xda>
 801df9c:	f8dd 9000 	ldr.w	r9, [sp]
 801dfa0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801dfa4:	2300      	movs	r3, #0
 801dfa6:	9a05      	ldr	r2, [sp, #20]
 801dfa8:	f80a 3002 	strb.w	r3, [sl, r2]
 801dfac:	e00b      	b.n	801dfc6 <rcutils_repl_str+0x132>
 801dfae:	4620      	mov	r0, r4
 801dfb0:	f8d9 3000 	ldr.w	r3, [r9]
 801dfb4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dfb8:	3001      	adds	r0, #1
 801dfba:	4798      	blx	r3
 801dfbc:	4682      	mov	sl, r0
 801dfbe:	b110      	cbz	r0, 801dfc6 <rcutils_repl_str+0x132>
 801dfc0:	9900      	ldr	r1, [sp, #0]
 801dfc2:	f004 fb30 	bl	8022626 <strcpy>
 801dfc6:	4638      	mov	r0, r7
 801dfc8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801dfcc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dfd0:	4798      	blx	r3
 801dfd2:	4650      	mov	r0, sl
 801dfd4:	b007      	add	sp, #28
 801dfd6:	ecbd 8b02 	vpop	{d8}
 801dfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfde:	9b02      	ldr	r3, [sp, #8]
 801dfe0:	4640      	mov	r0, r8
 801dfe2:	f8dd 9000 	ldr.w	r9, [sp]
 801dfe6:	1a9a      	subs	r2, r3, r2
 801dfe8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801dfec:	f004 fb23 	bl	8022636 <memcpy>
 801dff0:	e7d8      	b.n	801dfa4 <rcutils_repl_str+0x110>
 801dff2:	f04f 0a00 	mov.w	sl, #0
 801dff6:	e7e6      	b.n	801dfc6 <rcutils_repl_str+0x132>

0801dff8 <rcutils_snprintf>:
 801dff8:	b40c      	push	{r2, r3}
 801dffa:	b530      	push	{r4, r5, lr}
 801dffc:	b083      	sub	sp, #12
 801dffe:	ab06      	add	r3, sp, #24
 801e000:	f853 2b04 	ldr.w	r2, [r3], #4
 801e004:	9301      	str	r3, [sp, #4]
 801e006:	b1e2      	cbz	r2, 801e042 <rcutils_snprintf+0x4a>
 801e008:	fab0 f480 	clz	r4, r0
 801e00c:	fab1 f581 	clz	r5, r1
 801e010:	ea50 0c01 	orrs.w	ip, r0, r1
 801e014:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801e018:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801e01c:	d008      	beq.n	801e030 <rcutils_snprintf+0x38>
 801e01e:	b984      	cbnz	r4, 801e042 <rcutils_snprintf+0x4a>
 801e020:	b97d      	cbnz	r5, 801e042 <rcutils_snprintf+0x4a>
 801e022:	f004 f91d 	bl	8022260 <vsniprintf>
 801e026:	b003      	add	sp, #12
 801e028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e02c:	b002      	add	sp, #8
 801e02e:	4770      	bx	lr
 801e030:	4661      	mov	r1, ip
 801e032:	4660      	mov	r0, ip
 801e034:	f004 f914 	bl	8022260 <vsniprintf>
 801e038:	b003      	add	sp, #12
 801e03a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e03e:	b002      	add	sp, #8
 801e040:	4770      	bx	lr
 801e042:	f004 fac3 	bl	80225cc <__errno>
 801e046:	2216      	movs	r2, #22
 801e048:	4603      	mov	r3, r0
 801e04a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e04e:	601a      	str	r2, [r3, #0]
 801e050:	e7e9      	b.n	801e026 <rcutils_snprintf+0x2e>
 801e052:	bf00      	nop

0801e054 <rcutils_vsnprintf>:
 801e054:	b570      	push	{r4, r5, r6, lr}
 801e056:	b1b2      	cbz	r2, 801e086 <rcutils_vsnprintf+0x32>
 801e058:	fab0 f480 	clz	r4, r0
 801e05c:	fab1 f581 	clz	r5, r1
 801e060:	ea50 0c01 	orrs.w	ip, r0, r1
 801e064:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801e068:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801e06c:	d005      	beq.n	801e07a <rcutils_vsnprintf+0x26>
 801e06e:	b954      	cbnz	r4, 801e086 <rcutils_vsnprintf+0x32>
 801e070:	b94d      	cbnz	r5, 801e086 <rcutils_vsnprintf+0x32>
 801e072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e076:	f004 b8f3 	b.w	8022260 <vsniprintf>
 801e07a:	4661      	mov	r1, ip
 801e07c:	4660      	mov	r0, ip
 801e07e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e082:	f004 b8ed 	b.w	8022260 <vsniprintf>
 801e086:	f004 faa1 	bl	80225cc <__errno>
 801e08a:	2316      	movs	r3, #22
 801e08c:	6003      	str	r3, [r0, #0]
 801e08e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e092:	bd70      	pop	{r4, r5, r6, pc}

0801e094 <rcutils_strdup>:
 801e094:	b084      	sub	sp, #16
 801e096:	b570      	push	{r4, r5, r6, lr}
 801e098:	b082      	sub	sp, #8
 801e09a:	4605      	mov	r5, r0
 801e09c:	ac07      	add	r4, sp, #28
 801e09e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801e0a2:	b1b0      	cbz	r0, 801e0d2 <rcutils_strdup+0x3e>
 801e0a4:	f7e2 f926 	bl	80002f4 <strlen>
 801e0a8:	1c42      	adds	r2, r0, #1
 801e0aa:	9b07      	ldr	r3, [sp, #28]
 801e0ac:	4606      	mov	r6, r0
 801e0ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e0b0:	4610      	mov	r0, r2
 801e0b2:	9201      	str	r2, [sp, #4]
 801e0b4:	4798      	blx	r3
 801e0b6:	4604      	mov	r4, r0
 801e0b8:	b128      	cbz	r0, 801e0c6 <rcutils_strdup+0x32>
 801e0ba:	9a01      	ldr	r2, [sp, #4]
 801e0bc:	4629      	mov	r1, r5
 801e0be:	f004 faba 	bl	8022636 <memcpy>
 801e0c2:	2300      	movs	r3, #0
 801e0c4:	55a3      	strb	r3, [r4, r6]
 801e0c6:	4620      	mov	r0, r4
 801e0c8:	b002      	add	sp, #8
 801e0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e0ce:	b004      	add	sp, #16
 801e0d0:	4770      	bx	lr
 801e0d2:	4604      	mov	r4, r0
 801e0d4:	e7f7      	b.n	801e0c6 <rcutils_strdup+0x32>
 801e0d6:	bf00      	nop

0801e0d8 <rcutils_strndup>:
 801e0d8:	b082      	sub	sp, #8
 801e0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0dc:	ac06      	add	r4, sp, #24
 801e0de:	4605      	mov	r5, r0
 801e0e0:	e884 000c 	stmia.w	r4, {r2, r3}
 801e0e4:	b188      	cbz	r0, 801e10a <rcutils_strndup+0x32>
 801e0e6:	1c4f      	adds	r7, r1, #1
 801e0e8:	460e      	mov	r6, r1
 801e0ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e0ec:	4638      	mov	r0, r7
 801e0ee:	4790      	blx	r2
 801e0f0:	4604      	mov	r4, r0
 801e0f2:	b128      	cbz	r0, 801e100 <rcutils_strndup+0x28>
 801e0f4:	463a      	mov	r2, r7
 801e0f6:	4629      	mov	r1, r5
 801e0f8:	f004 fa9d 	bl	8022636 <memcpy>
 801e0fc:	2300      	movs	r3, #0
 801e0fe:	55a3      	strb	r3, [r4, r6]
 801e100:	4620      	mov	r0, r4
 801e102:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e106:	b002      	add	sp, #8
 801e108:	4770      	bx	lr
 801e10a:	4604      	mov	r4, r0
 801e10c:	e7f8      	b.n	801e100 <rcutils_strndup+0x28>
 801e10e:	bf00      	nop

0801e110 <rcutils_get_zero_initialized_string_map>:
 801e110:	2000      	movs	r0, #0
 801e112:	4b01      	ldr	r3, [pc, #4]	@ (801e118 <rcutils_get_zero_initialized_string_map+0x8>)
 801e114:	6018      	str	r0, [r3, #0]
 801e116:	4770      	bx	lr
 801e118:	240694d8 	.word	0x240694d8

0801e11c <rcutils_string_map_reserve>:
 801e11c:	2800      	cmp	r0, #0
 801e11e:	d05e      	beq.n	801e1de <rcutils_string_map_reserve+0xc2>
 801e120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e124:	460c      	mov	r4, r1
 801e126:	6801      	ldr	r1, [r0, #0]
 801e128:	b082      	sub	sp, #8
 801e12a:	4605      	mov	r5, r0
 801e12c:	b129      	cbz	r1, 801e13a <rcutils_string_map_reserve+0x1e>
 801e12e:	68cb      	ldr	r3, [r1, #12]
 801e130:	42a3      	cmp	r3, r4
 801e132:	d906      	bls.n	801e142 <rcutils_string_map_reserve+0x26>
 801e134:	461c      	mov	r4, r3
 801e136:	2900      	cmp	r1, #0
 801e138:	d1f9      	bne.n	801e12e <rcutils_string_map_reserve+0x12>
 801e13a:	201f      	movs	r0, #31
 801e13c:	b002      	add	sp, #8
 801e13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e142:	688b      	ldr	r3, [r1, #8]
 801e144:	42a3      	cmp	r3, r4
 801e146:	d046      	beq.n	801e1d6 <rcutils_string_map_reserve+0xba>
 801e148:	6a0e      	ldr	r6, [r1, #32]
 801e14a:	2c00      	cmp	r4, #0
 801e14c:	d033      	beq.n	801e1b6 <rcutils_string_map_reserve+0x9a>
 801e14e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801e152:	d242      	bcs.n	801e1da <rcutils_string_map_reserve+0xbe>
 801e154:	00a7      	lsls	r7, r4, #2
 801e156:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801e15a:	6808      	ldr	r0, [r1, #0]
 801e15c:	4632      	mov	r2, r6
 801e15e:	4639      	mov	r1, r7
 801e160:	47c0      	blx	r8
 801e162:	2800      	cmp	r0, #0
 801e164:	d039      	beq.n	801e1da <rcutils_string_map_reserve+0xbe>
 801e166:	682b      	ldr	r3, [r5, #0]
 801e168:	4632      	mov	r2, r6
 801e16a:	4639      	mov	r1, r7
 801e16c:	6018      	str	r0, [r3, #0]
 801e16e:	6858      	ldr	r0, [r3, #4]
 801e170:	47c0      	blx	r8
 801e172:	2800      	cmp	r0, #0
 801e174:	d031      	beq.n	801e1da <rcutils_string_map_reserve+0xbe>
 801e176:	682d      	ldr	r5, [r5, #0]
 801e178:	68ab      	ldr	r3, [r5, #8]
 801e17a:	6068      	str	r0, [r5, #4]
 801e17c:	42a3      	cmp	r3, r4
 801e17e:	d225      	bcs.n	801e1cc <rcutils_string_map_reserve+0xb0>
 801e180:	682a      	ldr	r2, [r5, #0]
 801e182:	eb00 0c07 	add.w	ip, r0, r7
 801e186:	0099      	lsls	r1, r3, #2
 801e188:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801e18c:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801e190:	45e6      	cmp	lr, ip
 801e192:	d203      	bcs.n	801e19c <rcutils_string_map_reserve+0x80>
 801e194:	eb02 0c07 	add.w	ip, r2, r7
 801e198:	4566      	cmp	r6, ip
 801e19a:	d322      	bcc.n	801e1e2 <rcutils_string_map_reserve+0xc6>
 801e19c:	1ae3      	subs	r3, r4, r3
 801e19e:	4670      	mov	r0, lr
 801e1a0:	2100      	movs	r1, #0
 801e1a2:	009a      	lsls	r2, r3, #2
 801e1a4:	9201      	str	r2, [sp, #4]
 801e1a6:	f004 f927 	bl	80223f8 <memset>
 801e1aa:	9a01      	ldr	r2, [sp, #4]
 801e1ac:	2100      	movs	r1, #0
 801e1ae:	4630      	mov	r0, r6
 801e1b0:	f004 f922 	bl	80223f8 <memset>
 801e1b4:	e00a      	b.n	801e1cc <rcutils_string_map_reserve+0xb0>
 801e1b6:	694f      	ldr	r7, [r1, #20]
 801e1b8:	6808      	ldr	r0, [r1, #0]
 801e1ba:	4631      	mov	r1, r6
 801e1bc:	47b8      	blx	r7
 801e1be:	682b      	ldr	r3, [r5, #0]
 801e1c0:	4631      	mov	r1, r6
 801e1c2:	6858      	ldr	r0, [r3, #4]
 801e1c4:	601c      	str	r4, [r3, #0]
 801e1c6:	47b8      	blx	r7
 801e1c8:	682d      	ldr	r5, [r5, #0]
 801e1ca:	606c      	str	r4, [r5, #4]
 801e1cc:	2000      	movs	r0, #0
 801e1ce:	60ac      	str	r4, [r5, #8]
 801e1d0:	b002      	add	sp, #8
 801e1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1d6:	2000      	movs	r0, #0
 801e1d8:	e7b0      	b.n	801e13c <rcutils_string_map_reserve+0x20>
 801e1da:	200a      	movs	r0, #10
 801e1dc:	e7ae      	b.n	801e13c <rcutils_string_map_reserve+0x20>
 801e1de:	200b      	movs	r0, #11
 801e1e0:	4770      	bx	lr
 801e1e2:	1f0b      	subs	r3, r1, #4
 801e1e4:	4418      	add	r0, r3
 801e1e6:	4413      	add	r3, r2
 801e1e8:	3a04      	subs	r2, #4
 801e1ea:	4417      	add	r7, r2
 801e1ec:	2200      	movs	r2, #0
 801e1ee:	f843 2f04 	str.w	r2, [r3, #4]!
 801e1f2:	42bb      	cmp	r3, r7
 801e1f4:	f840 2f04 	str.w	r2, [r0, #4]!
 801e1f8:	d1f9      	bne.n	801e1ee <rcutils_string_map_reserve+0xd2>
 801e1fa:	e7e7      	b.n	801e1cc <rcutils_string_map_reserve+0xb0>

0801e1fc <rcutils_string_map_init>:
 801e1fc:	b082      	sub	sp, #8
 801e1fe:	b570      	push	{r4, r5, r6, lr}
 801e200:	ac04      	add	r4, sp, #16
 801e202:	e884 000c 	stmia.w	r4, {r2, r3}
 801e206:	b380      	cbz	r0, 801e26a <rcutils_string_map_init+0x6e>
 801e208:	6806      	ldr	r6, [r0, #0]
 801e20a:	4604      	mov	r4, r0
 801e20c:	b12e      	cbz	r6, 801e21a <rcutils_string_map_init+0x1e>
 801e20e:	251e      	movs	r5, #30
 801e210:	4628      	mov	r0, r5
 801e212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e216:	b002      	add	sp, #8
 801e218:	4770      	bx	lr
 801e21a:	a804      	add	r0, sp, #16
 801e21c:	460d      	mov	r5, r1
 801e21e:	f7f7 f9af 	bl	8015580 <rcutils_allocator_is_valid>
 801e222:	b310      	cbz	r0, 801e26a <rcutils_string_map_init+0x6e>
 801e224:	9b04      	ldr	r3, [sp, #16]
 801e226:	2024      	movs	r0, #36	@ 0x24
 801e228:	9908      	ldr	r1, [sp, #32]
 801e22a:	4798      	blx	r3
 801e22c:	6020      	str	r0, [r4, #0]
 801e22e:	b310      	cbz	r0, 801e276 <rcutils_string_map_init+0x7a>
 801e230:	f10d 0e10 	add.w	lr, sp, #16
 801e234:	f100 0c10 	add.w	ip, r0, #16
 801e238:	e9c0 6600 	strd	r6, r6, [r0]
 801e23c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801e240:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e244:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e248:	f8de 3000 	ldr.w	r3, [lr]
 801e24c:	4629      	mov	r1, r5
 801e24e:	4620      	mov	r0, r4
 801e250:	f8cc 3000 	str.w	r3, [ip]
 801e254:	f7ff ff62 	bl	801e11c <rcutils_string_map_reserve>
 801e258:	4605      	mov	r5, r0
 801e25a:	2800      	cmp	r0, #0
 801e25c:	d0d8      	beq.n	801e210 <rcutils_string_map_init+0x14>
 801e25e:	9b05      	ldr	r3, [sp, #20]
 801e260:	9908      	ldr	r1, [sp, #32]
 801e262:	6820      	ldr	r0, [r4, #0]
 801e264:	4798      	blx	r3
 801e266:	6026      	str	r6, [r4, #0]
 801e268:	e7d2      	b.n	801e210 <rcutils_string_map_init+0x14>
 801e26a:	250b      	movs	r5, #11
 801e26c:	4628      	mov	r0, r5
 801e26e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e272:	b002      	add	sp, #8
 801e274:	4770      	bx	lr
 801e276:	250a      	movs	r5, #10
 801e278:	e7ca      	b.n	801e210 <rcutils_string_map_init+0x14>
 801e27a:	bf00      	nop

0801e27c <rcutils_string_map_fini>:
 801e27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e280:	b082      	sub	sp, #8
 801e282:	2800      	cmp	r0, #0
 801e284:	d03a      	beq.n	801e2fc <rcutils_string_map_fini+0x80>
 801e286:	6804      	ldr	r4, [r0, #0]
 801e288:	4606      	mov	r6, r0
 801e28a:	2c00      	cmp	r4, #0
 801e28c:	d032      	beq.n	801e2f4 <rcutils_string_map_fini+0x78>
 801e28e:	68a3      	ldr	r3, [r4, #8]
 801e290:	b32b      	cbz	r3, 801e2de <rcutils_string_map_fini+0x62>
 801e292:	2500      	movs	r5, #0
 801e294:	6822      	ldr	r2, [r4, #0]
 801e296:	462f      	mov	r7, r5
 801e298:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e29c:	b1e0      	cbz	r0, 801e2d8 <rcutils_string_map_fini+0x5c>
 801e29e:	6a21      	ldr	r1, [r4, #32]
 801e2a0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801e2a4:	9101      	str	r1, [sp, #4]
 801e2a6:	47c0      	blx	r8
 801e2a8:	9901      	ldr	r1, [sp, #4]
 801e2aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 801e2ae:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801e2b2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e2b6:	47c0      	blx	r8
 801e2b8:	68e3      	ldr	r3, [r4, #12]
 801e2ba:	6862      	ldr	r2, [r4, #4]
 801e2bc:	3b01      	subs	r3, #1
 801e2be:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801e2c2:	3501      	adds	r5, #1
 801e2c4:	60e3      	str	r3, [r4, #12]
 801e2c6:	6834      	ldr	r4, [r6, #0]
 801e2c8:	68a3      	ldr	r3, [r4, #8]
 801e2ca:	429d      	cmp	r5, r3
 801e2cc:	d207      	bcs.n	801e2de <rcutils_string_map_fini+0x62>
 801e2ce:	6822      	ldr	r2, [r4, #0]
 801e2d0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e2d4:	2800      	cmp	r0, #0
 801e2d6:	d1e2      	bne.n	801e29e <rcutils_string_map_fini+0x22>
 801e2d8:	3501      	adds	r5, #1
 801e2da:	429d      	cmp	r5, r3
 801e2dc:	d3dc      	bcc.n	801e298 <rcutils_string_map_fini+0x1c>
 801e2de:	2100      	movs	r1, #0
 801e2e0:	4630      	mov	r0, r6
 801e2e2:	f7ff ff1b 	bl	801e11c <rcutils_string_map_reserve>
 801e2e6:	4604      	mov	r4, r0
 801e2e8:	b920      	cbnz	r0, 801e2f4 <rcutils_string_map_fini+0x78>
 801e2ea:	6830      	ldr	r0, [r6, #0]
 801e2ec:	6943      	ldr	r3, [r0, #20]
 801e2ee:	6a01      	ldr	r1, [r0, #32]
 801e2f0:	4798      	blx	r3
 801e2f2:	6034      	str	r4, [r6, #0]
 801e2f4:	4620      	mov	r0, r4
 801e2f6:	b002      	add	sp, #8
 801e2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2fc:	240b      	movs	r4, #11
 801e2fe:	4620      	mov	r0, r4
 801e300:	b002      	add	sp, #8
 801e302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e306:	bf00      	nop

0801e308 <rcutils_string_map_getn>:
 801e308:	b378      	cbz	r0, 801e36a <rcutils_string_map_getn+0x62>
 801e30a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e30e:	f8d0 b000 	ldr.w	fp, [r0]
 801e312:	f1bb 0f00 	cmp.w	fp, #0
 801e316:	d01f      	beq.n	801e358 <rcutils_string_map_getn+0x50>
 801e318:	fab1 f481 	clz	r4, r1
 801e31c:	4688      	mov	r8, r1
 801e31e:	0964      	lsrs	r4, r4, #5
 801e320:	b1d1      	cbz	r1, 801e358 <rcutils_string_map_getn+0x50>
 801e322:	f8db 7008 	ldr.w	r7, [fp, #8]
 801e326:	f8db 6000 	ldr.w	r6, [fp]
 801e32a:	b1af      	cbz	r7, 801e358 <rcutils_string_map_getn+0x50>
 801e32c:	4691      	mov	r9, r2
 801e32e:	3e04      	subs	r6, #4
 801e330:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801e334:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e338:	3401      	adds	r4, #1
 801e33a:	4628      	mov	r0, r5
 801e33c:	b155      	cbz	r5, 801e354 <rcutils_string_map_getn+0x4c>
 801e33e:	f7e1 ffd9 	bl	80002f4 <strlen>
 801e342:	4602      	mov	r2, r0
 801e344:	4629      	mov	r1, r5
 801e346:	4640      	mov	r0, r8
 801e348:	454a      	cmp	r2, r9
 801e34a:	bf38      	it	cc
 801e34c:	464a      	movcc	r2, r9
 801e34e:	f004 f868 	bl	8022422 <strncmp>
 801e352:	b120      	cbz	r0, 801e35e <rcutils_string_map_getn+0x56>
 801e354:	42a7      	cmp	r7, r4
 801e356:	d1eb      	bne.n	801e330 <rcutils_string_map_getn+0x28>
 801e358:	2000      	movs	r0, #0
 801e35a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e35e:	f8db 3004 	ldr.w	r3, [fp, #4]
 801e362:	f853 000a 	ldr.w	r0, [r3, sl]
 801e366:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e36a:	4770      	bx	lr
 801e36c:	0000      	movs	r0, r0
	...

0801e370 <rmw_get_zero_initialized_context>:
 801e370:	b510      	push	{r4, lr}
 801e372:	4604      	mov	r4, r0
 801e374:	3010      	adds	r0, #16
 801e376:	f000 f80f 	bl	801e398 <rmw_get_zero_initialized_init_options>
 801e37a:	2300      	movs	r3, #0
 801e37c:	4620      	mov	r0, r4
 801e37e:	60a3      	str	r3, [r4, #8]
 801e380:	64a3      	str	r3, [r4, #72]	@ 0x48
 801e382:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801e384:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801e390 <rmw_get_zero_initialized_context+0x20>
 801e388:	ed84 7b00 	vstr	d7, [r4]
 801e38c:	bd10      	pop	{r4, pc}
 801e38e:	bf00      	nop
	...

0801e398 <rmw_get_zero_initialized_init_options>:
 801e398:	b510      	push	{r4, lr}
 801e39a:	4604      	mov	r4, r0
 801e39c:	2238      	movs	r2, #56	@ 0x38
 801e39e:	2100      	movs	r1, #0
 801e3a0:	f004 f82a 	bl	80223f8 <memset>
 801e3a4:	f104 0010 	add.w	r0, r4, #16
 801e3a8:	f000 f806 	bl	801e3b8 <rmw_get_default_security_options>
 801e3ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e3b0:	4620      	mov	r0, r4
 801e3b2:	60e3      	str	r3, [r4, #12]
 801e3b4:	bd10      	pop	{r4, pc}
 801e3b6:	bf00      	nop

0801e3b8 <rmw_get_default_security_options>:
 801e3b8:	2200      	movs	r2, #0
 801e3ba:	7002      	strb	r2, [r0, #0]
 801e3bc:	6042      	str	r2, [r0, #4]
 801e3be:	4770      	bx	lr

0801e3c0 <rmw_subscription_content_filter_options_fini>:
 801e3c0:	b1b0      	cbz	r0, 801e3f0 <rmw_subscription_content_filter_options_fini+0x30>
 801e3c2:	b538      	push	{r3, r4, r5, lr}
 801e3c4:	4604      	mov	r4, r0
 801e3c6:	4608      	mov	r0, r1
 801e3c8:	460d      	mov	r5, r1
 801e3ca:	f7f7 f8d9 	bl	8015580 <rcutils_allocator_is_valid>
 801e3ce:	b168      	cbz	r0, 801e3ec <rmw_subscription_content_filter_options_fini+0x2c>
 801e3d0:	6820      	ldr	r0, [r4, #0]
 801e3d2:	b120      	cbz	r0, 801e3de <rmw_subscription_content_filter_options_fini+0x1e>
 801e3d4:	686b      	ldr	r3, [r5, #4]
 801e3d6:	6929      	ldr	r1, [r5, #16]
 801e3d8:	4798      	blx	r3
 801e3da:	2300      	movs	r3, #0
 801e3dc:	6023      	str	r3, [r4, #0]
 801e3de:	1d20      	adds	r0, r4, #4
 801e3e0:	f003 f97c 	bl	80216dc <rcutils_string_array_fini>
 801e3e4:	3800      	subs	r0, #0
 801e3e6:	bf18      	it	ne
 801e3e8:	2001      	movne	r0, #1
 801e3ea:	bd38      	pop	{r3, r4, r5, pc}
 801e3ec:	200b      	movs	r0, #11
 801e3ee:	bd38      	pop	{r3, r4, r5, pc}
 801e3f0:	200b      	movs	r0, #11
 801e3f2:	4770      	bx	lr

0801e3f4 <rmw_get_default_subscription_options>:
 801e3f4:	2200      	movs	r2, #0
 801e3f6:	e9c0 2200 	strd	r2, r2, [r0]
 801e3fa:	6082      	str	r2, [r0, #8]
 801e3fc:	4770      	bx	lr
 801e3fe:	bf00      	nop

0801e400 <rmw_time_equal>:
 801e400:	b4f0      	push	{r4, r5, r6, r7}
 801e402:	b084      	sub	sp, #16
 801e404:	ac04      	add	r4, sp, #16
 801e406:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e40a:	4603      	mov	r3, r0
 801e40c:	4925      	ldr	r1, [pc, #148]	@ (801e4a4 <rmw_time_equal+0xa4>)
 801e40e:	9d01      	ldr	r5, [sp, #4]
 801e410:	4610      	mov	r0, r2
 801e412:	4299      	cmp	r1, r3
 801e414:	f04f 0202 	mov.w	r2, #2
 801e418:	9e03      	ldr	r6, [sp, #12]
 801e41a:	41aa      	sbcs	r2, r5
 801e41c:	d330      	bcc.n	801e480 <rmw_time_equal+0x80>
 801e41e:	4c22      	ldr	r4, [pc, #136]	@ (801e4a8 <rmw_time_equal+0xa8>)
 801e420:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e424:	fba3 3204 	umull	r3, r2, r3, r4
 801e428:	fb04 2205 	mla	r2, r4, r5, r2
 801e42c:	43dd      	mvns	r5, r3
 801e42e:	1a8c      	subs	r4, r1, r2
 801e430:	4285      	cmp	r5, r0
 801e432:	41b4      	sbcs	r4, r6
 801e434:	d332      	bcc.n	801e49c <rmw_time_equal+0x9c>
 801e436:	eb10 0c03 	adds.w	ip, r0, r3
 801e43a:	eb42 0106 	adc.w	r1, r2, r6
 801e43e:	4819      	ldr	r0, [pc, #100]	@ (801e4a4 <rmw_time_equal+0xa4>)
 801e440:	2202      	movs	r2, #2
 801e442:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e444:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e446:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801e44a:	4298      	cmp	r0, r3
 801e44c:	41b2      	sbcs	r2, r6
 801e44e:	d31c      	bcc.n	801e48a <rmw_time_equal+0x8a>
 801e450:	4c15      	ldr	r4, [pc, #84]	@ (801e4a8 <rmw_time_equal+0xa8>)
 801e452:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801e456:	fba3 3204 	umull	r3, r2, r3, r4
 801e45a:	fb04 2206 	mla	r2, r4, r6, r2
 801e45e:	43de      	mvns	r6, r3
 801e460:	1a84      	subs	r4, r0, r2
 801e462:	42ae      	cmp	r6, r5
 801e464:	41bc      	sbcs	r4, r7
 801e466:	d315      	bcc.n	801e494 <rmw_time_equal+0x94>
 801e468:	195b      	adds	r3, r3, r5
 801e46a:	eb42 0207 	adc.w	r2, r2, r7
 801e46e:	428a      	cmp	r2, r1
 801e470:	bf08      	it	eq
 801e472:	4563      	cmpeq	r3, ip
 801e474:	bf0c      	ite	eq
 801e476:	2001      	moveq	r0, #1
 801e478:	2000      	movne	r0, #0
 801e47a:	b004      	add	sp, #16
 801e47c:	bcf0      	pop	{r4, r5, r6, r7}
 801e47e:	4770      	bx	lr
 801e480:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e484:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e488:	e7d9      	b.n	801e43e <rmw_time_equal+0x3e>
 801e48a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e48e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801e492:	e7ec      	b.n	801e46e <rmw_time_equal+0x6e>
 801e494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e498:	4602      	mov	r2, r0
 801e49a:	e7e8      	b.n	801e46e <rmw_time_equal+0x6e>
 801e49c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e4a0:	e7cd      	b.n	801e43e <rmw_time_equal+0x3e>
 801e4a2:	bf00      	nop
 801e4a4:	25c17d04 	.word	0x25c17d04
 801e4a8:	3b9aca00 	.word	0x3b9aca00

0801e4ac <rmw_time_total_nsec>:
 801e4ac:	b470      	push	{r4, r5, r6}
 801e4ae:	b085      	sub	sp, #20
 801e4b0:	ac04      	add	r4, sp, #16
 801e4b2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e4b6:	4603      	mov	r3, r0
 801e4b8:	4913      	ldr	r1, [pc, #76]	@ (801e508 <rmw_time_total_nsec+0x5c>)
 801e4ba:	9d01      	ldr	r5, [sp, #4]
 801e4bc:	4610      	mov	r0, r2
 801e4be:	4299      	cmp	r1, r3
 801e4c0:	f04f 0202 	mov.w	r2, #2
 801e4c4:	9e03      	ldr	r6, [sp, #12]
 801e4c6:	41aa      	sbcs	r2, r5
 801e4c8:	d311      	bcc.n	801e4ee <rmw_time_total_nsec+0x42>
 801e4ca:	4c10      	ldr	r4, [pc, #64]	@ (801e50c <rmw_time_total_nsec+0x60>)
 801e4cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e4d0:	fba3 3204 	umull	r3, r2, r3, r4
 801e4d4:	fb04 2205 	mla	r2, r4, r5, r2
 801e4d8:	43dd      	mvns	r5, r3
 801e4da:	1a8c      	subs	r4, r1, r2
 801e4dc:	4285      	cmp	r5, r0
 801e4de:	41b4      	sbcs	r4, r6
 801e4e0:	d30c      	bcc.n	801e4fc <rmw_time_total_nsec+0x50>
 801e4e2:	1818      	adds	r0, r3, r0
 801e4e4:	eb42 0106 	adc.w	r1, r2, r6
 801e4e8:	b005      	add	sp, #20
 801e4ea:	bc70      	pop	{r4, r5, r6}
 801e4ec:	4770      	bx	lr
 801e4ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e4f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e4f6:	b005      	add	sp, #20
 801e4f8:	bc70      	pop	{r4, r5, r6}
 801e4fa:	4770      	bx	lr
 801e4fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e500:	b005      	add	sp, #20
 801e502:	bc70      	pop	{r4, r5, r6}
 801e504:	4770      	bx	lr
 801e506:	bf00      	nop
 801e508:	25c17d04 	.word	0x25c17d04
 801e50c:	3b9aca00 	.word	0x3b9aca00

0801e510 <rmw_get_zero_initialized_message_info>:
 801e510:	b510      	push	{r4, lr}
 801e512:	4604      	mov	r4, r0
 801e514:	2240      	movs	r2, #64	@ 0x40
 801e516:	2100      	movs	r1, #0
 801e518:	f003 ff6e 	bl	80223f8 <memset>
 801e51c:	4620      	mov	r0, r4
 801e51e:	bd10      	pop	{r4, pc}

0801e520 <rmw_validate_full_topic_name>:
 801e520:	2800      	cmp	r0, #0
 801e522:	d05d      	beq.n	801e5e0 <rmw_validate_full_topic_name+0xc0>
 801e524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e528:	460d      	mov	r5, r1
 801e52a:	2900      	cmp	r1, #0
 801e52c:	d05a      	beq.n	801e5e4 <rmw_validate_full_topic_name+0xc4>
 801e52e:	4604      	mov	r4, r0
 801e530:	4616      	mov	r6, r2
 801e532:	f7e1 fedf 	bl	80002f4 <strlen>
 801e536:	b150      	cbz	r0, 801e54e <rmw_validate_full_topic_name+0x2e>
 801e538:	7823      	ldrb	r3, [r4, #0]
 801e53a:	2b2f      	cmp	r3, #47	@ 0x2f
 801e53c:	d00e      	beq.n	801e55c <rmw_validate_full_topic_name+0x3c>
 801e53e:	2302      	movs	r3, #2
 801e540:	602b      	str	r3, [r5, #0]
 801e542:	b146      	cbz	r6, 801e556 <rmw_validate_full_topic_name+0x36>
 801e544:	2300      	movs	r3, #0
 801e546:	4618      	mov	r0, r3
 801e548:	6033      	str	r3, [r6, #0]
 801e54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e54e:	2301      	movs	r3, #1
 801e550:	602b      	str	r3, [r5, #0]
 801e552:	2e00      	cmp	r6, #0
 801e554:	d1f6      	bne.n	801e544 <rmw_validate_full_topic_name+0x24>
 801e556:	2000      	movs	r0, #0
 801e558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e55c:	1e43      	subs	r3, r0, #1
 801e55e:	5ce2      	ldrb	r2, [r4, r3]
 801e560:	2a2f      	cmp	r2, #47	@ 0x2f
 801e562:	d041      	beq.n	801e5e8 <rmw_validate_full_topic_name+0xc8>
 801e564:	1e62      	subs	r2, r4, #1
 801e566:	f1c4 0e01 	rsb	lr, r4, #1
 801e56a:	eb02 0800 	add.w	r8, r2, r0
 801e56e:	eb0e 0702 	add.w	r7, lr, r2
 801e572:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e576:	f023 0120 	bic.w	r1, r3, #32
 801e57a:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801e57e:	3941      	subs	r1, #65	@ 0x41
 801e580:	2919      	cmp	r1, #25
 801e582:	d90f      	bls.n	801e5a4 <rmw_validate_full_topic_name+0x84>
 801e584:	f1bc 0f0a 	cmp.w	ip, #10
 801e588:	d90c      	bls.n	801e5a4 <rmw_validate_full_topic_name+0x84>
 801e58a:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801e58e:	fab3 f383 	clz	r3, r3
 801e592:	095b      	lsrs	r3, r3, #5
 801e594:	b933      	cbnz	r3, 801e5a4 <rmw_validate_full_topic_name+0x84>
 801e596:	2204      	movs	r2, #4
 801e598:	602a      	str	r2, [r5, #0]
 801e59a:	2e00      	cmp	r6, #0
 801e59c:	d0db      	beq.n	801e556 <rmw_validate_full_topic_name+0x36>
 801e59e:	4618      	mov	r0, r3
 801e5a0:	6037      	str	r7, [r6, #0]
 801e5a2:	e7d2      	b.n	801e54a <rmw_validate_full_topic_name+0x2a>
 801e5a4:	4542      	cmp	r2, r8
 801e5a6:	d1e2      	bne.n	801e56e <rmw_validate_full_topic_name+0x4e>
 801e5a8:	2301      	movs	r3, #1
 801e5aa:	4f1a      	ldr	r7, [pc, #104]	@ (801e614 <rmw_validate_full_topic_name+0xf4>)
 801e5ac:	e004      	b.n	801e5b8 <rmw_validate_full_topic_name+0x98>
 801e5ae:	4298      	cmp	r0, r3
 801e5b0:	f104 0401 	add.w	r4, r4, #1
 801e5b4:	4613      	mov	r3, r2
 801e5b6:	d91c      	bls.n	801e5f2 <rmw_validate_full_topic_name+0xd2>
 801e5b8:	4298      	cmp	r0, r3
 801e5ba:	f103 0201 	add.w	r2, r3, #1
 801e5be:	d0f6      	beq.n	801e5ae <rmw_validate_full_topic_name+0x8e>
 801e5c0:	7821      	ldrb	r1, [r4, #0]
 801e5c2:	292f      	cmp	r1, #47	@ 0x2f
 801e5c4:	d1f3      	bne.n	801e5ae <rmw_validate_full_topic_name+0x8e>
 801e5c6:	7861      	ldrb	r1, [r4, #1]
 801e5c8:	292f      	cmp	r1, #47	@ 0x2f
 801e5ca:	d01e      	beq.n	801e60a <rmw_validate_full_topic_name+0xea>
 801e5cc:	5dc9      	ldrb	r1, [r1, r7]
 801e5ce:	0749      	lsls	r1, r1, #29
 801e5d0:	d5ed      	bpl.n	801e5ae <rmw_validate_full_topic_name+0x8e>
 801e5d2:	2206      	movs	r2, #6
 801e5d4:	602a      	str	r2, [r5, #0]
 801e5d6:	2e00      	cmp	r6, #0
 801e5d8:	d0bd      	beq.n	801e556 <rmw_validate_full_topic_name+0x36>
 801e5da:	2000      	movs	r0, #0
 801e5dc:	6033      	str	r3, [r6, #0]
 801e5de:	e7b4      	b.n	801e54a <rmw_validate_full_topic_name+0x2a>
 801e5e0:	200b      	movs	r0, #11
 801e5e2:	4770      	bx	lr
 801e5e4:	200b      	movs	r0, #11
 801e5e6:	e7b0      	b.n	801e54a <rmw_validate_full_topic_name+0x2a>
 801e5e8:	2203      	movs	r2, #3
 801e5ea:	602a      	str	r2, [r5, #0]
 801e5ec:	2e00      	cmp	r6, #0
 801e5ee:	d1f4      	bne.n	801e5da <rmw_validate_full_topic_name+0xba>
 801e5f0:	e7b1      	b.n	801e556 <rmw_validate_full_topic_name+0x36>
 801e5f2:	28f7      	cmp	r0, #247	@ 0xf7
 801e5f4:	d803      	bhi.n	801e5fe <rmw_validate_full_topic_name+0xde>
 801e5f6:	2300      	movs	r3, #0
 801e5f8:	4618      	mov	r0, r3
 801e5fa:	602b      	str	r3, [r5, #0]
 801e5fc:	e7a5      	b.n	801e54a <rmw_validate_full_topic_name+0x2a>
 801e5fe:	2307      	movs	r3, #7
 801e600:	602b      	str	r3, [r5, #0]
 801e602:	2e00      	cmp	r6, #0
 801e604:	d0a7      	beq.n	801e556 <rmw_validate_full_topic_name+0x36>
 801e606:	23f6      	movs	r3, #246	@ 0xf6
 801e608:	e7e7      	b.n	801e5da <rmw_validate_full_topic_name+0xba>
 801e60a:	2205      	movs	r2, #5
 801e60c:	602a      	str	r2, [r5, #0]
 801e60e:	2e00      	cmp	r6, #0
 801e610:	d1e3      	bne.n	801e5da <rmw_validate_full_topic_name+0xba>
 801e612:	e7a0      	b.n	801e556 <rmw_validate_full_topic_name+0x36>
 801e614:	08025b2a 	.word	0x08025b2a

0801e618 <rmw_validate_namespace_with_size>:
 801e618:	2800      	cmp	r0, #0
 801e61a:	d043      	beq.n	801e6a4 <rmw_validate_namespace_with_size+0x8c>
 801e61c:	b570      	push	{r4, r5, r6, lr}
 801e61e:	4614      	mov	r4, r2
 801e620:	b0c2      	sub	sp, #264	@ 0x108
 801e622:	b32a      	cbz	r2, 801e670 <rmw_validate_namespace_with_size+0x58>
 801e624:	2901      	cmp	r1, #1
 801e626:	460d      	mov	r5, r1
 801e628:	461e      	mov	r6, r3
 801e62a:	d102      	bne.n	801e632 <rmw_validate_namespace_with_size+0x1a>
 801e62c:	7803      	ldrb	r3, [r0, #0]
 801e62e:	2b2f      	cmp	r3, #47	@ 0x2f
 801e630:	d012      	beq.n	801e658 <rmw_validate_namespace_with_size+0x40>
 801e632:	aa01      	add	r2, sp, #4
 801e634:	4669      	mov	r1, sp
 801e636:	f7ff ff73 	bl	801e520 <rmw_validate_full_topic_name>
 801e63a:	b980      	cbnz	r0, 801e65e <rmw_validate_namespace_with_size+0x46>
 801e63c:	9a00      	ldr	r2, [sp, #0]
 801e63e:	b14a      	cbz	r2, 801e654 <rmw_validate_namespace_with_size+0x3c>
 801e640:	2a07      	cmp	r2, #7
 801e642:	d007      	beq.n	801e654 <rmw_validate_namespace_with_size+0x3c>
 801e644:	1e53      	subs	r3, r2, #1
 801e646:	2b05      	cmp	r3, #5
 801e648:	d82e      	bhi.n	801e6a8 <rmw_validate_namespace_with_size+0x90>
 801e64a:	e8df f003 	tbb	[pc, r3]
 801e64e:	1f1c      	.short	0x1f1c
 801e650:	14282522 	.word	0x14282522
 801e654:	2df5      	cmp	r5, #245	@ 0xf5
 801e656:	d804      	bhi.n	801e662 <rmw_validate_namespace_with_size+0x4a>
 801e658:	2300      	movs	r3, #0
 801e65a:	4618      	mov	r0, r3
 801e65c:	6023      	str	r3, [r4, #0]
 801e65e:	b042      	add	sp, #264	@ 0x108
 801e660:	bd70      	pop	{r4, r5, r6, pc}
 801e662:	2307      	movs	r3, #7
 801e664:	6023      	str	r3, [r4, #0]
 801e666:	2e00      	cmp	r6, #0
 801e668:	d0f9      	beq.n	801e65e <rmw_validate_namespace_with_size+0x46>
 801e66a:	23f4      	movs	r3, #244	@ 0xf4
 801e66c:	6033      	str	r3, [r6, #0]
 801e66e:	e7f6      	b.n	801e65e <rmw_validate_namespace_with_size+0x46>
 801e670:	200b      	movs	r0, #11
 801e672:	b042      	add	sp, #264	@ 0x108
 801e674:	bd70      	pop	{r4, r5, r6, pc}
 801e676:	2306      	movs	r3, #6
 801e678:	6023      	str	r3, [r4, #0]
 801e67a:	2e00      	cmp	r6, #0
 801e67c:	d0ef      	beq.n	801e65e <rmw_validate_namespace_with_size+0x46>
 801e67e:	9b01      	ldr	r3, [sp, #4]
 801e680:	6033      	str	r3, [r6, #0]
 801e682:	b042      	add	sp, #264	@ 0x108
 801e684:	bd70      	pop	{r4, r5, r6, pc}
 801e686:	2301      	movs	r3, #1
 801e688:	6023      	str	r3, [r4, #0]
 801e68a:	e7f6      	b.n	801e67a <rmw_validate_namespace_with_size+0x62>
 801e68c:	2302      	movs	r3, #2
 801e68e:	6023      	str	r3, [r4, #0]
 801e690:	e7f3      	b.n	801e67a <rmw_validate_namespace_with_size+0x62>
 801e692:	2303      	movs	r3, #3
 801e694:	6023      	str	r3, [r4, #0]
 801e696:	e7f0      	b.n	801e67a <rmw_validate_namespace_with_size+0x62>
 801e698:	2304      	movs	r3, #4
 801e69a:	6023      	str	r3, [r4, #0]
 801e69c:	e7ed      	b.n	801e67a <rmw_validate_namespace_with_size+0x62>
 801e69e:	2305      	movs	r3, #5
 801e6a0:	6023      	str	r3, [r4, #0]
 801e6a2:	e7ea      	b.n	801e67a <rmw_validate_namespace_with_size+0x62>
 801e6a4:	200b      	movs	r0, #11
 801e6a6:	4770      	bx	lr
 801e6a8:	4613      	mov	r3, r2
 801e6aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e6ae:	4a03      	ldr	r2, [pc, #12]	@ (801e6bc <rmw_validate_namespace_with_size+0xa4>)
 801e6b0:	a802      	add	r0, sp, #8
 801e6b2:	f7ff fca1 	bl	801dff8 <rcutils_snprintf>
 801e6b6:	2001      	movs	r0, #1
 801e6b8:	e7d1      	b.n	801e65e <rmw_validate_namespace_with_size+0x46>
 801e6ba:	bf00      	nop
 801e6bc:	080255a8 	.word	0x080255a8

0801e6c0 <rmw_validate_namespace>:
 801e6c0:	b168      	cbz	r0, 801e6de <rmw_validate_namespace+0x1e>
 801e6c2:	b570      	push	{r4, r5, r6, lr}
 801e6c4:	460d      	mov	r5, r1
 801e6c6:	4616      	mov	r6, r2
 801e6c8:	4604      	mov	r4, r0
 801e6ca:	f7e1 fe13 	bl	80002f4 <strlen>
 801e6ce:	4633      	mov	r3, r6
 801e6d0:	4601      	mov	r1, r0
 801e6d2:	462a      	mov	r2, r5
 801e6d4:	4620      	mov	r0, r4
 801e6d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e6da:	f7ff bf9d 	b.w	801e618 <rmw_validate_namespace_with_size>
 801e6de:	200b      	movs	r0, #11
 801e6e0:	4770      	bx	lr
 801e6e2:	bf00      	nop

0801e6e4 <rmw_namespace_validation_result_string>:
 801e6e4:	2807      	cmp	r0, #7
 801e6e6:	d803      	bhi.n	801e6f0 <rmw_namespace_validation_result_string+0xc>
 801e6e8:	4b02      	ldr	r3, [pc, #8]	@ (801e6f4 <rmw_namespace_validation_result_string+0x10>)
 801e6ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e6ee:	4770      	bx	lr
 801e6f0:	4801      	ldr	r0, [pc, #4]	@ (801e6f8 <rmw_namespace_validation_result_string+0x14>)
 801e6f2:	4770      	bx	lr
 801e6f4:	080257a0 	.word	0x080257a0
 801e6f8:	080255f8 	.word	0x080255f8

0801e6fc <rmw_validate_node_name>:
 801e6fc:	2800      	cmp	r0, #0
 801e6fe:	d042      	beq.n	801e786 <rmw_validate_node_name+0x8a>
 801e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e704:	460d      	mov	r5, r1
 801e706:	2900      	cmp	r1, #0
 801e708:	d03f      	beq.n	801e78a <rmw_validate_node_name+0x8e>
 801e70a:	4604      	mov	r4, r0
 801e70c:	4616      	mov	r6, r2
 801e70e:	f7e1 fdf1 	bl	80002f4 <strlen>
 801e712:	b310      	cbz	r0, 801e75a <rmw_validate_node_name+0x5e>
 801e714:	1e63      	subs	r3, r4, #1
 801e716:	f1c4 0101 	rsb	r1, r4, #1
 801e71a:	eb03 0800 	add.w	r8, r3, r0
 801e71e:	18cf      	adds	r7, r1, r3
 801e720:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801e724:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801e728:	f02e 0c20 	bic.w	ip, lr, #32
 801e72c:	2a09      	cmp	r2, #9
 801e72e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801e732:	d905      	bls.n	801e740 <rmw_validate_node_name+0x44>
 801e734:	f1bc 0f19 	cmp.w	ip, #25
 801e738:	d902      	bls.n	801e740 <rmw_validate_node_name+0x44>
 801e73a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801e73e:	d114      	bne.n	801e76a <rmw_validate_node_name+0x6e>
 801e740:	4598      	cmp	r8, r3
 801e742:	d1ec      	bne.n	801e71e <rmw_validate_node_name+0x22>
 801e744:	7822      	ldrb	r2, [r4, #0]
 801e746:	4b16      	ldr	r3, [pc, #88]	@ (801e7a0 <rmw_validate_node_name+0xa4>)
 801e748:	5cd3      	ldrb	r3, [r2, r3]
 801e74a:	f013 0304 	ands.w	r3, r3, #4
 801e74e:	d113      	bne.n	801e778 <rmw_validate_node_name+0x7c>
 801e750:	28ff      	cmp	r0, #255	@ 0xff
 801e752:	d81c      	bhi.n	801e78e <rmw_validate_node_name+0x92>
 801e754:	4618      	mov	r0, r3
 801e756:	602b      	str	r3, [r5, #0]
 801e758:	e00c      	b.n	801e774 <rmw_validate_node_name+0x78>
 801e75a:	2301      	movs	r3, #1
 801e75c:	602b      	str	r3, [r5, #0]
 801e75e:	b17e      	cbz	r6, 801e780 <rmw_validate_node_name+0x84>
 801e760:	2300      	movs	r3, #0
 801e762:	4618      	mov	r0, r3
 801e764:	6033      	str	r3, [r6, #0]
 801e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e76a:	2302      	movs	r3, #2
 801e76c:	602b      	str	r3, [r5, #0]
 801e76e:	b13e      	cbz	r6, 801e780 <rmw_validate_node_name+0x84>
 801e770:	2000      	movs	r0, #0
 801e772:	6037      	str	r7, [r6, #0]
 801e774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e778:	2303      	movs	r3, #3
 801e77a:	602b      	str	r3, [r5, #0]
 801e77c:	2e00      	cmp	r6, #0
 801e77e:	d1ef      	bne.n	801e760 <rmw_validate_node_name+0x64>
 801e780:	2000      	movs	r0, #0
 801e782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e786:	200b      	movs	r0, #11
 801e788:	4770      	bx	lr
 801e78a:	200b      	movs	r0, #11
 801e78c:	e7f2      	b.n	801e774 <rmw_validate_node_name+0x78>
 801e78e:	2204      	movs	r2, #4
 801e790:	602a      	str	r2, [r5, #0]
 801e792:	2e00      	cmp	r6, #0
 801e794:	d0f4      	beq.n	801e780 <rmw_validate_node_name+0x84>
 801e796:	22fe      	movs	r2, #254	@ 0xfe
 801e798:	4618      	mov	r0, r3
 801e79a:	6032      	str	r2, [r6, #0]
 801e79c:	e7ea      	b.n	801e774 <rmw_validate_node_name+0x78>
 801e79e:	bf00      	nop
 801e7a0:	08025b2a 	.word	0x08025b2a

0801e7a4 <rmw_node_name_validation_result_string>:
 801e7a4:	2804      	cmp	r0, #4
 801e7a6:	d803      	bhi.n	801e7b0 <rmw_node_name_validation_result_string+0xc>
 801e7a8:	4b02      	ldr	r3, [pc, #8]	@ (801e7b4 <rmw_node_name_validation_result_string+0x10>)
 801e7aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e7ae:	4770      	bx	lr
 801e7b0:	4801      	ldr	r0, [pc, #4]	@ (801e7b8 <rmw_node_name_validation_result_string+0x14>)
 801e7b2:	4770      	bx	lr
 801e7b4:	080258ac 	.word	0x080258ac
 801e7b8:	080257c0 	.word	0x080257c0

0801e7bc <get_memory>:
 801e7bc:	4603      	mov	r3, r0
 801e7be:	6840      	ldr	r0, [r0, #4]
 801e7c0:	b158      	cbz	r0, 801e7da <get_memory+0x1e>
 801e7c2:	6842      	ldr	r2, [r0, #4]
 801e7c4:	605a      	str	r2, [r3, #4]
 801e7c6:	b10a      	cbz	r2, 801e7cc <get_memory+0x10>
 801e7c8:	2100      	movs	r1, #0
 801e7ca:	6011      	str	r1, [r2, #0]
 801e7cc:	681a      	ldr	r2, [r3, #0]
 801e7ce:	6042      	str	r2, [r0, #4]
 801e7d0:	b102      	cbz	r2, 801e7d4 <get_memory+0x18>
 801e7d2:	6010      	str	r0, [r2, #0]
 801e7d4:	2200      	movs	r2, #0
 801e7d6:	6002      	str	r2, [r0, #0]
 801e7d8:	6018      	str	r0, [r3, #0]
 801e7da:	4770      	bx	lr

0801e7dc <put_memory>:
 801e7dc:	680b      	ldr	r3, [r1, #0]
 801e7de:	b10b      	cbz	r3, 801e7e4 <put_memory+0x8>
 801e7e0:	684a      	ldr	r2, [r1, #4]
 801e7e2:	605a      	str	r2, [r3, #4]
 801e7e4:	684a      	ldr	r2, [r1, #4]
 801e7e6:	b102      	cbz	r2, 801e7ea <put_memory+0xe>
 801e7e8:	6013      	str	r3, [r2, #0]
 801e7ea:	6803      	ldr	r3, [r0, #0]
 801e7ec:	428b      	cmp	r3, r1
 801e7ee:	6843      	ldr	r3, [r0, #4]
 801e7f0:	bf08      	it	eq
 801e7f2:	6002      	streq	r2, [r0, #0]
 801e7f4:	604b      	str	r3, [r1, #4]
 801e7f6:	b103      	cbz	r3, 801e7fa <put_memory+0x1e>
 801e7f8:	6019      	str	r1, [r3, #0]
 801e7fa:	2300      	movs	r3, #0
 801e7fc:	600b      	str	r3, [r1, #0]
 801e7fe:	6041      	str	r1, [r0, #4]
 801e800:	4770      	bx	lr
 801e802:	bf00      	nop

0801e804 <rmw_destroy_client>:
 801e804:	b570      	push	{r4, r5, r6, lr}
 801e806:	b128      	cbz	r0, 801e814 <rmw_destroy_client+0x10>
 801e808:	4604      	mov	r4, r0
 801e80a:	6800      	ldr	r0, [r0, #0]
 801e80c:	460d      	mov	r5, r1
 801e80e:	f7f7 fd7f 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 801e812:	b910      	cbnz	r0, 801e81a <rmw_destroy_client+0x16>
 801e814:	2401      	movs	r4, #1
 801e816:	4620      	mov	r0, r4
 801e818:	bd70      	pop	{r4, r5, r6, pc}
 801e81a:	6863      	ldr	r3, [r4, #4]
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d0f9      	beq.n	801e814 <rmw_destroy_client+0x10>
 801e820:	2d00      	cmp	r5, #0
 801e822:	d0f7      	beq.n	801e814 <rmw_destroy_client+0x10>
 801e824:	6828      	ldr	r0, [r5, #0]
 801e826:	f7f7 fd73 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 801e82a:	2800      	cmp	r0, #0
 801e82c:	d0f2      	beq.n	801e814 <rmw_destroy_client+0x10>
 801e82e:	686e      	ldr	r6, [r5, #4]
 801e830:	2e00      	cmp	r6, #0
 801e832:	d0ef      	beq.n	801e814 <rmw_destroy_client+0x10>
 801e834:	6864      	ldr	r4, [r4, #4]
 801e836:	6932      	ldr	r2, [r6, #16]
 801e838:	6920      	ldr	r0, [r4, #16]
 801e83a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e83e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e842:	6819      	ldr	r1, [r3, #0]
 801e844:	f002 faca 	bl	8020ddc <uxr_buffer_cancel_data>
 801e848:	4602      	mov	r2, r0
 801e84a:	6920      	ldr	r0, [r4, #16]
 801e84c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e850:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e854:	f7f7 fc4a 	bl	80160ec <run_xrce_session>
 801e858:	6920      	ldr	r0, [r4, #16]
 801e85a:	6932      	ldr	r2, [r6, #16]
 801e85c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e860:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e864:	6819      	ldr	r1, [r3, #0]
 801e866:	f7f8 fb5d 	bl	8016f24 <uxr_buffer_delete_entity>
 801e86a:	4602      	mov	r2, r0
 801e86c:	6920      	ldr	r0, [r4, #16]
 801e86e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e872:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e876:	f7f7 fc39 	bl	80160ec <run_xrce_session>
 801e87a:	4603      	mov	r3, r0
 801e87c:	4628      	mov	r0, r5
 801e87e:	2b00      	cmp	r3, #0
 801e880:	bf14      	ite	ne
 801e882:	2400      	movne	r4, #0
 801e884:	2402      	moveq	r4, #2
 801e886:	f7f7 fb0d 	bl	8015ea4 <rmw_uxrce_fini_client_memory>
 801e88a:	e7c4      	b.n	801e816 <rmw_destroy_client+0x12>

0801e88c <rmw_get_implementation_identifier>:
 801e88c:	4b01      	ldr	r3, [pc, #4]	@ (801e894 <rmw_get_implementation_identifier+0x8>)
 801e88e:	6818      	ldr	r0, [r3, #0]
 801e890:	4770      	bx	lr
 801e892:	bf00      	nop
 801e894:	080258d8 	.word	0x080258d8

0801e898 <rmw_init_options_init>:
 801e898:	b084      	sub	sp, #16
 801e89a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e89c:	b083      	sub	sp, #12
 801e89e:	ad09      	add	r5, sp, #36	@ 0x24
 801e8a0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801e8a4:	b130      	cbz	r0, 801e8b4 <rmw_init_options_init+0x1c>
 801e8a6:	4604      	mov	r4, r0
 801e8a8:	4628      	mov	r0, r5
 801e8aa:	f7f6 fe69 	bl	8015580 <rcutils_allocator_is_valid>
 801e8ae:	b108      	cbz	r0, 801e8b4 <rmw_init_options_init+0x1c>
 801e8b0:	68a6      	ldr	r6, [r4, #8]
 801e8b2:	b12e      	cbz	r6, 801e8c0 <rmw_init_options_init+0x28>
 801e8b4:	200b      	movs	r0, #11
 801e8b6:	b003      	add	sp, #12
 801e8b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e8bc:	b004      	add	sp, #16
 801e8be:	4770      	bx	lr
 801e8c0:	2200      	movs	r2, #0
 801e8c2:	2300      	movs	r3, #0
 801e8c4:	f104 0c20 	add.w	ip, r4, #32
 801e8c8:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801e964 <rmw_init_options_init+0xcc>
 801e8cc:	466f      	mov	r7, sp
 801e8ce:	e9c4 2300 	strd	r2, r3, [r4]
 801e8d2:	4b20      	ldr	r3, [pc, #128]	@ (801e954 <rmw_init_options_init+0xbc>)
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	60a3      	str	r3, [r4, #8]
 801e8d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e8da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e8de:	682b      	ldr	r3, [r5, #0]
 801e8e0:	4638      	mov	r0, r7
 801e8e2:	f8cc 3000 	str.w	r3, [ip]
 801e8e6:	f8c4 e01c 	str.w	lr, [r4, #28]
 801e8ea:	60e6      	str	r6, [r4, #12]
 801e8ec:	f7ff fd64 	bl	801e3b8 <rmw_get_default_security_options>
 801e8f0:	f104 0310 	add.w	r3, r4, #16
 801e8f4:	2203      	movs	r2, #3
 801e8f6:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e8fa:	e883 0003 	stmia.w	r3, {r0, r1}
 801e8fe:	4816      	ldr	r0, [pc, #88]	@ (801e958 <rmw_init_options_init+0xc0>)
 801e900:	4916      	ldr	r1, [pc, #88]	@ (801e95c <rmw_init_options_init+0xc4>)
 801e902:	7626      	strb	r6, [r4, #24]
 801e904:	f7f7 fa0e 	bl	8015d24 <rmw_uxrce_init_init_options_impl_memory>
 801e908:	4813      	ldr	r0, [pc, #76]	@ (801e958 <rmw_init_options_init+0xc0>)
 801e90a:	f7ff ff57 	bl	801e7bc <get_memory>
 801e90e:	b1f0      	cbz	r0, 801e94e <rmw_init_options_init+0xb6>
 801e910:	4a13      	ldr	r2, [pc, #76]	@ (801e960 <rmw_init_options_init+0xc8>)
 801e912:	6883      	ldr	r3, [r0, #8]
 801e914:	6851      	ldr	r1, [r2, #4]
 801e916:	6363      	str	r3, [r4, #52]	@ 0x34
 801e918:	7810      	ldrb	r0, [r2, #0]
 801e91a:	6159      	str	r1, [r3, #20]
 801e91c:	68d1      	ldr	r1, [r2, #12]
 801e91e:	7418      	strb	r0, [r3, #16]
 801e920:	61d9      	str	r1, [r3, #28]
 801e922:	6911      	ldr	r1, [r2, #16]
 801e924:	6219      	str	r1, [r3, #32]
 801e926:	6951      	ldr	r1, [r2, #20]
 801e928:	6892      	ldr	r2, [r2, #8]
 801e92a:	6259      	str	r1, [r3, #36]	@ 0x24
 801e92c:	619a      	str	r2, [r3, #24]
 801e92e:	f7fa fe5d 	bl	80195ec <uxr_nanos>
 801e932:	f003 f9bd 	bl	8021cb0 <srand>
 801e936:	f003 f9e9 	bl	8021d0c <rand>
 801e93a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e93c:	6298      	str	r0, [r3, #40]	@ 0x28
 801e93e:	2800      	cmp	r0, #0
 801e940:	d0f9      	beq.n	801e936 <rmw_init_options_init+0x9e>
 801e942:	2000      	movs	r0, #0
 801e944:	b003      	add	sp, #12
 801e946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e94a:	b004      	add	sp, #16
 801e94c:	4770      	bx	lr
 801e94e:	2001      	movs	r0, #1
 801e950:	e7b1      	b.n	801e8b6 <rmw_init_options_init+0x1e>
 801e952:	bf00      	nop
 801e954:	080258d8 	.word	0x080258d8
 801e958:	2406934c 	.word	0x2406934c
 801e95c:	24064be8 	.word	0x24064be8
 801e960:	24064a74 	.word	0x24064a74
 801e964:	080252e0 	.word	0x080252e0

0801e968 <rmw_init_options_copy>:
 801e968:	2800      	cmp	r0, #0
 801e96a:	d047      	beq.n	801e9fc <rmw_init_options_copy+0x94>
 801e96c:	b570      	push	{r4, r5, r6, lr}
 801e96e:	460d      	mov	r5, r1
 801e970:	b149      	cbz	r1, 801e986 <rmw_init_options_copy+0x1e>
 801e972:	4604      	mov	r4, r0
 801e974:	6880      	ldr	r0, [r0, #8]
 801e976:	b120      	cbz	r0, 801e982 <rmw_init_options_copy+0x1a>
 801e978:	4b22      	ldr	r3, [pc, #136]	@ (801ea04 <rmw_init_options_copy+0x9c>)
 801e97a:	6819      	ldr	r1, [r3, #0]
 801e97c:	f7e1 fcb0 	bl	80002e0 <strcmp>
 801e980:	bba8      	cbnz	r0, 801e9ee <rmw_init_options_copy+0x86>
 801e982:	68ab      	ldr	r3, [r5, #8]
 801e984:	b11b      	cbz	r3, 801e98e <rmw_init_options_copy+0x26>
 801e986:	f04f 0c0b 	mov.w	ip, #11
 801e98a:	4660      	mov	r0, ip
 801e98c:	bd70      	pop	{r4, r5, r6, pc}
 801e98e:	4623      	mov	r3, r4
 801e990:	462a      	mov	r2, r5
 801e992:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801e996:	f8d3 e000 	ldr.w	lr, [r3]
 801e99a:	3310      	adds	r3, #16
 801e99c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801e9a0:	3210      	adds	r2, #16
 801e9a2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801e9a6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e9aa:	42b3      	cmp	r3, r6
 801e9ac:	f842 ec10 	str.w	lr, [r2, #-16]
 801e9b0:	f842 cc0c 	str.w	ip, [r2, #-12]
 801e9b4:	f842 0c08 	str.w	r0, [r2, #-8]
 801e9b8:	f842 1c04 	str.w	r1, [r2, #-4]
 801e9bc:	d1eb      	bne.n	801e996 <rmw_init_options_copy+0x2e>
 801e9be:	6819      	ldr	r1, [r3, #0]
 801e9c0:	685b      	ldr	r3, [r3, #4]
 801e9c2:	4811      	ldr	r0, [pc, #68]	@ (801ea08 <rmw_init_options_copy+0xa0>)
 801e9c4:	6011      	str	r1, [r2, #0]
 801e9c6:	6053      	str	r3, [r2, #4]
 801e9c8:	f7ff fef8 	bl	801e7bc <get_memory>
 801e9cc:	b198      	cbz	r0, 801e9f6 <rmw_init_options_copy+0x8e>
 801e9ce:	6883      	ldr	r3, [r0, #8]
 801e9d0:	f04f 0c00 	mov.w	ip, #0
 801e9d4:	636b      	str	r3, [r5, #52]	@ 0x34
 801e9d6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801e9d8:	f103 0410 	add.w	r4, r3, #16
 801e9dc:	3510      	adds	r5, #16
 801e9de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e9e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e9e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e9e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e9ea:	4660      	mov	r0, ip
 801e9ec:	bd70      	pop	{r4, r5, r6, pc}
 801e9ee:	f04f 0c0c 	mov.w	ip, #12
 801e9f2:	4660      	mov	r0, ip
 801e9f4:	bd70      	pop	{r4, r5, r6, pc}
 801e9f6:	f04f 0c01 	mov.w	ip, #1
 801e9fa:	e7c6      	b.n	801e98a <rmw_init_options_copy+0x22>
 801e9fc:	f04f 0c0b 	mov.w	ip, #11
 801ea00:	4660      	mov	r0, ip
 801ea02:	4770      	bx	lr
 801ea04:	080258d8 	.word	0x080258d8
 801ea08:	2406934c 	.word	0x2406934c

0801ea0c <rmw_init_options_fini>:
 801ea0c:	b510      	push	{r4, lr}
 801ea0e:	b08e      	sub	sp, #56	@ 0x38
 801ea10:	b388      	cbz	r0, 801ea76 <rmw_init_options_fini+0x6a>
 801ea12:	4604      	mov	r4, r0
 801ea14:	3020      	adds	r0, #32
 801ea16:	f7f6 fdb3 	bl	8015580 <rcutils_allocator_is_valid>
 801ea1a:	b360      	cbz	r0, 801ea76 <rmw_init_options_fini+0x6a>
 801ea1c:	68a0      	ldr	r0, [r4, #8]
 801ea1e:	b120      	cbz	r0, 801ea2a <rmw_init_options_fini+0x1e>
 801ea20:	4b1a      	ldr	r3, [pc, #104]	@ (801ea8c <rmw_init_options_fini+0x80>)
 801ea22:	6819      	ldr	r1, [r3, #0]
 801ea24:	f7e1 fc5c 	bl	80002e0 <strcmp>
 801ea28:	bb68      	cbnz	r0, 801ea86 <rmw_init_options_fini+0x7a>
 801ea2a:	4b19      	ldr	r3, [pc, #100]	@ (801ea90 <rmw_init_options_fini+0x84>)
 801ea2c:	6819      	ldr	r1, [r3, #0]
 801ea2e:	b331      	cbz	r1, 801ea7e <rmw_init_options_fini+0x72>
 801ea30:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801ea32:	e001      	b.n	801ea38 <rmw_init_options_fini+0x2c>
 801ea34:	6849      	ldr	r1, [r1, #4]
 801ea36:	b311      	cbz	r1, 801ea7e <rmw_init_options_fini+0x72>
 801ea38:	688b      	ldr	r3, [r1, #8]
 801ea3a:	429a      	cmp	r2, r3
 801ea3c:	d1fa      	bne.n	801ea34 <rmw_init_options_fini+0x28>
 801ea3e:	4814      	ldr	r0, [pc, #80]	@ (801ea90 <rmw_init_options_fini+0x84>)
 801ea40:	f7ff fecc 	bl	801e7dc <put_memory>
 801ea44:	4668      	mov	r0, sp
 801ea46:	f7ff fca7 	bl	801e398 <rmw_get_zero_initialized_init_options>
 801ea4a:	46ee      	mov	lr, sp
 801ea4c:	46a4      	mov	ip, r4
 801ea4e:	2400      	movs	r4, #0
 801ea50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ea54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ea58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ea5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ea60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ea64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ea68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ea6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ea70:	4620      	mov	r0, r4
 801ea72:	b00e      	add	sp, #56	@ 0x38
 801ea74:	bd10      	pop	{r4, pc}
 801ea76:	240b      	movs	r4, #11
 801ea78:	4620      	mov	r0, r4
 801ea7a:	b00e      	add	sp, #56	@ 0x38
 801ea7c:	bd10      	pop	{r4, pc}
 801ea7e:	2401      	movs	r4, #1
 801ea80:	4620      	mov	r0, r4
 801ea82:	b00e      	add	sp, #56	@ 0x38
 801ea84:	bd10      	pop	{r4, pc}
 801ea86:	240c      	movs	r4, #12
 801ea88:	e7f2      	b.n	801ea70 <rmw_init_options_fini+0x64>
 801ea8a:	bf00      	nop
 801ea8c:	080258d8 	.word	0x080258d8
 801ea90:	2406934c 	.word	0x2406934c

0801ea94 <rmw_init>:
 801ea94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ea98:	b083      	sub	sp, #12
 801ea9a:	2800      	cmp	r0, #0
 801ea9c:	f000 80d3 	beq.w	801ec46 <rmw_init+0x1b2>
 801eaa0:	460e      	mov	r6, r1
 801eaa2:	2900      	cmp	r1, #0
 801eaa4:	f000 80cf 	beq.w	801ec46 <rmw_init+0x1b2>
 801eaa8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801eaaa:	4605      	mov	r5, r0
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	f000 80ca 	beq.w	801ec46 <rmw_init+0x1b2>
 801eab2:	4b78      	ldr	r3, [pc, #480]	@ (801ec94 <rmw_init+0x200>)
 801eab4:	6880      	ldr	r0, [r0, #8]
 801eab6:	681f      	ldr	r7, [r3, #0]
 801eab8:	b128      	cbz	r0, 801eac6 <rmw_init+0x32>
 801eaba:	4639      	mov	r1, r7
 801eabc:	f7e1 fc10 	bl	80002e0 <strcmp>
 801eac0:	2800      	cmp	r0, #0
 801eac2:	f040 80ca 	bne.w	801ec5a <rmw_init+0x1c6>
 801eac6:	4c74      	ldr	r4, [pc, #464]	@ (801ec98 <rmw_init+0x204>)
 801eac8:	f04f 0800 	mov.w	r8, #0
 801eacc:	4973      	ldr	r1, [pc, #460]	@ (801ec9c <rmw_init+0x208>)
 801eace:	4874      	ldr	r0, [pc, #464]	@ (801eca0 <rmw_init+0x20c>)
 801ead0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ead4:	60b7      	str	r7, [r6, #8]
 801ead6:	e9c6 2300 	strd	r2, r3, [r6]
 801eada:	68eb      	ldr	r3, [r5, #12]
 801eadc:	2201      	movs	r2, #1
 801eade:	64b3      	str	r3, [r6, #72]	@ 0x48
 801eae0:	f7f7 f8c0 	bl	8015c64 <rmw_uxrce_init_session_memory>
 801eae4:	4620      	mov	r0, r4
 801eae6:	2204      	movs	r2, #4
 801eae8:	496e      	ldr	r1, [pc, #440]	@ (801eca4 <rmw_init+0x210>)
 801eaea:	f7f7 f8fb 	bl	8015ce4 <rmw_uxrce_init_static_input_buffer_memory>
 801eaee:	486c      	ldr	r0, [pc, #432]	@ (801eca0 <rmw_init+0x20c>)
 801eaf0:	f884 800d 	strb.w	r8, [r4, #13]
 801eaf4:	f7ff fe62 	bl	801e7bc <get_memory>
 801eaf8:	2800      	cmp	r0, #0
 801eafa:	f000 80a9 	beq.w	801ec50 <rmw_init+0x1bc>
 801eafe:	6884      	ldr	r4, [r0, #8]
 801eb00:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801eb02:	f104 0910 	add.w	r9, r4, #16
 801eb06:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801eb08:	f890 c010 	ldrb.w	ip, [r0, #16]
 801eb0c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801eb10:	9101      	str	r1, [sp, #4]
 801eb12:	4661      	mov	r1, ip
 801eb14:	6a00      	ldr	r0, [r0, #32]
 801eb16:	9000      	str	r0, [sp, #0]
 801eb18:	4648      	mov	r0, r9
 801eb1a:	f7f8 fcbb 	bl	8017494 <uxr_set_custom_transport_callbacks>
 801eb1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801eb22:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801eb26:	4960      	ldr	r1, [pc, #384]	@ (801eca8 <rmw_init+0x214>)
 801eb28:	4860      	ldr	r0, [pc, #384]	@ (801ecac <rmw_init+0x218>)
 801eb2a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801eb2e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801eb32:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801eb36:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801eb3a:	2201      	movs	r2, #1
 801eb3c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801eb40:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801eb44:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801eb48:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801eb4c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801eb4e:	f7f7 f869 	bl	8015c24 <rmw_uxrce_init_node_memory>
 801eb52:	2205      	movs	r2, #5
 801eb54:	4956      	ldr	r1, [pc, #344]	@ (801ecb0 <rmw_init+0x21c>)
 801eb56:	4857      	ldr	r0, [pc, #348]	@ (801ecb4 <rmw_init+0x220>)
 801eb58:	f7f7 f844 	bl	8015be4 <rmw_uxrce_init_subscription_memory>
 801eb5c:	220a      	movs	r2, #10
 801eb5e:	4956      	ldr	r1, [pc, #344]	@ (801ecb8 <rmw_init+0x224>)
 801eb60:	4856      	ldr	r0, [pc, #344]	@ (801ecbc <rmw_init+0x228>)
 801eb62:	f7f7 f81f 	bl	8015ba4 <rmw_uxrce_init_publisher_memory>
 801eb66:	2201      	movs	r2, #1
 801eb68:	4955      	ldr	r1, [pc, #340]	@ (801ecc0 <rmw_init+0x22c>)
 801eb6a:	4856      	ldr	r0, [pc, #344]	@ (801ecc4 <rmw_init+0x230>)
 801eb6c:	f7f6 ffda 	bl	8015b24 <rmw_uxrce_init_service_memory>
 801eb70:	2201      	movs	r2, #1
 801eb72:	4955      	ldr	r1, [pc, #340]	@ (801ecc8 <rmw_init+0x234>)
 801eb74:	4855      	ldr	r0, [pc, #340]	@ (801eccc <rmw_init+0x238>)
 801eb76:	f7f6 fff5 	bl	8015b64 <rmw_uxrce_init_client_memory>
 801eb7a:	220f      	movs	r2, #15
 801eb7c:	4954      	ldr	r1, [pc, #336]	@ (801ecd0 <rmw_init+0x23c>)
 801eb7e:	4855      	ldr	r0, [pc, #340]	@ (801ecd4 <rmw_init+0x240>)
 801eb80:	f7f7 f890 	bl	8015ca4 <rmw_uxrce_init_topic_memory>
 801eb84:	2203      	movs	r2, #3
 801eb86:	4954      	ldr	r1, [pc, #336]	@ (801ecd8 <rmw_init+0x244>)
 801eb88:	4854      	ldr	r0, [pc, #336]	@ (801ecdc <rmw_init+0x248>)
 801eb8a:	f7f7 f8cb 	bl	8015d24 <rmw_uxrce_init_init_options_impl_memory>
 801eb8e:	2204      	movs	r2, #4
 801eb90:	4953      	ldr	r1, [pc, #332]	@ (801ece0 <rmw_init+0x24c>)
 801eb92:	4854      	ldr	r0, [pc, #336]	@ (801ece4 <rmw_init+0x250>)
 801eb94:	f7f7 f8e6 	bl	8015d64 <rmw_uxrce_init_wait_set_memory>
 801eb98:	4953      	ldr	r1, [pc, #332]	@ (801ece8 <rmw_init+0x254>)
 801eb9a:	4854      	ldr	r0, [pc, #336]	@ (801ecec <rmw_init+0x258>)
 801eb9c:	2204      	movs	r2, #4
 801eb9e:	f7f7 f901 	bl	8015da4 <rmw_uxrce_init_guard_condition_memory>
 801eba2:	4642      	mov	r2, r8
 801eba4:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801eba6:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801eba8:	f7f6 ff84 	bl	8015ab4 <rmw_uxrce_transport_init>
 801ebac:	4607      	mov	r7, r0
 801ebae:	2800      	cmp	r0, #0
 801ebb0:	d158      	bne.n	801ec64 <rmw_init+0x1d0>
 801ebb2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801ebb4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801ebb8:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801ebbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ebbe:	4628      	mov	r0, r5
 801ebc0:	f7f8 fe6e 	bl	80178a0 <uxr_init_session>
 801ebc4:	4622      	mov	r2, r4
 801ebc6:	494a      	ldr	r1, [pc, #296]	@ (801ecf0 <rmw_init+0x25c>)
 801ebc8:	4628      	mov	r0, r5
 801ebca:	f7f8 fe8d 	bl	80178e8 <uxr_set_topic_callback>
 801ebce:	463a      	mov	r2, r7
 801ebd0:	4948      	ldr	r1, [pc, #288]	@ (801ecf4 <rmw_init+0x260>)
 801ebd2:	4628      	mov	r0, r5
 801ebd4:	f7f8 fe84 	bl	80178e0 <uxr_set_status_callback>
 801ebd8:	463a      	mov	r2, r7
 801ebda:	4947      	ldr	r1, [pc, #284]	@ (801ecf8 <rmw_init+0x264>)
 801ebdc:	4628      	mov	r0, r5
 801ebde:	f7f8 fe87 	bl	80178f0 <uxr_set_request_callback>
 801ebe2:	463a      	mov	r2, r7
 801ebe4:	4945      	ldr	r1, [pc, #276]	@ (801ecfc <rmw_init+0x268>)
 801ebe6:	4628      	mov	r0, r5
 801ebe8:	f7f8 fe86 	bl	80178f8 <uxr_set_reply_callback>
 801ebec:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801ebf0:	2304      	movs	r3, #4
 801ebf2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801ebf6:	0092      	lsls	r2, r2, #2
 801ebf8:	4628      	mov	r0, r5
 801ebfa:	f7f8 febd 	bl	8017978 <uxr_create_input_reliable_stream>
 801ebfe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801ec02:	2304      	movs	r3, #4
 801ec04:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801ec08:	0092      	lsls	r2, r2, #2
 801ec0a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801ec0e:	4628      	mov	r0, r5
 801ec10:	f7f8 fe88 	bl	8017924 <uxr_create_output_reliable_stream>
 801ec14:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801ec18:	4628      	mov	r0, r5
 801ec1a:	f7f8 fea7 	bl	801796c <uxr_create_input_best_effort_stream>
 801ec1e:	f241 3194 	movw	r1, #5012	@ 0x1394
 801ec22:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801ec26:	4628      	mov	r0, r5
 801ec28:	4421      	add	r1, r4
 801ec2a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801ec2e:	f7f8 fe67 	bl	8017900 <uxr_create_output_best_effort_stream>
 801ec32:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801ec36:	4628      	mov	r0, r5
 801ec38:	f7f9 fc70 	bl	801851c <uxr_create_session>
 801ec3c:	b1f8      	cbz	r0, 801ec7e <rmw_init+0x1ea>
 801ec3e:	4638      	mov	r0, r7
 801ec40:	b003      	add	sp, #12
 801ec42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec46:	270b      	movs	r7, #11
 801ec48:	4638      	mov	r0, r7
 801ec4a:	b003      	add	sp, #12
 801ec4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec50:	2701      	movs	r7, #1
 801ec52:	4638      	mov	r0, r7
 801ec54:	b003      	add	sp, #12
 801ec56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec5a:	270c      	movs	r7, #12
 801ec5c:	4638      	mov	r0, r7
 801ec5e:	b003      	add	sp, #12
 801ec60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec64:	4648      	mov	r0, r9
 801ec66:	f7f8 fc53 	bl	8017510 <uxr_close_custom_transport>
 801ec6a:	4621      	mov	r1, r4
 801ec6c:	480c      	ldr	r0, [pc, #48]	@ (801eca0 <rmw_init+0x20c>)
 801ec6e:	f7ff fdb5 	bl	801e7dc <put_memory>
 801ec72:	4638      	mov	r0, r7
 801ec74:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801ec78:	b003      	add	sp, #12
 801ec7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec7e:	4648      	mov	r0, r9
 801ec80:	f7f8 fc46 	bl	8017510 <uxr_close_custom_transport>
 801ec84:	4621      	mov	r1, r4
 801ec86:	4806      	ldr	r0, [pc, #24]	@ (801eca0 <rmw_init+0x20c>)
 801ec88:	f7ff fda8 	bl	801e7dc <put_memory>
 801ec8c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801ec8e:	2701      	movs	r7, #1
 801ec90:	e7d5      	b.n	801ec3e <rmw_init+0x1aa>
 801ec92:	bf00      	nop
 801ec94:	080258d8 	.word	0x080258d8
 801ec98:	2406939c 	.word	0x2406939c
 801ec9c:	24065648 	.word	0x24065648
 801eca0:	2406938c 	.word	0x2406938c
 801eca4:	24066bf0 	.word	0x24066bf0
 801eca8:	24064c6c 	.word	0x24064c6c
 801ecac:	2406935c 	.word	0x2406935c
 801ecb0:	24068cf0 	.word	0x24068cf0
 801ecb4:	240693ac 	.word	0x240693ac
 801ecb8:	24064d10 	.word	0x24064d10
 801ecbc:	2406936c 	.word	0x2406936c
 801ecc0:	24065580 	.word	0x24065580
 801ecc4:	2406937c 	.word	0x2406937c
 801ecc8:	24064aa0 	.word	0x24064aa0
 801eccc:	24064a90 	.word	0x24064a90
 801ecd0:	24069128 	.word	0x24069128
 801ecd4:	240693bc 	.word	0x240693bc
 801ecd8:	24064be8 	.word	0x24064be8
 801ecdc:	2406934c 	.word	0x2406934c
 801ece0:	240692cc 	.word	0x240692cc
 801ece4:	240693cc 	.word	0x240693cc
 801ece8:	24064b68 	.word	0x24064b68
 801ecec:	2406933c 	.word	0x2406933c
 801ecf0:	08021739 	.word	0x08021739
 801ecf4:	08021731 	.word	0x08021731
 801ecf8:	080217d1 	.word	0x080217d1
 801ecfc:	0802186d 	.word	0x0802186d

0801ed00 <rmw_context_fini>:
 801ed00:	4b17      	ldr	r3, [pc, #92]	@ (801ed60 <rmw_context_fini+0x60>)
 801ed02:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801ed04:	b570      	push	{r4, r5, r6, lr}
 801ed06:	681c      	ldr	r4, [r3, #0]
 801ed08:	4605      	mov	r5, r0
 801ed0a:	b334      	cbz	r4, 801ed5a <rmw_context_fini+0x5a>
 801ed0c:	2600      	movs	r6, #0
 801ed0e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801ed12:	6902      	ldr	r2, [r0, #16]
 801ed14:	428a      	cmp	r2, r1
 801ed16:	d018      	beq.n	801ed4a <rmw_context_fini+0x4a>
 801ed18:	2c00      	cmp	r4, #0
 801ed1a:	d1f8      	bne.n	801ed0e <rmw_context_fini+0xe>
 801ed1c:	b189      	cbz	r1, 801ed42 <rmw_context_fini+0x42>
 801ed1e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801ed22:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801ed26:	789b      	ldrb	r3, [r3, #2]
 801ed28:	2b01      	cmp	r3, #1
 801ed2a:	bf14      	ite	ne
 801ed2c:	210a      	movne	r1, #10
 801ed2e:	2100      	moveq	r1, #0
 801ed30:	f7f9 fbcc 	bl	80184cc <uxr_delete_session_retries>
 801ed34:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ed36:	f7f7 f855 	bl	8015de4 <rmw_uxrce_fini_session_memory>
 801ed3a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ed3c:	3010      	adds	r0, #16
 801ed3e:	f7f8 fbe7 	bl	8017510 <uxr_close_custom_transport>
 801ed42:	2300      	movs	r3, #0
 801ed44:	4630      	mov	r0, r6
 801ed46:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801ed48:	bd70      	pop	{r4, r5, r6, pc}
 801ed4a:	3018      	adds	r0, #24
 801ed4c:	f000 f90e 	bl	801ef6c <rmw_destroy_node>
 801ed50:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ed52:	4606      	mov	r6, r0
 801ed54:	2c00      	cmp	r4, #0
 801ed56:	d1da      	bne.n	801ed0e <rmw_context_fini+0xe>
 801ed58:	e7e0      	b.n	801ed1c <rmw_context_fini+0x1c>
 801ed5a:	4626      	mov	r6, r4
 801ed5c:	e7de      	b.n	801ed1c <rmw_context_fini+0x1c>
 801ed5e:	bf00      	nop
 801ed60:	2406935c 	.word	0x2406935c

0801ed64 <create_topic>:
 801ed64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed68:	4605      	mov	r5, r0
 801ed6a:	b084      	sub	sp, #16
 801ed6c:	4822      	ldr	r0, [pc, #136]	@ (801edf8 <create_topic+0x94>)
 801ed6e:	460f      	mov	r7, r1
 801ed70:	4616      	mov	r6, r2
 801ed72:	f7ff fd23 	bl	801e7bc <get_memory>
 801ed76:	4604      	mov	r4, r0
 801ed78:	2800      	cmp	r0, #0
 801ed7a:	d039      	beq.n	801edf0 <create_topic+0x8c>
 801ed7c:	692b      	ldr	r3, [r5, #16]
 801ed7e:	2102      	movs	r1, #2
 801ed80:	6884      	ldr	r4, [r0, #8]
 801ed82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ed86:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801ee00 <create_topic+0x9c>
 801ed8a:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801ed8e:	1c42      	adds	r2, r0, #1
 801ed90:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801ed94:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801ed98:	f7f8 fbbe 	bl	8017518 <uxr_object_id>
 801ed9c:	223c      	movs	r2, #60	@ 0x3c
 801ed9e:	6120      	str	r0, [r4, #16]
 801eda0:	4641      	mov	r1, r8
 801eda2:	4638      	mov	r0, r7
 801eda4:	f7f7 fa9c 	bl	80162e0 <generate_topic_name>
 801eda8:	b1f0      	cbz	r0, 801ede8 <create_topic+0x84>
 801edaa:	4f14      	ldr	r7, [pc, #80]	@ (801edfc <create_topic+0x98>)
 801edac:	4630      	mov	r0, r6
 801edae:	2264      	movs	r2, #100	@ 0x64
 801edb0:	4639      	mov	r1, r7
 801edb2:	f7f7 fa67 	bl	8016284 <generate_type_name>
 801edb6:	b1b8      	cbz	r0, 801ede8 <create_topic+0x84>
 801edb8:	6928      	ldr	r0, [r5, #16]
 801edba:	2106      	movs	r1, #6
 801edbc:	696b      	ldr	r3, [r5, #20]
 801edbe:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801edc2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801edc6:	f8cd 8000 	str.w	r8, [sp]
 801edca:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801edce:	6811      	ldr	r1, [r2, #0]
 801edd0:	6922      	ldr	r2, [r4, #16]
 801edd2:	f7f8 f925 	bl	8017020 <uxr_buffer_create_topic_bin>
 801edd6:	4602      	mov	r2, r0
 801edd8:	6928      	ldr	r0, [r5, #16]
 801edda:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801edde:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ede2:	f7f7 f983 	bl	80160ec <run_xrce_session>
 801ede6:	b918      	cbnz	r0, 801edf0 <create_topic+0x8c>
 801ede8:	4620      	mov	r0, r4
 801edea:	2400      	movs	r4, #0
 801edec:	f7f7 f870 	bl	8015ed0 <rmw_uxrce_fini_topic_memory>
 801edf0:	4620      	mov	r0, r4
 801edf2:	b004      	add	sp, #16
 801edf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801edf8:	240693bc 	.word	0x240693bc
 801edfc:	24069518 	.word	0x24069518
 801ee00:	240694dc 	.word	0x240694dc

0801ee04 <destroy_topic>:
 801ee04:	b538      	push	{r3, r4, r5, lr}
 801ee06:	6985      	ldr	r5, [r0, #24]
 801ee08:	b1dd      	cbz	r5, 801ee42 <destroy_topic+0x3e>
 801ee0a:	4604      	mov	r4, r0
 801ee0c:	6928      	ldr	r0, [r5, #16]
 801ee0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ee12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ee16:	6922      	ldr	r2, [r4, #16]
 801ee18:	6819      	ldr	r1, [r3, #0]
 801ee1a:	f7f8 f883 	bl	8016f24 <uxr_buffer_delete_entity>
 801ee1e:	4602      	mov	r2, r0
 801ee20:	6928      	ldr	r0, [r5, #16]
 801ee22:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ee26:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ee2a:	f7f7 f95f 	bl	80160ec <run_xrce_session>
 801ee2e:	4603      	mov	r3, r0
 801ee30:	4620      	mov	r0, r4
 801ee32:	2b00      	cmp	r3, #0
 801ee34:	bf14      	ite	ne
 801ee36:	2400      	movne	r4, #0
 801ee38:	2402      	moveq	r4, #2
 801ee3a:	f7f7 f849 	bl	8015ed0 <rmw_uxrce_fini_topic_memory>
 801ee3e:	4620      	mov	r0, r4
 801ee40:	bd38      	pop	{r3, r4, r5, pc}
 801ee42:	2401      	movs	r4, #1
 801ee44:	4620      	mov	r0, r4
 801ee46:	bd38      	pop	{r3, r4, r5, pc}

0801ee48 <create_node>:
 801ee48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ee4c:	b083      	sub	sp, #12
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d064      	beq.n	801ef1c <create_node+0xd4>
 801ee52:	4606      	mov	r6, r0
 801ee54:	4838      	ldr	r0, [pc, #224]	@ (801ef38 <create_node+0xf0>)
 801ee56:	460f      	mov	r7, r1
 801ee58:	4690      	mov	r8, r2
 801ee5a:	461d      	mov	r5, r3
 801ee5c:	f7ff fcae 	bl	801e7bc <get_memory>
 801ee60:	2800      	cmp	r0, #0
 801ee62:	d05b      	beq.n	801ef1c <create_node+0xd4>
 801ee64:	6884      	ldr	r4, [r0, #8]
 801ee66:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801ee68:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801ee6c:	f104 0518 	add.w	r5, r4, #24
 801ee70:	6123      	str	r3, [r4, #16]
 801ee72:	f7ff fd0b 	bl	801e88c <rmw_get_implementation_identifier>
 801ee76:	f8c4 9020 	str.w	r9, [r4, #32]
 801ee7a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801ee7e:	4630      	mov	r0, r6
 801ee80:	f7e1 fa38 	bl	80002f4 <strlen>
 801ee84:	1c42      	adds	r2, r0, #1
 801ee86:	2a3c      	cmp	r2, #60	@ 0x3c
 801ee88:	d840      	bhi.n	801ef0c <create_node+0xc4>
 801ee8a:	4648      	mov	r0, r9
 801ee8c:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801ee90:	4631      	mov	r1, r6
 801ee92:	f003 fbd0 	bl	8022636 <memcpy>
 801ee96:	4638      	mov	r0, r7
 801ee98:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801ee9c:	f7e1 fa2a 	bl	80002f4 <strlen>
 801eea0:	1c42      	adds	r2, r0, #1
 801eea2:	2a3c      	cmp	r2, #60	@ 0x3c
 801eea4:	d832      	bhi.n	801ef0c <create_node+0xc4>
 801eea6:	4639      	mov	r1, r7
 801eea8:	4648      	mov	r0, r9
 801eeaa:	f003 fbc4 	bl	8022636 <memcpy>
 801eeae:	6923      	ldr	r3, [r4, #16]
 801eeb0:	2101      	movs	r1, #1
 801eeb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801eeb6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801eeba:	1842      	adds	r2, r0, r1
 801eebc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801eec0:	f7f8 fb2a 	bl	8017518 <uxr_object_id>
 801eec4:	6160      	str	r0, [r4, #20]
 801eec6:	783b      	ldrb	r3, [r7, #0]
 801eec8:	2b2f      	cmp	r3, #47	@ 0x2f
 801eeca:	d12c      	bne.n	801ef26 <create_node+0xde>
 801eecc:	787b      	ldrb	r3, [r7, #1]
 801eece:	bb53      	cbnz	r3, 801ef26 <create_node+0xde>
 801eed0:	4633      	mov	r3, r6
 801eed2:	4a1a      	ldr	r2, [pc, #104]	@ (801ef3c <create_node+0xf4>)
 801eed4:	213c      	movs	r1, #60	@ 0x3c
 801eed6:	481a      	ldr	r0, [pc, #104]	@ (801ef40 <create_node+0xf8>)
 801eed8:	f003 f920 	bl	802211c <sniprintf>
 801eedc:	6920      	ldr	r0, [r4, #16]
 801eede:	2106      	movs	r1, #6
 801eee0:	fa1f f388 	uxth.w	r3, r8
 801eee4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801eee8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801eeec:	9101      	str	r1, [sp, #4]
 801eeee:	4914      	ldr	r1, [pc, #80]	@ (801ef40 <create_node+0xf8>)
 801eef0:	9100      	str	r1, [sp, #0]
 801eef2:	6811      	ldr	r1, [r2, #0]
 801eef4:	6962      	ldr	r2, [r4, #20]
 801eef6:	f7f8 f861 	bl	8016fbc <uxr_buffer_create_participant_bin>
 801eefa:	4602      	mov	r2, r0
 801eefc:	6920      	ldr	r0, [r4, #16]
 801eefe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ef02:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ef06:	f7f7 f8f1 	bl	80160ec <run_xrce_session>
 801ef0a:	b918      	cbnz	r0, 801ef14 <create_node+0xcc>
 801ef0c:	4628      	mov	r0, r5
 801ef0e:	2500      	movs	r5, #0
 801ef10:	f7f6 ff6e 	bl	8015df0 <rmw_uxrce_fini_node_memory>
 801ef14:	4628      	mov	r0, r5
 801ef16:	b003      	add	sp, #12
 801ef18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef1c:	2500      	movs	r5, #0
 801ef1e:	4628      	mov	r0, r5
 801ef20:	b003      	add	sp, #12
 801ef22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef26:	463b      	mov	r3, r7
 801ef28:	4a06      	ldr	r2, [pc, #24]	@ (801ef44 <create_node+0xfc>)
 801ef2a:	213c      	movs	r1, #60	@ 0x3c
 801ef2c:	9600      	str	r6, [sp, #0]
 801ef2e:	4804      	ldr	r0, [pc, #16]	@ (801ef40 <create_node+0xf8>)
 801ef30:	f003 f8f4 	bl	802211c <sniprintf>
 801ef34:	e7d2      	b.n	801eedc <create_node+0x94>
 801ef36:	bf00      	nop
 801ef38:	2406935c 	.word	0x2406935c
 801ef3c:	08024958 	.word	0x08024958
 801ef40:	2406957c 	.word	0x2406957c
 801ef44:	080252e8 	.word	0x080252e8

0801ef48 <rmw_create_node>:
 801ef48:	468c      	mov	ip, r1
 801ef4a:	4611      	mov	r1, r2
 801ef4c:	f1bc 0f00 	cmp.w	ip, #0
 801ef50:	d00a      	beq.n	801ef68 <rmw_create_node+0x20>
 801ef52:	f89c 3000 	ldrb.w	r3, [ip]
 801ef56:	b13b      	cbz	r3, 801ef68 <rmw_create_node+0x20>
 801ef58:	b132      	cbz	r2, 801ef68 <rmw_create_node+0x20>
 801ef5a:	7813      	ldrb	r3, [r2, #0]
 801ef5c:	b123      	cbz	r3, 801ef68 <rmw_create_node+0x20>
 801ef5e:	4603      	mov	r3, r0
 801ef60:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801ef62:	4660      	mov	r0, ip
 801ef64:	f7ff bf70 	b.w	801ee48 <create_node>
 801ef68:	2000      	movs	r0, #0
 801ef6a:	4770      	bx	lr

0801ef6c <rmw_destroy_node>:
 801ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef6e:	b328      	cbz	r0, 801efbc <rmw_destroy_node+0x50>
 801ef70:	4607      	mov	r7, r0
 801ef72:	6800      	ldr	r0, [r0, #0]
 801ef74:	b120      	cbz	r0, 801ef80 <rmw_destroy_node+0x14>
 801ef76:	4b37      	ldr	r3, [pc, #220]	@ (801f054 <rmw_destroy_node+0xe8>)
 801ef78:	6819      	ldr	r1, [r3, #0]
 801ef7a:	f7e1 f9b1 	bl	80002e0 <strcmp>
 801ef7e:	b9e8      	cbnz	r0, 801efbc <rmw_destroy_node+0x50>
 801ef80:	687d      	ldr	r5, [r7, #4]
 801ef82:	b1dd      	cbz	r5, 801efbc <rmw_destroy_node+0x50>
 801ef84:	4b34      	ldr	r3, [pc, #208]	@ (801f058 <rmw_destroy_node+0xec>)
 801ef86:	681c      	ldr	r4, [r3, #0]
 801ef88:	2c00      	cmp	r4, #0
 801ef8a:	d060      	beq.n	801f04e <rmw_destroy_node+0xe2>
 801ef8c:	2600      	movs	r6, #0
 801ef8e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ef92:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801ef96:	429d      	cmp	r5, r3
 801ef98:	d013      	beq.n	801efc2 <rmw_destroy_node+0x56>
 801ef9a:	2c00      	cmp	r4, #0
 801ef9c:	d1f7      	bne.n	801ef8e <rmw_destroy_node+0x22>
 801ef9e:	4b2f      	ldr	r3, [pc, #188]	@ (801f05c <rmw_destroy_node+0xf0>)
 801efa0:	681c      	ldr	r4, [r3, #0]
 801efa2:	b1c4      	cbz	r4, 801efd6 <rmw_destroy_node+0x6a>
 801efa4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801efa8:	6a0b      	ldr	r3, [r1, #32]
 801efaa:	429d      	cmp	r5, r3
 801efac:	d1f9      	bne.n	801efa2 <rmw_destroy_node+0x36>
 801efae:	317c      	adds	r1, #124	@ 0x7c
 801efb0:	4638      	mov	r0, r7
 801efb2:	f000 fbff 	bl	801f7b4 <rmw_destroy_subscription>
 801efb6:	2801      	cmp	r0, #1
 801efb8:	4606      	mov	r6, r0
 801efba:	d1f2      	bne.n	801efa2 <rmw_destroy_node+0x36>
 801efbc:	2601      	movs	r6, #1
 801efbe:	4630      	mov	r0, r6
 801efc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801efc2:	3184      	adds	r1, #132	@ 0x84
 801efc4:	4638      	mov	r0, r7
 801efc6:	f7f6 fd21 	bl	8015a0c <rmw_destroy_publisher>
 801efca:	2801      	cmp	r0, #1
 801efcc:	4606      	mov	r6, r0
 801efce:	d0f5      	beq.n	801efbc <rmw_destroy_node+0x50>
 801efd0:	2c00      	cmp	r4, #0
 801efd2:	d1dc      	bne.n	801ef8e <rmw_destroy_node+0x22>
 801efd4:	e7e3      	b.n	801ef9e <rmw_destroy_node+0x32>
 801efd6:	4b22      	ldr	r3, [pc, #136]	@ (801f060 <rmw_destroy_node+0xf4>)
 801efd8:	681c      	ldr	r4, [r3, #0]
 801efda:	b16c      	cbz	r4, 801eff8 <rmw_destroy_node+0x8c>
 801efdc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801efe0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801efe2:	429d      	cmp	r5, r3
 801efe4:	d1f9      	bne.n	801efda <rmw_destroy_node+0x6e>
 801efe6:	317c      	adds	r1, #124	@ 0x7c
 801efe8:	4638      	mov	r0, r7
 801efea:	f000 fa6d 	bl	801f4c8 <rmw_destroy_service>
 801efee:	2801      	cmp	r0, #1
 801eff0:	4606      	mov	r6, r0
 801eff2:	d0e3      	beq.n	801efbc <rmw_destroy_node+0x50>
 801eff4:	2c00      	cmp	r4, #0
 801eff6:	d1f1      	bne.n	801efdc <rmw_destroy_node+0x70>
 801eff8:	4b1a      	ldr	r3, [pc, #104]	@ (801f064 <rmw_destroy_node+0xf8>)
 801effa:	681c      	ldr	r4, [r3, #0]
 801effc:	b16c      	cbz	r4, 801f01a <rmw_destroy_node+0xae>
 801effe:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801f002:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801f004:	429d      	cmp	r5, r3
 801f006:	d1f9      	bne.n	801effc <rmw_destroy_node+0x90>
 801f008:	317c      	adds	r1, #124	@ 0x7c
 801f00a:	4638      	mov	r0, r7
 801f00c:	f7ff fbfa 	bl	801e804 <rmw_destroy_client>
 801f010:	2801      	cmp	r0, #1
 801f012:	4606      	mov	r6, r0
 801f014:	d0d2      	beq.n	801efbc <rmw_destroy_node+0x50>
 801f016:	2c00      	cmp	r4, #0
 801f018:	d1f1      	bne.n	801effe <rmw_destroy_node+0x92>
 801f01a:	6928      	ldr	r0, [r5, #16]
 801f01c:	696a      	ldr	r2, [r5, #20]
 801f01e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f022:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f026:	6819      	ldr	r1, [r3, #0]
 801f028:	f7f7 ff7c 	bl	8016f24 <uxr_buffer_delete_entity>
 801f02c:	4602      	mov	r2, r0
 801f02e:	6928      	ldr	r0, [r5, #16]
 801f030:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f034:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f038:	f7f7 f858 	bl	80160ec <run_xrce_session>
 801f03c:	4603      	mov	r3, r0
 801f03e:	4638      	mov	r0, r7
 801f040:	2b00      	cmp	r3, #0
 801f042:	bf08      	it	eq
 801f044:	2602      	moveq	r6, #2
 801f046:	f7f6 fed3 	bl	8015df0 <rmw_uxrce_fini_node_memory>
 801f04a:	4630      	mov	r0, r6
 801f04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f04e:	4626      	mov	r6, r4
 801f050:	e7a5      	b.n	801ef9e <rmw_destroy_node+0x32>
 801f052:	bf00      	nop
 801f054:	080258d8 	.word	0x080258d8
 801f058:	2406936c 	.word	0x2406936c
 801f05c:	240693ac 	.word	0x240693ac
 801f060:	2406937c 	.word	0x2406937c
 801f064:	24064a90 	.word	0x24064a90

0801f068 <rmw_node_get_graph_guard_condition>:
 801f068:	6843      	ldr	r3, [r0, #4]
 801f06a:	6918      	ldr	r0, [r3, #16]
 801f06c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801f070:	4770      	bx	lr
 801f072:	bf00      	nop

0801f074 <rmw_send_request>:
 801f074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f078:	4604      	mov	r4, r0
 801f07a:	6800      	ldr	r0, [r0, #0]
 801f07c:	b08b      	sub	sp, #44	@ 0x2c
 801f07e:	460e      	mov	r6, r1
 801f080:	4615      	mov	r5, r2
 801f082:	b128      	cbz	r0, 801f090 <rmw_send_request+0x1c>
 801f084:	4b21      	ldr	r3, [pc, #132]	@ (801f10c <rmw_send_request+0x98>)
 801f086:	6819      	ldr	r1, [r3, #0]
 801f088:	f7e1 f92a 	bl	80002e0 <strcmp>
 801f08c:	2800      	cmp	r0, #0
 801f08e:	d139      	bne.n	801f104 <rmw_send_request+0x90>
 801f090:	6864      	ldr	r4, [r4, #4]
 801f092:	2700      	movs	r7, #0
 801f094:	6963      	ldr	r3, [r4, #20]
 801f096:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801f09a:	689b      	ldr	r3, [r3, #8]
 801f09c:	4798      	blx	r3
 801f09e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801f0a2:	4630      	mov	r0, r6
 801f0a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f0a8:	4798      	blx	r3
 801f0aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f0ae:	9000      	str	r0, [sp, #0]
 801f0b0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801f0b4:	6922      	ldr	r2, [r4, #16]
 801f0b6:	ab02      	add	r3, sp, #8
 801f0b8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801f0ba:	f7fa fb37 	bl	801972c <uxr_prepare_output_stream>
 801f0be:	e9c5 0700 	strd	r0, r7, [r5]
 801f0c2:	b198      	cbz	r0, 801f0ec <rmw_send_request+0x78>
 801f0c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801f0c8:	a902      	add	r1, sp, #8
 801f0ca:	4630      	mov	r0, r6
 801f0cc:	4798      	blx	r3
 801f0ce:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801f0d2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f0d6:	2b01      	cmp	r3, #1
 801f0d8:	d00c      	beq.n	801f0f4 <rmw_send_request+0x80>
 801f0da:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801f0dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f0e0:	f7f9 f82a 	bl	8018138 <uxr_run_session_until_confirm_delivery>
 801f0e4:	4638      	mov	r0, r7
 801f0e6:	b00b      	add	sp, #44	@ 0x2c
 801f0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0ec:	2001      	movs	r0, #1
 801f0ee:	b00b      	add	sp, #44	@ 0x2c
 801f0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f0f8:	f7f8 fc64 	bl	80179c4 <uxr_flash_output_streams>
 801f0fc:	4638      	mov	r0, r7
 801f0fe:	b00b      	add	sp, #44	@ 0x2c
 801f100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f104:	200c      	movs	r0, #12
 801f106:	b00b      	add	sp, #44	@ 0x2c
 801f108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f10c:	080258d8 	.word	0x080258d8

0801f110 <rmw_take_request>:
 801f110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f114:	4605      	mov	r5, r0
 801f116:	6800      	ldr	r0, [r0, #0]
 801f118:	b089      	sub	sp, #36	@ 0x24
 801f11a:	460c      	mov	r4, r1
 801f11c:	4690      	mov	r8, r2
 801f11e:	461e      	mov	r6, r3
 801f120:	b128      	cbz	r0, 801f12e <rmw_take_request+0x1e>
 801f122:	4b28      	ldr	r3, [pc, #160]	@ (801f1c4 <rmw_take_request+0xb4>)
 801f124:	6819      	ldr	r1, [r3, #0]
 801f126:	f7e1 f8db 	bl	80002e0 <strcmp>
 801f12a:	2800      	cmp	r0, #0
 801f12c:	d146      	bne.n	801f1bc <rmw_take_request+0xac>
 801f12e:	b10e      	cbz	r6, 801f134 <rmw_take_request+0x24>
 801f130:	2300      	movs	r3, #0
 801f132:	7033      	strb	r3, [r6, #0]
 801f134:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801f138:	f7f6 ff5a 	bl	8015ff0 <rmw_uxrce_clean_expired_static_input_buffer>
 801f13c:	4648      	mov	r0, r9
 801f13e:	f7f6 ff2d 	bl	8015f9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801f142:	4607      	mov	r7, r0
 801f144:	b3b0      	cbz	r0, 801f1b4 <rmw_take_request+0xa4>
 801f146:	6885      	ldr	r5, [r0, #8]
 801f148:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801f14c:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801f150:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801f154:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801f158:	7423      	strb	r3, [r4, #16]
 801f15a:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801f15e:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801f162:	f8a4 2011 	strh.w	r2, [r4, #17]
 801f166:	74e3      	strb	r3, [r4, #19]
 801f168:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801f16c:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801f170:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801f174:	6161      	str	r1, [r4, #20]
 801f176:	61a2      	str	r2, [r4, #24]
 801f178:	61e3      	str	r3, [r4, #28]
 801f17a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f17e:	689b      	ldr	r3, [r3, #8]
 801f180:	4798      	blx	r3
 801f182:	6844      	ldr	r4, [r0, #4]
 801f184:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801f188:	f105 0110 	add.w	r1, r5, #16
 801f18c:	4668      	mov	r0, sp
 801f18e:	f7f5 f859 	bl	8014244 <ucdr_init_buffer>
 801f192:	4641      	mov	r1, r8
 801f194:	68e3      	ldr	r3, [r4, #12]
 801f196:	4668      	mov	r0, sp
 801f198:	4798      	blx	r3
 801f19a:	4639      	mov	r1, r7
 801f19c:	4604      	mov	r4, r0
 801f19e:	480a      	ldr	r0, [pc, #40]	@ (801f1c8 <rmw_take_request+0xb8>)
 801f1a0:	f7ff fb1c 	bl	801e7dc <put_memory>
 801f1a4:	b106      	cbz	r6, 801f1a8 <rmw_take_request+0x98>
 801f1a6:	7034      	strb	r4, [r6, #0]
 801f1a8:	f084 0001 	eor.w	r0, r4, #1
 801f1ac:	b2c0      	uxtb	r0, r0
 801f1ae:	b009      	add	sp, #36	@ 0x24
 801f1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f1b4:	2001      	movs	r0, #1
 801f1b6:	b009      	add	sp, #36	@ 0x24
 801f1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f1bc:	200c      	movs	r0, #12
 801f1be:	b009      	add	sp, #36	@ 0x24
 801f1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f1c4:	080258d8 	.word	0x080258d8
 801f1c8:	2406939c 	.word	0x2406939c

0801f1cc <rmw_send_response>:
 801f1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1ce:	4605      	mov	r5, r0
 801f1d0:	6800      	ldr	r0, [r0, #0]
 801f1d2:	b091      	sub	sp, #68	@ 0x44
 801f1d4:	460c      	mov	r4, r1
 801f1d6:	4616      	mov	r6, r2
 801f1d8:	b128      	cbz	r0, 801f1e6 <rmw_send_response+0x1a>
 801f1da:	4b29      	ldr	r3, [pc, #164]	@ (801f280 <rmw_send_response+0xb4>)
 801f1dc:	6819      	ldr	r1, [r3, #0]
 801f1de:	f7e1 f87f 	bl	80002e0 <strcmp>
 801f1e2:	2800      	cmp	r0, #0
 801f1e4:	d141      	bne.n	801f26a <rmw_send_response+0x9e>
 801f1e6:	686d      	ldr	r5, [r5, #4]
 801f1e8:	68a1      	ldr	r1, [r4, #8]
 801f1ea:	6860      	ldr	r0, [r4, #4]
 801f1ec:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801f1ee:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801f1f2:	9307      	str	r3, [sp, #28]
 801f1f4:	4623      	mov	r3, r4
 801f1f6:	9206      	str	r2, [sp, #24]
 801f1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f1fc:	789b      	ldrb	r3, [r3, #2]
 801f1fe:	f88d 2017 	strb.w	r2, [sp, #23]
 801f202:	f88d 3016 	strb.w	r3, [sp, #22]
 801f206:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801f20a:	68e2      	ldr	r2, [r4, #12]
 801f20c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f210:	ab02      	add	r3, sp, #8
 801f212:	696c      	ldr	r4, [r5, #20]
 801f214:	c307      	stmia	r3!, {r0, r1, r2}
 801f216:	68e3      	ldr	r3, [r4, #12]
 801f218:	4798      	blx	r3
 801f21a:	6844      	ldr	r4, [r0, #4]
 801f21c:	4630      	mov	r0, r6
 801f21e:	6923      	ldr	r3, [r4, #16]
 801f220:	4798      	blx	r3
 801f222:	f100 0318 	add.w	r3, r0, #24
 801f226:	6938      	ldr	r0, [r7, #16]
 801f228:	9300      	str	r3, [sp, #0]
 801f22a:	ab08      	add	r3, sp, #32
 801f22c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f230:	692a      	ldr	r2, [r5, #16]
 801f232:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801f234:	f7fa fa7a 	bl	801972c <uxr_prepare_output_stream>
 801f238:	b910      	cbnz	r0, 801f240 <rmw_send_response+0x74>
 801f23a:	2001      	movs	r0, #1
 801f23c:	b011      	add	sp, #68	@ 0x44
 801f23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f240:	a902      	add	r1, sp, #8
 801f242:	a808      	add	r0, sp, #32
 801f244:	f7fb fc02 	bl	801aa4c <uxr_serialize_SampleIdentity>
 801f248:	68a3      	ldr	r3, [r4, #8]
 801f24a:	a908      	add	r1, sp, #32
 801f24c:	4630      	mov	r0, r6
 801f24e:	4798      	blx	r3
 801f250:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801f254:	6938      	ldr	r0, [r7, #16]
 801f256:	2b01      	cmp	r3, #1
 801f258:	d00a      	beq.n	801f270 <rmw_send_response+0xa4>
 801f25a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801f25c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f260:	f7f8 ff6a 	bl	8018138 <uxr_run_session_until_confirm_delivery>
 801f264:	2000      	movs	r0, #0
 801f266:	b011      	add	sp, #68	@ 0x44
 801f268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f26a:	200c      	movs	r0, #12
 801f26c:	b011      	add	sp, #68	@ 0x44
 801f26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f270:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f274:	f7f8 fba6 	bl	80179c4 <uxr_flash_output_streams>
 801f278:	2000      	movs	r0, #0
 801f27a:	b011      	add	sp, #68	@ 0x44
 801f27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f27e:	bf00      	nop
 801f280:	080258d8 	.word	0x080258d8

0801f284 <rmw_take_response>:
 801f284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f288:	4604      	mov	r4, r0
 801f28a:	6800      	ldr	r0, [r0, #0]
 801f28c:	b088      	sub	sp, #32
 801f28e:	460f      	mov	r7, r1
 801f290:	4690      	mov	r8, r2
 801f292:	461d      	mov	r5, r3
 801f294:	b120      	cbz	r0, 801f2a0 <rmw_take_response+0x1c>
 801f296:	4b1d      	ldr	r3, [pc, #116]	@ (801f30c <rmw_take_response+0x88>)
 801f298:	6819      	ldr	r1, [r3, #0]
 801f29a:	f7e1 f821 	bl	80002e0 <strcmp>
 801f29e:	bb68      	cbnz	r0, 801f2fc <rmw_take_response+0x78>
 801f2a0:	b10d      	cbz	r5, 801f2a6 <rmw_take_response+0x22>
 801f2a2:	2300      	movs	r3, #0
 801f2a4:	702b      	strb	r3, [r5, #0]
 801f2a6:	6864      	ldr	r4, [r4, #4]
 801f2a8:	f7f6 fea2 	bl	8015ff0 <rmw_uxrce_clean_expired_static_input_buffer>
 801f2ac:	4620      	mov	r0, r4
 801f2ae:	f7f6 fe75 	bl	8015f9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801f2b2:	4606      	mov	r6, r0
 801f2b4:	b330      	cbz	r0, 801f304 <rmw_take_response+0x80>
 801f2b6:	6963      	ldr	r3, [r4, #20]
 801f2b8:	6884      	ldr	r4, [r0, #8]
 801f2ba:	68db      	ldr	r3, [r3, #12]
 801f2bc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801f2c0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801f2c4:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801f2c8:	4798      	blx	r3
 801f2ca:	6847      	ldr	r7, [r0, #4]
 801f2cc:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801f2d0:	f104 0110 	add.w	r1, r4, #16
 801f2d4:	4668      	mov	r0, sp
 801f2d6:	f7f4 ffb5 	bl	8014244 <ucdr_init_buffer>
 801f2da:	4641      	mov	r1, r8
 801f2dc:	68fb      	ldr	r3, [r7, #12]
 801f2de:	4668      	mov	r0, sp
 801f2e0:	4798      	blx	r3
 801f2e2:	4631      	mov	r1, r6
 801f2e4:	4604      	mov	r4, r0
 801f2e6:	480a      	ldr	r0, [pc, #40]	@ (801f310 <rmw_take_response+0x8c>)
 801f2e8:	f7ff fa78 	bl	801e7dc <put_memory>
 801f2ec:	b105      	cbz	r5, 801f2f0 <rmw_take_response+0x6c>
 801f2ee:	702c      	strb	r4, [r5, #0]
 801f2f0:	f084 0001 	eor.w	r0, r4, #1
 801f2f4:	b2c0      	uxtb	r0, r0
 801f2f6:	b008      	add	sp, #32
 801f2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2fc:	200c      	movs	r0, #12
 801f2fe:	b008      	add	sp, #32
 801f300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f304:	2001      	movs	r0, #1
 801f306:	b008      	add	sp, #32
 801f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f30c:	080258d8 	.word	0x080258d8
 801f310:	2406939c 	.word	0x2406939c

0801f314 <rmw_create_service>:
 801f314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f318:	b091      	sub	sp, #68	@ 0x44
 801f31a:	2900      	cmp	r1, #0
 801f31c:	f000 80bb 	beq.w	801f496 <rmw_create_service+0x182>
 801f320:	4606      	mov	r6, r0
 801f322:	2800      	cmp	r0, #0
 801f324:	f000 80b7 	beq.w	801f496 <rmw_create_service+0x182>
 801f328:	4614      	mov	r4, r2
 801f32a:	6800      	ldr	r0, [r0, #0]
 801f32c:	4689      	mov	r9, r1
 801f32e:	461d      	mov	r5, r3
 801f330:	f7f6 ffee 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 801f334:	2c00      	cmp	r4, #0
 801f336:	f000 80ae 	beq.w	801f496 <rmw_create_service+0x182>
 801f33a:	f080 0001 	eor.w	r0, r0, #1
 801f33e:	b2c0      	uxtb	r0, r0
 801f340:	2800      	cmp	r0, #0
 801f342:	f040 80a8 	bne.w	801f496 <rmw_create_service+0x182>
 801f346:	7823      	ldrb	r3, [r4, #0]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	f000 80a4 	beq.w	801f496 <rmw_create_service+0x182>
 801f34e:	2d00      	cmp	r5, #0
 801f350:	f000 80a1 	beq.w	801f496 <rmw_create_service+0x182>
 801f354:	4856      	ldr	r0, [pc, #344]	@ (801f4b0 <rmw_create_service+0x19c>)
 801f356:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801f35a:	f7ff fa2f 	bl	801e7bc <get_memory>
 801f35e:	4606      	mov	r6, r0
 801f360:	2800      	cmp	r0, #0
 801f362:	f000 8099 	beq.w	801f498 <rmw_create_service+0x184>
 801f366:	6887      	ldr	r7, [r0, #8]
 801f368:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801f36c:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801f370:	f7ff fa8c 	bl	801e88c <rmw_get_implementation_identifier>
 801f374:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801f376:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801f37a:	4620      	mov	r0, r4
 801f37c:	f7e0 ffba 	bl	80002f4 <strlen>
 801f380:	1c42      	adds	r2, r0, #1
 801f382:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801f386:	2a3c      	cmp	r2, #60	@ 0x3c
 801f388:	f200 808a 	bhi.w	801f4a0 <rmw_create_service+0x18c>
 801f38c:	4621      	mov	r1, r4
 801f38e:	4650      	mov	r0, sl
 801f390:	f003 f951 	bl	8022636 <memcpy>
 801f394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801f398:	4629      	mov	r1, r5
 801f39a:	2250      	movs	r2, #80	@ 0x50
 801f39c:	f107 0020 	add.w	r0, r7, #32
 801f3a0:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 801f3a4:	677b      	str	r3, [r7, #116]	@ 0x74
 801f3a6:	f003 f946 	bl	8022636 <memcpy>
 801f3aa:	4648      	mov	r0, r9
 801f3ac:	4941      	ldr	r1, [pc, #260]	@ (801f4b4 <rmw_create_service+0x1a0>)
 801f3ae:	f7f7 f837 	bl	8016420 <get_service_typesupport_handle>
 801f3b2:	2800      	cmp	r0, #0
 801f3b4:	d074      	beq.n	801f4a0 <rmw_create_service+0x18c>
 801f3b6:	6843      	ldr	r3, [r0, #4]
 801f3b8:	617b      	str	r3, [r7, #20]
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	d070      	beq.n	801f4a0 <rmw_create_service+0x18c>
 801f3be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f3c2:	2108      	movs	r1, #8
 801f3c4:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 801f4bc <rmw_create_service+0x1a8>
 801f3c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f3cc:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 801f4c0 <rmw_create_service+0x1ac>
 801f3d0:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801f3d4:	1c42      	adds	r2, r0, #1
 801f3d6:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801f3da:	f7f8 f89d 	bl	8017518 <uxr_object_id>
 801f3de:	2364      	movs	r3, #100	@ 0x64
 801f3e0:	6138      	str	r0, [r7, #16]
 801f3e2:	4652      	mov	r2, sl
 801f3e4:	4649      	mov	r1, r9
 801f3e6:	6978      	ldr	r0, [r7, #20]
 801f3e8:	f7f6 fee6 	bl	80161b8 <generate_service_types>
 801f3ec:	2800      	cmp	r0, #0
 801f3ee:	d057      	beq.n	801f4a0 <rmw_create_service+0x18c>
 801f3f0:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 801f4c4 <rmw_create_service+0x1b0>
 801f3f4:	233c      	movs	r3, #60	@ 0x3c
 801f3f6:	4a30      	ldr	r2, [pc, #192]	@ (801f4b8 <rmw_create_service+0x1a4>)
 801f3f8:	4620      	mov	r0, r4
 801f3fa:	4659      	mov	r1, fp
 801f3fc:	f7f6 feaa 	bl	8016154 <generate_service_topics>
 801f400:	2800      	cmp	r0, #0
 801f402:	d04d      	beq.n	801f4a0 <rmw_create_service+0x18c>
 801f404:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f408:	a80c      	add	r0, sp, #48	@ 0x30
 801f40a:	4629      	mov	r1, r5
 801f40c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801f410:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f414:	f7f6 fe86 	bl	8016124 <convert_qos_profile>
 801f418:	4a27      	ldr	r2, [pc, #156]	@ (801f4b8 <rmw_create_service+0x1a4>)
 801f41a:	a80c      	add	r0, sp, #48	@ 0x30
 801f41c:	9400      	str	r4, [sp, #0]
 801f41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f420:	e9cd b203 	strd	fp, r2, [sp, #12]
 801f424:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801f428:	c803      	ldmia	r0, {r0, r1}
 801f42a:	9a08      	ldr	r2, [sp, #32]
 801f42c:	9005      	str	r0, [sp, #20]
 801f42e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801f432:	2306      	movs	r3, #6
 801f434:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f438:	9307      	str	r3, [sp, #28]
 801f43a:	6811      	ldr	r1, [r2, #0]
 801f43c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801f440:	693a      	ldr	r2, [r7, #16]
 801f442:	f7f7 ff71 	bl	8017328 <uxr_buffer_create_replier_bin>
 801f446:	4602      	mov	r2, r0
 801f448:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f44c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f450:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f454:	f7f6 fe4a 	bl	80160ec <run_xrce_session>
 801f458:	b310      	cbz	r0, 801f4a0 <rmw_create_service+0x18c>
 801f45a:	7a2b      	ldrb	r3, [r5, #8]
 801f45c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f460:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f464:	2b02      	cmp	r3, #2
 801f466:	920e      	str	r2, [sp, #56]	@ 0x38
 801f468:	f04f 0200 	mov.w	r2, #0
 801f46c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f46e:	bf0c      	ite	eq
 801f470:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801f474:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801f478:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f47c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f47e:	ab0e      	add	r3, sp, #56	@ 0x38
 801f480:	673a      	str	r2, [r7, #112]	@ 0x70
 801f482:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801f486:	9300      	str	r3, [sp, #0]
 801f488:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f48a:	6811      	ldr	r1, [r2, #0]
 801f48c:	693a      	ldr	r2, [r7, #16]
 801f48e:	f001 fc6b 	bl	8020d68 <uxr_buffer_request_data>
 801f492:	8338      	strh	r0, [r7, #24]
 801f494:	e000      	b.n	801f498 <rmw_create_service+0x184>
 801f496:	2600      	movs	r6, #0
 801f498:	4630      	mov	r0, r6
 801f49a:	b011      	add	sp, #68	@ 0x44
 801f49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4a0:	4630      	mov	r0, r6
 801f4a2:	2600      	movs	r6, #0
 801f4a4:	f7f6 fce8 	bl	8015e78 <rmw_uxrce_fini_service_memory>
 801f4a8:	4630      	mov	r0, r6
 801f4aa:	b011      	add	sp, #68	@ 0x44
 801f4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4b0:	2406937c 	.word	0x2406937c
 801f4b4:	08023788 	.word	0x08023788
 801f4b8:	24069658 	.word	0x24069658
 801f4bc:	24069694 	.word	0x24069694
 801f4c0:	240695f4 	.word	0x240695f4
 801f4c4:	240695b8 	.word	0x240695b8

0801f4c8 <rmw_destroy_service>:
 801f4c8:	b570      	push	{r4, r5, r6, lr}
 801f4ca:	b128      	cbz	r0, 801f4d8 <rmw_destroy_service+0x10>
 801f4cc:	4604      	mov	r4, r0
 801f4ce:	6800      	ldr	r0, [r0, #0]
 801f4d0:	460d      	mov	r5, r1
 801f4d2:	f7f6 ff1d 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 801f4d6:	b910      	cbnz	r0, 801f4de <rmw_destroy_service+0x16>
 801f4d8:	2401      	movs	r4, #1
 801f4da:	4620      	mov	r0, r4
 801f4dc:	bd70      	pop	{r4, r5, r6, pc}
 801f4de:	6863      	ldr	r3, [r4, #4]
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	d0f9      	beq.n	801f4d8 <rmw_destroy_service+0x10>
 801f4e4:	2d00      	cmp	r5, #0
 801f4e6:	d0f7      	beq.n	801f4d8 <rmw_destroy_service+0x10>
 801f4e8:	6828      	ldr	r0, [r5, #0]
 801f4ea:	f7f6 ff11 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 801f4ee:	2800      	cmp	r0, #0
 801f4f0:	d0f2      	beq.n	801f4d8 <rmw_destroy_service+0x10>
 801f4f2:	686e      	ldr	r6, [r5, #4]
 801f4f4:	2e00      	cmp	r6, #0
 801f4f6:	d0ef      	beq.n	801f4d8 <rmw_destroy_service+0x10>
 801f4f8:	6864      	ldr	r4, [r4, #4]
 801f4fa:	6932      	ldr	r2, [r6, #16]
 801f4fc:	6920      	ldr	r0, [r4, #16]
 801f4fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f502:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f506:	6819      	ldr	r1, [r3, #0]
 801f508:	f001 fc68 	bl	8020ddc <uxr_buffer_cancel_data>
 801f50c:	4602      	mov	r2, r0
 801f50e:	6920      	ldr	r0, [r4, #16]
 801f510:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f514:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f518:	f7f6 fde8 	bl	80160ec <run_xrce_session>
 801f51c:	6920      	ldr	r0, [r4, #16]
 801f51e:	6932      	ldr	r2, [r6, #16]
 801f520:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f524:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f528:	6819      	ldr	r1, [r3, #0]
 801f52a:	f7f7 fcfb 	bl	8016f24 <uxr_buffer_delete_entity>
 801f52e:	4602      	mov	r2, r0
 801f530:	6920      	ldr	r0, [r4, #16]
 801f532:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f536:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f53a:	f7f6 fdd7 	bl	80160ec <run_xrce_session>
 801f53e:	4603      	mov	r3, r0
 801f540:	4628      	mov	r0, r5
 801f542:	2b00      	cmp	r3, #0
 801f544:	bf14      	ite	ne
 801f546:	2400      	movne	r4, #0
 801f548:	2402      	moveq	r4, #2
 801f54a:	f7f6 fc95 	bl	8015e78 <rmw_uxrce_fini_service_memory>
 801f54e:	e7c4      	b.n	801f4da <rmw_destroy_service+0x12>

0801f550 <rmw_service_response_publisher_get_actual_qos>:
 801f550:	b181      	cbz	r1, 801f574 <rmw_service_response_publisher_get_actual_qos+0x24>
 801f552:	4603      	mov	r3, r0
 801f554:	b510      	push	{r4, lr}
 801f556:	fab0 f480 	clz	r4, r0
 801f55a:	0964      	lsrs	r4, r4, #5
 801f55c:	b140      	cbz	r0, 801f570 <rmw_service_response_publisher_get_actual_qos+0x20>
 801f55e:	685b      	ldr	r3, [r3, #4]
 801f560:	4608      	mov	r0, r1
 801f562:	2250      	movs	r2, #80	@ 0x50
 801f564:	f103 0120 	add.w	r1, r3, #32
 801f568:	f003 f865 	bl	8022636 <memcpy>
 801f56c:	4620      	mov	r0, r4
 801f56e:	bd10      	pop	{r4, pc}
 801f570:	200b      	movs	r0, #11
 801f572:	bd10      	pop	{r4, pc}
 801f574:	200b      	movs	r0, #11
 801f576:	4770      	bx	lr

0801f578 <rmw_service_request_subscription_get_actual_qos>:
 801f578:	b178      	cbz	r0, 801f59a <rmw_service_request_subscription_get_actual_qos+0x22>
 801f57a:	b510      	push	{r4, lr}
 801f57c:	fab1 f481 	clz	r4, r1
 801f580:	0964      	lsrs	r4, r4, #5
 801f582:	b141      	cbz	r1, 801f596 <rmw_service_request_subscription_get_actual_qos+0x1e>
 801f584:	6843      	ldr	r3, [r0, #4]
 801f586:	2250      	movs	r2, #80	@ 0x50
 801f588:	4608      	mov	r0, r1
 801f58a:	f103 0120 	add.w	r1, r3, #32
 801f58e:	f003 f852 	bl	8022636 <memcpy>
 801f592:	4620      	mov	r0, r4
 801f594:	bd10      	pop	{r4, pc}
 801f596:	200b      	movs	r0, #11
 801f598:	bd10      	pop	{r4, pc}
 801f59a:	200b      	movs	r0, #11
 801f59c:	4770      	bx	lr
 801f59e:	bf00      	nop

0801f5a0 <rmw_create_subscription>:
 801f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5a4:	b08d      	sub	sp, #52	@ 0x34
 801f5a6:	2900      	cmp	r1, #0
 801f5a8:	f000 80d8 	beq.w	801f75c <rmw_create_subscription+0x1bc>
 801f5ac:	4604      	mov	r4, r0
 801f5ae:	2800      	cmp	r0, #0
 801f5b0:	f000 80d4 	beq.w	801f75c <rmw_create_subscription+0x1bc>
 801f5b4:	6800      	ldr	r0, [r0, #0]
 801f5b6:	460e      	mov	r6, r1
 801f5b8:	4615      	mov	r5, r2
 801f5ba:	461f      	mov	r7, r3
 801f5bc:	f7f6 fea8 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 801f5c0:	f080 0001 	eor.w	r0, r0, #1
 801f5c4:	b2c0      	uxtb	r0, r0
 801f5c6:	2800      	cmp	r0, #0
 801f5c8:	f040 80c8 	bne.w	801f75c <rmw_create_subscription+0x1bc>
 801f5cc:	2d00      	cmp	r5, #0
 801f5ce:	f000 80c5 	beq.w	801f75c <rmw_create_subscription+0x1bc>
 801f5d2:	782b      	ldrb	r3, [r5, #0]
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	f000 80c1 	beq.w	801f75c <rmw_create_subscription+0x1bc>
 801f5da:	2f00      	cmp	r7, #0
 801f5dc:	f000 80be 	beq.w	801f75c <rmw_create_subscription+0x1bc>
 801f5e0:	4867      	ldr	r0, [pc, #412]	@ (801f780 <rmw_create_subscription+0x1e0>)
 801f5e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801f5e6:	f7ff f8e9 	bl	801e7bc <get_memory>
 801f5ea:	4604      	mov	r4, r0
 801f5ec:	2800      	cmp	r0, #0
 801f5ee:	f000 80b6 	beq.w	801f75e <rmw_create_subscription+0x1be>
 801f5f2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f5f6:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 801f5fa:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 801f5fe:	f7ff f945 	bl	801e88c <rmw_get_implementation_identifier>
 801f602:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 801f606:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 801f60a:	4628      	mov	r0, r5
 801f60c:	f7e0 fe72 	bl	80002f4 <strlen>
 801f610:	3001      	adds	r0, #1
 801f612:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 801f616:	283c      	cmp	r0, #60	@ 0x3c
 801f618:	f200 80a5 	bhi.w	801f766 <rmw_create_subscription+0x1c6>
 801f61c:	462b      	mov	r3, r5
 801f61e:	4a59      	ldr	r2, [pc, #356]	@ (801f784 <rmw_create_subscription+0x1e4>)
 801f620:	213c      	movs	r1, #60	@ 0x3c
 801f622:	4650      	mov	r0, sl
 801f624:	f002 fd7a 	bl	802211c <sniprintf>
 801f628:	4639      	mov	r1, r7
 801f62a:	2250      	movs	r2, #80	@ 0x50
 801f62c:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801f630:	f8c8 9020 	str.w	r9, [r8, #32]
 801f634:	f002 ffff 	bl	8022636 <memcpy>
 801f638:	4630      	mov	r0, r6
 801f63a:	4953      	ldr	r1, [pc, #332]	@ (801f788 <rmw_create_subscription+0x1e8>)
 801f63c:	f7f6 fee4 	bl	8016408 <get_message_typesupport_handle>
 801f640:	2800      	cmp	r0, #0
 801f642:	f000 8090 	beq.w	801f766 <rmw_create_subscription+0x1c6>
 801f646:	6842      	ldr	r2, [r0, #4]
 801f648:	f8c8 2018 	str.w	r2, [r8, #24]
 801f64c:	2a00      	cmp	r2, #0
 801f64e:	f000 808a 	beq.w	801f766 <rmw_create_subscription+0x1c6>
 801f652:	4629      	mov	r1, r5
 801f654:	463b      	mov	r3, r7
 801f656:	4648      	mov	r0, r9
 801f658:	f7ff fb84 	bl	801ed64 <create_topic>
 801f65c:	f8c8 001c 	str.w	r0, [r8, #28]
 801f660:	2800      	cmp	r0, #0
 801f662:	f000 8085 	beq.w	801f770 <rmw_create_subscription+0x1d0>
 801f666:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f66a:	2104      	movs	r1, #4
 801f66c:	2506      	movs	r5, #6
 801f66e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f672:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801f676:	1c42      	adds	r2, r0, #1
 801f678:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801f67c:	f7f7 ff4c 	bl	8017518 <uxr_object_id>
 801f680:	f8c8 0010 	str.w	r0, [r8, #16]
 801f684:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f688:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801f68c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f690:	9500      	str	r5, [sp, #0]
 801f692:	6819      	ldr	r1, [r3, #0]
 801f694:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f698:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f69c:	f7f7 fd26 	bl	80170ec <uxr_buffer_create_subscriber_bin>
 801f6a0:	4602      	mov	r2, r0
 801f6a2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f6a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f6aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f6ae:	f7f6 fd1d 	bl	80160ec <run_xrce_session>
 801f6b2:	2800      	cmp	r0, #0
 801f6b4:	d057      	beq.n	801f766 <rmw_create_subscription+0x1c6>
 801f6b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f6ba:	4629      	mov	r1, r5
 801f6bc:	ae08      	add	r6, sp, #32
 801f6be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f6c2:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801f6c6:	1c42      	adds	r2, r0, #1
 801f6c8:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801f6cc:	f7f7 ff24 	bl	8017518 <uxr_object_id>
 801f6d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f6d4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801f6d8:	4639      	mov	r1, r7
 801f6da:	f8c8 0014 	str.w	r0, [r8, #20]
 801f6de:	4630      	mov	r0, r6
 801f6e0:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801f6e4:	9305      	str	r3, [sp, #20]
 801f6e6:	f7f6 fd1d 	bl	8016124 <convert_qos_profile>
 801f6ea:	9503      	str	r5, [sp, #12]
 801f6ec:	9b05      	ldr	r3, [sp, #20]
 801f6ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f6f2:	9001      	str	r0, [sp, #4]
 801f6f4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801f6f8:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f6fc:	691b      	ldr	r3, [r3, #16]
 801f6fe:	9300      	str	r3, [sp, #0]
 801f700:	f8db 1000 	ldr.w	r1, [fp]
 801f704:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801f708:	f7f7 fd96 	bl	8017238 <uxr_buffer_create_datareader_bin>
 801f70c:	4602      	mov	r2, r0
 801f70e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f712:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f716:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f71a:	f7f6 fce7 	bl	80160ec <run_xrce_session>
 801f71e:	b310      	cbz	r0, 801f766 <rmw_create_subscription+0x1c6>
 801f720:	7a3b      	ldrb	r3, [r7, #8]
 801f722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f726:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f72a:	2b02      	cmp	r3, #2
 801f72c:	920a      	str	r2, [sp, #40]	@ 0x28
 801f72e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f732:	f04f 0200 	mov.w	r2, #0
 801f736:	bf08      	it	eq
 801f738:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801f73c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f740:	bf18      	it	ne
 801f742:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801f746:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f748:	9307      	str	r3, [sp, #28]
 801f74a:	ab0a      	add	r3, sp, #40	@ 0x28
 801f74c:	9300      	str	r3, [sp, #0]
 801f74e:	9b07      	ldr	r3, [sp, #28]
 801f750:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801f754:	6809      	ldr	r1, [r1, #0]
 801f756:	f001 fb07 	bl	8020d68 <uxr_buffer_request_data>
 801f75a:	e000      	b.n	801f75e <rmw_create_subscription+0x1be>
 801f75c:	2400      	movs	r4, #0
 801f75e:	4620      	mov	r0, r4
 801f760:	b00d      	add	sp, #52	@ 0x34
 801f762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f766:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801f76a:	b108      	cbz	r0, 801f770 <rmw_create_subscription+0x1d0>
 801f76c:	f7f6 fbb0 	bl	8015ed0 <rmw_uxrce_fini_topic_memory>
 801f770:	4620      	mov	r0, r4
 801f772:	2400      	movs	r4, #0
 801f774:	f7f6 fb6a 	bl	8015e4c <rmw_uxrce_fini_subscription_memory>
 801f778:	4620      	mov	r0, r4
 801f77a:	b00d      	add	sp, #52	@ 0x34
 801f77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f780:	240693ac 	.word	0x240693ac
 801f784:	08024958 	.word	0x08024958
 801f788:	08023788 	.word	0x08023788

0801f78c <rmw_subscription_get_actual_qos>:
 801f78c:	b178      	cbz	r0, 801f7ae <rmw_subscription_get_actual_qos+0x22>
 801f78e:	b510      	push	{r4, lr}
 801f790:	fab1 f481 	clz	r4, r1
 801f794:	0964      	lsrs	r4, r4, #5
 801f796:	b141      	cbz	r1, 801f7aa <rmw_subscription_get_actual_qos+0x1e>
 801f798:	6843      	ldr	r3, [r0, #4]
 801f79a:	2250      	movs	r2, #80	@ 0x50
 801f79c:	4608      	mov	r0, r1
 801f79e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801f7a2:	f002 ff48 	bl	8022636 <memcpy>
 801f7a6:	4620      	mov	r0, r4
 801f7a8:	bd10      	pop	{r4, pc}
 801f7aa:	200b      	movs	r0, #11
 801f7ac:	bd10      	pop	{r4, pc}
 801f7ae:	200b      	movs	r0, #11
 801f7b0:	4770      	bx	lr
 801f7b2:	bf00      	nop

0801f7b4 <rmw_destroy_subscription>:
 801f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7b8:	b128      	cbz	r0, 801f7c6 <rmw_destroy_subscription+0x12>
 801f7ba:	4604      	mov	r4, r0
 801f7bc:	6800      	ldr	r0, [r0, #0]
 801f7be:	460d      	mov	r5, r1
 801f7c0:	f7f6 fda6 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 801f7c4:	b918      	cbnz	r0, 801f7ce <rmw_destroy_subscription+0x1a>
 801f7c6:	2401      	movs	r4, #1
 801f7c8:	4620      	mov	r0, r4
 801f7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7ce:	6863      	ldr	r3, [r4, #4]
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	d0f8      	beq.n	801f7c6 <rmw_destroy_subscription+0x12>
 801f7d4:	fab5 f485 	clz	r4, r5
 801f7d8:	0964      	lsrs	r4, r4, #5
 801f7da:	2d00      	cmp	r5, #0
 801f7dc:	d0f3      	beq.n	801f7c6 <rmw_destroy_subscription+0x12>
 801f7de:	6828      	ldr	r0, [r5, #0]
 801f7e0:	f7f6 fd96 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 801f7e4:	2800      	cmp	r0, #0
 801f7e6:	d0ee      	beq.n	801f7c6 <rmw_destroy_subscription+0x12>
 801f7e8:	686e      	ldr	r6, [r5, #4]
 801f7ea:	2e00      	cmp	r6, #0
 801f7ec:	d0eb      	beq.n	801f7c6 <rmw_destroy_subscription+0x12>
 801f7ee:	6a37      	ldr	r7, [r6, #32]
 801f7f0:	6972      	ldr	r2, [r6, #20]
 801f7f2:	6938      	ldr	r0, [r7, #16]
 801f7f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f7f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f7fc:	6819      	ldr	r1, [r3, #0]
 801f7fe:	f001 faed 	bl	8020ddc <uxr_buffer_cancel_data>
 801f802:	4602      	mov	r2, r0
 801f804:	6938      	ldr	r0, [r7, #16]
 801f806:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f80a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f80e:	f7f6 fc6d 	bl	80160ec <run_xrce_session>
 801f812:	69f0      	ldr	r0, [r6, #28]
 801f814:	f7ff faf6 	bl	801ee04 <destroy_topic>
 801f818:	6a33      	ldr	r3, [r6, #32]
 801f81a:	6972      	ldr	r2, [r6, #20]
 801f81c:	6918      	ldr	r0, [r3, #16]
 801f81e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f822:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f826:	6819      	ldr	r1, [r3, #0]
 801f828:	f7f7 fb7c 	bl	8016f24 <uxr_buffer_delete_entity>
 801f82c:	6a33      	ldr	r3, [r6, #32]
 801f82e:	4680      	mov	r8, r0
 801f830:	6932      	ldr	r2, [r6, #16]
 801f832:	6918      	ldr	r0, [r3, #16]
 801f834:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f838:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f83c:	6819      	ldr	r1, [r3, #0]
 801f83e:	f7f7 fb71 	bl	8016f24 <uxr_buffer_delete_entity>
 801f842:	4606      	mov	r6, r0
 801f844:	6938      	ldr	r0, [r7, #16]
 801f846:	4642      	mov	r2, r8
 801f848:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f84c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f850:	f7f6 fc4c 	bl	80160ec <run_xrce_session>
 801f854:	693f      	ldr	r7, [r7, #16]
 801f856:	4632      	mov	r2, r6
 801f858:	4606      	mov	r6, r0
 801f85a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801f85e:	4638      	mov	r0, r7
 801f860:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801f864:	f7f6 fc42 	bl	80160ec <run_xrce_session>
 801f868:	b126      	cbz	r6, 801f874 <rmw_destroy_subscription+0xc0>
 801f86a:	b118      	cbz	r0, 801f874 <rmw_destroy_subscription+0xc0>
 801f86c:	4628      	mov	r0, r5
 801f86e:	f7f6 faed 	bl	8015e4c <rmw_uxrce_fini_subscription_memory>
 801f872:	e7a9      	b.n	801f7c8 <rmw_destroy_subscription+0x14>
 801f874:	2402      	movs	r4, #2
 801f876:	e7f9      	b.n	801f86c <rmw_destroy_subscription+0xb8>

0801f878 <rmw_take_with_info>:
 801f878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f87a:	4604      	mov	r4, r0
 801f87c:	6800      	ldr	r0, [r0, #0]
 801f87e:	b089      	sub	sp, #36	@ 0x24
 801f880:	460f      	mov	r7, r1
 801f882:	4615      	mov	r5, r2
 801f884:	b128      	cbz	r0, 801f892 <rmw_take_with_info+0x1a>
 801f886:	4b24      	ldr	r3, [pc, #144]	@ (801f918 <rmw_take_with_info+0xa0>)
 801f888:	6819      	ldr	r1, [r3, #0]
 801f88a:	f7e0 fd29 	bl	80002e0 <strcmp>
 801f88e:	2800      	cmp	r0, #0
 801f890:	d13e      	bne.n	801f910 <rmw_take_with_info+0x98>
 801f892:	b305      	cbz	r5, 801f8d6 <rmw_take_with_info+0x5e>
 801f894:	2300      	movs	r3, #0
 801f896:	6864      	ldr	r4, [r4, #4]
 801f898:	702b      	strb	r3, [r5, #0]
 801f89a:	f7f6 fba9 	bl	8015ff0 <rmw_uxrce_clean_expired_static_input_buffer>
 801f89e:	4620      	mov	r0, r4
 801f8a0:	f7f6 fb7c 	bl	8015f9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801f8a4:	4606      	mov	r6, r0
 801f8a6:	b1f0      	cbz	r0, 801f8e6 <rmw_take_with_info+0x6e>
 801f8a8:	6881      	ldr	r1, [r0, #8]
 801f8aa:	4668      	mov	r0, sp
 801f8ac:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f8b0:	3110      	adds	r1, #16
 801f8b2:	f7f4 fcc7 	bl	8014244 <ucdr_init_buffer>
 801f8b6:	69a3      	ldr	r3, [r4, #24]
 801f8b8:	4639      	mov	r1, r7
 801f8ba:	4668      	mov	r0, sp
 801f8bc:	68db      	ldr	r3, [r3, #12]
 801f8be:	4798      	blx	r3
 801f8c0:	4604      	mov	r4, r0
 801f8c2:	4631      	mov	r1, r6
 801f8c4:	4815      	ldr	r0, [pc, #84]	@ (801f91c <rmw_take_with_info+0xa4>)
 801f8c6:	f7fe ff89 	bl	801e7dc <put_memory>
 801f8ca:	702c      	strb	r4, [r5, #0]
 801f8cc:	f084 0001 	eor.w	r0, r4, #1
 801f8d0:	b2c0      	uxtb	r0, r0
 801f8d2:	b009      	add	sp, #36	@ 0x24
 801f8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8d6:	6864      	ldr	r4, [r4, #4]
 801f8d8:	f7f6 fb8a 	bl	8015ff0 <rmw_uxrce_clean_expired_static_input_buffer>
 801f8dc:	4620      	mov	r0, r4
 801f8de:	f7f6 fb5d 	bl	8015f9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801f8e2:	4605      	mov	r5, r0
 801f8e4:	b910      	cbnz	r0, 801f8ec <rmw_take_with_info+0x74>
 801f8e6:	2001      	movs	r0, #1
 801f8e8:	b009      	add	sp, #36	@ 0x24
 801f8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8ec:	68a9      	ldr	r1, [r5, #8]
 801f8ee:	4668      	mov	r0, sp
 801f8f0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f8f4:	3110      	adds	r1, #16
 801f8f6:	f7f4 fca5 	bl	8014244 <ucdr_init_buffer>
 801f8fa:	69a3      	ldr	r3, [r4, #24]
 801f8fc:	4639      	mov	r1, r7
 801f8fe:	4668      	mov	r0, sp
 801f900:	68db      	ldr	r3, [r3, #12]
 801f902:	4798      	blx	r3
 801f904:	4629      	mov	r1, r5
 801f906:	4604      	mov	r4, r0
 801f908:	4804      	ldr	r0, [pc, #16]	@ (801f91c <rmw_take_with_info+0xa4>)
 801f90a:	f7fe ff67 	bl	801e7dc <put_memory>
 801f90e:	e7dd      	b.n	801f8cc <rmw_take_with_info+0x54>
 801f910:	200c      	movs	r0, #12
 801f912:	b009      	add	sp, #36	@ 0x24
 801f914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f916:	bf00      	nop
 801f918:	080258d8 	.word	0x080258d8
 801f91c:	2406939c 	.word	0x2406939c

0801f920 <rmw_wait>:
 801f920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f924:	4698      	mov	r8, r3
 801f926:	ea40 0301 	orr.w	r3, r0, r1
 801f92a:	b089      	sub	sp, #36	@ 0x24
 801f92c:	ea48 0303 	orr.w	r3, r8, r3
 801f930:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f932:	4313      	orrs	r3, r2
 801f934:	f000 8106 	beq.w	801fb44 <rmw_wait+0x224>
 801f938:	4605      	mov	r5, r0
 801f93a:	460e      	mov	r6, r1
 801f93c:	4691      	mov	r9, r2
 801f93e:	b16c      	cbz	r4, 801f95c <rmw_wait+0x3c>
 801f940:	4ba6      	ldr	r3, [pc, #664]	@ (801fbdc <rmw_wait+0x2bc>)
 801f942:	af04      	add	r7, sp, #16
 801f944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f946:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801f94a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801f94e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801f952:	f7fe fd55 	bl	801e400 <rmw_time_equal>
 801f956:	2800      	cmp	r0, #0
 801f958:	f000 810b 	beq.w	801fb72 <rmw_wait+0x252>
 801f95c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801f960:	f7f6 fb46 	bl	8015ff0 <rmw_uxrce_clean_expired_static_input_buffer>
 801f964:	4b9e      	ldr	r3, [pc, #632]	@ (801fbe0 <rmw_wait+0x2c0>)
 801f966:	681c      	ldr	r4, [r3, #0]
 801f968:	b14c      	cbz	r4, 801f97e <rmw_wait+0x5e>
 801f96a:	4623      	mov	r3, r4
 801f96c:	2100      	movs	r1, #0
 801f96e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801f972:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f976:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d1f7      	bne.n	801f96e <rmw_wait+0x4e>
 801f97e:	f1b9 0f00 	cmp.w	r9, #0
 801f982:	d011      	beq.n	801f9a8 <rmw_wait+0x88>
 801f984:	f8d9 1000 	ldr.w	r1, [r9]
 801f988:	b171      	cbz	r1, 801f9a8 <rmw_wait+0x88>
 801f98a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801f98e:	2300      	movs	r3, #0
 801f990:	2001      	movs	r0, #1
 801f992:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f996:	3301      	adds	r3, #1
 801f998:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f99a:	4299      	cmp	r1, r3
 801f99c:	6912      	ldr	r2, [r2, #16]
 801f99e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f9a2:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f9a6:	d1f4      	bne.n	801f992 <rmw_wait+0x72>
 801f9a8:	f1b8 0f00 	cmp.w	r8, #0
 801f9ac:	d011      	beq.n	801f9d2 <rmw_wait+0xb2>
 801f9ae:	f8d8 1000 	ldr.w	r1, [r8]
 801f9b2:	b171      	cbz	r1, 801f9d2 <rmw_wait+0xb2>
 801f9b4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801f9b8:	2300      	movs	r3, #0
 801f9ba:	2001      	movs	r0, #1
 801f9bc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f9c0:	3301      	adds	r3, #1
 801f9c2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f9c4:	4299      	cmp	r1, r3
 801f9c6:	6912      	ldr	r2, [r2, #16]
 801f9c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f9cc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f9d0:	d1f4      	bne.n	801f9bc <rmw_wait+0x9c>
 801f9d2:	b185      	cbz	r5, 801f9f6 <rmw_wait+0xd6>
 801f9d4:	6829      	ldr	r1, [r5, #0]
 801f9d6:	b171      	cbz	r1, 801f9f6 <rmw_wait+0xd6>
 801f9d8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801f9dc:	2300      	movs	r3, #0
 801f9de:	2001      	movs	r0, #1
 801f9e0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f9e4:	3301      	adds	r3, #1
 801f9e6:	6a12      	ldr	r2, [r2, #32]
 801f9e8:	4299      	cmp	r1, r3
 801f9ea:	6912      	ldr	r2, [r2, #16]
 801f9ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f9f0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f9f4:	d1f4      	bne.n	801f9e0 <rmw_wait+0xc0>
 801f9f6:	b344      	cbz	r4, 801fa4a <rmw_wait+0x12a>
 801f9f8:	4622      	mov	r2, r4
 801f9fa:	2300      	movs	r3, #0
 801f9fc:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801fa00:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801fa04:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801fa08:	440b      	add	r3, r1
 801fa0a:	b2db      	uxtb	r3, r3
 801fa0c:	2a00      	cmp	r2, #0
 801fa0e:	d1f5      	bne.n	801f9fc <rmw_wait+0xdc>
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	d05f      	beq.n	801fad4 <rmw_wait+0x1b4>
 801fa14:	1c7a      	adds	r2, r7, #1
 801fa16:	d00d      	beq.n	801fa34 <rmw_wait+0x114>
 801fa18:	ee07 7a90 	vmov	s15, r7
 801fa1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801fa20:	ee07 3a90 	vmov	s15, r3
 801fa24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fa28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801fa2c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801fa30:	ee17 7a90 	vmov	r7, s15
 801fa34:	68a0      	ldr	r0, [r4, #8]
 801fa36:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801fa3a:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	f040 808d 	bne.w	801fb5e <rmw_wait+0x23e>
 801fa44:	6864      	ldr	r4, [r4, #4]
 801fa46:	2c00      	cmp	r4, #0
 801fa48:	d1f4      	bne.n	801fa34 <rmw_wait+0x114>
 801fa4a:	f1b9 0f00 	cmp.w	r9, #0
 801fa4e:	f000 80a1 	beq.w	801fb94 <rmw_wait+0x274>
 801fa52:	f8d9 7000 	ldr.w	r7, [r9]
 801fa56:	2f00      	cmp	r7, #0
 801fa58:	f000 80a4 	beq.w	801fba4 <rmw_wait+0x284>
 801fa5c:	2400      	movs	r4, #0
 801fa5e:	4627      	mov	r7, r4
 801fa60:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801fa64:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801fa68:	f7f6 fa98 	bl	8015f9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801fa6c:	2800      	cmp	r0, #0
 801fa6e:	d03b      	beq.n	801fae8 <rmw_wait+0x1c8>
 801fa70:	3401      	adds	r4, #1
 801fa72:	f8d9 3000 	ldr.w	r3, [r9]
 801fa76:	2701      	movs	r7, #1
 801fa78:	42a3      	cmp	r3, r4
 801fa7a:	d8f1      	bhi.n	801fa60 <rmw_wait+0x140>
 801fa7c:	2701      	movs	r7, #1
 801fa7e:	f1b8 0f00 	cmp.w	r8, #0
 801fa82:	d010      	beq.n	801faa6 <rmw_wait+0x186>
 801fa84:	f8d8 3000 	ldr.w	r3, [r8]
 801fa88:	b16b      	cbz	r3, 801faa6 <rmw_wait+0x186>
 801fa8a:	2400      	movs	r4, #0
 801fa8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fa90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801fa94:	f7f6 fa82 	bl	8015f9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801fa98:	b370      	cbz	r0, 801faf8 <rmw_wait+0x1d8>
 801fa9a:	3401      	adds	r4, #1
 801fa9c:	f8d8 3000 	ldr.w	r3, [r8]
 801faa0:	2701      	movs	r7, #1
 801faa2:	42a3      	cmp	r3, r4
 801faa4:	d8f2      	bhi.n	801fa8c <rmw_wait+0x16c>
 801faa6:	2d00      	cmp	r5, #0
 801faa8:	d035      	beq.n	801fb16 <rmw_wait+0x1f6>
 801faaa:	682b      	ldr	r3, [r5, #0]
 801faac:	b39b      	cbz	r3, 801fb16 <rmw_wait+0x1f6>
 801faae:	2400      	movs	r4, #0
 801fab0:	686b      	ldr	r3, [r5, #4]
 801fab2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801fab6:	f7f6 fa71 	bl	8015f9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801faba:	b328      	cbz	r0, 801fb08 <rmw_wait+0x1e8>
 801fabc:	3401      	adds	r4, #1
 801fabe:	682b      	ldr	r3, [r5, #0]
 801fac0:	2701      	movs	r7, #1
 801fac2:	42a3      	cmp	r3, r4
 801fac4:	d8f4      	bhi.n	801fab0 <rmw_wait+0x190>
 801fac6:	2e00      	cmp	r6, #0
 801fac8:	d03c      	beq.n	801fb44 <rmw_wait+0x224>
 801faca:	6834      	ldr	r4, [r6, #0]
 801facc:	2c00      	cmp	r4, #0
 801face:	d039      	beq.n	801fb44 <rmw_wait+0x224>
 801fad0:	2701      	movs	r7, #1
 801fad2:	e023      	b.n	801fb1c <rmw_wait+0x1fc>
 801fad4:	68a0      	ldr	r0, [r4, #8]
 801fad6:	2100      	movs	r1, #0
 801fad8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801fadc:	f7f8 faf2 	bl	80180c4 <uxr_run_session_timeout>
 801fae0:	6864      	ldr	r4, [r4, #4]
 801fae2:	2c00      	cmp	r4, #0
 801fae4:	d1f6      	bne.n	801fad4 <rmw_wait+0x1b4>
 801fae6:	e7b0      	b.n	801fa4a <rmw_wait+0x12a>
 801fae8:	e9d9 3200 	ldrd	r3, r2, [r9]
 801faec:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801faf0:	3401      	adds	r4, #1
 801faf2:	42a3      	cmp	r3, r4
 801faf4:	d8b4      	bhi.n	801fa60 <rmw_wait+0x140>
 801faf6:	e7c2      	b.n	801fa7e <rmw_wait+0x15e>
 801faf8:	e9d8 3200 	ldrd	r3, r2, [r8]
 801fafc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801fb00:	3401      	adds	r4, #1
 801fb02:	429c      	cmp	r4, r3
 801fb04:	d3c2      	bcc.n	801fa8c <rmw_wait+0x16c>
 801fb06:	e7ce      	b.n	801faa6 <rmw_wait+0x186>
 801fb08:	e9d5 3200 	ldrd	r3, r2, [r5]
 801fb0c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801fb10:	3401      	adds	r4, #1
 801fb12:	42a3      	cmp	r3, r4
 801fb14:	d8cc      	bhi.n	801fab0 <rmw_wait+0x190>
 801fb16:	b1a6      	cbz	r6, 801fb42 <rmw_wait+0x222>
 801fb18:	6834      	ldr	r4, [r6, #0]
 801fb1a:	b194      	cbz	r4, 801fb42 <rmw_wait+0x222>
 801fb1c:	2300      	movs	r3, #0
 801fb1e:	461d      	mov	r5, r3
 801fb20:	e004      	b.n	801fb2c <rmw_wait+0x20c>
 801fb22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801fb26:	3301      	adds	r3, #1
 801fb28:	42a3      	cmp	r3, r4
 801fb2a:	d00a      	beq.n	801fb42 <rmw_wait+0x222>
 801fb2c:	6870      	ldr	r0, [r6, #4]
 801fb2e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801fb32:	7c0a      	ldrb	r2, [r1, #16]
 801fb34:	2a00      	cmp	r2, #0
 801fb36:	d0f4      	beq.n	801fb22 <rmw_wait+0x202>
 801fb38:	3301      	adds	r3, #1
 801fb3a:	4617      	mov	r7, r2
 801fb3c:	740d      	strb	r5, [r1, #16]
 801fb3e:	42a3      	cmp	r3, r4
 801fb40:	d1f4      	bne.n	801fb2c <rmw_wait+0x20c>
 801fb42:	b147      	cbz	r7, 801fb56 <rmw_wait+0x236>
 801fb44:	2000      	movs	r0, #0
 801fb46:	b009      	add	sp, #36	@ 0x24
 801fb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fb4c:	b11e      	cbz	r6, 801fb56 <rmw_wait+0x236>
 801fb4e:	6834      	ldr	r4, [r6, #0]
 801fb50:	462f      	mov	r7, r5
 801fb52:	2c00      	cmp	r4, #0
 801fb54:	d1e2      	bne.n	801fb1c <rmw_wait+0x1fc>
 801fb56:	2002      	movs	r0, #2
 801fb58:	b009      	add	sp, #36	@ 0x24
 801fb5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fb5e:	4639      	mov	r1, r7
 801fb60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801fb64:	f7f8 fac8 	bl	80180f8 <uxr_run_session_until_data>
 801fb68:	6864      	ldr	r4, [r4, #4]
 801fb6a:	2c00      	cmp	r4, #0
 801fb6c:	f47f af62 	bne.w	801fa34 <rmw_wait+0x114>
 801fb70:	e76b      	b.n	801fa4a <rmw_wait+0x12a>
 801fb72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fb76:	f7fe fc99 	bl	801e4ac <rmw_time_total_nsec>
 801fb7a:	2300      	movs	r3, #0
 801fb7c:	4a19      	ldr	r2, [pc, #100]	@ (801fbe4 <rmw_wait+0x2c4>)
 801fb7e:	f7e0 fc67 	bl	8000450 <__aeabi_uldivmod>
 801fb82:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801fb86:	4607      	mov	r7, r0
 801fb88:	f171 0300 	sbcs.w	r3, r1, #0
 801fb8c:	bfa8      	it	ge
 801fb8e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801fb92:	e6e5      	b.n	801f960 <rmw_wait+0x40>
 801fb94:	f1b8 0f00 	cmp.w	r8, #0
 801fb98:	d00f      	beq.n	801fbba <rmw_wait+0x29a>
 801fb9a:	f8d8 3000 	ldr.w	r3, [r8]
 801fb9e:	b193      	cbz	r3, 801fbc6 <rmw_wait+0x2a6>
 801fba0:	464f      	mov	r7, r9
 801fba2:	e772      	b.n	801fa8a <rmw_wait+0x16a>
 801fba4:	f1b8 0f00 	cmp.w	r8, #0
 801fba8:	d007      	beq.n	801fbba <rmw_wait+0x29a>
 801fbaa:	f8d8 3000 	ldr.w	r3, [r8]
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	f47f af6b 	bne.w	801fa8a <rmw_wait+0x16a>
 801fbb4:	b155      	cbz	r5, 801fbcc <rmw_wait+0x2ac>
 801fbb6:	461f      	mov	r7, r3
 801fbb8:	e777      	b.n	801faaa <rmw_wait+0x18a>
 801fbba:	2d00      	cmp	r5, #0
 801fbbc:	d0c6      	beq.n	801fb4c <rmw_wait+0x22c>
 801fbbe:	682b      	ldr	r3, [r5, #0]
 801fbc0:	b143      	cbz	r3, 801fbd4 <rmw_wait+0x2b4>
 801fbc2:	4647      	mov	r7, r8
 801fbc4:	e773      	b.n	801faae <rmw_wait+0x18e>
 801fbc6:	b10d      	cbz	r5, 801fbcc <rmw_wait+0x2ac>
 801fbc8:	464f      	mov	r7, r9
 801fbca:	e76e      	b.n	801faaa <rmw_wait+0x18a>
 801fbcc:	462f      	mov	r7, r5
 801fbce:	2e00      	cmp	r6, #0
 801fbd0:	d1a2      	bne.n	801fb18 <rmw_wait+0x1f8>
 801fbd2:	e7c0      	b.n	801fb56 <rmw_wait+0x236>
 801fbd4:	4647      	mov	r7, r8
 801fbd6:	2e00      	cmp	r6, #0
 801fbd8:	d19e      	bne.n	801fb18 <rmw_wait+0x1f8>
 801fbda:	e7bc      	b.n	801fb56 <rmw_wait+0x236>
 801fbdc:	08023570 	.word	0x08023570
 801fbe0:	2406938c 	.word	0x2406938c
 801fbe4:	000f4240 	.word	0x000f4240

0801fbe8 <rmw_create_wait_set>:
 801fbe8:	b508      	push	{r3, lr}
 801fbea:	4803      	ldr	r0, [pc, #12]	@ (801fbf8 <rmw_create_wait_set+0x10>)
 801fbec:	f7fe fde6 	bl	801e7bc <get_memory>
 801fbf0:	b108      	cbz	r0, 801fbf6 <rmw_create_wait_set+0xe>
 801fbf2:	6880      	ldr	r0, [r0, #8]
 801fbf4:	3010      	adds	r0, #16
 801fbf6:	bd08      	pop	{r3, pc}
 801fbf8:	240693cc 	.word	0x240693cc

0801fbfc <rmw_destroy_wait_set>:
 801fbfc:	b508      	push	{r3, lr}
 801fbfe:	4b08      	ldr	r3, [pc, #32]	@ (801fc20 <rmw_destroy_wait_set+0x24>)
 801fc00:	6819      	ldr	r1, [r3, #0]
 801fc02:	b911      	cbnz	r1, 801fc0a <rmw_destroy_wait_set+0xe>
 801fc04:	e00a      	b.n	801fc1c <rmw_destroy_wait_set+0x20>
 801fc06:	6849      	ldr	r1, [r1, #4]
 801fc08:	b141      	cbz	r1, 801fc1c <rmw_destroy_wait_set+0x20>
 801fc0a:	688b      	ldr	r3, [r1, #8]
 801fc0c:	3310      	adds	r3, #16
 801fc0e:	4298      	cmp	r0, r3
 801fc10:	d1f9      	bne.n	801fc06 <rmw_destroy_wait_set+0xa>
 801fc12:	4803      	ldr	r0, [pc, #12]	@ (801fc20 <rmw_destroy_wait_set+0x24>)
 801fc14:	f7fe fde2 	bl	801e7dc <put_memory>
 801fc18:	2000      	movs	r0, #0
 801fc1a:	bd08      	pop	{r3, pc}
 801fc1c:	2001      	movs	r0, #1
 801fc1e:	bd08      	pop	{r3, pc}
 801fc20:	240693cc 	.word	0x240693cc

0801fc24 <rosgraph_msgs__msg__Clock__init>:
 801fc24:	b538      	push	{r3, r4, r5, lr}
 801fc26:	4604      	mov	r4, r0
 801fc28:	b128      	cbz	r0, 801fc36 <rosgraph_msgs__msg__Clock__init+0x12>
 801fc2a:	f7f7 f91d 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 801fc2e:	4605      	mov	r5, r0
 801fc30:	b120      	cbz	r0, 801fc3c <rosgraph_msgs__msg__Clock__init+0x18>
 801fc32:	4628      	mov	r0, r5
 801fc34:	bd38      	pop	{r3, r4, r5, pc}
 801fc36:	4605      	mov	r5, r0
 801fc38:	4628      	mov	r0, r5
 801fc3a:	bd38      	pop	{r3, r4, r5, pc}
 801fc3c:	4620      	mov	r0, r4
 801fc3e:	f7f7 f917 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 801fc42:	4628      	mov	r0, r5
 801fc44:	bd38      	pop	{r3, r4, r5, pc}
 801fc46:	bf00      	nop

0801fc48 <rosgraph_msgs__msg__Clock__fini>:
 801fc48:	b108      	cbz	r0, 801fc4e <rosgraph_msgs__msg__Clock__fini+0x6>
 801fc4a:	f7f7 b911 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 801fc4e:	4770      	bx	lr

0801fc50 <std_msgs__msg__Header__init>:
 801fc50:	b570      	push	{r4, r5, r6, lr}
 801fc52:	4605      	mov	r5, r0
 801fc54:	b1a8      	cbz	r0, 801fc82 <std_msgs__msg__Header__init+0x32>
 801fc56:	f7f7 f907 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 801fc5a:	4604      	mov	r4, r0
 801fc5c:	b140      	cbz	r0, 801fc70 <std_msgs__msg__Header__init+0x20>
 801fc5e:	f105 0608 	add.w	r6, r5, #8
 801fc62:	4630      	mov	r0, r6
 801fc64:	f001 fe86 	bl	8021974 <rosidl_runtime_c__String__init>
 801fc68:	4604      	mov	r4, r0
 801fc6a:	b168      	cbz	r0, 801fc88 <std_msgs__msg__Header__init+0x38>
 801fc6c:	4620      	mov	r0, r4
 801fc6e:	bd70      	pop	{r4, r5, r6, pc}
 801fc70:	4628      	mov	r0, r5
 801fc72:	f7f7 f8fd 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 801fc76:	f105 0008 	add.w	r0, r5, #8
 801fc7a:	f001 fe91 	bl	80219a0 <rosidl_runtime_c__String__fini>
 801fc7e:	4620      	mov	r0, r4
 801fc80:	bd70      	pop	{r4, r5, r6, pc}
 801fc82:	4604      	mov	r4, r0
 801fc84:	4620      	mov	r0, r4
 801fc86:	bd70      	pop	{r4, r5, r6, pc}
 801fc88:	4628      	mov	r0, r5
 801fc8a:	f7f7 f8f1 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 801fc8e:	4630      	mov	r0, r6
 801fc90:	f001 fe86 	bl	80219a0 <rosidl_runtime_c__String__fini>
 801fc94:	e7ea      	b.n	801fc6c <std_msgs__msg__Header__init+0x1c>
 801fc96:	bf00      	nop

0801fc98 <std_msgs__msg__Header__fini>:
 801fc98:	b148      	cbz	r0, 801fcae <std_msgs__msg__Header__fini+0x16>
 801fc9a:	b510      	push	{r4, lr}
 801fc9c:	4604      	mov	r4, r0
 801fc9e:	f7f7 f8e7 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 801fca2:	f104 0008 	add.w	r0, r4, #8
 801fca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcaa:	f001 be79 	b.w	80219a0 <rosidl_runtime_c__String__fini>
 801fcae:	4770      	bx	lr

0801fcb0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801fcb0:	b570      	push	{r4, r5, r6, lr}
 801fcb2:	4605      	mov	r5, r0
 801fcb4:	b1a8      	cbz	r0, 801fce2 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 801fcb6:	f7ff ffcb 	bl	801fc50 <std_msgs__msg__Header__init>
 801fcba:	4604      	mov	r4, r0
 801fcbc:	b140      	cbz	r0, 801fcd0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801fcbe:	f105 0618 	add.w	r6, r5, #24
 801fcc2:	4630      	mov	r0, r6
 801fcc4:	f001 feb4 	bl	8021a30 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 801fcc8:	4604      	mov	r4, r0
 801fcca:	b168      	cbz	r0, 801fce8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 801fccc:	4620      	mov	r0, r4
 801fcce:	bd70      	pop	{r4, r5, r6, pc}
 801fcd0:	4628      	mov	r0, r5
 801fcd2:	f7ff ffe1 	bl	801fc98 <std_msgs__msg__Header__fini>
 801fcd6:	f105 0018 	add.w	r0, r5, #24
 801fcda:	f001 fead 	bl	8021a38 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fcde:	4620      	mov	r0, r4
 801fce0:	bd70      	pop	{r4, r5, r6, pc}
 801fce2:	4604      	mov	r4, r0
 801fce4:	4620      	mov	r0, r4
 801fce6:	bd70      	pop	{r4, r5, r6, pc}
 801fce8:	4628      	mov	r0, r5
 801fcea:	f7ff ffd5 	bl	801fc98 <std_msgs__msg__Header__fini>
 801fcee:	4630      	mov	r0, r6
 801fcf0:	f001 fea2 	bl	8021a38 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fcf4:	e7ea      	b.n	801fccc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 801fcf6:	bf00      	nop

0801fcf8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 801fcf8:	b148      	cbz	r0, 801fd0e <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 801fcfa:	b510      	push	{r4, lr}
 801fcfc:	4604      	mov	r4, r0
 801fcfe:	f7ff ffcb 	bl	801fc98 <std_msgs__msg__Header__fini>
 801fd02:	f104 0018 	add.w	r0, r4, #24
 801fd06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd0a:	f001 be95 	b.w	8021a38 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fd0e:	4770      	bx	lr

0801fd10 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801fd10:	b570      	push	{r4, r5, r6, lr}
 801fd12:	4605      	mov	r5, r0
 801fd14:	b1a8      	cbz	r0, 801fd42 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 801fd16:	f7ff ff9b 	bl	801fc50 <std_msgs__msg__Header__init>
 801fd1a:	4604      	mov	r4, r0
 801fd1c:	b140      	cbz	r0, 801fd30 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801fd1e:	f105 0618 	add.w	r6, r5, #24
 801fd22:	4630      	mov	r0, r6
 801fd24:	f001 fe8a 	bl	8021a3c <tier4_vehicle_msgs__msg__ActuationStatus__init>
 801fd28:	4604      	mov	r4, r0
 801fd2a:	b168      	cbz	r0, 801fd48 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 801fd2c:	4620      	mov	r0, r4
 801fd2e:	bd70      	pop	{r4, r5, r6, pc}
 801fd30:	4628      	mov	r0, r5
 801fd32:	f7ff ffb1 	bl	801fc98 <std_msgs__msg__Header__fini>
 801fd36:	f105 0018 	add.w	r0, r5, #24
 801fd3a:	f001 fe83 	bl	8021a44 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fd3e:	4620      	mov	r0, r4
 801fd40:	bd70      	pop	{r4, r5, r6, pc}
 801fd42:	4604      	mov	r4, r0
 801fd44:	4620      	mov	r0, r4
 801fd46:	bd70      	pop	{r4, r5, r6, pc}
 801fd48:	4628      	mov	r0, r5
 801fd4a:	f7ff ffa5 	bl	801fc98 <std_msgs__msg__Header__fini>
 801fd4e:	4630      	mov	r0, r6
 801fd50:	f001 fe78 	bl	8021a44 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fd54:	e7ea      	b.n	801fd2c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 801fd56:	bf00      	nop

0801fd58 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 801fd58:	b148      	cbz	r0, 801fd6e <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801fd5a:	b510      	push	{r4, lr}
 801fd5c:	4604      	mov	r4, r0
 801fd5e:	f7ff ff9b 	bl	801fc98 <std_msgs__msg__Header__fini>
 801fd62:	f104 0018 	add.w	r0, r4, #24
 801fd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd6a:	f001 be6b 	b.w	8021a44 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fd6e:	4770      	bx	lr

0801fd70 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801fd70:	b538      	push	{r3, r4, r5, lr}
 801fd72:	4604      	mov	r4, r0
 801fd74:	b128      	cbz	r0, 801fd82 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 801fd76:	f7f7 f877 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 801fd7a:	4605      	mov	r5, r0
 801fd7c:	b120      	cbz	r0, 801fd88 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801fd7e:	4628      	mov	r0, r5
 801fd80:	bd38      	pop	{r3, r4, r5, pc}
 801fd82:	4605      	mov	r5, r0
 801fd84:	4628      	mov	r0, r5
 801fd86:	bd38      	pop	{r3, r4, r5, pc}
 801fd88:	4620      	mov	r0, r4
 801fd8a:	f7f7 f871 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 801fd8e:	4628      	mov	r0, r5
 801fd90:	bd38      	pop	{r3, r4, r5, pc}
 801fd92:	bf00      	nop

0801fd94 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 801fd94:	b108      	cbz	r0, 801fd9a <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 801fd96:	f7f7 b86b 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 801fd9a:	4770      	bx	lr

0801fd9c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801fd9c:	b538      	push	{r3, r4, r5, lr}
 801fd9e:	4604      	mov	r4, r0
 801fda0:	b128      	cbz	r0, 801fdae <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801fda2:	f7f7 f861 	bl	8016e68 <builtin_interfaces__msg__Time__init>
 801fda6:	4605      	mov	r5, r0
 801fda8:	b120      	cbz	r0, 801fdb4 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801fdaa:	4628      	mov	r0, r5
 801fdac:	bd38      	pop	{r3, r4, r5, pc}
 801fdae:	4605      	mov	r5, r0
 801fdb0:	4628      	mov	r0, r5
 801fdb2:	bd38      	pop	{r3, r4, r5, pc}
 801fdb4:	4620      	mov	r0, r4
 801fdb6:	f7f7 f85b 	bl	8016e70 <builtin_interfaces__msg__Time__fini>
 801fdba:	4628      	mov	r0, r5
 801fdbc:	bd38      	pop	{r3, r4, r5, pc}
 801fdbe:	bf00      	nop

0801fdc0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801fdc0:	b108      	cbz	r0, 801fdc6 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801fdc2:	f7f7 b855 	b.w	8016e70 <builtin_interfaces__msg__Time__fini>
 801fdc6:	4770      	bx	lr

0801fdc8 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 801fdc8:	f001 be32 	b.w	8021a30 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801fdcc <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801fdcc:	f001 be34 	b.w	8021a38 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801fdd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fdd0:	4b04      	ldr	r3, [pc, #16]	@ (801fde4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fdd2:	681a      	ldr	r2, [r3, #0]
 801fdd4:	b10a      	cbz	r2, 801fdda <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 801fdd6:	4803      	ldr	r0, [pc, #12]	@ (801fde4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fdd8:	4770      	bx	lr
 801fdda:	4a03      	ldr	r2, [pc, #12]	@ (801fde8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801fddc:	4801      	ldr	r0, [pc, #4]	@ (801fde4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fdde:	6812      	ldr	r2, [r2, #0]
 801fde0:	601a      	str	r2, [r3, #0]
 801fde2:	4770      	bx	lr
 801fde4:	240012fc 	.word	0x240012fc
 801fde8:	24000e98 	.word	0x24000e98

0801fdec <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801fdec:	f001 be26 	b.w	8021a3c <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801fdf0 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801fdf0:	f001 be28 	b.w	8021a44 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

0801fdf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801fdf4:	4b04      	ldr	r3, [pc, #16]	@ (801fe08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fdf6:	681a      	ldr	r2, [r3, #0]
 801fdf8:	b10a      	cbz	r2, 801fdfe <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801fdfa:	4803      	ldr	r0, [pc, #12]	@ (801fe08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fdfc:	4770      	bx	lr
 801fdfe:	4a03      	ldr	r2, [pc, #12]	@ (801fe0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801fe00:	4801      	ldr	r0, [pc, #4]	@ (801fe08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fe02:	6812      	ldr	r2, [r2, #0]
 801fe04:	601a      	str	r2, [r3, #0]
 801fe06:	4770      	bx	lr
 801fe08:	240013bc 	.word	0x240013bc
 801fe0c:	24000e98 	.word	0x24000e98

0801fe10 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fe10:	b1b8      	cbz	r0, 801fe42 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801fe12:	b538      	push	{r3, r4, r5, lr}
 801fe14:	460d      	mov	r5, r1
 801fe16:	2108      	movs	r1, #8
 801fe18:	4628      	mov	r0, r5
 801fe1a:	f7f4 fa17 	bl	801424c <ucdr_alignment>
 801fe1e:	f105 0308 	add.w	r3, r5, #8
 801fe22:	2108      	movs	r1, #8
 801fe24:	f1c5 0508 	rsb	r5, r5, #8
 801fe28:	181c      	adds	r4, r3, r0
 801fe2a:	4620      	mov	r0, r4
 801fe2c:	f7f4 fa0e 	bl	801424c <ucdr_alignment>
 801fe30:	2108      	movs	r1, #8
 801fe32:	4408      	add	r0, r1
 801fe34:	4404      	add	r4, r0
 801fe36:	4620      	mov	r0, r4
 801fe38:	f7f4 fa08 	bl	801424c <ucdr_alignment>
 801fe3c:	4428      	add	r0, r5
 801fe3e:	4420      	add	r0, r4
 801fe40:	bd38      	pop	{r3, r4, r5, pc}
 801fe42:	4770      	bx	lr

0801fe44 <_ActuationCommand__cdr_deserialize>:
 801fe44:	b538      	push	{r3, r4, r5, lr}
 801fe46:	460c      	mov	r4, r1
 801fe48:	b171      	cbz	r1, 801fe68 <_ActuationCommand__cdr_deserialize+0x24>
 801fe4a:	4605      	mov	r5, r0
 801fe4c:	f7f4 f8e0 	bl	8014010 <ucdr_deserialize_double>
 801fe50:	f104 0108 	add.w	r1, r4, #8
 801fe54:	4628      	mov	r0, r5
 801fe56:	f7f4 f8db 	bl	8014010 <ucdr_deserialize_double>
 801fe5a:	f104 0110 	add.w	r1, r4, #16
 801fe5e:	4628      	mov	r0, r5
 801fe60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe64:	f7f4 b8d4 	b.w	8014010 <ucdr_deserialize_double>
 801fe68:	4608      	mov	r0, r1
 801fe6a:	bd38      	pop	{r3, r4, r5, pc}

0801fe6c <_ActuationCommand__cdr_serialize>:
 801fe6c:	b198      	cbz	r0, 801fe96 <_ActuationCommand__cdr_serialize+0x2a>
 801fe6e:	b538      	push	{r3, r4, r5, lr}
 801fe70:	460d      	mov	r5, r1
 801fe72:	4604      	mov	r4, r0
 801fe74:	ed90 0b00 	vldr	d0, [r0]
 801fe78:	4608      	mov	r0, r1
 801fe7a:	f7f3 fff9 	bl	8013e70 <ucdr_serialize_double>
 801fe7e:	4628      	mov	r0, r5
 801fe80:	ed94 0b02 	vldr	d0, [r4, #8]
 801fe84:	f7f3 fff4 	bl	8013e70 <ucdr_serialize_double>
 801fe88:	4628      	mov	r0, r5
 801fe8a:	ed94 0b04 	vldr	d0, [r4, #16]
 801fe8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe92:	f7f3 bfed 	b.w	8013e70 <ucdr_serialize_double>
 801fe96:	4770      	bx	lr

0801fe98 <_ActuationCommand__get_serialized_size>:
 801fe98:	b190      	cbz	r0, 801fec0 <_ActuationCommand__get_serialized_size+0x28>
 801fe9a:	2108      	movs	r1, #8
 801fe9c:	2000      	movs	r0, #0
 801fe9e:	b510      	push	{r4, lr}
 801fea0:	f7f4 f9d4 	bl	801424c <ucdr_alignment>
 801fea4:	2108      	movs	r1, #8
 801fea6:	1844      	adds	r4, r0, r1
 801fea8:	4620      	mov	r0, r4
 801feaa:	f7f4 f9cf 	bl	801424c <ucdr_alignment>
 801feae:	2108      	movs	r1, #8
 801feb0:	4408      	add	r0, r1
 801feb2:	4404      	add	r4, r0
 801feb4:	4620      	mov	r0, r4
 801feb6:	f7f4 f9c9 	bl	801424c <ucdr_alignment>
 801feba:	3008      	adds	r0, #8
 801febc:	4420      	add	r0, r4
 801febe:	bd10      	pop	{r4, pc}
 801fec0:	4770      	bx	lr
 801fec2:	bf00      	nop

0801fec4 <_ActuationCommand__max_serialized_size>:
 801fec4:	b538      	push	{r3, r4, r5, lr}
 801fec6:	2108      	movs	r1, #8
 801fec8:	2000      	movs	r0, #0
 801feca:	f7f4 f9bf 	bl	801424c <ucdr_alignment>
 801fece:	2108      	movs	r1, #8
 801fed0:	1845      	adds	r5, r0, r1
 801fed2:	4628      	mov	r0, r5
 801fed4:	f7f4 f9ba 	bl	801424c <ucdr_alignment>
 801fed8:	2108      	movs	r1, #8
 801feda:	1844      	adds	r4, r0, r1
 801fedc:	442c      	add	r4, r5
 801fede:	4620      	mov	r0, r4
 801fee0:	f7f4 f9b4 	bl	801424c <ucdr_alignment>
 801fee4:	3008      	adds	r0, #8
 801fee6:	4420      	add	r0, r4
 801fee8:	bd38      	pop	{r3, r4, r5, pc}
 801feea:	bf00      	nop

0801feec <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801feec:	b570      	push	{r4, r5, r6, lr}
 801feee:	460c      	mov	r4, r1
 801fef0:	2301      	movs	r3, #1
 801fef2:	2108      	movs	r1, #8
 801fef4:	f104 0508 	add.w	r5, r4, #8
 801fef8:	7003      	strb	r3, [r0, #0]
 801fefa:	4620      	mov	r0, r4
 801fefc:	f1c4 0408 	rsb	r4, r4, #8
 801ff00:	f7f4 f9a4 	bl	801424c <ucdr_alignment>
 801ff04:	1946      	adds	r6, r0, r5
 801ff06:	2108      	movs	r1, #8
 801ff08:	4630      	mov	r0, r6
 801ff0a:	f7f4 f99f 	bl	801424c <ucdr_alignment>
 801ff0e:	2108      	movs	r1, #8
 801ff10:	1845      	adds	r5, r0, r1
 801ff12:	4435      	add	r5, r6
 801ff14:	4628      	mov	r0, r5
 801ff16:	f7f4 f999 	bl	801424c <ucdr_alignment>
 801ff1a:	4420      	add	r0, r4
 801ff1c:	4428      	add	r0, r5
 801ff1e:	bd70      	pop	{r4, r5, r6, pc}

0801ff20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801ff20:	4800      	ldr	r0, [pc, #0]	@ (801ff24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801ff22:	4770      	bx	lr
 801ff24:	240013c8 	.word	0x240013c8

0801ff28 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801ff28:	b1b8      	cbz	r0, 801ff5a <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 801ff2a:	b538      	push	{r3, r4, r5, lr}
 801ff2c:	460d      	mov	r5, r1
 801ff2e:	2108      	movs	r1, #8
 801ff30:	4628      	mov	r0, r5
 801ff32:	f7f4 f98b 	bl	801424c <ucdr_alignment>
 801ff36:	f105 0308 	add.w	r3, r5, #8
 801ff3a:	2108      	movs	r1, #8
 801ff3c:	f1c5 0508 	rsb	r5, r5, #8
 801ff40:	181c      	adds	r4, r3, r0
 801ff42:	4620      	mov	r0, r4
 801ff44:	f7f4 f982 	bl	801424c <ucdr_alignment>
 801ff48:	2108      	movs	r1, #8
 801ff4a:	4408      	add	r0, r1
 801ff4c:	4404      	add	r4, r0
 801ff4e:	4620      	mov	r0, r4
 801ff50:	f7f4 f97c 	bl	801424c <ucdr_alignment>
 801ff54:	4428      	add	r0, r5
 801ff56:	4420      	add	r0, r4
 801ff58:	bd38      	pop	{r3, r4, r5, pc}
 801ff5a:	4770      	bx	lr

0801ff5c <_ActuationStatus__cdr_deserialize>:
 801ff5c:	b538      	push	{r3, r4, r5, lr}
 801ff5e:	460c      	mov	r4, r1
 801ff60:	b171      	cbz	r1, 801ff80 <_ActuationStatus__cdr_deserialize+0x24>
 801ff62:	4605      	mov	r5, r0
 801ff64:	f7f4 f854 	bl	8014010 <ucdr_deserialize_double>
 801ff68:	f104 0108 	add.w	r1, r4, #8
 801ff6c:	4628      	mov	r0, r5
 801ff6e:	f7f4 f84f 	bl	8014010 <ucdr_deserialize_double>
 801ff72:	f104 0110 	add.w	r1, r4, #16
 801ff76:	4628      	mov	r0, r5
 801ff78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ff7c:	f7f4 b848 	b.w	8014010 <ucdr_deserialize_double>
 801ff80:	4608      	mov	r0, r1
 801ff82:	bd38      	pop	{r3, r4, r5, pc}

0801ff84 <_ActuationStatus__cdr_serialize>:
 801ff84:	b198      	cbz	r0, 801ffae <_ActuationStatus__cdr_serialize+0x2a>
 801ff86:	b538      	push	{r3, r4, r5, lr}
 801ff88:	460d      	mov	r5, r1
 801ff8a:	4604      	mov	r4, r0
 801ff8c:	ed90 0b00 	vldr	d0, [r0]
 801ff90:	4608      	mov	r0, r1
 801ff92:	f7f3 ff6d 	bl	8013e70 <ucdr_serialize_double>
 801ff96:	4628      	mov	r0, r5
 801ff98:	ed94 0b02 	vldr	d0, [r4, #8]
 801ff9c:	f7f3 ff68 	bl	8013e70 <ucdr_serialize_double>
 801ffa0:	4628      	mov	r0, r5
 801ffa2:	ed94 0b04 	vldr	d0, [r4, #16]
 801ffa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ffaa:	f7f3 bf61 	b.w	8013e70 <ucdr_serialize_double>
 801ffae:	4770      	bx	lr

0801ffb0 <_ActuationStatus__get_serialized_size>:
 801ffb0:	b190      	cbz	r0, 801ffd8 <_ActuationStatus__get_serialized_size+0x28>
 801ffb2:	2108      	movs	r1, #8
 801ffb4:	2000      	movs	r0, #0
 801ffb6:	b510      	push	{r4, lr}
 801ffb8:	f7f4 f948 	bl	801424c <ucdr_alignment>
 801ffbc:	2108      	movs	r1, #8
 801ffbe:	1844      	adds	r4, r0, r1
 801ffc0:	4620      	mov	r0, r4
 801ffc2:	f7f4 f943 	bl	801424c <ucdr_alignment>
 801ffc6:	2108      	movs	r1, #8
 801ffc8:	4408      	add	r0, r1
 801ffca:	4404      	add	r4, r0
 801ffcc:	4620      	mov	r0, r4
 801ffce:	f7f4 f93d 	bl	801424c <ucdr_alignment>
 801ffd2:	3008      	adds	r0, #8
 801ffd4:	4420      	add	r0, r4
 801ffd6:	bd10      	pop	{r4, pc}
 801ffd8:	4770      	bx	lr
 801ffda:	bf00      	nop

0801ffdc <_ActuationStatus__max_serialized_size>:
 801ffdc:	b538      	push	{r3, r4, r5, lr}
 801ffde:	2108      	movs	r1, #8
 801ffe0:	2000      	movs	r0, #0
 801ffe2:	f7f4 f933 	bl	801424c <ucdr_alignment>
 801ffe6:	2108      	movs	r1, #8
 801ffe8:	1845      	adds	r5, r0, r1
 801ffea:	4628      	mov	r0, r5
 801ffec:	f7f4 f92e 	bl	801424c <ucdr_alignment>
 801fff0:	2108      	movs	r1, #8
 801fff2:	1844      	adds	r4, r0, r1
 801fff4:	442c      	add	r4, r5
 801fff6:	4620      	mov	r0, r4
 801fff8:	f7f4 f928 	bl	801424c <ucdr_alignment>
 801fffc:	3008      	adds	r0, #8
 801fffe:	4420      	add	r0, r4
 8020000:	bd38      	pop	{r3, r4, r5, pc}
 8020002:	bf00      	nop

08020004 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8020004:	b570      	push	{r4, r5, r6, lr}
 8020006:	460c      	mov	r4, r1
 8020008:	2301      	movs	r3, #1
 802000a:	2108      	movs	r1, #8
 802000c:	f104 0508 	add.w	r5, r4, #8
 8020010:	7003      	strb	r3, [r0, #0]
 8020012:	4620      	mov	r0, r4
 8020014:	f1c4 0408 	rsb	r4, r4, #8
 8020018:	f7f4 f918 	bl	801424c <ucdr_alignment>
 802001c:	1946      	adds	r6, r0, r5
 802001e:	2108      	movs	r1, #8
 8020020:	4630      	mov	r0, r6
 8020022:	f7f4 f913 	bl	801424c <ucdr_alignment>
 8020026:	2108      	movs	r1, #8
 8020028:	1845      	adds	r5, r0, r1
 802002a:	4435      	add	r5, r6
 802002c:	4628      	mov	r0, r5
 802002e:	f7f4 f90d 	bl	801424c <ucdr_alignment>
 8020032:	4420      	add	r0, r4
 8020034:	4428      	add	r0, r5
 8020036:	bd70      	pop	{r4, r5, r6, pc}

08020038 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8020038:	4800      	ldr	r0, [pc, #0]	@ (802003c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 802003a:	4770      	bx	lr
 802003c:	240013f0 	.word	0x240013f0

08020040 <ucdr_serialize_endian_array_char>:
 8020040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020044:	4619      	mov	r1, r3
 8020046:	461f      	mov	r7, r3
 8020048:	4605      	mov	r5, r0
 802004a:	4690      	mov	r8, r2
 802004c:	f7f4 f8a6 	bl	801419c <ucdr_check_buffer_available_for>
 8020050:	b9e0      	cbnz	r0, 802008c <ucdr_serialize_endian_array_char+0x4c>
 8020052:	463e      	mov	r6, r7
 8020054:	e00b      	b.n	802006e <ucdr_serialize_endian_array_char+0x2e>
 8020056:	4441      	add	r1, r8
 8020058:	68a8      	ldr	r0, [r5, #8]
 802005a:	4622      	mov	r2, r4
 802005c:	1b36      	subs	r6, r6, r4
 802005e:	f002 faea 	bl	8022636 <memcpy>
 8020062:	68ab      	ldr	r3, [r5, #8]
 8020064:	6928      	ldr	r0, [r5, #16]
 8020066:	4423      	add	r3, r4
 8020068:	4420      	add	r0, r4
 802006a:	60ab      	str	r3, [r5, #8]
 802006c:	6128      	str	r0, [r5, #16]
 802006e:	4631      	mov	r1, r6
 8020070:	2201      	movs	r2, #1
 8020072:	4628      	mov	r0, r5
 8020074:	f7f4 f91c 	bl	80142b0 <ucdr_check_final_buffer_behavior_array>
 8020078:	1bb9      	subs	r1, r7, r6
 802007a:	4604      	mov	r4, r0
 802007c:	2800      	cmp	r0, #0
 802007e:	d1ea      	bne.n	8020056 <ucdr_serialize_endian_array_char+0x16>
 8020080:	2301      	movs	r3, #1
 8020082:	7da8      	ldrb	r0, [r5, #22]
 8020084:	756b      	strb	r3, [r5, #21]
 8020086:	4058      	eors	r0, r3
 8020088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802008c:	463a      	mov	r2, r7
 802008e:	4641      	mov	r1, r8
 8020090:	68a8      	ldr	r0, [r5, #8]
 8020092:	f002 fad0 	bl	8022636 <memcpy>
 8020096:	68aa      	ldr	r2, [r5, #8]
 8020098:	692b      	ldr	r3, [r5, #16]
 802009a:	443a      	add	r2, r7
 802009c:	443b      	add	r3, r7
 802009e:	60aa      	str	r2, [r5, #8]
 80200a0:	612b      	str	r3, [r5, #16]
 80200a2:	e7ed      	b.n	8020080 <ucdr_serialize_endian_array_char+0x40>

080200a4 <ucdr_deserialize_endian_array_char>:
 80200a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200a8:	4619      	mov	r1, r3
 80200aa:	461f      	mov	r7, r3
 80200ac:	4605      	mov	r5, r0
 80200ae:	4690      	mov	r8, r2
 80200b0:	f7f4 f874 	bl	801419c <ucdr_check_buffer_available_for>
 80200b4:	b9e8      	cbnz	r0, 80200f2 <ucdr_deserialize_endian_array_char+0x4e>
 80200b6:	463e      	mov	r6, r7
 80200b8:	e00c      	b.n	80200d4 <ucdr_deserialize_endian_array_char+0x30>
 80200ba:	eb08 0003 	add.w	r0, r8, r3
 80200be:	68a9      	ldr	r1, [r5, #8]
 80200c0:	4622      	mov	r2, r4
 80200c2:	1b36      	subs	r6, r6, r4
 80200c4:	f002 fab7 	bl	8022636 <memcpy>
 80200c8:	68ab      	ldr	r3, [r5, #8]
 80200ca:	6928      	ldr	r0, [r5, #16]
 80200cc:	4423      	add	r3, r4
 80200ce:	4420      	add	r0, r4
 80200d0:	60ab      	str	r3, [r5, #8]
 80200d2:	6128      	str	r0, [r5, #16]
 80200d4:	4631      	mov	r1, r6
 80200d6:	2201      	movs	r2, #1
 80200d8:	4628      	mov	r0, r5
 80200da:	f7f4 f8e9 	bl	80142b0 <ucdr_check_final_buffer_behavior_array>
 80200de:	1bbb      	subs	r3, r7, r6
 80200e0:	4604      	mov	r4, r0
 80200e2:	2800      	cmp	r0, #0
 80200e4:	d1e9      	bne.n	80200ba <ucdr_deserialize_endian_array_char+0x16>
 80200e6:	2301      	movs	r3, #1
 80200e8:	7da8      	ldrb	r0, [r5, #22]
 80200ea:	756b      	strb	r3, [r5, #21]
 80200ec:	4058      	eors	r0, r3
 80200ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200f2:	463a      	mov	r2, r7
 80200f4:	68a9      	ldr	r1, [r5, #8]
 80200f6:	4640      	mov	r0, r8
 80200f8:	f002 fa9d 	bl	8022636 <memcpy>
 80200fc:	68aa      	ldr	r2, [r5, #8]
 80200fe:	692b      	ldr	r3, [r5, #16]
 8020100:	443a      	add	r2, r7
 8020102:	443b      	add	r3, r7
 8020104:	60aa      	str	r2, [r5, #8]
 8020106:	612b      	str	r3, [r5, #16]
 8020108:	e7ed      	b.n	80200e6 <ucdr_deserialize_endian_array_char+0x42>
 802010a:	bf00      	nop

0802010c <ucdr_serialize_array_uint8_t>:
 802010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020110:	4688      	mov	r8, r1
 8020112:	4611      	mov	r1, r2
 8020114:	4617      	mov	r7, r2
 8020116:	4605      	mov	r5, r0
 8020118:	f7f4 f840 	bl	801419c <ucdr_check_buffer_available_for>
 802011c:	b9e0      	cbnz	r0, 8020158 <ucdr_serialize_array_uint8_t+0x4c>
 802011e:	463e      	mov	r6, r7
 8020120:	e00b      	b.n	802013a <ucdr_serialize_array_uint8_t+0x2e>
 8020122:	4441      	add	r1, r8
 8020124:	68a8      	ldr	r0, [r5, #8]
 8020126:	4622      	mov	r2, r4
 8020128:	1b36      	subs	r6, r6, r4
 802012a:	f002 fa84 	bl	8022636 <memcpy>
 802012e:	68ab      	ldr	r3, [r5, #8]
 8020130:	6928      	ldr	r0, [r5, #16]
 8020132:	4423      	add	r3, r4
 8020134:	4420      	add	r0, r4
 8020136:	60ab      	str	r3, [r5, #8]
 8020138:	6128      	str	r0, [r5, #16]
 802013a:	4631      	mov	r1, r6
 802013c:	2201      	movs	r2, #1
 802013e:	4628      	mov	r0, r5
 8020140:	f7f4 f8b6 	bl	80142b0 <ucdr_check_final_buffer_behavior_array>
 8020144:	1bb9      	subs	r1, r7, r6
 8020146:	4604      	mov	r4, r0
 8020148:	2800      	cmp	r0, #0
 802014a:	d1ea      	bne.n	8020122 <ucdr_serialize_array_uint8_t+0x16>
 802014c:	2301      	movs	r3, #1
 802014e:	7da8      	ldrb	r0, [r5, #22]
 8020150:	756b      	strb	r3, [r5, #21]
 8020152:	4058      	eors	r0, r3
 8020154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020158:	463a      	mov	r2, r7
 802015a:	4641      	mov	r1, r8
 802015c:	68a8      	ldr	r0, [r5, #8]
 802015e:	f002 fa6a 	bl	8022636 <memcpy>
 8020162:	68aa      	ldr	r2, [r5, #8]
 8020164:	692b      	ldr	r3, [r5, #16]
 8020166:	443a      	add	r2, r7
 8020168:	443b      	add	r3, r7
 802016a:	60aa      	str	r2, [r5, #8]
 802016c:	612b      	str	r3, [r5, #16]
 802016e:	e7ed      	b.n	802014c <ucdr_serialize_array_uint8_t+0x40>

08020170 <ucdr_serialize_endian_array_uint8_t>:
 8020170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020174:	4619      	mov	r1, r3
 8020176:	461f      	mov	r7, r3
 8020178:	4605      	mov	r5, r0
 802017a:	4690      	mov	r8, r2
 802017c:	f7f4 f80e 	bl	801419c <ucdr_check_buffer_available_for>
 8020180:	b9e0      	cbnz	r0, 80201bc <ucdr_serialize_endian_array_uint8_t+0x4c>
 8020182:	463e      	mov	r6, r7
 8020184:	e00b      	b.n	802019e <ucdr_serialize_endian_array_uint8_t+0x2e>
 8020186:	4441      	add	r1, r8
 8020188:	68a8      	ldr	r0, [r5, #8]
 802018a:	4622      	mov	r2, r4
 802018c:	1b36      	subs	r6, r6, r4
 802018e:	f002 fa52 	bl	8022636 <memcpy>
 8020192:	68ab      	ldr	r3, [r5, #8]
 8020194:	6928      	ldr	r0, [r5, #16]
 8020196:	4423      	add	r3, r4
 8020198:	4420      	add	r0, r4
 802019a:	60ab      	str	r3, [r5, #8]
 802019c:	6128      	str	r0, [r5, #16]
 802019e:	4631      	mov	r1, r6
 80201a0:	2201      	movs	r2, #1
 80201a2:	4628      	mov	r0, r5
 80201a4:	f7f4 f884 	bl	80142b0 <ucdr_check_final_buffer_behavior_array>
 80201a8:	1bb9      	subs	r1, r7, r6
 80201aa:	4604      	mov	r4, r0
 80201ac:	2800      	cmp	r0, #0
 80201ae:	d1ea      	bne.n	8020186 <ucdr_serialize_endian_array_uint8_t+0x16>
 80201b0:	2301      	movs	r3, #1
 80201b2:	7da8      	ldrb	r0, [r5, #22]
 80201b4:	756b      	strb	r3, [r5, #21]
 80201b6:	4058      	eors	r0, r3
 80201b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201bc:	463a      	mov	r2, r7
 80201be:	4641      	mov	r1, r8
 80201c0:	68a8      	ldr	r0, [r5, #8]
 80201c2:	f002 fa38 	bl	8022636 <memcpy>
 80201c6:	68aa      	ldr	r2, [r5, #8]
 80201c8:	692b      	ldr	r3, [r5, #16]
 80201ca:	443a      	add	r2, r7
 80201cc:	443b      	add	r3, r7
 80201ce:	60aa      	str	r2, [r5, #8]
 80201d0:	612b      	str	r3, [r5, #16]
 80201d2:	e7ed      	b.n	80201b0 <ucdr_serialize_endian_array_uint8_t+0x40>

080201d4 <ucdr_deserialize_array_uint8_t>:
 80201d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80201d8:	4688      	mov	r8, r1
 80201da:	4611      	mov	r1, r2
 80201dc:	4617      	mov	r7, r2
 80201de:	4605      	mov	r5, r0
 80201e0:	f7f3 ffdc 	bl	801419c <ucdr_check_buffer_available_for>
 80201e4:	b9e8      	cbnz	r0, 8020222 <ucdr_deserialize_array_uint8_t+0x4e>
 80201e6:	463e      	mov	r6, r7
 80201e8:	e00c      	b.n	8020204 <ucdr_deserialize_array_uint8_t+0x30>
 80201ea:	eb08 0003 	add.w	r0, r8, r3
 80201ee:	68a9      	ldr	r1, [r5, #8]
 80201f0:	4622      	mov	r2, r4
 80201f2:	1b36      	subs	r6, r6, r4
 80201f4:	f002 fa1f 	bl	8022636 <memcpy>
 80201f8:	68ab      	ldr	r3, [r5, #8]
 80201fa:	6928      	ldr	r0, [r5, #16]
 80201fc:	4423      	add	r3, r4
 80201fe:	4420      	add	r0, r4
 8020200:	60ab      	str	r3, [r5, #8]
 8020202:	6128      	str	r0, [r5, #16]
 8020204:	4631      	mov	r1, r6
 8020206:	2201      	movs	r2, #1
 8020208:	4628      	mov	r0, r5
 802020a:	f7f4 f851 	bl	80142b0 <ucdr_check_final_buffer_behavior_array>
 802020e:	1bbb      	subs	r3, r7, r6
 8020210:	4604      	mov	r4, r0
 8020212:	2800      	cmp	r0, #0
 8020214:	d1e9      	bne.n	80201ea <ucdr_deserialize_array_uint8_t+0x16>
 8020216:	2301      	movs	r3, #1
 8020218:	7da8      	ldrb	r0, [r5, #22]
 802021a:	756b      	strb	r3, [r5, #21]
 802021c:	4058      	eors	r0, r3
 802021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020222:	463a      	mov	r2, r7
 8020224:	68a9      	ldr	r1, [r5, #8]
 8020226:	4640      	mov	r0, r8
 8020228:	f002 fa05 	bl	8022636 <memcpy>
 802022c:	68aa      	ldr	r2, [r5, #8]
 802022e:	692b      	ldr	r3, [r5, #16]
 8020230:	443a      	add	r2, r7
 8020232:	443b      	add	r3, r7
 8020234:	60aa      	str	r2, [r5, #8]
 8020236:	612b      	str	r3, [r5, #16]
 8020238:	e7ed      	b.n	8020216 <ucdr_deserialize_array_uint8_t+0x42>
 802023a:	bf00      	nop

0802023c <ucdr_deserialize_endian_array_uint8_t>:
 802023c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020240:	4619      	mov	r1, r3
 8020242:	461f      	mov	r7, r3
 8020244:	4605      	mov	r5, r0
 8020246:	4690      	mov	r8, r2
 8020248:	f7f3 ffa8 	bl	801419c <ucdr_check_buffer_available_for>
 802024c:	b9e8      	cbnz	r0, 802028a <ucdr_deserialize_endian_array_uint8_t+0x4e>
 802024e:	463e      	mov	r6, r7
 8020250:	e00c      	b.n	802026c <ucdr_deserialize_endian_array_uint8_t+0x30>
 8020252:	eb08 0003 	add.w	r0, r8, r3
 8020256:	68a9      	ldr	r1, [r5, #8]
 8020258:	4622      	mov	r2, r4
 802025a:	1b36      	subs	r6, r6, r4
 802025c:	f002 f9eb 	bl	8022636 <memcpy>
 8020260:	68ab      	ldr	r3, [r5, #8]
 8020262:	6928      	ldr	r0, [r5, #16]
 8020264:	4423      	add	r3, r4
 8020266:	4420      	add	r0, r4
 8020268:	60ab      	str	r3, [r5, #8]
 802026a:	6128      	str	r0, [r5, #16]
 802026c:	4631      	mov	r1, r6
 802026e:	2201      	movs	r2, #1
 8020270:	4628      	mov	r0, r5
 8020272:	f7f4 f81d 	bl	80142b0 <ucdr_check_final_buffer_behavior_array>
 8020276:	1bbb      	subs	r3, r7, r6
 8020278:	4604      	mov	r4, r0
 802027a:	2800      	cmp	r0, #0
 802027c:	d1e9      	bne.n	8020252 <ucdr_deserialize_endian_array_uint8_t+0x16>
 802027e:	2301      	movs	r3, #1
 8020280:	7da8      	ldrb	r0, [r5, #22]
 8020282:	756b      	strb	r3, [r5, #21]
 8020284:	4058      	eors	r0, r3
 8020286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802028a:	463a      	mov	r2, r7
 802028c:	68a9      	ldr	r1, [r5, #8]
 802028e:	4640      	mov	r0, r8
 8020290:	f002 f9d1 	bl	8022636 <memcpy>
 8020294:	68aa      	ldr	r2, [r5, #8]
 8020296:	692b      	ldr	r3, [r5, #16]
 8020298:	443a      	add	r2, r7
 802029a:	443b      	add	r3, r7
 802029c:	60aa      	str	r2, [r5, #8]
 802029e:	612b      	str	r3, [r5, #16]
 80202a0:	e7ed      	b.n	802027e <ucdr_deserialize_endian_array_uint8_t+0x42>
 80202a2:	bf00      	nop

080202a4 <ucdr_serialize_string>:
 80202a4:	b510      	push	{r4, lr}
 80202a6:	b082      	sub	sp, #8
 80202a8:	4604      	mov	r4, r0
 80202aa:	4608      	mov	r0, r1
 80202ac:	9101      	str	r1, [sp, #4]
 80202ae:	f7e0 f821 	bl	80002f4 <strlen>
 80202b2:	4602      	mov	r2, r0
 80202b4:	9901      	ldr	r1, [sp, #4]
 80202b6:	4620      	mov	r0, r4
 80202b8:	3201      	adds	r2, #1
 80202ba:	b002      	add	sp, #8
 80202bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80202c0:	f7f6 bdd8 	b.w	8016e74 <ucdr_serialize_sequence_char>

080202c4 <ucdr_deserialize_string>:
 80202c4:	b500      	push	{lr}
 80202c6:	b083      	sub	sp, #12
 80202c8:	ab01      	add	r3, sp, #4
 80202ca:	f7f6 fde5 	bl	8016e98 <ucdr_deserialize_sequence_char>
 80202ce:	b003      	add	sp, #12
 80202d0:	f85d fb04 	ldr.w	pc, [sp], #4

080202d4 <uxr_init_input_best_effort_stream>:
 80202d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80202d8:	8003      	strh	r3, [r0, #0]
 80202da:	4770      	bx	lr

080202dc <uxr_reset_input_best_effort_stream>:
 80202dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80202e0:	8003      	strh	r3, [r0, #0]
 80202e2:	4770      	bx	lr

080202e4 <uxr_receive_best_effort_message>:
 80202e4:	b538      	push	{r3, r4, r5, lr}
 80202e6:	4604      	mov	r4, r0
 80202e8:	8800      	ldrh	r0, [r0, #0]
 80202ea:	460d      	mov	r5, r1
 80202ec:	f000 fe74 	bl	8020fd8 <uxr_seq_num_cmp>
 80202f0:	4603      	mov	r3, r0
 80202f2:	0fc0      	lsrs	r0, r0, #31
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	bfb8      	it	lt
 80202f8:	8025      	strhlt	r5, [r4, #0]
 80202fa:	bd38      	pop	{r3, r4, r5, pc}

080202fc <on_full_input_buffer>:
 80202fc:	b570      	push	{r4, r5, r6, lr}
 80202fe:	460c      	mov	r4, r1
 8020300:	4605      	mov	r5, r0
 8020302:	8908      	ldrh	r0, [r1, #8]
 8020304:	682b      	ldr	r3, [r5, #0]
 8020306:	7d26      	ldrb	r6, [r4, #20]
 8020308:	e9d1 1200 	ldrd	r1, r2, [r1]
 802030c:	fbb2 f2f0 	udiv	r2, r2, r0
 8020310:	eba3 0c01 	sub.w	ip, r3, r1
 8020314:	fbbc fcf2 	udiv	ip, ip, r2
 8020318:	f10c 0c01 	add.w	ip, ip, #1
 802031c:	fa1f f38c 	uxth.w	r3, ip
 8020320:	fbb3 fcf0 	udiv	ip, r3, r0
 8020324:	fb00 331c 	mls	r3, r0, ip, r3
 8020328:	b29b      	uxth	r3, r3
 802032a:	fb02 f303 	mul.w	r3, r2, r3
 802032e:	1d18      	adds	r0, r3, #4
 8020330:	4408      	add	r0, r1
 8020332:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8020336:	b116      	cbz	r6, 802033e <on_full_input_buffer+0x42>
 8020338:	2600      	movs	r6, #0
 802033a:	f840 6c04 	str.w	r6, [r0, #-4]
 802033e:	2a03      	cmp	r2, #3
 8020340:	d801      	bhi.n	8020346 <on_full_input_buffer+0x4a>
 8020342:	2001      	movs	r0, #1
 8020344:	bd70      	pop	{r4, r5, r6, pc}
 8020346:	3308      	adds	r3, #8
 8020348:	4628      	mov	r0, r5
 802034a:	3a04      	subs	r2, #4
 802034c:	4419      	add	r1, r3
 802034e:	692b      	ldr	r3, [r5, #16]
 8020350:	f7f3 ff70 	bl	8014234 <ucdr_init_buffer_origin>
 8020354:	4628      	mov	r0, r5
 8020356:	4622      	mov	r2, r4
 8020358:	4902      	ldr	r1, [pc, #8]	@ (8020364 <on_full_input_buffer+0x68>)
 802035a:	f7f3 ff47 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 802035e:	2000      	movs	r0, #0
 8020360:	bd70      	pop	{r4, r5, r6, pc}
 8020362:	bf00      	nop
 8020364:	080202fd 	.word	0x080202fd

08020368 <uxr_init_input_reliable_stream>:
 8020368:	b510      	push	{r4, lr}
 802036a:	e9c0 1200 	strd	r1, r2, [r0]
 802036e:	2400      	movs	r4, #0
 8020370:	9a02      	ldr	r2, [sp, #8]
 8020372:	8103      	strh	r3, [r0, #8]
 8020374:	6102      	str	r2, [r0, #16]
 8020376:	7504      	strb	r4, [r0, #20]
 8020378:	b1c3      	cbz	r3, 80203ac <uxr_init_input_reliable_stream+0x44>
 802037a:	600c      	str	r4, [r1, #0]
 802037c:	8901      	ldrh	r1, [r0, #8]
 802037e:	2901      	cmp	r1, #1
 8020380:	d914      	bls.n	80203ac <uxr_init_input_reliable_stream+0x44>
 8020382:	f04f 0c01 	mov.w	ip, #1
 8020386:	6843      	ldr	r3, [r0, #4]
 8020388:	f10c 0e01 	add.w	lr, ip, #1
 802038c:	fbbc f2f1 	udiv	r2, ip, r1
 8020390:	fbb3 f3f1 	udiv	r3, r3, r1
 8020394:	fb01 c212 	mls	r2, r1, r2, ip
 8020398:	fa1f fc8e 	uxth.w	ip, lr
 802039c:	b292      	uxth	r2, r2
 802039e:	fb02 f303 	mul.w	r3, r2, r3
 80203a2:	6802      	ldr	r2, [r0, #0]
 80203a4:	50d4      	str	r4, [r2, r3]
 80203a6:	8901      	ldrh	r1, [r0, #8]
 80203a8:	4561      	cmp	r1, ip
 80203aa:	d8ec      	bhi.n	8020386 <uxr_init_input_reliable_stream+0x1e>
 80203ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80203b0:	60c3      	str	r3, [r0, #12]
 80203b2:	bd10      	pop	{r4, pc}

080203b4 <uxr_reset_input_reliable_stream>:
 80203b4:	8901      	ldrh	r1, [r0, #8]
 80203b6:	b1d9      	cbz	r1, 80203f0 <uxr_reset_input_reliable_stream+0x3c>
 80203b8:	b510      	push	{r4, lr}
 80203ba:	f04f 0e00 	mov.w	lr, #0
 80203be:	46f4      	mov	ip, lr
 80203c0:	4674      	mov	r4, lr
 80203c2:	6843      	ldr	r3, [r0, #4]
 80203c4:	f10e 0e01 	add.w	lr, lr, #1
 80203c8:	fbbc f2f1 	udiv	r2, ip, r1
 80203cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80203d0:	fb01 c212 	mls	r2, r1, r2, ip
 80203d4:	fa1f fc8e 	uxth.w	ip, lr
 80203d8:	b292      	uxth	r2, r2
 80203da:	fb02 f303 	mul.w	r3, r2, r3
 80203de:	6802      	ldr	r2, [r0, #0]
 80203e0:	50d4      	str	r4, [r2, r3]
 80203e2:	8901      	ldrh	r1, [r0, #8]
 80203e4:	4561      	cmp	r1, ip
 80203e6:	d8ec      	bhi.n	80203c2 <uxr_reset_input_reliable_stream+0xe>
 80203e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80203ec:	60c3      	str	r3, [r0, #12]
 80203ee:	bd10      	pop	{r4, pc}
 80203f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80203f4:	60c3      	str	r3, [r0, #12]
 80203f6:	4770      	bx	lr

080203f8 <uxr_receive_reliable_message>:
 80203f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203fc:	4604      	mov	r4, r0
 80203fe:	460d      	mov	r5, r1
 8020400:	8901      	ldrh	r1, [r0, #8]
 8020402:	4617      	mov	r7, r2
 8020404:	8980      	ldrh	r0, [r0, #12]
 8020406:	4698      	mov	r8, r3
 8020408:	f000 fdde 	bl	8020fc8 <uxr_seq_num_add>
 802040c:	4629      	mov	r1, r5
 802040e:	4606      	mov	r6, r0
 8020410:	89a0      	ldrh	r0, [r4, #12]
 8020412:	f000 fde1 	bl	8020fd8 <uxr_seq_num_cmp>
 8020416:	2800      	cmp	r0, #0
 8020418:	db0a      	blt.n	8020430 <uxr_receive_reliable_message+0x38>
 802041a:	2600      	movs	r6, #0
 802041c:	4629      	mov	r1, r5
 802041e:	89e0      	ldrh	r0, [r4, #14]
 8020420:	f000 fdda 	bl	8020fd8 <uxr_seq_num_cmp>
 8020424:	2800      	cmp	r0, #0
 8020426:	da00      	bge.n	802042a <uxr_receive_reliable_message+0x32>
 8020428:	81e5      	strh	r5, [r4, #14]
 802042a:	4630      	mov	r0, r6
 802042c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020430:	4630      	mov	r0, r6
 8020432:	4629      	mov	r1, r5
 8020434:	f000 fdd0 	bl	8020fd8 <uxr_seq_num_cmp>
 8020438:	2800      	cmp	r0, #0
 802043a:	dbee      	blt.n	802041a <uxr_receive_reliable_message+0x22>
 802043c:	6923      	ldr	r3, [r4, #16]
 802043e:	4638      	mov	r0, r7
 8020440:	4798      	blx	r3
 8020442:	4681      	mov	r9, r0
 8020444:	2101      	movs	r1, #1
 8020446:	89a0      	ldrh	r0, [r4, #12]
 8020448:	f000 fdbe 	bl	8020fc8 <uxr_seq_num_add>
 802044c:	f1b9 0f00 	cmp.w	r9, #0
 8020450:	bf08      	it	eq
 8020452:	4285      	cmpeq	r5, r0
 8020454:	bf0c      	ite	eq
 8020456:	2601      	moveq	r6, #1
 8020458:	2600      	movne	r6, #0
 802045a:	d104      	bne.n	8020466 <uxr_receive_reliable_message+0x6e>
 802045c:	2300      	movs	r3, #0
 802045e:	9a08      	ldr	r2, [sp, #32]
 8020460:	81a0      	strh	r0, [r4, #12]
 8020462:	7013      	strb	r3, [r2, #0]
 8020464:	e7da      	b.n	802041c <uxr_receive_reliable_message+0x24>
 8020466:	8922      	ldrh	r2, [r4, #8]
 8020468:	6863      	ldr	r3, [r4, #4]
 802046a:	fbb5 f0f2 	udiv	r0, r5, r2
 802046e:	fbb3 f3f2 	udiv	r3, r3, r2
 8020472:	fb02 5010 	mls	r0, r2, r0, r5
 8020476:	b280      	uxth	r0, r0
 8020478:	fb03 f000 	mul.w	r0, r3, r0
 802047c:	6823      	ldr	r3, [r4, #0]
 802047e:	3004      	adds	r0, #4
 8020480:	4418      	add	r0, r3
 8020482:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8020486:	2b00      	cmp	r3, #0
 8020488:	d1c7      	bne.n	802041a <uxr_receive_reliable_message+0x22>
 802048a:	4639      	mov	r1, r7
 802048c:	4642      	mov	r2, r8
 802048e:	f002 f8d2 	bl	8022636 <memcpy>
 8020492:	8921      	ldrh	r1, [r4, #8]
 8020494:	6863      	ldr	r3, [r4, #4]
 8020496:	fbb5 f2f1 	udiv	r2, r5, r1
 802049a:	fbb3 f3f1 	udiv	r3, r3, r1
 802049e:	fb01 5212 	mls	r2, r1, r2, r5
 80204a2:	b292      	uxth	r2, r2
 80204a4:	fb02 f303 	mul.w	r3, r2, r3
 80204a8:	6822      	ldr	r2, [r4, #0]
 80204aa:	f842 8003 	str.w	r8, [r2, r3]
 80204ae:	2301      	movs	r3, #1
 80204b0:	9a08      	ldr	r2, [sp, #32]
 80204b2:	7013      	strb	r3, [r2, #0]
 80204b4:	f1b9 0f00 	cmp.w	r9, #0
 80204b8:	d0af      	beq.n	802041a <uxr_receive_reliable_message+0x22>
 80204ba:	89a6      	ldrh	r6, [r4, #12]
 80204bc:	2101      	movs	r1, #1
 80204be:	4630      	mov	r0, r6
 80204c0:	f000 fd82 	bl	8020fc8 <uxr_seq_num_add>
 80204c4:	8921      	ldrh	r1, [r4, #8]
 80204c6:	6863      	ldr	r3, [r4, #4]
 80204c8:	4606      	mov	r6, r0
 80204ca:	fbb0 f2f1 	udiv	r2, r0, r1
 80204ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80204d2:	fb01 0212 	mls	r2, r1, r2, r0
 80204d6:	6820      	ldr	r0, [r4, #0]
 80204d8:	b292      	uxth	r2, r2
 80204da:	fb02 f303 	mul.w	r3, r2, r3
 80204de:	3304      	adds	r3, #4
 80204e0:	4418      	add	r0, r3
 80204e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80204e6:	2b00      	cmp	r3, #0
 80204e8:	d097      	beq.n	802041a <uxr_receive_reliable_message+0x22>
 80204ea:	6923      	ldr	r3, [r4, #16]
 80204ec:	4798      	blx	r3
 80204ee:	2802      	cmp	r0, #2
 80204f0:	d002      	beq.n	80204f8 <uxr_receive_reliable_message+0x100>
 80204f2:	2801      	cmp	r0, #1
 80204f4:	d0e2      	beq.n	80204bc <uxr_receive_reliable_message+0xc4>
 80204f6:	e790      	b.n	802041a <uxr_receive_reliable_message+0x22>
 80204f8:	2601      	movs	r6, #1
 80204fa:	e78f      	b.n	802041c <uxr_receive_reliable_message+0x24>

080204fc <uxr_next_input_reliable_buffer_available>:
 80204fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020500:	4604      	mov	r4, r0
 8020502:	460f      	mov	r7, r1
 8020504:	8980      	ldrh	r0, [r0, #12]
 8020506:	2101      	movs	r1, #1
 8020508:	4690      	mov	r8, r2
 802050a:	f000 fd5d 	bl	8020fc8 <uxr_seq_num_add>
 802050e:	8922      	ldrh	r2, [r4, #8]
 8020510:	6866      	ldr	r6, [r4, #4]
 8020512:	fbb0 f3f2 	udiv	r3, r0, r2
 8020516:	fbb6 f6f2 	udiv	r6, r6, r2
 802051a:	fb02 0313 	mls	r3, r2, r3, r0
 802051e:	b29b      	uxth	r3, r3
 8020520:	fb03 f606 	mul.w	r6, r3, r6
 8020524:	6823      	ldr	r3, [r4, #0]
 8020526:	3604      	adds	r6, #4
 8020528:	441e      	add	r6, r3
 802052a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 802052e:	f1b9 0f00 	cmp.w	r9, #0
 8020532:	d023      	beq.n	802057c <uxr_next_input_reliable_buffer_available+0x80>
 8020534:	4605      	mov	r5, r0
 8020536:	6923      	ldr	r3, [r4, #16]
 8020538:	4630      	mov	r0, r6
 802053a:	4798      	blx	r3
 802053c:	4682      	mov	sl, r0
 802053e:	b300      	cbz	r0, 8020582 <uxr_next_input_reliable_buffer_available+0x86>
 8020540:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8020544:	2101      	movs	r1, #1
 8020546:	4650      	mov	r0, sl
 8020548:	f000 fd3e 	bl	8020fc8 <uxr_seq_num_add>
 802054c:	8921      	ldrh	r1, [r4, #8]
 802054e:	4682      	mov	sl, r0
 8020550:	6863      	ldr	r3, [r4, #4]
 8020552:	6820      	ldr	r0, [r4, #0]
 8020554:	fbba f2f1 	udiv	r2, sl, r1
 8020558:	fbb3 f3f1 	udiv	r3, r3, r1
 802055c:	fb01 a212 	mls	r2, r1, r2, sl
 8020560:	b292      	uxth	r2, r2
 8020562:	fb02 f303 	mul.w	r3, r2, r3
 8020566:	3304      	adds	r3, #4
 8020568:	4418      	add	r0, r3
 802056a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 802056e:	b12b      	cbz	r3, 802057c <uxr_next_input_reliable_buffer_available+0x80>
 8020570:	6923      	ldr	r3, [r4, #16]
 8020572:	4798      	blx	r3
 8020574:	2802      	cmp	r0, #2
 8020576:	d01b      	beq.n	80205b0 <uxr_next_input_reliable_buffer_available+0xb4>
 8020578:	2801      	cmp	r0, #1
 802057a:	d0e3      	beq.n	8020544 <uxr_next_input_reliable_buffer_available+0x48>
 802057c:	2000      	movs	r0, #0
 802057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020582:	464a      	mov	r2, r9
 8020584:	4631      	mov	r1, r6
 8020586:	4638      	mov	r0, r7
 8020588:	f7f3 fe5c 	bl	8014244 <ucdr_init_buffer>
 802058c:	8921      	ldrh	r1, [r4, #8]
 802058e:	6863      	ldr	r3, [r4, #4]
 8020590:	2001      	movs	r0, #1
 8020592:	fbb5 f2f1 	udiv	r2, r5, r1
 8020596:	fbb3 f3f1 	udiv	r3, r3, r1
 802059a:	fb01 5212 	mls	r2, r1, r2, r5
 802059e:	b292      	uxth	r2, r2
 80205a0:	fb02 f303 	mul.w	r3, r2, r3
 80205a4:	6822      	ldr	r2, [r4, #0]
 80205a6:	f842 a003 	str.w	sl, [r2, r3]
 80205aa:	81a5      	strh	r5, [r4, #12]
 80205ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205b0:	8920      	ldrh	r0, [r4, #8]
 80205b2:	eb06 0108 	add.w	r1, r6, r8
 80205b6:	6863      	ldr	r3, [r4, #4]
 80205b8:	eba9 0208 	sub.w	r2, r9, r8
 80205bc:	fbb5 f6f0 	udiv	r6, r5, r0
 80205c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80205c4:	fb00 5516 	mls	r5, r0, r6, r5
 80205c8:	2000      	movs	r0, #0
 80205ca:	b2ad      	uxth	r5, r5
 80205cc:	fb03 f505 	mul.w	r5, r3, r5
 80205d0:	6823      	ldr	r3, [r4, #0]
 80205d2:	5158      	str	r0, [r3, r5]
 80205d4:	4638      	mov	r0, r7
 80205d6:	f7f3 fe35 	bl	8014244 <ucdr_init_buffer>
 80205da:	4638      	mov	r0, r7
 80205dc:	4622      	mov	r2, r4
 80205de:	4903      	ldr	r1, [pc, #12]	@ (80205ec <uxr_next_input_reliable_buffer_available+0xf0>)
 80205e0:	f7f3 fe04 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 80205e4:	2001      	movs	r0, #1
 80205e6:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80205ea:	e7c8      	b.n	802057e <uxr_next_input_reliable_buffer_available+0x82>
 80205ec:	080202fd 	.word	0x080202fd

080205f0 <uxr_process_heartbeat>:
 80205f0:	b538      	push	{r3, r4, r5, lr}
 80205f2:	4611      	mov	r1, r2
 80205f4:	4604      	mov	r4, r0
 80205f6:	89c0      	ldrh	r0, [r0, #14]
 80205f8:	4615      	mov	r5, r2
 80205fa:	f000 fced 	bl	8020fd8 <uxr_seq_num_cmp>
 80205fe:	2800      	cmp	r0, #0
 8020600:	bfb8      	it	lt
 8020602:	81e5      	strhlt	r5, [r4, #14]
 8020604:	bd38      	pop	{r3, r4, r5, pc}
 8020606:	bf00      	nop

08020608 <uxr_compute_acknack>:
 8020608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802060c:	8903      	ldrh	r3, [r0, #8]
 802060e:	4604      	mov	r4, r0
 8020610:	460f      	mov	r7, r1
 8020612:	8985      	ldrh	r5, [r0, #12]
 8020614:	b1db      	cbz	r3, 802064e <uxr_compute_acknack+0x46>
 8020616:	4628      	mov	r0, r5
 8020618:	2601      	movs	r6, #1
 802061a:	e004      	b.n	8020626 <uxr_compute_acknack+0x1e>
 802061c:	4566      	cmp	r6, ip
 802061e:	f106 0601 	add.w	r6, r6, #1
 8020622:	d214      	bcs.n	802064e <uxr_compute_acknack+0x46>
 8020624:	89a0      	ldrh	r0, [r4, #12]
 8020626:	b2b1      	uxth	r1, r6
 8020628:	f000 fcce 	bl	8020fc8 <uxr_seq_num_add>
 802062c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020630:	fbb0 f2fc 	udiv	r2, r0, ip
 8020634:	e9d4 1300 	ldrd	r1, r3, [r4]
 8020638:	fb0c 0212 	mls	r2, ip, r2, r0
 802063c:	fbb3 f3fc 	udiv	r3, r3, ip
 8020640:	b292      	uxth	r2, r2
 8020642:	fb02 f303 	mul.w	r3, r2, r3
 8020646:	58cb      	ldr	r3, [r1, r3]
 8020648:	2b00      	cmp	r3, #0
 802064a:	d1e7      	bne.n	802061c <uxr_compute_acknack+0x14>
 802064c:	4605      	mov	r5, r0
 802064e:	803d      	strh	r5, [r7, #0]
 8020650:	2101      	movs	r1, #1
 8020652:	89e6      	ldrh	r6, [r4, #14]
 8020654:	4628      	mov	r0, r5
 8020656:	f000 fcbb 	bl	8020fd0 <uxr_seq_num_sub>
 802065a:	4601      	mov	r1, r0
 802065c:	4630      	mov	r0, r6
 802065e:	f000 fcb7 	bl	8020fd0 <uxr_seq_num_sub>
 8020662:	4606      	mov	r6, r0
 8020664:	b328      	cbz	r0, 80206b2 <uxr_compute_acknack+0xaa>
 8020666:	f04f 0900 	mov.w	r9, #0
 802066a:	f04f 0801 	mov.w	r8, #1
 802066e:	464d      	mov	r5, r9
 8020670:	fa1f f189 	uxth.w	r1, r9
 8020674:	8838      	ldrh	r0, [r7, #0]
 8020676:	f000 fca7 	bl	8020fc8 <uxr_seq_num_add>
 802067a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 802067e:	6861      	ldr	r1, [r4, #4]
 8020680:	fa08 fe09 	lsl.w	lr, r8, r9
 8020684:	6822      	ldr	r2, [r4, #0]
 8020686:	f109 0901 	add.w	r9, r9, #1
 802068a:	ea4e 0e05 	orr.w	lr, lr, r5
 802068e:	fbb0 f3fc 	udiv	r3, r0, ip
 8020692:	fbb1 f1fc 	udiv	r1, r1, ip
 8020696:	fb03 001c 	mls	r0, r3, ip, r0
 802069a:	b283      	uxth	r3, r0
 802069c:	fb01 f303 	mul.w	r3, r1, r3
 80206a0:	58d3      	ldr	r3, [r2, r3]
 80206a2:	b90b      	cbnz	r3, 80206a8 <uxr_compute_acknack+0xa0>
 80206a4:	fa1f f58e 	uxth.w	r5, lr
 80206a8:	454e      	cmp	r6, r9
 80206aa:	d1e1      	bne.n	8020670 <uxr_compute_acknack+0x68>
 80206ac:	4628      	mov	r0, r5
 80206ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80206b2:	4605      	mov	r5, r0
 80206b4:	4628      	mov	r0, r5
 80206b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80206ba:	bf00      	nop

080206bc <uxr_init_output_best_effort_stream>:
 80206bc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80206c0:	6001      	str	r1, [r0, #0]
 80206c2:	7303      	strb	r3, [r0, #12]
 80206c4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80206c8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80206cc:	4770      	bx	lr
 80206ce:	bf00      	nop

080206d0 <uxr_reset_output_best_effort_stream>:
 80206d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80206d4:	7b03      	ldrb	r3, [r0, #12]
 80206d6:	81c2      	strh	r2, [r0, #14]
 80206d8:	6043      	str	r3, [r0, #4]
 80206da:	4770      	bx	lr

080206dc <uxr_prepare_best_effort_buffer_to_write>:
 80206dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80206de:	4604      	mov	r4, r0
 80206e0:	b083      	sub	sp, #12
 80206e2:	6840      	ldr	r0, [r0, #4]
 80206e4:	460d      	mov	r5, r1
 80206e6:	4616      	mov	r6, r2
 80206e8:	f7f8 ff5e 	bl	80195a8 <uxr_submessage_padding>
 80206ec:	6863      	ldr	r3, [r4, #4]
 80206ee:	4418      	add	r0, r3
 80206f0:	68a3      	ldr	r3, [r4, #8]
 80206f2:	1942      	adds	r2, r0, r5
 80206f4:	4293      	cmp	r3, r2
 80206f6:	bf2c      	ite	cs
 80206f8:	2701      	movcs	r7, #1
 80206fa:	2700      	movcc	r7, #0
 80206fc:	d202      	bcs.n	8020704 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80206fe:	4638      	mov	r0, r7
 8020700:	b003      	add	sp, #12
 8020702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020704:	9000      	str	r0, [sp, #0]
 8020706:	2300      	movs	r3, #0
 8020708:	4630      	mov	r0, r6
 802070a:	6821      	ldr	r1, [r4, #0]
 802070c:	f7f3 fd88 	bl	8014220 <ucdr_init_buffer_origin_offset>
 8020710:	6861      	ldr	r1, [r4, #4]
 8020712:	4638      	mov	r0, r7
 8020714:	4429      	add	r1, r5
 8020716:	6061      	str	r1, [r4, #4]
 8020718:	b003      	add	sp, #12
 802071a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802071c <uxr_prepare_best_effort_buffer_to_send>:
 802071c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020720:	4604      	mov	r4, r0
 8020722:	461d      	mov	r5, r3
 8020724:	6840      	ldr	r0, [r0, #4]
 8020726:	7b23      	ldrb	r3, [r4, #12]
 8020728:	4298      	cmp	r0, r3
 802072a:	bf8c      	ite	hi
 802072c:	2601      	movhi	r6, #1
 802072e:	2600      	movls	r6, #0
 8020730:	d802      	bhi.n	8020738 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8020732:	4630      	mov	r0, r6
 8020734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020738:	4688      	mov	r8, r1
 802073a:	89e0      	ldrh	r0, [r4, #14]
 802073c:	2101      	movs	r1, #1
 802073e:	4617      	mov	r7, r2
 8020740:	f000 fc42 	bl	8020fc8 <uxr_seq_num_add>
 8020744:	6823      	ldr	r3, [r4, #0]
 8020746:	81e0      	strh	r0, [r4, #14]
 8020748:	8028      	strh	r0, [r5, #0]
 802074a:	4630      	mov	r0, r6
 802074c:	f8c8 3000 	str.w	r3, [r8]
 8020750:	6863      	ldr	r3, [r4, #4]
 8020752:	603b      	str	r3, [r7, #0]
 8020754:	7b23      	ldrb	r3, [r4, #12]
 8020756:	6063      	str	r3, [r4, #4]
 8020758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802075c <on_full_output_buffer>:
 802075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802075e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8020762:	460c      	mov	r4, r1
 8020764:	6803      	ldr	r3, [r0, #0]
 8020766:	4605      	mov	r5, r0
 8020768:	7b26      	ldrb	r6, [r4, #12]
 802076a:	e9d1 1200 	ldrd	r1, r2, [r1]
 802076e:	fbb2 f2fc 	udiv	r2, r2, ip
 8020772:	eba3 0e01 	sub.w	lr, r3, r1
 8020776:	6903      	ldr	r3, [r0, #16]
 8020778:	fbbe fef2 	udiv	lr, lr, r2
 802077c:	f10e 0e01 	add.w	lr, lr, #1
 8020780:	fa1f fe8e 	uxth.w	lr, lr
 8020784:	fbbe f7fc 	udiv	r7, lr, ip
 8020788:	fb0c ec17 	mls	ip, ip, r7, lr
 802078c:	fa1f fc8c 	uxth.w	ip, ip
 8020790:	fb02 fc0c 	mul.w	ip, r2, ip
 8020794:	f851 200c 	ldr.w	r2, [r1, ip]
 8020798:	44b4      	add	ip, r6
 802079a:	1b92      	subs	r2, r2, r6
 802079c:	f10c 0c08 	add.w	ip, ip, #8
 80207a0:	3a04      	subs	r2, #4
 80207a2:	4461      	add	r1, ip
 80207a4:	f7f3 fd46 	bl	8014234 <ucdr_init_buffer_origin>
 80207a8:	4628      	mov	r0, r5
 80207aa:	4622      	mov	r2, r4
 80207ac:	4902      	ldr	r1, [pc, #8]	@ (80207b8 <on_full_output_buffer+0x5c>)
 80207ae:	f7f3 fd1d 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 80207b2:	2000      	movs	r0, #0
 80207b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80207b6:	bf00      	nop
 80207b8:	0802075d 	.word	0x0802075d

080207bc <uxr_init_output_reliable_stream>:
 80207bc:	b530      	push	{r4, r5, lr}
 80207be:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80207c2:	8103      	strh	r3, [r0, #8]
 80207c4:	7304      	strb	r4, [r0, #12]
 80207c6:	e9c0 1200 	strd	r1, r2, [r0]
 80207ca:	b1e3      	cbz	r3, 8020806 <uxr_init_output_reliable_stream+0x4a>
 80207cc:	600c      	str	r4, [r1, #0]
 80207ce:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80207d2:	f1bc 0f01 	cmp.w	ip, #1
 80207d6:	d916      	bls.n	8020806 <uxr_init_output_reliable_stream+0x4a>
 80207d8:	f04f 0e01 	mov.w	lr, #1
 80207dc:	6843      	ldr	r3, [r0, #4]
 80207de:	f10e 0501 	add.w	r5, lr, #1
 80207e2:	7b04      	ldrb	r4, [r0, #12]
 80207e4:	6801      	ldr	r1, [r0, #0]
 80207e6:	fbbe f2fc 	udiv	r2, lr, ip
 80207ea:	fbb3 f3fc 	udiv	r3, r3, ip
 80207ee:	fb0c e212 	mls	r2, ip, r2, lr
 80207f2:	fa1f fe85 	uxth.w	lr, r5
 80207f6:	b292      	uxth	r2, r2
 80207f8:	fb02 f303 	mul.w	r3, r2, r3
 80207fc:	50cc      	str	r4, [r1, r3]
 80207fe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8020802:	45f4      	cmp	ip, lr
 8020804:	d8ea      	bhi.n	80207dc <uxr_init_output_reliable_stream+0x20>
 8020806:	4b07      	ldr	r3, [pc, #28]	@ (8020824 <uxr_init_output_reliable_stream+0x68>)
 8020808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802080c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020810:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8020814:	f8c0 300e 	str.w	r3, [r0, #14]
 8020818:	2300      	movs	r3, #0
 802081a:	8242      	strh	r2, [r0, #18]
 802081c:	8403      	strh	r3, [r0, #32]
 802081e:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8020822:	bd30      	pop	{r4, r5, pc}
 8020824:	ffff0000 	.word	0xffff0000

08020828 <uxr_reset_output_reliable_stream>:
 8020828:	8901      	ldrh	r1, [r0, #8]
 802082a:	b510      	push	{r4, lr}
 802082c:	b1b1      	cbz	r1, 802085c <uxr_reset_output_reliable_stream+0x34>
 802082e:	f04f 0e00 	mov.w	lr, #0
 8020832:	46f4      	mov	ip, lr
 8020834:	6843      	ldr	r3, [r0, #4]
 8020836:	f10e 0e01 	add.w	lr, lr, #1
 802083a:	7b04      	ldrb	r4, [r0, #12]
 802083c:	fbbc f2f1 	udiv	r2, ip, r1
 8020840:	fbb3 f3f1 	udiv	r3, r3, r1
 8020844:	fb01 c212 	mls	r2, r1, r2, ip
 8020848:	fa1f fc8e 	uxth.w	ip, lr
 802084c:	b292      	uxth	r2, r2
 802084e:	fb02 f303 	mul.w	r3, r2, r3
 8020852:	6802      	ldr	r2, [r0, #0]
 8020854:	50d4      	str	r4, [r2, r3]
 8020856:	8901      	ldrh	r1, [r0, #8]
 8020858:	4561      	cmp	r1, ip
 802085a:	d8eb      	bhi.n	8020834 <uxr_reset_output_reliable_stream+0xc>
 802085c:	4b08      	ldr	r3, [pc, #32]	@ (8020880 <uxr_reset_output_reliable_stream+0x58>)
 802085e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020862:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8020878 <uxr_reset_output_reliable_stream+0x50>
 8020866:	f8c0 300e 	str.w	r3, [r0, #14]
 802086a:	2300      	movs	r3, #0
 802086c:	8242      	strh	r2, [r0, #18]
 802086e:	8403      	strh	r3, [r0, #32]
 8020870:	ed80 7b06 	vstr	d7, [r0, #24]
 8020874:	bd10      	pop	{r4, pc}
 8020876:	bf00      	nop
 8020878:	ffffffff 	.word	0xffffffff
 802087c:	7fffffff 	.word	0x7fffffff
 8020880:	ffff0000 	.word	0xffff0000

08020884 <uxr_prepare_reliable_buffer_to_write>:
 8020884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020888:	4604      	mov	r4, r0
 802088a:	b091      	sub	sp, #68	@ 0x44
 802088c:	8900      	ldrh	r0, [r0, #8]
 802088e:	468b      	mov	fp, r1
 8020890:	89e6      	ldrh	r6, [r4, #14]
 8020892:	9204      	str	r2, [sp, #16]
 8020894:	6865      	ldr	r5, [r4, #4]
 8020896:	6823      	ldr	r3, [r4, #0]
 8020898:	f894 900c 	ldrb.w	r9, [r4, #12]
 802089c:	fbb6 f2f0 	udiv	r2, r6, r0
 80208a0:	fbb5 f5f0 	udiv	r5, r5, r0
 80208a4:	fb00 6212 	mls	r2, r0, r2, r6
 80208a8:	1f2f      	subs	r7, r5, #4
 80208aa:	b292      	uxth	r2, r2
 80208ac:	fb05 3202 	mla	r2, r5, r2, r3
 80208b0:	1d11      	adds	r1, r2, #4
 80208b2:	f8d2 8000 	ldr.w	r8, [r2]
 80208b6:	9103      	str	r1, [sp, #12]
 80208b8:	2800      	cmp	r0, #0
 80208ba:	f000 814a 	beq.w	8020b52 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 80208be:	f04f 0c00 	mov.w	ip, #0
 80208c2:	46e2      	mov	sl, ip
 80208c4:	4661      	mov	r1, ip
 80208c6:	f10c 0c01 	add.w	ip, ip, #1
 80208ca:	fbb1 f2f0 	udiv	r2, r1, r0
 80208ce:	fb00 1212 	mls	r2, r0, r2, r1
 80208d2:	fa1f f18c 	uxth.w	r1, ip
 80208d6:	b292      	uxth	r2, r2
 80208d8:	fb05 f202 	mul.w	r2, r5, r2
 80208dc:	589a      	ldr	r2, [r3, r2]
 80208de:	454a      	cmp	r2, r9
 80208e0:	d103      	bne.n	80208ea <uxr_prepare_reliable_buffer_to_write+0x66>
 80208e2:	f10a 0a01 	add.w	sl, sl, #1
 80208e6:	fa1f fa8a 	uxth.w	sl, sl
 80208ea:	4281      	cmp	r1, r0
 80208ec:	d3eb      	bcc.n	80208c6 <uxr_prepare_reliable_buffer_to_write+0x42>
 80208ee:	4640      	mov	r0, r8
 80208f0:	2104      	movs	r1, #4
 80208f2:	f8cd a014 	str.w	sl, [sp, #20]
 80208f6:	f7f3 fca9 	bl	801424c <ucdr_alignment>
 80208fa:	4480      	add	r8, r0
 80208fc:	eb08 020b 	add.w	r2, r8, fp
 8020900:	42ba      	cmp	r2, r7
 8020902:	f240 80ca 	bls.w	8020a9a <uxr_prepare_reliable_buffer_to_write+0x216>
 8020906:	7b22      	ldrb	r2, [r4, #12]
 8020908:	445a      	add	r2, fp
 802090a:	42ba      	cmp	r2, r7
 802090c:	f240 80b2 	bls.w	8020a74 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8020910:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8020914:	b2bb      	uxth	r3, r7
 8020916:	eba2 0209 	sub.w	r2, r2, r9
 802091a:	441a      	add	r2, r3
 802091c:	b292      	uxth	r2, r2
 802091e:	fb0a f902 	mul.w	r9, sl, r2
 8020922:	9205      	str	r2, [sp, #20]
 8020924:	45d9      	cmp	r9, fp
 8020926:	9206      	str	r2, [sp, #24]
 8020928:	f0c0 80b3 	bcc.w	8020a92 <uxr_prepare_reliable_buffer_to_write+0x20e>
 802092c:	f108 0204 	add.w	r2, r8, #4
 8020930:	42ba      	cmp	r2, r7
 8020932:	f080 80da 	bcs.w	8020aea <uxr_prepare_reliable_buffer_to_write+0x266>
 8020936:	f1a3 0904 	sub.w	r9, r3, #4
 802093a:	9b05      	ldr	r3, [sp, #20]
 802093c:	eba9 0908 	sub.w	r9, r9, r8
 8020940:	fa1f f989 	uxth.w	r9, r9
 8020944:	ebab 0b09 	sub.w	fp, fp, r9
 8020948:	fbbb f2f3 	udiv	r2, fp, r3
 802094c:	fb03 b312 	mls	r3, r3, r2, fp
 8020950:	2b00      	cmp	r3, #0
 8020952:	f040 80c4 	bne.w	8020ade <uxr_prepare_reliable_buffer_to_write+0x25a>
 8020956:	b293      	uxth	r3, r2
 8020958:	4553      	cmp	r3, sl
 802095a:	f200 809a 	bhi.w	8020a92 <uxr_prepare_reliable_buffer_to_write+0x20e>
 802095e:	2b00      	cmp	r3, #0
 8020960:	f000 80f9 	beq.w	8020b56 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8020964:	f8cd 801c 	str.w	r8, [sp, #28]
 8020968:	f04f 0a00 	mov.w	sl, #0
 802096c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020970:	f10d 0b20 	add.w	fp, sp, #32
 8020974:	9505      	str	r5, [sp, #20]
 8020976:	461d      	mov	r5, r3
 8020978:	e000      	b.n	802097c <uxr_prepare_reliable_buffer_to_write+0xf8>
 802097a:	46c1      	mov	r9, r8
 802097c:	8922      	ldrh	r2, [r4, #8]
 802097e:	4658      	mov	r0, fp
 8020980:	6863      	ldr	r3, [r4, #4]
 8020982:	f10a 0a01 	add.w	sl, sl, #1
 8020986:	fbb6 f1f2 	udiv	r1, r6, r2
 802098a:	fbb3 f3f2 	udiv	r3, r3, r2
 802098e:	fb02 6111 	mls	r1, r2, r1, r6
 8020992:	463a      	mov	r2, r7
 8020994:	b289      	uxth	r1, r1
 8020996:	fb03 f101 	mul.w	r1, r3, r1
 802099a:	6823      	ldr	r3, [r4, #0]
 802099c:	3104      	adds	r1, #4
 802099e:	4419      	add	r1, r3
 80209a0:	2300      	movs	r3, #0
 80209a2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 80209a6:	f8cd c000 	str.w	ip, [sp]
 80209aa:	f7f3 fc39 	bl	8014220 <ucdr_init_buffer_origin_offset>
 80209ae:	464a      	mov	r2, r9
 80209b0:	2300      	movs	r3, #0
 80209b2:	210d      	movs	r1, #13
 80209b4:	4658      	mov	r0, fp
 80209b6:	f7f8 fdb7 	bl	8019528 <uxr_buffer_submessage_header>
 80209ba:	8921      	ldrh	r1, [r4, #8]
 80209bc:	6863      	ldr	r3, [r4, #4]
 80209be:	4630      	mov	r0, r6
 80209c0:	fbb6 f2f1 	udiv	r2, r6, r1
 80209c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80209c8:	fb01 6212 	mls	r2, r1, r2, r6
 80209cc:	2101      	movs	r1, #1
 80209ce:	b292      	uxth	r2, r2
 80209d0:	fb02 f303 	mul.w	r3, r2, r3
 80209d4:	6822      	ldr	r2, [r4, #0]
 80209d6:	50d7      	str	r7, [r2, r3]
 80209d8:	f000 faf6 	bl	8020fc8 <uxr_seq_num_add>
 80209dc:	4606      	mov	r6, r0
 80209de:	fa1f f38a 	uxth.w	r3, sl
 80209e2:	429d      	cmp	r5, r3
 80209e4:	d8c9      	bhi.n	802097a <uxr_prepare_reliable_buffer_to_write+0xf6>
 80209e6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80209ea:	9d05      	ldr	r5, [sp, #20]
 80209ec:	8920      	ldrh	r0, [r4, #8]
 80209ee:	463a      	mov	r2, r7
 80209f0:	6863      	ldr	r3, [r4, #4]
 80209f2:	fbb6 f1f0 	udiv	r1, r6, r0
 80209f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80209fa:	fb00 6111 	mls	r1, r0, r1, r6
 80209fe:	4658      	mov	r0, fp
 8020a00:	b289      	uxth	r1, r1
 8020a02:	fb01 f303 	mul.w	r3, r1, r3
 8020a06:	6821      	ldr	r1, [r4, #0]
 8020a08:	3304      	adds	r3, #4
 8020a0a:	4419      	add	r1, r3
 8020a0c:	2300      	movs	r3, #0
 8020a0e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8020a12:	9700      	str	r7, [sp, #0]
 8020a14:	f7f3 fc04 	bl	8014220 <ucdr_init_buffer_origin_offset>
 8020a18:	9f06      	ldr	r7, [sp, #24]
 8020a1a:	4658      	mov	r0, fp
 8020a1c:	2302      	movs	r3, #2
 8020a1e:	b2ba      	uxth	r2, r7
 8020a20:	210d      	movs	r1, #13
 8020a22:	f7f8 fd81 	bl	8019528 <uxr_buffer_submessage_header>
 8020a26:	f108 0104 	add.w	r1, r8, #4
 8020a2a:	9b03      	ldr	r3, [sp, #12]
 8020a2c:	f1a5 0208 	sub.w	r2, r5, #8
 8020a30:	8925      	ldrh	r5, [r4, #8]
 8020a32:	440b      	add	r3, r1
 8020a34:	eba2 0208 	sub.w	r2, r2, r8
 8020a38:	fbb6 f0f5 	udiv	r0, r6, r5
 8020a3c:	4619      	mov	r1, r3
 8020a3e:	6863      	ldr	r3, [r4, #4]
 8020a40:	fb05 6010 	mls	r0, r5, r0, r6
 8020a44:	fbb3 f3f5 	udiv	r3, r3, r5
 8020a48:	b280      	uxth	r0, r0
 8020a4a:	6825      	ldr	r5, [r4, #0]
 8020a4c:	fb00 f303 	mul.w	r3, r0, r3
 8020a50:	7b20      	ldrb	r0, [r4, #12]
 8020a52:	3004      	adds	r0, #4
 8020a54:	4438      	add	r0, r7
 8020a56:	50e8      	str	r0, [r5, r3]
 8020a58:	9d04      	ldr	r5, [sp, #16]
 8020a5a:	4628      	mov	r0, r5
 8020a5c:	f7f3 fbf2 	bl	8014244 <ucdr_init_buffer>
 8020a60:	4628      	mov	r0, r5
 8020a62:	4622      	mov	r2, r4
 8020a64:	493d      	ldr	r1, [pc, #244]	@ (8020b5c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8020a66:	f7f3 fbc1 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 8020a6a:	2001      	movs	r0, #1
 8020a6c:	81e6      	strh	r6, [r4, #14]
 8020a6e:	b011      	add	sp, #68	@ 0x44
 8020a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a74:	2101      	movs	r1, #1
 8020a76:	89e0      	ldrh	r0, [r4, #14]
 8020a78:	f000 faa6 	bl	8020fc8 <uxr_seq_num_add>
 8020a7c:	4605      	mov	r5, r0
 8020a7e:	8921      	ldrh	r1, [r4, #8]
 8020a80:	8a60      	ldrh	r0, [r4, #18]
 8020a82:	f000 faa1 	bl	8020fc8 <uxr_seq_num_add>
 8020a86:	4601      	mov	r1, r0
 8020a88:	4628      	mov	r0, r5
 8020a8a:	f000 faa5 	bl	8020fd8 <uxr_seq_num_cmp>
 8020a8e:	2800      	cmp	r0, #0
 8020a90:	dd44      	ble.n	8020b1c <uxr_prepare_reliable_buffer_to_write+0x298>
 8020a92:	2000      	movs	r0, #0
 8020a94:	b011      	add	sp, #68	@ 0x44
 8020a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a9a:	8921      	ldrh	r1, [r4, #8]
 8020a9c:	8a60      	ldrh	r0, [r4, #18]
 8020a9e:	9205      	str	r2, [sp, #20]
 8020aa0:	f000 fa92 	bl	8020fc8 <uxr_seq_num_add>
 8020aa4:	4601      	mov	r1, r0
 8020aa6:	4630      	mov	r0, r6
 8020aa8:	f000 fa96 	bl	8020fd8 <uxr_seq_num_cmp>
 8020aac:	2800      	cmp	r0, #0
 8020aae:	9a05      	ldr	r2, [sp, #20]
 8020ab0:	dcef      	bgt.n	8020a92 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020ab2:	8925      	ldrh	r5, [r4, #8]
 8020ab4:	e9d4 7300 	ldrd	r7, r3, [r4]
 8020ab8:	fbb6 f4f5 	udiv	r4, r6, r5
 8020abc:	fbb3 f3f5 	udiv	r3, r3, r5
 8020ac0:	fb05 6414 	mls	r4, r5, r4, r6
 8020ac4:	b2a4      	uxth	r4, r4
 8020ac6:	fb04 f303 	mul.w	r3, r4, r3
 8020aca:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8020ace:	50fa      	str	r2, [r7, r3]
 8020ad0:	2300      	movs	r3, #0
 8020ad2:	f8cd 8000 	str.w	r8, [sp]
 8020ad6:	f7f3 fba3 	bl	8014220 <ucdr_init_buffer_origin_offset>
 8020ada:	2001      	movs	r0, #1
 8020adc:	e7da      	b.n	8020a94 <uxr_prepare_reliable_buffer_to_write+0x210>
 8020ade:	3201      	adds	r2, #1
 8020ae0:	9306      	str	r3, [sp, #24]
 8020ae2:	b293      	uxth	r3, r2
 8020ae4:	4553      	cmp	r3, sl
 8020ae6:	d8d4      	bhi.n	8020a92 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020ae8:	e739      	b.n	802095e <uxr_prepare_reliable_buffer_to_write+0xda>
 8020aea:	4630      	mov	r0, r6
 8020aec:	2101      	movs	r1, #1
 8020aee:	9307      	str	r3, [sp, #28]
 8020af0:	f000 fa6a 	bl	8020fc8 <uxr_seq_num_add>
 8020af4:	4606      	mov	r6, r0
 8020af6:	8920      	ldrh	r0, [r4, #8]
 8020af8:	6862      	ldr	r2, [r4, #4]
 8020afa:	fbb6 f1f0 	udiv	r1, r6, r0
 8020afe:	fbb2 f2f0 	udiv	r2, r2, r0
 8020b02:	fb00 6111 	mls	r1, r0, r1, r6
 8020b06:	b289      	uxth	r1, r1
 8020b08:	fb01 f202 	mul.w	r2, r1, r2
 8020b0c:	6821      	ldr	r1, [r4, #0]
 8020b0e:	3204      	adds	r2, #4
 8020b10:	188b      	adds	r3, r1, r2
 8020b12:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8020b16:	9303      	str	r3, [sp, #12]
 8020b18:	9b07      	ldr	r3, [sp, #28]
 8020b1a:	e70c      	b.n	8020936 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8020b1c:	8921      	ldrh	r1, [r4, #8]
 8020b1e:	6863      	ldr	r3, [r4, #4]
 8020b20:	9804      	ldr	r0, [sp, #16]
 8020b22:	fbb5 f2f1 	udiv	r2, r5, r1
 8020b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8020b2a:	fb01 5212 	mls	r2, r1, r2, r5
 8020b2e:	6821      	ldr	r1, [r4, #0]
 8020b30:	b292      	uxth	r2, r2
 8020b32:	fb02 f303 	mul.w	r3, r2, r3
 8020b36:	7b22      	ldrb	r2, [r4, #12]
 8020b38:	3304      	adds	r3, #4
 8020b3a:	445a      	add	r2, fp
 8020b3c:	4419      	add	r1, r3
 8020b3e:	f841 2c04 	str.w	r2, [r1, #-4]
 8020b42:	7b23      	ldrb	r3, [r4, #12]
 8020b44:	9300      	str	r3, [sp, #0]
 8020b46:	2300      	movs	r3, #0
 8020b48:	f7f3 fb6a 	bl	8014220 <ucdr_init_buffer_origin_offset>
 8020b4c:	2001      	movs	r0, #1
 8020b4e:	81e5      	strh	r5, [r4, #14]
 8020b50:	e7a0      	b.n	8020a94 <uxr_prepare_reliable_buffer_to_write+0x210>
 8020b52:	4682      	mov	sl, r0
 8020b54:	e6cb      	b.n	80208ee <uxr_prepare_reliable_buffer_to_write+0x6a>
 8020b56:	f10d 0b20 	add.w	fp, sp, #32
 8020b5a:	e747      	b.n	80209ec <uxr_prepare_reliable_buffer_to_write+0x168>
 8020b5c:	0802075d 	.word	0x0802075d

08020b60 <uxr_prepare_next_reliable_buffer_to_send>:
 8020b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b62:	4604      	mov	r4, r0
 8020b64:	461d      	mov	r5, r3
 8020b66:	460f      	mov	r7, r1
 8020b68:	8a00      	ldrh	r0, [r0, #16]
 8020b6a:	2101      	movs	r1, #1
 8020b6c:	4616      	mov	r6, r2
 8020b6e:	f000 fa2b 	bl	8020fc8 <uxr_seq_num_add>
 8020b72:	8028      	strh	r0, [r5, #0]
 8020b74:	8922      	ldrh	r2, [r4, #8]
 8020b76:	6863      	ldr	r3, [r4, #4]
 8020b78:	fbb0 f1f2 	udiv	r1, r0, r2
 8020b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8020b80:	fb02 0c11 	mls	ip, r2, r1, r0
 8020b84:	89e1      	ldrh	r1, [r4, #14]
 8020b86:	fa1f fc8c 	uxth.w	ip, ip
 8020b8a:	fb0c fc03 	mul.w	ip, ip, r3
 8020b8e:	6823      	ldr	r3, [r4, #0]
 8020b90:	f10c 0c04 	add.w	ip, ip, #4
 8020b94:	4463      	add	r3, ip
 8020b96:	603b      	str	r3, [r7, #0]
 8020b98:	6823      	ldr	r3, [r4, #0]
 8020b9a:	449c      	add	ip, r3
 8020b9c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8020ba0:	6033      	str	r3, [r6, #0]
 8020ba2:	f000 fa19 	bl	8020fd8 <uxr_seq_num_cmp>
 8020ba6:	2800      	cmp	r0, #0
 8020ba8:	dd01      	ble.n	8020bae <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8020baa:	2000      	movs	r0, #0
 8020bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020bae:	7b23      	ldrb	r3, [r4, #12]
 8020bb0:	6832      	ldr	r2, [r6, #0]
 8020bb2:	429a      	cmp	r2, r3
 8020bb4:	d9f9      	bls.n	8020baa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020bb6:	8a61      	ldrh	r1, [r4, #18]
 8020bb8:	8a20      	ldrh	r0, [r4, #16]
 8020bba:	f000 fa09 	bl	8020fd0 <uxr_seq_num_sub>
 8020bbe:	8923      	ldrh	r3, [r4, #8]
 8020bc0:	4283      	cmp	r3, r0
 8020bc2:	d0f2      	beq.n	8020baa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020bc4:	8828      	ldrh	r0, [r5, #0]
 8020bc6:	89e3      	ldrh	r3, [r4, #14]
 8020bc8:	8220      	strh	r0, [r4, #16]
 8020bca:	4298      	cmp	r0, r3
 8020bcc:	d001      	beq.n	8020bd2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8020bce:	2001      	movs	r0, #1
 8020bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020bd2:	2101      	movs	r1, #1
 8020bd4:	f000 f9f8 	bl	8020fc8 <uxr_seq_num_add>
 8020bd8:	4603      	mov	r3, r0
 8020bda:	2001      	movs	r0, #1
 8020bdc:	81e3      	strh	r3, [r4, #14]
 8020bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020be0 <uxr_update_output_stream_heartbeat_timestamp>:
 8020be0:	b570      	push	{r4, r5, r6, lr}
 8020be2:	8a01      	ldrh	r1, [r0, #16]
 8020be4:	4604      	mov	r4, r0
 8020be6:	8a40      	ldrh	r0, [r0, #18]
 8020be8:	4615      	mov	r5, r2
 8020bea:	461e      	mov	r6, r3
 8020bec:	f000 f9f4 	bl	8020fd8 <uxr_seq_num_cmp>
 8020bf0:	2800      	cmp	r0, #0
 8020bf2:	db07      	blt.n	8020c04 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8020bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020bf8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8020bfc:	2000      	movs	r0, #0
 8020bfe:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8020c02:	bd70      	pop	{r4, r5, r6, pc}
 8020c04:	f894 0020 	ldrb.w	r0, [r4, #32]
 8020c08:	b940      	cbnz	r0, 8020c1c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8020c0a:	2301      	movs	r3, #1
 8020c0c:	f884 3020 	strb.w	r3, [r4, #32]
 8020c10:	3564      	adds	r5, #100	@ 0x64
 8020c12:	f146 0600 	adc.w	r6, r6, #0
 8020c16:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8020c1a:	bd70      	pop	{r4, r5, r6, pc}
 8020c1c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8020c20:	4295      	cmp	r5, r2
 8020c22:	eb76 0303 	sbcs.w	r3, r6, r3
 8020c26:	db04      	blt.n	8020c32 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8020c28:	1c43      	adds	r3, r0, #1
 8020c2a:	2001      	movs	r0, #1
 8020c2c:	f884 3020 	strb.w	r3, [r4, #32]
 8020c30:	e7ee      	b.n	8020c10 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020c32:	2000      	movs	r0, #0
 8020c34:	e7ec      	b.n	8020c10 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020c36:	bf00      	nop

08020c38 <uxr_begin_output_nack_buffer_it>:
 8020c38:	8a40      	ldrh	r0, [r0, #18]
 8020c3a:	4770      	bx	lr

08020c3c <uxr_next_reliable_nack_buffer_to_send>:
 8020c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c40:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8020c44:	b197      	cbz	r7, 8020c6c <uxr_next_reliable_nack_buffer_to_send+0x30>
 8020c46:	4680      	mov	r8, r0
 8020c48:	460d      	mov	r5, r1
 8020c4a:	4616      	mov	r6, r2
 8020c4c:	461c      	mov	r4, r3
 8020c4e:	8818      	ldrh	r0, [r3, #0]
 8020c50:	2101      	movs	r1, #1
 8020c52:	f000 f9b9 	bl	8020fc8 <uxr_seq_num_add>
 8020c56:	8020      	strh	r0, [r4, #0]
 8020c58:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8020c5c:	f000 f9bc 	bl	8020fd8 <uxr_seq_num_cmp>
 8020c60:	2800      	cmp	r0, #0
 8020c62:	dd06      	ble.n	8020c72 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8020c64:	2300      	movs	r3, #0
 8020c66:	461f      	mov	r7, r3
 8020c68:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8020c6c:	4638      	mov	r0, r7
 8020c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c72:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8020c76:	8820      	ldrh	r0, [r4, #0]
 8020c78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020c7c:	fbb0 f3f2 	udiv	r3, r0, r2
 8020c80:	fbb1 fcf2 	udiv	ip, r1, r2
 8020c84:	fb02 0313 	mls	r3, r2, r3, r0
 8020c88:	b29b      	uxth	r3, r3
 8020c8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8020c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8020c92:	f10c 0c04 	add.w	ip, ip, #4
 8020c96:	4463      	add	r3, ip
 8020c98:	602b      	str	r3, [r5, #0]
 8020c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8020c9e:	4463      	add	r3, ip
 8020ca0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020ca4:	6033      	str	r3, [r6, #0]
 8020ca6:	f898 200c 	ldrb.w	r2, [r8, #12]
 8020caa:	429a      	cmp	r2, r3
 8020cac:	d0d0      	beq.n	8020c50 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8020cae:	e7dd      	b.n	8020c6c <uxr_next_reliable_nack_buffer_to_send+0x30>

08020cb0 <uxr_process_acknack>:
 8020cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020cb2:	4604      	mov	r4, r0
 8020cb4:	460e      	mov	r6, r1
 8020cb6:	4610      	mov	r0, r2
 8020cb8:	2101      	movs	r1, #1
 8020cba:	f000 f989 	bl	8020fd0 <uxr_seq_num_sub>
 8020cbe:	8a61      	ldrh	r1, [r4, #18]
 8020cc0:	f000 f986 	bl	8020fd0 <uxr_seq_num_sub>
 8020cc4:	b1c8      	cbz	r0, 8020cfa <uxr_process_acknack+0x4a>
 8020cc6:	4605      	mov	r5, r0
 8020cc8:	2700      	movs	r7, #0
 8020cca:	2101      	movs	r1, #1
 8020ccc:	8a60      	ldrh	r0, [r4, #18]
 8020cce:	f000 f97b 	bl	8020fc8 <uxr_seq_num_add>
 8020cd2:	8923      	ldrh	r3, [r4, #8]
 8020cd4:	6862      	ldr	r2, [r4, #4]
 8020cd6:	3701      	adds	r7, #1
 8020cd8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8020cdc:	6821      	ldr	r1, [r4, #0]
 8020cde:	42bd      	cmp	r5, r7
 8020ce0:	8260      	strh	r0, [r4, #18]
 8020ce2:	fbb0 fef3 	udiv	lr, r0, r3
 8020ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8020cea:	fb03 031e 	mls	r3, r3, lr, r0
 8020cee:	b29b      	uxth	r3, r3
 8020cf0:	fb02 f303 	mul.w	r3, r2, r3
 8020cf4:	f841 c003 	str.w	ip, [r1, r3]
 8020cf8:	d1e7      	bne.n	8020cca <uxr_process_acknack+0x1a>
 8020cfa:	3e00      	subs	r6, #0
 8020cfc:	f04f 0300 	mov.w	r3, #0
 8020d00:	bf18      	it	ne
 8020d02:	2601      	movne	r6, #1
 8020d04:	f884 3020 	strb.w	r3, [r4, #32]
 8020d08:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8020d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020d0e:	bf00      	nop

08020d10 <uxr_is_output_up_to_date>:
 8020d10:	8a01      	ldrh	r1, [r0, #16]
 8020d12:	8a40      	ldrh	r0, [r0, #18]
 8020d14:	b508      	push	{r3, lr}
 8020d16:	f000 f95f 	bl	8020fd8 <uxr_seq_num_cmp>
 8020d1a:	fab0 f080 	clz	r0, r0
 8020d1e:	0940      	lsrs	r0, r0, #5
 8020d20:	bd08      	pop	{r3, pc}
 8020d22:	bf00      	nop

08020d24 <get_available_free_slots>:
 8020d24:	8901      	ldrh	r1, [r0, #8]
 8020d26:	b1e1      	cbz	r1, 8020d62 <get_available_free_slots+0x3e>
 8020d28:	6843      	ldr	r3, [r0, #4]
 8020d2a:	f04f 0c00 	mov.w	ip, #0
 8020d2e:	b530      	push	{r4, r5, lr}
 8020d30:	fbb3 fef1 	udiv	lr, r3, r1
 8020d34:	6805      	ldr	r5, [r0, #0]
 8020d36:	4662      	mov	r2, ip
 8020d38:	7b04      	ldrb	r4, [r0, #12]
 8020d3a:	4660      	mov	r0, ip
 8020d3c:	f10c 0c01 	add.w	ip, ip, #1
 8020d40:	fbb2 f3f1 	udiv	r3, r2, r1
 8020d44:	fb01 2313 	mls	r3, r1, r3, r2
 8020d48:	fa1f f28c 	uxth.w	r2, ip
 8020d4c:	b29b      	uxth	r3, r3
 8020d4e:	fb0e f303 	mul.w	r3, lr, r3
 8020d52:	58eb      	ldr	r3, [r5, r3]
 8020d54:	429c      	cmp	r4, r3
 8020d56:	d101      	bne.n	8020d5c <get_available_free_slots+0x38>
 8020d58:	3001      	adds	r0, #1
 8020d5a:	b280      	uxth	r0, r0
 8020d5c:	428a      	cmp	r2, r1
 8020d5e:	d3ed      	bcc.n	8020d3c <get_available_free_slots+0x18>
 8020d60:	bd30      	pop	{r4, r5, pc}
 8020d62:	4608      	mov	r0, r1
 8020d64:	4770      	bx	lr
 8020d66:	bf00      	nop

08020d68 <uxr_buffer_request_data>:
 8020d68:	b530      	push	{r4, r5, lr}
 8020d6a:	b095      	sub	sp, #84	@ 0x54
 8020d6c:	4604      	mov	r4, r0
 8020d6e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8020d70:	9303      	str	r3, [sp, #12]
 8020d72:	2d00      	cmp	r5, #0
 8020d74:	f88d 301c 	strb.w	r3, [sp, #28]
 8020d78:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8020d7c:	f04f 0200 	mov.w	r2, #0
 8020d80:	bf14      	ite	ne
 8020d82:	2101      	movne	r1, #1
 8020d84:	4611      	moveq	r1, r2
 8020d86:	f88d 201d 	strb.w	r2, [sp, #29]
 8020d8a:	f88d 201e 	strb.w	r2, [sp, #30]
 8020d8e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8020d92:	d021      	beq.n	8020dd8 <uxr_buffer_request_data+0x70>
 8020d94:	686b      	ldr	r3, [r5, #4]
 8020d96:	2210      	movs	r2, #16
 8020d98:	6829      	ldr	r1, [r5, #0]
 8020d9a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020d9e:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8020da2:	2308      	movs	r3, #8
 8020da4:	2100      	movs	r1, #0
 8020da6:	4620      	mov	r0, r4
 8020da8:	e9cd 3100 	strd	r3, r1, [sp]
 8020dac:	ab0c      	add	r3, sp, #48	@ 0x30
 8020dae:	9905      	ldr	r1, [sp, #20]
 8020db0:	f7f7 fc92 	bl	80186d8 <uxr_prepare_stream_to_write_submessage>
 8020db4:	b918      	cbnz	r0, 8020dbe <uxr_buffer_request_data+0x56>
 8020db6:	4604      	mov	r4, r0
 8020db8:	4620      	mov	r0, r4
 8020dba:	b015      	add	sp, #84	@ 0x54
 8020dbc:	bd30      	pop	{r4, r5, pc}
 8020dbe:	9904      	ldr	r1, [sp, #16]
 8020dc0:	aa06      	add	r2, sp, #24
 8020dc2:	4620      	mov	r0, r4
 8020dc4:	f7f7 fdc4 	bl	8018950 <uxr_init_base_object_request>
 8020dc8:	4604      	mov	r4, r0
 8020dca:	a906      	add	r1, sp, #24
 8020dcc:	a80c      	add	r0, sp, #48	@ 0x30
 8020dce:	f7f9 fd89 	bl	801a8e4 <uxr_serialize_READ_DATA_Payload>
 8020dd2:	4620      	mov	r0, r4
 8020dd4:	b015      	add	sp, #84	@ 0x54
 8020dd6:	bd30      	pop	{r4, r5, pc}
 8020dd8:	2208      	movs	r2, #8
 8020dda:	e7e2      	b.n	8020da2 <uxr_buffer_request_data+0x3a>

08020ddc <uxr_buffer_cancel_data>:
 8020ddc:	b510      	push	{r4, lr}
 8020dde:	2300      	movs	r3, #0
 8020de0:	b094      	sub	sp, #80	@ 0x50
 8020de2:	4604      	mov	r4, r0
 8020de4:	9205      	str	r2, [sp, #20]
 8020de6:	9301      	str	r3, [sp, #4]
 8020de8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020dec:	f88d 301e 	strb.w	r3, [sp, #30]
 8020df0:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8020df4:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020df8:	2308      	movs	r3, #8
 8020dfa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8020dfe:	2201      	movs	r2, #1
 8020e00:	9300      	str	r3, [sp, #0]
 8020e02:	ab0c      	add	r3, sp, #48	@ 0x30
 8020e04:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8020e08:	2210      	movs	r2, #16
 8020e0a:	f7f7 fc65 	bl	80186d8 <uxr_prepare_stream_to_write_submessage>
 8020e0e:	b918      	cbnz	r0, 8020e18 <uxr_buffer_cancel_data+0x3c>
 8020e10:	4604      	mov	r4, r0
 8020e12:	4620      	mov	r0, r4
 8020e14:	b014      	add	sp, #80	@ 0x50
 8020e16:	bd10      	pop	{r4, pc}
 8020e18:	9905      	ldr	r1, [sp, #20]
 8020e1a:	aa06      	add	r2, sp, #24
 8020e1c:	4620      	mov	r0, r4
 8020e1e:	f7f7 fd97 	bl	8018950 <uxr_init_base_object_request>
 8020e22:	4604      	mov	r4, r0
 8020e24:	a906      	add	r1, sp, #24
 8020e26:	a80c      	add	r0, sp, #48	@ 0x30
 8020e28:	f7f9 fd5c 	bl	801a8e4 <uxr_serialize_READ_DATA_Payload>
 8020e2c:	4620      	mov	r0, r4
 8020e2e:	b014      	add	sp, #80	@ 0x50
 8020e30:	bd10      	pop	{r4, pc}
 8020e32:	bf00      	nop

08020e34 <read_submessage_format>:
 8020e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020e38:	b095      	sub	sp, #84	@ 0x54
 8020e3a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8020e3e:	b113      	cbz	r3, 8020e46 <read_submessage_format+0x12>
 8020e40:	b015      	add	sp, #84	@ 0x54
 8020e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020e46:	4606      	mov	r6, r0
 8020e48:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8020e4a:	460c      	mov	r4, r1
 8020e4c:	4615      	mov	r5, r2
 8020e4e:	9004      	str	r0, [sp, #16]
 8020e50:	4699      	mov	r9, r3
 8020e52:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020e54:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8020e58:	9005      	str	r0, [sp, #20]
 8020e5a:	a80c      	add	r0, sp, #48	@ 0x30
 8020e5c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8020e60:	1a52      	subs	r2, r2, r1
 8020e62:	f7f3 f9ef 	bl	8014244 <ucdr_init_buffer>
 8020e66:	a80c      	add	r0, sp, #48	@ 0x30
 8020e68:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020e6c:	f7f3 f9be 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 8020e70:	69e2      	ldr	r2, [r4, #28]
 8020e72:	b19a      	cbz	r2, 8020e9c <read_submessage_format+0x68>
 8020e74:	f1b8 0f07 	cmp.w	r8, #7
 8020e78:	f882 9014 	strb.w	r9, [r2, #20]
 8020e7c:	d040      	beq.n	8020f00 <read_submessage_format+0xcc>
 8020e7e:	f1b8 0f08 	cmp.w	r8, #8
 8020e82:	d02e      	beq.n	8020ee2 <read_submessage_format+0xae>
 8020e84:	f1b8 0f06 	cmp.w	r8, #6
 8020e88:	d011      	beq.n	8020eae <read_submessage_format+0x7a>
 8020e8a:	2301      	movs	r3, #1
 8020e8c:	7513      	strb	r3, [r2, #20]
 8020e8e:	4629      	mov	r1, r5
 8020e90:	4620      	mov	r0, r4
 8020e92:	f7f3 fa2b 	bl	80142ec <ucdr_advance_buffer>
 8020e96:	b015      	add	sp, #84	@ 0x54
 8020e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020e9c:	f1b8 0f07 	cmp.w	r8, #7
 8020ea0:	d02e      	beq.n	8020f00 <read_submessage_format+0xcc>
 8020ea2:	f1b8 0f08 	cmp.w	r8, #8
 8020ea6:	d01c      	beq.n	8020ee2 <read_submessage_format+0xae>
 8020ea8:	f1b8 0f06 	cmp.w	r8, #6
 8020eac:	d1ef      	bne.n	8020e8e <read_submessage_format+0x5a>
 8020eae:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8020eb2:	f1b8 0f00 	cmp.w	r8, #0
 8020eb6:	d011      	beq.n	8020edc <read_submessage_format+0xa8>
 8020eb8:	ab0c      	add	r3, sp, #48	@ 0x30
 8020eba:	9501      	str	r5, [sp, #4]
 8020ebc:	463a      	mov	r2, r7
 8020ebe:	4630      	mov	r0, r6
 8020ec0:	9300      	str	r3, [sp, #0]
 8020ec2:	2306      	movs	r3, #6
 8020ec4:	f88d 3016 	strb.w	r3, [sp, #22]
 8020ec8:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8020ecc:	9302      	str	r3, [sp, #8]
 8020ece:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8020ed2:	47c0      	blx	r8
 8020ed4:	2301      	movs	r3, #1
 8020ed6:	69e2      	ldr	r2, [r4, #28]
 8020ed8:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020edc:	2a00      	cmp	r2, #0
 8020ede:	d1d4      	bne.n	8020e8a <read_submessage_format+0x56>
 8020ee0:	e7d5      	b.n	8020e8e <read_submessage_format+0x5a>
 8020ee2:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	d0f8      	beq.n	8020edc <read_submessage_format+0xa8>
 8020eea:	a80c      	add	r0, sp, #48	@ 0x30
 8020eec:	a906      	add	r1, sp, #24
 8020eee:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020ef2:	f7f9 fdd1 	bl	801aa98 <uxr_deserialize_SampleIdentity>
 8020ef6:	b9a0      	cbnz	r0, 8020f22 <read_submessage_format+0xee>
 8020ef8:	69e2      	ldr	r2, [r4, #28]
 8020efa:	2a00      	cmp	r2, #0
 8020efc:	d1c5      	bne.n	8020e8a <read_submessage_format+0x56>
 8020efe:	e7c6      	b.n	8020e8e <read_submessage_format+0x5a>
 8020f00:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8020f04:	b13b      	cbz	r3, 8020f16 <read_submessage_format+0xe2>
 8020f06:	a906      	add	r1, sp, #24
 8020f08:	a80c      	add	r0, sp, #48	@ 0x30
 8020f0a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020f0e:	f7f9 fa73 	bl	801a3f8 <uxr_deserialize_BaseObjectRequest>
 8020f12:	bb60      	cbnz	r0, 8020f6e <read_submessage_format+0x13a>
 8020f14:	69e2      	ldr	r2, [r4, #28]
 8020f16:	68a3      	ldr	r3, [r4, #8]
 8020f18:	442b      	add	r3, r5
 8020f1a:	60a3      	str	r3, [r4, #8]
 8020f1c:	2a00      	cmp	r2, #0
 8020f1e:	d1b4      	bne.n	8020e8a <read_submessage_format+0x56>
 8020f20:	e7b5      	b.n	8020e8e <read_submessage_format+0x5a>
 8020f22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f24:	a80c      	add	r0, sp, #48	@ 0x30
 8020f26:	eba8 0803 	sub.w	r8, r8, r3
 8020f2a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020f2e:	44a8      	add	r8, r5
 8020f30:	1a52      	subs	r2, r2, r1
 8020f32:	f7f3 f987 	bl	8014244 <ucdr_init_buffer>
 8020f36:	a80c      	add	r0, sp, #48	@ 0x30
 8020f38:	fa1f f888 	uxth.w	r8, r8
 8020f3c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020f40:	f7f3 f954 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 8020f44:	ab0c      	add	r3, sp, #48	@ 0x30
 8020f46:	2108      	movs	r1, #8
 8020f48:	f8cd 8004 	str.w	r8, [sp, #4]
 8020f4c:	9300      	str	r3, [sp, #0]
 8020f4e:	463a      	mov	r2, r7
 8020f50:	f88d 1016 	strb.w	r1, [sp, #22]
 8020f54:	ab06      	add	r3, sp, #24
 8020f56:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8020f5a:	4630      	mov	r0, r6
 8020f5c:	9102      	str	r1, [sp, #8]
 8020f5e:	9905      	ldr	r1, [sp, #20]
 8020f60:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8020f64:	47b8      	blx	r7
 8020f66:	2301      	movs	r3, #1
 8020f68:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020f6c:	e7c4      	b.n	8020ef8 <read_submessage_format+0xc4>
 8020f6e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020f72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f74:	a80c      	add	r0, sp, #48	@ 0x30
 8020f76:	1a52      	subs	r2, r2, r1
 8020f78:	eba8 0803 	sub.w	r8, r8, r3
 8020f7c:	f7f3 f962 	bl	8014244 <ucdr_init_buffer>
 8020f80:	a80c      	add	r0, sp, #48	@ 0x30
 8020f82:	44a8      	add	r8, r5
 8020f84:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020f88:	f7f3 f930 	bl	80141ec <ucdr_set_on_full_buffer_callback>
 8020f8c:	ab0c      	add	r3, sp, #48	@ 0x30
 8020f8e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8020f92:	fa1f f888 	uxth.w	r8, r8
 8020f96:	9300      	str	r3, [sp, #0]
 8020f98:	463a      	mov	r2, r7
 8020f9a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8020f9e:	4630      	mov	r0, r6
 8020fa0:	f8cd 8004 	str.w	r8, [sp, #4]
 8020fa4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8020fa8:	2107      	movs	r1, #7
 8020faa:	f88d 1016 	strb.w	r1, [sp, #22]
 8020fae:	b29b      	uxth	r3, r3
 8020fb0:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8020fb4:	9102      	str	r1, [sp, #8]
 8020fb6:	9905      	ldr	r1, [sp, #20]
 8020fb8:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8020fbc:	47b8      	blx	r7
 8020fbe:	2301      	movs	r3, #1
 8020fc0:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020fc4:	e7a6      	b.n	8020f14 <read_submessage_format+0xe0>
 8020fc6:	bf00      	nop

08020fc8 <uxr_seq_num_add>:
 8020fc8:	4408      	add	r0, r1
 8020fca:	b280      	uxth	r0, r0
 8020fcc:	4770      	bx	lr
 8020fce:	bf00      	nop

08020fd0 <uxr_seq_num_sub>:
 8020fd0:	1a40      	subs	r0, r0, r1
 8020fd2:	b280      	uxth	r0, r0
 8020fd4:	4770      	bx	lr
 8020fd6:	bf00      	nop

08020fd8 <uxr_seq_num_cmp>:
 8020fd8:	4288      	cmp	r0, r1
 8020fda:	d011      	beq.n	8021000 <uxr_seq_num_cmp+0x28>
 8020fdc:	d309      	bcc.n	8020ff2 <uxr_seq_num_cmp+0x1a>
 8020fde:	4288      	cmp	r0, r1
 8020fe0:	d910      	bls.n	8021004 <uxr_seq_num_cmp+0x2c>
 8020fe2:	1a40      	subs	r0, r0, r1
 8020fe4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8020fe8:	bfd4      	ite	le
 8020fea:	2001      	movle	r0, #1
 8020fec:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8020ff0:	4770      	bx	lr
 8020ff2:	1a0b      	subs	r3, r1, r0
 8020ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020ff8:	daf1      	bge.n	8020fde <uxr_seq_num_cmp+0x6>
 8020ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020ffe:	4770      	bx	lr
 8021000:	2000      	movs	r0, #0
 8021002:	4770      	bx	lr
 8021004:	2001      	movs	r0, #1
 8021006:	4770      	bx	lr

08021008 <rcl_get_default_domain_id>:
 8021008:	b530      	push	{r4, r5, lr}
 802100a:	2300      	movs	r3, #0
 802100c:	b083      	sub	sp, #12
 802100e:	9300      	str	r3, [sp, #0]
 8021010:	b1d0      	cbz	r0, 8021048 <rcl_get_default_domain_id+0x40>
 8021012:	4604      	mov	r4, r0
 8021014:	4669      	mov	r1, sp
 8021016:	4815      	ldr	r0, [pc, #84]	@ (802106c <rcl_get_default_domain_id+0x64>)
 8021018:	f7fc feda 	bl	801ddd0 <rcutils_get_env>
 802101c:	4602      	mov	r2, r0
 802101e:	b110      	cbz	r0, 8021026 <rcl_get_default_domain_id+0x1e>
 8021020:	2001      	movs	r0, #1
 8021022:	b003      	add	sp, #12
 8021024:	bd30      	pop	{r4, r5, pc}
 8021026:	9b00      	ldr	r3, [sp, #0]
 8021028:	b18b      	cbz	r3, 802104e <rcl_get_default_domain_id+0x46>
 802102a:	7818      	ldrb	r0, [r3, #0]
 802102c:	2800      	cmp	r0, #0
 802102e:	d0f8      	beq.n	8021022 <rcl_get_default_domain_id+0x1a>
 8021030:	a901      	add	r1, sp, #4
 8021032:	4618      	mov	r0, r3
 8021034:	9201      	str	r2, [sp, #4]
 8021036:	f000 ff4b 	bl	8021ed0 <strtoul>
 802103a:	4605      	mov	r5, r0
 802103c:	b150      	cbz	r0, 8021054 <rcl_get_default_domain_id+0x4c>
 802103e:	1c43      	adds	r3, r0, #1
 8021040:	d00d      	beq.n	802105e <rcl_get_default_domain_id+0x56>
 8021042:	2000      	movs	r0, #0
 8021044:	6025      	str	r5, [r4, #0]
 8021046:	e7ec      	b.n	8021022 <rcl_get_default_domain_id+0x1a>
 8021048:	200b      	movs	r0, #11
 802104a:	b003      	add	sp, #12
 802104c:	bd30      	pop	{r4, r5, pc}
 802104e:	4618      	mov	r0, r3
 8021050:	b003      	add	sp, #12
 8021052:	bd30      	pop	{r4, r5, pc}
 8021054:	9b01      	ldr	r3, [sp, #4]
 8021056:	781b      	ldrb	r3, [r3, #0]
 8021058:	2b00      	cmp	r3, #0
 802105a:	d0f2      	beq.n	8021042 <rcl_get_default_domain_id+0x3a>
 802105c:	e7e0      	b.n	8021020 <rcl_get_default_domain_id+0x18>
 802105e:	f001 fab5 	bl	80225cc <__errno>
 8021062:	6803      	ldr	r3, [r0, #0]
 8021064:	2b22      	cmp	r3, #34	@ 0x22
 8021066:	d1ec      	bne.n	8021042 <rcl_get_default_domain_id+0x3a>
 8021068:	e7da      	b.n	8021020 <rcl_get_default_domain_id+0x18>
 802106a:	bf00      	nop
 802106c:	0802598c 	.word	0x0802598c

08021070 <rcl_expand_topic_name>:
 8021070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021074:	b08d      	sub	sp, #52	@ 0x34
 8021076:	4698      	mov	r8, r3
 8021078:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802107a:	9207      	str	r2, [sp, #28]
 802107c:	2b00      	cmp	r3, #0
 802107e:	bf18      	it	ne
 8021080:	f1b8 0f00 	cmpne.w	r8, #0
 8021084:	bf0c      	ite	eq
 8021086:	2301      	moveq	r3, #1
 8021088:	2300      	movne	r3, #0
 802108a:	2a00      	cmp	r2, #0
 802108c:	bf08      	it	eq
 802108e:	f043 0301 	orreq.w	r3, r3, #1
 8021092:	2900      	cmp	r1, #0
 8021094:	bf08      	it	eq
 8021096:	f043 0301 	orreq.w	r3, r3, #1
 802109a:	2b00      	cmp	r3, #0
 802109c:	d13d      	bne.n	802111a <rcl_expand_topic_name+0xaa>
 802109e:	fab0 f280 	clz	r2, r0
 80210a2:	4604      	mov	r4, r0
 80210a4:	0952      	lsrs	r2, r2, #5
 80210a6:	2800      	cmp	r0, #0
 80210a8:	d037      	beq.n	802111a <rcl_expand_topic_name+0xaa>
 80210aa:	460f      	mov	r7, r1
 80210ac:	a90b      	add	r1, sp, #44	@ 0x2c
 80210ae:	f000 fa51 	bl	8021554 <rcl_validate_topic_name>
 80210b2:	4605      	mov	r5, r0
 80210b4:	bb68      	cbnz	r0, 8021112 <rcl_expand_topic_name+0xa2>
 80210b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d137      	bne.n	802112c <rcl_expand_topic_name+0xbc>
 80210bc:	4602      	mov	r2, r0
 80210be:	a90b      	add	r1, sp, #44	@ 0x2c
 80210c0:	4638      	mov	r0, r7
 80210c2:	f7fd fb1b 	bl	801e6fc <rmw_validate_node_name>
 80210c6:	bb68      	cbnz	r0, 8021124 <rcl_expand_topic_name+0xb4>
 80210c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	d133      	bne.n	8021136 <rcl_expand_topic_name+0xc6>
 80210ce:	462a      	mov	r2, r5
 80210d0:	a90b      	add	r1, sp, #44	@ 0x2c
 80210d2:	9807      	ldr	r0, [sp, #28]
 80210d4:	f7fd faf4 	bl	801e6c0 <rmw_validate_namespace>
 80210d8:	bb20      	cbnz	r0, 8021124 <rcl_expand_topic_name+0xb4>
 80210da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80210dc:	2d00      	cmp	r5, #0
 80210de:	f040 80a2 	bne.w	8021226 <rcl_expand_topic_name+0x1b6>
 80210e2:	217b      	movs	r1, #123	@ 0x7b
 80210e4:	4620      	mov	r0, r4
 80210e6:	f001 f98f 	bl	8022408 <strchr>
 80210ea:	7823      	ldrb	r3, [r4, #0]
 80210ec:	4681      	mov	r9, r0
 80210ee:	bb20      	cbnz	r0, 802113a <rcl_expand_topic_name+0xca>
 80210f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80210f2:	d122      	bne.n	802113a <rcl_expand_topic_name+0xca>
 80210f4:	ab19      	add	r3, sp, #100	@ 0x64
 80210f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80210fa:	ab16      	add	r3, sp, #88	@ 0x58
 80210fc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021100:	4620      	mov	r0, r4
 8021102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021104:	f7fc ffc6 	bl	801e094 <rcutils_strdup>
 8021108:	2800      	cmp	r0, #0
 802110a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802110c:	bf08      	it	eq
 802110e:	250a      	moveq	r5, #10
 8021110:	6018      	str	r0, [r3, #0]
 8021112:	4628      	mov	r0, r5
 8021114:	b00d      	add	sp, #52	@ 0x34
 8021116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802111a:	250b      	movs	r5, #11
 802111c:	4628      	mov	r0, r5
 802111e:	b00d      	add	sp, #52	@ 0x34
 8021120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021124:	f7f9 fd72 	bl	801ac0c <rcl_convert_rmw_ret_to_rcl_ret>
 8021128:	4605      	mov	r5, r0
 802112a:	e7f2      	b.n	8021112 <rcl_expand_topic_name+0xa2>
 802112c:	2567      	movs	r5, #103	@ 0x67
 802112e:	4628      	mov	r0, r5
 8021130:	b00d      	add	sp, #52	@ 0x34
 8021132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021136:	25c9      	movs	r5, #201	@ 0xc9
 8021138:	e7eb      	b.n	8021112 <rcl_expand_topic_name+0xa2>
 802113a:	2b7e      	cmp	r3, #126	@ 0x7e
 802113c:	d075      	beq.n	802122a <rcl_expand_topic_name+0x1ba>
 802113e:	f1b9 0f00 	cmp.w	r9, #0
 8021142:	f000 80c2 	beq.w	80212ca <rcl_expand_topic_name+0x25a>
 8021146:	2300      	movs	r3, #0
 8021148:	46a2      	mov	sl, r4
 802114a:	461e      	mov	r6, r3
 802114c:	9508      	str	r5, [sp, #32]
 802114e:	4655      	mov	r5, sl
 8021150:	9409      	str	r4, [sp, #36]	@ 0x24
 8021152:	46b2      	mov	sl, r6
 8021154:	464c      	mov	r4, r9
 8021156:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802115a:	2c00      	cmp	r4, #0
 802115c:	f000 80ae 	beq.w	80212bc <rcl_expand_topic_name+0x24c>
 8021160:	217d      	movs	r1, #125	@ 0x7d
 8021162:	4628      	mov	r0, r5
 8021164:	f001 f950 	bl	8022408 <strchr>
 8021168:	eba0 0904 	sub.w	r9, r0, r4
 802116c:	4621      	mov	r1, r4
 802116e:	4869      	ldr	r0, [pc, #420]	@ (8021314 <rcl_expand_topic_name+0x2a4>)
 8021170:	f109 0601 	add.w	r6, r9, #1
 8021174:	4632      	mov	r2, r6
 8021176:	f001 f954 	bl	8022422 <strncmp>
 802117a:	2800      	cmp	r0, #0
 802117c:	d051      	beq.n	8021222 <rcl_expand_topic_name+0x1b2>
 802117e:	4632      	mov	r2, r6
 8021180:	4621      	mov	r1, r4
 8021182:	4865      	ldr	r0, [pc, #404]	@ (8021318 <rcl_expand_topic_name+0x2a8>)
 8021184:	f001 f94d 	bl	8022422 <strncmp>
 8021188:	b128      	cbz	r0, 8021196 <rcl_expand_topic_name+0x126>
 802118a:	4632      	mov	r2, r6
 802118c:	4621      	mov	r1, r4
 802118e:	4863      	ldr	r0, [pc, #396]	@ (802131c <rcl_expand_topic_name+0x2ac>)
 8021190:	f001 f947 	bl	8022422 <strncmp>
 8021194:	bb38      	cbnz	r0, 80211e6 <rcl_expand_topic_name+0x176>
 8021196:	46d9      	mov	r9, fp
 8021198:	ab18      	add	r3, sp, #96	@ 0x60
 802119a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802119e:	ab16      	add	r3, sp, #88	@ 0x58
 80211a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80211a4:	4620      	mov	r0, r4
 80211a6:	4631      	mov	r1, r6
 80211a8:	cb0c      	ldmia	r3, {r2, r3}
 80211aa:	f7fc ff95 	bl	801e0d8 <rcutils_strndup>
 80211ae:	4604      	mov	r4, r0
 80211b0:	2800      	cmp	r0, #0
 80211b2:	f000 80a3 	beq.w	80212fc <rcl_expand_topic_name+0x28c>
 80211b6:	464a      	mov	r2, r9
 80211b8:	4628      	mov	r0, r5
 80211ba:	ab16      	add	r3, sp, #88	@ 0x58
 80211bc:	4621      	mov	r1, r4
 80211be:	f7fc fe69 	bl	801de94 <rcutils_repl_str>
 80211c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80211c4:	4605      	mov	r5, r0
 80211c6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80211c8:	4620      	mov	r0, r4
 80211ca:	4798      	blx	r3
 80211cc:	4650      	mov	r0, sl
 80211ce:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80211d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80211d2:	4798      	blx	r3
 80211d4:	2d00      	cmp	r5, #0
 80211d6:	d06c      	beq.n	80212b2 <rcl_expand_topic_name+0x242>
 80211d8:	217b      	movs	r1, #123	@ 0x7b
 80211da:	4628      	mov	r0, r5
 80211dc:	f001 f914 	bl	8022408 <strchr>
 80211e0:	46aa      	mov	sl, r5
 80211e2:	4604      	mov	r4, r0
 80211e4:	e7b9      	b.n	802115a <rcl_expand_topic_name+0xea>
 80211e6:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80211ea:	1c61      	adds	r1, r4, #1
 80211ec:	4640      	mov	r0, r8
 80211ee:	f7fd f88b 	bl	801e308 <rcutils_string_map_getn>
 80211f2:	4681      	mov	r9, r0
 80211f4:	2800      	cmp	r0, #0
 80211f6:	d1cf      	bne.n	8021198 <rcl_expand_topic_name+0x128>
 80211f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80211fa:	aa18      	add	r2, sp, #96	@ 0x60
 80211fc:	2569      	movs	r5, #105	@ 0x69
 80211fe:	6018      	str	r0, [r3, #0]
 8021200:	ab16      	add	r3, sp, #88	@ 0x58
 8021202:	ca07      	ldmia	r2, {r0, r1, r2}
 8021204:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8021208:	4631      	mov	r1, r6
 802120a:	4620      	mov	r0, r4
 802120c:	cb0c      	ldmia	r3, {r2, r3}
 802120e:	f7fc ff63 	bl	801e0d8 <rcutils_strndup>
 8021212:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8021214:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021216:	4798      	blx	r3
 8021218:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802121a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802121c:	4650      	mov	r0, sl
 802121e:	4798      	blx	r3
 8021220:	e777      	b.n	8021112 <rcl_expand_topic_name+0xa2>
 8021222:	46b9      	mov	r9, r7
 8021224:	e7b8      	b.n	8021198 <rcl_expand_topic_name+0x128>
 8021226:	25ca      	movs	r5, #202	@ 0xca
 8021228:	e773      	b.n	8021112 <rcl_expand_topic_name+0xa2>
 802122a:	9e07      	ldr	r6, [sp, #28]
 802122c:	4630      	mov	r0, r6
 802122e:	f7df f861 	bl	80002f4 <strlen>
 8021232:	4a3b      	ldr	r2, [pc, #236]	@ (8021320 <rcl_expand_topic_name+0x2b0>)
 8021234:	4b3b      	ldr	r3, [pc, #236]	@ (8021324 <rcl_expand_topic_name+0x2b4>)
 8021236:	9603      	str	r6, [sp, #12]
 8021238:	2801      	cmp	r0, #1
 802123a:	bf18      	it	ne
 802123c:	4613      	movne	r3, r2
 802123e:	9704      	str	r7, [sp, #16]
 8021240:	9302      	str	r3, [sp, #8]
 8021242:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8021244:	9300      	str	r3, [sp, #0]
 8021246:	1c63      	adds	r3, r4, #1
 8021248:	9305      	str	r3, [sp, #20]
 802124a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802124e:	9301      	str	r3, [sp, #4]
 8021250:	ab16      	add	r3, sp, #88	@ 0x58
 8021252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021254:	f7fc fde4 	bl	801de20 <rcutils_format_string_limit>
 8021258:	4606      	mov	r6, r0
 802125a:	b350      	cbz	r0, 80212b2 <rcl_expand_topic_name+0x242>
 802125c:	f1b9 0f00 	cmp.w	r9, #0
 8021260:	d005      	beq.n	802126e <rcl_expand_topic_name+0x1fe>
 8021262:	217b      	movs	r1, #123	@ 0x7b
 8021264:	46b2      	mov	sl, r6
 8021266:	f001 f8cf 	bl	8022408 <strchr>
 802126a:	4681      	mov	r9, r0
 802126c:	e76e      	b.n	802114c <rcl_expand_topic_name+0xdc>
 802126e:	7833      	ldrb	r3, [r6, #0]
 8021270:	2b2f      	cmp	r3, #47	@ 0x2f
 8021272:	d01b      	beq.n	80212ac <rcl_expand_topic_name+0x23c>
 8021274:	9c07      	ldr	r4, [sp, #28]
 8021276:	4620      	mov	r0, r4
 8021278:	f7df f83c 	bl	80002f4 <strlen>
 802127c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021280:	4a29      	ldr	r2, [pc, #164]	@ (8021328 <rcl_expand_topic_name+0x2b8>)
 8021282:	9301      	str	r3, [sp, #4]
 8021284:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8021286:	9604      	str	r6, [sp, #16]
 8021288:	9300      	str	r3, [sp, #0]
 802128a:	4b28      	ldr	r3, [pc, #160]	@ (802132c <rcl_expand_topic_name+0x2bc>)
 802128c:	9403      	str	r4, [sp, #12]
 802128e:	2801      	cmp	r0, #1
 8021290:	bf18      	it	ne
 8021292:	4613      	movne	r3, r2
 8021294:	9302      	str	r3, [sp, #8]
 8021296:	ab16      	add	r3, sp, #88	@ 0x58
 8021298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802129a:	f7fc fdc1 	bl	801de20 <rcutils_format_string_limit>
 802129e:	4603      	mov	r3, r0
 80212a0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80212a2:	4630      	mov	r0, r6
 80212a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80212a6:	461e      	mov	r6, r3
 80212a8:	4790      	blx	r2
 80212aa:	b116      	cbz	r6, 80212b2 <rcl_expand_topic_name+0x242>
 80212ac:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80212ae:	601e      	str	r6, [r3, #0]
 80212b0:	e72f      	b.n	8021112 <rcl_expand_topic_name+0xa2>
 80212b2:	2300      	movs	r3, #0
 80212b4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80212b6:	250a      	movs	r5, #10
 80212b8:	6013      	str	r3, [r2, #0]
 80212ba:	e72a      	b.n	8021112 <rcl_expand_topic_name+0xa2>
 80212bc:	4653      	mov	r3, sl
 80212be:	4656      	mov	r6, sl
 80212c0:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	d1d2      	bne.n	802126e <rcl_expand_topic_name+0x1fe>
 80212c8:	7823      	ldrb	r3, [r4, #0]
 80212ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80212cc:	d01e      	beq.n	802130c <rcl_expand_topic_name+0x29c>
 80212ce:	9e07      	ldr	r6, [sp, #28]
 80212d0:	4630      	mov	r0, r6
 80212d2:	f7df f80f 	bl	80002f4 <strlen>
 80212d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80212d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80212dc:	9603      	str	r6, [sp, #12]
 80212de:	9404      	str	r4, [sp, #16]
 80212e0:	e9cd 2300 	strd	r2, r3, [sp]
 80212e4:	4a10      	ldr	r2, [pc, #64]	@ (8021328 <rcl_expand_topic_name+0x2b8>)
 80212e6:	4b11      	ldr	r3, [pc, #68]	@ (802132c <rcl_expand_topic_name+0x2bc>)
 80212e8:	2801      	cmp	r0, #1
 80212ea:	bf18      	it	ne
 80212ec:	4613      	movne	r3, r2
 80212ee:	9302      	str	r3, [sp, #8]
 80212f0:	ab16      	add	r3, sp, #88	@ 0x58
 80212f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80212f4:	f7fc fd94 	bl	801de20 <rcutils_format_string_limit>
 80212f8:	4606      	mov	r6, r0
 80212fa:	e7d6      	b.n	80212aa <rcl_expand_topic_name+0x23a>
 80212fc:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8021300:	4650      	mov	r0, sl
 8021302:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021304:	6014      	str	r4, [r2, #0]
 8021306:	250a      	movs	r5, #10
 8021308:	4798      	blx	r3
 802130a:	e702      	b.n	8021112 <rcl_expand_topic_name+0xa2>
 802130c:	2300      	movs	r3, #0
 802130e:	461e      	mov	r6, r3
 8021310:	e7cc      	b.n	80212ac <rcl_expand_topic_name+0x23c>
 8021312:	bf00      	nop
 8021314:	080259a4 	.word	0x080259a4
 8021318:	080259ac 	.word	0x080259ac
 802131c:	080259b4 	.word	0x080259b4
 8021320:	0802599c 	.word	0x0802599c
 8021324:	08024954 	.word	0x08024954
 8021328:	080252e8 	.word	0x080252e8
 802132c:	08024964 	.word	0x08024964

08021330 <rcl_get_default_topic_name_substitutions>:
 8021330:	2800      	cmp	r0, #0
 8021332:	bf0c      	ite	eq
 8021334:	200b      	moveq	r0, #11
 8021336:	2000      	movne	r0, #0
 8021338:	4770      	bx	lr
 802133a:	bf00      	nop

0802133c <rcl_get_zero_initialized_guard_condition>:
 802133c:	4a03      	ldr	r2, [pc, #12]	@ (802134c <rcl_get_zero_initialized_guard_condition+0x10>)
 802133e:	4603      	mov	r3, r0
 8021340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021344:	e883 0003 	stmia.w	r3, {r0, r1}
 8021348:	4618      	mov	r0, r3
 802134a:	4770      	bx	lr
 802134c:	080259c0 	.word	0x080259c0

08021350 <rcl_guard_condition_init>:
 8021350:	b082      	sub	sp, #8
 8021352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021354:	b087      	sub	sp, #28
 8021356:	4604      	mov	r4, r0
 8021358:	460d      	mov	r5, r1
 802135a:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 802135e:	f10d 0c04 	add.w	ip, sp, #4
 8021362:	e9ce 2300 	strd	r2, r3, [lr]
 8021366:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802136a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802136e:	f8de 3000 	ldr.w	r3, [lr]
 8021372:	a801      	add	r0, sp, #4
 8021374:	f8cc 3000 	str.w	r3, [ip]
 8021378:	f7f4 f902 	bl	8015580 <rcutils_allocator_is_valid>
 802137c:	b354      	cbz	r4, 80213d4 <rcl_guard_condition_init+0x84>
 802137e:	f080 0301 	eor.w	r3, r0, #1
 8021382:	b2db      	uxtb	r3, r3
 8021384:	bb33      	cbnz	r3, 80213d4 <rcl_guard_condition_init+0x84>
 8021386:	6866      	ldr	r6, [r4, #4]
 8021388:	b9ee      	cbnz	r6, 80213c6 <rcl_guard_condition_init+0x76>
 802138a:	b31d      	cbz	r5, 80213d4 <rcl_guard_condition_init+0x84>
 802138c:	4628      	mov	r0, r5
 802138e:	f7f9 fc5b 	bl	801ac48 <rcl_context_is_valid>
 8021392:	b308      	cbz	r0, 80213d8 <rcl_guard_condition_init+0x88>
 8021394:	9b01      	ldr	r3, [sp, #4]
 8021396:	201c      	movs	r0, #28
 8021398:	9905      	ldr	r1, [sp, #20]
 802139a:	4798      	blx	r3
 802139c:	4607      	mov	r7, r0
 802139e:	6060      	str	r0, [r4, #4]
 80213a0:	b310      	cbz	r0, 80213e8 <rcl_guard_condition_init+0x98>
 80213a2:	6828      	ldr	r0, [r5, #0]
 80213a4:	3028      	adds	r0, #40	@ 0x28
 80213a6:	f000 faab 	bl	8021900 <rmw_create_guard_condition>
 80213aa:	6038      	str	r0, [r7, #0]
 80213ac:	6860      	ldr	r0, [r4, #4]
 80213ae:	6807      	ldr	r7, [r0, #0]
 80213b0:	b1a7      	cbz	r7, 80213dc <rcl_guard_condition_init+0x8c>
 80213b2:	2301      	movs	r3, #1
 80213b4:	ac01      	add	r4, sp, #4
 80213b6:	f100 0708 	add.w	r7, r0, #8
 80213ba:	7103      	strb	r3, [r0, #4]
 80213bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80213be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80213c0:	6823      	ldr	r3, [r4, #0]
 80213c2:	603b      	str	r3, [r7, #0]
 80213c4:	e000      	b.n	80213c8 <rcl_guard_condition_init+0x78>
 80213c6:	2664      	movs	r6, #100	@ 0x64
 80213c8:	4630      	mov	r0, r6
 80213ca:	b007      	add	sp, #28
 80213cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80213d0:	b002      	add	sp, #8
 80213d2:	4770      	bx	lr
 80213d4:	260b      	movs	r6, #11
 80213d6:	e7f7      	b.n	80213c8 <rcl_guard_condition_init+0x78>
 80213d8:	2665      	movs	r6, #101	@ 0x65
 80213da:	e7f5      	b.n	80213c8 <rcl_guard_condition_init+0x78>
 80213dc:	9b02      	ldr	r3, [sp, #8]
 80213de:	2601      	movs	r6, #1
 80213e0:	9905      	ldr	r1, [sp, #20]
 80213e2:	4798      	blx	r3
 80213e4:	6067      	str	r7, [r4, #4]
 80213e6:	e7ef      	b.n	80213c8 <rcl_guard_condition_init+0x78>
 80213e8:	260a      	movs	r6, #10
 80213ea:	e7ed      	b.n	80213c8 <rcl_guard_condition_init+0x78>

080213ec <rcl_guard_condition_init_from_rmw>:
 80213ec:	b082      	sub	sp, #8
 80213ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80213f2:	b086      	sub	sp, #24
 80213f4:	4604      	mov	r4, r0
 80213f6:	460e      	mov	r6, r1
 80213f8:	4615      	mov	r5, r2
 80213fa:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80213fe:	f10d 0e04 	add.w	lr, sp, #4
 8021402:	f84c 3f04 	str.w	r3, [ip, #4]!
 8021406:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 802140a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 802140e:	f8dc 3000 	ldr.w	r3, [ip]
 8021412:	a801      	add	r0, sp, #4
 8021414:	f8ce 3000 	str.w	r3, [lr]
 8021418:	f7f4 f8b2 	bl	8015580 <rcutils_allocator_is_valid>
 802141c:	f080 0301 	eor.w	r3, r0, #1
 8021420:	b2db      	uxtb	r3, r3
 8021422:	bb3b      	cbnz	r3, 8021474 <rcl_guard_condition_init_from_rmw+0x88>
 8021424:	b334      	cbz	r4, 8021474 <rcl_guard_condition_init_from_rmw+0x88>
 8021426:	f8d4 8004 	ldr.w	r8, [r4, #4]
 802142a:	f1b8 0f00 	cmp.w	r8, #0
 802142e:	d11a      	bne.n	8021466 <rcl_guard_condition_init_from_rmw+0x7a>
 8021430:	b305      	cbz	r5, 8021474 <rcl_guard_condition_init_from_rmw+0x88>
 8021432:	4628      	mov	r0, r5
 8021434:	f7f9 fc08 	bl	801ac48 <rcl_context_is_valid>
 8021438:	b1f0      	cbz	r0, 8021478 <rcl_guard_condition_init_from_rmw+0x8c>
 802143a:	9b01      	ldr	r3, [sp, #4]
 802143c:	201c      	movs	r0, #28
 802143e:	9905      	ldr	r1, [sp, #20]
 8021440:	4798      	blx	r3
 8021442:	4607      	mov	r7, r0
 8021444:	6060      	str	r0, [r4, #4]
 8021446:	b320      	cbz	r0, 8021492 <rcl_guard_condition_init_from_rmw+0xa6>
 8021448:	b1c6      	cbz	r6, 802147c <rcl_guard_condition_init_from_rmw+0x90>
 802144a:	6006      	str	r6, [r0, #0]
 802144c:	f880 8004 	strb.w	r8, [r0, #4]
 8021450:	ac01      	add	r4, sp, #4
 8021452:	f107 0c08 	add.w	ip, r7, #8
 8021456:	2500      	movs	r5, #0
 8021458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802145a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802145e:	6823      	ldr	r3, [r4, #0]
 8021460:	f8cc 3000 	str.w	r3, [ip]
 8021464:	e000      	b.n	8021468 <rcl_guard_condition_init_from_rmw+0x7c>
 8021466:	2564      	movs	r5, #100	@ 0x64
 8021468:	4628      	mov	r0, r5
 802146a:	b006      	add	sp, #24
 802146c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021470:	b002      	add	sp, #8
 8021472:	4770      	bx	lr
 8021474:	250b      	movs	r5, #11
 8021476:	e7f7      	b.n	8021468 <rcl_guard_condition_init_from_rmw+0x7c>
 8021478:	2565      	movs	r5, #101	@ 0x65
 802147a:	e7f5      	b.n	8021468 <rcl_guard_condition_init_from_rmw+0x7c>
 802147c:	6828      	ldr	r0, [r5, #0]
 802147e:	3028      	adds	r0, #40	@ 0x28
 8021480:	f000 fa3e 	bl	8021900 <rmw_create_guard_condition>
 8021484:	6038      	str	r0, [r7, #0]
 8021486:	6867      	ldr	r7, [r4, #4]
 8021488:	683e      	ldr	r6, [r7, #0]
 802148a:	b126      	cbz	r6, 8021496 <rcl_guard_condition_init_from_rmw+0xaa>
 802148c:	2301      	movs	r3, #1
 802148e:	713b      	strb	r3, [r7, #4]
 8021490:	e7de      	b.n	8021450 <rcl_guard_condition_init_from_rmw+0x64>
 8021492:	250a      	movs	r5, #10
 8021494:	e7e8      	b.n	8021468 <rcl_guard_condition_init_from_rmw+0x7c>
 8021496:	9b02      	ldr	r3, [sp, #8]
 8021498:	4638      	mov	r0, r7
 802149a:	9905      	ldr	r1, [sp, #20]
 802149c:	2501      	movs	r5, #1
 802149e:	4798      	blx	r3
 80214a0:	6066      	str	r6, [r4, #4]
 80214a2:	e7e1      	b.n	8021468 <rcl_guard_condition_init_from_rmw+0x7c>

080214a4 <rcl_guard_condition_fini>:
 80214a4:	b570      	push	{r4, r5, r6, lr}
 80214a6:	b082      	sub	sp, #8
 80214a8:	b1f0      	cbz	r0, 80214e8 <rcl_guard_condition_fini+0x44>
 80214aa:	6843      	ldr	r3, [r0, #4]
 80214ac:	4604      	mov	r4, r0
 80214ae:	b163      	cbz	r3, 80214ca <rcl_guard_condition_fini+0x26>
 80214b0:	6818      	ldr	r0, [r3, #0]
 80214b2:	68de      	ldr	r6, [r3, #12]
 80214b4:	6999      	ldr	r1, [r3, #24]
 80214b6:	b160      	cbz	r0, 80214d2 <rcl_guard_condition_fini+0x2e>
 80214b8:	791d      	ldrb	r5, [r3, #4]
 80214ba:	b965      	cbnz	r5, 80214d6 <rcl_guard_condition_fini+0x32>
 80214bc:	4618      	mov	r0, r3
 80214be:	47b0      	blx	r6
 80214c0:	2300      	movs	r3, #0
 80214c2:	4628      	mov	r0, r5
 80214c4:	6063      	str	r3, [r4, #4]
 80214c6:	b002      	add	sp, #8
 80214c8:	bd70      	pop	{r4, r5, r6, pc}
 80214ca:	461d      	mov	r5, r3
 80214cc:	4628      	mov	r0, r5
 80214ce:	b002      	add	sp, #8
 80214d0:	bd70      	pop	{r4, r5, r6, pc}
 80214d2:	4605      	mov	r5, r0
 80214d4:	e7f2      	b.n	80214bc <rcl_guard_condition_fini+0x18>
 80214d6:	9101      	str	r1, [sp, #4]
 80214d8:	f000 fa28 	bl	802192c <rmw_destroy_guard_condition>
 80214dc:	1e05      	subs	r5, r0, #0
 80214de:	6863      	ldr	r3, [r4, #4]
 80214e0:	9901      	ldr	r1, [sp, #4]
 80214e2:	bf18      	it	ne
 80214e4:	2501      	movne	r5, #1
 80214e6:	e7e9      	b.n	80214bc <rcl_guard_condition_fini+0x18>
 80214e8:	250b      	movs	r5, #11
 80214ea:	4628      	mov	r0, r5
 80214ec:	b002      	add	sp, #8
 80214ee:	bd70      	pop	{r4, r5, r6, pc}

080214f0 <rcl_guard_condition_get_default_options>:
 80214f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214f2:	b087      	sub	sp, #28
 80214f4:	4606      	mov	r6, r0
 80214f6:	4c0b      	ldr	r4, [pc, #44]	@ (8021524 <rcl_guard_condition_get_default_options+0x34>)
 80214f8:	4668      	mov	r0, sp
 80214fa:	f7f4 f833 	bl	8015564 <rcutils_get_default_allocator>
 80214fe:	46ee      	mov	lr, sp
 8021500:	46a4      	mov	ip, r4
 8021502:	4625      	mov	r5, r4
 8021504:	4634      	mov	r4, r6
 8021506:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802150a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802150e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021510:	f8de 7000 	ldr.w	r7, [lr]
 8021514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021516:	4630      	mov	r0, r6
 8021518:	f8cc 7000 	str.w	r7, [ip]
 802151c:	6027      	str	r7, [r4, #0]
 802151e:	b007      	add	sp, #28
 8021520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021522:	bf00      	nop
 8021524:	240696f8 	.word	0x240696f8

08021528 <rcl_trigger_guard_condition>:
 8021528:	b148      	cbz	r0, 802153e <rcl_trigger_guard_condition+0x16>
 802152a:	b508      	push	{r3, lr}
 802152c:	6843      	ldr	r3, [r0, #4]
 802152e:	b143      	cbz	r3, 8021542 <rcl_trigger_guard_condition+0x1a>
 8021530:	6818      	ldr	r0, [r3, #0]
 8021532:	f000 fa0f 	bl	8021954 <rmw_trigger_guard_condition>
 8021536:	3800      	subs	r0, #0
 8021538:	bf18      	it	ne
 802153a:	2001      	movne	r0, #1
 802153c:	bd08      	pop	{r3, pc}
 802153e:	200b      	movs	r0, #11
 8021540:	4770      	bx	lr
 8021542:	200b      	movs	r0, #11
 8021544:	bd08      	pop	{r3, pc}
 8021546:	bf00      	nop

08021548 <rcl_guard_condition_get_rmw_handle>:
 8021548:	b110      	cbz	r0, 8021550 <rcl_guard_condition_get_rmw_handle+0x8>
 802154a:	6840      	ldr	r0, [r0, #4]
 802154c:	b100      	cbz	r0, 8021550 <rcl_guard_condition_get_rmw_handle+0x8>
 802154e:	6800      	ldr	r0, [r0, #0]
 8021550:	4770      	bx	lr
 8021552:	bf00      	nop

08021554 <rcl_validate_topic_name>:
 8021554:	2800      	cmp	r0, #0
 8021556:	f000 8089 	beq.w	802166c <rcl_validate_topic_name+0x118>
 802155a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802155e:	460e      	mov	r6, r1
 8021560:	2900      	cmp	r1, #0
 8021562:	f000 8085 	beq.w	8021670 <rcl_validate_topic_name+0x11c>
 8021566:	4604      	mov	r4, r0
 8021568:	4617      	mov	r7, r2
 802156a:	f7de fec3 	bl	80002f4 <strlen>
 802156e:	b1b0      	cbz	r0, 802159e <rcl_validate_topic_name+0x4a>
 8021570:	f894 e000 	ldrb.w	lr, [r4]
 8021574:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80216d8 <rcl_validate_topic_name+0x184>
 8021578:	f81c 300e 	ldrb.w	r3, [ip, lr]
 802157c:	f013 0304 	ands.w	r3, r3, #4
 8021580:	d139      	bne.n	80215f6 <rcl_validate_topic_name+0xa2>
 8021582:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8021586:	f814 2008 	ldrb.w	r2, [r4, r8]
 802158a:	2a2f      	cmp	r2, #47	@ 0x2f
 802158c:	d10f      	bne.n	80215ae <rcl_validate_topic_name+0x5a>
 802158e:	2202      	movs	r2, #2
 8021590:	6032      	str	r2, [r6, #0]
 8021592:	b3a7      	cbz	r7, 80215fe <rcl_validate_topic_name+0xaa>
 8021594:	4618      	mov	r0, r3
 8021596:	f8c7 8000 	str.w	r8, [r7]
 802159a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802159e:	2301      	movs	r3, #1
 80215a0:	6033      	str	r3, [r6, #0]
 80215a2:	b367      	cbz	r7, 80215fe <rcl_validate_topic_name+0xaa>
 80215a4:	2300      	movs	r3, #0
 80215a6:	4618      	mov	r0, r3
 80215a8:	603b      	str	r3, [r7, #0]
 80215aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80215ae:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 80215b2:	461d      	mov	r5, r3
 80215b4:	4619      	mov	r1, r3
 80215b6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80215ba:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 80215be:	f1b9 0f09 	cmp.w	r9, #9
 80215c2:	d91f      	bls.n	8021604 <rcl_validate_topic_name+0xb0>
 80215c4:	f022 0920 	bic.w	r9, r2, #32
 80215c8:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 80215cc:	f1b9 0f19 	cmp.w	r9, #25
 80215d0:	d918      	bls.n	8021604 <rcl_validate_topic_name+0xb0>
 80215d2:	2a5f      	cmp	r2, #95	@ 0x5f
 80215d4:	d024      	beq.n	8021620 <rcl_validate_topic_name+0xcc>
 80215d6:	2a2f      	cmp	r2, #47	@ 0x2f
 80215d8:	d058      	beq.n	802168c <rcl_validate_topic_name+0x138>
 80215da:	2a7e      	cmp	r2, #126	@ 0x7e
 80215dc:	d04a      	beq.n	8021674 <rcl_validate_topic_name+0x120>
 80215de:	2a7b      	cmp	r2, #123	@ 0x7b
 80215e0:	d05b      	beq.n	802169a <rcl_validate_topic_name+0x146>
 80215e2:	2a7d      	cmp	r2, #125	@ 0x7d
 80215e4:	d169      	bne.n	80216ba <rcl_validate_topic_name+0x166>
 80215e6:	2d00      	cmp	r5, #0
 80215e8:	d15c      	bne.n	80216a4 <rcl_validate_topic_name+0x150>
 80215ea:	2305      	movs	r3, #5
 80215ec:	6033      	str	r3, [r6, #0]
 80215ee:	b137      	cbz	r7, 80215fe <rcl_validate_topic_name+0xaa>
 80215f0:	2000      	movs	r0, #0
 80215f2:	6039      	str	r1, [r7, #0]
 80215f4:	e7d9      	b.n	80215aa <rcl_validate_topic_name+0x56>
 80215f6:	2304      	movs	r3, #4
 80215f8:	6033      	str	r3, [r6, #0]
 80215fa:	2f00      	cmp	r7, #0
 80215fc:	d1d2      	bne.n	80215a4 <rcl_validate_topic_name+0x50>
 80215fe:	2000      	movs	r0, #0
 8021600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021604:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021608:	0752      	lsls	r2, r2, #29
 802160a:	d509      	bpl.n	8021620 <rcl_validate_topic_name+0xcc>
 802160c:	2900      	cmp	r1, #0
 802160e:	bf0c      	ite	eq
 8021610:	2200      	moveq	r2, #0
 8021612:	f005 0201 	andne.w	r2, r5, #1
 8021616:	b11a      	cbz	r2, 8021620 <rcl_validate_topic_name+0xcc>
 8021618:	1e4d      	subs	r5, r1, #1
 802161a:	429d      	cmp	r5, r3
 802161c:	d031      	beq.n	8021682 <rcl_validate_topic_name+0x12e>
 802161e:	4615      	mov	r5, r2
 8021620:	3101      	adds	r1, #1
 8021622:	4288      	cmp	r0, r1
 8021624:	d1c7      	bne.n	80215b6 <rcl_validate_topic_name+0x62>
 8021626:	2d00      	cmp	r5, #0
 8021628:	d142      	bne.n	80216b0 <rcl_validate_topic_name+0x15c>
 802162a:	4628      	mov	r0, r5
 802162c:	2301      	movs	r3, #1
 802162e:	e00c      	b.n	802164a <rcl_validate_topic_name+0xf6>
 8021630:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8021634:	d101      	bne.n	802163a <rcl_validate_topic_name+0xe6>
 8021636:	2801      	cmp	r0, #1
 8021638:	d047      	beq.n	80216ca <rcl_validate_topic_name+0x176>
 802163a:	1c5a      	adds	r2, r3, #1
 802163c:	428b      	cmp	r3, r1
 802163e:	f100 0001 	add.w	r0, r0, #1
 8021642:	f104 0401 	add.w	r4, r4, #1
 8021646:	4613      	mov	r3, r2
 8021648:	d22e      	bcs.n	80216a8 <rcl_validate_topic_name+0x154>
 802164a:	4580      	cmp	r8, r0
 802164c:	d0f5      	beq.n	802163a <rcl_validate_topic_name+0xe6>
 802164e:	7822      	ldrb	r2, [r4, #0]
 8021650:	2a2f      	cmp	r2, #47	@ 0x2f
 8021652:	d1ed      	bne.n	8021630 <rcl_validate_topic_name+0xdc>
 8021654:	7862      	ldrb	r2, [r4, #1]
 8021656:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802165a:	0752      	lsls	r2, r2, #29
 802165c:	d5ed      	bpl.n	802163a <rcl_validate_topic_name+0xe6>
 802165e:	2204      	movs	r2, #4
 8021660:	6032      	str	r2, [r6, #0]
 8021662:	2f00      	cmp	r7, #0
 8021664:	d0cb      	beq.n	80215fe <rcl_validate_topic_name+0xaa>
 8021666:	2000      	movs	r0, #0
 8021668:	603b      	str	r3, [r7, #0]
 802166a:	e79e      	b.n	80215aa <rcl_validate_topic_name+0x56>
 802166c:	200b      	movs	r0, #11
 802166e:	4770      	bx	lr
 8021670:	200b      	movs	r0, #11
 8021672:	e79a      	b.n	80215aa <rcl_validate_topic_name+0x56>
 8021674:	2900      	cmp	r1, #0
 8021676:	d0d3      	beq.n	8021620 <rcl_validate_topic_name+0xcc>
 8021678:	2306      	movs	r3, #6
 802167a:	6033      	str	r3, [r6, #0]
 802167c:	2f00      	cmp	r7, #0
 802167e:	d1b7      	bne.n	80215f0 <rcl_validate_topic_name+0x9c>
 8021680:	e7bd      	b.n	80215fe <rcl_validate_topic_name+0xaa>
 8021682:	2309      	movs	r3, #9
 8021684:	6033      	str	r3, [r6, #0]
 8021686:	2f00      	cmp	r7, #0
 8021688:	d1b2      	bne.n	80215f0 <rcl_validate_topic_name+0x9c>
 802168a:	e7b8      	b.n	80215fe <rcl_validate_topic_name+0xaa>
 802168c:	2d00      	cmp	r5, #0
 802168e:	d0c7      	beq.n	8021620 <rcl_validate_topic_name+0xcc>
 8021690:	2308      	movs	r3, #8
 8021692:	6033      	str	r3, [r6, #0]
 8021694:	2f00      	cmp	r7, #0
 8021696:	d1ab      	bne.n	80215f0 <rcl_validate_topic_name+0x9c>
 8021698:	e7b1      	b.n	80215fe <rcl_validate_topic_name+0xaa>
 802169a:	2d00      	cmp	r5, #0
 802169c:	d1f8      	bne.n	8021690 <rcl_validate_topic_name+0x13c>
 802169e:	460b      	mov	r3, r1
 80216a0:	2501      	movs	r5, #1
 80216a2:	e7bd      	b.n	8021620 <rcl_validate_topic_name+0xcc>
 80216a4:	2500      	movs	r5, #0
 80216a6:	e7bb      	b.n	8021620 <rcl_validate_topic_name+0xcc>
 80216a8:	2300      	movs	r3, #0
 80216aa:	4618      	mov	r0, r3
 80216ac:	6033      	str	r3, [r6, #0]
 80216ae:	e77c      	b.n	80215aa <rcl_validate_topic_name+0x56>
 80216b0:	2205      	movs	r2, #5
 80216b2:	6032      	str	r2, [r6, #0]
 80216b4:	2f00      	cmp	r7, #0
 80216b6:	d1d6      	bne.n	8021666 <rcl_validate_topic_name+0x112>
 80216b8:	e7a1      	b.n	80215fe <rcl_validate_topic_name+0xaa>
 80216ba:	2d00      	cmp	r5, #0
 80216bc:	bf14      	ite	ne
 80216be:	2308      	movne	r3, #8
 80216c0:	2303      	moveq	r3, #3
 80216c2:	6033      	str	r3, [r6, #0]
 80216c4:	2f00      	cmp	r7, #0
 80216c6:	d193      	bne.n	80215f0 <rcl_validate_topic_name+0x9c>
 80216c8:	e799      	b.n	80215fe <rcl_validate_topic_name+0xaa>
 80216ca:	2307      	movs	r3, #7
 80216cc:	6033      	str	r3, [r6, #0]
 80216ce:	2f00      	cmp	r7, #0
 80216d0:	d095      	beq.n	80215fe <rcl_validate_topic_name+0xaa>
 80216d2:	2301      	movs	r3, #1
 80216d4:	e7c7      	b.n	8021666 <rcl_validate_topic_name+0x112>
 80216d6:	bf00      	nop
 80216d8:	08025b2a 	.word	0x08025b2a

080216dc <rcutils_string_array_fini>:
 80216dc:	b328      	cbz	r0, 802172a <rcutils_string_array_fini+0x4e>
 80216de:	b570      	push	{r4, r5, r6, lr}
 80216e0:	4604      	mov	r4, r0
 80216e2:	6840      	ldr	r0, [r0, #4]
 80216e4:	b1e0      	cbz	r0, 8021720 <rcutils_string_array_fini+0x44>
 80216e6:	f104 0008 	add.w	r0, r4, #8
 80216ea:	f7f3 ff49 	bl	8015580 <rcutils_allocator_is_valid>
 80216ee:	b1c0      	cbz	r0, 8021722 <rcutils_string_array_fini+0x46>
 80216f0:	6823      	ldr	r3, [r4, #0]
 80216f2:	b1c3      	cbz	r3, 8021726 <rcutils_string_array_fini+0x4a>
 80216f4:	2500      	movs	r5, #0
 80216f6:	6860      	ldr	r0, [r4, #4]
 80216f8:	462e      	mov	r6, r5
 80216fa:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80216fe:	68e3      	ldr	r3, [r4, #12]
 8021700:	69a1      	ldr	r1, [r4, #24]
 8021702:	4798      	blx	r3
 8021704:	e9d4 3000 	ldrd	r3, r0, [r4]
 8021708:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 802170c:	3501      	adds	r5, #1
 802170e:	429d      	cmp	r5, r3
 8021710:	d3f3      	bcc.n	80216fa <rcutils_string_array_fini+0x1e>
 8021712:	68e3      	ldr	r3, [r4, #12]
 8021714:	69a1      	ldr	r1, [r4, #24]
 8021716:	4798      	blx	r3
 8021718:	2300      	movs	r3, #0
 802171a:	4618      	mov	r0, r3
 802171c:	e9c4 3300 	strd	r3, r3, [r4]
 8021720:	bd70      	pop	{r4, r5, r6, pc}
 8021722:	200b      	movs	r0, #11
 8021724:	bd70      	pop	{r4, r5, r6, pc}
 8021726:	6860      	ldr	r0, [r4, #4]
 8021728:	e7f3      	b.n	8021712 <rcutils_string_array_fini+0x36>
 802172a:	200b      	movs	r0, #11
 802172c:	4770      	bx	lr
 802172e:	bf00      	nop

08021730 <on_status>:
 8021730:	b082      	sub	sp, #8
 8021732:	b002      	add	sp, #8
 8021734:	4770      	bx	lr
 8021736:	bf00      	nop

08021738 <on_topic>:
 8021738:	4a23      	ldr	r2, [pc, #140]	@ (80217c8 <on_topic+0x90>)
 802173a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802173e:	6812      	ldr	r2, [r2, #0]
 8021740:	b094      	sub	sp, #80	@ 0x50
 8021742:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021744:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021748:	9113      	str	r1, [sp, #76]	@ 0x4c
 802174a:	9312      	str	r3, [sp, #72]	@ 0x48
 802174c:	b3c2      	cbz	r2, 80217c0 <on_topic+0x88>
 802174e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8021752:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8021756:	e001      	b.n	802175c <on_topic+0x24>
 8021758:	6852      	ldr	r2, [r2, #4]
 802175a:	b38a      	cbz	r2, 80217c0 <on_topic+0x88>
 802175c:	6894      	ldr	r4, [r2, #8]
 802175e:	8aa3      	ldrh	r3, [r4, #20]
 8021760:	428b      	cmp	r3, r1
 8021762:	d1f9      	bne.n	8021758 <on_topic+0x20>
 8021764:	7da3      	ldrb	r3, [r4, #22]
 8021766:	4283      	cmp	r3, r0
 8021768:	d1f6      	bne.n	8021758 <on_topic+0x20>
 802176a:	2248      	movs	r2, #72	@ 0x48
 802176c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8021770:	4668      	mov	r0, sp
 8021772:	f000 ff60 	bl	8022636 <memcpy>
 8021776:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 802177a:	4620      	mov	r0, r4
 802177c:	cb0c      	ldmia	r3, {r2, r3}
 802177e:	f7f4 fbb3 	bl	8015ee8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8021782:	4607      	mov	r7, r0
 8021784:	b1e0      	cbz	r0, 80217c0 <on_topic+0x88>
 8021786:	f8d0 8008 	ldr.w	r8, [r0, #8]
 802178a:	462a      	mov	r2, r5
 802178c:	4630      	mov	r0, r6
 802178e:	f108 0110 	add.w	r1, r8, #16
 8021792:	f7fe fd1f 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 8021796:	b930      	cbnz	r0, 80217a6 <on_topic+0x6e>
 8021798:	4639      	mov	r1, r7
 802179a:	480c      	ldr	r0, [pc, #48]	@ (80217cc <on_topic+0x94>)
 802179c:	b014      	add	sp, #80	@ 0x50
 802179e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80217a2:	f7fd b81b 	b.w	801e7dc <put_memory>
 80217a6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80217aa:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80217ae:	f7f4 f999 	bl	8015ae4 <rmw_uros_epoch_nanos>
 80217b2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80217b6:	2305      	movs	r3, #5
 80217b8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80217bc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80217c0:	b014      	add	sp, #80	@ 0x50
 80217c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217c6:	bf00      	nop
 80217c8:	240693ac 	.word	0x240693ac
 80217cc:	2406939c 	.word	0x2406939c

080217d0 <on_request>:
 80217d0:	4824      	ldr	r0, [pc, #144]	@ (8021864 <on_request+0x94>)
 80217d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80217d6:	6800      	ldr	r0, [r0, #0]
 80217d8:	b094      	sub	sp, #80	@ 0x50
 80217da:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80217dc:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80217e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80217e2:	2800      	cmp	r0, #0
 80217e4:	d03b      	beq.n	802185e <on_request+0x8e>
 80217e6:	461d      	mov	r5, r3
 80217e8:	e001      	b.n	80217ee <on_request+0x1e>
 80217ea:	6840      	ldr	r0, [r0, #4]
 80217ec:	b3b8      	cbz	r0, 802185e <on_request+0x8e>
 80217ee:	6884      	ldr	r4, [r0, #8]
 80217f0:	8b21      	ldrh	r1, [r4, #24]
 80217f2:	4291      	cmp	r1, r2
 80217f4:	d1f9      	bne.n	80217ea <on_request+0x1a>
 80217f6:	2248      	movs	r2, #72	@ 0x48
 80217f8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80217fc:	4668      	mov	r0, sp
 80217fe:	f000 ff1a 	bl	8022636 <memcpy>
 8021802:	f104 0320 	add.w	r3, r4, #32
 8021806:	4620      	mov	r0, r4
 8021808:	cb0c      	ldmia	r3, {r2, r3}
 802180a:	f7f4 fb6d 	bl	8015ee8 <rmw_uxrce_get_static_input_buffer_for_entity>
 802180e:	4680      	mov	r8, r0
 8021810:	b328      	cbz	r0, 802185e <on_request+0x8e>
 8021812:	4630      	mov	r0, r6
 8021814:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8021818:	463a      	mov	r2, r7
 802181a:	f106 0110 	add.w	r1, r6, #16
 802181e:	f7fe fcd9 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 8021822:	b930      	cbnz	r0, 8021832 <on_request+0x62>
 8021824:	4641      	mov	r1, r8
 8021826:	4810      	ldr	r0, [pc, #64]	@ (8021868 <on_request+0x98>)
 8021828:	b014      	add	sp, #80	@ 0x50
 802182a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802182e:	f7fc bfd5 	b.w	801e7dc <put_memory>
 8021832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021834:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8021838:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 802183c:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8021840:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021844:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021848:	e88c 0003 	stmia.w	ip, {r0, r1}
 802184c:	f7f4 f94a 	bl	8015ae4 <rmw_uros_epoch_nanos>
 8021850:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8021854:	2303      	movs	r3, #3
 8021856:	e942 0102 	strd	r0, r1, [r2, #-8]
 802185a:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 802185e:	b014      	add	sp, #80	@ 0x50
 8021860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021864:	2406937c 	.word	0x2406937c
 8021868:	2406939c 	.word	0x2406939c

0802186c <on_reply>:
 802186c:	4822      	ldr	r0, [pc, #136]	@ (80218f8 <on_reply+0x8c>)
 802186e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021872:	6800      	ldr	r0, [r0, #0]
 8021874:	b094      	sub	sp, #80	@ 0x50
 8021876:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021878:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 802187c:	9113      	str	r1, [sp, #76]	@ 0x4c
 802187e:	b3b8      	cbz	r0, 80218f0 <on_reply+0x84>
 8021880:	461d      	mov	r5, r3
 8021882:	e001      	b.n	8021888 <on_reply+0x1c>
 8021884:	6840      	ldr	r0, [r0, #4]
 8021886:	b398      	cbz	r0, 80218f0 <on_reply+0x84>
 8021888:	6884      	ldr	r4, [r0, #8]
 802188a:	8b21      	ldrh	r1, [r4, #24]
 802188c:	4291      	cmp	r1, r2
 802188e:	d1f9      	bne.n	8021884 <on_reply+0x18>
 8021890:	2248      	movs	r2, #72	@ 0x48
 8021892:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8021896:	4668      	mov	r0, sp
 8021898:	f000 fecd 	bl	8022636 <memcpy>
 802189c:	f104 0320 	add.w	r3, r4, #32
 80218a0:	4620      	mov	r0, r4
 80218a2:	cb0c      	ldmia	r3, {r2, r3}
 80218a4:	f7f4 fb20 	bl	8015ee8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80218a8:	4680      	mov	r8, r0
 80218aa:	b308      	cbz	r0, 80218f0 <on_reply+0x84>
 80218ac:	4630      	mov	r0, r6
 80218ae:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80218b2:	463a      	mov	r2, r7
 80218b4:	f106 0110 	add.w	r1, r6, #16
 80218b8:	f7fe fc8c 	bl	80201d4 <ucdr_deserialize_array_uint8_t>
 80218bc:	b930      	cbnz	r0, 80218cc <on_reply+0x60>
 80218be:	4641      	mov	r1, r8
 80218c0:	480e      	ldr	r0, [pc, #56]	@ (80218fc <on_reply+0x90>)
 80218c2:	b014      	add	sp, #80	@ 0x50
 80218c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80218c8:	f7fc bf88 	b.w	801e7dc <put_memory>
 80218cc:	2200      	movs	r2, #0
 80218ce:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80218d2:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80218d6:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 80218da:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 80218de:	f7f4 f901 	bl	8015ae4 <rmw_uros_epoch_nanos>
 80218e2:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80218e6:	2304      	movs	r3, #4
 80218e8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80218ec:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80218f0:	b014      	add	sp, #80	@ 0x50
 80218f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218f6:	bf00      	nop
 80218f8:	24064a90 	.word	0x24064a90
 80218fc:	2406939c 	.word	0x2406939c

08021900 <rmw_create_guard_condition>:
 8021900:	b538      	push	{r3, r4, r5, lr}
 8021902:	4605      	mov	r5, r0
 8021904:	4808      	ldr	r0, [pc, #32]	@ (8021928 <rmw_create_guard_condition+0x28>)
 8021906:	f7fc ff59 	bl	801e7bc <get_memory>
 802190a:	4603      	mov	r3, r0
 802190c:	b148      	cbz	r0, 8021922 <rmw_create_guard_condition+0x22>
 802190e:	6884      	ldr	r4, [r0, #8]
 8021910:	2300      	movs	r3, #0
 8021912:	61e5      	str	r5, [r4, #28]
 8021914:	7423      	strb	r3, [r4, #16]
 8021916:	f7fc ffb9 	bl	801e88c <rmw_get_implementation_identifier>
 802191a:	f104 0314 	add.w	r3, r4, #20
 802191e:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8021922:	4618      	mov	r0, r3
 8021924:	bd38      	pop	{r3, r4, r5, pc}
 8021926:	bf00      	nop
 8021928:	2406933c 	.word	0x2406933c

0802192c <rmw_destroy_guard_condition>:
 802192c:	b508      	push	{r3, lr}
 802192e:	4b08      	ldr	r3, [pc, #32]	@ (8021950 <rmw_destroy_guard_condition+0x24>)
 8021930:	6819      	ldr	r1, [r3, #0]
 8021932:	b911      	cbnz	r1, 802193a <rmw_destroy_guard_condition+0xe>
 8021934:	e00a      	b.n	802194c <rmw_destroy_guard_condition+0x20>
 8021936:	6849      	ldr	r1, [r1, #4]
 8021938:	b141      	cbz	r1, 802194c <rmw_destroy_guard_condition+0x20>
 802193a:	688b      	ldr	r3, [r1, #8]
 802193c:	3314      	adds	r3, #20
 802193e:	4298      	cmp	r0, r3
 8021940:	d1f9      	bne.n	8021936 <rmw_destroy_guard_condition+0xa>
 8021942:	4803      	ldr	r0, [pc, #12]	@ (8021950 <rmw_destroy_guard_condition+0x24>)
 8021944:	f7fc ff4a 	bl	801e7dc <put_memory>
 8021948:	2000      	movs	r0, #0
 802194a:	bd08      	pop	{r3, pc}
 802194c:	2001      	movs	r0, #1
 802194e:	bd08      	pop	{r3, pc}
 8021950:	2406933c 	.word	0x2406933c

08021954 <rmw_trigger_guard_condition>:
 8021954:	b160      	cbz	r0, 8021970 <rmw_trigger_guard_condition+0x1c>
 8021956:	b510      	push	{r4, lr}
 8021958:	4604      	mov	r4, r0
 802195a:	6800      	ldr	r0, [r0, #0]
 802195c:	f7f4 fcd8 	bl	8016310 <is_uxrce_rmw_identifier_valid>
 8021960:	b908      	cbnz	r0, 8021966 <rmw_trigger_guard_condition+0x12>
 8021962:	2001      	movs	r0, #1
 8021964:	bd10      	pop	{r4, pc}
 8021966:	6863      	ldr	r3, [r4, #4]
 8021968:	2201      	movs	r2, #1
 802196a:	2000      	movs	r0, #0
 802196c:	741a      	strb	r2, [r3, #16]
 802196e:	bd10      	pop	{r4, pc}
 8021970:	2001      	movs	r0, #1
 8021972:	4770      	bx	lr

08021974 <rosidl_runtime_c__String__init>:
 8021974:	b510      	push	{r4, lr}
 8021976:	4604      	mov	r4, r0
 8021978:	b086      	sub	sp, #24
 802197a:	b170      	cbz	r0, 802199a <rosidl_runtime_c__String__init+0x26>
 802197c:	a801      	add	r0, sp, #4
 802197e:	f7f3 fdf1 	bl	8015564 <rcutils_get_default_allocator>
 8021982:	9b01      	ldr	r3, [sp, #4]
 8021984:	9905      	ldr	r1, [sp, #20]
 8021986:	2001      	movs	r0, #1
 8021988:	4798      	blx	r3
 802198a:	6020      	str	r0, [r4, #0]
 802198c:	b128      	cbz	r0, 802199a <rosidl_runtime_c__String__init+0x26>
 802198e:	2100      	movs	r1, #0
 8021990:	2201      	movs	r2, #1
 8021992:	7001      	strb	r1, [r0, #0]
 8021994:	4610      	mov	r0, r2
 8021996:	e9c4 1201 	strd	r1, r2, [r4, #4]
 802199a:	b006      	add	sp, #24
 802199c:	bd10      	pop	{r4, pc}
 802199e:	bf00      	nop

080219a0 <rosidl_runtime_c__String__fini>:
 80219a0:	b320      	cbz	r0, 80219ec <rosidl_runtime_c__String__fini+0x4c>
 80219a2:	6803      	ldr	r3, [r0, #0]
 80219a4:	b510      	push	{r4, lr}
 80219a6:	4604      	mov	r4, r0
 80219a8:	b086      	sub	sp, #24
 80219aa:	b173      	cbz	r3, 80219ca <rosidl_runtime_c__String__fini+0x2a>
 80219ac:	6883      	ldr	r3, [r0, #8]
 80219ae:	b1f3      	cbz	r3, 80219ee <rosidl_runtime_c__String__fini+0x4e>
 80219b0:	a801      	add	r0, sp, #4
 80219b2:	f7f3 fdd7 	bl	8015564 <rcutils_get_default_allocator>
 80219b6:	9b02      	ldr	r3, [sp, #8]
 80219b8:	9905      	ldr	r1, [sp, #20]
 80219ba:	6820      	ldr	r0, [r4, #0]
 80219bc:	4798      	blx	r3
 80219be:	2300      	movs	r3, #0
 80219c0:	e9c4 3300 	strd	r3, r3, [r4]
 80219c4:	60a3      	str	r3, [r4, #8]
 80219c6:	b006      	add	sp, #24
 80219c8:	bd10      	pop	{r4, pc}
 80219ca:	6843      	ldr	r3, [r0, #4]
 80219cc:	b9db      	cbnz	r3, 8021a06 <rosidl_runtime_c__String__fini+0x66>
 80219ce:	6883      	ldr	r3, [r0, #8]
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d0f8      	beq.n	80219c6 <rosidl_runtime_c__String__fini+0x26>
 80219d4:	4b12      	ldr	r3, [pc, #72]	@ (8021a20 <rosidl_runtime_c__String__fini+0x80>)
 80219d6:	2251      	movs	r2, #81	@ 0x51
 80219d8:	2101      	movs	r1, #1
 80219da:	4812      	ldr	r0, [pc, #72]	@ (8021a24 <rosidl_runtime_c__String__fini+0x84>)
 80219dc:	681b      	ldr	r3, [r3, #0]
 80219de:	68db      	ldr	r3, [r3, #12]
 80219e0:	f000 fb8e 	bl	8022100 <fwrite>
 80219e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80219e8:	f000 f84a 	bl	8021a80 <exit>
 80219ec:	4770      	bx	lr
 80219ee:	4b0c      	ldr	r3, [pc, #48]	@ (8021a20 <rosidl_runtime_c__String__fini+0x80>)
 80219f0:	224c      	movs	r2, #76	@ 0x4c
 80219f2:	2101      	movs	r1, #1
 80219f4:	480c      	ldr	r0, [pc, #48]	@ (8021a28 <rosidl_runtime_c__String__fini+0x88>)
 80219f6:	681b      	ldr	r3, [r3, #0]
 80219f8:	68db      	ldr	r3, [r3, #12]
 80219fa:	f000 fb81 	bl	8022100 <fwrite>
 80219fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021a02:	f000 f83d 	bl	8021a80 <exit>
 8021a06:	4b06      	ldr	r3, [pc, #24]	@ (8021a20 <rosidl_runtime_c__String__fini+0x80>)
 8021a08:	224e      	movs	r2, #78	@ 0x4e
 8021a0a:	2101      	movs	r1, #1
 8021a0c:	4807      	ldr	r0, [pc, #28]	@ (8021a2c <rosidl_runtime_c__String__fini+0x8c>)
 8021a0e:	681b      	ldr	r3, [r3, #0]
 8021a10:	68db      	ldr	r3, [r3, #12]
 8021a12:	f000 fb75 	bl	8022100 <fwrite>
 8021a16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021a1a:	f000 f831 	bl	8021a80 <exit>
 8021a1e:	bf00      	nop
 8021a20:	24001424 	.word	0x24001424
 8021a24:	08025a68 	.word	0x08025a68
 8021a28:	080259c8 	.word	0x080259c8
 8021a2c:	08025a18 	.word	0x08025a18

08021a30 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8021a30:	3800      	subs	r0, #0
 8021a32:	bf18      	it	ne
 8021a34:	2001      	movne	r0, #1
 8021a36:	4770      	bx	lr

08021a38 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8021a38:	4770      	bx	lr
 8021a3a:	bf00      	nop

08021a3c <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8021a3c:	3800      	subs	r0, #0
 8021a3e:	bf18      	it	ne
 8021a40:	2001      	movne	r0, #1
 8021a42:	4770      	bx	lr

08021a44 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 8021a44:	4770      	bx	lr
 8021a46:	bf00      	nop

08021a48 <calloc>:
 8021a48:	4b02      	ldr	r3, [pc, #8]	@ (8021a54 <calloc+0xc>)
 8021a4a:	460a      	mov	r2, r1
 8021a4c:	4601      	mov	r1, r0
 8021a4e:	6818      	ldr	r0, [r3, #0]
 8021a50:	f000 b802 	b.w	8021a58 <_calloc_r>
 8021a54:	24001424 	.word	0x24001424

08021a58 <_calloc_r>:
 8021a58:	b570      	push	{r4, r5, r6, lr}
 8021a5a:	fba1 5402 	umull	r5, r4, r1, r2
 8021a5e:	b93c      	cbnz	r4, 8021a70 <_calloc_r+0x18>
 8021a60:	4629      	mov	r1, r5
 8021a62:	f000 f899 	bl	8021b98 <_malloc_r>
 8021a66:	4606      	mov	r6, r0
 8021a68:	b928      	cbnz	r0, 8021a76 <_calloc_r+0x1e>
 8021a6a:	2600      	movs	r6, #0
 8021a6c:	4630      	mov	r0, r6
 8021a6e:	bd70      	pop	{r4, r5, r6, pc}
 8021a70:	220c      	movs	r2, #12
 8021a72:	6002      	str	r2, [r0, #0]
 8021a74:	e7f9      	b.n	8021a6a <_calloc_r+0x12>
 8021a76:	462a      	mov	r2, r5
 8021a78:	4621      	mov	r1, r4
 8021a7a:	f000 fcbd 	bl	80223f8 <memset>
 8021a7e:	e7f5      	b.n	8021a6c <_calloc_r+0x14>

08021a80 <exit>:
 8021a80:	b508      	push	{r3, lr}
 8021a82:	4b06      	ldr	r3, [pc, #24]	@ (8021a9c <exit+0x1c>)
 8021a84:	4604      	mov	r4, r0
 8021a86:	b113      	cbz	r3, 8021a8e <exit+0xe>
 8021a88:	2100      	movs	r1, #0
 8021a8a:	f3af 8000 	nop.w
 8021a8e:	4b04      	ldr	r3, [pc, #16]	@ (8021aa0 <exit+0x20>)
 8021a90:	681b      	ldr	r3, [r3, #0]
 8021a92:	b103      	cbz	r3, 8021a96 <exit+0x16>
 8021a94:	4798      	blx	r3
 8021a96:	4620      	mov	r0, r4
 8021a98:	f7e0 fdda 	bl	8002650 <_exit>
 8021a9c:	00000000 	.word	0x00000000
 8021aa0:	2406984c 	.word	0x2406984c

08021aa4 <getenv>:
 8021aa4:	b507      	push	{r0, r1, r2, lr}
 8021aa6:	4b04      	ldr	r3, [pc, #16]	@ (8021ab8 <getenv+0x14>)
 8021aa8:	4601      	mov	r1, r0
 8021aaa:	aa01      	add	r2, sp, #4
 8021aac:	6818      	ldr	r0, [r3, #0]
 8021aae:	f000 f805 	bl	8021abc <_findenv_r>
 8021ab2:	b003      	add	sp, #12
 8021ab4:	f85d fb04 	ldr.w	pc, [sp], #4
 8021ab8:	24001424 	.word	0x24001424

08021abc <_findenv_r>:
 8021abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ac0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8021b30 <_findenv_r+0x74>
 8021ac4:	4606      	mov	r6, r0
 8021ac6:	4689      	mov	r9, r1
 8021ac8:	4617      	mov	r7, r2
 8021aca:	f000 fde1 	bl	8022690 <__env_lock>
 8021ace:	f8da 4000 	ldr.w	r4, [sl]
 8021ad2:	b134      	cbz	r4, 8021ae2 <_findenv_r+0x26>
 8021ad4:	464b      	mov	r3, r9
 8021ad6:	4698      	mov	r8, r3
 8021ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021adc:	b13a      	cbz	r2, 8021aee <_findenv_r+0x32>
 8021ade:	2a3d      	cmp	r2, #61	@ 0x3d
 8021ae0:	d1f9      	bne.n	8021ad6 <_findenv_r+0x1a>
 8021ae2:	4630      	mov	r0, r6
 8021ae4:	f000 fdda 	bl	802269c <__env_unlock>
 8021ae8:	2000      	movs	r0, #0
 8021aea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021aee:	eba8 0809 	sub.w	r8, r8, r9
 8021af2:	46a3      	mov	fp, r4
 8021af4:	f854 0b04 	ldr.w	r0, [r4], #4
 8021af8:	2800      	cmp	r0, #0
 8021afa:	d0f2      	beq.n	8021ae2 <_findenv_r+0x26>
 8021afc:	4642      	mov	r2, r8
 8021afe:	4649      	mov	r1, r9
 8021b00:	f000 fc8f 	bl	8022422 <strncmp>
 8021b04:	2800      	cmp	r0, #0
 8021b06:	d1f4      	bne.n	8021af2 <_findenv_r+0x36>
 8021b08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021b0c:	eb03 0508 	add.w	r5, r3, r8
 8021b10:	f813 3008 	ldrb.w	r3, [r3, r8]
 8021b14:	2b3d      	cmp	r3, #61	@ 0x3d
 8021b16:	d1ec      	bne.n	8021af2 <_findenv_r+0x36>
 8021b18:	f8da 3000 	ldr.w	r3, [sl]
 8021b1c:	ebab 0303 	sub.w	r3, fp, r3
 8021b20:	109b      	asrs	r3, r3, #2
 8021b22:	4630      	mov	r0, r6
 8021b24:	603b      	str	r3, [r7, #0]
 8021b26:	f000 fdb9 	bl	802269c <__env_unlock>
 8021b2a:	1c68      	adds	r0, r5, #1
 8021b2c:	e7dd      	b.n	8021aea <_findenv_r+0x2e>
 8021b2e:	bf00      	nop
 8021b30:	24000000 	.word	0x24000000

08021b34 <malloc>:
 8021b34:	4b02      	ldr	r3, [pc, #8]	@ (8021b40 <malloc+0xc>)
 8021b36:	4601      	mov	r1, r0
 8021b38:	6818      	ldr	r0, [r3, #0]
 8021b3a:	f000 b82d 	b.w	8021b98 <_malloc_r>
 8021b3e:	bf00      	nop
 8021b40:	24001424 	.word	0x24001424

08021b44 <free>:
 8021b44:	4b02      	ldr	r3, [pc, #8]	@ (8021b50 <free+0xc>)
 8021b46:	4601      	mov	r1, r0
 8021b48:	6818      	ldr	r0, [r3, #0]
 8021b4a:	f000 bdad 	b.w	80226a8 <_free_r>
 8021b4e:	bf00      	nop
 8021b50:	24001424 	.word	0x24001424

08021b54 <sbrk_aligned>:
 8021b54:	b570      	push	{r4, r5, r6, lr}
 8021b56:	4e0f      	ldr	r6, [pc, #60]	@ (8021b94 <sbrk_aligned+0x40>)
 8021b58:	460c      	mov	r4, r1
 8021b5a:	6831      	ldr	r1, [r6, #0]
 8021b5c:	4605      	mov	r5, r0
 8021b5e:	b911      	cbnz	r1, 8021b66 <sbrk_aligned+0x12>
 8021b60:	f000 fd12 	bl	8022588 <_sbrk_r>
 8021b64:	6030      	str	r0, [r6, #0]
 8021b66:	4621      	mov	r1, r4
 8021b68:	4628      	mov	r0, r5
 8021b6a:	f000 fd0d 	bl	8022588 <_sbrk_r>
 8021b6e:	1c43      	adds	r3, r0, #1
 8021b70:	d103      	bne.n	8021b7a <sbrk_aligned+0x26>
 8021b72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021b76:	4620      	mov	r0, r4
 8021b78:	bd70      	pop	{r4, r5, r6, pc}
 8021b7a:	1cc4      	adds	r4, r0, #3
 8021b7c:	f024 0403 	bic.w	r4, r4, #3
 8021b80:	42a0      	cmp	r0, r4
 8021b82:	d0f8      	beq.n	8021b76 <sbrk_aligned+0x22>
 8021b84:	1a21      	subs	r1, r4, r0
 8021b86:	4628      	mov	r0, r5
 8021b88:	f000 fcfe 	bl	8022588 <_sbrk_r>
 8021b8c:	3001      	adds	r0, #1
 8021b8e:	d1f2      	bne.n	8021b76 <sbrk_aligned+0x22>
 8021b90:	e7ef      	b.n	8021b72 <sbrk_aligned+0x1e>
 8021b92:	bf00      	nop
 8021b94:	2406970c 	.word	0x2406970c

08021b98 <_malloc_r>:
 8021b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b9c:	1ccd      	adds	r5, r1, #3
 8021b9e:	f025 0503 	bic.w	r5, r5, #3
 8021ba2:	3508      	adds	r5, #8
 8021ba4:	2d0c      	cmp	r5, #12
 8021ba6:	bf38      	it	cc
 8021ba8:	250c      	movcc	r5, #12
 8021baa:	2d00      	cmp	r5, #0
 8021bac:	4606      	mov	r6, r0
 8021bae:	db01      	blt.n	8021bb4 <_malloc_r+0x1c>
 8021bb0:	42a9      	cmp	r1, r5
 8021bb2:	d904      	bls.n	8021bbe <_malloc_r+0x26>
 8021bb4:	230c      	movs	r3, #12
 8021bb6:	6033      	str	r3, [r6, #0]
 8021bb8:	2000      	movs	r0, #0
 8021bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021c94 <_malloc_r+0xfc>
 8021bc2:	f000 f869 	bl	8021c98 <__malloc_lock>
 8021bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8021bca:	461c      	mov	r4, r3
 8021bcc:	bb44      	cbnz	r4, 8021c20 <_malloc_r+0x88>
 8021bce:	4629      	mov	r1, r5
 8021bd0:	4630      	mov	r0, r6
 8021bd2:	f7ff ffbf 	bl	8021b54 <sbrk_aligned>
 8021bd6:	1c43      	adds	r3, r0, #1
 8021bd8:	4604      	mov	r4, r0
 8021bda:	d158      	bne.n	8021c8e <_malloc_r+0xf6>
 8021bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8021be0:	4627      	mov	r7, r4
 8021be2:	2f00      	cmp	r7, #0
 8021be4:	d143      	bne.n	8021c6e <_malloc_r+0xd6>
 8021be6:	2c00      	cmp	r4, #0
 8021be8:	d04b      	beq.n	8021c82 <_malloc_r+0xea>
 8021bea:	6823      	ldr	r3, [r4, #0]
 8021bec:	4639      	mov	r1, r7
 8021bee:	4630      	mov	r0, r6
 8021bf0:	eb04 0903 	add.w	r9, r4, r3
 8021bf4:	f000 fcc8 	bl	8022588 <_sbrk_r>
 8021bf8:	4581      	cmp	r9, r0
 8021bfa:	d142      	bne.n	8021c82 <_malloc_r+0xea>
 8021bfc:	6821      	ldr	r1, [r4, #0]
 8021bfe:	1a6d      	subs	r5, r5, r1
 8021c00:	4629      	mov	r1, r5
 8021c02:	4630      	mov	r0, r6
 8021c04:	f7ff ffa6 	bl	8021b54 <sbrk_aligned>
 8021c08:	3001      	adds	r0, #1
 8021c0a:	d03a      	beq.n	8021c82 <_malloc_r+0xea>
 8021c0c:	6823      	ldr	r3, [r4, #0]
 8021c0e:	442b      	add	r3, r5
 8021c10:	6023      	str	r3, [r4, #0]
 8021c12:	f8d8 3000 	ldr.w	r3, [r8]
 8021c16:	685a      	ldr	r2, [r3, #4]
 8021c18:	bb62      	cbnz	r2, 8021c74 <_malloc_r+0xdc>
 8021c1a:	f8c8 7000 	str.w	r7, [r8]
 8021c1e:	e00f      	b.n	8021c40 <_malloc_r+0xa8>
 8021c20:	6822      	ldr	r2, [r4, #0]
 8021c22:	1b52      	subs	r2, r2, r5
 8021c24:	d420      	bmi.n	8021c68 <_malloc_r+0xd0>
 8021c26:	2a0b      	cmp	r2, #11
 8021c28:	d917      	bls.n	8021c5a <_malloc_r+0xc2>
 8021c2a:	1961      	adds	r1, r4, r5
 8021c2c:	42a3      	cmp	r3, r4
 8021c2e:	6025      	str	r5, [r4, #0]
 8021c30:	bf18      	it	ne
 8021c32:	6059      	strne	r1, [r3, #4]
 8021c34:	6863      	ldr	r3, [r4, #4]
 8021c36:	bf08      	it	eq
 8021c38:	f8c8 1000 	streq.w	r1, [r8]
 8021c3c:	5162      	str	r2, [r4, r5]
 8021c3e:	604b      	str	r3, [r1, #4]
 8021c40:	4630      	mov	r0, r6
 8021c42:	f000 f82f 	bl	8021ca4 <__malloc_unlock>
 8021c46:	f104 000b 	add.w	r0, r4, #11
 8021c4a:	1d23      	adds	r3, r4, #4
 8021c4c:	f020 0007 	bic.w	r0, r0, #7
 8021c50:	1ac2      	subs	r2, r0, r3
 8021c52:	bf1c      	itt	ne
 8021c54:	1a1b      	subne	r3, r3, r0
 8021c56:	50a3      	strne	r3, [r4, r2]
 8021c58:	e7af      	b.n	8021bba <_malloc_r+0x22>
 8021c5a:	6862      	ldr	r2, [r4, #4]
 8021c5c:	42a3      	cmp	r3, r4
 8021c5e:	bf0c      	ite	eq
 8021c60:	f8c8 2000 	streq.w	r2, [r8]
 8021c64:	605a      	strne	r2, [r3, #4]
 8021c66:	e7eb      	b.n	8021c40 <_malloc_r+0xa8>
 8021c68:	4623      	mov	r3, r4
 8021c6a:	6864      	ldr	r4, [r4, #4]
 8021c6c:	e7ae      	b.n	8021bcc <_malloc_r+0x34>
 8021c6e:	463c      	mov	r4, r7
 8021c70:	687f      	ldr	r7, [r7, #4]
 8021c72:	e7b6      	b.n	8021be2 <_malloc_r+0x4a>
 8021c74:	461a      	mov	r2, r3
 8021c76:	685b      	ldr	r3, [r3, #4]
 8021c78:	42a3      	cmp	r3, r4
 8021c7a:	d1fb      	bne.n	8021c74 <_malloc_r+0xdc>
 8021c7c:	2300      	movs	r3, #0
 8021c7e:	6053      	str	r3, [r2, #4]
 8021c80:	e7de      	b.n	8021c40 <_malloc_r+0xa8>
 8021c82:	230c      	movs	r3, #12
 8021c84:	6033      	str	r3, [r6, #0]
 8021c86:	4630      	mov	r0, r6
 8021c88:	f000 f80c 	bl	8021ca4 <__malloc_unlock>
 8021c8c:	e794      	b.n	8021bb8 <_malloc_r+0x20>
 8021c8e:	6005      	str	r5, [r0, #0]
 8021c90:	e7d6      	b.n	8021c40 <_malloc_r+0xa8>
 8021c92:	bf00      	nop
 8021c94:	24069710 	.word	0x24069710

08021c98 <__malloc_lock>:
 8021c98:	4801      	ldr	r0, [pc, #4]	@ (8021ca0 <__malloc_lock+0x8>)
 8021c9a:	f000 bcc2 	b.w	8022622 <__retarget_lock_acquire_recursive>
 8021c9e:	bf00      	nop
 8021ca0:	24069855 	.word	0x24069855

08021ca4 <__malloc_unlock>:
 8021ca4:	4801      	ldr	r0, [pc, #4]	@ (8021cac <__malloc_unlock+0x8>)
 8021ca6:	f000 bcbd 	b.w	8022624 <__retarget_lock_release_recursive>
 8021caa:	bf00      	nop
 8021cac:	24069855 	.word	0x24069855

08021cb0 <srand>:
 8021cb0:	b538      	push	{r3, r4, r5, lr}
 8021cb2:	4b10      	ldr	r3, [pc, #64]	@ (8021cf4 <srand+0x44>)
 8021cb4:	681d      	ldr	r5, [r3, #0]
 8021cb6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021cb8:	4604      	mov	r4, r0
 8021cba:	b9b3      	cbnz	r3, 8021cea <srand+0x3a>
 8021cbc:	2018      	movs	r0, #24
 8021cbe:	f7ff ff39 	bl	8021b34 <malloc>
 8021cc2:	4602      	mov	r2, r0
 8021cc4:	6328      	str	r0, [r5, #48]	@ 0x30
 8021cc6:	b920      	cbnz	r0, 8021cd2 <srand+0x22>
 8021cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8021cf8 <srand+0x48>)
 8021cca:	480c      	ldr	r0, [pc, #48]	@ (8021cfc <srand+0x4c>)
 8021ccc:	2146      	movs	r1, #70	@ 0x46
 8021cce:	f000 fcc1 	bl	8022654 <__assert_func>
 8021cd2:	490b      	ldr	r1, [pc, #44]	@ (8021d00 <srand+0x50>)
 8021cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8021d04 <srand+0x54>)
 8021cd6:	e9c0 1300 	strd	r1, r3, [r0]
 8021cda:	4b0b      	ldr	r3, [pc, #44]	@ (8021d08 <srand+0x58>)
 8021cdc:	6083      	str	r3, [r0, #8]
 8021cde:	230b      	movs	r3, #11
 8021ce0:	8183      	strh	r3, [r0, #12]
 8021ce2:	2100      	movs	r1, #0
 8021ce4:	2001      	movs	r0, #1
 8021ce6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021cea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021cec:	2200      	movs	r2, #0
 8021cee:	611c      	str	r4, [r3, #16]
 8021cf0:	615a      	str	r2, [r3, #20]
 8021cf2:	bd38      	pop	{r3, r4, r5, pc}
 8021cf4:	24001424 	.word	0x24001424
 8021cf8:	08025aba 	.word	0x08025aba
 8021cfc:	08025ad1 	.word	0x08025ad1
 8021d00:	abcd330e 	.word	0xabcd330e
 8021d04:	e66d1234 	.word	0xe66d1234
 8021d08:	0005deec 	.word	0x0005deec

08021d0c <rand>:
 8021d0c:	4b16      	ldr	r3, [pc, #88]	@ (8021d68 <rand+0x5c>)
 8021d0e:	b510      	push	{r4, lr}
 8021d10:	681c      	ldr	r4, [r3, #0]
 8021d12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021d14:	b9b3      	cbnz	r3, 8021d44 <rand+0x38>
 8021d16:	2018      	movs	r0, #24
 8021d18:	f7ff ff0c 	bl	8021b34 <malloc>
 8021d1c:	4602      	mov	r2, r0
 8021d1e:	6320      	str	r0, [r4, #48]	@ 0x30
 8021d20:	b920      	cbnz	r0, 8021d2c <rand+0x20>
 8021d22:	4b12      	ldr	r3, [pc, #72]	@ (8021d6c <rand+0x60>)
 8021d24:	4812      	ldr	r0, [pc, #72]	@ (8021d70 <rand+0x64>)
 8021d26:	2152      	movs	r1, #82	@ 0x52
 8021d28:	f000 fc94 	bl	8022654 <__assert_func>
 8021d2c:	4911      	ldr	r1, [pc, #68]	@ (8021d74 <rand+0x68>)
 8021d2e:	4b12      	ldr	r3, [pc, #72]	@ (8021d78 <rand+0x6c>)
 8021d30:	e9c0 1300 	strd	r1, r3, [r0]
 8021d34:	4b11      	ldr	r3, [pc, #68]	@ (8021d7c <rand+0x70>)
 8021d36:	6083      	str	r3, [r0, #8]
 8021d38:	230b      	movs	r3, #11
 8021d3a:	8183      	strh	r3, [r0, #12]
 8021d3c:	2100      	movs	r1, #0
 8021d3e:	2001      	movs	r0, #1
 8021d40:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021d44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021d46:	480e      	ldr	r0, [pc, #56]	@ (8021d80 <rand+0x74>)
 8021d48:	690b      	ldr	r3, [r1, #16]
 8021d4a:	694c      	ldr	r4, [r1, #20]
 8021d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8021d84 <rand+0x78>)
 8021d4e:	4358      	muls	r0, r3
 8021d50:	fb02 0004 	mla	r0, r2, r4, r0
 8021d54:	fba3 3202 	umull	r3, r2, r3, r2
 8021d58:	3301      	adds	r3, #1
 8021d5a:	eb40 0002 	adc.w	r0, r0, r2
 8021d5e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021d62:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021d66:	bd10      	pop	{r4, pc}
 8021d68:	24001424 	.word	0x24001424
 8021d6c:	08025aba 	.word	0x08025aba
 8021d70:	08025ad1 	.word	0x08025ad1
 8021d74:	abcd330e 	.word	0xabcd330e
 8021d78:	e66d1234 	.word	0xe66d1234
 8021d7c:	0005deec 	.word	0x0005deec
 8021d80:	5851f42d 	.word	0x5851f42d
 8021d84:	4c957f2d 	.word	0x4c957f2d

08021d88 <realloc>:
 8021d88:	4b02      	ldr	r3, [pc, #8]	@ (8021d94 <realloc+0xc>)
 8021d8a:	460a      	mov	r2, r1
 8021d8c:	4601      	mov	r1, r0
 8021d8e:	6818      	ldr	r0, [r3, #0]
 8021d90:	f000 b802 	b.w	8021d98 <_realloc_r>
 8021d94:	24001424 	.word	0x24001424

08021d98 <_realloc_r>:
 8021d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d9c:	4680      	mov	r8, r0
 8021d9e:	4615      	mov	r5, r2
 8021da0:	460c      	mov	r4, r1
 8021da2:	b921      	cbnz	r1, 8021dae <_realloc_r+0x16>
 8021da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021da8:	4611      	mov	r1, r2
 8021daa:	f7ff bef5 	b.w	8021b98 <_malloc_r>
 8021dae:	b92a      	cbnz	r2, 8021dbc <_realloc_r+0x24>
 8021db0:	f000 fc7a 	bl	80226a8 <_free_r>
 8021db4:	2400      	movs	r4, #0
 8021db6:	4620      	mov	r0, r4
 8021db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021dbc:	f000 fcbe 	bl	802273c <_malloc_usable_size_r>
 8021dc0:	4285      	cmp	r5, r0
 8021dc2:	4606      	mov	r6, r0
 8021dc4:	d802      	bhi.n	8021dcc <_realloc_r+0x34>
 8021dc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021dca:	d8f4      	bhi.n	8021db6 <_realloc_r+0x1e>
 8021dcc:	4629      	mov	r1, r5
 8021dce:	4640      	mov	r0, r8
 8021dd0:	f7ff fee2 	bl	8021b98 <_malloc_r>
 8021dd4:	4607      	mov	r7, r0
 8021dd6:	2800      	cmp	r0, #0
 8021dd8:	d0ec      	beq.n	8021db4 <_realloc_r+0x1c>
 8021dda:	42b5      	cmp	r5, r6
 8021ddc:	462a      	mov	r2, r5
 8021dde:	4621      	mov	r1, r4
 8021de0:	bf28      	it	cs
 8021de2:	4632      	movcs	r2, r6
 8021de4:	f000 fc27 	bl	8022636 <memcpy>
 8021de8:	4621      	mov	r1, r4
 8021dea:	4640      	mov	r0, r8
 8021dec:	f000 fc5c 	bl	80226a8 <_free_r>
 8021df0:	463c      	mov	r4, r7
 8021df2:	e7e0      	b.n	8021db6 <_realloc_r+0x1e>

08021df4 <_strtoul_l.constprop.0>:
 8021df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021df8:	4e34      	ldr	r6, [pc, #208]	@ (8021ecc <_strtoul_l.constprop.0+0xd8>)
 8021dfa:	4686      	mov	lr, r0
 8021dfc:	460d      	mov	r5, r1
 8021dfe:	4628      	mov	r0, r5
 8021e00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021e04:	5d37      	ldrb	r7, [r6, r4]
 8021e06:	f017 0708 	ands.w	r7, r7, #8
 8021e0a:	d1f8      	bne.n	8021dfe <_strtoul_l.constprop.0+0xa>
 8021e0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8021e0e:	d12f      	bne.n	8021e70 <_strtoul_l.constprop.0+0x7c>
 8021e10:	782c      	ldrb	r4, [r5, #0]
 8021e12:	2701      	movs	r7, #1
 8021e14:	1c85      	adds	r5, r0, #2
 8021e16:	f033 0010 	bics.w	r0, r3, #16
 8021e1a:	d109      	bne.n	8021e30 <_strtoul_l.constprop.0+0x3c>
 8021e1c:	2c30      	cmp	r4, #48	@ 0x30
 8021e1e:	d12c      	bne.n	8021e7a <_strtoul_l.constprop.0+0x86>
 8021e20:	7828      	ldrb	r0, [r5, #0]
 8021e22:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021e26:	2858      	cmp	r0, #88	@ 0x58
 8021e28:	d127      	bne.n	8021e7a <_strtoul_l.constprop.0+0x86>
 8021e2a:	786c      	ldrb	r4, [r5, #1]
 8021e2c:	2310      	movs	r3, #16
 8021e2e:	3502      	adds	r5, #2
 8021e30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8021e34:	2600      	movs	r6, #0
 8021e36:	fbb8 f8f3 	udiv	r8, r8, r3
 8021e3a:	fb03 f908 	mul.w	r9, r3, r8
 8021e3e:	ea6f 0909 	mvn.w	r9, r9
 8021e42:	4630      	mov	r0, r6
 8021e44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021e48:	f1bc 0f09 	cmp.w	ip, #9
 8021e4c:	d81c      	bhi.n	8021e88 <_strtoul_l.constprop.0+0x94>
 8021e4e:	4664      	mov	r4, ip
 8021e50:	42a3      	cmp	r3, r4
 8021e52:	dd2a      	ble.n	8021eaa <_strtoul_l.constprop.0+0xb6>
 8021e54:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8021e58:	d007      	beq.n	8021e6a <_strtoul_l.constprop.0+0x76>
 8021e5a:	4580      	cmp	r8, r0
 8021e5c:	d322      	bcc.n	8021ea4 <_strtoul_l.constprop.0+0xb0>
 8021e5e:	d101      	bne.n	8021e64 <_strtoul_l.constprop.0+0x70>
 8021e60:	45a1      	cmp	r9, r4
 8021e62:	db1f      	blt.n	8021ea4 <_strtoul_l.constprop.0+0xb0>
 8021e64:	fb00 4003 	mla	r0, r0, r3, r4
 8021e68:	2601      	movs	r6, #1
 8021e6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021e6e:	e7e9      	b.n	8021e44 <_strtoul_l.constprop.0+0x50>
 8021e70:	2c2b      	cmp	r4, #43	@ 0x2b
 8021e72:	bf04      	itt	eq
 8021e74:	782c      	ldrbeq	r4, [r5, #0]
 8021e76:	1c85      	addeq	r5, r0, #2
 8021e78:	e7cd      	b.n	8021e16 <_strtoul_l.constprop.0+0x22>
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	d1d8      	bne.n	8021e30 <_strtoul_l.constprop.0+0x3c>
 8021e7e:	2c30      	cmp	r4, #48	@ 0x30
 8021e80:	bf0c      	ite	eq
 8021e82:	2308      	moveq	r3, #8
 8021e84:	230a      	movne	r3, #10
 8021e86:	e7d3      	b.n	8021e30 <_strtoul_l.constprop.0+0x3c>
 8021e88:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021e8c:	f1bc 0f19 	cmp.w	ip, #25
 8021e90:	d801      	bhi.n	8021e96 <_strtoul_l.constprop.0+0xa2>
 8021e92:	3c37      	subs	r4, #55	@ 0x37
 8021e94:	e7dc      	b.n	8021e50 <_strtoul_l.constprop.0+0x5c>
 8021e96:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021e9a:	f1bc 0f19 	cmp.w	ip, #25
 8021e9e:	d804      	bhi.n	8021eaa <_strtoul_l.constprop.0+0xb6>
 8021ea0:	3c57      	subs	r4, #87	@ 0x57
 8021ea2:	e7d5      	b.n	8021e50 <_strtoul_l.constprop.0+0x5c>
 8021ea4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8021ea8:	e7df      	b.n	8021e6a <_strtoul_l.constprop.0+0x76>
 8021eaa:	1c73      	adds	r3, r6, #1
 8021eac:	d106      	bne.n	8021ebc <_strtoul_l.constprop.0+0xc8>
 8021eae:	2322      	movs	r3, #34	@ 0x22
 8021eb0:	f8ce 3000 	str.w	r3, [lr]
 8021eb4:	4630      	mov	r0, r6
 8021eb6:	b932      	cbnz	r2, 8021ec6 <_strtoul_l.constprop.0+0xd2>
 8021eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ebc:	b107      	cbz	r7, 8021ec0 <_strtoul_l.constprop.0+0xcc>
 8021ebe:	4240      	negs	r0, r0
 8021ec0:	2a00      	cmp	r2, #0
 8021ec2:	d0f9      	beq.n	8021eb8 <_strtoul_l.constprop.0+0xc4>
 8021ec4:	b106      	cbz	r6, 8021ec8 <_strtoul_l.constprop.0+0xd4>
 8021ec6:	1e69      	subs	r1, r5, #1
 8021ec8:	6011      	str	r1, [r2, #0]
 8021eca:	e7f5      	b.n	8021eb8 <_strtoul_l.constprop.0+0xc4>
 8021ecc:	08025b2a 	.word	0x08025b2a

08021ed0 <strtoul>:
 8021ed0:	4613      	mov	r3, r2
 8021ed2:	460a      	mov	r2, r1
 8021ed4:	4601      	mov	r1, r0
 8021ed6:	4802      	ldr	r0, [pc, #8]	@ (8021ee0 <strtoul+0x10>)
 8021ed8:	6800      	ldr	r0, [r0, #0]
 8021eda:	f7ff bf8b 	b.w	8021df4 <_strtoul_l.constprop.0>
 8021ede:	bf00      	nop
 8021ee0:	24001424 	.word	0x24001424

08021ee4 <std>:
 8021ee4:	2300      	movs	r3, #0
 8021ee6:	b510      	push	{r4, lr}
 8021ee8:	4604      	mov	r4, r0
 8021eea:	e9c0 3300 	strd	r3, r3, [r0]
 8021eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021ef2:	6083      	str	r3, [r0, #8]
 8021ef4:	8181      	strh	r1, [r0, #12]
 8021ef6:	6643      	str	r3, [r0, #100]	@ 0x64
 8021ef8:	81c2      	strh	r2, [r0, #14]
 8021efa:	6183      	str	r3, [r0, #24]
 8021efc:	4619      	mov	r1, r3
 8021efe:	2208      	movs	r2, #8
 8021f00:	305c      	adds	r0, #92	@ 0x5c
 8021f02:	f000 fa79 	bl	80223f8 <memset>
 8021f06:	4b0d      	ldr	r3, [pc, #52]	@ (8021f3c <std+0x58>)
 8021f08:	6263      	str	r3, [r4, #36]	@ 0x24
 8021f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8021f40 <std+0x5c>)
 8021f0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8021f44 <std+0x60>)
 8021f10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021f12:	4b0d      	ldr	r3, [pc, #52]	@ (8021f48 <std+0x64>)
 8021f14:	6323      	str	r3, [r4, #48]	@ 0x30
 8021f16:	4b0d      	ldr	r3, [pc, #52]	@ (8021f4c <std+0x68>)
 8021f18:	6224      	str	r4, [r4, #32]
 8021f1a:	429c      	cmp	r4, r3
 8021f1c:	d006      	beq.n	8021f2c <std+0x48>
 8021f1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021f22:	4294      	cmp	r4, r2
 8021f24:	d002      	beq.n	8021f2c <std+0x48>
 8021f26:	33d0      	adds	r3, #208	@ 0xd0
 8021f28:	429c      	cmp	r4, r3
 8021f2a:	d105      	bne.n	8021f38 <std+0x54>
 8021f2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f34:	f000 bb74 	b.w	8022620 <__retarget_lock_init_recursive>
 8021f38:	bd10      	pop	{r4, pc}
 8021f3a:	bf00      	nop
 8021f3c:	08022185 	.word	0x08022185
 8021f40:	080221a7 	.word	0x080221a7
 8021f44:	080221df 	.word	0x080221df
 8021f48:	08022203 	.word	0x08022203
 8021f4c:	24069714 	.word	0x24069714

08021f50 <stdio_exit_handler>:
 8021f50:	4a02      	ldr	r2, [pc, #8]	@ (8021f5c <stdio_exit_handler+0xc>)
 8021f52:	4903      	ldr	r1, [pc, #12]	@ (8021f60 <stdio_exit_handler+0x10>)
 8021f54:	4803      	ldr	r0, [pc, #12]	@ (8021f64 <stdio_exit_handler+0x14>)
 8021f56:	f000 b869 	b.w	802202c <_fwalk_sglue>
 8021f5a:	bf00      	nop
 8021f5c:	24001418 	.word	0x24001418
 8021f60:	08022e21 	.word	0x08022e21
 8021f64:	24001428 	.word	0x24001428

08021f68 <cleanup_stdio>:
 8021f68:	6841      	ldr	r1, [r0, #4]
 8021f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8021f9c <cleanup_stdio+0x34>)
 8021f6c:	4299      	cmp	r1, r3
 8021f6e:	b510      	push	{r4, lr}
 8021f70:	4604      	mov	r4, r0
 8021f72:	d001      	beq.n	8021f78 <cleanup_stdio+0x10>
 8021f74:	f000 ff54 	bl	8022e20 <_fflush_r>
 8021f78:	68a1      	ldr	r1, [r4, #8]
 8021f7a:	4b09      	ldr	r3, [pc, #36]	@ (8021fa0 <cleanup_stdio+0x38>)
 8021f7c:	4299      	cmp	r1, r3
 8021f7e:	d002      	beq.n	8021f86 <cleanup_stdio+0x1e>
 8021f80:	4620      	mov	r0, r4
 8021f82:	f000 ff4d 	bl	8022e20 <_fflush_r>
 8021f86:	68e1      	ldr	r1, [r4, #12]
 8021f88:	4b06      	ldr	r3, [pc, #24]	@ (8021fa4 <cleanup_stdio+0x3c>)
 8021f8a:	4299      	cmp	r1, r3
 8021f8c:	d004      	beq.n	8021f98 <cleanup_stdio+0x30>
 8021f8e:	4620      	mov	r0, r4
 8021f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f94:	f000 bf44 	b.w	8022e20 <_fflush_r>
 8021f98:	bd10      	pop	{r4, pc}
 8021f9a:	bf00      	nop
 8021f9c:	24069714 	.word	0x24069714
 8021fa0:	2406977c 	.word	0x2406977c
 8021fa4:	240697e4 	.word	0x240697e4

08021fa8 <global_stdio_init.part.0>:
 8021fa8:	b510      	push	{r4, lr}
 8021faa:	4b0b      	ldr	r3, [pc, #44]	@ (8021fd8 <global_stdio_init.part.0+0x30>)
 8021fac:	4c0b      	ldr	r4, [pc, #44]	@ (8021fdc <global_stdio_init.part.0+0x34>)
 8021fae:	4a0c      	ldr	r2, [pc, #48]	@ (8021fe0 <global_stdio_init.part.0+0x38>)
 8021fb0:	601a      	str	r2, [r3, #0]
 8021fb2:	4620      	mov	r0, r4
 8021fb4:	2200      	movs	r2, #0
 8021fb6:	2104      	movs	r1, #4
 8021fb8:	f7ff ff94 	bl	8021ee4 <std>
 8021fbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021fc0:	2201      	movs	r2, #1
 8021fc2:	2109      	movs	r1, #9
 8021fc4:	f7ff ff8e 	bl	8021ee4 <std>
 8021fc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021fcc:	2202      	movs	r2, #2
 8021fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fd2:	2112      	movs	r1, #18
 8021fd4:	f7ff bf86 	b.w	8021ee4 <std>
 8021fd8:	2406984c 	.word	0x2406984c
 8021fdc:	24069714 	.word	0x24069714
 8021fe0:	08021f51 	.word	0x08021f51

08021fe4 <__sfp_lock_acquire>:
 8021fe4:	4801      	ldr	r0, [pc, #4]	@ (8021fec <__sfp_lock_acquire+0x8>)
 8021fe6:	f000 bb1c 	b.w	8022622 <__retarget_lock_acquire_recursive>
 8021fea:	bf00      	nop
 8021fec:	24069856 	.word	0x24069856

08021ff0 <__sfp_lock_release>:
 8021ff0:	4801      	ldr	r0, [pc, #4]	@ (8021ff8 <__sfp_lock_release+0x8>)
 8021ff2:	f000 bb17 	b.w	8022624 <__retarget_lock_release_recursive>
 8021ff6:	bf00      	nop
 8021ff8:	24069856 	.word	0x24069856

08021ffc <__sinit>:
 8021ffc:	b510      	push	{r4, lr}
 8021ffe:	4604      	mov	r4, r0
 8022000:	f7ff fff0 	bl	8021fe4 <__sfp_lock_acquire>
 8022004:	6a23      	ldr	r3, [r4, #32]
 8022006:	b11b      	cbz	r3, 8022010 <__sinit+0x14>
 8022008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802200c:	f7ff bff0 	b.w	8021ff0 <__sfp_lock_release>
 8022010:	4b04      	ldr	r3, [pc, #16]	@ (8022024 <__sinit+0x28>)
 8022012:	6223      	str	r3, [r4, #32]
 8022014:	4b04      	ldr	r3, [pc, #16]	@ (8022028 <__sinit+0x2c>)
 8022016:	681b      	ldr	r3, [r3, #0]
 8022018:	2b00      	cmp	r3, #0
 802201a:	d1f5      	bne.n	8022008 <__sinit+0xc>
 802201c:	f7ff ffc4 	bl	8021fa8 <global_stdio_init.part.0>
 8022020:	e7f2      	b.n	8022008 <__sinit+0xc>
 8022022:	bf00      	nop
 8022024:	08021f69 	.word	0x08021f69
 8022028:	2406984c 	.word	0x2406984c

0802202c <_fwalk_sglue>:
 802202c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022030:	4607      	mov	r7, r0
 8022032:	4688      	mov	r8, r1
 8022034:	4614      	mov	r4, r2
 8022036:	2600      	movs	r6, #0
 8022038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802203c:	f1b9 0901 	subs.w	r9, r9, #1
 8022040:	d505      	bpl.n	802204e <_fwalk_sglue+0x22>
 8022042:	6824      	ldr	r4, [r4, #0]
 8022044:	2c00      	cmp	r4, #0
 8022046:	d1f7      	bne.n	8022038 <_fwalk_sglue+0xc>
 8022048:	4630      	mov	r0, r6
 802204a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802204e:	89ab      	ldrh	r3, [r5, #12]
 8022050:	2b01      	cmp	r3, #1
 8022052:	d907      	bls.n	8022064 <_fwalk_sglue+0x38>
 8022054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022058:	3301      	adds	r3, #1
 802205a:	d003      	beq.n	8022064 <_fwalk_sglue+0x38>
 802205c:	4629      	mov	r1, r5
 802205e:	4638      	mov	r0, r7
 8022060:	47c0      	blx	r8
 8022062:	4306      	orrs	r6, r0
 8022064:	3568      	adds	r5, #104	@ 0x68
 8022066:	e7e9      	b.n	802203c <_fwalk_sglue+0x10>

08022068 <_fwrite_r>:
 8022068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802206c:	9c08      	ldr	r4, [sp, #32]
 802206e:	468a      	mov	sl, r1
 8022070:	4690      	mov	r8, r2
 8022072:	fb02 f903 	mul.w	r9, r2, r3
 8022076:	4606      	mov	r6, r0
 8022078:	b118      	cbz	r0, 8022082 <_fwrite_r+0x1a>
 802207a:	6a03      	ldr	r3, [r0, #32]
 802207c:	b90b      	cbnz	r3, 8022082 <_fwrite_r+0x1a>
 802207e:	f7ff ffbd 	bl	8021ffc <__sinit>
 8022082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022084:	07dd      	lsls	r5, r3, #31
 8022086:	d405      	bmi.n	8022094 <_fwrite_r+0x2c>
 8022088:	89a3      	ldrh	r3, [r4, #12]
 802208a:	0598      	lsls	r0, r3, #22
 802208c:	d402      	bmi.n	8022094 <_fwrite_r+0x2c>
 802208e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022090:	f000 fac7 	bl	8022622 <__retarget_lock_acquire_recursive>
 8022094:	89a3      	ldrh	r3, [r4, #12]
 8022096:	0719      	lsls	r1, r3, #28
 8022098:	d516      	bpl.n	80220c8 <_fwrite_r+0x60>
 802209a:	6923      	ldr	r3, [r4, #16]
 802209c:	b1a3      	cbz	r3, 80220c8 <_fwrite_r+0x60>
 802209e:	2500      	movs	r5, #0
 80220a0:	454d      	cmp	r5, r9
 80220a2:	d01f      	beq.n	80220e4 <_fwrite_r+0x7c>
 80220a4:	68a7      	ldr	r7, [r4, #8]
 80220a6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80220aa:	3f01      	subs	r7, #1
 80220ac:	2f00      	cmp	r7, #0
 80220ae:	60a7      	str	r7, [r4, #8]
 80220b0:	da04      	bge.n	80220bc <_fwrite_r+0x54>
 80220b2:	69a3      	ldr	r3, [r4, #24]
 80220b4:	429f      	cmp	r7, r3
 80220b6:	db0f      	blt.n	80220d8 <_fwrite_r+0x70>
 80220b8:	290a      	cmp	r1, #10
 80220ba:	d00d      	beq.n	80220d8 <_fwrite_r+0x70>
 80220bc:	6823      	ldr	r3, [r4, #0]
 80220be:	1c5a      	adds	r2, r3, #1
 80220c0:	6022      	str	r2, [r4, #0]
 80220c2:	7019      	strb	r1, [r3, #0]
 80220c4:	3501      	adds	r5, #1
 80220c6:	e7eb      	b.n	80220a0 <_fwrite_r+0x38>
 80220c8:	4621      	mov	r1, r4
 80220ca:	4630      	mov	r0, r6
 80220cc:	f000 f914 	bl	80222f8 <__swsetup_r>
 80220d0:	2800      	cmp	r0, #0
 80220d2:	d0e4      	beq.n	802209e <_fwrite_r+0x36>
 80220d4:	2500      	movs	r5, #0
 80220d6:	e005      	b.n	80220e4 <_fwrite_r+0x7c>
 80220d8:	4622      	mov	r2, r4
 80220da:	4630      	mov	r0, r6
 80220dc:	f000 f8ce 	bl	802227c <__swbuf_r>
 80220e0:	3001      	adds	r0, #1
 80220e2:	d1ef      	bne.n	80220c4 <_fwrite_r+0x5c>
 80220e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80220e6:	07da      	lsls	r2, r3, #31
 80220e8:	d405      	bmi.n	80220f6 <_fwrite_r+0x8e>
 80220ea:	89a3      	ldrh	r3, [r4, #12]
 80220ec:	059b      	lsls	r3, r3, #22
 80220ee:	d402      	bmi.n	80220f6 <_fwrite_r+0x8e>
 80220f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80220f2:	f000 fa97 	bl	8022624 <__retarget_lock_release_recursive>
 80220f6:	fbb5 f0f8 	udiv	r0, r5, r8
 80220fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08022100 <fwrite>:
 8022100:	b507      	push	{r0, r1, r2, lr}
 8022102:	9300      	str	r3, [sp, #0]
 8022104:	4613      	mov	r3, r2
 8022106:	460a      	mov	r2, r1
 8022108:	4601      	mov	r1, r0
 802210a:	4803      	ldr	r0, [pc, #12]	@ (8022118 <fwrite+0x18>)
 802210c:	6800      	ldr	r0, [r0, #0]
 802210e:	f7ff ffab 	bl	8022068 <_fwrite_r>
 8022112:	b003      	add	sp, #12
 8022114:	f85d fb04 	ldr.w	pc, [sp], #4
 8022118:	24001424 	.word	0x24001424

0802211c <sniprintf>:
 802211c:	b40c      	push	{r2, r3}
 802211e:	b530      	push	{r4, r5, lr}
 8022120:	4b17      	ldr	r3, [pc, #92]	@ (8022180 <sniprintf+0x64>)
 8022122:	1e0c      	subs	r4, r1, #0
 8022124:	681d      	ldr	r5, [r3, #0]
 8022126:	b09d      	sub	sp, #116	@ 0x74
 8022128:	da08      	bge.n	802213c <sniprintf+0x20>
 802212a:	238b      	movs	r3, #139	@ 0x8b
 802212c:	602b      	str	r3, [r5, #0]
 802212e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022132:	b01d      	add	sp, #116	@ 0x74
 8022134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022138:	b002      	add	sp, #8
 802213a:	4770      	bx	lr
 802213c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022140:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022144:	bf14      	ite	ne
 8022146:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802214a:	4623      	moveq	r3, r4
 802214c:	9304      	str	r3, [sp, #16]
 802214e:	9307      	str	r3, [sp, #28]
 8022150:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022154:	9002      	str	r0, [sp, #8]
 8022156:	9006      	str	r0, [sp, #24]
 8022158:	f8ad 3016 	strh.w	r3, [sp, #22]
 802215c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802215e:	ab21      	add	r3, sp, #132	@ 0x84
 8022160:	a902      	add	r1, sp, #8
 8022162:	4628      	mov	r0, r5
 8022164:	9301      	str	r3, [sp, #4]
 8022166:	f000 fb4d 	bl	8022804 <_svfiprintf_r>
 802216a:	1c43      	adds	r3, r0, #1
 802216c:	bfbc      	itt	lt
 802216e:	238b      	movlt	r3, #139	@ 0x8b
 8022170:	602b      	strlt	r3, [r5, #0]
 8022172:	2c00      	cmp	r4, #0
 8022174:	d0dd      	beq.n	8022132 <sniprintf+0x16>
 8022176:	9b02      	ldr	r3, [sp, #8]
 8022178:	2200      	movs	r2, #0
 802217a:	701a      	strb	r2, [r3, #0]
 802217c:	e7d9      	b.n	8022132 <sniprintf+0x16>
 802217e:	bf00      	nop
 8022180:	24001424 	.word	0x24001424

08022184 <__sread>:
 8022184:	b510      	push	{r4, lr}
 8022186:	460c      	mov	r4, r1
 8022188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802218c:	f000 f9ea 	bl	8022564 <_read_r>
 8022190:	2800      	cmp	r0, #0
 8022192:	bfab      	itete	ge
 8022194:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022196:	89a3      	ldrhlt	r3, [r4, #12]
 8022198:	181b      	addge	r3, r3, r0
 802219a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802219e:	bfac      	ite	ge
 80221a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80221a2:	81a3      	strhlt	r3, [r4, #12]
 80221a4:	bd10      	pop	{r4, pc}

080221a6 <__swrite>:
 80221a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80221aa:	461f      	mov	r7, r3
 80221ac:	898b      	ldrh	r3, [r1, #12]
 80221ae:	05db      	lsls	r3, r3, #23
 80221b0:	4605      	mov	r5, r0
 80221b2:	460c      	mov	r4, r1
 80221b4:	4616      	mov	r6, r2
 80221b6:	d505      	bpl.n	80221c4 <__swrite+0x1e>
 80221b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221bc:	2302      	movs	r3, #2
 80221be:	2200      	movs	r2, #0
 80221c0:	f000 f9be 	bl	8022540 <_lseek_r>
 80221c4:	89a3      	ldrh	r3, [r4, #12]
 80221c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80221ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80221ce:	81a3      	strh	r3, [r4, #12]
 80221d0:	4632      	mov	r2, r6
 80221d2:	463b      	mov	r3, r7
 80221d4:	4628      	mov	r0, r5
 80221d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80221da:	f000 b9e5 	b.w	80225a8 <_write_r>

080221de <__sseek>:
 80221de:	b510      	push	{r4, lr}
 80221e0:	460c      	mov	r4, r1
 80221e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221e6:	f000 f9ab 	bl	8022540 <_lseek_r>
 80221ea:	1c43      	adds	r3, r0, #1
 80221ec:	89a3      	ldrh	r3, [r4, #12]
 80221ee:	bf15      	itete	ne
 80221f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80221f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80221f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80221fa:	81a3      	strheq	r3, [r4, #12]
 80221fc:	bf18      	it	ne
 80221fe:	81a3      	strhne	r3, [r4, #12]
 8022200:	bd10      	pop	{r4, pc}

08022202 <__sclose>:
 8022202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022206:	f000 b935 	b.w	8022474 <_close_r>

0802220a <_vsniprintf_r>:
 802220a:	b530      	push	{r4, r5, lr}
 802220c:	4614      	mov	r4, r2
 802220e:	2c00      	cmp	r4, #0
 8022210:	b09b      	sub	sp, #108	@ 0x6c
 8022212:	4605      	mov	r5, r0
 8022214:	461a      	mov	r2, r3
 8022216:	da05      	bge.n	8022224 <_vsniprintf_r+0x1a>
 8022218:	238b      	movs	r3, #139	@ 0x8b
 802221a:	6003      	str	r3, [r0, #0]
 802221c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022220:	b01b      	add	sp, #108	@ 0x6c
 8022222:	bd30      	pop	{r4, r5, pc}
 8022224:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022228:	f8ad 300c 	strh.w	r3, [sp, #12]
 802222c:	bf14      	ite	ne
 802222e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8022232:	4623      	moveq	r3, r4
 8022234:	9302      	str	r3, [sp, #8]
 8022236:	9305      	str	r3, [sp, #20]
 8022238:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802223c:	9100      	str	r1, [sp, #0]
 802223e:	9104      	str	r1, [sp, #16]
 8022240:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022244:	4669      	mov	r1, sp
 8022246:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022248:	f000 fadc 	bl	8022804 <_svfiprintf_r>
 802224c:	1c43      	adds	r3, r0, #1
 802224e:	bfbc      	itt	lt
 8022250:	238b      	movlt	r3, #139	@ 0x8b
 8022252:	602b      	strlt	r3, [r5, #0]
 8022254:	2c00      	cmp	r4, #0
 8022256:	d0e3      	beq.n	8022220 <_vsniprintf_r+0x16>
 8022258:	9b00      	ldr	r3, [sp, #0]
 802225a:	2200      	movs	r2, #0
 802225c:	701a      	strb	r2, [r3, #0]
 802225e:	e7df      	b.n	8022220 <_vsniprintf_r+0x16>

08022260 <vsniprintf>:
 8022260:	b507      	push	{r0, r1, r2, lr}
 8022262:	9300      	str	r3, [sp, #0]
 8022264:	4613      	mov	r3, r2
 8022266:	460a      	mov	r2, r1
 8022268:	4601      	mov	r1, r0
 802226a:	4803      	ldr	r0, [pc, #12]	@ (8022278 <vsniprintf+0x18>)
 802226c:	6800      	ldr	r0, [r0, #0]
 802226e:	f7ff ffcc 	bl	802220a <_vsniprintf_r>
 8022272:	b003      	add	sp, #12
 8022274:	f85d fb04 	ldr.w	pc, [sp], #4
 8022278:	24001424 	.word	0x24001424

0802227c <__swbuf_r>:
 802227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802227e:	460e      	mov	r6, r1
 8022280:	4614      	mov	r4, r2
 8022282:	4605      	mov	r5, r0
 8022284:	b118      	cbz	r0, 802228e <__swbuf_r+0x12>
 8022286:	6a03      	ldr	r3, [r0, #32]
 8022288:	b90b      	cbnz	r3, 802228e <__swbuf_r+0x12>
 802228a:	f7ff feb7 	bl	8021ffc <__sinit>
 802228e:	69a3      	ldr	r3, [r4, #24]
 8022290:	60a3      	str	r3, [r4, #8]
 8022292:	89a3      	ldrh	r3, [r4, #12]
 8022294:	071a      	lsls	r2, r3, #28
 8022296:	d501      	bpl.n	802229c <__swbuf_r+0x20>
 8022298:	6923      	ldr	r3, [r4, #16]
 802229a:	b943      	cbnz	r3, 80222ae <__swbuf_r+0x32>
 802229c:	4621      	mov	r1, r4
 802229e:	4628      	mov	r0, r5
 80222a0:	f000 f82a 	bl	80222f8 <__swsetup_r>
 80222a4:	b118      	cbz	r0, 80222ae <__swbuf_r+0x32>
 80222a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80222aa:	4638      	mov	r0, r7
 80222ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80222ae:	6823      	ldr	r3, [r4, #0]
 80222b0:	6922      	ldr	r2, [r4, #16]
 80222b2:	1a98      	subs	r0, r3, r2
 80222b4:	6963      	ldr	r3, [r4, #20]
 80222b6:	b2f6      	uxtb	r6, r6
 80222b8:	4283      	cmp	r3, r0
 80222ba:	4637      	mov	r7, r6
 80222bc:	dc05      	bgt.n	80222ca <__swbuf_r+0x4e>
 80222be:	4621      	mov	r1, r4
 80222c0:	4628      	mov	r0, r5
 80222c2:	f000 fdad 	bl	8022e20 <_fflush_r>
 80222c6:	2800      	cmp	r0, #0
 80222c8:	d1ed      	bne.n	80222a6 <__swbuf_r+0x2a>
 80222ca:	68a3      	ldr	r3, [r4, #8]
 80222cc:	3b01      	subs	r3, #1
 80222ce:	60a3      	str	r3, [r4, #8]
 80222d0:	6823      	ldr	r3, [r4, #0]
 80222d2:	1c5a      	adds	r2, r3, #1
 80222d4:	6022      	str	r2, [r4, #0]
 80222d6:	701e      	strb	r6, [r3, #0]
 80222d8:	6962      	ldr	r2, [r4, #20]
 80222da:	1c43      	adds	r3, r0, #1
 80222dc:	429a      	cmp	r2, r3
 80222de:	d004      	beq.n	80222ea <__swbuf_r+0x6e>
 80222e0:	89a3      	ldrh	r3, [r4, #12]
 80222e2:	07db      	lsls	r3, r3, #31
 80222e4:	d5e1      	bpl.n	80222aa <__swbuf_r+0x2e>
 80222e6:	2e0a      	cmp	r6, #10
 80222e8:	d1df      	bne.n	80222aa <__swbuf_r+0x2e>
 80222ea:	4621      	mov	r1, r4
 80222ec:	4628      	mov	r0, r5
 80222ee:	f000 fd97 	bl	8022e20 <_fflush_r>
 80222f2:	2800      	cmp	r0, #0
 80222f4:	d0d9      	beq.n	80222aa <__swbuf_r+0x2e>
 80222f6:	e7d6      	b.n	80222a6 <__swbuf_r+0x2a>

080222f8 <__swsetup_r>:
 80222f8:	b538      	push	{r3, r4, r5, lr}
 80222fa:	4b29      	ldr	r3, [pc, #164]	@ (80223a0 <__swsetup_r+0xa8>)
 80222fc:	4605      	mov	r5, r0
 80222fe:	6818      	ldr	r0, [r3, #0]
 8022300:	460c      	mov	r4, r1
 8022302:	b118      	cbz	r0, 802230c <__swsetup_r+0x14>
 8022304:	6a03      	ldr	r3, [r0, #32]
 8022306:	b90b      	cbnz	r3, 802230c <__swsetup_r+0x14>
 8022308:	f7ff fe78 	bl	8021ffc <__sinit>
 802230c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022310:	0719      	lsls	r1, r3, #28
 8022312:	d422      	bmi.n	802235a <__swsetup_r+0x62>
 8022314:	06da      	lsls	r2, r3, #27
 8022316:	d407      	bmi.n	8022328 <__swsetup_r+0x30>
 8022318:	2209      	movs	r2, #9
 802231a:	602a      	str	r2, [r5, #0]
 802231c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022320:	81a3      	strh	r3, [r4, #12]
 8022322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022326:	e033      	b.n	8022390 <__swsetup_r+0x98>
 8022328:	0758      	lsls	r0, r3, #29
 802232a:	d512      	bpl.n	8022352 <__swsetup_r+0x5a>
 802232c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802232e:	b141      	cbz	r1, 8022342 <__swsetup_r+0x4a>
 8022330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022334:	4299      	cmp	r1, r3
 8022336:	d002      	beq.n	802233e <__swsetup_r+0x46>
 8022338:	4628      	mov	r0, r5
 802233a:	f000 f9b5 	bl	80226a8 <_free_r>
 802233e:	2300      	movs	r3, #0
 8022340:	6363      	str	r3, [r4, #52]	@ 0x34
 8022342:	89a3      	ldrh	r3, [r4, #12]
 8022344:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022348:	81a3      	strh	r3, [r4, #12]
 802234a:	2300      	movs	r3, #0
 802234c:	6063      	str	r3, [r4, #4]
 802234e:	6923      	ldr	r3, [r4, #16]
 8022350:	6023      	str	r3, [r4, #0]
 8022352:	89a3      	ldrh	r3, [r4, #12]
 8022354:	f043 0308 	orr.w	r3, r3, #8
 8022358:	81a3      	strh	r3, [r4, #12]
 802235a:	6923      	ldr	r3, [r4, #16]
 802235c:	b94b      	cbnz	r3, 8022372 <__swsetup_r+0x7a>
 802235e:	89a3      	ldrh	r3, [r4, #12]
 8022360:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022368:	d003      	beq.n	8022372 <__swsetup_r+0x7a>
 802236a:	4621      	mov	r1, r4
 802236c:	4628      	mov	r0, r5
 802236e:	f000 fdb7 	bl	8022ee0 <__smakebuf_r>
 8022372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022376:	f013 0201 	ands.w	r2, r3, #1
 802237a:	d00a      	beq.n	8022392 <__swsetup_r+0x9a>
 802237c:	2200      	movs	r2, #0
 802237e:	60a2      	str	r2, [r4, #8]
 8022380:	6962      	ldr	r2, [r4, #20]
 8022382:	4252      	negs	r2, r2
 8022384:	61a2      	str	r2, [r4, #24]
 8022386:	6922      	ldr	r2, [r4, #16]
 8022388:	b942      	cbnz	r2, 802239c <__swsetup_r+0xa4>
 802238a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802238e:	d1c5      	bne.n	802231c <__swsetup_r+0x24>
 8022390:	bd38      	pop	{r3, r4, r5, pc}
 8022392:	0799      	lsls	r1, r3, #30
 8022394:	bf58      	it	pl
 8022396:	6962      	ldrpl	r2, [r4, #20]
 8022398:	60a2      	str	r2, [r4, #8]
 802239a:	e7f4      	b.n	8022386 <__swsetup_r+0x8e>
 802239c:	2000      	movs	r0, #0
 802239e:	e7f7      	b.n	8022390 <__swsetup_r+0x98>
 80223a0:	24001424 	.word	0x24001424

080223a4 <memcmp>:
 80223a4:	b510      	push	{r4, lr}
 80223a6:	3901      	subs	r1, #1
 80223a8:	4402      	add	r2, r0
 80223aa:	4290      	cmp	r0, r2
 80223ac:	d101      	bne.n	80223b2 <memcmp+0xe>
 80223ae:	2000      	movs	r0, #0
 80223b0:	e005      	b.n	80223be <memcmp+0x1a>
 80223b2:	7803      	ldrb	r3, [r0, #0]
 80223b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80223b8:	42a3      	cmp	r3, r4
 80223ba:	d001      	beq.n	80223c0 <memcmp+0x1c>
 80223bc:	1b18      	subs	r0, r3, r4
 80223be:	bd10      	pop	{r4, pc}
 80223c0:	3001      	adds	r0, #1
 80223c2:	e7f2      	b.n	80223aa <memcmp+0x6>

080223c4 <memmove>:
 80223c4:	4288      	cmp	r0, r1
 80223c6:	b510      	push	{r4, lr}
 80223c8:	eb01 0402 	add.w	r4, r1, r2
 80223cc:	d902      	bls.n	80223d4 <memmove+0x10>
 80223ce:	4284      	cmp	r4, r0
 80223d0:	4623      	mov	r3, r4
 80223d2:	d807      	bhi.n	80223e4 <memmove+0x20>
 80223d4:	1e43      	subs	r3, r0, #1
 80223d6:	42a1      	cmp	r1, r4
 80223d8:	d008      	beq.n	80223ec <memmove+0x28>
 80223da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80223de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80223e2:	e7f8      	b.n	80223d6 <memmove+0x12>
 80223e4:	4402      	add	r2, r0
 80223e6:	4601      	mov	r1, r0
 80223e8:	428a      	cmp	r2, r1
 80223ea:	d100      	bne.n	80223ee <memmove+0x2a>
 80223ec:	bd10      	pop	{r4, pc}
 80223ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80223f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80223f6:	e7f7      	b.n	80223e8 <memmove+0x24>

080223f8 <memset>:
 80223f8:	4402      	add	r2, r0
 80223fa:	4603      	mov	r3, r0
 80223fc:	4293      	cmp	r3, r2
 80223fe:	d100      	bne.n	8022402 <memset+0xa>
 8022400:	4770      	bx	lr
 8022402:	f803 1b01 	strb.w	r1, [r3], #1
 8022406:	e7f9      	b.n	80223fc <memset+0x4>

08022408 <strchr>:
 8022408:	b2c9      	uxtb	r1, r1
 802240a:	4603      	mov	r3, r0
 802240c:	4618      	mov	r0, r3
 802240e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022412:	b112      	cbz	r2, 802241a <strchr+0x12>
 8022414:	428a      	cmp	r2, r1
 8022416:	d1f9      	bne.n	802240c <strchr+0x4>
 8022418:	4770      	bx	lr
 802241a:	2900      	cmp	r1, #0
 802241c:	bf18      	it	ne
 802241e:	2000      	movne	r0, #0
 8022420:	4770      	bx	lr

08022422 <strncmp>:
 8022422:	b510      	push	{r4, lr}
 8022424:	b16a      	cbz	r2, 8022442 <strncmp+0x20>
 8022426:	3901      	subs	r1, #1
 8022428:	1884      	adds	r4, r0, r2
 802242a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802242e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022432:	429a      	cmp	r2, r3
 8022434:	d103      	bne.n	802243e <strncmp+0x1c>
 8022436:	42a0      	cmp	r0, r4
 8022438:	d001      	beq.n	802243e <strncmp+0x1c>
 802243a:	2a00      	cmp	r2, #0
 802243c:	d1f5      	bne.n	802242a <strncmp+0x8>
 802243e:	1ad0      	subs	r0, r2, r3
 8022440:	bd10      	pop	{r4, pc}
 8022442:	4610      	mov	r0, r2
 8022444:	e7fc      	b.n	8022440 <strncmp+0x1e>

08022446 <strstr>:
 8022446:	780a      	ldrb	r2, [r1, #0]
 8022448:	b570      	push	{r4, r5, r6, lr}
 802244a:	b96a      	cbnz	r2, 8022468 <strstr+0x22>
 802244c:	bd70      	pop	{r4, r5, r6, pc}
 802244e:	429a      	cmp	r2, r3
 8022450:	d109      	bne.n	8022466 <strstr+0x20>
 8022452:	460c      	mov	r4, r1
 8022454:	4605      	mov	r5, r0
 8022456:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802245a:	2b00      	cmp	r3, #0
 802245c:	d0f6      	beq.n	802244c <strstr+0x6>
 802245e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8022462:	429e      	cmp	r6, r3
 8022464:	d0f7      	beq.n	8022456 <strstr+0x10>
 8022466:	3001      	adds	r0, #1
 8022468:	7803      	ldrb	r3, [r0, #0]
 802246a:	2b00      	cmp	r3, #0
 802246c:	d1ef      	bne.n	802244e <strstr+0x8>
 802246e:	4618      	mov	r0, r3
 8022470:	e7ec      	b.n	802244c <strstr+0x6>
	...

08022474 <_close_r>:
 8022474:	b538      	push	{r3, r4, r5, lr}
 8022476:	4d06      	ldr	r5, [pc, #24]	@ (8022490 <_close_r+0x1c>)
 8022478:	2300      	movs	r3, #0
 802247a:	4604      	mov	r4, r0
 802247c:	4608      	mov	r0, r1
 802247e:	602b      	str	r3, [r5, #0]
 8022480:	f7e0 f92a 	bl	80026d8 <_close>
 8022484:	1c43      	adds	r3, r0, #1
 8022486:	d102      	bne.n	802248e <_close_r+0x1a>
 8022488:	682b      	ldr	r3, [r5, #0]
 802248a:	b103      	cbz	r3, 802248e <_close_r+0x1a>
 802248c:	6023      	str	r3, [r4, #0]
 802248e:	bd38      	pop	{r3, r4, r5, pc}
 8022490:	24069850 	.word	0x24069850

08022494 <_reclaim_reent>:
 8022494:	4b29      	ldr	r3, [pc, #164]	@ (802253c <_reclaim_reent+0xa8>)
 8022496:	681b      	ldr	r3, [r3, #0]
 8022498:	4283      	cmp	r3, r0
 802249a:	b570      	push	{r4, r5, r6, lr}
 802249c:	4604      	mov	r4, r0
 802249e:	d04b      	beq.n	8022538 <_reclaim_reent+0xa4>
 80224a0:	69c3      	ldr	r3, [r0, #28]
 80224a2:	b1ab      	cbz	r3, 80224d0 <_reclaim_reent+0x3c>
 80224a4:	68db      	ldr	r3, [r3, #12]
 80224a6:	b16b      	cbz	r3, 80224c4 <_reclaim_reent+0x30>
 80224a8:	2500      	movs	r5, #0
 80224aa:	69e3      	ldr	r3, [r4, #28]
 80224ac:	68db      	ldr	r3, [r3, #12]
 80224ae:	5959      	ldr	r1, [r3, r5]
 80224b0:	2900      	cmp	r1, #0
 80224b2:	d13b      	bne.n	802252c <_reclaim_reent+0x98>
 80224b4:	3504      	adds	r5, #4
 80224b6:	2d80      	cmp	r5, #128	@ 0x80
 80224b8:	d1f7      	bne.n	80224aa <_reclaim_reent+0x16>
 80224ba:	69e3      	ldr	r3, [r4, #28]
 80224bc:	4620      	mov	r0, r4
 80224be:	68d9      	ldr	r1, [r3, #12]
 80224c0:	f000 f8f2 	bl	80226a8 <_free_r>
 80224c4:	69e3      	ldr	r3, [r4, #28]
 80224c6:	6819      	ldr	r1, [r3, #0]
 80224c8:	b111      	cbz	r1, 80224d0 <_reclaim_reent+0x3c>
 80224ca:	4620      	mov	r0, r4
 80224cc:	f000 f8ec 	bl	80226a8 <_free_r>
 80224d0:	6961      	ldr	r1, [r4, #20]
 80224d2:	b111      	cbz	r1, 80224da <_reclaim_reent+0x46>
 80224d4:	4620      	mov	r0, r4
 80224d6:	f000 f8e7 	bl	80226a8 <_free_r>
 80224da:	69e1      	ldr	r1, [r4, #28]
 80224dc:	b111      	cbz	r1, 80224e4 <_reclaim_reent+0x50>
 80224de:	4620      	mov	r0, r4
 80224e0:	f000 f8e2 	bl	80226a8 <_free_r>
 80224e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80224e6:	b111      	cbz	r1, 80224ee <_reclaim_reent+0x5a>
 80224e8:	4620      	mov	r0, r4
 80224ea:	f000 f8dd 	bl	80226a8 <_free_r>
 80224ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80224f0:	b111      	cbz	r1, 80224f8 <_reclaim_reent+0x64>
 80224f2:	4620      	mov	r0, r4
 80224f4:	f000 f8d8 	bl	80226a8 <_free_r>
 80224f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80224fa:	b111      	cbz	r1, 8022502 <_reclaim_reent+0x6e>
 80224fc:	4620      	mov	r0, r4
 80224fe:	f000 f8d3 	bl	80226a8 <_free_r>
 8022502:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8022504:	b111      	cbz	r1, 802250c <_reclaim_reent+0x78>
 8022506:	4620      	mov	r0, r4
 8022508:	f000 f8ce 	bl	80226a8 <_free_r>
 802250c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802250e:	b111      	cbz	r1, 8022516 <_reclaim_reent+0x82>
 8022510:	4620      	mov	r0, r4
 8022512:	f000 f8c9 	bl	80226a8 <_free_r>
 8022516:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8022518:	b111      	cbz	r1, 8022520 <_reclaim_reent+0x8c>
 802251a:	4620      	mov	r0, r4
 802251c:	f000 f8c4 	bl	80226a8 <_free_r>
 8022520:	6a23      	ldr	r3, [r4, #32]
 8022522:	b14b      	cbz	r3, 8022538 <_reclaim_reent+0xa4>
 8022524:	4620      	mov	r0, r4
 8022526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802252a:	4718      	bx	r3
 802252c:	680e      	ldr	r6, [r1, #0]
 802252e:	4620      	mov	r0, r4
 8022530:	f000 f8ba 	bl	80226a8 <_free_r>
 8022534:	4631      	mov	r1, r6
 8022536:	e7bb      	b.n	80224b0 <_reclaim_reent+0x1c>
 8022538:	bd70      	pop	{r4, r5, r6, pc}
 802253a:	bf00      	nop
 802253c:	24001424 	.word	0x24001424

08022540 <_lseek_r>:
 8022540:	b538      	push	{r3, r4, r5, lr}
 8022542:	4d07      	ldr	r5, [pc, #28]	@ (8022560 <_lseek_r+0x20>)
 8022544:	4604      	mov	r4, r0
 8022546:	4608      	mov	r0, r1
 8022548:	4611      	mov	r1, r2
 802254a:	2200      	movs	r2, #0
 802254c:	602a      	str	r2, [r5, #0]
 802254e:	461a      	mov	r2, r3
 8022550:	f7e0 f8e9 	bl	8002726 <_lseek>
 8022554:	1c43      	adds	r3, r0, #1
 8022556:	d102      	bne.n	802255e <_lseek_r+0x1e>
 8022558:	682b      	ldr	r3, [r5, #0]
 802255a:	b103      	cbz	r3, 802255e <_lseek_r+0x1e>
 802255c:	6023      	str	r3, [r4, #0]
 802255e:	bd38      	pop	{r3, r4, r5, pc}
 8022560:	24069850 	.word	0x24069850

08022564 <_read_r>:
 8022564:	b538      	push	{r3, r4, r5, lr}
 8022566:	4d07      	ldr	r5, [pc, #28]	@ (8022584 <_read_r+0x20>)
 8022568:	4604      	mov	r4, r0
 802256a:	4608      	mov	r0, r1
 802256c:	4611      	mov	r1, r2
 802256e:	2200      	movs	r2, #0
 8022570:	602a      	str	r2, [r5, #0]
 8022572:	461a      	mov	r2, r3
 8022574:	f7e0 f877 	bl	8002666 <_read>
 8022578:	1c43      	adds	r3, r0, #1
 802257a:	d102      	bne.n	8022582 <_read_r+0x1e>
 802257c:	682b      	ldr	r3, [r5, #0]
 802257e:	b103      	cbz	r3, 8022582 <_read_r+0x1e>
 8022580:	6023      	str	r3, [r4, #0]
 8022582:	bd38      	pop	{r3, r4, r5, pc}
 8022584:	24069850 	.word	0x24069850

08022588 <_sbrk_r>:
 8022588:	b538      	push	{r3, r4, r5, lr}
 802258a:	4d06      	ldr	r5, [pc, #24]	@ (80225a4 <_sbrk_r+0x1c>)
 802258c:	2300      	movs	r3, #0
 802258e:	4604      	mov	r4, r0
 8022590:	4608      	mov	r0, r1
 8022592:	602b      	str	r3, [r5, #0]
 8022594:	f7e0 f8d4 	bl	8002740 <_sbrk>
 8022598:	1c43      	adds	r3, r0, #1
 802259a:	d102      	bne.n	80225a2 <_sbrk_r+0x1a>
 802259c:	682b      	ldr	r3, [r5, #0]
 802259e:	b103      	cbz	r3, 80225a2 <_sbrk_r+0x1a>
 80225a0:	6023      	str	r3, [r4, #0]
 80225a2:	bd38      	pop	{r3, r4, r5, pc}
 80225a4:	24069850 	.word	0x24069850

080225a8 <_write_r>:
 80225a8:	b538      	push	{r3, r4, r5, lr}
 80225aa:	4d07      	ldr	r5, [pc, #28]	@ (80225c8 <_write_r+0x20>)
 80225ac:	4604      	mov	r4, r0
 80225ae:	4608      	mov	r0, r1
 80225b0:	4611      	mov	r1, r2
 80225b2:	2200      	movs	r2, #0
 80225b4:	602a      	str	r2, [r5, #0]
 80225b6:	461a      	mov	r2, r3
 80225b8:	f7e0 f872 	bl	80026a0 <_write>
 80225bc:	1c43      	adds	r3, r0, #1
 80225be:	d102      	bne.n	80225c6 <_write_r+0x1e>
 80225c0:	682b      	ldr	r3, [r5, #0]
 80225c2:	b103      	cbz	r3, 80225c6 <_write_r+0x1e>
 80225c4:	6023      	str	r3, [r4, #0]
 80225c6:	bd38      	pop	{r3, r4, r5, pc}
 80225c8:	24069850 	.word	0x24069850

080225cc <__errno>:
 80225cc:	4b01      	ldr	r3, [pc, #4]	@ (80225d4 <__errno+0x8>)
 80225ce:	6818      	ldr	r0, [r3, #0]
 80225d0:	4770      	bx	lr
 80225d2:	bf00      	nop
 80225d4:	24001424 	.word	0x24001424

080225d8 <__libc_init_array>:
 80225d8:	b570      	push	{r4, r5, r6, lr}
 80225da:	4d0d      	ldr	r5, [pc, #52]	@ (8022610 <__libc_init_array+0x38>)
 80225dc:	4c0d      	ldr	r4, [pc, #52]	@ (8022614 <__libc_init_array+0x3c>)
 80225de:	1b64      	subs	r4, r4, r5
 80225e0:	10a4      	asrs	r4, r4, #2
 80225e2:	2600      	movs	r6, #0
 80225e4:	42a6      	cmp	r6, r4
 80225e6:	d109      	bne.n	80225fc <__libc_init_array+0x24>
 80225e8:	4d0b      	ldr	r5, [pc, #44]	@ (8022618 <__libc_init_array+0x40>)
 80225ea:	4c0c      	ldr	r4, [pc, #48]	@ (802261c <__libc_init_array+0x44>)
 80225ec:	f000 fe62 	bl	80232b4 <_init>
 80225f0:	1b64      	subs	r4, r4, r5
 80225f2:	10a4      	asrs	r4, r4, #2
 80225f4:	2600      	movs	r6, #0
 80225f6:	42a6      	cmp	r6, r4
 80225f8:	d105      	bne.n	8022606 <__libc_init_array+0x2e>
 80225fa:	bd70      	pop	{r4, r5, r6, pc}
 80225fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8022600:	4798      	blx	r3
 8022602:	3601      	adds	r6, #1
 8022604:	e7ee      	b.n	80225e4 <__libc_init_array+0xc>
 8022606:	f855 3b04 	ldr.w	r3, [r5], #4
 802260a:	4798      	blx	r3
 802260c:	3601      	adds	r6, #1
 802260e:	e7f2      	b.n	80225f6 <__libc_init_array+0x1e>
 8022610:	08025ca4 	.word	0x08025ca4
 8022614:	08025ca4 	.word	0x08025ca4
 8022618:	08025ca4 	.word	0x08025ca4
 802261c:	08025ce8 	.word	0x08025ce8

08022620 <__retarget_lock_init_recursive>:
 8022620:	4770      	bx	lr

08022622 <__retarget_lock_acquire_recursive>:
 8022622:	4770      	bx	lr

08022624 <__retarget_lock_release_recursive>:
 8022624:	4770      	bx	lr

08022626 <strcpy>:
 8022626:	4603      	mov	r3, r0
 8022628:	f811 2b01 	ldrb.w	r2, [r1], #1
 802262c:	f803 2b01 	strb.w	r2, [r3], #1
 8022630:	2a00      	cmp	r2, #0
 8022632:	d1f9      	bne.n	8022628 <strcpy+0x2>
 8022634:	4770      	bx	lr

08022636 <memcpy>:
 8022636:	440a      	add	r2, r1
 8022638:	4291      	cmp	r1, r2
 802263a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802263e:	d100      	bne.n	8022642 <memcpy+0xc>
 8022640:	4770      	bx	lr
 8022642:	b510      	push	{r4, lr}
 8022644:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022648:	f803 4f01 	strb.w	r4, [r3, #1]!
 802264c:	4291      	cmp	r1, r2
 802264e:	d1f9      	bne.n	8022644 <memcpy+0xe>
 8022650:	bd10      	pop	{r4, pc}
	...

08022654 <__assert_func>:
 8022654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022656:	4614      	mov	r4, r2
 8022658:	461a      	mov	r2, r3
 802265a:	4b09      	ldr	r3, [pc, #36]	@ (8022680 <__assert_func+0x2c>)
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	4605      	mov	r5, r0
 8022660:	68d8      	ldr	r0, [r3, #12]
 8022662:	b954      	cbnz	r4, 802267a <__assert_func+0x26>
 8022664:	4b07      	ldr	r3, [pc, #28]	@ (8022684 <__assert_func+0x30>)
 8022666:	461c      	mov	r4, r3
 8022668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802266c:	9100      	str	r1, [sp, #0]
 802266e:	462b      	mov	r3, r5
 8022670:	4905      	ldr	r1, [pc, #20]	@ (8022688 <__assert_func+0x34>)
 8022672:	f000 fbfd 	bl	8022e70 <fiprintf>
 8022676:	f000 fc91 	bl	8022f9c <abort>
 802267a:	4b04      	ldr	r3, [pc, #16]	@ (802268c <__assert_func+0x38>)
 802267c:	e7f4      	b.n	8022668 <__assert_func+0x14>
 802267e:	bf00      	nop
 8022680:	24001424 	.word	0x24001424
 8022684:	08025c65 	.word	0x08025c65
 8022688:	08025c37 	.word	0x08025c37
 802268c:	08025c2a 	.word	0x08025c2a

08022690 <__env_lock>:
 8022690:	4801      	ldr	r0, [pc, #4]	@ (8022698 <__env_lock+0x8>)
 8022692:	f7ff bfc6 	b.w	8022622 <__retarget_lock_acquire_recursive>
 8022696:	bf00      	nop
 8022698:	24069854 	.word	0x24069854

0802269c <__env_unlock>:
 802269c:	4801      	ldr	r0, [pc, #4]	@ (80226a4 <__env_unlock+0x8>)
 802269e:	f7ff bfc1 	b.w	8022624 <__retarget_lock_release_recursive>
 80226a2:	bf00      	nop
 80226a4:	24069854 	.word	0x24069854

080226a8 <_free_r>:
 80226a8:	b538      	push	{r3, r4, r5, lr}
 80226aa:	4605      	mov	r5, r0
 80226ac:	2900      	cmp	r1, #0
 80226ae:	d041      	beq.n	8022734 <_free_r+0x8c>
 80226b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80226b4:	1f0c      	subs	r4, r1, #4
 80226b6:	2b00      	cmp	r3, #0
 80226b8:	bfb8      	it	lt
 80226ba:	18e4      	addlt	r4, r4, r3
 80226bc:	f7ff faec 	bl	8021c98 <__malloc_lock>
 80226c0:	4a1d      	ldr	r2, [pc, #116]	@ (8022738 <_free_r+0x90>)
 80226c2:	6813      	ldr	r3, [r2, #0]
 80226c4:	b933      	cbnz	r3, 80226d4 <_free_r+0x2c>
 80226c6:	6063      	str	r3, [r4, #4]
 80226c8:	6014      	str	r4, [r2, #0]
 80226ca:	4628      	mov	r0, r5
 80226cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80226d0:	f7ff bae8 	b.w	8021ca4 <__malloc_unlock>
 80226d4:	42a3      	cmp	r3, r4
 80226d6:	d908      	bls.n	80226ea <_free_r+0x42>
 80226d8:	6820      	ldr	r0, [r4, #0]
 80226da:	1821      	adds	r1, r4, r0
 80226dc:	428b      	cmp	r3, r1
 80226de:	bf01      	itttt	eq
 80226e0:	6819      	ldreq	r1, [r3, #0]
 80226e2:	685b      	ldreq	r3, [r3, #4]
 80226e4:	1809      	addeq	r1, r1, r0
 80226e6:	6021      	streq	r1, [r4, #0]
 80226e8:	e7ed      	b.n	80226c6 <_free_r+0x1e>
 80226ea:	461a      	mov	r2, r3
 80226ec:	685b      	ldr	r3, [r3, #4]
 80226ee:	b10b      	cbz	r3, 80226f4 <_free_r+0x4c>
 80226f0:	42a3      	cmp	r3, r4
 80226f2:	d9fa      	bls.n	80226ea <_free_r+0x42>
 80226f4:	6811      	ldr	r1, [r2, #0]
 80226f6:	1850      	adds	r0, r2, r1
 80226f8:	42a0      	cmp	r0, r4
 80226fa:	d10b      	bne.n	8022714 <_free_r+0x6c>
 80226fc:	6820      	ldr	r0, [r4, #0]
 80226fe:	4401      	add	r1, r0
 8022700:	1850      	adds	r0, r2, r1
 8022702:	4283      	cmp	r3, r0
 8022704:	6011      	str	r1, [r2, #0]
 8022706:	d1e0      	bne.n	80226ca <_free_r+0x22>
 8022708:	6818      	ldr	r0, [r3, #0]
 802270a:	685b      	ldr	r3, [r3, #4]
 802270c:	6053      	str	r3, [r2, #4]
 802270e:	4408      	add	r0, r1
 8022710:	6010      	str	r0, [r2, #0]
 8022712:	e7da      	b.n	80226ca <_free_r+0x22>
 8022714:	d902      	bls.n	802271c <_free_r+0x74>
 8022716:	230c      	movs	r3, #12
 8022718:	602b      	str	r3, [r5, #0]
 802271a:	e7d6      	b.n	80226ca <_free_r+0x22>
 802271c:	6820      	ldr	r0, [r4, #0]
 802271e:	1821      	adds	r1, r4, r0
 8022720:	428b      	cmp	r3, r1
 8022722:	bf04      	itt	eq
 8022724:	6819      	ldreq	r1, [r3, #0]
 8022726:	685b      	ldreq	r3, [r3, #4]
 8022728:	6063      	str	r3, [r4, #4]
 802272a:	bf04      	itt	eq
 802272c:	1809      	addeq	r1, r1, r0
 802272e:	6021      	streq	r1, [r4, #0]
 8022730:	6054      	str	r4, [r2, #4]
 8022732:	e7ca      	b.n	80226ca <_free_r+0x22>
 8022734:	bd38      	pop	{r3, r4, r5, pc}
 8022736:	bf00      	nop
 8022738:	24069710 	.word	0x24069710

0802273c <_malloc_usable_size_r>:
 802273c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022740:	1f18      	subs	r0, r3, #4
 8022742:	2b00      	cmp	r3, #0
 8022744:	bfbc      	itt	lt
 8022746:	580b      	ldrlt	r3, [r1, r0]
 8022748:	18c0      	addlt	r0, r0, r3
 802274a:	4770      	bx	lr

0802274c <__ssputs_r>:
 802274c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022750:	688e      	ldr	r6, [r1, #8]
 8022752:	461f      	mov	r7, r3
 8022754:	42be      	cmp	r6, r7
 8022756:	680b      	ldr	r3, [r1, #0]
 8022758:	4682      	mov	sl, r0
 802275a:	460c      	mov	r4, r1
 802275c:	4690      	mov	r8, r2
 802275e:	d82d      	bhi.n	80227bc <__ssputs_r+0x70>
 8022760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022768:	d026      	beq.n	80227b8 <__ssputs_r+0x6c>
 802276a:	6965      	ldr	r5, [r4, #20]
 802276c:	6909      	ldr	r1, [r1, #16]
 802276e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022772:	eba3 0901 	sub.w	r9, r3, r1
 8022776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802277a:	1c7b      	adds	r3, r7, #1
 802277c:	444b      	add	r3, r9
 802277e:	106d      	asrs	r5, r5, #1
 8022780:	429d      	cmp	r5, r3
 8022782:	bf38      	it	cc
 8022784:	461d      	movcc	r5, r3
 8022786:	0553      	lsls	r3, r2, #21
 8022788:	d527      	bpl.n	80227da <__ssputs_r+0x8e>
 802278a:	4629      	mov	r1, r5
 802278c:	f7ff fa04 	bl	8021b98 <_malloc_r>
 8022790:	4606      	mov	r6, r0
 8022792:	b360      	cbz	r0, 80227ee <__ssputs_r+0xa2>
 8022794:	6921      	ldr	r1, [r4, #16]
 8022796:	464a      	mov	r2, r9
 8022798:	f7ff ff4d 	bl	8022636 <memcpy>
 802279c:	89a3      	ldrh	r3, [r4, #12]
 802279e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80227a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80227a6:	81a3      	strh	r3, [r4, #12]
 80227a8:	6126      	str	r6, [r4, #16]
 80227aa:	6165      	str	r5, [r4, #20]
 80227ac:	444e      	add	r6, r9
 80227ae:	eba5 0509 	sub.w	r5, r5, r9
 80227b2:	6026      	str	r6, [r4, #0]
 80227b4:	60a5      	str	r5, [r4, #8]
 80227b6:	463e      	mov	r6, r7
 80227b8:	42be      	cmp	r6, r7
 80227ba:	d900      	bls.n	80227be <__ssputs_r+0x72>
 80227bc:	463e      	mov	r6, r7
 80227be:	6820      	ldr	r0, [r4, #0]
 80227c0:	4632      	mov	r2, r6
 80227c2:	4641      	mov	r1, r8
 80227c4:	f7ff fdfe 	bl	80223c4 <memmove>
 80227c8:	68a3      	ldr	r3, [r4, #8]
 80227ca:	1b9b      	subs	r3, r3, r6
 80227cc:	60a3      	str	r3, [r4, #8]
 80227ce:	6823      	ldr	r3, [r4, #0]
 80227d0:	4433      	add	r3, r6
 80227d2:	6023      	str	r3, [r4, #0]
 80227d4:	2000      	movs	r0, #0
 80227d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80227da:	462a      	mov	r2, r5
 80227dc:	f7ff fadc 	bl	8021d98 <_realloc_r>
 80227e0:	4606      	mov	r6, r0
 80227e2:	2800      	cmp	r0, #0
 80227e4:	d1e0      	bne.n	80227a8 <__ssputs_r+0x5c>
 80227e6:	6921      	ldr	r1, [r4, #16]
 80227e8:	4650      	mov	r0, sl
 80227ea:	f7ff ff5d 	bl	80226a8 <_free_r>
 80227ee:	230c      	movs	r3, #12
 80227f0:	f8ca 3000 	str.w	r3, [sl]
 80227f4:	89a3      	ldrh	r3, [r4, #12]
 80227f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80227fa:	81a3      	strh	r3, [r4, #12]
 80227fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022800:	e7e9      	b.n	80227d6 <__ssputs_r+0x8a>
	...

08022804 <_svfiprintf_r>:
 8022804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022808:	4698      	mov	r8, r3
 802280a:	898b      	ldrh	r3, [r1, #12]
 802280c:	061b      	lsls	r3, r3, #24
 802280e:	b09d      	sub	sp, #116	@ 0x74
 8022810:	4607      	mov	r7, r0
 8022812:	460d      	mov	r5, r1
 8022814:	4614      	mov	r4, r2
 8022816:	d510      	bpl.n	802283a <_svfiprintf_r+0x36>
 8022818:	690b      	ldr	r3, [r1, #16]
 802281a:	b973      	cbnz	r3, 802283a <_svfiprintf_r+0x36>
 802281c:	2140      	movs	r1, #64	@ 0x40
 802281e:	f7ff f9bb 	bl	8021b98 <_malloc_r>
 8022822:	6028      	str	r0, [r5, #0]
 8022824:	6128      	str	r0, [r5, #16]
 8022826:	b930      	cbnz	r0, 8022836 <_svfiprintf_r+0x32>
 8022828:	230c      	movs	r3, #12
 802282a:	603b      	str	r3, [r7, #0]
 802282c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022830:	b01d      	add	sp, #116	@ 0x74
 8022832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022836:	2340      	movs	r3, #64	@ 0x40
 8022838:	616b      	str	r3, [r5, #20]
 802283a:	2300      	movs	r3, #0
 802283c:	9309      	str	r3, [sp, #36]	@ 0x24
 802283e:	2320      	movs	r3, #32
 8022840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022844:	f8cd 800c 	str.w	r8, [sp, #12]
 8022848:	2330      	movs	r3, #48	@ 0x30
 802284a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80229e8 <_svfiprintf_r+0x1e4>
 802284e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022852:	f04f 0901 	mov.w	r9, #1
 8022856:	4623      	mov	r3, r4
 8022858:	469a      	mov	sl, r3
 802285a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802285e:	b10a      	cbz	r2, 8022864 <_svfiprintf_r+0x60>
 8022860:	2a25      	cmp	r2, #37	@ 0x25
 8022862:	d1f9      	bne.n	8022858 <_svfiprintf_r+0x54>
 8022864:	ebba 0b04 	subs.w	fp, sl, r4
 8022868:	d00b      	beq.n	8022882 <_svfiprintf_r+0x7e>
 802286a:	465b      	mov	r3, fp
 802286c:	4622      	mov	r2, r4
 802286e:	4629      	mov	r1, r5
 8022870:	4638      	mov	r0, r7
 8022872:	f7ff ff6b 	bl	802274c <__ssputs_r>
 8022876:	3001      	adds	r0, #1
 8022878:	f000 80a7 	beq.w	80229ca <_svfiprintf_r+0x1c6>
 802287c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802287e:	445a      	add	r2, fp
 8022880:	9209      	str	r2, [sp, #36]	@ 0x24
 8022882:	f89a 3000 	ldrb.w	r3, [sl]
 8022886:	2b00      	cmp	r3, #0
 8022888:	f000 809f 	beq.w	80229ca <_svfiprintf_r+0x1c6>
 802288c:	2300      	movs	r3, #0
 802288e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022896:	f10a 0a01 	add.w	sl, sl, #1
 802289a:	9304      	str	r3, [sp, #16]
 802289c:	9307      	str	r3, [sp, #28]
 802289e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80228a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80228a4:	4654      	mov	r4, sl
 80228a6:	2205      	movs	r2, #5
 80228a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80228ac:	484e      	ldr	r0, [pc, #312]	@ (80229e8 <_svfiprintf_r+0x1e4>)
 80228ae:	f7dd fd2f 	bl	8000310 <memchr>
 80228b2:	9a04      	ldr	r2, [sp, #16]
 80228b4:	b9d8      	cbnz	r0, 80228ee <_svfiprintf_r+0xea>
 80228b6:	06d0      	lsls	r0, r2, #27
 80228b8:	bf44      	itt	mi
 80228ba:	2320      	movmi	r3, #32
 80228bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80228c0:	0711      	lsls	r1, r2, #28
 80228c2:	bf44      	itt	mi
 80228c4:	232b      	movmi	r3, #43	@ 0x2b
 80228c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80228ca:	f89a 3000 	ldrb.w	r3, [sl]
 80228ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80228d0:	d015      	beq.n	80228fe <_svfiprintf_r+0xfa>
 80228d2:	9a07      	ldr	r2, [sp, #28]
 80228d4:	4654      	mov	r4, sl
 80228d6:	2000      	movs	r0, #0
 80228d8:	f04f 0c0a 	mov.w	ip, #10
 80228dc:	4621      	mov	r1, r4
 80228de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80228e2:	3b30      	subs	r3, #48	@ 0x30
 80228e4:	2b09      	cmp	r3, #9
 80228e6:	d94b      	bls.n	8022980 <_svfiprintf_r+0x17c>
 80228e8:	b1b0      	cbz	r0, 8022918 <_svfiprintf_r+0x114>
 80228ea:	9207      	str	r2, [sp, #28]
 80228ec:	e014      	b.n	8022918 <_svfiprintf_r+0x114>
 80228ee:	eba0 0308 	sub.w	r3, r0, r8
 80228f2:	fa09 f303 	lsl.w	r3, r9, r3
 80228f6:	4313      	orrs	r3, r2
 80228f8:	9304      	str	r3, [sp, #16]
 80228fa:	46a2      	mov	sl, r4
 80228fc:	e7d2      	b.n	80228a4 <_svfiprintf_r+0xa0>
 80228fe:	9b03      	ldr	r3, [sp, #12]
 8022900:	1d19      	adds	r1, r3, #4
 8022902:	681b      	ldr	r3, [r3, #0]
 8022904:	9103      	str	r1, [sp, #12]
 8022906:	2b00      	cmp	r3, #0
 8022908:	bfbb      	ittet	lt
 802290a:	425b      	neglt	r3, r3
 802290c:	f042 0202 	orrlt.w	r2, r2, #2
 8022910:	9307      	strge	r3, [sp, #28]
 8022912:	9307      	strlt	r3, [sp, #28]
 8022914:	bfb8      	it	lt
 8022916:	9204      	strlt	r2, [sp, #16]
 8022918:	7823      	ldrb	r3, [r4, #0]
 802291a:	2b2e      	cmp	r3, #46	@ 0x2e
 802291c:	d10a      	bne.n	8022934 <_svfiprintf_r+0x130>
 802291e:	7863      	ldrb	r3, [r4, #1]
 8022920:	2b2a      	cmp	r3, #42	@ 0x2a
 8022922:	d132      	bne.n	802298a <_svfiprintf_r+0x186>
 8022924:	9b03      	ldr	r3, [sp, #12]
 8022926:	1d1a      	adds	r2, r3, #4
 8022928:	681b      	ldr	r3, [r3, #0]
 802292a:	9203      	str	r2, [sp, #12]
 802292c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022930:	3402      	adds	r4, #2
 8022932:	9305      	str	r3, [sp, #20]
 8022934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80229f8 <_svfiprintf_r+0x1f4>
 8022938:	7821      	ldrb	r1, [r4, #0]
 802293a:	2203      	movs	r2, #3
 802293c:	4650      	mov	r0, sl
 802293e:	f7dd fce7 	bl	8000310 <memchr>
 8022942:	b138      	cbz	r0, 8022954 <_svfiprintf_r+0x150>
 8022944:	9b04      	ldr	r3, [sp, #16]
 8022946:	eba0 000a 	sub.w	r0, r0, sl
 802294a:	2240      	movs	r2, #64	@ 0x40
 802294c:	4082      	lsls	r2, r0
 802294e:	4313      	orrs	r3, r2
 8022950:	3401      	adds	r4, #1
 8022952:	9304      	str	r3, [sp, #16]
 8022954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022958:	4824      	ldr	r0, [pc, #144]	@ (80229ec <_svfiprintf_r+0x1e8>)
 802295a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802295e:	2206      	movs	r2, #6
 8022960:	f7dd fcd6 	bl	8000310 <memchr>
 8022964:	2800      	cmp	r0, #0
 8022966:	d036      	beq.n	80229d6 <_svfiprintf_r+0x1d2>
 8022968:	4b21      	ldr	r3, [pc, #132]	@ (80229f0 <_svfiprintf_r+0x1ec>)
 802296a:	bb1b      	cbnz	r3, 80229b4 <_svfiprintf_r+0x1b0>
 802296c:	9b03      	ldr	r3, [sp, #12]
 802296e:	3307      	adds	r3, #7
 8022970:	f023 0307 	bic.w	r3, r3, #7
 8022974:	3308      	adds	r3, #8
 8022976:	9303      	str	r3, [sp, #12]
 8022978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802297a:	4433      	add	r3, r6
 802297c:	9309      	str	r3, [sp, #36]	@ 0x24
 802297e:	e76a      	b.n	8022856 <_svfiprintf_r+0x52>
 8022980:	fb0c 3202 	mla	r2, ip, r2, r3
 8022984:	460c      	mov	r4, r1
 8022986:	2001      	movs	r0, #1
 8022988:	e7a8      	b.n	80228dc <_svfiprintf_r+0xd8>
 802298a:	2300      	movs	r3, #0
 802298c:	3401      	adds	r4, #1
 802298e:	9305      	str	r3, [sp, #20]
 8022990:	4619      	mov	r1, r3
 8022992:	f04f 0c0a 	mov.w	ip, #10
 8022996:	4620      	mov	r0, r4
 8022998:	f810 2b01 	ldrb.w	r2, [r0], #1
 802299c:	3a30      	subs	r2, #48	@ 0x30
 802299e:	2a09      	cmp	r2, #9
 80229a0:	d903      	bls.n	80229aa <_svfiprintf_r+0x1a6>
 80229a2:	2b00      	cmp	r3, #0
 80229a4:	d0c6      	beq.n	8022934 <_svfiprintf_r+0x130>
 80229a6:	9105      	str	r1, [sp, #20]
 80229a8:	e7c4      	b.n	8022934 <_svfiprintf_r+0x130>
 80229aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80229ae:	4604      	mov	r4, r0
 80229b0:	2301      	movs	r3, #1
 80229b2:	e7f0      	b.n	8022996 <_svfiprintf_r+0x192>
 80229b4:	ab03      	add	r3, sp, #12
 80229b6:	9300      	str	r3, [sp, #0]
 80229b8:	462a      	mov	r2, r5
 80229ba:	4b0e      	ldr	r3, [pc, #56]	@ (80229f4 <_svfiprintf_r+0x1f0>)
 80229bc:	a904      	add	r1, sp, #16
 80229be:	4638      	mov	r0, r7
 80229c0:	f3af 8000 	nop.w
 80229c4:	1c42      	adds	r2, r0, #1
 80229c6:	4606      	mov	r6, r0
 80229c8:	d1d6      	bne.n	8022978 <_svfiprintf_r+0x174>
 80229ca:	89ab      	ldrh	r3, [r5, #12]
 80229cc:	065b      	lsls	r3, r3, #25
 80229ce:	f53f af2d 	bmi.w	802282c <_svfiprintf_r+0x28>
 80229d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80229d4:	e72c      	b.n	8022830 <_svfiprintf_r+0x2c>
 80229d6:	ab03      	add	r3, sp, #12
 80229d8:	9300      	str	r3, [sp, #0]
 80229da:	462a      	mov	r2, r5
 80229dc:	4b05      	ldr	r3, [pc, #20]	@ (80229f4 <_svfiprintf_r+0x1f0>)
 80229de:	a904      	add	r1, sp, #16
 80229e0:	4638      	mov	r0, r7
 80229e2:	f000 f879 	bl	8022ad8 <_printf_i>
 80229e6:	e7ed      	b.n	80229c4 <_svfiprintf_r+0x1c0>
 80229e8:	08025c66 	.word	0x08025c66
 80229ec:	08025c70 	.word	0x08025c70
 80229f0:	00000000 	.word	0x00000000
 80229f4:	0802274d 	.word	0x0802274d
 80229f8:	08025c6c 	.word	0x08025c6c

080229fc <_printf_common>:
 80229fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022a00:	4616      	mov	r6, r2
 8022a02:	4698      	mov	r8, r3
 8022a04:	688a      	ldr	r2, [r1, #8]
 8022a06:	690b      	ldr	r3, [r1, #16]
 8022a08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022a0c:	4293      	cmp	r3, r2
 8022a0e:	bfb8      	it	lt
 8022a10:	4613      	movlt	r3, r2
 8022a12:	6033      	str	r3, [r6, #0]
 8022a14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022a18:	4607      	mov	r7, r0
 8022a1a:	460c      	mov	r4, r1
 8022a1c:	b10a      	cbz	r2, 8022a22 <_printf_common+0x26>
 8022a1e:	3301      	adds	r3, #1
 8022a20:	6033      	str	r3, [r6, #0]
 8022a22:	6823      	ldr	r3, [r4, #0]
 8022a24:	0699      	lsls	r1, r3, #26
 8022a26:	bf42      	ittt	mi
 8022a28:	6833      	ldrmi	r3, [r6, #0]
 8022a2a:	3302      	addmi	r3, #2
 8022a2c:	6033      	strmi	r3, [r6, #0]
 8022a2e:	6825      	ldr	r5, [r4, #0]
 8022a30:	f015 0506 	ands.w	r5, r5, #6
 8022a34:	d106      	bne.n	8022a44 <_printf_common+0x48>
 8022a36:	f104 0a19 	add.w	sl, r4, #25
 8022a3a:	68e3      	ldr	r3, [r4, #12]
 8022a3c:	6832      	ldr	r2, [r6, #0]
 8022a3e:	1a9b      	subs	r3, r3, r2
 8022a40:	42ab      	cmp	r3, r5
 8022a42:	dc26      	bgt.n	8022a92 <_printf_common+0x96>
 8022a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022a48:	6822      	ldr	r2, [r4, #0]
 8022a4a:	3b00      	subs	r3, #0
 8022a4c:	bf18      	it	ne
 8022a4e:	2301      	movne	r3, #1
 8022a50:	0692      	lsls	r2, r2, #26
 8022a52:	d42b      	bmi.n	8022aac <_printf_common+0xb0>
 8022a54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022a58:	4641      	mov	r1, r8
 8022a5a:	4638      	mov	r0, r7
 8022a5c:	47c8      	blx	r9
 8022a5e:	3001      	adds	r0, #1
 8022a60:	d01e      	beq.n	8022aa0 <_printf_common+0xa4>
 8022a62:	6823      	ldr	r3, [r4, #0]
 8022a64:	6922      	ldr	r2, [r4, #16]
 8022a66:	f003 0306 	and.w	r3, r3, #6
 8022a6a:	2b04      	cmp	r3, #4
 8022a6c:	bf02      	ittt	eq
 8022a6e:	68e5      	ldreq	r5, [r4, #12]
 8022a70:	6833      	ldreq	r3, [r6, #0]
 8022a72:	1aed      	subeq	r5, r5, r3
 8022a74:	68a3      	ldr	r3, [r4, #8]
 8022a76:	bf0c      	ite	eq
 8022a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022a7c:	2500      	movne	r5, #0
 8022a7e:	4293      	cmp	r3, r2
 8022a80:	bfc4      	itt	gt
 8022a82:	1a9b      	subgt	r3, r3, r2
 8022a84:	18ed      	addgt	r5, r5, r3
 8022a86:	2600      	movs	r6, #0
 8022a88:	341a      	adds	r4, #26
 8022a8a:	42b5      	cmp	r5, r6
 8022a8c:	d11a      	bne.n	8022ac4 <_printf_common+0xc8>
 8022a8e:	2000      	movs	r0, #0
 8022a90:	e008      	b.n	8022aa4 <_printf_common+0xa8>
 8022a92:	2301      	movs	r3, #1
 8022a94:	4652      	mov	r2, sl
 8022a96:	4641      	mov	r1, r8
 8022a98:	4638      	mov	r0, r7
 8022a9a:	47c8      	blx	r9
 8022a9c:	3001      	adds	r0, #1
 8022a9e:	d103      	bne.n	8022aa8 <_printf_common+0xac>
 8022aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022aa8:	3501      	adds	r5, #1
 8022aaa:	e7c6      	b.n	8022a3a <_printf_common+0x3e>
 8022aac:	18e1      	adds	r1, r4, r3
 8022aae:	1c5a      	adds	r2, r3, #1
 8022ab0:	2030      	movs	r0, #48	@ 0x30
 8022ab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022ab6:	4422      	add	r2, r4
 8022ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022ac0:	3302      	adds	r3, #2
 8022ac2:	e7c7      	b.n	8022a54 <_printf_common+0x58>
 8022ac4:	2301      	movs	r3, #1
 8022ac6:	4622      	mov	r2, r4
 8022ac8:	4641      	mov	r1, r8
 8022aca:	4638      	mov	r0, r7
 8022acc:	47c8      	blx	r9
 8022ace:	3001      	adds	r0, #1
 8022ad0:	d0e6      	beq.n	8022aa0 <_printf_common+0xa4>
 8022ad2:	3601      	adds	r6, #1
 8022ad4:	e7d9      	b.n	8022a8a <_printf_common+0x8e>
	...

08022ad8 <_printf_i>:
 8022ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022adc:	7e0f      	ldrb	r7, [r1, #24]
 8022ade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022ae0:	2f78      	cmp	r7, #120	@ 0x78
 8022ae2:	4691      	mov	r9, r2
 8022ae4:	4680      	mov	r8, r0
 8022ae6:	460c      	mov	r4, r1
 8022ae8:	469a      	mov	sl, r3
 8022aea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022aee:	d807      	bhi.n	8022b00 <_printf_i+0x28>
 8022af0:	2f62      	cmp	r7, #98	@ 0x62
 8022af2:	d80a      	bhi.n	8022b0a <_printf_i+0x32>
 8022af4:	2f00      	cmp	r7, #0
 8022af6:	f000 80d2 	beq.w	8022c9e <_printf_i+0x1c6>
 8022afa:	2f58      	cmp	r7, #88	@ 0x58
 8022afc:	f000 80b9 	beq.w	8022c72 <_printf_i+0x19a>
 8022b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022b04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022b08:	e03a      	b.n	8022b80 <_printf_i+0xa8>
 8022b0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022b0e:	2b15      	cmp	r3, #21
 8022b10:	d8f6      	bhi.n	8022b00 <_printf_i+0x28>
 8022b12:	a101      	add	r1, pc, #4	@ (adr r1, 8022b18 <_printf_i+0x40>)
 8022b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022b18:	08022b71 	.word	0x08022b71
 8022b1c:	08022b85 	.word	0x08022b85
 8022b20:	08022b01 	.word	0x08022b01
 8022b24:	08022b01 	.word	0x08022b01
 8022b28:	08022b01 	.word	0x08022b01
 8022b2c:	08022b01 	.word	0x08022b01
 8022b30:	08022b85 	.word	0x08022b85
 8022b34:	08022b01 	.word	0x08022b01
 8022b38:	08022b01 	.word	0x08022b01
 8022b3c:	08022b01 	.word	0x08022b01
 8022b40:	08022b01 	.word	0x08022b01
 8022b44:	08022c85 	.word	0x08022c85
 8022b48:	08022baf 	.word	0x08022baf
 8022b4c:	08022c3f 	.word	0x08022c3f
 8022b50:	08022b01 	.word	0x08022b01
 8022b54:	08022b01 	.word	0x08022b01
 8022b58:	08022ca7 	.word	0x08022ca7
 8022b5c:	08022b01 	.word	0x08022b01
 8022b60:	08022baf 	.word	0x08022baf
 8022b64:	08022b01 	.word	0x08022b01
 8022b68:	08022b01 	.word	0x08022b01
 8022b6c:	08022c47 	.word	0x08022c47
 8022b70:	6833      	ldr	r3, [r6, #0]
 8022b72:	1d1a      	adds	r2, r3, #4
 8022b74:	681b      	ldr	r3, [r3, #0]
 8022b76:	6032      	str	r2, [r6, #0]
 8022b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022b7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022b80:	2301      	movs	r3, #1
 8022b82:	e09d      	b.n	8022cc0 <_printf_i+0x1e8>
 8022b84:	6833      	ldr	r3, [r6, #0]
 8022b86:	6820      	ldr	r0, [r4, #0]
 8022b88:	1d19      	adds	r1, r3, #4
 8022b8a:	6031      	str	r1, [r6, #0]
 8022b8c:	0606      	lsls	r6, r0, #24
 8022b8e:	d501      	bpl.n	8022b94 <_printf_i+0xbc>
 8022b90:	681d      	ldr	r5, [r3, #0]
 8022b92:	e003      	b.n	8022b9c <_printf_i+0xc4>
 8022b94:	0645      	lsls	r5, r0, #25
 8022b96:	d5fb      	bpl.n	8022b90 <_printf_i+0xb8>
 8022b98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022b9c:	2d00      	cmp	r5, #0
 8022b9e:	da03      	bge.n	8022ba8 <_printf_i+0xd0>
 8022ba0:	232d      	movs	r3, #45	@ 0x2d
 8022ba2:	426d      	negs	r5, r5
 8022ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022ba8:	4859      	ldr	r0, [pc, #356]	@ (8022d10 <_printf_i+0x238>)
 8022baa:	230a      	movs	r3, #10
 8022bac:	e011      	b.n	8022bd2 <_printf_i+0xfa>
 8022bae:	6821      	ldr	r1, [r4, #0]
 8022bb0:	6833      	ldr	r3, [r6, #0]
 8022bb2:	0608      	lsls	r0, r1, #24
 8022bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8022bb8:	d402      	bmi.n	8022bc0 <_printf_i+0xe8>
 8022bba:	0649      	lsls	r1, r1, #25
 8022bbc:	bf48      	it	mi
 8022bbe:	b2ad      	uxthmi	r5, r5
 8022bc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8022bc2:	4853      	ldr	r0, [pc, #332]	@ (8022d10 <_printf_i+0x238>)
 8022bc4:	6033      	str	r3, [r6, #0]
 8022bc6:	bf14      	ite	ne
 8022bc8:	230a      	movne	r3, #10
 8022bca:	2308      	moveq	r3, #8
 8022bcc:	2100      	movs	r1, #0
 8022bce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022bd2:	6866      	ldr	r6, [r4, #4]
 8022bd4:	60a6      	str	r6, [r4, #8]
 8022bd6:	2e00      	cmp	r6, #0
 8022bd8:	bfa2      	ittt	ge
 8022bda:	6821      	ldrge	r1, [r4, #0]
 8022bdc:	f021 0104 	bicge.w	r1, r1, #4
 8022be0:	6021      	strge	r1, [r4, #0]
 8022be2:	b90d      	cbnz	r5, 8022be8 <_printf_i+0x110>
 8022be4:	2e00      	cmp	r6, #0
 8022be6:	d04b      	beq.n	8022c80 <_printf_i+0x1a8>
 8022be8:	4616      	mov	r6, r2
 8022bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8022bee:	fb03 5711 	mls	r7, r3, r1, r5
 8022bf2:	5dc7      	ldrb	r7, [r0, r7]
 8022bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022bf8:	462f      	mov	r7, r5
 8022bfa:	42bb      	cmp	r3, r7
 8022bfc:	460d      	mov	r5, r1
 8022bfe:	d9f4      	bls.n	8022bea <_printf_i+0x112>
 8022c00:	2b08      	cmp	r3, #8
 8022c02:	d10b      	bne.n	8022c1c <_printf_i+0x144>
 8022c04:	6823      	ldr	r3, [r4, #0]
 8022c06:	07df      	lsls	r7, r3, #31
 8022c08:	d508      	bpl.n	8022c1c <_printf_i+0x144>
 8022c0a:	6923      	ldr	r3, [r4, #16]
 8022c0c:	6861      	ldr	r1, [r4, #4]
 8022c0e:	4299      	cmp	r1, r3
 8022c10:	bfde      	ittt	le
 8022c12:	2330      	movle	r3, #48	@ 0x30
 8022c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022c18:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8022c1c:	1b92      	subs	r2, r2, r6
 8022c1e:	6122      	str	r2, [r4, #16]
 8022c20:	f8cd a000 	str.w	sl, [sp]
 8022c24:	464b      	mov	r3, r9
 8022c26:	aa03      	add	r2, sp, #12
 8022c28:	4621      	mov	r1, r4
 8022c2a:	4640      	mov	r0, r8
 8022c2c:	f7ff fee6 	bl	80229fc <_printf_common>
 8022c30:	3001      	adds	r0, #1
 8022c32:	d14a      	bne.n	8022cca <_printf_i+0x1f2>
 8022c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022c38:	b004      	add	sp, #16
 8022c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c3e:	6823      	ldr	r3, [r4, #0]
 8022c40:	f043 0320 	orr.w	r3, r3, #32
 8022c44:	6023      	str	r3, [r4, #0]
 8022c46:	4833      	ldr	r0, [pc, #204]	@ (8022d14 <_printf_i+0x23c>)
 8022c48:	2778      	movs	r7, #120	@ 0x78
 8022c4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022c4e:	6823      	ldr	r3, [r4, #0]
 8022c50:	6831      	ldr	r1, [r6, #0]
 8022c52:	061f      	lsls	r7, r3, #24
 8022c54:	f851 5b04 	ldr.w	r5, [r1], #4
 8022c58:	d402      	bmi.n	8022c60 <_printf_i+0x188>
 8022c5a:	065f      	lsls	r7, r3, #25
 8022c5c:	bf48      	it	mi
 8022c5e:	b2ad      	uxthmi	r5, r5
 8022c60:	6031      	str	r1, [r6, #0]
 8022c62:	07d9      	lsls	r1, r3, #31
 8022c64:	bf44      	itt	mi
 8022c66:	f043 0320 	orrmi.w	r3, r3, #32
 8022c6a:	6023      	strmi	r3, [r4, #0]
 8022c6c:	b11d      	cbz	r5, 8022c76 <_printf_i+0x19e>
 8022c6e:	2310      	movs	r3, #16
 8022c70:	e7ac      	b.n	8022bcc <_printf_i+0xf4>
 8022c72:	4827      	ldr	r0, [pc, #156]	@ (8022d10 <_printf_i+0x238>)
 8022c74:	e7e9      	b.n	8022c4a <_printf_i+0x172>
 8022c76:	6823      	ldr	r3, [r4, #0]
 8022c78:	f023 0320 	bic.w	r3, r3, #32
 8022c7c:	6023      	str	r3, [r4, #0]
 8022c7e:	e7f6      	b.n	8022c6e <_printf_i+0x196>
 8022c80:	4616      	mov	r6, r2
 8022c82:	e7bd      	b.n	8022c00 <_printf_i+0x128>
 8022c84:	6833      	ldr	r3, [r6, #0]
 8022c86:	6825      	ldr	r5, [r4, #0]
 8022c88:	6961      	ldr	r1, [r4, #20]
 8022c8a:	1d18      	adds	r0, r3, #4
 8022c8c:	6030      	str	r0, [r6, #0]
 8022c8e:	062e      	lsls	r6, r5, #24
 8022c90:	681b      	ldr	r3, [r3, #0]
 8022c92:	d501      	bpl.n	8022c98 <_printf_i+0x1c0>
 8022c94:	6019      	str	r1, [r3, #0]
 8022c96:	e002      	b.n	8022c9e <_printf_i+0x1c6>
 8022c98:	0668      	lsls	r0, r5, #25
 8022c9a:	d5fb      	bpl.n	8022c94 <_printf_i+0x1bc>
 8022c9c:	8019      	strh	r1, [r3, #0]
 8022c9e:	2300      	movs	r3, #0
 8022ca0:	6123      	str	r3, [r4, #16]
 8022ca2:	4616      	mov	r6, r2
 8022ca4:	e7bc      	b.n	8022c20 <_printf_i+0x148>
 8022ca6:	6833      	ldr	r3, [r6, #0]
 8022ca8:	1d1a      	adds	r2, r3, #4
 8022caa:	6032      	str	r2, [r6, #0]
 8022cac:	681e      	ldr	r6, [r3, #0]
 8022cae:	6862      	ldr	r2, [r4, #4]
 8022cb0:	2100      	movs	r1, #0
 8022cb2:	4630      	mov	r0, r6
 8022cb4:	f7dd fb2c 	bl	8000310 <memchr>
 8022cb8:	b108      	cbz	r0, 8022cbe <_printf_i+0x1e6>
 8022cba:	1b80      	subs	r0, r0, r6
 8022cbc:	6060      	str	r0, [r4, #4]
 8022cbe:	6863      	ldr	r3, [r4, #4]
 8022cc0:	6123      	str	r3, [r4, #16]
 8022cc2:	2300      	movs	r3, #0
 8022cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022cc8:	e7aa      	b.n	8022c20 <_printf_i+0x148>
 8022cca:	6923      	ldr	r3, [r4, #16]
 8022ccc:	4632      	mov	r2, r6
 8022cce:	4649      	mov	r1, r9
 8022cd0:	4640      	mov	r0, r8
 8022cd2:	47d0      	blx	sl
 8022cd4:	3001      	adds	r0, #1
 8022cd6:	d0ad      	beq.n	8022c34 <_printf_i+0x15c>
 8022cd8:	6823      	ldr	r3, [r4, #0]
 8022cda:	079b      	lsls	r3, r3, #30
 8022cdc:	d413      	bmi.n	8022d06 <_printf_i+0x22e>
 8022cde:	68e0      	ldr	r0, [r4, #12]
 8022ce0:	9b03      	ldr	r3, [sp, #12]
 8022ce2:	4298      	cmp	r0, r3
 8022ce4:	bfb8      	it	lt
 8022ce6:	4618      	movlt	r0, r3
 8022ce8:	e7a6      	b.n	8022c38 <_printf_i+0x160>
 8022cea:	2301      	movs	r3, #1
 8022cec:	4632      	mov	r2, r6
 8022cee:	4649      	mov	r1, r9
 8022cf0:	4640      	mov	r0, r8
 8022cf2:	47d0      	blx	sl
 8022cf4:	3001      	adds	r0, #1
 8022cf6:	d09d      	beq.n	8022c34 <_printf_i+0x15c>
 8022cf8:	3501      	adds	r5, #1
 8022cfa:	68e3      	ldr	r3, [r4, #12]
 8022cfc:	9903      	ldr	r1, [sp, #12]
 8022cfe:	1a5b      	subs	r3, r3, r1
 8022d00:	42ab      	cmp	r3, r5
 8022d02:	dcf2      	bgt.n	8022cea <_printf_i+0x212>
 8022d04:	e7eb      	b.n	8022cde <_printf_i+0x206>
 8022d06:	2500      	movs	r5, #0
 8022d08:	f104 0619 	add.w	r6, r4, #25
 8022d0c:	e7f5      	b.n	8022cfa <_printf_i+0x222>
 8022d0e:	bf00      	nop
 8022d10:	08025c77 	.word	0x08025c77
 8022d14:	08025c88 	.word	0x08025c88

08022d18 <__sflush_r>:
 8022d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d20:	0716      	lsls	r6, r2, #28
 8022d22:	4605      	mov	r5, r0
 8022d24:	460c      	mov	r4, r1
 8022d26:	d454      	bmi.n	8022dd2 <__sflush_r+0xba>
 8022d28:	684b      	ldr	r3, [r1, #4]
 8022d2a:	2b00      	cmp	r3, #0
 8022d2c:	dc02      	bgt.n	8022d34 <__sflush_r+0x1c>
 8022d2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	dd48      	ble.n	8022dc6 <__sflush_r+0xae>
 8022d34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022d36:	2e00      	cmp	r6, #0
 8022d38:	d045      	beq.n	8022dc6 <__sflush_r+0xae>
 8022d3a:	2300      	movs	r3, #0
 8022d3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022d40:	682f      	ldr	r7, [r5, #0]
 8022d42:	6a21      	ldr	r1, [r4, #32]
 8022d44:	602b      	str	r3, [r5, #0]
 8022d46:	d030      	beq.n	8022daa <__sflush_r+0x92>
 8022d48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022d4a:	89a3      	ldrh	r3, [r4, #12]
 8022d4c:	0759      	lsls	r1, r3, #29
 8022d4e:	d505      	bpl.n	8022d5c <__sflush_r+0x44>
 8022d50:	6863      	ldr	r3, [r4, #4]
 8022d52:	1ad2      	subs	r2, r2, r3
 8022d54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022d56:	b10b      	cbz	r3, 8022d5c <__sflush_r+0x44>
 8022d58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022d5a:	1ad2      	subs	r2, r2, r3
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022d60:	6a21      	ldr	r1, [r4, #32]
 8022d62:	4628      	mov	r0, r5
 8022d64:	47b0      	blx	r6
 8022d66:	1c43      	adds	r3, r0, #1
 8022d68:	89a3      	ldrh	r3, [r4, #12]
 8022d6a:	d106      	bne.n	8022d7a <__sflush_r+0x62>
 8022d6c:	6829      	ldr	r1, [r5, #0]
 8022d6e:	291d      	cmp	r1, #29
 8022d70:	d82b      	bhi.n	8022dca <__sflush_r+0xb2>
 8022d72:	4a2a      	ldr	r2, [pc, #168]	@ (8022e1c <__sflush_r+0x104>)
 8022d74:	410a      	asrs	r2, r1
 8022d76:	07d6      	lsls	r6, r2, #31
 8022d78:	d427      	bmi.n	8022dca <__sflush_r+0xb2>
 8022d7a:	2200      	movs	r2, #0
 8022d7c:	6062      	str	r2, [r4, #4]
 8022d7e:	04d9      	lsls	r1, r3, #19
 8022d80:	6922      	ldr	r2, [r4, #16]
 8022d82:	6022      	str	r2, [r4, #0]
 8022d84:	d504      	bpl.n	8022d90 <__sflush_r+0x78>
 8022d86:	1c42      	adds	r2, r0, #1
 8022d88:	d101      	bne.n	8022d8e <__sflush_r+0x76>
 8022d8a:	682b      	ldr	r3, [r5, #0]
 8022d8c:	b903      	cbnz	r3, 8022d90 <__sflush_r+0x78>
 8022d8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8022d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022d92:	602f      	str	r7, [r5, #0]
 8022d94:	b1b9      	cbz	r1, 8022dc6 <__sflush_r+0xae>
 8022d96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022d9a:	4299      	cmp	r1, r3
 8022d9c:	d002      	beq.n	8022da4 <__sflush_r+0x8c>
 8022d9e:	4628      	mov	r0, r5
 8022da0:	f7ff fc82 	bl	80226a8 <_free_r>
 8022da4:	2300      	movs	r3, #0
 8022da6:	6363      	str	r3, [r4, #52]	@ 0x34
 8022da8:	e00d      	b.n	8022dc6 <__sflush_r+0xae>
 8022daa:	2301      	movs	r3, #1
 8022dac:	4628      	mov	r0, r5
 8022dae:	47b0      	blx	r6
 8022db0:	4602      	mov	r2, r0
 8022db2:	1c50      	adds	r0, r2, #1
 8022db4:	d1c9      	bne.n	8022d4a <__sflush_r+0x32>
 8022db6:	682b      	ldr	r3, [r5, #0]
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	d0c6      	beq.n	8022d4a <__sflush_r+0x32>
 8022dbc:	2b1d      	cmp	r3, #29
 8022dbe:	d001      	beq.n	8022dc4 <__sflush_r+0xac>
 8022dc0:	2b16      	cmp	r3, #22
 8022dc2:	d11e      	bne.n	8022e02 <__sflush_r+0xea>
 8022dc4:	602f      	str	r7, [r5, #0]
 8022dc6:	2000      	movs	r0, #0
 8022dc8:	e022      	b.n	8022e10 <__sflush_r+0xf8>
 8022dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022dce:	b21b      	sxth	r3, r3
 8022dd0:	e01b      	b.n	8022e0a <__sflush_r+0xf2>
 8022dd2:	690f      	ldr	r7, [r1, #16]
 8022dd4:	2f00      	cmp	r7, #0
 8022dd6:	d0f6      	beq.n	8022dc6 <__sflush_r+0xae>
 8022dd8:	0793      	lsls	r3, r2, #30
 8022dda:	680e      	ldr	r6, [r1, #0]
 8022ddc:	bf08      	it	eq
 8022dde:	694b      	ldreq	r3, [r1, #20]
 8022de0:	600f      	str	r7, [r1, #0]
 8022de2:	bf18      	it	ne
 8022de4:	2300      	movne	r3, #0
 8022de6:	eba6 0807 	sub.w	r8, r6, r7
 8022dea:	608b      	str	r3, [r1, #8]
 8022dec:	f1b8 0f00 	cmp.w	r8, #0
 8022df0:	dde9      	ble.n	8022dc6 <__sflush_r+0xae>
 8022df2:	6a21      	ldr	r1, [r4, #32]
 8022df4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022df6:	4643      	mov	r3, r8
 8022df8:	463a      	mov	r2, r7
 8022dfa:	4628      	mov	r0, r5
 8022dfc:	47b0      	blx	r6
 8022dfe:	2800      	cmp	r0, #0
 8022e00:	dc08      	bgt.n	8022e14 <__sflush_r+0xfc>
 8022e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022e0a:	81a3      	strh	r3, [r4, #12]
 8022e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022e14:	4407      	add	r7, r0
 8022e16:	eba8 0800 	sub.w	r8, r8, r0
 8022e1a:	e7e7      	b.n	8022dec <__sflush_r+0xd4>
 8022e1c:	dfbffffe 	.word	0xdfbffffe

08022e20 <_fflush_r>:
 8022e20:	b538      	push	{r3, r4, r5, lr}
 8022e22:	690b      	ldr	r3, [r1, #16]
 8022e24:	4605      	mov	r5, r0
 8022e26:	460c      	mov	r4, r1
 8022e28:	b913      	cbnz	r3, 8022e30 <_fflush_r+0x10>
 8022e2a:	2500      	movs	r5, #0
 8022e2c:	4628      	mov	r0, r5
 8022e2e:	bd38      	pop	{r3, r4, r5, pc}
 8022e30:	b118      	cbz	r0, 8022e3a <_fflush_r+0x1a>
 8022e32:	6a03      	ldr	r3, [r0, #32]
 8022e34:	b90b      	cbnz	r3, 8022e3a <_fflush_r+0x1a>
 8022e36:	f7ff f8e1 	bl	8021ffc <__sinit>
 8022e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e3e:	2b00      	cmp	r3, #0
 8022e40:	d0f3      	beq.n	8022e2a <_fflush_r+0xa>
 8022e42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022e44:	07d0      	lsls	r0, r2, #31
 8022e46:	d404      	bmi.n	8022e52 <_fflush_r+0x32>
 8022e48:	0599      	lsls	r1, r3, #22
 8022e4a:	d402      	bmi.n	8022e52 <_fflush_r+0x32>
 8022e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022e4e:	f7ff fbe8 	bl	8022622 <__retarget_lock_acquire_recursive>
 8022e52:	4628      	mov	r0, r5
 8022e54:	4621      	mov	r1, r4
 8022e56:	f7ff ff5f 	bl	8022d18 <__sflush_r>
 8022e5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022e5c:	07da      	lsls	r2, r3, #31
 8022e5e:	4605      	mov	r5, r0
 8022e60:	d4e4      	bmi.n	8022e2c <_fflush_r+0xc>
 8022e62:	89a3      	ldrh	r3, [r4, #12]
 8022e64:	059b      	lsls	r3, r3, #22
 8022e66:	d4e1      	bmi.n	8022e2c <_fflush_r+0xc>
 8022e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022e6a:	f7ff fbdb 	bl	8022624 <__retarget_lock_release_recursive>
 8022e6e:	e7dd      	b.n	8022e2c <_fflush_r+0xc>

08022e70 <fiprintf>:
 8022e70:	b40e      	push	{r1, r2, r3}
 8022e72:	b503      	push	{r0, r1, lr}
 8022e74:	4601      	mov	r1, r0
 8022e76:	ab03      	add	r3, sp, #12
 8022e78:	4805      	ldr	r0, [pc, #20]	@ (8022e90 <fiprintf+0x20>)
 8022e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e7e:	6800      	ldr	r0, [r0, #0]
 8022e80:	9301      	str	r3, [sp, #4]
 8022e82:	f000 f8bb 	bl	8022ffc <_vfiprintf_r>
 8022e86:	b002      	add	sp, #8
 8022e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8022e8c:	b003      	add	sp, #12
 8022e8e:	4770      	bx	lr
 8022e90:	24001424 	.word	0x24001424

08022e94 <__swhatbuf_r>:
 8022e94:	b570      	push	{r4, r5, r6, lr}
 8022e96:	460c      	mov	r4, r1
 8022e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e9c:	2900      	cmp	r1, #0
 8022e9e:	b096      	sub	sp, #88	@ 0x58
 8022ea0:	4615      	mov	r5, r2
 8022ea2:	461e      	mov	r6, r3
 8022ea4:	da0d      	bge.n	8022ec2 <__swhatbuf_r+0x2e>
 8022ea6:	89a3      	ldrh	r3, [r4, #12]
 8022ea8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022eac:	f04f 0100 	mov.w	r1, #0
 8022eb0:	bf14      	ite	ne
 8022eb2:	2340      	movne	r3, #64	@ 0x40
 8022eb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022eb8:	2000      	movs	r0, #0
 8022eba:	6031      	str	r1, [r6, #0]
 8022ebc:	602b      	str	r3, [r5, #0]
 8022ebe:	b016      	add	sp, #88	@ 0x58
 8022ec0:	bd70      	pop	{r4, r5, r6, pc}
 8022ec2:	466a      	mov	r2, sp
 8022ec4:	f000 f848 	bl	8022f58 <_fstat_r>
 8022ec8:	2800      	cmp	r0, #0
 8022eca:	dbec      	blt.n	8022ea6 <__swhatbuf_r+0x12>
 8022ecc:	9901      	ldr	r1, [sp, #4]
 8022ece:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022ed2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022ed6:	4259      	negs	r1, r3
 8022ed8:	4159      	adcs	r1, r3
 8022eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022ede:	e7eb      	b.n	8022eb8 <__swhatbuf_r+0x24>

08022ee0 <__smakebuf_r>:
 8022ee0:	898b      	ldrh	r3, [r1, #12]
 8022ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022ee4:	079d      	lsls	r5, r3, #30
 8022ee6:	4606      	mov	r6, r0
 8022ee8:	460c      	mov	r4, r1
 8022eea:	d507      	bpl.n	8022efc <__smakebuf_r+0x1c>
 8022eec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022ef0:	6023      	str	r3, [r4, #0]
 8022ef2:	6123      	str	r3, [r4, #16]
 8022ef4:	2301      	movs	r3, #1
 8022ef6:	6163      	str	r3, [r4, #20]
 8022ef8:	b003      	add	sp, #12
 8022efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022efc:	ab01      	add	r3, sp, #4
 8022efe:	466a      	mov	r2, sp
 8022f00:	f7ff ffc8 	bl	8022e94 <__swhatbuf_r>
 8022f04:	9f00      	ldr	r7, [sp, #0]
 8022f06:	4605      	mov	r5, r0
 8022f08:	4639      	mov	r1, r7
 8022f0a:	4630      	mov	r0, r6
 8022f0c:	f7fe fe44 	bl	8021b98 <_malloc_r>
 8022f10:	b948      	cbnz	r0, 8022f26 <__smakebuf_r+0x46>
 8022f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f16:	059a      	lsls	r2, r3, #22
 8022f18:	d4ee      	bmi.n	8022ef8 <__smakebuf_r+0x18>
 8022f1a:	f023 0303 	bic.w	r3, r3, #3
 8022f1e:	f043 0302 	orr.w	r3, r3, #2
 8022f22:	81a3      	strh	r3, [r4, #12]
 8022f24:	e7e2      	b.n	8022eec <__smakebuf_r+0xc>
 8022f26:	89a3      	ldrh	r3, [r4, #12]
 8022f28:	6020      	str	r0, [r4, #0]
 8022f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022f2e:	81a3      	strh	r3, [r4, #12]
 8022f30:	9b01      	ldr	r3, [sp, #4]
 8022f32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022f36:	b15b      	cbz	r3, 8022f50 <__smakebuf_r+0x70>
 8022f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022f3c:	4630      	mov	r0, r6
 8022f3e:	f000 f81d 	bl	8022f7c <_isatty_r>
 8022f42:	b128      	cbz	r0, 8022f50 <__smakebuf_r+0x70>
 8022f44:	89a3      	ldrh	r3, [r4, #12]
 8022f46:	f023 0303 	bic.w	r3, r3, #3
 8022f4a:	f043 0301 	orr.w	r3, r3, #1
 8022f4e:	81a3      	strh	r3, [r4, #12]
 8022f50:	89a3      	ldrh	r3, [r4, #12]
 8022f52:	431d      	orrs	r5, r3
 8022f54:	81a5      	strh	r5, [r4, #12]
 8022f56:	e7cf      	b.n	8022ef8 <__smakebuf_r+0x18>

08022f58 <_fstat_r>:
 8022f58:	b538      	push	{r3, r4, r5, lr}
 8022f5a:	4d07      	ldr	r5, [pc, #28]	@ (8022f78 <_fstat_r+0x20>)
 8022f5c:	2300      	movs	r3, #0
 8022f5e:	4604      	mov	r4, r0
 8022f60:	4608      	mov	r0, r1
 8022f62:	4611      	mov	r1, r2
 8022f64:	602b      	str	r3, [r5, #0]
 8022f66:	f7df fbc3 	bl	80026f0 <_fstat>
 8022f6a:	1c43      	adds	r3, r0, #1
 8022f6c:	d102      	bne.n	8022f74 <_fstat_r+0x1c>
 8022f6e:	682b      	ldr	r3, [r5, #0]
 8022f70:	b103      	cbz	r3, 8022f74 <_fstat_r+0x1c>
 8022f72:	6023      	str	r3, [r4, #0]
 8022f74:	bd38      	pop	{r3, r4, r5, pc}
 8022f76:	bf00      	nop
 8022f78:	24069850 	.word	0x24069850

08022f7c <_isatty_r>:
 8022f7c:	b538      	push	{r3, r4, r5, lr}
 8022f7e:	4d06      	ldr	r5, [pc, #24]	@ (8022f98 <_isatty_r+0x1c>)
 8022f80:	2300      	movs	r3, #0
 8022f82:	4604      	mov	r4, r0
 8022f84:	4608      	mov	r0, r1
 8022f86:	602b      	str	r3, [r5, #0]
 8022f88:	f7df fbc2 	bl	8002710 <_isatty>
 8022f8c:	1c43      	adds	r3, r0, #1
 8022f8e:	d102      	bne.n	8022f96 <_isatty_r+0x1a>
 8022f90:	682b      	ldr	r3, [r5, #0]
 8022f92:	b103      	cbz	r3, 8022f96 <_isatty_r+0x1a>
 8022f94:	6023      	str	r3, [r4, #0]
 8022f96:	bd38      	pop	{r3, r4, r5, pc}
 8022f98:	24069850 	.word	0x24069850

08022f9c <abort>:
 8022f9c:	b508      	push	{r3, lr}
 8022f9e:	2006      	movs	r0, #6
 8022fa0:	f000 f96c 	bl	802327c <raise>
 8022fa4:	2001      	movs	r0, #1
 8022fa6:	f7df fb53 	bl	8002650 <_exit>

08022faa <__sfputc_r>:
 8022faa:	6893      	ldr	r3, [r2, #8]
 8022fac:	3b01      	subs	r3, #1
 8022fae:	2b00      	cmp	r3, #0
 8022fb0:	b410      	push	{r4}
 8022fb2:	6093      	str	r3, [r2, #8]
 8022fb4:	da08      	bge.n	8022fc8 <__sfputc_r+0x1e>
 8022fb6:	6994      	ldr	r4, [r2, #24]
 8022fb8:	42a3      	cmp	r3, r4
 8022fba:	db01      	blt.n	8022fc0 <__sfputc_r+0x16>
 8022fbc:	290a      	cmp	r1, #10
 8022fbe:	d103      	bne.n	8022fc8 <__sfputc_r+0x1e>
 8022fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022fc4:	f7ff b95a 	b.w	802227c <__swbuf_r>
 8022fc8:	6813      	ldr	r3, [r2, #0]
 8022fca:	1c58      	adds	r0, r3, #1
 8022fcc:	6010      	str	r0, [r2, #0]
 8022fce:	7019      	strb	r1, [r3, #0]
 8022fd0:	4608      	mov	r0, r1
 8022fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022fd6:	4770      	bx	lr

08022fd8 <__sfputs_r>:
 8022fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fda:	4606      	mov	r6, r0
 8022fdc:	460f      	mov	r7, r1
 8022fde:	4614      	mov	r4, r2
 8022fe0:	18d5      	adds	r5, r2, r3
 8022fe2:	42ac      	cmp	r4, r5
 8022fe4:	d101      	bne.n	8022fea <__sfputs_r+0x12>
 8022fe6:	2000      	movs	r0, #0
 8022fe8:	e007      	b.n	8022ffa <__sfputs_r+0x22>
 8022fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022fee:	463a      	mov	r2, r7
 8022ff0:	4630      	mov	r0, r6
 8022ff2:	f7ff ffda 	bl	8022faa <__sfputc_r>
 8022ff6:	1c43      	adds	r3, r0, #1
 8022ff8:	d1f3      	bne.n	8022fe2 <__sfputs_r+0xa>
 8022ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022ffc <_vfiprintf_r>:
 8022ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023000:	460d      	mov	r5, r1
 8023002:	b09d      	sub	sp, #116	@ 0x74
 8023004:	4614      	mov	r4, r2
 8023006:	4698      	mov	r8, r3
 8023008:	4606      	mov	r6, r0
 802300a:	b118      	cbz	r0, 8023014 <_vfiprintf_r+0x18>
 802300c:	6a03      	ldr	r3, [r0, #32]
 802300e:	b90b      	cbnz	r3, 8023014 <_vfiprintf_r+0x18>
 8023010:	f7fe fff4 	bl	8021ffc <__sinit>
 8023014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023016:	07d9      	lsls	r1, r3, #31
 8023018:	d405      	bmi.n	8023026 <_vfiprintf_r+0x2a>
 802301a:	89ab      	ldrh	r3, [r5, #12]
 802301c:	059a      	lsls	r2, r3, #22
 802301e:	d402      	bmi.n	8023026 <_vfiprintf_r+0x2a>
 8023020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023022:	f7ff fafe 	bl	8022622 <__retarget_lock_acquire_recursive>
 8023026:	89ab      	ldrh	r3, [r5, #12]
 8023028:	071b      	lsls	r3, r3, #28
 802302a:	d501      	bpl.n	8023030 <_vfiprintf_r+0x34>
 802302c:	692b      	ldr	r3, [r5, #16]
 802302e:	b99b      	cbnz	r3, 8023058 <_vfiprintf_r+0x5c>
 8023030:	4629      	mov	r1, r5
 8023032:	4630      	mov	r0, r6
 8023034:	f7ff f960 	bl	80222f8 <__swsetup_r>
 8023038:	b170      	cbz	r0, 8023058 <_vfiprintf_r+0x5c>
 802303a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802303c:	07dc      	lsls	r4, r3, #31
 802303e:	d504      	bpl.n	802304a <_vfiprintf_r+0x4e>
 8023040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023044:	b01d      	add	sp, #116	@ 0x74
 8023046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802304a:	89ab      	ldrh	r3, [r5, #12]
 802304c:	0598      	lsls	r0, r3, #22
 802304e:	d4f7      	bmi.n	8023040 <_vfiprintf_r+0x44>
 8023050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023052:	f7ff fae7 	bl	8022624 <__retarget_lock_release_recursive>
 8023056:	e7f3      	b.n	8023040 <_vfiprintf_r+0x44>
 8023058:	2300      	movs	r3, #0
 802305a:	9309      	str	r3, [sp, #36]	@ 0x24
 802305c:	2320      	movs	r3, #32
 802305e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023062:	f8cd 800c 	str.w	r8, [sp, #12]
 8023066:	2330      	movs	r3, #48	@ 0x30
 8023068:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023218 <_vfiprintf_r+0x21c>
 802306c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023070:	f04f 0901 	mov.w	r9, #1
 8023074:	4623      	mov	r3, r4
 8023076:	469a      	mov	sl, r3
 8023078:	f813 2b01 	ldrb.w	r2, [r3], #1
 802307c:	b10a      	cbz	r2, 8023082 <_vfiprintf_r+0x86>
 802307e:	2a25      	cmp	r2, #37	@ 0x25
 8023080:	d1f9      	bne.n	8023076 <_vfiprintf_r+0x7a>
 8023082:	ebba 0b04 	subs.w	fp, sl, r4
 8023086:	d00b      	beq.n	80230a0 <_vfiprintf_r+0xa4>
 8023088:	465b      	mov	r3, fp
 802308a:	4622      	mov	r2, r4
 802308c:	4629      	mov	r1, r5
 802308e:	4630      	mov	r0, r6
 8023090:	f7ff ffa2 	bl	8022fd8 <__sfputs_r>
 8023094:	3001      	adds	r0, #1
 8023096:	f000 80a7 	beq.w	80231e8 <_vfiprintf_r+0x1ec>
 802309a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802309c:	445a      	add	r2, fp
 802309e:	9209      	str	r2, [sp, #36]	@ 0x24
 80230a0:	f89a 3000 	ldrb.w	r3, [sl]
 80230a4:	2b00      	cmp	r3, #0
 80230a6:	f000 809f 	beq.w	80231e8 <_vfiprintf_r+0x1ec>
 80230aa:	2300      	movs	r3, #0
 80230ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80230b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80230b4:	f10a 0a01 	add.w	sl, sl, #1
 80230b8:	9304      	str	r3, [sp, #16]
 80230ba:	9307      	str	r3, [sp, #28]
 80230bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80230c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80230c2:	4654      	mov	r4, sl
 80230c4:	2205      	movs	r2, #5
 80230c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230ca:	4853      	ldr	r0, [pc, #332]	@ (8023218 <_vfiprintf_r+0x21c>)
 80230cc:	f7dd f920 	bl	8000310 <memchr>
 80230d0:	9a04      	ldr	r2, [sp, #16]
 80230d2:	b9d8      	cbnz	r0, 802310c <_vfiprintf_r+0x110>
 80230d4:	06d1      	lsls	r1, r2, #27
 80230d6:	bf44      	itt	mi
 80230d8:	2320      	movmi	r3, #32
 80230da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80230de:	0713      	lsls	r3, r2, #28
 80230e0:	bf44      	itt	mi
 80230e2:	232b      	movmi	r3, #43	@ 0x2b
 80230e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80230e8:	f89a 3000 	ldrb.w	r3, [sl]
 80230ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80230ee:	d015      	beq.n	802311c <_vfiprintf_r+0x120>
 80230f0:	9a07      	ldr	r2, [sp, #28]
 80230f2:	4654      	mov	r4, sl
 80230f4:	2000      	movs	r0, #0
 80230f6:	f04f 0c0a 	mov.w	ip, #10
 80230fa:	4621      	mov	r1, r4
 80230fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023100:	3b30      	subs	r3, #48	@ 0x30
 8023102:	2b09      	cmp	r3, #9
 8023104:	d94b      	bls.n	802319e <_vfiprintf_r+0x1a2>
 8023106:	b1b0      	cbz	r0, 8023136 <_vfiprintf_r+0x13a>
 8023108:	9207      	str	r2, [sp, #28]
 802310a:	e014      	b.n	8023136 <_vfiprintf_r+0x13a>
 802310c:	eba0 0308 	sub.w	r3, r0, r8
 8023110:	fa09 f303 	lsl.w	r3, r9, r3
 8023114:	4313      	orrs	r3, r2
 8023116:	9304      	str	r3, [sp, #16]
 8023118:	46a2      	mov	sl, r4
 802311a:	e7d2      	b.n	80230c2 <_vfiprintf_r+0xc6>
 802311c:	9b03      	ldr	r3, [sp, #12]
 802311e:	1d19      	adds	r1, r3, #4
 8023120:	681b      	ldr	r3, [r3, #0]
 8023122:	9103      	str	r1, [sp, #12]
 8023124:	2b00      	cmp	r3, #0
 8023126:	bfbb      	ittet	lt
 8023128:	425b      	neglt	r3, r3
 802312a:	f042 0202 	orrlt.w	r2, r2, #2
 802312e:	9307      	strge	r3, [sp, #28]
 8023130:	9307      	strlt	r3, [sp, #28]
 8023132:	bfb8      	it	lt
 8023134:	9204      	strlt	r2, [sp, #16]
 8023136:	7823      	ldrb	r3, [r4, #0]
 8023138:	2b2e      	cmp	r3, #46	@ 0x2e
 802313a:	d10a      	bne.n	8023152 <_vfiprintf_r+0x156>
 802313c:	7863      	ldrb	r3, [r4, #1]
 802313e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023140:	d132      	bne.n	80231a8 <_vfiprintf_r+0x1ac>
 8023142:	9b03      	ldr	r3, [sp, #12]
 8023144:	1d1a      	adds	r2, r3, #4
 8023146:	681b      	ldr	r3, [r3, #0]
 8023148:	9203      	str	r2, [sp, #12]
 802314a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802314e:	3402      	adds	r4, #2
 8023150:	9305      	str	r3, [sp, #20]
 8023152:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023228 <_vfiprintf_r+0x22c>
 8023156:	7821      	ldrb	r1, [r4, #0]
 8023158:	2203      	movs	r2, #3
 802315a:	4650      	mov	r0, sl
 802315c:	f7dd f8d8 	bl	8000310 <memchr>
 8023160:	b138      	cbz	r0, 8023172 <_vfiprintf_r+0x176>
 8023162:	9b04      	ldr	r3, [sp, #16]
 8023164:	eba0 000a 	sub.w	r0, r0, sl
 8023168:	2240      	movs	r2, #64	@ 0x40
 802316a:	4082      	lsls	r2, r0
 802316c:	4313      	orrs	r3, r2
 802316e:	3401      	adds	r4, #1
 8023170:	9304      	str	r3, [sp, #16]
 8023172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023176:	4829      	ldr	r0, [pc, #164]	@ (802321c <_vfiprintf_r+0x220>)
 8023178:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802317c:	2206      	movs	r2, #6
 802317e:	f7dd f8c7 	bl	8000310 <memchr>
 8023182:	2800      	cmp	r0, #0
 8023184:	d03f      	beq.n	8023206 <_vfiprintf_r+0x20a>
 8023186:	4b26      	ldr	r3, [pc, #152]	@ (8023220 <_vfiprintf_r+0x224>)
 8023188:	bb1b      	cbnz	r3, 80231d2 <_vfiprintf_r+0x1d6>
 802318a:	9b03      	ldr	r3, [sp, #12]
 802318c:	3307      	adds	r3, #7
 802318e:	f023 0307 	bic.w	r3, r3, #7
 8023192:	3308      	adds	r3, #8
 8023194:	9303      	str	r3, [sp, #12]
 8023196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023198:	443b      	add	r3, r7
 802319a:	9309      	str	r3, [sp, #36]	@ 0x24
 802319c:	e76a      	b.n	8023074 <_vfiprintf_r+0x78>
 802319e:	fb0c 3202 	mla	r2, ip, r2, r3
 80231a2:	460c      	mov	r4, r1
 80231a4:	2001      	movs	r0, #1
 80231a6:	e7a8      	b.n	80230fa <_vfiprintf_r+0xfe>
 80231a8:	2300      	movs	r3, #0
 80231aa:	3401      	adds	r4, #1
 80231ac:	9305      	str	r3, [sp, #20]
 80231ae:	4619      	mov	r1, r3
 80231b0:	f04f 0c0a 	mov.w	ip, #10
 80231b4:	4620      	mov	r0, r4
 80231b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80231ba:	3a30      	subs	r2, #48	@ 0x30
 80231bc:	2a09      	cmp	r2, #9
 80231be:	d903      	bls.n	80231c8 <_vfiprintf_r+0x1cc>
 80231c0:	2b00      	cmp	r3, #0
 80231c2:	d0c6      	beq.n	8023152 <_vfiprintf_r+0x156>
 80231c4:	9105      	str	r1, [sp, #20]
 80231c6:	e7c4      	b.n	8023152 <_vfiprintf_r+0x156>
 80231c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80231cc:	4604      	mov	r4, r0
 80231ce:	2301      	movs	r3, #1
 80231d0:	e7f0      	b.n	80231b4 <_vfiprintf_r+0x1b8>
 80231d2:	ab03      	add	r3, sp, #12
 80231d4:	9300      	str	r3, [sp, #0]
 80231d6:	462a      	mov	r2, r5
 80231d8:	4b12      	ldr	r3, [pc, #72]	@ (8023224 <_vfiprintf_r+0x228>)
 80231da:	a904      	add	r1, sp, #16
 80231dc:	4630      	mov	r0, r6
 80231de:	f3af 8000 	nop.w
 80231e2:	4607      	mov	r7, r0
 80231e4:	1c78      	adds	r0, r7, #1
 80231e6:	d1d6      	bne.n	8023196 <_vfiprintf_r+0x19a>
 80231e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80231ea:	07d9      	lsls	r1, r3, #31
 80231ec:	d405      	bmi.n	80231fa <_vfiprintf_r+0x1fe>
 80231ee:	89ab      	ldrh	r3, [r5, #12]
 80231f0:	059a      	lsls	r2, r3, #22
 80231f2:	d402      	bmi.n	80231fa <_vfiprintf_r+0x1fe>
 80231f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80231f6:	f7ff fa15 	bl	8022624 <__retarget_lock_release_recursive>
 80231fa:	89ab      	ldrh	r3, [r5, #12]
 80231fc:	065b      	lsls	r3, r3, #25
 80231fe:	f53f af1f 	bmi.w	8023040 <_vfiprintf_r+0x44>
 8023202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023204:	e71e      	b.n	8023044 <_vfiprintf_r+0x48>
 8023206:	ab03      	add	r3, sp, #12
 8023208:	9300      	str	r3, [sp, #0]
 802320a:	462a      	mov	r2, r5
 802320c:	4b05      	ldr	r3, [pc, #20]	@ (8023224 <_vfiprintf_r+0x228>)
 802320e:	a904      	add	r1, sp, #16
 8023210:	4630      	mov	r0, r6
 8023212:	f7ff fc61 	bl	8022ad8 <_printf_i>
 8023216:	e7e4      	b.n	80231e2 <_vfiprintf_r+0x1e6>
 8023218:	08025c66 	.word	0x08025c66
 802321c:	08025c70 	.word	0x08025c70
 8023220:	00000000 	.word	0x00000000
 8023224:	08022fd9 	.word	0x08022fd9
 8023228:	08025c6c 	.word	0x08025c6c

0802322c <_raise_r>:
 802322c:	291f      	cmp	r1, #31
 802322e:	b538      	push	{r3, r4, r5, lr}
 8023230:	4605      	mov	r5, r0
 8023232:	460c      	mov	r4, r1
 8023234:	d904      	bls.n	8023240 <_raise_r+0x14>
 8023236:	2316      	movs	r3, #22
 8023238:	6003      	str	r3, [r0, #0]
 802323a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802323e:	bd38      	pop	{r3, r4, r5, pc}
 8023240:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023242:	b112      	cbz	r2, 802324a <_raise_r+0x1e>
 8023244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023248:	b94b      	cbnz	r3, 802325e <_raise_r+0x32>
 802324a:	4628      	mov	r0, r5
 802324c:	f000 f830 	bl	80232b0 <_getpid_r>
 8023250:	4622      	mov	r2, r4
 8023252:	4601      	mov	r1, r0
 8023254:	4628      	mov	r0, r5
 8023256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802325a:	f000 b817 	b.w	802328c <_kill_r>
 802325e:	2b01      	cmp	r3, #1
 8023260:	d00a      	beq.n	8023278 <_raise_r+0x4c>
 8023262:	1c59      	adds	r1, r3, #1
 8023264:	d103      	bne.n	802326e <_raise_r+0x42>
 8023266:	2316      	movs	r3, #22
 8023268:	6003      	str	r3, [r0, #0]
 802326a:	2001      	movs	r0, #1
 802326c:	e7e7      	b.n	802323e <_raise_r+0x12>
 802326e:	2100      	movs	r1, #0
 8023270:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023274:	4620      	mov	r0, r4
 8023276:	4798      	blx	r3
 8023278:	2000      	movs	r0, #0
 802327a:	e7e0      	b.n	802323e <_raise_r+0x12>

0802327c <raise>:
 802327c:	4b02      	ldr	r3, [pc, #8]	@ (8023288 <raise+0xc>)
 802327e:	4601      	mov	r1, r0
 8023280:	6818      	ldr	r0, [r3, #0]
 8023282:	f7ff bfd3 	b.w	802322c <_raise_r>
 8023286:	bf00      	nop
 8023288:	24001424 	.word	0x24001424

0802328c <_kill_r>:
 802328c:	b538      	push	{r3, r4, r5, lr}
 802328e:	4d07      	ldr	r5, [pc, #28]	@ (80232ac <_kill_r+0x20>)
 8023290:	2300      	movs	r3, #0
 8023292:	4604      	mov	r4, r0
 8023294:	4608      	mov	r0, r1
 8023296:	4611      	mov	r1, r2
 8023298:	602b      	str	r3, [r5, #0]
 802329a:	f7df f9c9 	bl	8002630 <_kill>
 802329e:	1c43      	adds	r3, r0, #1
 80232a0:	d102      	bne.n	80232a8 <_kill_r+0x1c>
 80232a2:	682b      	ldr	r3, [r5, #0]
 80232a4:	b103      	cbz	r3, 80232a8 <_kill_r+0x1c>
 80232a6:	6023      	str	r3, [r4, #0]
 80232a8:	bd38      	pop	{r3, r4, r5, pc}
 80232aa:	bf00      	nop
 80232ac:	24069850 	.word	0x24069850

080232b0 <_getpid_r>:
 80232b0:	f7df b9b6 	b.w	8002620 <_getpid>

080232b4 <_init>:
 80232b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232b6:	bf00      	nop
 80232b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80232ba:	bc08      	pop	{r3}
 80232bc:	469e      	mov	lr, r3
 80232be:	4770      	bx	lr

080232c0 <_fini>:
 80232c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232c2:	bf00      	nop
 80232c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80232c6:	bc08      	pop	{r3}
 80232c8:	469e      	mov	lr, r3
 80232ca:	4770      	bx	lr
