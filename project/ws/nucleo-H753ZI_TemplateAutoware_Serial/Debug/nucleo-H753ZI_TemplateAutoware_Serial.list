
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013cc4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a5c  08013f64  08013f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080159c0  080159c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  080159c8  080159c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015a08  08015a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013ec  24000000  08015a0c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00032140  240013ec  08016df8  000183ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2403352c  08016df8  0001852c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000183ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aa42  00000000  00000000  0001841a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051e0  00000000  00000000  00042e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e60  00000000  00000000  00048040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001779  00000000  00000000  00049ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f317  00000000  00000000  0004b619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ee50  00000000  00000000  0008a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018ef3e  00000000  00000000  000b9780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  002486be  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087d0  00000000  00000000  00248734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00250f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013ec 	.word	0x240013ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013f4c 	.word	0x08013f4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f0 	.word	0x240013f0
 80002dc:	08013f4c 	.word	0x08013f4c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000314:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000318:	f000 b96a 	b.w	80005f0 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	460c      	mov	r4, r1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14e      	bne.n	80003de <__udivmoddi4+0xaa>
 8000340:	4694      	mov	ip, r2
 8000342:	458c      	cmp	ip, r1
 8000344:	4686      	mov	lr, r0
 8000346:	fab2 f282 	clz	r2, r2
 800034a:	d962      	bls.n	8000412 <__udivmoddi4+0xde>
 800034c:	b14a      	cbz	r2, 8000362 <__udivmoddi4+0x2e>
 800034e:	f1c2 0320 	rsb	r3, r2, #32
 8000352:	4091      	lsls	r1, r2
 8000354:	fa20 f303 	lsr.w	r3, r0, r3
 8000358:	fa0c fc02 	lsl.w	ip, ip, r2
 800035c:	4319      	orrs	r1, r3
 800035e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f f68c 	uxth.w	r6, ip
 800036a:	fbb1 f4f7 	udiv	r4, r1, r7
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb07 1114 	mls	r1, r7, r4, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb04 f106 	mul.w	r1, r4, r6
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800038a:	f080 8112 	bcs.w	80005b2 <__udivmoddi4+0x27e>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 810f 	bls.w	80005b2 <__udivmoddi4+0x27e>
 8000394:	3c02      	subs	r4, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a59      	subs	r1, r3, r1
 800039a:	fa1f f38e 	uxth.w	r3, lr
 800039e:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a2:	fb07 1110 	mls	r1, r7, r0, r1
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f606 	mul.w	r6, r0, r6
 80003ae:	429e      	cmp	r6, r3
 80003b0:	d90a      	bls.n	80003c8 <__udivmoddi4+0x94>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003ba:	f080 80fc 	bcs.w	80005b6 <__udivmoddi4+0x282>
 80003be:	429e      	cmp	r6, r3
 80003c0:	f240 80f9 	bls.w	80005b6 <__udivmoddi4+0x282>
 80003c4:	4463      	add	r3, ip
 80003c6:	3802      	subs	r0, #2
 80003c8:	1b9b      	subs	r3, r3, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	2100      	movs	r1, #0
 80003d0:	b11d      	cbz	r5, 80003da <__udivmoddi4+0xa6>
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	e9c5 3200 	strd	r3, r2, [r5]
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d905      	bls.n	80003ee <__udivmoddi4+0xba>
 80003e2:	b10d      	cbz	r5, 80003e8 <__udivmoddi4+0xb4>
 80003e4:	e9c5 0100 	strd	r0, r1, [r5]
 80003e8:	2100      	movs	r1, #0
 80003ea:	4608      	mov	r0, r1
 80003ec:	e7f5      	b.n	80003da <__udivmoddi4+0xa6>
 80003ee:	fab3 f183 	clz	r1, r3
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d146      	bne.n	8000484 <__udivmoddi4+0x150>
 80003f6:	42a3      	cmp	r3, r4
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xcc>
 80003fa:	4290      	cmp	r0, r2
 80003fc:	f0c0 80f0 	bcc.w	80005e0 <__udivmoddi4+0x2ac>
 8000400:	1a86      	subs	r6, r0, r2
 8000402:	eb64 0303 	sbc.w	r3, r4, r3
 8000406:	2001      	movs	r0, #1
 8000408:	2d00      	cmp	r5, #0
 800040a:	d0e6      	beq.n	80003da <__udivmoddi4+0xa6>
 800040c:	e9c5 6300 	strd	r6, r3, [r5]
 8000410:	e7e3      	b.n	80003da <__udivmoddi4+0xa6>
 8000412:	2a00      	cmp	r2, #0
 8000414:	f040 8090 	bne.w	8000538 <__udivmoddi4+0x204>
 8000418:	eba1 040c 	sub.w	r4, r1, ip
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	2101      	movs	r1, #1
 8000426:	fbb4 f6f8 	udiv	r6, r4, r8
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb08 4416 	mls	r4, r8, r6, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb07 f006 	mul.w	r0, r7, r6
 800043a:	4298      	cmp	r0, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x11c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x11a>
 8000448:	4298      	cmp	r0, r3
 800044a:	f200 80cd 	bhi.w	80005e8 <__udivmoddi4+0x2b4>
 800044e:	4626      	mov	r6, r4
 8000450:	1a1c      	subs	r4, r3, r0
 8000452:	fa1f f38e 	uxth.w	r3, lr
 8000456:	fbb4 f0f8 	udiv	r0, r4, r8
 800045a:	fb08 4410 	mls	r4, r8, r0, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb00 f707 	mul.w	r7, r0, r7
 8000466:	429f      	cmp	r7, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x148>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x146>
 8000474:	429f      	cmp	r7, r3
 8000476:	f200 80b0 	bhi.w	80005da <__udivmoddi4+0x2a6>
 800047a:	4620      	mov	r0, r4
 800047c:	1bdb      	subs	r3, r3, r7
 800047e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000482:	e7a5      	b.n	80003d0 <__udivmoddi4+0x9c>
 8000484:	f1c1 0620 	rsb	r6, r1, #32
 8000488:	408b      	lsls	r3, r1
 800048a:	fa22 f706 	lsr.w	r7, r2, r6
 800048e:	431f      	orrs	r7, r3
 8000490:	fa20 fc06 	lsr.w	ip, r0, r6
 8000494:	fa04 f301 	lsl.w	r3, r4, r1
 8000498:	ea43 030c 	orr.w	r3, r3, ip
 800049c:	40f4      	lsrs	r4, r6
 800049e:	fa00 f801 	lsl.w	r8, r0, r1
 80004a2:	0c38      	lsrs	r0, r7, #16
 80004a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004a8:	fbb4 fef0 	udiv	lr, r4, r0
 80004ac:	fa1f fc87 	uxth.w	ip, r7
 80004b0:	fb00 441e 	mls	r4, r0, lr, r4
 80004b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b8:	fb0e f90c 	mul.w	r9, lr, ip
 80004bc:	45a1      	cmp	r9, r4
 80004be:	fa02 f201 	lsl.w	r2, r2, r1
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x1a6>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004ca:	f080 8084 	bcs.w	80005d6 <__udivmoddi4+0x2a2>
 80004ce:	45a1      	cmp	r9, r4
 80004d0:	f240 8081 	bls.w	80005d6 <__udivmoddi4+0x2a2>
 80004d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d8:	443c      	add	r4, r7
 80004da:	eba4 0409 	sub.w	r4, r4, r9
 80004de:	fa1f f983 	uxth.w	r9, r3
 80004e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004e6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f2:	45a4      	cmp	ip, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1d2>
 80004f6:	193c      	adds	r4, r7, r4
 80004f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004fc:	d267      	bcs.n	80005ce <__udivmoddi4+0x29a>
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d965      	bls.n	80005ce <__udivmoddi4+0x29a>
 8000502:	3b02      	subs	r3, #2
 8000504:	443c      	add	r4, r7
 8000506:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800050a:	fba0 9302 	umull	r9, r3, r0, r2
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	429c      	cmp	r4, r3
 8000514:	46ce      	mov	lr, r9
 8000516:	469c      	mov	ip, r3
 8000518:	d351      	bcc.n	80005be <__udivmoddi4+0x28a>
 800051a:	d04e      	beq.n	80005ba <__udivmoddi4+0x286>
 800051c:	b155      	cbz	r5, 8000534 <__udivmoddi4+0x200>
 800051e:	ebb8 030e 	subs.w	r3, r8, lr
 8000522:	eb64 040c 	sbc.w	r4, r4, ip
 8000526:	fa04 f606 	lsl.w	r6, r4, r6
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431e      	orrs	r6, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	e9c5 6400 	strd	r6, r4, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	e750      	b.n	80003da <__udivmoddi4+0xa6>
 8000538:	f1c2 0320 	rsb	r3, r2, #32
 800053c:	fa20 f103 	lsr.w	r1, r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa24 f303 	lsr.w	r3, r4, r3
 8000548:	4094      	lsls	r4, r2
 800054a:	430c      	orrs	r4, r1
 800054c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000550:	fa00 fe02 	lsl.w	lr, r0, r2
 8000554:	fa1f f78c 	uxth.w	r7, ip
 8000558:	fbb3 f0f8 	udiv	r0, r3, r8
 800055c:	fb08 3110 	mls	r1, r8, r0, r3
 8000560:	0c23      	lsrs	r3, r4, #16
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	fb00 f107 	mul.w	r1, r0, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x24c>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000576:	d22c      	bcs.n	80005d2 <__udivmoddi4+0x29e>
 8000578:	4299      	cmp	r1, r3
 800057a:	d92a      	bls.n	80005d2 <__udivmoddi4+0x29e>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1a5b      	subs	r3, r3, r1
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb3 f1f8 	udiv	r1, r3, r8
 8000588:	fb08 3311 	mls	r3, r8, r1, r3
 800058c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000590:	fb01 f307 	mul.w	r3, r1, r7
 8000594:	42a3      	cmp	r3, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x276>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a0:	d213      	bcs.n	80005ca <__udivmoddi4+0x296>
 80005a2:	42a3      	cmp	r3, r4
 80005a4:	d911      	bls.n	80005ca <__udivmoddi4+0x296>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	1ae4      	subs	r4, r4, r3
 80005ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b0:	e739      	b.n	8000426 <__udivmoddi4+0xf2>
 80005b2:	4604      	mov	r4, r0
 80005b4:	e6f0      	b.n	8000398 <__udivmoddi4+0x64>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e706      	b.n	80003c8 <__udivmoddi4+0x94>
 80005ba:	45c8      	cmp	r8, r9
 80005bc:	d2ae      	bcs.n	800051c <__udivmoddi4+0x1e8>
 80005be:	ebb9 0e02 	subs.w	lr, r9, r2
 80005c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7a8      	b.n	800051c <__udivmoddi4+0x1e8>
 80005ca:	4631      	mov	r1, r6
 80005cc:	e7ed      	b.n	80005aa <__udivmoddi4+0x276>
 80005ce:	4603      	mov	r3, r0
 80005d0:	e799      	b.n	8000506 <__udivmoddi4+0x1d2>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e7d4      	b.n	8000580 <__udivmoddi4+0x24c>
 80005d6:	46d6      	mov	lr, sl
 80005d8:	e77f      	b.n	80004da <__udivmoddi4+0x1a6>
 80005da:	4463      	add	r3, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e74d      	b.n	800047c <__udivmoddi4+0x148>
 80005e0:	4606      	mov	r6, r0
 80005e2:	4623      	mov	r3, r4
 80005e4:	4608      	mov	r0, r1
 80005e6:	e70f      	b.n	8000408 <__udivmoddi4+0xd4>
 80005e8:	3e02      	subs	r6, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	e730      	b.n	8000450 <__udivmoddi4+0x11c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_ADC1_Init+0x108>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000620:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800065e:	2203      	movs	r2, #3
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000678:	f001 fee2 	bl	8002440 <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 fd1d 	bl	80010c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000692:	f002 ff05 	bl	80034a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800069c:	f000 fd10 	bl	80010c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x10c>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2306      	movs	r3, #6
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006c4:	f002 f940 	bl	8002948 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fcf7 	bl	80010c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_ADC1_Init+0x110>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d6:	230c      	movs	r3, #12
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006e0:	f002 f932 	bl	8002948 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ea:	f000 fce9 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24001408 	.word	0x24001408
 80006fc:	40022000 	.word	0x40022000
 8000700:	19200040 	.word	0x19200040
 8000704:	08600004 	.word	0x08600004

08000708 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ba      	sub	sp, #232	@ 0xe8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	22c0      	movs	r2, #192	@ 0xc0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f013 f99d 	bl	8013a68 <memset>
  if(adcHandle->Instance==ADC1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <HAL_ADC_MspInit+0x140>)
 8000734:	4293      	cmp	r3, r2
 8000736:	f040 8083 	bne.w	8000840 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800074a:	2325      	movs	r3, #37	@ 0x25
 800074c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075e:	2320      	movs	r3, #32
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f007 f8d4 	bl	8007920 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800077e:	f000 fc9f 	bl	80010c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000788:	4a30      	ldr	r2, [pc, #192]	@ (800084c <HAL_ADC_MspInit+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	@ (8000850 <HAL_ADC_MspInit+0x148>)
 80007da:	f005 fe5b 	bl	8006494 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <HAL_ADC_MspInit+0x150>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800081c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000826:	f002 fff9 	bl	800381c <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8000830:	f000 fc46 	bl	80010c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000838:	64da      	str	r2, [r3, #76]	@ 0x4c
 800083a:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	37e8      	adds	r7, #232	@ 0xe8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40022000 	.word	0x40022000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021400 	.word	0x58021400
 8000854:	2400146c 	.word	0x2400146c
 8000858:	40020410 	.word	0x40020410

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000868:	4a1f      	ldr	r2, [pc, #124]	@ (80008e8 <MX_DMA_Init+0x8c>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200b      	movs	r0, #11
 80008a4:	f002 ff92 	bl	80037cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008a8:	200b      	movs	r0, #11
 80008aa:	f002 ffa9 	bl	8003800 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	200c      	movs	r0, #12
 80008b4:	f002 ff8a 	bl	80037cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008b8:	200c      	movs	r0, #12
 80008ba:	f002 ffa1 	bl	8003800 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	2039      	movs	r0, #57	@ 0x39
 80008c4:	f002 ff82 	bl	80037cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008c8:	2039      	movs	r0, #57	@ 0x39
 80008ca:	f002 ff99 	bl	8003800 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203a      	movs	r0, #58	@ 0x3a
 80008d4:	f002 ff7a 	bl	80037cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008d8:	203a      	movs	r0, #58	@ 0x3a
 80008da:	f002 ff91 	bl	8003800 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	58024400 	.word	0x58024400

080008ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 80008f0:	480a      	ldr	r0, [pc, #40]	@ (800091c <MX_FREERTOS_Init+0x30>)
 80008f2:	f00c fa4a 	bl	800cd8a <osMutexNew>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <MX_FREERTOS_Init+0x34>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <MX_FREERTOS_Init+0x38>)
 80008fe:	f00c fa44 	bl	800cd8a <osMutexNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <MX_FREERTOS_Init+0x3c>)
 8000906:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8000908:	4a08      	ldr	r2, [pc, #32]	@ (800092c <MX_FREERTOS_Init+0x40>)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_FREERTOS_Init+0x44>)
 800090e:	f00c f89e 	bl	800ca4e <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <MX_FREERTOS_Init+0x48>)
 8000916:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	08013fe8 	.word	0x08013fe8
 8000920:	240014ec 	.word	0x240014ec
 8000924:	08013ff8 	.word	0x08013ff8
 8000928:	240014f0 	.word	0x240014f0
 800092c:	08013fc4 	.word	0x08013fc4
 8000930:	08001541 	.word	0x08001541
 8000934:	240014e4 	.word	0x240014e4

08000938 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	@ 0x38
 800093c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b9e      	ldr	r3, [pc, #632]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a9c      	ldr	r2, [pc, #624]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b9a      	ldr	r3, [pc, #616]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096c:	4b96      	ldr	r3, [pc, #600]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a95      	ldr	r2, [pc, #596]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b92      	ldr	r3, [pc, #584]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b8f      	ldr	r3, [pc, #572]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a8d      	ldr	r2, [pc, #564]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b8b      	ldr	r3, [pc, #556]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b87      	ldr	r3, [pc, #540]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	4a86      	ldr	r2, [pc, #536]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b8:	4b83      	ldr	r3, [pc, #524]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b80      	ldr	r3, [pc, #512]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	4a7e      	ldr	r2, [pc, #504]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d6:	4b7c      	ldr	r3, [pc, #496]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b78      	ldr	r3, [pc, #480]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	4a77      	ldr	r2, [pc, #476]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f4:	4b74      	ldr	r3, [pc, #464]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a02:	4b71      	ldr	r3, [pc, #452]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	4a6f      	ldr	r2, [pc, #444]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a12:	4b6d      	ldr	r3, [pc, #436]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a20:	4b69      	ldr	r3, [pc, #420]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	4a68      	ldr	r2, [pc, #416]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a30:	4b65      	ldr	r3, [pc, #404]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a44:	4861      	ldr	r0, [pc, #388]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000a46:	f005 fed5 	bl	80067f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a50:	485f      	ldr	r0, [pc, #380]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000a52:	f005 fecf 	bl	80067f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	485e      	ldr	r0, [pc, #376]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000a5c:	f005 feca 	bl	80067f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4858      	ldr	r0, [pc, #352]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a76:	f005 fd0d 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a7a:	2332      	movs	r3, #50	@ 0x32
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4850      	ldr	r0, [pc, #320]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a96:	f005 fcfd 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a9a:	2386      	movs	r3, #134	@ 0x86
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aaa:	230b      	movs	r3, #11
 8000aac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4849      	ldr	r0, [pc, #292]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000ab6:	f005 fced 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aba:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	483e      	ldr	r0, [pc, #248]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000ad4:	f005 fcde 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	483c      	ldr	r0, [pc, #240]	@ (8000be0 <MX_GPIO_Init+0x2a8>)
 8000af0:	f005 fcd0 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b06:	230b      	movs	r3, #11
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000b12:	f005 fcbf 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4828      	ldr	r0, [pc, #160]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000b30:	f005 fcb0 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4826      	ldr	r0, [pc, #152]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b4a:	f005 fca3 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b4e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b60:	230a      	movs	r3, #10
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000b6c:	f005 fc92 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4815      	ldr	r0, [pc, #84]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b8e:	f005 fc81 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b92:	2302      	movs	r3, #2
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480a      	ldr	r0, [pc, #40]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000baa:	f005 fc73 	bl	8006494 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2107      	movs	r1, #7
 8000bb2:	2028      	movs	r0, #40	@ 0x28
 8000bb4:	f002 fe0a 	bl	80037cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb8:	2028      	movs	r0, #40	@ 0x28
 8000bba:	f002 fe21 	bl	8003800 <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	@ 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020400 	.word	0x58020400
 8000bd0:	58020c00 	.word	0x58020c00
 8000bd4:	58021000 	.word	0x58021000
 8000bd8:	58020800 	.word	0x58020800
 8000bdc:	58020000 	.word	0x58020000
 8000be0:	58021400 	.word	0x58021400
 8000be4:	58021800 	.word	0x58021800

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f001 f9d8 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f81c 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f7ff fea0 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf8:	f7ff fe30 	bl	800085c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000bfc:	f000 fe9c 	bl	8001938 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c00:	f7ff fcf8 	bl	80005f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c04:	f000 fe4c 	bl	80018a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4906      	ldr	r1, [pc, #24]	@ (8000c24 <main+0x3c>)
 8000c0c:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <main+0x40>)
 8000c0e:	f001 fdb9 	bl	8002784 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c12:	f00b febd 	bl	800c990 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c16:	f7ff fe69 	bl	80008ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c1a:	f00b fedd 	bl	800c9d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1e:	bf00      	nop
 8000c20:	e7fd      	b.n	8000c1e <main+0x36>
 8000c22:	bf00      	nop
 8000c24:	240014f8 	.word	0x240014f8
 8000c28:	24001408 	.word	0x24001408

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09e      	sub	sp, #120	@ 0x78
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c36:	224c      	movs	r2, #76	@ 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f012 ff14 	bl	8013a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f012 ff0d 	bl	8013a68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f005 fe04 	bl	800685c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b49      	ldr	r3, [pc, #292]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5c:	4a48      	ldr	r2, [pc, #288]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c64:	4b46      	ldr	r3, [pc, #280]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b45      	ldr	r3, [pc, #276]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a44      	ldr	r2, [pc, #272]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b42      	ldr	r3, [pc, #264]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c86:	bf00      	nop
 8000c88:	4b3e      	ldr	r3, [pc, #248]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c94:	d1f8      	bne.n	8000c88 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b3c      	ldr	r3, [pc, #240]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ca6:	4b38      	ldr	r3, [pc, #224]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a31      	ldr	r2, [pc, #196]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce6:	bf00      	nop
 8000ce8:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf4:	d1f8      	bne.n	8000ce8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000d06:	2301      	movs	r3, #1
 8000d08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000d0e:	23f0      	movs	r3, #240	@ 0xf0
 8000d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d16:	2304      	movs	r3, #4
 8000d18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fdce 	bl	80068d0 <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000d3a:	f000 f9c1 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	233f      	movs	r3, #63	@ 0x3f
 8000d40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2303      	movs	r3, #3
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d52:	2340      	movs	r3, #64	@ 0x40
 8000d54:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5c:	2340      	movs	r3, #64	@ 0x40
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2104      	movs	r1, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 fa0c 	bl	8007184 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d72:	f000 f9a5 	bl	80010c0 <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3778      	adds	r7, #120	@ 0x78
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58000400 	.word	0x58000400
 8000d84:	58024800 	.word	0x58024800
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d9c:	d11a      	bne.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x48>

    unsigned int uiTick = osKernelGetTickCount();
 8000d9e:	f00b fe41 	bl	800ca24 <osKernelGetTickCount>
 8000da2:	60f8      	str	r0, [r7, #12]

    if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x50>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d910      	bls.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x48>
    {
      ucButtonState ^= 1;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000dbe:	701a      	strb	r2, [r3, #0]
      uiJoySWTickOnPress = uiTick;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x50>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6013      	str	r3, [r2, #0]
      osThreadFlagsSet(TaskControleHandle, 0x1000);
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00b fed0 	bl	800cb74 <osThreadFlagsSet>
    }
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	24001500 	.word	0x24001500
 8000de0:	240014f4 	.word	0x240014f4
 8000de4:	240014e4 	.word	0x240014e4

08000de8 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4aa6      	ldr	r2, [pc, #664]	@ (800108c <HAL_UART_RxCpltCallback+0x2a4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	f040 8145 	bne.w	8001084 <HAL_UART_RxCpltCallback+0x29c>
  {

    // State machine state
    unsigned int ucSmState = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	72fb      	strb	r3, [r7, #11]
 8000e02:	e136      	b.n	8001072 <HAL_UART_RxCpltCallback+0x28a>
    {
      switch (ucSmState)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b28      	cmp	r3, #40	@ 0x28
 8000e08:	f200 812c 	bhi.w	8001064 <HAL_UART_RxCpltCallback+0x27c>
 8000e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e14 <HAL_UART_RxCpltCallback+0x2c>)
 8000e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e12:	bf00      	nop
 8000e14:	08000eb9 	.word	0x08000eb9
 8000e18:	08000ecb 	.word	0x08000ecb
 8000e1c:	08001065 	.word	0x08001065
 8000e20:	08001065 	.word	0x08001065
 8000e24:	08001065 	.word	0x08001065
 8000e28:	08001065 	.word	0x08001065
 8000e2c:	08001065 	.word	0x08001065
 8000e30:	08001065 	.word	0x08001065
 8000e34:	08001065 	.word	0x08001065
 8000e38:	08001065 	.word	0x08001065
 8000e3c:	08000f95 	.word	0x08000f95
 8000e40:	08000fa5 	.word	0x08000fa5
 8000e44:	08000fb5 	.word	0x08000fb5
 8000e48:	08000fc5 	.word	0x08000fc5
 8000e4c:	08001065 	.word	0x08001065
 8000e50:	08001065 	.word	0x08001065
 8000e54:	08001065 	.word	0x08001065
 8000e58:	08001065 	.word	0x08001065
 8000e5c:	08001065 	.word	0x08001065
 8000e60:	08001065 	.word	0x08001065
 8000e64:	08000fd5 	.word	0x08000fd5
 8000e68:	08000fe5 	.word	0x08000fe5
 8000e6c:	08000ff5 	.word	0x08000ff5
 8000e70:	08001005 	.word	0x08001005
 8000e74:	08001065 	.word	0x08001065
 8000e78:	08001065 	.word	0x08001065
 8000e7c:	08001065 	.word	0x08001065
 8000e80:	08001065 	.word	0x08001065
 8000e84:	08001065 	.word	0x08001065
 8000e88:	08001065 	.word	0x08001065
 8000e8c:	08001015 	.word	0x08001015
 8000e90:	08001025 	.word	0x08001025
 8000e94:	08001035 	.word	0x08001035
 8000e98:	08001045 	.word	0x08001045
 8000e9c:	08001065 	.word	0x08001065
 8000ea0:	08001065 	.word	0x08001065
 8000ea4:	08001065 	.word	0x08001065
 8000ea8:	08001065 	.word	0x08001065
 8000eac:	08001065 	.word	0x08001065
 8000eb0:	08001065 	.word	0x08001065
 8000eb4:	08001055 	.word	0x08001055
      {
        case 0:
          if('#' == ucDmaBuffer[i])
 8000eb8:	7afb      	ldrb	r3, [r7, #11]
 8000eba:	4a75      	ldr	r2, [pc, #468]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	2b23      	cmp	r3, #35	@ 0x23
 8000ec0:	f040 80d3 	bne.w	800106a <HAL_UART_RxCpltCallback+0x282>
          {
            ucSmState = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000ec8:	e0cf      	b.n	800106a <HAL_UART_RxCpltCallback+0x282>

        case 1:
          switch (ucDmaBuffer[i])
 8000eca:	7afb      	ldrb	r3, [r7, #11]
 8000ecc:	4a70      	ldr	r2, [pc, #448]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	3b24      	subs	r3, #36	@ 0x24
 8000ed2:	2b20      	cmp	r3, #32
 8000ed4:	d85a      	bhi.n	8000f8c <HAL_UART_RxCpltCallback+0x1a4>
 8000ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8000edc <HAL_UART_RxCpltCallback+0xf4>)
 8000ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000edc:	08000f79 	.word	0x08000f79
 8000ee0:	08000f8d 	.word	0x08000f8d
 8000ee4:	08000f8d 	.word	0x08000f8d
 8000ee8:	08000f8d 	.word	0x08000f8d
 8000eec:	08000f8d 	.word	0x08000f8d
 8000ef0:	08000f8d 	.word	0x08000f8d
 8000ef4:	08000f8d 	.word	0x08000f8d
 8000ef8:	08000f8d 	.word	0x08000f8d
 8000efc:	08000f8d 	.word	0x08000f8d
 8000f00:	08000f8d 	.word	0x08000f8d
 8000f04:	08000f8d 	.word	0x08000f8d
 8000f08:	08000f8d 	.word	0x08000f8d
 8000f0c:	08000f8d 	.word	0x08000f8d
 8000f10:	08000f8d 	.word	0x08000f8d
 8000f14:	08000f8d 	.word	0x08000f8d
 8000f18:	08000f8d 	.word	0x08000f8d
 8000f1c:	08000f8d 	.word	0x08000f8d
 8000f20:	08000f8d 	.word	0x08000f8d
 8000f24:	08000f8d 	.word	0x08000f8d
 8000f28:	08000f8d 	.word	0x08000f8d
 8000f2c:	08000f8d 	.word	0x08000f8d
 8000f30:	08000f8d 	.word	0x08000f8d
 8000f34:	08000f8d 	.word	0x08000f8d
 8000f38:	08000f8d 	.word	0x08000f8d
 8000f3c:	08000f8d 	.word	0x08000f8d
 8000f40:	08000f8d 	.word	0x08000f8d
 8000f44:	08000f8d 	.word	0x08000f8d
 8000f48:	08000f8d 	.word	0x08000f8d
 8000f4c:	08000f8d 	.word	0x08000f8d
 8000f50:	08000f61 	.word	0x08000f61
 8000f54:	08000f67 	.word	0x08000f67
 8000f58:	08000f6d 	.word	0x08000f6d
 8000f5c:	08000f73 	.word	0x08000f73
          {
            case 'A':
            ucSmState = 10;
 8000f60:	230a      	movs	r3, #10
 8000f62:	60fb      	str	r3, [r7, #12]
            break;
 8000f64:	e015      	b.n	8000f92 <HAL_UART_RxCpltCallback+0x1aa>

            case 'B':
            ucSmState = 20;
 8000f66:	2314      	movs	r3, #20
 8000f68:	60fb      	str	r3, [r7, #12]
            break;
 8000f6a:	e012      	b.n	8000f92 <HAL_UART_RxCpltCallback+0x1aa>

            case 'C':
            ucSmState = 30;
 8000f6c:	231e      	movs	r3, #30
 8000f6e:	60fb      	str	r3, [r7, #12]
            break;
 8000f70:	e00f      	b.n	8000f92 <HAL_UART_RxCpltCallback+0x1aa>

            case 'D':
            ucSmState = 40;
 8000f72:	2328      	movs	r3, #40	@ 0x28
 8000f74:	60fb      	str	r3, [r7, #12]
            break;
 8000f76:	e00c      	b.n	8000f92 <HAL_UART_RxCpltCallback+0x1aa>

            case '$':
            ucSmState = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]

            // Message fully received, setting TaskControle ThreadFlag for sync.
            osThreadFlagsSet(TaskControleHandle, 0x10000);
 8000f7c:	4b45      	ldr	r3, [pc, #276]	@ (8001094 <HAL_UART_RxCpltCallback+0x2ac>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00b fdf5 	bl	800cb74 <osThreadFlagsSet>
            break;
 8000f8a:	e002      	b.n	8000f92 <HAL_UART_RxCpltCallback+0x1aa>

            default:
              ucSmState = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
              break;
 8000f90:	bf00      	nop
          }
          break;
 8000f92:	e06b      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 10:
          xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	4a3e      	ldr	r2, [pc, #248]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f98:	5cd2      	ldrb	r2, [r2, r3]
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000f9c:	701a      	strb	r2, [r3, #0]
          ucSmState = 11;
 8000f9e:	230b      	movs	r3, #11
 8000fa0:	60fb      	str	r3, [r7, #12]
          break;
 8000fa2:	e063      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 11:
          xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fa8:	5cd2      	ldrb	r2, [r2, r3]
 8000faa:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fac:	705a      	strb	r2, [r3, #1]
          ucSmState = 12;
 8000fae:	230c      	movs	r3, #12
 8000fb0:	60fb      	str	r3, [r7, #12]
          break;
 8000fb2:	e05b      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 12:
          xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8000fb4:	7afb      	ldrb	r3, [r7, #11]
 8000fb6:	4a36      	ldr	r2, [pc, #216]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fb8:	5cd2      	ldrb	r2, [r2, r3]
 8000fba:	4b37      	ldr	r3, [pc, #220]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fbc:	709a      	strb	r2, [r3, #2]
          ucSmState = 13;
 8000fbe:	230d      	movs	r3, #13
 8000fc0:	60fb      	str	r3, [r7, #12]
          break;
 8000fc2:	e053      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 13:
          xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	4a32      	ldr	r2, [pc, #200]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fc8:	5cd2      	ldrb	r2, [r2, r3]
 8000fca:	4b33      	ldr	r3, [pc, #204]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fcc:	70da      	strb	r2, [r3, #3]
          ucSmState = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
          break;
 8000fd2:	e04b      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 20:
          xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000fd4:	7afb      	ldrb	r3, [r7, #11]
 8000fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fd8:	5cd2      	ldrb	r2, [r2, r3]
 8000fda:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fdc:	711a      	strb	r2, [r3, #4]
          ucSmState = 21;
 8000fde:	2315      	movs	r3, #21
 8000fe0:	60fb      	str	r3, [r7, #12]
          break;
 8000fe2:	e043      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 21:
          xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fe8:	5cd2      	ldrb	r2, [r2, r3]
 8000fea:	4b2b      	ldr	r3, [pc, #172]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fec:	715a      	strb	r2, [r3, #5]
          ucSmState = 22;
 8000fee:	2316      	movs	r3, #22
 8000ff0:	60fb      	str	r3, [r7, #12]
          break;
 8000ff2:	e03b      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 22:
          xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	4a26      	ldr	r2, [pc, #152]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ff8:	5cd2      	ldrb	r2, [r2, r3]
 8000ffa:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ffc:	719a      	strb	r2, [r3, #6]
          ucSmState = 23;
 8000ffe:	2317      	movs	r3, #23
 8001000:	60fb      	str	r3, [r7, #12]
          break;
 8001002:	e033      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 23:
          xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	4a22      	ldr	r2, [pc, #136]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8001008:	5cd2      	ldrb	r2, [r2, r3]
 800100a:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 800100c:	71da      	strb	r2, [r3, #7]
          ucSmState = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
          break;
 8001012:	e02b      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 30:
          xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 8001014:	7afb      	ldrb	r3, [r7, #11]
 8001016:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8001018:	5cd2      	ldrb	r2, [r2, r3]
 800101a:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 800101c:	721a      	strb	r2, [r3, #8]
          ucSmState = 31;
 800101e:	231f      	movs	r3, #31
 8001020:	60fb      	str	r3, [r7, #12]
          break;
 8001022:	e023      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 31:
          xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 8001024:	7afb      	ldrb	r3, [r7, #11]
 8001026:	4a1a      	ldr	r2, [pc, #104]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8001028:	5cd2      	ldrb	r2, [r2, r3]
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 800102c:	725a      	strb	r2, [r3, #9]
          ucSmState = 32;
 800102e:	2320      	movs	r3, #32
 8001030:	60fb      	str	r3, [r7, #12]
          break;
 8001032:	e01b      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 32:
          xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	4a16      	ldr	r2, [pc, #88]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8001038:	5cd2      	ldrb	r2, [r2, r3]
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 800103c:	729a      	strb	r2, [r3, #10]
          ucSmState = 33;
 800103e:	2321      	movs	r3, #33	@ 0x21
 8001040:	60fb      	str	r3, [r7, #12]
          break;
 8001042:	e013      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 33:
          xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 8001044:	7afb      	ldrb	r3, [r7, #11]
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8001048:	5cd2      	ldrb	r2, [r2, r3]
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 800104c:	72da      	strb	r2, [r3, #11]
          ucSmState = 1;
 800104e:	2301      	movs	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
          break;
 8001052:	e00b      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        case 40:
          xVehicleStatus.ucGear = ucDmaBuffer[i];
 8001054:	7afb      	ldrb	r3, [r7, #11]
 8001056:	4a0e      	ldr	r2, [pc, #56]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8001058:	5cd2      	ldrb	r2, [r2, r3]
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 800105c:	731a      	strb	r2, [r3, #12]
          ucSmState = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
          break;
 8001062:	e003      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>

        default:
		      ucSmState = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
          break;
 8001068:	e000      	b.n	800106c <HAL_UART_RxCpltCallback+0x284>
          break;
 800106a:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 800106c:	7afb      	ldrb	r3, [r7, #11]
 800106e:	3301      	adds	r3, #1
 8001070:	72fb      	strb	r3, [r7, #11]
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	2b12      	cmp	r3, #18
 8001076:	f67f aec5 	bls.w	8000e04 <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 800107a:	2213      	movs	r2, #19
 800107c:	4904      	ldr	r1, [pc, #16]	@ (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 800107e:	4803      	ldr	r0, [pc, #12]	@ (800108c <HAL_UART_RxCpltCallback+0x2a4>)
 8001080:	f009 fcea 	bl	800aa58 <HAL_UART_Receive_DMA>
  }
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	240015ac 	.word	0x240015ac
 8001090:	24001548 	.word	0x24001548
 8001094:	240014e4 	.word	0x240014e4
 8001098:	24001538 	.word	0x24001538

0800109c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ae:	f000 ffb3 	bl	8002018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40001000 	.word	0x40001000

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <Error_Handler+0x8>

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_MspInit+0x38>)
 80010d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_MspInit+0x38>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_MspInit+0x38>)
 80010e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	210f      	movs	r1, #15
 80010f4:	f06f 0001 	mvn.w	r0, #1
 80010f8:	f002 fb68 	bl	80037cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	58024400 	.word	0x58024400

08001108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b090      	sub	sp, #64	@ 0x40
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d827      	bhi.n	8001166 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001116:	2200      	movs	r2, #0
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	2036      	movs	r0, #54	@ 0x36
 800111c:	f002 fb56 	bl	80037cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001120:	2036      	movs	r0, #54	@ 0x36
 8001122:	f002 fb6d 	bl	8003800 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001126:	4a29      	ldr	r2, [pc, #164]	@ (80011cc <HAL_InitTick+0xc4>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800112c:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <HAL_InitTick+0xc8>)
 800112e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001132:	4a27      	ldr	r2, [pc, #156]	@ (80011d0 <HAL_InitTick+0xc8>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800113c:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <HAL_InitTick+0xc8>)
 800113e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114a:	f107 0210 	add.w	r2, r7, #16
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fba1 	bl	800789c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800115a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800115e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001160:	2b00      	cmp	r3, #0
 8001162:	d106      	bne.n	8001172 <HAL_InitTick+0x6a>
 8001164:	e001      	b.n	800116a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e02b      	b.n	80011c2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800116a:	f006 fb6b 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 800116e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001170:	e004      	b.n	800117c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001172:	f006 fb67 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 8001176:	4603      	mov	r3, r0
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800117c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800117e:	4a15      	ldr	r2, [pc, #84]	@ (80011d4 <HAL_InitTick+0xcc>)
 8001180:	fba2 2303 	umull	r2, r3, r2, r3
 8001184:	0c9b      	lsrs	r3, r3, #18
 8001186:	3b01      	subs	r3, #1
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <HAL_InitTick+0xd0>)
 800118c:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <HAL_InitTick+0xd4>)
 800118e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_InitTick+0xd0>)
 8001192:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001196:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001198:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <HAL_InitTick+0xd0>)
 800119a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800119c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_InitTick+0xd0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <HAL_InitTick+0xd0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011aa:	480b      	ldr	r0, [pc, #44]	@ (80011d8 <HAL_InitTick+0xd0>)
 80011ac:	f009 f8b6 	bl	800a31c <HAL_TIM_Base_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d104      	bne.n	80011c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011b6:	4808      	ldr	r0, [pc, #32]	@ (80011d8 <HAL_InitTick+0xd0>)
 80011b8:	f009 f912 	bl	800a3e0 <HAL_TIM_Base_Start_IT>
 80011bc:	4603      	mov	r3, r0
 80011be:	e000      	b.n	80011c2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3740      	adds	r7, #64	@ 0x40
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	24000008 	.word	0x24000008
 80011d0:	58024400 	.word	0x58024400
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	2400155c 	.word	0x2400155c
 80011dc:	40001000 	.word	0x40001000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <DMA1_Stream0_IRQHandler+0x10>)
 800121e:	f003 fe27 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	240017c4 	.word	0x240017c4

0800122c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <DMA1_Stream1_IRQHandler+0x10>)
 8001232:	f003 fe1d 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2400183c 	.word	0x2400183c

08001240 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <USART2_IRQHandler+0x10>)
 8001246:	f009 fc53 	bl	800aaf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	240015ac 	.word	0x240015ac

08001254 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <USART3_IRQHandler+0x10>)
 800125a:	f009 fc49 	bl	800aaf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	24001640 	.word	0x24001640

08001268 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 800126c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001270:	f005 fad9 	bl	8006826 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <TIM6_DAC_IRQHandler+0x10>)
 800127e:	f009 f927 	bl	800a4d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2400155c 	.word	0x2400155c

0800128c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <DMA2_Stream1_IRQHandler+0x10>)
 8001292:	f003 fded 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240016d4 	.word	0x240016d4

080012a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <DMA2_Stream2_IRQHandler+0x10>)
 80012a6:	f003 fde3 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2400174c 	.word	0x2400174c

080012b4 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012be:	f012 fc87 	bl	8013bd0 <__errno>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2216      	movs	r2, #22
 80012c6:	601a      	str	r2, [r3, #0]
  return -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_exit>:

void _exit (int status)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffe7 	bl	80012b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012e6:	bf00      	nop
 80012e8:	e7fd      	b.n	80012e6 <_exit+0x12>

080012ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e00a      	b.n	8001312 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012fc:	f3af 8000 	nop.w
 8001300:	4601      	mov	r1, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	60ba      	str	r2, [r7, #8]
 8001308:	b2ca      	uxtb	r2, r1
 800130a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	dbf0      	blt.n	80012fc <_read+0x12>
  }

  return len;
 800131a:	687b      	ldr	r3, [r7, #4]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e009      	b.n	800134a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	60ba      	str	r2, [r7, #8]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	dbf1      	blt.n	8001336 <_write+0x12>
  }
  return len;
 8001352:	687b      	ldr	r3, [r7, #4]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_close>:

int _close(int file)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001384:	605a      	str	r2, [r3, #4]
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_isatty>:

int _isatty(int file)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f012 fbec 	bl	8013bd0 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	24080000 	.word	0x24080000
 8001424:	00000400 	.word	0x00000400
 8001428:	240015a8 	.word	0x240015a8
 800142c:	24033530 	.word	0x24033530

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001434:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <SystemInit+0xe4>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143a:	4a36      	ldr	r2, [pc, #216]	@ (8001514 <SystemInit+0xe4>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001444:	4b34      	ldr	r3, [pc, #208]	@ (8001518 <SystemInit+0xe8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	2b06      	cmp	r3, #6
 800144e:	d807      	bhi.n	8001460 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001450:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <SystemInit+0xe8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 030f 	bic.w	r3, r3, #15
 8001458:	4a2f      	ldr	r2, [pc, #188]	@ (8001518 <SystemInit+0xe8>)
 800145a:	f043 0307 	orr.w	r3, r3, #7
 800145e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001460:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <SystemInit+0xec>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2d      	ldr	r2, [pc, #180]	@ (800151c <SystemInit+0xec>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800146c:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <SystemInit+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001472:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <SystemInit+0xec>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4929      	ldr	r1, [pc, #164]	@ (800151c <SystemInit+0xec>)
 8001478:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <SystemInit+0xf0>)
 800147a:	4013      	ands	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800147e:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <SystemInit+0xe8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800148a:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <SystemInit+0xe8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 030f 	bic.w	r3, r3, #15
 8001492:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <SystemInit+0xe8>)
 8001494:	f043 0307 	orr.w	r3, r3, #7
 8001498:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800149a:	4b20      	ldr	r3, [pc, #128]	@ (800151c <SystemInit+0xec>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014a0:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <SystemInit+0xec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <SystemInit+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <SystemInit+0xec>)
 80014ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <SystemInit+0xf4>)
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <SystemInit+0xec>)
 80014b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001528 <SystemInit+0xf8>)
 80014b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <SystemInit+0xec>)
 80014ba:	4a1c      	ldr	r2, [pc, #112]	@ (800152c <SystemInit+0xfc>)
 80014bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014be:	4b17      	ldr	r3, [pc, #92]	@ (800151c <SystemInit+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <SystemInit+0xec>)
 80014c6:	4a19      	ldr	r2, [pc, #100]	@ (800152c <SystemInit+0xfc>)
 80014c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <SystemInit+0xec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <SystemInit+0xec>)
 80014d2:	4a16      	ldr	r2, [pc, #88]	@ (800152c <SystemInit+0xfc>)
 80014d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <SystemInit+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <SystemInit+0xec>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <SystemInit+0xec>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <SystemInit+0xec>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <SystemInit+0x100>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <SystemInit+0x104>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014fa:	d202      	bcs.n	8001502 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <SystemInit+0x108>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <SystemInit+0x10c>)
 8001504:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001508:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	52002000 	.word	0x52002000
 800151c:	58024400 	.word	0x58024400
 8001520:	eaf6ed7f 	.word	0xeaf6ed7f
 8001524:	02020200 	.word	0x02020200
 8001528:	01ff0000 	.word	0x01ff0000
 800152c:	01010280 	.word	0x01010280
 8001530:	5c001000 	.word	0x5c001000
 8001534:	ffff0000 	.word	0xffff0000
 8001538:	51008108 	.word	0x51008108
 800153c:	52004000 	.word	0x52004000

08001540 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b096      	sub	sp, #88	@ 0x58
 8001544:	af02      	add	r7, sp, #8
 8001546:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 8001548:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 800154c:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned int uiXMin = 1057;
 800154e:	f240 4321 	movw	r3, #1057	@ 0x421
 8001552:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMax = 65535;
 8001554:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001558:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiY0   = 33580;
 800155a:	f248 332c 	movw	r3, #33580	@ 0x832c
 800155e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiYMin = 1062;
 8001560:	f240 4326 	movw	r3, #1062	@ 0x426
 8001564:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMax = 65535;
 8001566:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34

  // Return flags
  unsigned int uiFlags = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001570:	2213      	movs	r2, #19
 8001572:	497c      	ldr	r1, [pc, #496]	@ (8001764 <StartTaskControle+0x224>)
 8001574:	487c      	ldr	r0, [pc, #496]	@ (8001768 <StartTaskControle+0x228>)
 8001576:	f009 fa6f 	bl	800aa58 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = MANUAL; // ! MANUAL for testing joy + UART
 800157a:	2304      	movs	r3, #4
 800157c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  // Task loop
  for(;;)
  {

    // Looking fot operation mode change by Autoware -- START
	  uiFlags = osThreadFlagsGet();
 8001580:	f00b fb46 	bl	800cc10 <osThreadFlagsGet>
 8001584:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAny, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2011      	movs	r0, #17
 800158c:	f00b fb61 	bl	800cc52 <osThreadFlagsWait>
 8001590:	6338      	str	r0, [r7, #48]	@ 0x30

    if(0x01 == uiFlags)
 8001592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <StartTaskControle+0x5e>
    {
      ucControlMode = AUTOWARE;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    if(0x10 == uiFlags)
 800159e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d102      	bne.n	80015aa <StartTaskControle+0x6a>
    {
      ucControlMode = MANUAL;
 80015a4:	2304      	movs	r3, #4
 80015a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    // Looking for operation mode change by Autoware -- END

    // Looking for operation mode change by JoySW -- START
    uiFlags = osThreadFlagsGet();
 80015aa:	f00b fb31 	bl	800cc10 <osThreadFlagsGet>
 80015ae:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(0x1000, osFlagsWaitAll, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2101      	movs	r1, #1
 80015b4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80015b8:	f00b fb4b 	bl	800cc52 <osThreadFlagsWait>
 80015bc:	6338      	str	r0, [r7, #48]	@ 0x30

    if(0x1000 == uiFlags)
 80015be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015c4:	d11a      	bne.n	80015fc <StartTaskControle+0xbc>
    {
      if(AUTOWARE == ucControlMode)
 80015c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d109      	bne.n	80015e2 <StartTaskControle+0xa2>
      {
      ucControlMode = MANUAL;
 80015ce:	2304      	movs	r3, #4
 80015d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      osThreadFlagsSet(TaskMicroAutowaHandle, 0x10);
 80015d4:	4b65      	ldr	r3, [pc, #404]	@ (800176c <StartTaskControle+0x22c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2110      	movs	r1, #16
 80015da:	4618      	mov	r0, r3
 80015dc:	f00b faca 	bl	800cb74 <osThreadFlagsSet>
 80015e0:	e00c      	b.n	80015fc <StartTaskControle+0xbc>
      }
      else if(MANUAL == ucControlMode)
 80015e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d108      	bne.n	80015fc <StartTaskControle+0xbc>
      {
      ucControlMode = AUTOWARE;
 80015ea:	2301      	movs	r3, #1
 80015ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      osThreadFlagsSet(TaskMicroAutowaHandle, 0x01);
 80015f0:	4b5e      	ldr	r3, [pc, #376]	@ (800176c <StartTaskControle+0x22c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2101      	movs	r1, #1
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00b fabc 	bl	800cb74 <osThreadFlagsSet>
      }
    }
    // Looking for operation mode change by JoySW -- END

    // Autonomous mode (AUTOWARE) routine -- START
    if(AUTOWARE == ucControlMode)
 80015fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001600:	2b01      	cmp	r3, #1
 8001602:	d172      	bne.n	80016ea <StartTaskControle+0x1aa>
    {
      // Setting driving mode lights
	  vDrivingModeLights(ucControlMode);
 8001604:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fc55 	bl	8001eb8 <vDrivingModeLights>

      // WAIT for flag to sync xControlAction update
  	  uiFlags = osThreadFlagsGet();
 800160e:	f00b faff 	bl	800cc10 <osThreadFlagsGet>
 8001612:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(0x100, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 8001614:	221e      	movs	r2, #30
 8001616:	2101      	movs	r1, #1
 8001618:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800161c:	f00b fb19 	bl	800cc52 <osThreadFlagsWait>
 8001620:	6338      	str	r0, [r7, #48]	@ 0x30
      if(osFlagsErrorTimeout == uiFlags)
      {
      // Deu ruim timeout
      }

      if(0x100 == uiFlags)
 8001622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001628:	d15f      	bne.n	80016ea <StartTaskControle+0x1aa>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 800162a:	4b51      	ldr	r3, [pc, #324]	@ (8001770 <StartTaskControle+0x230>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001632:	4618      	mov	r0, r3
 8001634:	f00b fc2f 	bl	800ce96 <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8001638:	4b4e      	ldr	r3, [pc, #312]	@ (8001774 <StartTaskControle+0x234>)
 800163a:	f107 020c 	add.w	r2, r7, #12
 800163e:	9201      	str	r2, [sp, #4]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	9200      	str	r2, [sp, #0]
 8001644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001646:	f000 fbb7 	bl	8001db8 <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 800164a:	4b49      	ldr	r3, [pc, #292]	@ (8001770 <StartTaskControle+0x230>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f00b fc6c 	bl	800cf2c <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla));
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe fe4b 	bl	80002f4 <strlen>
 800165e:	4603      	mov	r3, r0
 8001660:	b29a      	uxth	r2, r3
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	483f      	ldr	r0, [pc, #252]	@ (8001768 <StartTaskControle+0x228>)
 800166a:	f009 f975 	bl	800a958 <HAL_UART_Transmit_DMA>

        // Recieve data from CARLA

        osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 800166e:	4b42      	ldr	r3, [pc, #264]	@ (8001778 <StartTaskControle+0x238>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001676:	4618      	mov	r0, r3
 8001678:	f00b fc0d 	bl	800ce96 <osMutexAcquire>
        xControlSignal.fThrottle = xControlAction.fTrottle;
 800167c:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <StartTaskControle+0x234>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a3e      	ldr	r2, [pc, #248]	@ (800177c <StartTaskControle+0x23c>)
 8001682:	6013      	str	r3, [r2, #0]
        xControlSignal.fBrake = xControlAction.fBrake;
 8001684:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <StartTaskControle+0x234>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a3c      	ldr	r2, [pc, #240]	@ (800177c <StartTaskControle+0x23c>)
 800168a:	6053      	str	r3, [r2, #4]
        xControlSignal.fSteeringAngle = xControlAction.fSteeringAngle;
 800168c:	4b39      	ldr	r3, [pc, #228]	@ (8001774 <StartTaskControle+0x234>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a3a      	ldr	r2, [pc, #232]	@ (800177c <StartTaskControle+0x23c>)
 8001692:	6093      	str	r3, [r2, #8]
        xControlSignal.ucManualGearShift = xControlAction.ucManualGearShift;
 8001694:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <StartTaskControle+0x234>)
 8001696:	7b9a      	ldrb	r2, [r3, #14]
 8001698:	4b38      	ldr	r3, [pc, #224]	@ (800177c <StartTaskControle+0x23c>)
 800169a:	739a      	strb	r2, [r3, #14]
        xControlSignal.ucHandBrake = xControlAction.ucHandBrake;
 800169c:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <StartTaskControle+0x234>)
 800169e:	7b1a      	ldrb	r2, [r3, #12]
 80016a0:	4b36      	ldr	r3, [pc, #216]	@ (800177c <StartTaskControle+0x23c>)
 80016a2:	731a      	strb	r2, [r3, #12]
        xControlSignal.ucReverse = xControlAction.ucReverse;
 80016a4:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <StartTaskControle+0x234>)
 80016a6:	7b5a      	ldrb	r2, [r3, #13]
 80016a8:	4b34      	ldr	r3, [pc, #208]	@ (800177c <StartTaskControle+0x23c>)
 80016aa:	735a      	strb	r2, [r3, #13]
        xControlSignal.ucControlMode = AUTOWARE;
 80016ac:	4b33      	ldr	r3, [pc, #204]	@ (800177c <StartTaskControle+0x23c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	741a      	strb	r2, [r3, #16]
        xControlSignal.ucGear = xVehicleStatus.ucGear;
 80016b2:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <StartTaskControle+0x240>)
 80016b4:	7b1a      	ldrb	r2, [r3, #12]
 80016b6:	4b31      	ldr	r3, [pc, #196]	@ (800177c <StartTaskControle+0x23c>)
 80016b8:	73da      	strb	r2, [r3, #15]
        xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 80016ba:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <StartTaskControle+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a2f      	ldr	r2, [pc, #188]	@ (800177c <StartTaskControle+0x23c>)
 80016c0:	6153      	str	r3, [r2, #20]
        xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 80016c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <StartTaskControle+0x240>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a2d      	ldr	r2, [pc, #180]	@ (800177c <StartTaskControle+0x23c>)
 80016c8:	6193      	str	r3, [r2, #24]
        xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 80016ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <StartTaskControle+0x240>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	4a2b      	ldr	r2, [pc, #172]	@ (800177c <StartTaskControle+0x23c>)
 80016d0:	61d3      	str	r3, [r2, #28]
        osMutexRelease(MutexControlSignalHandle);
 80016d2:	4b29      	ldr	r3, [pc, #164]	@ (8001778 <StartTaskControle+0x238>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00b fc28 	bl	800cf2c <osMutexRelease>

        osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 80016dc:	4b23      	ldr	r3, [pc, #140]	@ (800176c <StartTaskControle+0x22c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00b fa45 	bl	800cb74 <osThreadFlagsSet>
    }
    // Autonomous mode (AUTOWARE) routine -- END


    // Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 80016ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	f47f af46 	bne.w	8001580 <StartTaskControle+0x40>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 80016f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fbdd 	bl	8001eb8 <vDrivingModeLights>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <StartTaskControle+0x244>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001704:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001706:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001708:	f000 fb22 	bl	8001d50 <fGetJoyPostition>
 800170c:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8001710:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <StartTaskControle+0x244>)
 8001712:	6858      	ldr	r0, [r3, #4]
 8001714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001716:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001718:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800171a:	f000 fb19 	bl	8001d50 <fGetJoyPostition>
 800171e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001722:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <StartTaskControle+0x230>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800172a:	4618      	mov	r0, r3
 800172c:	f00b fbb3 	bl	800ce96 <osMutexAcquire>
      xControlAction.fTrottle = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0.0;
 8001730:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	dd01      	ble.n	8001742 <StartTaskControle+0x202>
 800173e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001740:	e001      	b.n	8001746 <StartTaskControle+0x206>
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <StartTaskControle+0x234>)
 8001748:	6013      	str	r3, [r2, #0]
      xControlAction.fBrake = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0;
 800174a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800174e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001756:	d519      	bpl.n	800178c <StartTaskControle+0x24c>
 8001758:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800175c:	eef1 7a67 	vneg.f32	s15, s15
 8001760:	e016      	b.n	8001790 <StartTaskControle+0x250>
 8001762:	bf00      	nop
 8001764:	24001548 	.word	0x24001548
 8001768:	240015ac 	.word	0x240015ac
 800176c:	240014e8 	.word	0x240014e8
 8001770:	240014f0 	.word	0x240014f0
 8001774:	24001504 	.word	0x24001504
 8001778:	240014ec 	.word	0x240014ec
 800177c:	24001518 	.word	0x24001518
 8001780:	24001538 	.word	0x24001538
 8001784:	240014f8 	.word	0x240014f8
 8001788:	00000000 	.word	0x00000000
 800178c:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001788 <StartTaskControle+0x248>
 8001790:	4b3c      	ldr	r3, [pc, #240]	@ (8001884 <StartTaskControle+0x344>)
 8001792:	edc3 7a01 	vstr	s15, [r3, #4]
      xControlAction.fSteeringAngle = -fJoyXAxis*MAX_STEERING_ANGLE;
 8001796:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800179a:	eef1 7a67 	vneg.f32	s15, s15
 800179e:	4b39      	ldr	r3, [pc, #228]	@ (8001884 <StartTaskControle+0x344>)
 80017a0:	edc3 7a02 	vstr	s15, [r3, #8]
      xControlAction.ucManualGearShift = 0;
 80017a4:	4b37      	ldr	r3, [pc, #220]	@ (8001884 <StartTaskControle+0x344>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	739a      	strb	r2, [r3, #14]
      xControlAction.ucHandBrake = 0;
 80017aa:	4b36      	ldr	r3, [pc, #216]	@ (8001884 <StartTaskControle+0x344>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	731a      	strb	r2, [r3, #12]
      xControlAction.ucReverse = 0;
 80017b0:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <StartTaskControle+0x344>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	735a      	strb	r2, [r3, #13]
      xControlAction.ucControlMode = MANUAL;
 80017b6:	4b33      	ldr	r3, [pc, #204]	@ (8001884 <StartTaskControle+0x344>)
 80017b8:	2204      	movs	r2, #4
 80017ba:	741a      	strb	r2, [r3, #16]
      xControlAction.ucGear = 1;
 80017bc:	4b31      	ldr	r3, [pc, #196]	@ (8001884 <StartTaskControle+0x344>)
 80017be:	2201      	movs	r2, #1
 80017c0:	73da      	strb	r2, [r3, #15]

      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80017c2:	4b30      	ldr	r3, [pc, #192]	@ (8001884 <StartTaskControle+0x344>)
 80017c4:	f107 020c 	add.w	r2, r7, #12
 80017c8:	9201      	str	r2, [sp, #4]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	9200      	str	r2, [sp, #0]
 80017ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d0:	f000 faf2 	bl	8001db8 <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 80017d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001888 <StartTaskControle+0x348>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f00b fba7 	bl	800cf2c <osMutexRelease>

      // Send cTxMsgToCarla to CARLA
      //if(huart2.gState == HAL_UART_STATE_READY)
      //{
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	221a      	movs	r2, #26
 80017e4:	4619      	mov	r1, r3
 80017e6:	4829      	ldr	r0, [pc, #164]	@ (800188c <StartTaskControle+0x34c>)
 80017e8:	f009 f8b6 	bl	800a958 <HAL_UART_Transmit_DMA>
      //}

      // Wait CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 80017ec:	f00b fa10 	bl	800cc10 <osThreadFlagsGet>
 80017f0:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(0x10000, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 80017f2:	2214      	movs	r2, #20
 80017f4:	2101      	movs	r1, #1
 80017f6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80017fa:	f00b fa2a 	bl	800cc52 <osThreadFlagsWait>
 80017fe:	6338      	str	r0, [r7, #48]	@ 0x30

      }

      // Empacota xControlSignal

      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001800:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <StartTaskControle+0x350>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001808:	4618      	mov	r0, r3
 800180a:	f00b fb44 	bl	800ce96 <osMutexAcquire>
      xControlSignal.fThrottle = xControlAction.fTrottle;
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <StartTaskControle+0x344>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a20      	ldr	r2, [pc, #128]	@ (8001894 <StartTaskControle+0x354>)
 8001814:	6013      	str	r3, [r2, #0]
      xControlSignal.fBrake = xControlAction.fBrake;
 8001816:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <StartTaskControle+0x344>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a1e      	ldr	r2, [pc, #120]	@ (8001894 <StartTaskControle+0x354>)
 800181c:	6053      	str	r3, [r2, #4]
      xControlSignal.fSteeringAngle = xControlAction.fSteeringAngle;
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <StartTaskControle+0x344>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	4a1c      	ldr	r2, [pc, #112]	@ (8001894 <StartTaskControle+0x354>)
 8001824:	6093      	str	r3, [r2, #8]
      xControlSignal.ucManualGearShift = xControlAction.ucManualGearShift;
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <StartTaskControle+0x344>)
 8001828:	7b9a      	ldrb	r2, [r3, #14]
 800182a:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <StartTaskControle+0x354>)
 800182c:	739a      	strb	r2, [r3, #14]
      xControlSignal.ucHandBrake = xControlAction.ucHandBrake;
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <StartTaskControle+0x344>)
 8001830:	7b1a      	ldrb	r2, [r3, #12]
 8001832:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <StartTaskControle+0x354>)
 8001834:	731a      	strb	r2, [r3, #12]
      xControlSignal.ucReverse = xControlAction.ucReverse;
 8001836:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <StartTaskControle+0x344>)
 8001838:	7b5a      	ldrb	r2, [r3, #13]
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <StartTaskControle+0x354>)
 800183c:	735a      	strb	r2, [r3, #13]
      xControlSignal.ucControlMode = MANUAL;
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <StartTaskControle+0x354>)
 8001840:	2204      	movs	r2, #4
 8001842:	741a      	strb	r2, [r3, #16]
      xControlSignal.ucGear = xVehicleStatus.ucGear;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <StartTaskControle+0x358>)
 8001846:	7b1a      	ldrb	r2, [r3, #12]
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <StartTaskControle+0x354>)
 800184a:	73da      	strb	r2, [r3, #15]
      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <StartTaskControle+0x358>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a10      	ldr	r2, [pc, #64]	@ (8001894 <StartTaskControle+0x354>)
 8001852:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <StartTaskControle+0x358>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <StartTaskControle+0x354>)
 800185a:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <StartTaskControle+0x358>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <StartTaskControle+0x354>)
 8001862:	61d3      	str	r3, [r2, #28]
      osMutexRelease(MutexControlSignalHandle);
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <StartTaskControle+0x350>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f00b fb5f 	bl	800cf2c <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <StartTaskControle+0x35c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001876:	4618      	mov	r0, r3
 8001878:	f00b f97c 	bl	800cb74 <osThreadFlagsSet>

      // WAIT
      osDelay(200);
 800187c:	20c8      	movs	r0, #200	@ 0xc8
 800187e:	f00b fa69 	bl	800cd54 <osDelay>
	  uiFlags = osThreadFlagsGet();
 8001882:	e67d      	b.n	8001580 <StartTaskControle+0x40>
 8001884:	24001504 	.word	0x24001504
 8001888:	240014f0 	.word	0x240014f0
 800188c:	240015ac 	.word	0x240015ac
 8001890:	240014ec 	.word	0x240014ec
 8001894:	24001518 	.word	0x24001518
 8001898:	24001538 	.word	0x24001538
 800189c:	240014e8 	.word	0x240014e8

080018a0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a4:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018a6:	4a23      	ldr	r2, [pc, #140]	@ (8001934 <MX_USART2_UART_Init+0x94>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018ac:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80018b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e8:	4811      	ldr	r0, [pc, #68]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018ea:	f008 ffe5 	bl	800a8b8 <HAL_UART_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018f4:	f7ff fbe4 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	480d      	ldr	r0, [pc, #52]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018fc:	f00a ff3a 	bl	800c774 <HAL_UARTEx_SetTxFifoThreshold>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001906:	f7ff fbdb 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 800190e:	f00a ff6f 	bl	800c7f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001918:	f7ff fbd2 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 800191e:	f00a fef0 	bl	800c702 <HAL_UARTEx_DisableFifoMode>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001928:	f7ff fbca 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	240015ac 	.word	0x240015ac
 8001934:	40004400 	.word	0x40004400

08001938 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800193c:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 800193e:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <MX_USART3_UART_Init+0x94>)
 8001940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001942:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 8001944:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196e:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197a:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001980:	4811      	ldr	r0, [pc, #68]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 8001982:	f008 ff99 	bl	800a8b8 <HAL_UART_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800198c:	f7ff fb98 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001990:	2100      	movs	r1, #0
 8001992:	480d      	ldr	r0, [pc, #52]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 8001994:	f00a feee 	bl	800c774 <HAL_UARTEx_SetTxFifoThreshold>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800199e:	f7ff fb8f 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a2:	2100      	movs	r1, #0
 80019a4:	4808      	ldr	r0, [pc, #32]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 80019a6:	f00a ff23 	bl	800c7f0 <HAL_UARTEx_SetRxFifoThreshold>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019b0:	f7ff fb86 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <MX_USART3_UART_Init+0x90>)
 80019b6:	f00a fea4 	bl	800c702 <HAL_UARTEx_DisableFifoMode>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019c0:	f7ff fb7e 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	24001640 	.word	0x24001640
 80019cc:	40004800 	.word	0x40004800

080019d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0be      	sub	sp, #248	@ 0xf8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	22c0      	movs	r2, #192	@ 0xc0
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f012 f839 	bl	8013a68 <memset>
  if(uartHandle->Instance==USART2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba4 <HAL_UART_MspInit+0x1d4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	f040 80e1 	bne.w	8001bc4 <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a02:	f04f 0202 	mov.w	r2, #2
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f005 ff81 	bl	8007920 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001a24:	f7ff fb4c 	bl	80010c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a28:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba8 <HAL_UART_MspInit+0x1d8>)
 8001a2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a2e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ba8 <HAL_UART_MspInit+0x1d8>)
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a38:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba8 <HAL_UART_MspInit+0x1d8>)
 8001a3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b58      	ldr	r3, [pc, #352]	@ (8001ba8 <HAL_UART_MspInit+0x1d8>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4c:	4a56      	ldr	r2, [pc, #344]	@ (8001ba8 <HAL_UART_MspInit+0x1d8>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a56:	4b54      	ldr	r3, [pc, #336]	@ (8001ba8 <HAL_UART_MspInit+0x1d8>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a64:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <HAL_UART_MspInit+0x1d8>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba8 <HAL_UART_MspInit+0x1d8>)
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba8 <HAL_UART_MspInit+0x1d8>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a82:	2308      	movs	r3, #8
 8001a84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4841      	ldr	r0, [pc, #260]	@ (8001bac <HAL_UART_MspInit+0x1dc>)
 8001aa8:	f004 fcf4 	bl	8006494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aac:	2320      	movs	r3, #32
 8001aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4837      	ldr	r0, [pc, #220]	@ (8001bb0 <HAL_UART_MspInit+0x1e0>)
 8001ad2:	f004 fcdf 	bl	8006494 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8001ad6:	4b37      	ldr	r3, [pc, #220]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001ad8:	4a37      	ldr	r2, [pc, #220]	@ (8001bb8 <HAL_UART_MspInit+0x1e8>)
 8001ada:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001adc:	4b35      	ldr	r3, [pc, #212]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001ade:	222b      	movs	r2, #43	@ 0x2b
 8001ae0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae2:	4b34      	ldr	r3, [pc, #208]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae8:	4b32      	ldr	r3, [pc, #200]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aee:	4b31      	ldr	r3, [pc, #196]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001af0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af6:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b02:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b08:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001b0a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b0e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b16:	4827      	ldr	r0, [pc, #156]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001b18:	f001 fe80 	bl	800381c <HAL_DMA_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8001b22:	f7ff facd 	bl	80010c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a22      	ldr	r2, [pc, #136]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001b2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b2e:	4a21      	ldr	r2, [pc, #132]	@ (8001bb4 <HAL_UART_MspInit+0x1e4>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8001b34:	4b21      	ldr	r3, [pc, #132]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b36:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_UART_MspInit+0x1f0>)
 8001b38:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b3a:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b3c:	222c      	movs	r2, #44	@ 0x2c
 8001b3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b42:	2240      	movs	r2, #64	@ 0x40
 8001b44:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b46:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b52:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b68:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b6c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b74:	4811      	ldr	r0, [pc, #68]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b76:	f001 fe51 	bl	800381c <HAL_DMA_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8001b80:	f7ff fa9e 	bl	80010c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b88:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <HAL_UART_MspInit+0x1ec>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2105      	movs	r1, #5
 8001b94:	2026      	movs	r0, #38	@ 0x26
 8001b96:	f001 fe19 	bl	80037cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b9a:	2026      	movs	r0, #38	@ 0x26
 8001b9c:	f001 fe30 	bl	8003800 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ba0:	e0c3      	b.n	8001d2a <HAL_UART_MspInit+0x35a>
 8001ba2:	bf00      	nop
 8001ba4:	40004400 	.word	0x40004400
 8001ba8:	58024400 	.word	0x58024400
 8001bac:	58020000 	.word	0x58020000
 8001bb0:	58020c00 	.word	0x58020c00
 8001bb4:	240016d4 	.word	0x240016d4
 8001bb8:	40020428 	.word	0x40020428
 8001bbc:	2400174c 	.word	0x2400174c
 8001bc0:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8001d34 <HAL_UART_MspInit+0x364>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	f040 80ad 	bne.w	8001d2a <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bd0:	f04f 0202 	mov.w	r2, #2
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	4618      	mov	r0, r3
 8001be8:	f005 fe9a 	bl	8007920 <HAL_RCCEx_PeriphCLKConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8001bf2:	f7ff fa65 	bl	80010c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bf6:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <HAL_UART_MspInit+0x368>)
 8001bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001d38 <HAL_UART_MspInit+0x368>)
 8001bfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c06:	4b4c      	ldr	r3, [pc, #304]	@ (8001d38 <HAL_UART_MspInit+0x368>)
 8001c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c14:	4b48      	ldr	r3, [pc, #288]	@ (8001d38 <HAL_UART_MspInit+0x368>)
 8001c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c1a:	4a47      	ldr	r2, [pc, #284]	@ (8001d38 <HAL_UART_MspInit+0x368>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c24:	4b44      	ldr	r3, [pc, #272]	@ (8001d38 <HAL_UART_MspInit+0x368>)
 8001c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c52:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4838      	ldr	r0, [pc, #224]	@ (8001d3c <HAL_UART_MspInit+0x36c>)
 8001c5a:	f004 fc1b 	bl	8006494 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001c5e:	4b38      	ldr	r3, [pc, #224]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c60:	4a38      	ldr	r2, [pc, #224]	@ (8001d44 <HAL_UART_MspInit+0x374>)
 8001c62:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001c64:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c66:	222d      	movs	r2, #45	@ 0x2d
 8001c68:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c6a:	4b35      	ldr	r3, [pc, #212]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c70:	4b33      	ldr	r3, [pc, #204]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c76:	4b32      	ldr	r3, [pc, #200]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c7c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c7e:	4b30      	ldr	r3, [pc, #192]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c84:	4b2e      	ldr	r3, [pc, #184]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c90:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c92:	4b2b      	ldr	r3, [pc, #172]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c94:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c98:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c9a:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ca0:	4827      	ldr	r0, [pc, #156]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001ca2:	f001 fdbb 	bl	800381c <HAL_DMA_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8001cac:	f7ff fa08 	bl	80010c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a23      	ldr	r2, [pc, #140]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001cb8:	4a21      	ldr	r2, [pc, #132]	@ (8001d40 <HAL_UART_MspInit+0x370>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001cbe:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001cc0:	4a22      	ldr	r2, [pc, #136]	@ (8001d4c <HAL_UART_MspInit+0x37c>)
 8001cc2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001cc4:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001cc6:	222e      	movs	r2, #46	@ 0x2e
 8001cc8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001ccc:	2240      	movs	r2, #64	@ 0x40
 8001cce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001cd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cdc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001cea:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001cf2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001cf6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001cfe:	4812      	ldr	r0, [pc, #72]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001d00:	f001 fd8c 	bl	800381c <HAL_DMA_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8001d0a:	f7ff f9d9 	bl	80010c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001d12:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d14:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <HAL_UART_MspInit+0x378>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2108      	movs	r1, #8
 8001d1e:	2027      	movs	r0, #39	@ 0x27
 8001d20:	f001 fd54 	bl	80037cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d24:	2027      	movs	r0, #39	@ 0x27
 8001d26:	f001 fd6b 	bl	8003800 <HAL_NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	37f8      	adds	r7, #248	@ 0xf8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40004800 	.word	0x40004800
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	58020c00 	.word	0x58020c00
 8001d40:	240017c4 	.word	0x240017c4
 8001d44:	40020010 	.word	0x40020010
 8001d48:	2400183c 	.word	0x2400183c
 8001d4c:	40020028 	.word	0x40020028

08001d50 <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0))/((float)(uiRefMax - uiRef0)) : ((int)(uiValue - uiRef0))/((float)(uiRef0 - uiRefMin));
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	dd10      	ble.n	8001d8a <fGetJoyPostition+0x3a>
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d88:	e00f      	b.n	8001daa <fGetJoyPostition+0x5a>
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8001daa:	eeb0 0a67 	vmov.f32	s0, s15
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8001db8:	b084      	sub	sp, #16
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	f107 0c18 	add.w	ip, r7, #24
 8001dc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  float_bytes xThrottle;
  float_bytes xSteering;
  float_bytes xBrake;

  xThrottle.fFloat = xControlActionTx.fTrottle;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	60fb      	str	r3, [r7, #12]
  xSteering.fFloat = xControlActionTx.fSteeringAngle;
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	60bb      	str	r3, [r7, #8]
  xBrake.fFloat = xControlActionTx.fBrake;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	607b      	str	r3, [r7, #4]

  ucTxMsg[0]  = (unsigned char)'#';
 8001dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd6:	2223      	movs	r2, #35	@ 0x23
 8001dd8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'T';
 8001dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ddc:	3301      	adds	r3, #1
 8001dde:	2254      	movs	r2, #84	@ 0x54
 8001de0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xThrottle.ucBytes[0];
 8001de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de4:	3302      	adds	r3, #2
 8001de6:	7b3a      	ldrb	r2, [r7, #12]
 8001de8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xThrottle.ucBytes[1];
 8001dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dec:	3303      	adds	r3, #3
 8001dee:	7b7a      	ldrb	r2, [r7, #13]
 8001df0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xThrottle.ucBytes[2];
 8001df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df4:	3304      	adds	r3, #4
 8001df6:	7bba      	ldrb	r2, [r7, #14]
 8001df8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xThrottle.ucBytes[3];
 8001dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfc:	3305      	adds	r3, #5
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'S';
 8001e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e04:	3306      	adds	r3, #6
 8001e06:	2253      	movs	r2, #83	@ 0x53
 8001e08:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xSteering.ucBytes[0];
 8001e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e0c:	3307      	adds	r3, #7
 8001e0e:	7a3a      	ldrb	r2, [r7, #8]
 8001e10:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xSteering.ucBytes[1];
 8001e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e14:	3308      	adds	r3, #8
 8001e16:	7a7a      	ldrb	r2, [r7, #9]
 8001e18:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xSteering.ucBytes[2];
 8001e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1c:	3309      	adds	r3, #9
 8001e1e:	7aba      	ldrb	r2, [r7, #10]
 8001e20:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xSteering.ucBytes[3];
 8001e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e24:	330a      	adds	r3, #10
 8001e26:	7afa      	ldrb	r2, [r7, #11]
 8001e28:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'B';
 8001e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2c:	330b      	adds	r3, #11
 8001e2e:	2242      	movs	r2, #66	@ 0x42
 8001e30:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xBrake.ucBytes[0];
 8001e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e34:	330c      	adds	r3, #12
 8001e36:	793a      	ldrb	r2, [r7, #4]
 8001e38:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xBrake.ucBytes[1];
 8001e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e3c:	330d      	adds	r3, #13
 8001e3e:	797a      	ldrb	r2, [r7, #5]
 8001e40:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xBrake.ucBytes[2];
 8001e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e44:	330e      	adds	r3, #14
 8001e46:	79ba      	ldrb	r2, [r7, #6]
 8001e48:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xBrake.ucBytes[3];
 8001e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e4c:	330f      	adds	r3, #15
 8001e4e:	79fa      	ldrb	r2, [r7, #7]
 8001e50:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'H';
 8001e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e54:	3310      	adds	r3, #16
 8001e56:	2248      	movs	r2, #72	@ 0x48
 8001e58:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.ucHandBrake;
 8001e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5c:	3311      	adds	r3, #17
 8001e5e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e62:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = (unsigned char)'R';
 8001e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e66:	3312      	adds	r3, #18
 8001e68:	2252      	movs	r2, #82	@ 0x52
 8001e6a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.ucReverse;
 8001e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6e:	3313      	adds	r3, #19
 8001e70:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001e74:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = (unsigned char)'G';
 8001e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e78:	3314      	adds	r3, #20
 8001e7a:	2247      	movs	r2, #71	@ 0x47
 8001e7c:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = xControlActionTx.ucGear;
 8001e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e80:	3315      	adds	r3, #21
 8001e82:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001e86:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = (unsigned char)'M';
 8001e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8a:	3316      	adds	r3, #22
 8001e8c:	224d      	movs	r2, #77	@ 0x4d
 8001e8e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.ucManualGearShift;
 8001e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e92:	3317      	adds	r3, #23
 8001e94:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001e98:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = (unsigned char)'$';
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	3318      	adds	r3, #24
 8001e9e:	2224      	movs	r2, #36	@ 0x24
 8001ea0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = (unsigned char)'\0';
 8001ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea4:	3319      	adds	r3, #25
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
  
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	b004      	add	sp, #16
 8001eb6:	4770      	bx	lr

08001eb8 <vDrivingModeLights>:
  * @brief  Update driving mode signaling lights
  * @param  ucDrivingMode:  Driving mode
  * @retval None
  */
void vDrivingModeLights(unsigned char ucDrivingMode)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  switch (ucDrivingMode)
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d016      	beq.n	8001ef6 <vDrivingModeLights+0x3e>
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	dc36      	bgt.n	8001f3a <vDrivingModeLights+0x82>
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d023      	beq.n	8001f18 <vDrivingModeLights+0x60>
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d132      	bne.n	8001f3a <vDrivingModeLights+0x82>
  {
    case AUTOWARE:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Green LED
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	481a      	ldr	r0, [pc, #104]	@ (8001f44 <vDrivingModeLights+0x8c>)
 8001eda:	f004 fc8b 	bl	80067f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1); // Ambar LED
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	4819      	ldr	r0, [pc, #100]	@ (8001f48 <vDrivingModeLights+0x90>)
 8001ee4:	f004 fc86 	bl	80067f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eee:	4815      	ldr	r0, [pc, #84]	@ (8001f44 <vDrivingModeLights+0x8c>)
 8001ef0:	f004 fc80 	bl	80067f4 <HAL_GPIO_WritePin>
      break;
 8001ef4:	e022      	b.n	8001f3c <vDrivingModeLights+0x84>

    case MANUAL:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 1); // Green LED
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4812      	ldr	r0, [pc, #72]	@ (8001f44 <vDrivingModeLights+0x8c>)
 8001efc:	f004 fc7a 	bl	80067f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Ambar LED
 8001f00:	2200      	movs	r2, #0
 8001f02:	2102      	movs	r1, #2
 8001f04:	4810      	ldr	r0, [pc, #64]	@ (8001f48 <vDrivingModeLights+0x90>)
 8001f06:	f004 fc75 	bl	80067f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f10:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <vDrivingModeLights+0x8c>)
 8001f12:	f004 fc6f 	bl	80067f4 <HAL_GPIO_WritePin>
      break;
 8001f16:	e011      	b.n	8001f3c <vDrivingModeLights+0x84>

    case EMERGENCY:
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Green LED
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	480a      	ldr	r0, [pc, #40]	@ (8001f48 <vDrivingModeLights+0x90>)
 8001f1e:	f004 fc69 	bl	80067f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Ambar LED
 8001f22:	2200      	movs	r2, #0
 8001f24:	2101      	movs	r1, #1
 8001f26:	4807      	ldr	r0, [pc, #28]	@ (8001f44 <vDrivingModeLights+0x8c>)
 8001f28:	f004 fc64 	bl	80067f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1); // Red LED
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f32:	4804      	ldr	r0, [pc, #16]	@ (8001f44 <vDrivingModeLights+0x8c>)
 8001f34:	f004 fc5e 	bl	80067f4 <HAL_GPIO_WritePin>
      break;
 8001f38:	e000      	b.n	8001f3c <vDrivingModeLights+0x84>

    default:
      break;
 8001f3a:	bf00      	nop
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	58020400 	.word	0x58020400
 8001f48:	58021000 	.word	0x58021000

08001f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f50:	f7ff fa6e 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f011 fe2f 	bl	8013bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7e:	f7fe fe33 	bl	8000be8 <main>
  bx  lr
 8001f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f8c:	240013ec 	.word	0x240013ec
  ldr r2, =_sidata
 8001f90:	08015a0c 	.word	0x08015a0c
  ldr r2, =_sbss
 8001f94:	240013ec 	.word	0x240013ec
  ldr r4, =_ebss
 8001f98:	2403352c 	.word	0x2403352c

08001f9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC3_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa6:	2003      	movs	r0, #3
 8001fa8:	f001 fc05 	bl	80037b6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fac:	f005 faa0 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_Init+0x68>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	4913      	ldr	r1, [pc, #76]	@ (800200c <HAL_Init+0x6c>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_Init+0x68>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <HAL_Init+0x6c>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8002010 <HAL_Init+0x70>)
 8001fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <HAL_Init+0x74>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fea:	200f      	movs	r0, #15
 8001fec:	f7ff f88c 	bl	8001108 <HAL_InitTick>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e002      	b.n	8002000 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffa:	f7ff f867 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	58024400 	.word	0x58024400
 800200c:	08014008 	.word	0x08014008
 8002010:	24000004 	.word	0x24000004
 8002014:	24000000 	.word	0x24000000

08002018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_IncTick+0x20>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_IncTick+0x24>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4413      	add	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	@ (800203c <HAL_IncTick+0x24>)
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2400000c 	.word	0x2400000c
 800203c:	240018b4 	.word	0x240018b4

08002040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b03      	ldr	r3, [pc, #12]	@ (8002054 <HAL_GetTick+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	240018b4 	.word	0x240018b4

08002058 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <HAL_GetREVID+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0c1b      	lsrs	r3, r3, #16
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	5c001000 	.word	0x5c001000

08002070 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	609a      	str	r2, [r3, #8]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3360      	adds	r3, #96	@ 0x60
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	430b      	orrs	r3, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800210c:	bf00      	nop
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	611a      	str	r2, [r3, #16]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800214a:	b480      	push	{r7}
 800214c:	b087      	sub	sp, #28
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3360      	adds	r3, #96	@ 0x60
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	431a      	orrs	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	601a      	str	r2, [r3, #0]
  }
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b087      	sub	sp, #28
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3330      	adds	r3, #48	@ 0x30
 80021b6:	461a      	mov	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	4413      	add	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	211f      	movs	r1, #31
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	401a      	ands	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	f003 011f 	and.w	r1, r3, #31
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	431a      	orrs	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021f2:	bf00      	nop
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f023 0203 	bic.w	r2, r3, #3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3314      	adds	r3, #20
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	0e5b      	lsrs	r3, r3, #25
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	4413      	add	r3, r2
 8002242:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	0d1b      	lsrs	r3, r3, #20
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2107      	movs	r1, #7
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	401a      	ands	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	0d1b      	lsrs	r3, r3, #20
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	431a      	orrs	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002294:	43db      	mvns	r3, r3
 8002296:	401a      	ands	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0318 	and.w	r3, r3, #24
 800229e:	4908      	ldr	r1, [pc, #32]	@ (80022c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022a0:	40d9      	lsrs	r1, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	400b      	ands	r3, r1
 80022a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022aa:	431a      	orrs	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	000fffff 	.word	0x000fffff

080022c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 031f 	and.w	r3, r3, #31
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <LL_ADC_DisableDeepPowerDown+0x20>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6093      	str	r3, [r2, #8]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	5fffffc0 	.word	0x5fffffc0

08002304 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002318:	d101      	bne.n	800231e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <LL_ADC_EnableInternalRegulator+0x24>)
 800233a:	4013      	ands	r3, r2
 800233c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	6fffffc0 	.word	0x6fffffc0

08002354 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002368:	d101      	bne.n	800236e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <LL_ADC_Enable+0x24>)
 800238a:	4013      	ands	r3, r2
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	7fffffc0 	.word	0x7fffffc0

080023a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <LL_ADC_IsEnabled+0x18>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <LL_ADC_IsEnabled+0x1a>
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <LL_ADC_REG_StartConversion+0x24>)
 80023da:	4013      	ands	r3, r2
 80023dc:	f043 0204 	orr.w	r2, r3, #4
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	7fffffc0 	.word	0x7fffffc0

080023f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b04      	cmp	r3, #4
 8002406:	d101      	bne.n	800240c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d101      	bne.n	8002432 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b089      	sub	sp, #36	@ 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e18f      	b.n	800277a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fe f94d 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff3f 	bl	8002304 <LL_ADC_IsDeepPowerDownEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff25 	bl	80022e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff5a 	bl	8002354 <LL_ADC_IsInternalRegulatorEnabled>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d114      	bne.n	80024d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff3e 	bl	800232c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b0:	4b87      	ldr	r3, [pc, #540]	@ (80026d0 <HAL_ADC_Init+0x290>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	4a87      	ldr	r2, [pc, #540]	@ (80026d4 <HAL_ADC_Init+0x294>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	3301      	adds	r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024c2:	e002      	b.n	80024ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f9      	bne.n	80024c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff3d 	bl	8002354 <LL_ADC_IsInternalRegulatorEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e4:	f043 0210 	orr.w	r2, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff77 	bl	80023f4 <LL_ADC_REG_IsConversionOngoing>
 8002506:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 8129 	bne.w	8002768 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f040 8125 	bne.w	8002768 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002522:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002526:	f043 0202 	orr.w	r2, r3, #2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff36 	bl	80023a4 <LL_ADC_IsEnabled>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d136      	bne.n	80025ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a65      	ldr	r2, [pc, #404]	@ (80026d8 <HAL_ADC_Init+0x298>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_ADC_Init+0x112>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a63      	ldr	r2, [pc, #396]	@ (80026dc <HAL_ADC_Init+0x29c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10e      	bne.n	8002570 <HAL_ADC_Init+0x130>
 8002552:	4861      	ldr	r0, [pc, #388]	@ (80026d8 <HAL_ADC_Init+0x298>)
 8002554:	f7ff ff26 	bl	80023a4 <LL_ADC_IsEnabled>
 8002558:	4604      	mov	r4, r0
 800255a:	4860      	ldr	r0, [pc, #384]	@ (80026dc <HAL_ADC_Init+0x29c>)
 800255c:	f7ff ff22 	bl	80023a4 <LL_ADC_IsEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	4323      	orrs	r3, r4
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e008      	b.n	8002582 <HAL_ADC_Init+0x142>
 8002570:	485b      	ldr	r0, [pc, #364]	@ (80026e0 <HAL_ADC_Init+0x2a0>)
 8002572:	f7ff ff17 	bl	80023a4 <LL_ADC_IsEnabled>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d012      	beq.n	80025ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a53      	ldr	r2, [pc, #332]	@ (80026d8 <HAL_ADC_Init+0x298>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d004      	beq.n	800259a <HAL_ADC_Init+0x15a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a51      	ldr	r2, [pc, #324]	@ (80026dc <HAL_ADC_Init+0x29c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_ADC_Init+0x15e>
 800259a:	4a52      	ldr	r2, [pc, #328]	@ (80026e4 <HAL_ADC_Init+0x2a4>)
 800259c:	e000      	b.n	80025a0 <HAL_ADC_Init+0x160>
 800259e:	4a52      	ldr	r2, [pc, #328]	@ (80026e8 <HAL_ADC_Init+0x2a8>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f7ff fd62 	bl	8002070 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80025ac:	f7ff fd54 	bl	8002058 <HAL_GetREVID>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d914      	bls.n	80025e4 <HAL_ADC_Init+0x1a4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d110      	bne.n	80025e4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7d5b      	ldrb	r3, [r3, #21]
 80025c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80025d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7f1b      	ldrb	r3, [r3, #28]
 80025d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80025da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025dc:	f043 030c 	orr.w	r3, r3, #12
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	e00d      	b.n	8002600 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7d5b      	ldrb	r3, [r3, #21]
 80025e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80025f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7f1b      	ldrb	r3, [r3, #28]
 80025fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7f1b      	ldrb	r3, [r3, #28]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	3b01      	subs	r3, #1
 800260e:	045b      	lsls	r3, r3, #17
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	4b2c      	ldr	r3, [pc, #176]	@ (80026ec <HAL_ADC_Init+0x2ac>)
 800263a:	4013      	ands	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	69b9      	ldr	r1, [r7, #24]
 8002642:	430b      	orrs	r3, r1
 8002644:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fed2 	bl	80023f4 <LL_ADC_REG_IsConversionOngoing>
 8002650:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fedf 	bl	800241a <LL_ADC_INJ_IsConversionOngoing>
 800265c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d15f      	bne.n	8002724 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d15c      	bne.n	8002724 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7d1b      	ldrb	r3, [r3, #20]
 800266e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	4b1c      	ldr	r3, [pc, #112]	@ (80026f0 <HAL_ADC_Init+0x2b0>)
 8002680:	4013      	ands	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	69b9      	ldr	r1, [r7, #24]
 8002688:	430b      	orrs	r3, r1
 800268a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002692:	2b01      	cmp	r3, #1
 8002694:	d130      	bne.n	80026f8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <HAL_ADC_Init+0x2b4>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026aa:	3a01      	subs	r2, #1
 80026ac:	0411      	lsls	r1, r2, #16
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026b2:	4311      	orrs	r1, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026be:	430a      	orrs	r2, r1
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	611a      	str	r2, [r3, #16]
 80026cc:	e01c      	b.n	8002708 <HAL_ADC_Init+0x2c8>
 80026ce:	bf00      	nop
 80026d0:	24000000 	.word	0x24000000
 80026d4:	053e2d63 	.word	0x053e2d63
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40022100 	.word	0x40022100
 80026e0:	58026000 	.word	0x58026000
 80026e4:	40022300 	.word	0x40022300
 80026e8:	58026300 	.word	0x58026300
 80026ec:	fff0c003 	.word	0xfff0c003
 80026f0:	ffffbffc 	.word	0xffffbffc
 80026f4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fd8c 	bl	800323c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10c      	bne.n	8002746 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f023 010f 	bic.w	r1, r3, #15
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	1e5a      	subs	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
 8002744:	e007      	b.n	8002756 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 020f 	bic.w	r2, r2, #15
 8002754:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	@ 0x54
 8002766:	e007      	b.n	8002778 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276c:	f043 0210 	orr.w	r2, r3, #16
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002778:	7ffb      	ldrb	r3, [r7, #31]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	@ 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	bf00      	nop

08002784 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a55      	ldr	r2, [pc, #340]	@ (80028ec <HAL_ADC_Start_DMA+0x168>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_ADC_Start_DMA+0x20>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a54      	ldr	r2, [pc, #336]	@ (80028f0 <HAL_ADC_Start_DMA+0x16c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_Start_DMA+0x24>
 80027a4:	4b53      	ldr	r3, [pc, #332]	@ (80028f4 <HAL_ADC_Start_DMA+0x170>)
 80027a6:	e000      	b.n	80027aa <HAL_ADC_Start_DMA+0x26>
 80027a8:	4b53      	ldr	r3, [pc, #332]	@ (80028f8 <HAL_ADC_Start_DMA+0x174>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fd8a 	bl	80022c4 <LL_ADC_GetMultimode>
 80027b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fe1c 	bl	80023f4 <LL_ADC_REG_IsConversionOngoing>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 808c 	bne.w	80028dc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x4e>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e087      	b.n	80028e2 <HAL_ADC_Start_DMA+0x15e>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d002      	beq.n	80027ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d170      	bne.n	80028ce <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fc07 	bl	8003000 <ADC_Enable>
 80027f2:	4603      	mov	r3, r0
 80027f4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d163      	bne.n	80028c4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002800:	4b3e      	ldr	r3, [pc, #248]	@ (80028fc <HAL_ADC_Start_DMA+0x178>)
 8002802:	4013      	ands	r3, r2
 8002804:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a37      	ldr	r2, [pc, #220]	@ (80028f0 <HAL_ADC_Start_DMA+0x16c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d002      	beq.n	800281c <HAL_ADC_Start_DMA+0x98>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	e000      	b.n	800281e <HAL_ADC_Start_DMA+0x9a>
 800281c:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <HAL_ADC_Start_DMA+0x168>)
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	4293      	cmp	r3, r2
 8002824:	d002      	beq.n	800282c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002830:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002848:	f023 0206 	bic.w	r2, r3, #6
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002850:	e002      	b.n	8002858 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285c:	4a28      	ldr	r2, [pc, #160]	@ (8002900 <HAL_ADC_Start_DMA+0x17c>)
 800285e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	4a27      	ldr	r2, [pc, #156]	@ (8002904 <HAL_ADC_Start_DMA+0x180>)
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286c:	4a26      	ldr	r2, [pc, #152]	@ (8002908 <HAL_ADC_Start_DMA+0x184>)
 800286e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	221c      	movs	r2, #28
 8002876:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0210 	orr.w	r2, r2, #16
 800288e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f7ff fcaf 	bl	80021fe <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3340      	adds	r3, #64	@ 0x40
 80028aa:	4619      	mov	r1, r3
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f001 fb10 	bl	8003ed4 <HAL_DMA_Start_IT>
 80028b4:	4603      	mov	r3, r0
 80028b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fd85 	bl	80023cc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80028c2:	e00d      	b.n	80028e0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80028cc:	e008      	b.n	80028e0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80028da:	e001      	b.n	80028e0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
 80028de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40022100 	.word	0x40022100
 80028f4:	40022300 	.word	0x40022300
 80028f8:	58026300 	.word	0x58026300
 80028fc:	fffff0fe 	.word	0xfffff0fe
 8002900:	08003115 	.word	0x08003115
 8002904:	080031ed 	.word	0x080031ed
 8002908:	08003209 	.word	0x08003209

0800290c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b0a1      	sub	sp, #132	@ 0x84
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a65      	ldr	r2, [pc, #404]	@ (8002af8 <HAL_ADC_ConfigChannel+0x1b0>)
 8002962:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x2a>
 800296e:	2302      	movs	r3, #2
 8002970:	e32e      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x688>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fd38 	bl	80023f4 <LL_ADC_REG_IsConversionOngoing>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8313 	bne.w	8002fb2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db2c      	blt.n	80029ee <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800299c:	2b00      	cmp	r3, #0
 800299e:	d108      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x6a>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2201      	movs	r2, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	e016      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x98>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029c2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80029ca:	2320      	movs	r3, #32
 80029cc:	e003      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80029ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2201      	movs	r2, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	69d1      	ldr	r1, [r2, #28]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	430b      	orrs	r3, r1
 80029ec:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f7ff fbd3 	bl	80021a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fcf5 	bl	80023f4 <LL_ADC_REG_IsConversionOngoing>
 8002a0a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fd02 	bl	800241a <LL_ADC_INJ_IsConversionOngoing>
 8002a16:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 80b8 	bne.w	8002b90 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 80b4 	bne.w	8002b90 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	461a      	mov	r2, r3
 8002a36:	f7ff fbf5 	bl	8002224 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a3a:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <HAL_ADC_ConfigChannel+0x1b4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a46:	d10b      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x118>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	e01d      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x154>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10b      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x13e>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	e00a      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x154>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d02c      	beq.n	8002b00 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6919      	ldr	r1, [r3, #16]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ab4:	f7ff fb10 	bl	80020d8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6919      	ldr	r1, [r3, #16]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	7e5b      	ldrb	r3, [r3, #25]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d102      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x186>
 8002ac8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002acc:	e000      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x188>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f7ff fb3a 	bl	800214a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6919      	ldr	r1, [r3, #16]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	7e1b      	ldrb	r3, [r3, #24]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d102      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x1a4>
 8002ae6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002aea:	e000      	b.n	8002aee <HAL_ADC_ConfigChannel+0x1a6>
 8002aec:	2300      	movs	r3, #0
 8002aee:	461a      	mov	r2, r3
 8002af0:	f7ff fb12 	bl	8002118 <LL_ADC_SetDataRightShift>
 8002af4:	e04c      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x248>
 8002af6:	bf00      	nop
 8002af8:	47ff0000 	.word	0x47ff0000
 8002afc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	069b      	lsls	r3, r3, #26
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d107      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b22:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	069b      	lsls	r3, r3, #26
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d107      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b46:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	069b      	lsls	r3, r3, #26
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d107      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b6a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	069b      	lsls	r3, r3, #26
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d107      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b8e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fc05 	bl	80023a4 <LL_ADC_IsEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 8211 	bne.w	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f7ff fb64 	bl	800227c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4aa1      	ldr	r2, [pc, #644]	@ (8002e40 <HAL_ADC_ConfigChannel+0x4f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f040 812e 	bne.w	8002e1c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x2a0>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0e9b      	lsrs	r3, r3, #26
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2b09      	cmp	r3, #9
 8002bde:	bf94      	ite	ls
 8002be0:	2301      	movls	r3, #1
 8002be2:	2300      	movhi	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e019      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x2d4>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002c04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	2b09      	cmp	r3, #9
 8002c14:	bf94      	ite	ls
 8002c16:	2301      	movls	r3, #1
 8002c18:	2300      	movhi	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d079      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x2f4>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	3301      	adds	r3, #1
 8002c34:	069b      	lsls	r3, r3, #26
 8002c36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c3a:	e015      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x320>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c4c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e003      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002c58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	069b      	lsls	r3, r3, #26
 8002c64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x340>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	e017      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x370>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c98:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	e003      	b.n	8002cac <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	3301      	adds	r3, #1
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	ea42 0103 	orr.w	r1, r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x396>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0e9b      	lsrs	r3, r3, #26
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	051b      	lsls	r3, r3, #20
 8002cdc:	e018      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x3c8>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	e003      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	3301      	adds	r3, #1
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d10:	430b      	orrs	r3, r1
 8002d12:	e07e      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x3e8>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	3301      	adds	r3, #1
 8002d28:	069b      	lsls	r3, r3, #26
 8002d2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d2e:	e015      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x414>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e003      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	069b      	lsls	r3, r3, #26
 8002d58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x434>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	e017      	b.n	8002dac <HAL_ADC_ConfigChannel+0x464>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	61bb      	str	r3, [r7, #24]
  return result;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e003      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	ea42 0103 	orr.w	r1, r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x490>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b1e      	subs	r3, #30
 8002dd0:	051b      	lsls	r3, r3, #20
 8002dd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	e01b      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x4c8>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	60fb      	str	r3, [r7, #12]
  return result;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e003      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f003 021f 	and.w	r2, r3, #31
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	3b1e      	subs	r3, #30
 8002e0a:	051b      	lsls	r3, r3, #20
 8002e0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e10:	430b      	orrs	r3, r1
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	6892      	ldr	r2, [r2, #8]
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7ff fa04 	bl	8002224 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f280 80cf 	bge.w	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a06      	ldr	r2, [pc, #24]	@ (8002e44 <HAL_ADC_ConfigChannel+0x4fc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_ConfigChannel+0x4f2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <HAL_ADC_ConfigChannel+0x500>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10a      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x508>
 8002e3a:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <HAL_ADC_ConfigChannel+0x504>)
 8002e3c:	e009      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x50a>
 8002e3e:	bf00      	nop
 8002e40:	47ff0000 	.word	0x47ff0000
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40022100 	.word	0x40022100
 8002e4c:	40022300 	.word	0x40022300
 8002e50:	4b61      	ldr	r3, [pc, #388]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x690>)
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f932 	bl	80020bc <LL_ADC_GetCommonPathInternalCh>
 8002e58:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5f      	ldr	r2, [pc, #380]	@ (8002fdc <HAL_ADC_ConfigChannel+0x694>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0x526>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x698>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10e      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x544>
 8002e6e:	485b      	ldr	r0, [pc, #364]	@ (8002fdc <HAL_ADC_ConfigChannel+0x694>)
 8002e70:	f7ff fa98 	bl	80023a4 <LL_ADC_IsEnabled>
 8002e74:	4604      	mov	r4, r0
 8002e76:	485a      	ldr	r0, [pc, #360]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x698>)
 8002e78:	f7ff fa94 	bl	80023a4 <LL_ADC_IsEnabled>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4323      	orrs	r3, r4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e008      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x556>
 8002e8c:	4855      	ldr	r0, [pc, #340]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x69c>)
 8002e8e:	f7ff fa89 	bl	80023a4 <LL_ADC_IsEnabled>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d07d      	beq.n	8002f9e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a50      	ldr	r2, [pc, #320]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x6a0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d130      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x5c6>
 8002eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d12b      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x69c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	f040 8081 	bne.w	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a45      	ldr	r2, [pc, #276]	@ (8002fdc <HAL_ADC_ConfigChannel+0x694>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_ADC_ConfigChannel+0x58e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a43      	ldr	r2, [pc, #268]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x698>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x592>
 8002ed6:	4a45      	ldr	r2, [pc, #276]	@ (8002fec <HAL_ADC_ConfigChannel+0x6a4>)
 8002ed8:	e000      	b.n	8002edc <HAL_ADC_ConfigChannel+0x594>
 8002eda:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x690>)
 8002edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ede:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f7ff f8d6 	bl	8002096 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eea:	4b41      	ldr	r3, [pc, #260]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x6a8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	4a40      	ldr	r2, [pc, #256]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x6ac>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	3301      	adds	r3, #1
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002efe:	e002      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f9      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f0c:	e05a      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a39      	ldr	r2, [pc, #228]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d11e      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x60e>
 8002f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d119      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2f      	ldr	r2, [pc, #188]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x69c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d14b      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2a      	ldr	r2, [pc, #168]	@ (8002fdc <HAL_ADC_ConfigChannel+0x694>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x5f8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a29      	ldr	r2, [pc, #164]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x698>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x5fc>
 8002f40:	4a2a      	ldr	r2, [pc, #168]	@ (8002fec <HAL_ADC_ConfigChannel+0x6a4>)
 8002f42:	e000      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x5fe>
 8002f44:	4a24      	ldr	r2, [pc, #144]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x690>)
 8002f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f7ff f8a1 	bl	8002096 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f54:	e036      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a28      	ldr	r2, [pc, #160]	@ (8002ffc <HAL_ADC_ConfigChannel+0x6b4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d131      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
 8002f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d12c      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x69c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d127      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a18      	ldr	r2, [pc, #96]	@ (8002fdc <HAL_ADC_ConfigChannel+0x694>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_ADC_ConfigChannel+0x640>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a17      	ldr	r2, [pc, #92]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x698>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x644>
 8002f88:	4a18      	ldr	r2, [pc, #96]	@ (8002fec <HAL_ADC_ConfigChannel+0x6a4>)
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x646>
 8002f8c:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x690>)
 8002f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f7ff f87d 	bl	8002096 <LL_ADC_SetCommonPathInternalCh>
 8002f9c:	e012      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002fb0:	e008      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fcc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3784      	adds	r7, #132	@ 0x84
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	58026300 	.word	0x58026300
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	40022100 	.word	0x40022100
 8002fe4:	58026000 	.word	0x58026000
 8002fe8:	cb840000 	.word	0xcb840000
 8002fec:	40022300 	.word	0x40022300
 8002ff0:	24000000 	.word	0x24000000
 8002ff4:	053e2d63 	.word	0x053e2d63
 8002ff8:	c7520000 	.word	0xc7520000
 8002ffc:	cfb80000 	.word	0xcfb80000

08003000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff f9c9 	bl	80023a4 <LL_ADC_IsEnabled>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d16e      	bne.n	80030f6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	4b38      	ldr	r3, [pc, #224]	@ (8003100 <ADC_Enable+0x100>)
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302a:	f043 0210 	orr.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e05a      	b.n	80030f8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff f998 	bl	800237c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800304c:	f7fe fff8 	bl	8002040 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2b      	ldr	r2, [pc, #172]	@ (8003104 <ADC_Enable+0x104>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <ADC_Enable+0x66>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <ADC_Enable+0x108>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <ADC_Enable+0x6a>
 8003066:	4b29      	ldr	r3, [pc, #164]	@ (800310c <ADC_Enable+0x10c>)
 8003068:	e000      	b.n	800306c <ADC_Enable+0x6c>
 800306a:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <ADC_Enable+0x110>)
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f929 	bl	80022c4 <LL_ADC_GetMultimode>
 8003072:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a23      	ldr	r2, [pc, #140]	@ (8003108 <ADC_Enable+0x108>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d002      	beq.n	8003084 <ADC_Enable+0x84>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	e000      	b.n	8003086 <ADC_Enable+0x86>
 8003084:	4b1f      	ldr	r3, [pc, #124]	@ (8003104 <ADC_Enable+0x104>)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	4293      	cmp	r3, r2
 800308c:	d02c      	beq.n	80030e8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d130      	bne.n	80030f6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003094:	e028      	b.n	80030e8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f982 	bl	80023a4 <LL_ADC_IsEnabled>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d104      	bne.n	80030b0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f966 	bl	800237c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030b0:	f7fe ffc6 	bl	8002040 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d914      	bls.n	80030e8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d00d      	beq.n	80030e8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d0:	f043 0210 	orr.w	r2, r3, #16
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e007      	b.n	80030f8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d1cf      	bne.n	8003096 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	8000003f 	.word	0x8000003f
 8003104:	40022000 	.word	0x40022000
 8003108:	40022100 	.word	0x40022100
 800310c:	40022300 	.word	0x40022300
 8003110:	58026300 	.word	0x58026300

08003114 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003120:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003126:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800312a:	2b00      	cmp	r3, #0
 800312c:	d14b      	bne.n	80031c6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d021      	beq.n	800318c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff f817 	bl	8002180 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d032      	beq.n	80031be <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d12b      	bne.n	80031be <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11f      	bne.n	80031be <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
 800318a:	e018      	b.n	80031be <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d111      	bne.n	80031be <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d105      	bne.n	80031be <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fba4 	bl	800290c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031c4:	e00e      	b.n	80031e4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff fbae 	bl	8002934 <HAL_ADC_ErrorCallback>
}
 80031d8:	e004      	b.n	80031e4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7ff fb90 	bl	8002920 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff fb80 	bl	8002934 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a7a      	ldr	r2, [pc, #488]	@ (8003434 <ADC_ConfigureBoostMode+0x1f8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <ADC_ConfigureBoostMode+0x1c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a79      	ldr	r2, [pc, #484]	@ (8003438 <ADC_ConfigureBoostMode+0x1fc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d109      	bne.n	800326c <ADC_ConfigureBoostMode+0x30>
 8003258:	4b78      	ldr	r3, [pc, #480]	@ (800343c <ADC_ConfigureBoostMode+0x200>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e008      	b.n	800327e <ADC_ConfigureBoostMode+0x42>
 800326c:	4b74      	ldr	r3, [pc, #464]	@ (8003440 <ADC_ConfigureBoostMode+0x204>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01c      	beq.n	80032bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003282:	f004 faaf 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 8003286:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003290:	d010      	beq.n	80032b4 <ADC_ConfigureBoostMode+0x78>
 8003292:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003296:	d873      	bhi.n	8003380 <ADC_ConfigureBoostMode+0x144>
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329c:	d002      	beq.n	80032a4 <ADC_ConfigureBoostMode+0x68>
 800329e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032a2:	d16d      	bne.n	8003380 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	60fb      	str	r3, [r7, #12]
        break;
 80032b2:	e068      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	60fb      	str	r3, [r7, #12]
        break;
 80032ba:	e064      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80032bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	f005 fd36 	bl	8008d34 <HAL_RCCEx_GetPeriphCLKFreq>
 80032c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80032d2:	d051      	beq.n	8003378 <ADC_ConfigureBoostMode+0x13c>
 80032d4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80032d8:	d854      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 80032da:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80032de:	d047      	beq.n	8003370 <ADC_ConfigureBoostMode+0x134>
 80032e0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80032e4:	d84e      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 80032e6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80032ea:	d03d      	beq.n	8003368 <ADC_ConfigureBoostMode+0x12c>
 80032ec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80032f0:	d848      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 80032f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032f6:	d033      	beq.n	8003360 <ADC_ConfigureBoostMode+0x124>
 80032f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032fc:	d842      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 80032fe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003302:	d029      	beq.n	8003358 <ADC_ConfigureBoostMode+0x11c>
 8003304:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003308:	d83c      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 800330a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800330e:	d01a      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 8003310:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003314:	d836      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 8003316:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800331a:	d014      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 800331c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003320:	d830      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 8003322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003326:	d00e      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 8003328:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800332c:	d82a      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 800332e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003332:	d008      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 8003334:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003338:	d824      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 800333a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800333e:	d002      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 8003340:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003344:	d11e      	bne.n	8003384 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	60fb      	str	r3, [r7, #12]
        break;
 8003356:	e016      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
        break;
 800335e:	e012      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	60fb      	str	r3, [r7, #12]
        break;
 8003366:	e00e      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	60fb      	str	r3, [r7, #12]
        break;
 800336e:	e00a      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	09db      	lsrs	r3, r3, #7
 8003374:	60fb      	str	r3, [r7, #12]
        break;
 8003376:	e006      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	60fb      	str	r3, [r7, #12]
        break;
 800337e:	e002      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003384:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003386:	f7fe fe67 	bl	8002058 <HAL_GetREVID>
 800338a:	4603      	mov	r3, r0
 800338c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003390:	4293      	cmp	r3, r2
 8003392:	d815      	bhi.n	80033c0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <ADC_ConfigureBoostMode+0x208>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d908      	bls.n	80033ae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80033ac:	e03e      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	e035      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <ADC_ConfigureBoostMode+0x20c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d808      	bhi.n	80033e0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80033dc:	609a      	str	r2, [r3, #8]
}
 80033de:	e025      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4a1a      	ldr	r2, [pc, #104]	@ (800344c <ADC_ConfigureBoostMode+0x210>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d80a      	bhi.n	80033fe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	e016      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a13      	ldr	r2, [pc, #76]	@ (8003450 <ADC_ConfigureBoostMode+0x214>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d80a      	bhi.n	800341c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003418:	609a      	str	r2, [r3, #8]
}
 800341a:	e007      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40022000 	.word	0x40022000
 8003438:	40022100 	.word	0x40022100
 800343c:	40022300 	.word	0x40022300
 8003440:	58026300 	.word	0x58026300
 8003444:	01312d00 	.word	0x01312d00
 8003448:	005f5e10 	.word	0x005f5e10
 800344c:	00bebc20 	.word	0x00bebc20
 8003450:	017d7840 	.word	0x017d7840

08003454 <LL_ADC_IsEnabled>:
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <LL_ADC_IsEnabled+0x18>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <LL_ADC_IsEnabled+0x1a>
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <LL_ADC_REG_IsConversionOngoing>:
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d101      	bne.n	8003492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b09f      	sub	sp, #124	@ 0x7c
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e0be      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d102      	bne.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	e001      	b.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e09d      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff ffb9 	bl	800347a <LL_ADC_REG_IsConversionOngoing>
 8003508:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff ffb3 	bl	800347a <LL_ADC_REG_IsConversionOngoing>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d17f      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800351a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800351c:	2b00      	cmp	r3, #0
 800351e:	d17c      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a47      	ldr	r2, [pc, #284]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a46      	ldr	r2, [pc, #280]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003534:	4b45      	ldr	r3, [pc, #276]	@ (800364c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003536:	e000      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003538:	4b45      	ldr	r3, [pc, #276]	@ (8003650 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800353a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d039      	beq.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	431a      	orrs	r2, r3
 8003552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003554:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a3a      	ldr	r2, [pc, #232]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a38      	ldr	r2, [pc, #224]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10e      	bne.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800356a:	4836      	ldr	r0, [pc, #216]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800356c:	f7ff ff72 	bl	8003454 <LL_ADC_IsEnabled>
 8003570:	4604      	mov	r4, r0
 8003572:	4835      	ldr	r0, [pc, #212]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003574:	f7ff ff6e 	bl	8003454 <LL_ADC_IsEnabled>
 8003578:	4603      	mov	r3, r0
 800357a:	4323      	orrs	r3, r4
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e008      	b.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003588:	4832      	ldr	r0, [pc, #200]	@ (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800358a:	f7ff ff63 	bl	8003454 <LL_ADC_IsEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d047      	beq.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800359e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	6811      	ldr	r1, [r2, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	6892      	ldr	r2, [r2, #8]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	431a      	orrs	r2, r3
 80035b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b6:	e03a      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80035b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10e      	bne.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80035d8:	481a      	ldr	r0, [pc, #104]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035da:	f7ff ff3b 	bl	8003454 <LL_ADC_IsEnabled>
 80035de:	4604      	mov	r4, r0
 80035e0:	4819      	ldr	r0, [pc, #100]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035e2:	f7ff ff37 	bl	8003454 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4323      	orrs	r3, r4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e008      	b.n	8003608 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80035f6:	4817      	ldr	r0, [pc, #92]	@ (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80035f8:	f7ff ff2c 	bl	8003454 <LL_ADC_IsEnabled>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800360c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4b11      	ldr	r3, [pc, #68]	@ (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003612:	4013      	ands	r3, r2
 8003614:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003616:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003618:	e009      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800362c:	e000      	b.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800362e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003638:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800363c:	4618      	mov	r0, r3
 800363e:	377c      	adds	r7, #124	@ 0x7c
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}
 8003644:	40022000 	.word	0x40022000
 8003648:	40022100 	.word	0x40022100
 800364c:	40022300 	.word	0x40022300
 8003650:	58026300 	.word	0x58026300
 8003654:	58026000 	.word	0x58026000
 8003658:	fffff0e0 	.word	0xfffff0e0

0800365c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <__NVIC_SetPriorityGrouping+0x40>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003678:	4013      	ands	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003686:	4313      	orrs	r3, r2
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	@ (800369c <__NVIC_SetPriorityGrouping+0x40>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00
 80036a0:	05fa0000 	.word	0x05fa0000

080036a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a8:	4b04      	ldr	r3, [pc, #16]	@ (80036bc <__NVIC_GetPriorityGrouping+0x18>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	0a1b      	lsrs	r3, r3, #8
 80036ae:	f003 0307 	and.w	r3, r3, #7
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	db0b      	blt.n	80036ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	f003 021f 	and.w	r2, r3, #31
 80036d8:	4907      	ldr	r1, [pc, #28]	@ (80036f8 <__NVIC_EnableIRQ+0x38>)
 80036da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	2001      	movs	r0, #1
 80036e2:	fa00 f202 	lsl.w	r2, r0, r2
 80036e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	e000e100 	.word	0xe000e100

080036fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800370c:	2b00      	cmp	r3, #0
 800370e:	db0a      	blt.n	8003726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	490c      	ldr	r1, [pc, #48]	@ (8003748 <__NVIC_SetPriority+0x4c>)
 8003716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	440b      	add	r3, r1
 8003720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003724:	e00a      	b.n	800373c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4908      	ldr	r1, [pc, #32]	@ (800374c <__NVIC_SetPriority+0x50>)
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	3b04      	subs	r3, #4
 8003734:	0112      	lsls	r2, r2, #4
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	440b      	add	r3, r1
 800373a:	761a      	strb	r2, [r3, #24]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000e100 	.word	0xe000e100
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	@ 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f1c3 0307 	rsb	r3, r3, #7
 800376a:	2b04      	cmp	r3, #4
 800376c:	bf28      	it	cs
 800376e:	2304      	movcs	r3, #4
 8003770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3304      	adds	r3, #4
 8003776:	2b06      	cmp	r3, #6
 8003778:	d902      	bls.n	8003780 <NVIC_EncodePriority+0x30>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3b03      	subs	r3, #3
 800377e:	e000      	b.n	8003782 <NVIC_EncodePriority+0x32>
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43da      	mvns	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	401a      	ands	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003798:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	43d9      	mvns	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a8:	4313      	orrs	r3, r2
         );
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3724      	adds	r7, #36	@ 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff4c 	bl	800365c <__NVIC_SetPriorityGrouping>
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037da:	f7ff ff63 	bl	80036a4 <__NVIC_GetPriorityGrouping>
 80037de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	6978      	ldr	r0, [r7, #20]
 80037e6:	f7ff ffb3 	bl	8003750 <NVIC_EncodePriority>
 80037ea:	4602      	mov	r2, r0
 80037ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff ff82 	bl	80036fc <__NVIC_SetPriority>
}
 80037f8:	bf00      	nop
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800380a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff56 	bl	80036c0 <__NVIC_EnableIRQ>
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003824:	f7fe fc0c 	bl	8002040 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e316      	b.n	8003e62 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a66      	ldr	r2, [pc, #408]	@ (80039d4 <HAL_DMA_Init+0x1b8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04a      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a65      	ldr	r2, [pc, #404]	@ (80039d8 <HAL_DMA_Init+0x1bc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d045      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a63      	ldr	r2, [pc, #396]	@ (80039dc <HAL_DMA_Init+0x1c0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d040      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a62      	ldr	r2, [pc, #392]	@ (80039e0 <HAL_DMA_Init+0x1c4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d03b      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a60      	ldr	r2, [pc, #384]	@ (80039e4 <HAL_DMA_Init+0x1c8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d036      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a5f      	ldr	r2, [pc, #380]	@ (80039e8 <HAL_DMA_Init+0x1cc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d031      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a5d      	ldr	r2, [pc, #372]	@ (80039ec <HAL_DMA_Init+0x1d0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02c      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a5c      	ldr	r2, [pc, #368]	@ (80039f0 <HAL_DMA_Init+0x1d4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d027      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a5a      	ldr	r2, [pc, #360]	@ (80039f4 <HAL_DMA_Init+0x1d8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a59      	ldr	r2, [pc, #356]	@ (80039f8 <HAL_DMA_Init+0x1dc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01d      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a57      	ldr	r2, [pc, #348]	@ (80039fc <HAL_DMA_Init+0x1e0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a56      	ldr	r2, [pc, #344]	@ (8003a00 <HAL_DMA_Init+0x1e4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a54      	ldr	r2, [pc, #336]	@ (8003a04 <HAL_DMA_Init+0x1e8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a53      	ldr	r2, [pc, #332]	@ (8003a08 <HAL_DMA_Init+0x1ec>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a51      	ldr	r2, [pc, #324]	@ (8003a0c <HAL_DMA_Init+0x1f0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a50      	ldr	r2, [pc, #320]	@ (8003a10 <HAL_DMA_Init+0x1f4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <HAL_DMA_Init+0xbc>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <HAL_DMA_Init+0xbe>
 80038d8:	2300      	movs	r3, #0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 813b 	beq.w	8003b56 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a37      	ldr	r2, [pc, #220]	@ (80039d4 <HAL_DMA_Init+0x1b8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d04a      	beq.n	8003990 <HAL_DMA_Init+0x174>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a36      	ldr	r2, [pc, #216]	@ (80039d8 <HAL_DMA_Init+0x1bc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d045      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a34      	ldr	r2, [pc, #208]	@ (80039dc <HAL_DMA_Init+0x1c0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d040      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a33      	ldr	r2, [pc, #204]	@ (80039e0 <HAL_DMA_Init+0x1c4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d03b      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a31      	ldr	r2, [pc, #196]	@ (80039e4 <HAL_DMA_Init+0x1c8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d036      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a30      	ldr	r2, [pc, #192]	@ (80039e8 <HAL_DMA_Init+0x1cc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d031      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2e      	ldr	r2, [pc, #184]	@ (80039ec <HAL_DMA_Init+0x1d0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d02c      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2d      	ldr	r2, [pc, #180]	@ (80039f0 <HAL_DMA_Init+0x1d4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d027      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2b      	ldr	r2, [pc, #172]	@ (80039f4 <HAL_DMA_Init+0x1d8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d022      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2a      	ldr	r2, [pc, #168]	@ (80039f8 <HAL_DMA_Init+0x1dc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d01d      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a28      	ldr	r2, [pc, #160]	@ (80039fc <HAL_DMA_Init+0x1e0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d018      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a27      	ldr	r2, [pc, #156]	@ (8003a00 <HAL_DMA_Init+0x1e4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a25      	ldr	r2, [pc, #148]	@ (8003a04 <HAL_DMA_Init+0x1e8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a24      	ldr	r2, [pc, #144]	@ (8003a08 <HAL_DMA_Init+0x1ec>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d009      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a22      	ldr	r2, [pc, #136]	@ (8003a0c <HAL_DMA_Init+0x1f0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a21      	ldr	r2, [pc, #132]	@ (8003a10 <HAL_DMA_Init+0x1f4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <HAL_DMA_Init+0x186>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e007      	b.n	80039b2 <HAL_DMA_Init+0x196>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b2:	e02f      	b.n	8003a14 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b4:	f7fe fb44 	bl	8002040 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d928      	bls.n	8003a14 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2203      	movs	r2, #3
 80039cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e246      	b.n	8003e62 <HAL_DMA_Init+0x646>
 80039d4:	40020010 	.word	0x40020010
 80039d8:	40020028 	.word	0x40020028
 80039dc:	40020040 	.word	0x40020040
 80039e0:	40020058 	.word	0x40020058
 80039e4:	40020070 	.word	0x40020070
 80039e8:	40020088 	.word	0x40020088
 80039ec:	400200a0 	.word	0x400200a0
 80039f0:	400200b8 	.word	0x400200b8
 80039f4:	40020410 	.word	0x40020410
 80039f8:	40020428 	.word	0x40020428
 80039fc:	40020440 	.word	0x40020440
 8003a00:	40020458 	.word	0x40020458
 8003a04:	40020470 	.word	0x40020470
 8003a08:	40020488 	.word	0x40020488
 8003a0c:	400204a0 	.word	0x400204a0
 8003a10:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1c8      	bne.n	80039b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4b83      	ldr	r3, [pc, #524]	@ (8003c3c <HAL_DMA_Init+0x420>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a46:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a52:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d107      	bne.n	8003a78 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	4313      	orrs	r3, r2
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a78:	4b71      	ldr	r3, [pc, #452]	@ (8003c40 <HAL_DMA_Init+0x424>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b71      	ldr	r3, [pc, #452]	@ (8003c44 <HAL_DMA_Init+0x428>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a84:	d328      	bcc.n	8003ad8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b28      	cmp	r3, #40	@ 0x28
 8003a8c:	d903      	bls.n	8003a96 <HAL_DMA_Init+0x27a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a94:	d917      	bls.n	8003ac6 <HAL_DMA_Init+0x2aa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a9c:	d903      	bls.n	8003aa6 <HAL_DMA_Init+0x28a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b42      	cmp	r3, #66	@ 0x42
 8003aa4:	d90f      	bls.n	8003ac6 <HAL_DMA_Init+0x2aa>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b46      	cmp	r3, #70	@ 0x46
 8003aac:	d903      	bls.n	8003ab6 <HAL_DMA_Init+0x29a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b48      	cmp	r3, #72	@ 0x48
 8003ab4:	d907      	bls.n	8003ac6 <HAL_DMA_Init+0x2aa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b4e      	cmp	r3, #78	@ 0x4e
 8003abc:	d905      	bls.n	8003aca <HAL_DMA_Init+0x2ae>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b52      	cmp	r3, #82	@ 0x52
 8003ac4:	d801      	bhi.n	8003aca <HAL_DMA_Init+0x2ae>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_DMA_Init+0x2b0>
 8003aca:	2300      	movs	r3, #0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0307 	bic.w	r3, r3, #7
 8003aee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d117      	bne.n	8003b32 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f002 fb33 	bl	8006180 <DMA_CheckFifoParam>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2240      	movs	r2, #64	@ 0x40
 8003b24:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e197      	b.n	8003e62 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f002 fa6e 	bl	800601c <DMA_CalcBaseAndBitshift>
 8003b40:	4603      	mov	r3, r0
 8003b42:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	223f      	movs	r2, #63	@ 0x3f
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e0cd      	b.n	8003cf2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c48 <HAL_DMA_Init+0x42c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_Init+0x38a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a39      	ldr	r2, [pc, #228]	@ (8003c4c <HAL_DMA_Init+0x430>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_Init+0x38a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a38      	ldr	r2, [pc, #224]	@ (8003c50 <HAL_DMA_Init+0x434>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_DMA_Init+0x38a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a36      	ldr	r2, [pc, #216]	@ (8003c54 <HAL_DMA_Init+0x438>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_DMA_Init+0x38a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a35      	ldr	r2, [pc, #212]	@ (8003c58 <HAL_DMA_Init+0x43c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_DMA_Init+0x38a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a33      	ldr	r2, [pc, #204]	@ (8003c5c <HAL_DMA_Init+0x440>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_DMA_Init+0x38a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a32      	ldr	r2, [pc, #200]	@ (8003c60 <HAL_DMA_Init+0x444>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_DMA_Init+0x38a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a30      	ldr	r2, [pc, #192]	@ (8003c64 <HAL_DMA_Init+0x448>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_DMA_Init+0x38e>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <HAL_DMA_Init+0x390>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8097 	beq.w	8003ce0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a24      	ldr	r2, [pc, #144]	@ (8003c48 <HAL_DMA_Init+0x42c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d021      	beq.n	8003c00 <HAL_DMA_Init+0x3e4>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a22      	ldr	r2, [pc, #136]	@ (8003c4c <HAL_DMA_Init+0x430>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01c      	beq.n	8003c00 <HAL_DMA_Init+0x3e4>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a21      	ldr	r2, [pc, #132]	@ (8003c50 <HAL_DMA_Init+0x434>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d017      	beq.n	8003c00 <HAL_DMA_Init+0x3e4>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c54 <HAL_DMA_Init+0x438>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d012      	beq.n	8003c00 <HAL_DMA_Init+0x3e4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1e      	ldr	r2, [pc, #120]	@ (8003c58 <HAL_DMA_Init+0x43c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00d      	beq.n	8003c00 <HAL_DMA_Init+0x3e4>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c5c <HAL_DMA_Init+0x440>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d008      	beq.n	8003c00 <HAL_DMA_Init+0x3e4>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c60 <HAL_DMA_Init+0x444>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <HAL_DMA_Init+0x3e4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	@ (8003c64 <HAL_DMA_Init+0x448>)
 8003bfe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4b13      	ldr	r3, [pc, #76]	@ (8003c68 <HAL_DMA_Init+0x44c>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b40      	cmp	r3, #64	@ 0x40
 8003c26:	d021      	beq.n	8003c6c <HAL_DMA_Init+0x450>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b80      	cmp	r3, #128	@ 0x80
 8003c2e:	d102      	bne.n	8003c36 <HAL_DMA_Init+0x41a>
 8003c30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c34:	e01b      	b.n	8003c6e <HAL_DMA_Init+0x452>
 8003c36:	2300      	movs	r3, #0
 8003c38:	e019      	b.n	8003c6e <HAL_DMA_Init+0x452>
 8003c3a:	bf00      	nop
 8003c3c:	fe10803f 	.word	0xfe10803f
 8003c40:	5c001000 	.word	0x5c001000
 8003c44:	ffff0000 	.word	0xffff0000
 8003c48:	58025408 	.word	0x58025408
 8003c4c:	5802541c 	.word	0x5802541c
 8003c50:	58025430 	.word	0x58025430
 8003c54:	58025444 	.word	0x58025444
 8003c58:	58025458 	.word	0x58025458
 8003c5c:	5802546c 	.word	0x5802546c
 8003c60:	58025480 	.word	0x58025480
 8003c64:	58025494 	.word	0x58025494
 8003c68:	fffe000f 	.word	0xfffe000f
 8003c6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68d2      	ldr	r2, [r2, #12]
 8003c72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8003e6c <HAL_DMA_Init+0x650>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4a6e      	ldr	r2, [pc, #440]	@ (8003e70 <HAL_DMA_Init+0x654>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	009a      	lsls	r2, r3, #2
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f002 f9a9 	bl	800601c <DMA_CalcBaseAndBitshift>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	e008      	b.n	8003cf2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2240      	movs	r2, #64	@ 0x40
 8003ce4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e0b7      	b.n	8003e62 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8003e74 <HAL_DMA_Init+0x658>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d072      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a5d      	ldr	r2, [pc, #372]	@ (8003e78 <HAL_DMA_Init+0x65c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d06d      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003e7c <HAL_DMA_Init+0x660>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d068      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a5a      	ldr	r2, [pc, #360]	@ (8003e80 <HAL_DMA_Init+0x664>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d063      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a59      	ldr	r2, [pc, #356]	@ (8003e84 <HAL_DMA_Init+0x668>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d05e      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a57      	ldr	r2, [pc, #348]	@ (8003e88 <HAL_DMA_Init+0x66c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d059      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a56      	ldr	r2, [pc, #344]	@ (8003e8c <HAL_DMA_Init+0x670>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d054      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a54      	ldr	r2, [pc, #336]	@ (8003e90 <HAL_DMA_Init+0x674>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d04f      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a53      	ldr	r2, [pc, #332]	@ (8003e94 <HAL_DMA_Init+0x678>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d04a      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a51      	ldr	r2, [pc, #324]	@ (8003e98 <HAL_DMA_Init+0x67c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d045      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a50      	ldr	r2, [pc, #320]	@ (8003e9c <HAL_DMA_Init+0x680>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d040      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a4e      	ldr	r2, [pc, #312]	@ (8003ea0 <HAL_DMA_Init+0x684>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d03b      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ea4 <HAL_DMA_Init+0x688>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d036      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea8 <HAL_DMA_Init+0x68c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d031      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a4a      	ldr	r2, [pc, #296]	@ (8003eac <HAL_DMA_Init+0x690>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d02c      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a48      	ldr	r2, [pc, #288]	@ (8003eb0 <HAL_DMA_Init+0x694>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d027      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a47      	ldr	r2, [pc, #284]	@ (8003eb4 <HAL_DMA_Init+0x698>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d022      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a45      	ldr	r2, [pc, #276]	@ (8003eb8 <HAL_DMA_Init+0x69c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01d      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a44      	ldr	r2, [pc, #272]	@ (8003ebc <HAL_DMA_Init+0x6a0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d018      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a42      	ldr	r2, [pc, #264]	@ (8003ec0 <HAL_DMA_Init+0x6a4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a41      	ldr	r2, [pc, #260]	@ (8003ec4 <HAL_DMA_Init+0x6a8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ec8 <HAL_DMA_Init+0x6ac>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ecc <HAL_DMA_Init+0x6b0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_DMA_Init+0x5c6>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ed0 <HAL_DMA_Init+0x6b4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_DMA_Init+0x5ca>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_DMA_Init+0x5cc>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d032      	beq.n	8003e52 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f002 fa43 	bl	8006278 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b80      	cmp	r3, #128	@ 0x80
 8003df8:	d102      	bne.n	8003e00 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d010      	beq.n	8003e40 <HAL_DMA_Init+0x624>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d80c      	bhi.n	8003e40 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f002 fac0 	bl	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	e008      	b.n	8003e52 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	a7fdabf8 	.word	0xa7fdabf8
 8003e70:	cccccccd 	.word	0xcccccccd
 8003e74:	40020010 	.word	0x40020010
 8003e78:	40020028 	.word	0x40020028
 8003e7c:	40020040 	.word	0x40020040
 8003e80:	40020058 	.word	0x40020058
 8003e84:	40020070 	.word	0x40020070
 8003e88:	40020088 	.word	0x40020088
 8003e8c:	400200a0 	.word	0x400200a0
 8003e90:	400200b8 	.word	0x400200b8
 8003e94:	40020410 	.word	0x40020410
 8003e98:	40020428 	.word	0x40020428
 8003e9c:	40020440 	.word	0x40020440
 8003ea0:	40020458 	.word	0x40020458
 8003ea4:	40020470 	.word	0x40020470
 8003ea8:	40020488 	.word	0x40020488
 8003eac:	400204a0 	.word	0x400204a0
 8003eb0:	400204b8 	.word	0x400204b8
 8003eb4:	58025408 	.word	0x58025408
 8003eb8:	5802541c 	.word	0x5802541c
 8003ebc:	58025430 	.word	0x58025430
 8003ec0:	58025444 	.word	0x58025444
 8003ec4:	58025458 	.word	0x58025458
 8003ec8:	5802546c 	.word	0x5802546c
 8003ecc:	58025480 	.word	0x58025480
 8003ed0:	58025494 	.word	0x58025494

08003ed4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e226      	b.n	800433e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_DMA_Start_IT+0x2a>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e21f      	b.n	800433e <HAL_DMA_Start_IT+0x46a>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	f040 820a 	bne.w	8004328 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a68      	ldr	r2, [pc, #416]	@ (80040c8 <HAL_DMA_Start_IT+0x1f4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d04a      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a66      	ldr	r2, [pc, #408]	@ (80040cc <HAL_DMA_Start_IT+0x1f8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d045      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a65      	ldr	r2, [pc, #404]	@ (80040d0 <HAL_DMA_Start_IT+0x1fc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d040      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a63      	ldr	r2, [pc, #396]	@ (80040d4 <HAL_DMA_Start_IT+0x200>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d03b      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a62      	ldr	r2, [pc, #392]	@ (80040d8 <HAL_DMA_Start_IT+0x204>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d036      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a60      	ldr	r2, [pc, #384]	@ (80040dc <HAL_DMA_Start_IT+0x208>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d031      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a5f      	ldr	r2, [pc, #380]	@ (80040e0 <HAL_DMA_Start_IT+0x20c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d02c      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80040e4 <HAL_DMA_Start_IT+0x210>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d027      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a5c      	ldr	r2, [pc, #368]	@ (80040e8 <HAL_DMA_Start_IT+0x214>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d022      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a5a      	ldr	r2, [pc, #360]	@ (80040ec <HAL_DMA_Start_IT+0x218>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01d      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a59      	ldr	r2, [pc, #356]	@ (80040f0 <HAL_DMA_Start_IT+0x21c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d018      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a57      	ldr	r2, [pc, #348]	@ (80040f4 <HAL_DMA_Start_IT+0x220>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a56      	ldr	r2, [pc, #344]	@ (80040f8 <HAL_DMA_Start_IT+0x224>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a54      	ldr	r2, [pc, #336]	@ (80040fc <HAL_DMA_Start_IT+0x228>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d009      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a53      	ldr	r2, [pc, #332]	@ (8004100 <HAL_DMA_Start_IT+0x22c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xee>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a51      	ldr	r2, [pc, #324]	@ (8004104 <HAL_DMA_Start_IT+0x230>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <HAL_DMA_Start_IT+0x100>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e007      	b.n	8003fe4 <HAL_DMA_Start_IT+0x110>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f001 fe6a 	bl	8005cc4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a34      	ldr	r2, [pc, #208]	@ (80040c8 <HAL_DMA_Start_IT+0x1f4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d04a      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a33      	ldr	r2, [pc, #204]	@ (80040cc <HAL_DMA_Start_IT+0x1f8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d045      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a31      	ldr	r2, [pc, #196]	@ (80040d0 <HAL_DMA_Start_IT+0x1fc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d040      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a30      	ldr	r2, [pc, #192]	@ (80040d4 <HAL_DMA_Start_IT+0x200>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d03b      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2e      	ldr	r2, [pc, #184]	@ (80040d8 <HAL_DMA_Start_IT+0x204>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d036      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a2d      	ldr	r2, [pc, #180]	@ (80040dc <HAL_DMA_Start_IT+0x208>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d031      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a2b      	ldr	r2, [pc, #172]	@ (80040e0 <HAL_DMA_Start_IT+0x20c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d02c      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2a      	ldr	r2, [pc, #168]	@ (80040e4 <HAL_DMA_Start_IT+0x210>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d027      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a28      	ldr	r2, [pc, #160]	@ (80040e8 <HAL_DMA_Start_IT+0x214>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a27      	ldr	r2, [pc, #156]	@ (80040ec <HAL_DMA_Start_IT+0x218>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d01d      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a25      	ldr	r2, [pc, #148]	@ (80040f0 <HAL_DMA_Start_IT+0x21c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a24      	ldr	r2, [pc, #144]	@ (80040f4 <HAL_DMA_Start_IT+0x220>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a22      	ldr	r2, [pc, #136]	@ (80040f8 <HAL_DMA_Start_IT+0x224>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a21      	ldr	r2, [pc, #132]	@ (80040fc <HAL_DMA_Start_IT+0x228>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1f      	ldr	r2, [pc, #124]	@ (8004100 <HAL_DMA_Start_IT+0x22c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_DMA_Start_IT+0x1bc>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1e      	ldr	r2, [pc, #120]	@ (8004104 <HAL_DMA_Start_IT+0x230>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_DMA_Start_IT+0x1c0>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_DMA_Start_IT+0x1c2>
 8004094:	2300      	movs	r3, #0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d036      	beq.n	8004108 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f023 021e 	bic.w	r2, r3, #30
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0216 	orr.w	r2, r2, #22
 80040ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03e      	beq.n	8004134 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0208 	orr.w	r2, r2, #8
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e035      	b.n	8004134 <HAL_DMA_Start_IT+0x260>
 80040c8:	40020010 	.word	0x40020010
 80040cc:	40020028 	.word	0x40020028
 80040d0:	40020040 	.word	0x40020040
 80040d4:	40020058 	.word	0x40020058
 80040d8:	40020070 	.word	0x40020070
 80040dc:	40020088 	.word	0x40020088
 80040e0:	400200a0 	.word	0x400200a0
 80040e4:	400200b8 	.word	0x400200b8
 80040e8:	40020410 	.word	0x40020410
 80040ec:	40020428 	.word	0x40020428
 80040f0:	40020440 	.word	0x40020440
 80040f4:	40020458 	.word	0x40020458
 80040f8:	40020470 	.word	0x40020470
 80040fc:	40020488 	.word	0x40020488
 8004100:	400204a0 	.word	0x400204a0
 8004104:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 020e 	bic.w	r2, r3, #14
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 020a 	orr.w	r2, r2, #10
 800411a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0204 	orr.w	r2, r2, #4
 8004132:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a83      	ldr	r2, [pc, #524]	@ (8004348 <HAL_DMA_Start_IT+0x474>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d072      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a82      	ldr	r2, [pc, #520]	@ (800434c <HAL_DMA_Start_IT+0x478>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d06d      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a80      	ldr	r2, [pc, #512]	@ (8004350 <HAL_DMA_Start_IT+0x47c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d068      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7f      	ldr	r2, [pc, #508]	@ (8004354 <HAL_DMA_Start_IT+0x480>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d063      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a7d      	ldr	r2, [pc, #500]	@ (8004358 <HAL_DMA_Start_IT+0x484>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d05e      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a7c      	ldr	r2, [pc, #496]	@ (800435c <HAL_DMA_Start_IT+0x488>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d059      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7a      	ldr	r2, [pc, #488]	@ (8004360 <HAL_DMA_Start_IT+0x48c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d054      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a79      	ldr	r2, [pc, #484]	@ (8004364 <HAL_DMA_Start_IT+0x490>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d04f      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a77      	ldr	r2, [pc, #476]	@ (8004368 <HAL_DMA_Start_IT+0x494>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d04a      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a76      	ldr	r2, [pc, #472]	@ (800436c <HAL_DMA_Start_IT+0x498>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d045      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a74      	ldr	r2, [pc, #464]	@ (8004370 <HAL_DMA_Start_IT+0x49c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d040      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a73      	ldr	r2, [pc, #460]	@ (8004374 <HAL_DMA_Start_IT+0x4a0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d03b      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a71      	ldr	r2, [pc, #452]	@ (8004378 <HAL_DMA_Start_IT+0x4a4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d036      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a70      	ldr	r2, [pc, #448]	@ (800437c <HAL_DMA_Start_IT+0x4a8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d031      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004380 <HAL_DMA_Start_IT+0x4ac>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02c      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004384 <HAL_DMA_Start_IT+0x4b0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d027      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004388 <HAL_DMA_Start_IT+0x4b4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d022      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6a      	ldr	r2, [pc, #424]	@ (800438c <HAL_DMA_Start_IT+0x4b8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d01d      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a68      	ldr	r2, [pc, #416]	@ (8004390 <HAL_DMA_Start_IT+0x4bc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d018      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a67      	ldr	r2, [pc, #412]	@ (8004394 <HAL_DMA_Start_IT+0x4c0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a65      	ldr	r2, [pc, #404]	@ (8004398 <HAL_DMA_Start_IT+0x4c4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a64      	ldr	r2, [pc, #400]	@ (800439c <HAL_DMA_Start_IT+0x4c8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a62      	ldr	r2, [pc, #392]	@ (80043a0 <HAL_DMA_Start_IT+0x4cc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_DMA_Start_IT+0x350>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a61      	ldr	r2, [pc, #388]	@ (80043a4 <HAL_DMA_Start_IT+0x4d0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d101      	bne.n	8004228 <HAL_DMA_Start_IT+0x354>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_DMA_Start_IT+0x356>
 8004228:	2300      	movs	r3, #0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01a      	beq.n	8004264 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800424a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800425e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004262:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a37      	ldr	r2, [pc, #220]	@ (8004348 <HAL_DMA_Start_IT+0x474>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d04a      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a36      	ldr	r2, [pc, #216]	@ (800434c <HAL_DMA_Start_IT+0x478>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d045      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a34      	ldr	r2, [pc, #208]	@ (8004350 <HAL_DMA_Start_IT+0x47c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d040      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a33      	ldr	r2, [pc, #204]	@ (8004354 <HAL_DMA_Start_IT+0x480>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d03b      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a31      	ldr	r2, [pc, #196]	@ (8004358 <HAL_DMA_Start_IT+0x484>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d036      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a30      	ldr	r2, [pc, #192]	@ (800435c <HAL_DMA_Start_IT+0x488>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d031      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004360 <HAL_DMA_Start_IT+0x48c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d02c      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004364 <HAL_DMA_Start_IT+0x490>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d027      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004368 <HAL_DMA_Start_IT+0x494>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d022      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a2a      	ldr	r2, [pc, #168]	@ (800436c <HAL_DMA_Start_IT+0x498>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d01d      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a28      	ldr	r2, [pc, #160]	@ (8004370 <HAL_DMA_Start_IT+0x49c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d018      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a27      	ldr	r2, [pc, #156]	@ (8004374 <HAL_DMA_Start_IT+0x4a0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d013      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <HAL_DMA_Start_IT+0x4a4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a24      	ldr	r2, [pc, #144]	@ (800437c <HAL_DMA_Start_IT+0x4a8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a22      	ldr	r2, [pc, #136]	@ (8004380 <HAL_DMA_Start_IT+0x4ac>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_DMA_Start_IT+0x430>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a21      	ldr	r2, [pc, #132]	@ (8004384 <HAL_DMA_Start_IT+0x4b0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <HAL_DMA_Start_IT+0x442>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e012      	b.n	800433c <HAL_DMA_Start_IT+0x468>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e009      	b.n	800433c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800433c:	7dfb      	ldrb	r3, [r7, #23]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40020010 	.word	0x40020010
 800434c:	40020028 	.word	0x40020028
 8004350:	40020040 	.word	0x40020040
 8004354:	40020058 	.word	0x40020058
 8004358:	40020070 	.word	0x40020070
 800435c:	40020088 	.word	0x40020088
 8004360:	400200a0 	.word	0x400200a0
 8004364:	400200b8 	.word	0x400200b8
 8004368:	40020410 	.word	0x40020410
 800436c:	40020428 	.word	0x40020428
 8004370:	40020440 	.word	0x40020440
 8004374:	40020458 	.word	0x40020458
 8004378:	40020470 	.word	0x40020470
 800437c:	40020488 	.word	0x40020488
 8004380:	400204a0 	.word	0x400204a0
 8004384:	400204b8 	.word	0x400204b8
 8004388:	58025408 	.word	0x58025408
 800438c:	5802541c 	.word	0x5802541c
 8004390:	58025430 	.word	0x58025430
 8004394:	58025444 	.word	0x58025444
 8004398:	58025458 	.word	0x58025458
 800439c:	5802546c 	.word	0x5802546c
 80043a0:	58025480 	.word	0x58025480
 80043a4:	58025494 	.word	0x58025494

080043a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80043b0:	f7fd fe46 	bl	8002040 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e2dc      	b.n	800497a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d008      	beq.n	80043de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2280      	movs	r2, #128	@ 0x80
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e2cd      	b.n	800497a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a76      	ldr	r2, [pc, #472]	@ (80045bc <HAL_DMA_Abort+0x214>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d04a      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a74      	ldr	r2, [pc, #464]	@ (80045c0 <HAL_DMA_Abort+0x218>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d045      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a73      	ldr	r2, [pc, #460]	@ (80045c4 <HAL_DMA_Abort+0x21c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d040      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a71      	ldr	r2, [pc, #452]	@ (80045c8 <HAL_DMA_Abort+0x220>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d03b      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a70      	ldr	r2, [pc, #448]	@ (80045cc <HAL_DMA_Abort+0x224>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d036      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6e      	ldr	r2, [pc, #440]	@ (80045d0 <HAL_DMA_Abort+0x228>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d031      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6d      	ldr	r2, [pc, #436]	@ (80045d4 <HAL_DMA_Abort+0x22c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d02c      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a6b      	ldr	r2, [pc, #428]	@ (80045d8 <HAL_DMA_Abort+0x230>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d027      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6a      	ldr	r2, [pc, #424]	@ (80045dc <HAL_DMA_Abort+0x234>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d022      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a68      	ldr	r2, [pc, #416]	@ (80045e0 <HAL_DMA_Abort+0x238>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01d      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a67      	ldr	r2, [pc, #412]	@ (80045e4 <HAL_DMA_Abort+0x23c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a65      	ldr	r2, [pc, #404]	@ (80045e8 <HAL_DMA_Abort+0x240>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a64      	ldr	r2, [pc, #400]	@ (80045ec <HAL_DMA_Abort+0x244>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a62      	ldr	r2, [pc, #392]	@ (80045f0 <HAL_DMA_Abort+0x248>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a61      	ldr	r2, [pc, #388]	@ (80045f4 <HAL_DMA_Abort+0x24c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_DMA_Abort+0xd6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a5f      	ldr	r2, [pc, #380]	@ (80045f8 <HAL_DMA_Abort+0x250>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <HAL_DMA_Abort+0xda>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_DMA_Abort+0xdc>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 021e 	bic.w	r2, r2, #30
 8004496:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e00a      	b.n	80044c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 020e 	bic.w	r2, r2, #14
 80044be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a3c      	ldr	r2, [pc, #240]	@ (80045bc <HAL_DMA_Abort+0x214>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d072      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3a      	ldr	r2, [pc, #232]	@ (80045c0 <HAL_DMA_Abort+0x218>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d06d      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a39      	ldr	r2, [pc, #228]	@ (80045c4 <HAL_DMA_Abort+0x21c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d068      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a37      	ldr	r2, [pc, #220]	@ (80045c8 <HAL_DMA_Abort+0x220>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d063      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a36      	ldr	r2, [pc, #216]	@ (80045cc <HAL_DMA_Abort+0x224>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d05e      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a34      	ldr	r2, [pc, #208]	@ (80045d0 <HAL_DMA_Abort+0x228>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d059      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a33      	ldr	r2, [pc, #204]	@ (80045d4 <HAL_DMA_Abort+0x22c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d054      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a31      	ldr	r2, [pc, #196]	@ (80045d8 <HAL_DMA_Abort+0x230>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d04f      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a30      	ldr	r2, [pc, #192]	@ (80045dc <HAL_DMA_Abort+0x234>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d04a      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2e      	ldr	r2, [pc, #184]	@ (80045e0 <HAL_DMA_Abort+0x238>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d045      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2d      	ldr	r2, [pc, #180]	@ (80045e4 <HAL_DMA_Abort+0x23c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d040      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a2b      	ldr	r2, [pc, #172]	@ (80045e8 <HAL_DMA_Abort+0x240>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d03b      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2a      	ldr	r2, [pc, #168]	@ (80045ec <HAL_DMA_Abort+0x244>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d036      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a28      	ldr	r2, [pc, #160]	@ (80045f0 <HAL_DMA_Abort+0x248>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d031      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a27      	ldr	r2, [pc, #156]	@ (80045f4 <HAL_DMA_Abort+0x24c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d02c      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a25      	ldr	r2, [pc, #148]	@ (80045f8 <HAL_DMA_Abort+0x250>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d027      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a24      	ldr	r2, [pc, #144]	@ (80045fc <HAL_DMA_Abort+0x254>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d022      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a22      	ldr	r2, [pc, #136]	@ (8004600 <HAL_DMA_Abort+0x258>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d01d      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a21      	ldr	r2, [pc, #132]	@ (8004604 <HAL_DMA_Abort+0x25c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d018      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1f      	ldr	r2, [pc, #124]	@ (8004608 <HAL_DMA_Abort+0x260>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1e      	ldr	r2, [pc, #120]	@ (800460c <HAL_DMA_Abort+0x264>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00e      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1c      	ldr	r2, [pc, #112]	@ (8004610 <HAL_DMA_Abort+0x268>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d009      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004614 <HAL_DMA_Abort+0x26c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_DMA_Abort+0x20e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a19      	ldr	r2, [pc, #100]	@ (8004618 <HAL_DMA_Abort+0x270>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d132      	bne.n	800461c <HAL_DMA_Abort+0x274>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e031      	b.n	800461e <HAL_DMA_Abort+0x276>
 80045ba:	bf00      	nop
 80045bc:	40020010 	.word	0x40020010
 80045c0:	40020028 	.word	0x40020028
 80045c4:	40020040 	.word	0x40020040
 80045c8:	40020058 	.word	0x40020058
 80045cc:	40020070 	.word	0x40020070
 80045d0:	40020088 	.word	0x40020088
 80045d4:	400200a0 	.word	0x400200a0
 80045d8:	400200b8 	.word	0x400200b8
 80045dc:	40020410 	.word	0x40020410
 80045e0:	40020428 	.word	0x40020428
 80045e4:	40020440 	.word	0x40020440
 80045e8:	40020458 	.word	0x40020458
 80045ec:	40020470 	.word	0x40020470
 80045f0:	40020488 	.word	0x40020488
 80045f4:	400204a0 	.word	0x400204a0
 80045f8:	400204b8 	.word	0x400204b8
 80045fc:	58025408 	.word	0x58025408
 8004600:	5802541c 	.word	0x5802541c
 8004604:	58025430 	.word	0x58025430
 8004608:	58025444 	.word	0x58025444
 800460c:	58025458 	.word	0x58025458
 8004610:	5802546c 	.word	0x5802546c
 8004614:	58025480 	.word	0x58025480
 8004618:	58025494 	.word	0x58025494
 800461c:	2300      	movs	r3, #0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004630:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a6d      	ldr	r2, [pc, #436]	@ (80047ec <HAL_DMA_Abort+0x444>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d04a      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6b      	ldr	r2, [pc, #428]	@ (80047f0 <HAL_DMA_Abort+0x448>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d045      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a6a      	ldr	r2, [pc, #424]	@ (80047f4 <HAL_DMA_Abort+0x44c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d040      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a68      	ldr	r2, [pc, #416]	@ (80047f8 <HAL_DMA_Abort+0x450>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d03b      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a67      	ldr	r2, [pc, #412]	@ (80047fc <HAL_DMA_Abort+0x454>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d036      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a65      	ldr	r2, [pc, #404]	@ (8004800 <HAL_DMA_Abort+0x458>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d031      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a64      	ldr	r2, [pc, #400]	@ (8004804 <HAL_DMA_Abort+0x45c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d02c      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a62      	ldr	r2, [pc, #392]	@ (8004808 <HAL_DMA_Abort+0x460>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d027      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a61      	ldr	r2, [pc, #388]	@ (800480c <HAL_DMA_Abort+0x464>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a5f      	ldr	r2, [pc, #380]	@ (8004810 <HAL_DMA_Abort+0x468>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01d      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a5e      	ldr	r2, [pc, #376]	@ (8004814 <HAL_DMA_Abort+0x46c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a5c      	ldr	r2, [pc, #368]	@ (8004818 <HAL_DMA_Abort+0x470>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a5b      	ldr	r2, [pc, #364]	@ (800481c <HAL_DMA_Abort+0x474>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a59      	ldr	r2, [pc, #356]	@ (8004820 <HAL_DMA_Abort+0x478>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a58      	ldr	r2, [pc, #352]	@ (8004824 <HAL_DMA_Abort+0x47c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_DMA_Abort+0x32a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a56      	ldr	r2, [pc, #344]	@ (8004828 <HAL_DMA_Abort+0x480>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <HAL_DMA_Abort+0x33c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e007      	b.n	80046f4 <HAL_DMA_Abort+0x34c>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80046f4:	e013      	b.n	800471e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046f6:	f7fd fca3 	bl	8002040 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b05      	cmp	r3, #5
 8004702:	d90c      	bls.n	800471e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2203      	movs	r2, #3
 800470e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e12d      	b.n	800497a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e5      	bne.n	80046f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2f      	ldr	r2, [pc, #188]	@ (80047ec <HAL_DMA_Abort+0x444>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d04a      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2d      	ldr	r2, [pc, #180]	@ (80047f0 <HAL_DMA_Abort+0x448>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d045      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2c      	ldr	r2, [pc, #176]	@ (80047f4 <HAL_DMA_Abort+0x44c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d040      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2a      	ldr	r2, [pc, #168]	@ (80047f8 <HAL_DMA_Abort+0x450>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d03b      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a29      	ldr	r2, [pc, #164]	@ (80047fc <HAL_DMA_Abort+0x454>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d036      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a27      	ldr	r2, [pc, #156]	@ (8004800 <HAL_DMA_Abort+0x458>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d031      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a26      	ldr	r2, [pc, #152]	@ (8004804 <HAL_DMA_Abort+0x45c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d02c      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a24      	ldr	r2, [pc, #144]	@ (8004808 <HAL_DMA_Abort+0x460>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d027      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a23      	ldr	r2, [pc, #140]	@ (800480c <HAL_DMA_Abort+0x464>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d022      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a21      	ldr	r2, [pc, #132]	@ (8004810 <HAL_DMA_Abort+0x468>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01d      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a20      	ldr	r2, [pc, #128]	@ (8004814 <HAL_DMA_Abort+0x46c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d018      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <HAL_DMA_Abort+0x470>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1d      	ldr	r2, [pc, #116]	@ (800481c <HAL_DMA_Abort+0x474>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00e      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <HAL_DMA_Abort+0x478>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004824 <HAL_DMA_Abort+0x47c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_DMA_Abort+0x422>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a18      	ldr	r2, [pc, #96]	@ (8004828 <HAL_DMA_Abort+0x480>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <HAL_DMA_Abort+0x426>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_DMA_Abort+0x428>
 80047ce:	2300      	movs	r3, #0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02b      	beq.n	800482c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	223f      	movs	r2, #63	@ 0x3f
 80047e4:	409a      	lsls	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	609a      	str	r2, [r3, #8]
 80047ea:	e02a      	b.n	8004842 <HAL_DMA_Abort+0x49a>
 80047ec:	40020010 	.word	0x40020010
 80047f0:	40020028 	.word	0x40020028
 80047f4:	40020040 	.word	0x40020040
 80047f8:	40020058 	.word	0x40020058
 80047fc:	40020070 	.word	0x40020070
 8004800:	40020088 	.word	0x40020088
 8004804:	400200a0 	.word	0x400200a0
 8004808:	400200b8 	.word	0x400200b8
 800480c:	40020410 	.word	0x40020410
 8004810:	40020428 	.word	0x40020428
 8004814:	40020440 	.word	0x40020440
 8004818:	40020458 	.word	0x40020458
 800481c:	40020470 	.word	0x40020470
 8004820:	40020488 	.word	0x40020488
 8004824:	400204a0 	.word	0x400204a0
 8004828:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004830:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	2201      	movs	r2, #1
 800483c:	409a      	lsls	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a4f      	ldr	r2, [pc, #316]	@ (8004984 <HAL_DMA_Abort+0x5dc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d072      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a4d      	ldr	r2, [pc, #308]	@ (8004988 <HAL_DMA_Abort+0x5e0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d06d      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a4c      	ldr	r2, [pc, #304]	@ (800498c <HAL_DMA_Abort+0x5e4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d068      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a4a      	ldr	r2, [pc, #296]	@ (8004990 <HAL_DMA_Abort+0x5e8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d063      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a49      	ldr	r2, [pc, #292]	@ (8004994 <HAL_DMA_Abort+0x5ec>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d05e      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a47      	ldr	r2, [pc, #284]	@ (8004998 <HAL_DMA_Abort+0x5f0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d059      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a46      	ldr	r2, [pc, #280]	@ (800499c <HAL_DMA_Abort+0x5f4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d054      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a44      	ldr	r2, [pc, #272]	@ (80049a0 <HAL_DMA_Abort+0x5f8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d04f      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a43      	ldr	r2, [pc, #268]	@ (80049a4 <HAL_DMA_Abort+0x5fc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d04a      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a41      	ldr	r2, [pc, #260]	@ (80049a8 <HAL_DMA_Abort+0x600>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d045      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a40      	ldr	r2, [pc, #256]	@ (80049ac <HAL_DMA_Abort+0x604>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d040      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a3e      	ldr	r2, [pc, #248]	@ (80049b0 <HAL_DMA_Abort+0x608>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d03b      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a3d      	ldr	r2, [pc, #244]	@ (80049b4 <HAL_DMA_Abort+0x60c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d036      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a3b      	ldr	r2, [pc, #236]	@ (80049b8 <HAL_DMA_Abort+0x610>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d031      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a3a      	ldr	r2, [pc, #232]	@ (80049bc <HAL_DMA_Abort+0x614>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d02c      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a38      	ldr	r2, [pc, #224]	@ (80049c0 <HAL_DMA_Abort+0x618>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d027      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a37      	ldr	r2, [pc, #220]	@ (80049c4 <HAL_DMA_Abort+0x61c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d022      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a35      	ldr	r2, [pc, #212]	@ (80049c8 <HAL_DMA_Abort+0x620>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01d      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a34      	ldr	r2, [pc, #208]	@ (80049cc <HAL_DMA_Abort+0x624>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d018      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a32      	ldr	r2, [pc, #200]	@ (80049d0 <HAL_DMA_Abort+0x628>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a31      	ldr	r2, [pc, #196]	@ (80049d4 <HAL_DMA_Abort+0x62c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2f      	ldr	r2, [pc, #188]	@ (80049d8 <HAL_DMA_Abort+0x630>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d009      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a2e      	ldr	r2, [pc, #184]	@ (80049dc <HAL_DMA_Abort+0x634>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_DMA_Abort+0x58a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <HAL_DMA_Abort+0x638>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d101      	bne.n	8004936 <HAL_DMA_Abort+0x58e>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_DMA_Abort+0x590>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d015      	beq.n	8004968 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004944:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00c      	beq.n	8004968 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800495c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004966:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40020010 	.word	0x40020010
 8004988:	40020028 	.word	0x40020028
 800498c:	40020040 	.word	0x40020040
 8004990:	40020058 	.word	0x40020058
 8004994:	40020070 	.word	0x40020070
 8004998:	40020088 	.word	0x40020088
 800499c:	400200a0 	.word	0x400200a0
 80049a0:	400200b8 	.word	0x400200b8
 80049a4:	40020410 	.word	0x40020410
 80049a8:	40020428 	.word	0x40020428
 80049ac:	40020440 	.word	0x40020440
 80049b0:	40020458 	.word	0x40020458
 80049b4:	40020470 	.word	0x40020470
 80049b8:	40020488 	.word	0x40020488
 80049bc:	400204a0 	.word	0x400204a0
 80049c0:	400204b8 	.word	0x400204b8
 80049c4:	58025408 	.word	0x58025408
 80049c8:	5802541c 	.word	0x5802541c
 80049cc:	58025430 	.word	0x58025430
 80049d0:	58025444 	.word	0x58025444
 80049d4:	58025458 	.word	0x58025458
 80049d8:	5802546c 	.word	0x5802546c
 80049dc:	58025480 	.word	0x58025480
 80049e0:	58025494 	.word	0x58025494

080049e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e237      	b.n	8004e66 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d004      	beq.n	8004a0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2280      	movs	r2, #128	@ 0x80
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e22c      	b.n	8004e66 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a5c      	ldr	r2, [pc, #368]	@ (8004b84 <HAL_DMA_Abort_IT+0x1a0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d04a      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004b88 <HAL_DMA_Abort_IT+0x1a4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d045      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a59      	ldr	r2, [pc, #356]	@ (8004b8c <HAL_DMA_Abort_IT+0x1a8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d040      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a58      	ldr	r2, [pc, #352]	@ (8004b90 <HAL_DMA_Abort_IT+0x1ac>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d03b      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a56      	ldr	r2, [pc, #344]	@ (8004b94 <HAL_DMA_Abort_IT+0x1b0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d036      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a55      	ldr	r2, [pc, #340]	@ (8004b98 <HAL_DMA_Abort_IT+0x1b4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d031      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a53      	ldr	r2, [pc, #332]	@ (8004b9c <HAL_DMA_Abort_IT+0x1b8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02c      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a52      	ldr	r2, [pc, #328]	@ (8004ba0 <HAL_DMA_Abort_IT+0x1bc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d027      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a50      	ldr	r2, [pc, #320]	@ (8004ba4 <HAL_DMA_Abort_IT+0x1c0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a4f      	ldr	r2, [pc, #316]	@ (8004ba8 <HAL_DMA_Abort_IT+0x1c4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01d      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a4d      	ldr	r2, [pc, #308]	@ (8004bac <HAL_DMA_Abort_IT+0x1c8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a4c      	ldr	r2, [pc, #304]	@ (8004bb0 <HAL_DMA_Abort_IT+0x1cc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a4a      	ldr	r2, [pc, #296]	@ (8004bb4 <HAL_DMA_Abort_IT+0x1d0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a49      	ldr	r2, [pc, #292]	@ (8004bb8 <HAL_DMA_Abort_IT+0x1d4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a47      	ldr	r2, [pc, #284]	@ (8004bbc <HAL_DMA_Abort_IT+0x1d8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a46      	ldr	r2, [pc, #280]	@ (8004bc0 <HAL_DMA_Abort_IT+0x1dc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <HAL_DMA_Abort_IT+0xcc>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_DMA_Abort_IT+0xce>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8086 	beq.w	8004bc4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2204      	movs	r2, #4
 8004abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8004b84 <HAL_DMA_Abort_IT+0x1a0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d04a      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a2e      	ldr	r2, [pc, #184]	@ (8004b88 <HAL_DMA_Abort_IT+0x1a4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d045      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b8c <HAL_DMA_Abort_IT+0x1a8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d040      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8004b90 <HAL_DMA_Abort_IT+0x1ac>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d03b      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a29      	ldr	r2, [pc, #164]	@ (8004b94 <HAL_DMA_Abort_IT+0x1b0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d036      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a28      	ldr	r2, [pc, #160]	@ (8004b98 <HAL_DMA_Abort_IT+0x1b4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d031      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a26      	ldr	r2, [pc, #152]	@ (8004b9c <HAL_DMA_Abort_IT+0x1b8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d02c      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a25      	ldr	r2, [pc, #148]	@ (8004ba0 <HAL_DMA_Abort_IT+0x1bc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d027      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a23      	ldr	r2, [pc, #140]	@ (8004ba4 <HAL_DMA_Abort_IT+0x1c0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d022      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a22      	ldr	r2, [pc, #136]	@ (8004ba8 <HAL_DMA_Abort_IT+0x1c4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d01d      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a20      	ldr	r2, [pc, #128]	@ (8004bac <HAL_DMA_Abort_IT+0x1c8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb0 <HAL_DMA_Abort_IT+0x1cc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb4 <HAL_DMA_Abort_IT+0x1d0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <HAL_DMA_Abort_IT+0x1d4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1a      	ldr	r2, [pc, #104]	@ (8004bbc <HAL_DMA_Abort_IT+0x1d8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x17c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a19      	ldr	r2, [pc, #100]	@ (8004bc0 <HAL_DMA_Abort_IT+0x1dc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <HAL_DMA_Abort_IT+0x18e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e178      	b.n	8004e64 <HAL_DMA_Abort_IT+0x480>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e16f      	b.n	8004e64 <HAL_DMA_Abort_IT+0x480>
 8004b84:	40020010 	.word	0x40020010
 8004b88:	40020028 	.word	0x40020028
 8004b8c:	40020040 	.word	0x40020040
 8004b90:	40020058 	.word	0x40020058
 8004b94:	40020070 	.word	0x40020070
 8004b98:	40020088 	.word	0x40020088
 8004b9c:	400200a0 	.word	0x400200a0
 8004ba0:	400200b8 	.word	0x400200b8
 8004ba4:	40020410 	.word	0x40020410
 8004ba8:	40020428 	.word	0x40020428
 8004bac:	40020440 	.word	0x40020440
 8004bb0:	40020458 	.word	0x40020458
 8004bb4:	40020470 	.word	0x40020470
 8004bb8:	40020488 	.word	0x40020488
 8004bbc:	400204a0 	.word	0x400204a0
 8004bc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 020e 	bic.w	r2, r2, #14
 8004bd2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a6c      	ldr	r2, [pc, #432]	@ (8004d8c <HAL_DMA_Abort_IT+0x3a8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d04a      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a6b      	ldr	r2, [pc, #428]	@ (8004d90 <HAL_DMA_Abort_IT+0x3ac>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d045      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a69      	ldr	r2, [pc, #420]	@ (8004d94 <HAL_DMA_Abort_IT+0x3b0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d040      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a68      	ldr	r2, [pc, #416]	@ (8004d98 <HAL_DMA_Abort_IT+0x3b4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d03b      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a66      	ldr	r2, [pc, #408]	@ (8004d9c <HAL_DMA_Abort_IT+0x3b8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d036      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a65      	ldr	r2, [pc, #404]	@ (8004da0 <HAL_DMA_Abort_IT+0x3bc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d031      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a63      	ldr	r2, [pc, #396]	@ (8004da4 <HAL_DMA_Abort_IT+0x3c0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d02c      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a62      	ldr	r2, [pc, #392]	@ (8004da8 <HAL_DMA_Abort_IT+0x3c4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d027      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a60      	ldr	r2, [pc, #384]	@ (8004dac <HAL_DMA_Abort_IT+0x3c8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d022      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a5f      	ldr	r2, [pc, #380]	@ (8004db0 <HAL_DMA_Abort_IT+0x3cc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d01d      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a5d      	ldr	r2, [pc, #372]	@ (8004db4 <HAL_DMA_Abort_IT+0x3d0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d018      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5c      	ldr	r2, [pc, #368]	@ (8004db8 <HAL_DMA_Abort_IT+0x3d4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5a      	ldr	r2, [pc, #360]	@ (8004dbc <HAL_DMA_Abort_IT+0x3d8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a59      	ldr	r2, [pc, #356]	@ (8004dc0 <HAL_DMA_Abort_IT+0x3dc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a57      	ldr	r2, [pc, #348]	@ (8004dc4 <HAL_DMA_Abort_IT+0x3e0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x290>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a56      	ldr	r2, [pc, #344]	@ (8004dc8 <HAL_DMA_Abort_IT+0x3e4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d108      	bne.n	8004c86 <HAL_DMA_Abort_IT+0x2a2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e007      	b.n	8004c96 <HAL_DMA_Abort_IT+0x2b2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3c      	ldr	r2, [pc, #240]	@ (8004d8c <HAL_DMA_Abort_IT+0x3a8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d072      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8004d90 <HAL_DMA_Abort_IT+0x3ac>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d06d      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a39      	ldr	r2, [pc, #228]	@ (8004d94 <HAL_DMA_Abort_IT+0x3b0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d068      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a37      	ldr	r2, [pc, #220]	@ (8004d98 <HAL_DMA_Abort_IT+0x3b4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d063      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a36      	ldr	r2, [pc, #216]	@ (8004d9c <HAL_DMA_Abort_IT+0x3b8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d05e      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a34      	ldr	r2, [pc, #208]	@ (8004da0 <HAL_DMA_Abort_IT+0x3bc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d059      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a33      	ldr	r2, [pc, #204]	@ (8004da4 <HAL_DMA_Abort_IT+0x3c0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d054      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a31      	ldr	r2, [pc, #196]	@ (8004da8 <HAL_DMA_Abort_IT+0x3c4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d04f      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a30      	ldr	r2, [pc, #192]	@ (8004dac <HAL_DMA_Abort_IT+0x3c8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d04a      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8004db0 <HAL_DMA_Abort_IT+0x3cc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d045      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8004db4 <HAL_DMA_Abort_IT+0x3d0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d040      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a2b      	ldr	r2, [pc, #172]	@ (8004db8 <HAL_DMA_Abort_IT+0x3d4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d03b      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2a      	ldr	r2, [pc, #168]	@ (8004dbc <HAL_DMA_Abort_IT+0x3d8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d036      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a28      	ldr	r2, [pc, #160]	@ (8004dc0 <HAL_DMA_Abort_IT+0x3dc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d031      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a27      	ldr	r2, [pc, #156]	@ (8004dc4 <HAL_DMA_Abort_IT+0x3e0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d02c      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a25      	ldr	r2, [pc, #148]	@ (8004dc8 <HAL_DMA_Abort_IT+0x3e4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d027      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a24      	ldr	r2, [pc, #144]	@ (8004dcc <HAL_DMA_Abort_IT+0x3e8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d022      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a22      	ldr	r2, [pc, #136]	@ (8004dd0 <HAL_DMA_Abort_IT+0x3ec>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01d      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a21      	ldr	r2, [pc, #132]	@ (8004dd4 <HAL_DMA_Abort_IT+0x3f0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d018      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd8 <HAL_DMA_Abort_IT+0x3f4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1e      	ldr	r2, [pc, #120]	@ (8004ddc <HAL_DMA_Abort_IT+0x3f8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004de0 <HAL_DMA_Abort_IT+0x3fc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1b      	ldr	r2, [pc, #108]	@ (8004de4 <HAL_DMA_Abort_IT+0x400>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x3a2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <HAL_DMA_Abort_IT+0x404>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d132      	bne.n	8004dec <HAL_DMA_Abort_IT+0x408>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e031      	b.n	8004dee <HAL_DMA_Abort_IT+0x40a>
 8004d8a:	bf00      	nop
 8004d8c:	40020010 	.word	0x40020010
 8004d90:	40020028 	.word	0x40020028
 8004d94:	40020040 	.word	0x40020040
 8004d98:	40020058 	.word	0x40020058
 8004d9c:	40020070 	.word	0x40020070
 8004da0:	40020088 	.word	0x40020088
 8004da4:	400200a0 	.word	0x400200a0
 8004da8:	400200b8 	.word	0x400200b8
 8004dac:	40020410 	.word	0x40020410
 8004db0:	40020428 	.word	0x40020428
 8004db4:	40020440 	.word	0x40020440
 8004db8:	40020458 	.word	0x40020458
 8004dbc:	40020470 	.word	0x40020470
 8004dc0:	40020488 	.word	0x40020488
 8004dc4:	400204a0 	.word	0x400204a0
 8004dc8:	400204b8 	.word	0x400204b8
 8004dcc:	58025408 	.word	0x58025408
 8004dd0:	5802541c 	.word	0x5802541c
 8004dd4:	58025430 	.word	0x58025430
 8004dd8:	58025444 	.word	0x58025444
 8004ddc:	58025458 	.word	0x58025458
 8004de0:	5802546c 	.word	0x5802546c
 8004de4:	58025480 	.word	0x58025480
 8004de8:	58025494 	.word	0x58025494
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d028      	beq.n	8004e44 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e00:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e06:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	2201      	movs	r2, #1
 8004e12:	409a      	lsls	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e20:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e38:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e42:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop

08004e70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	@ 0x28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e7c:	4b67      	ldr	r3, [pc, #412]	@ (800501c <HAL_DMA_IRQHandler+0x1ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a67      	ldr	r2, [pc, #412]	@ (8005020 <HAL_DMA_IRQHandler+0x1b0>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	0a9b      	lsrs	r3, r3, #10
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8005024 <HAL_DMA_IRQHandler+0x1b4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d04a      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8005028 <HAL_DMA_IRQHandler+0x1b8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d045      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a5c      	ldr	r2, [pc, #368]	@ (800502c <HAL_DMA_IRQHandler+0x1bc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d040      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8005030 <HAL_DMA_IRQHandler+0x1c0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d03b      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a59      	ldr	r2, [pc, #356]	@ (8005034 <HAL_DMA_IRQHandler+0x1c4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d036      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a57      	ldr	r2, [pc, #348]	@ (8005038 <HAL_DMA_IRQHandler+0x1c8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d031      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a56      	ldr	r2, [pc, #344]	@ (800503c <HAL_DMA_IRQHandler+0x1cc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d02c      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a54      	ldr	r2, [pc, #336]	@ (8005040 <HAL_DMA_IRQHandler+0x1d0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d027      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a53      	ldr	r2, [pc, #332]	@ (8005044 <HAL_DMA_IRQHandler+0x1d4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a51      	ldr	r2, [pc, #324]	@ (8005048 <HAL_DMA_IRQHandler+0x1d8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01d      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a50      	ldr	r2, [pc, #320]	@ (800504c <HAL_DMA_IRQHandler+0x1dc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a4e      	ldr	r2, [pc, #312]	@ (8005050 <HAL_DMA_IRQHandler+0x1e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a4d      	ldr	r2, [pc, #308]	@ (8005054 <HAL_DMA_IRQHandler+0x1e4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a4b      	ldr	r2, [pc, #300]	@ (8005058 <HAL_DMA_IRQHandler+0x1e8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a4a      	ldr	r2, [pc, #296]	@ (800505c <HAL_DMA_IRQHandler+0x1ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a48      	ldr	r2, [pc, #288]	@ (8005060 <HAL_DMA_IRQHandler+0x1f0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_DMA_IRQHandler+0xd6>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_DMA_IRQHandler+0xd8>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 842b 	beq.w	80057a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	2208      	movs	r2, #8
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80a2 	beq.w	80050a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2e      	ldr	r2, [pc, #184]	@ (8005024 <HAL_DMA_IRQHandler+0x1b4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d04a      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2d      	ldr	r2, [pc, #180]	@ (8005028 <HAL_DMA_IRQHandler+0x1b8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d045      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800502c <HAL_DMA_IRQHandler+0x1bc>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d040      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2a      	ldr	r2, [pc, #168]	@ (8005030 <HAL_DMA_IRQHandler+0x1c0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d03b      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a28      	ldr	r2, [pc, #160]	@ (8005034 <HAL_DMA_IRQHandler+0x1c4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d036      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a27      	ldr	r2, [pc, #156]	@ (8005038 <HAL_DMA_IRQHandler+0x1c8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d031      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a25      	ldr	r2, [pc, #148]	@ (800503c <HAL_DMA_IRQHandler+0x1cc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02c      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a24      	ldr	r2, [pc, #144]	@ (8005040 <HAL_DMA_IRQHandler+0x1d0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d027      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a22      	ldr	r2, [pc, #136]	@ (8005044 <HAL_DMA_IRQHandler+0x1d4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a21      	ldr	r2, [pc, #132]	@ (8005048 <HAL_DMA_IRQHandler+0x1d8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <HAL_DMA_IRQHandler+0x1dc>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005050 <HAL_DMA_IRQHandler+0x1e0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8005054 <HAL_DMA_IRQHandler+0x1e4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1b      	ldr	r2, [pc, #108]	@ (8005058 <HAL_DMA_IRQHandler+0x1e8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a19      	ldr	r2, [pc, #100]	@ (800505c <HAL_DMA_IRQHandler+0x1ec>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a18      	ldr	r2, [pc, #96]	@ (8005060 <HAL_DMA_IRQHandler+0x1f0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d12f      	bne.n	8005064 <HAL_DMA_IRQHandler+0x1f4>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	bf14      	ite	ne
 8005012:	2301      	movne	r3, #1
 8005014:	2300      	moveq	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	e02e      	b.n	8005078 <HAL_DMA_IRQHandler+0x208>
 800501a:	bf00      	nop
 800501c:	24000000 	.word	0x24000000
 8005020:	1b4e81b5 	.word	0x1b4e81b5
 8005024:	40020010 	.word	0x40020010
 8005028:	40020028 	.word	0x40020028
 800502c:	40020040 	.word	0x40020040
 8005030:	40020058 	.word	0x40020058
 8005034:	40020070 	.word	0x40020070
 8005038:	40020088 	.word	0x40020088
 800503c:	400200a0 	.word	0x400200a0
 8005040:	400200b8 	.word	0x400200b8
 8005044:	40020410 	.word	0x40020410
 8005048:	40020428 	.word	0x40020428
 800504c:	40020440 	.word	0x40020440
 8005050:	40020458 	.word	0x40020458
 8005054:	40020470 	.word	0x40020470
 8005058:	40020488 	.word	0x40020488
 800505c:	400204a0 	.word	0x400204a0
 8005060:	400204b8 	.word	0x400204b8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d015      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0204 	bic.w	r2, r2, #4
 800508a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2208      	movs	r2, #8
 8005096:	409a      	lsls	r2, r3
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a0:	f043 0201 	orr.w	r2, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	fa22 f303 	lsr.w	r3, r2, r3
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d06e      	beq.n	800519c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a69      	ldr	r2, [pc, #420]	@ (8005268 <HAL_DMA_IRQHandler+0x3f8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d04a      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a67      	ldr	r2, [pc, #412]	@ (800526c <HAL_DMA_IRQHandler+0x3fc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d045      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a66      	ldr	r2, [pc, #408]	@ (8005270 <HAL_DMA_IRQHandler+0x400>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d040      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a64      	ldr	r2, [pc, #400]	@ (8005274 <HAL_DMA_IRQHandler+0x404>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d03b      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a63      	ldr	r2, [pc, #396]	@ (8005278 <HAL_DMA_IRQHandler+0x408>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d036      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a61      	ldr	r2, [pc, #388]	@ (800527c <HAL_DMA_IRQHandler+0x40c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a60      	ldr	r2, [pc, #384]	@ (8005280 <HAL_DMA_IRQHandler+0x410>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d02c      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a5e      	ldr	r2, [pc, #376]	@ (8005284 <HAL_DMA_IRQHandler+0x414>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d027      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a5d      	ldr	r2, [pc, #372]	@ (8005288 <HAL_DMA_IRQHandler+0x418>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5b      	ldr	r2, [pc, #364]	@ (800528c <HAL_DMA_IRQHandler+0x41c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a5a      	ldr	r2, [pc, #360]	@ (8005290 <HAL_DMA_IRQHandler+0x420>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a58      	ldr	r2, [pc, #352]	@ (8005294 <HAL_DMA_IRQHandler+0x424>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a57      	ldr	r2, [pc, #348]	@ (8005298 <HAL_DMA_IRQHandler+0x428>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a55      	ldr	r2, [pc, #340]	@ (800529c <HAL_DMA_IRQHandler+0x42c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a54      	ldr	r2, [pc, #336]	@ (80052a0 <HAL_DMA_IRQHandler+0x430>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a52      	ldr	r2, [pc, #328]	@ (80052a4 <HAL_DMA_IRQHandler+0x434>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d10a      	bne.n	8005174 <HAL_DMA_IRQHandler+0x304>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e003      	b.n	800517c <HAL_DMA_IRQHandler+0x30c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00d      	beq.n	800519c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005194:	f043 0202 	orr.w	r2, r3, #2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	2204      	movs	r2, #4
 80051a6:	409a      	lsls	r2, r3
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 808f 	beq.w	80052d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005268 <HAL_DMA_IRQHandler+0x3f8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d04a      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2a      	ldr	r2, [pc, #168]	@ (800526c <HAL_DMA_IRQHandler+0x3fc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d045      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a29      	ldr	r2, [pc, #164]	@ (8005270 <HAL_DMA_IRQHandler+0x400>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d040      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a27      	ldr	r2, [pc, #156]	@ (8005274 <HAL_DMA_IRQHandler+0x404>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d03b      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a26      	ldr	r2, [pc, #152]	@ (8005278 <HAL_DMA_IRQHandler+0x408>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d036      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a24      	ldr	r2, [pc, #144]	@ (800527c <HAL_DMA_IRQHandler+0x40c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d031      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a23      	ldr	r2, [pc, #140]	@ (8005280 <HAL_DMA_IRQHandler+0x410>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d02c      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a21      	ldr	r2, [pc, #132]	@ (8005284 <HAL_DMA_IRQHandler+0x414>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d027      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a20      	ldr	r2, [pc, #128]	@ (8005288 <HAL_DMA_IRQHandler+0x418>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d022      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1e      	ldr	r2, [pc, #120]	@ (800528c <HAL_DMA_IRQHandler+0x41c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <HAL_DMA_IRQHandler+0x420>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d018      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1b      	ldr	r2, [pc, #108]	@ (8005294 <HAL_DMA_IRQHandler+0x424>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1a      	ldr	r2, [pc, #104]	@ (8005298 <HAL_DMA_IRQHandler+0x428>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a18      	ldr	r2, [pc, #96]	@ (800529c <HAL_DMA_IRQHandler+0x42c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a17      	ldr	r2, [pc, #92]	@ (80052a0 <HAL_DMA_IRQHandler+0x430>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a15      	ldr	r2, [pc, #84]	@ (80052a4 <HAL_DMA_IRQHandler+0x434>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d12a      	bne.n	80052a8 <HAL_DMA_IRQHandler+0x438>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf14      	ite	ne
 8005260:	2301      	movne	r3, #1
 8005262:	2300      	moveq	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	e023      	b.n	80052b0 <HAL_DMA_IRQHandler+0x440>
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020040 	.word	0x40020040
 8005274:	40020058 	.word	0x40020058
 8005278:	40020070 	.word	0x40020070
 800527c:	40020088 	.word	0x40020088
 8005280:	400200a0 	.word	0x400200a0
 8005284:	400200b8 	.word	0x400200b8
 8005288:	40020410 	.word	0x40020410
 800528c:	40020428 	.word	0x40020428
 8005290:	40020440 	.word	0x40020440
 8005294:	40020458 	.word	0x40020458
 8005298:	40020470 	.word	0x40020470
 800529c:	40020488 	.word	0x40020488
 80052a0:	400204a0 	.word	0x400204a0
 80052a4:	400204b8 	.word	0x400204b8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	2204      	movs	r2, #4
 80052be:	409a      	lsls	r2, r3
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c8:	f043 0204 	orr.w	r2, r3, #4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2210      	movs	r2, #16
 80052da:	409a      	lsls	r2, r3
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80a6 	beq.w	8005432 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a85      	ldr	r2, [pc, #532]	@ (8005500 <HAL_DMA_IRQHandler+0x690>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d04a      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a83      	ldr	r2, [pc, #524]	@ (8005504 <HAL_DMA_IRQHandler+0x694>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d045      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a82      	ldr	r2, [pc, #520]	@ (8005508 <HAL_DMA_IRQHandler+0x698>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d040      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a80      	ldr	r2, [pc, #512]	@ (800550c <HAL_DMA_IRQHandler+0x69c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d03b      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a7f      	ldr	r2, [pc, #508]	@ (8005510 <HAL_DMA_IRQHandler+0x6a0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d036      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a7d      	ldr	r2, [pc, #500]	@ (8005514 <HAL_DMA_IRQHandler+0x6a4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d031      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a7c      	ldr	r2, [pc, #496]	@ (8005518 <HAL_DMA_IRQHandler+0x6a8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d02c      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7a      	ldr	r2, [pc, #488]	@ (800551c <HAL_DMA_IRQHandler+0x6ac>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d027      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a79      	ldr	r2, [pc, #484]	@ (8005520 <HAL_DMA_IRQHandler+0x6b0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a77      	ldr	r2, [pc, #476]	@ (8005524 <HAL_DMA_IRQHandler+0x6b4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01d      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a76      	ldr	r2, [pc, #472]	@ (8005528 <HAL_DMA_IRQHandler+0x6b8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a74      	ldr	r2, [pc, #464]	@ (800552c <HAL_DMA_IRQHandler+0x6bc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a73      	ldr	r2, [pc, #460]	@ (8005530 <HAL_DMA_IRQHandler+0x6c0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a71      	ldr	r2, [pc, #452]	@ (8005534 <HAL_DMA_IRQHandler+0x6c4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a70      	ldr	r2, [pc, #448]	@ (8005538 <HAL_DMA_IRQHandler+0x6c8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a6e      	ldr	r2, [pc, #440]	@ (800553c <HAL_DMA_IRQHandler+0x6cc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10a      	bne.n	800539c <HAL_DMA_IRQHandler+0x52c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e009      	b.n	80053b0 <HAL_DMA_IRQHandler+0x540>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	bf14      	ite	ne
 80053aa:	2301      	movne	r3, #1
 80053ac:	2300      	moveq	r3, #0
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d03e      	beq.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	2210      	movs	r2, #16
 80053be:	409a      	lsls	r2, r3
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d108      	bne.n	80053f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d024      	beq.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
 80053f0:	e01f      	b.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01b      	beq.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
 8005402:	e016      	b.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d107      	bne.n	8005422 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0208 	bic.w	r2, r2, #8
 8005420:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	2220      	movs	r2, #32
 800543c:	409a      	lsls	r2, r3
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8110 	beq.w	8005668 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2c      	ldr	r2, [pc, #176]	@ (8005500 <HAL_DMA_IRQHandler+0x690>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d04a      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2b      	ldr	r2, [pc, #172]	@ (8005504 <HAL_DMA_IRQHandler+0x694>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d045      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a29      	ldr	r2, [pc, #164]	@ (8005508 <HAL_DMA_IRQHandler+0x698>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d040      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a28      	ldr	r2, [pc, #160]	@ (800550c <HAL_DMA_IRQHandler+0x69c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d03b      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <HAL_DMA_IRQHandler+0x6a0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d036      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a25      	ldr	r2, [pc, #148]	@ (8005514 <HAL_DMA_IRQHandler+0x6a4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d031      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a23      	ldr	r2, [pc, #140]	@ (8005518 <HAL_DMA_IRQHandler+0x6a8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d02c      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a22      	ldr	r2, [pc, #136]	@ (800551c <HAL_DMA_IRQHandler+0x6ac>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d027      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a20      	ldr	r2, [pc, #128]	@ (8005520 <HAL_DMA_IRQHandler+0x6b0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d022      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005524 <HAL_DMA_IRQHandler+0x6b4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d01d      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005528 <HAL_DMA_IRQHandler+0x6b8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d018      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1c      	ldr	r2, [pc, #112]	@ (800552c <HAL_DMA_IRQHandler+0x6bc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005530 <HAL_DMA_IRQHandler+0x6c0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00e      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a19      	ldr	r2, [pc, #100]	@ (8005534 <HAL_DMA_IRQHandler+0x6c4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d009      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a17      	ldr	r2, [pc, #92]	@ (8005538 <HAL_DMA_IRQHandler+0x6c8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a16      	ldr	r2, [pc, #88]	@ (800553c <HAL_DMA_IRQHandler+0x6cc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d12b      	bne.n	8005540 <HAL_DMA_IRQHandler+0x6d0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf14      	ite	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	2300      	moveq	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	e02a      	b.n	8005554 <HAL_DMA_IRQHandler+0x6e4>
 80054fe:	bf00      	nop
 8005500:	40020010 	.word	0x40020010
 8005504:	40020028 	.word	0x40020028
 8005508:	40020040 	.word	0x40020040
 800550c:	40020058 	.word	0x40020058
 8005510:	40020070 	.word	0x40020070
 8005514:	40020088 	.word	0x40020088
 8005518:	400200a0 	.word	0x400200a0
 800551c:	400200b8 	.word	0x400200b8
 8005520:	40020410 	.word	0x40020410
 8005524:	40020428 	.word	0x40020428
 8005528:	40020440 	.word	0x40020440
 800552c:	40020458 	.word	0x40020458
 8005530:	40020470 	.word	0x40020470
 8005534:	40020488 	.word	0x40020488
 8005538:	400204a0 	.word	0x400204a0
 800553c:	400204b8 	.word	0x400204b8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8087 	beq.w	8005668 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2220      	movs	r2, #32
 8005564:	409a      	lsls	r2, r3
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b04      	cmp	r3, #4
 8005574:	d139      	bne.n	80055ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0216 	bic.w	r2, r2, #22
 8005584:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005594:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d103      	bne.n	80055a6 <HAL_DMA_IRQHandler+0x736>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0208 	bic.w	r2, r2, #8
 80055b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	223f      	movs	r2, #63	@ 0x3f
 80055c0:	409a      	lsls	r2, r3
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 834a 	beq.w	8005c74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
          }
          return;
 80055e8:	e344      	b.n	8005c74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d018      	beq.n	800562a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560a:	2b00      	cmp	r3, #0
 800560c:	d02c      	beq.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	e027      	b.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d023      	beq.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
 8005628:	e01e      	b.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10f      	bne.n	8005658 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0210 	bic.w	r2, r2, #16
 8005646:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8306 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8088 	beq.w	8005790 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2204      	movs	r2, #4
 8005684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a7a      	ldr	r2, [pc, #488]	@ (8005878 <HAL_DMA_IRQHandler+0xa08>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d04a      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a79      	ldr	r2, [pc, #484]	@ (800587c <HAL_DMA_IRQHandler+0xa0c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d045      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a77      	ldr	r2, [pc, #476]	@ (8005880 <HAL_DMA_IRQHandler+0xa10>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d040      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a76      	ldr	r2, [pc, #472]	@ (8005884 <HAL_DMA_IRQHandler+0xa14>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d03b      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a74      	ldr	r2, [pc, #464]	@ (8005888 <HAL_DMA_IRQHandler+0xa18>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d036      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a73      	ldr	r2, [pc, #460]	@ (800588c <HAL_DMA_IRQHandler+0xa1c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d031      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a71      	ldr	r2, [pc, #452]	@ (8005890 <HAL_DMA_IRQHandler+0xa20>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d02c      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a70      	ldr	r2, [pc, #448]	@ (8005894 <HAL_DMA_IRQHandler+0xa24>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d027      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005898 <HAL_DMA_IRQHandler+0xa28>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d022      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6d      	ldr	r2, [pc, #436]	@ (800589c <HAL_DMA_IRQHandler+0xa2c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d01d      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a6b      	ldr	r2, [pc, #428]	@ (80058a0 <HAL_DMA_IRQHandler+0xa30>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d018      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a6a      	ldr	r2, [pc, #424]	@ (80058a4 <HAL_DMA_IRQHandler+0xa34>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a68      	ldr	r2, [pc, #416]	@ (80058a8 <HAL_DMA_IRQHandler+0xa38>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00e      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a67      	ldr	r2, [pc, #412]	@ (80058ac <HAL_DMA_IRQHandler+0xa3c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d009      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a65      	ldr	r2, [pc, #404]	@ (80058b0 <HAL_DMA_IRQHandler+0xa40>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d004      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a64      	ldr	r2, [pc, #400]	@ (80058b4 <HAL_DMA_IRQHandler+0xa44>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d108      	bne.n	800573a <HAL_DMA_IRQHandler+0x8ca>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e007      	b.n	800574a <HAL_DMA_IRQHandler+0x8da>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005752:	429a      	cmp	r2, r3
 8005754:	d307      	bcc.n	8005766 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f2      	bne.n	800574a <HAL_DMA_IRQHandler+0x8da>
 8005764:	e000      	b.n	8005768 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005766:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2203      	movs	r2, #3
 800577a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800577e:	e003      	b.n	8005788 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8272 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
 80057a2:	e26c      	b.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a43      	ldr	r2, [pc, #268]	@ (80058b8 <HAL_DMA_IRQHandler+0xa48>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d022      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a42      	ldr	r2, [pc, #264]	@ (80058bc <HAL_DMA_IRQHandler+0xa4c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d01d      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a40      	ldr	r2, [pc, #256]	@ (80058c0 <HAL_DMA_IRQHandler+0xa50>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d018      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a3f      	ldr	r2, [pc, #252]	@ (80058c4 <HAL_DMA_IRQHandler+0xa54>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a3d      	ldr	r2, [pc, #244]	@ (80058c8 <HAL_DMA_IRQHandler+0xa58>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a3c      	ldr	r2, [pc, #240]	@ (80058cc <HAL_DMA_IRQHandler+0xa5c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a3a      	ldr	r2, [pc, #232]	@ (80058d0 <HAL_DMA_IRQHandler+0xa60>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a39      	ldr	r2, [pc, #228]	@ (80058d4 <HAL_DMA_IRQHandler+0xa64>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d101      	bne.n	80057f8 <HAL_DMA_IRQHandler+0x988>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <HAL_DMA_IRQHandler+0x98a>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 823f 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2204      	movs	r2, #4
 8005812:	409a      	lsls	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4013      	ands	r3, r2
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80cd 	beq.w	80059b8 <HAL_DMA_IRQHandler+0xb48>
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80c7 	beq.w	80059b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2204      	movs	r2, #4
 8005834:	409a      	lsls	r2, r3
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d049      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8210 	beq.w	8005c78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005860:	e20a      	b.n	8005c78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8206 	beq.w	8005c78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005874:	e200      	b.n	8005c78 <HAL_DMA_IRQHandler+0xe08>
 8005876:	bf00      	nop
 8005878:	40020010 	.word	0x40020010
 800587c:	40020028 	.word	0x40020028
 8005880:	40020040 	.word	0x40020040
 8005884:	40020058 	.word	0x40020058
 8005888:	40020070 	.word	0x40020070
 800588c:	40020088 	.word	0x40020088
 8005890:	400200a0 	.word	0x400200a0
 8005894:	400200b8 	.word	0x400200b8
 8005898:	40020410 	.word	0x40020410
 800589c:	40020428 	.word	0x40020428
 80058a0:	40020440 	.word	0x40020440
 80058a4:	40020458 	.word	0x40020458
 80058a8:	40020470 	.word	0x40020470
 80058ac:	40020488 	.word	0x40020488
 80058b0:	400204a0 	.word	0x400204a0
 80058b4:	400204b8 	.word	0x400204b8
 80058b8:	58025408 	.word	0x58025408
 80058bc:	5802541c 	.word	0x5802541c
 80058c0:	58025430 	.word	0x58025430
 80058c4:	58025444 	.word	0x58025444
 80058c8:	58025458 	.word	0x58025458
 80058cc:	5802546c 	.word	0x5802546c
 80058d0:	58025480 	.word	0x58025480
 80058d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d160      	bne.n	80059a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a7f      	ldr	r2, [pc, #508]	@ (8005ae4 <HAL_DMA_IRQHandler+0xc74>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d04a      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a7d      	ldr	r2, [pc, #500]	@ (8005ae8 <HAL_DMA_IRQHandler+0xc78>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d045      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a7c      	ldr	r2, [pc, #496]	@ (8005aec <HAL_DMA_IRQHandler+0xc7c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d040      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a7a      	ldr	r2, [pc, #488]	@ (8005af0 <HAL_DMA_IRQHandler+0xc80>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d03b      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a79      	ldr	r2, [pc, #484]	@ (8005af4 <HAL_DMA_IRQHandler+0xc84>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d036      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a77      	ldr	r2, [pc, #476]	@ (8005af8 <HAL_DMA_IRQHandler+0xc88>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d031      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a76      	ldr	r2, [pc, #472]	@ (8005afc <HAL_DMA_IRQHandler+0xc8c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d02c      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a74      	ldr	r2, [pc, #464]	@ (8005b00 <HAL_DMA_IRQHandler+0xc90>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d027      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a73      	ldr	r2, [pc, #460]	@ (8005b04 <HAL_DMA_IRQHandler+0xc94>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d022      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a71      	ldr	r2, [pc, #452]	@ (8005b08 <HAL_DMA_IRQHandler+0xc98>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01d      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a70      	ldr	r2, [pc, #448]	@ (8005b0c <HAL_DMA_IRQHandler+0xc9c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d018      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a6e      	ldr	r2, [pc, #440]	@ (8005b10 <HAL_DMA_IRQHandler+0xca0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a6d      	ldr	r2, [pc, #436]	@ (8005b14 <HAL_DMA_IRQHandler+0xca4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a6b      	ldr	r2, [pc, #428]	@ (8005b18 <HAL_DMA_IRQHandler+0xca8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a6a      	ldr	r2, [pc, #424]	@ (8005b1c <HAL_DMA_IRQHandler+0xcac>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a68      	ldr	r2, [pc, #416]	@ (8005b20 <HAL_DMA_IRQHandler+0xcb0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d108      	bne.n	8005994 <HAL_DMA_IRQHandler+0xb24>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0208 	bic.w	r2, r2, #8
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e007      	b.n	80059a4 <HAL_DMA_IRQHandler+0xb34>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0204 	bic.w	r2, r2, #4
 80059a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8165 	beq.w	8005c78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059b6:	e15f      	b.n	8005c78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	2202      	movs	r2, #2
 80059c2:	409a      	lsls	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80c5 	beq.w	8005b58 <HAL_DMA_IRQHandler+0xce8>
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80bf 	beq.w	8005b58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	2202      	movs	r2, #2
 80059e4:	409a      	lsls	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d018      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 813a 	beq.w	8005c7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a10:	e134      	b.n	8005c7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 8130 	beq.w	8005c7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a24:	e12a      	b.n	8005c7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f040 8089 	bne.w	8005b44 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2b      	ldr	r2, [pc, #172]	@ (8005ae4 <HAL_DMA_IRQHandler+0xc74>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d04a      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a29      	ldr	r2, [pc, #164]	@ (8005ae8 <HAL_DMA_IRQHandler+0xc78>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d045      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a28      	ldr	r2, [pc, #160]	@ (8005aec <HAL_DMA_IRQHandler+0xc7c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d040      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a26      	ldr	r2, [pc, #152]	@ (8005af0 <HAL_DMA_IRQHandler+0xc80>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d03b      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a25      	ldr	r2, [pc, #148]	@ (8005af4 <HAL_DMA_IRQHandler+0xc84>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d036      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a23      	ldr	r2, [pc, #140]	@ (8005af8 <HAL_DMA_IRQHandler+0xc88>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d031      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a22      	ldr	r2, [pc, #136]	@ (8005afc <HAL_DMA_IRQHandler+0xc8c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d02c      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a20      	ldr	r2, [pc, #128]	@ (8005b00 <HAL_DMA_IRQHandler+0xc90>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d027      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1f      	ldr	r2, [pc, #124]	@ (8005b04 <HAL_DMA_IRQHandler+0xc94>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d022      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1d      	ldr	r2, [pc, #116]	@ (8005b08 <HAL_DMA_IRQHandler+0xc98>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01d      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b0c <HAL_DMA_IRQHandler+0xc9c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d018      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b10 <HAL_DMA_IRQHandler+0xca0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a19      	ldr	r2, [pc, #100]	@ (8005b14 <HAL_DMA_IRQHandler+0xca4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a17      	ldr	r2, [pc, #92]	@ (8005b18 <HAL_DMA_IRQHandler+0xca8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	@ (8005b1c <HAL_DMA_IRQHandler+0xcac>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a14      	ldr	r2, [pc, #80]	@ (8005b20 <HAL_DMA_IRQHandler+0xcb0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d128      	bne.n	8005b24 <HAL_DMA_IRQHandler+0xcb4>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0214 	bic.w	r2, r2, #20
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e027      	b.n	8005b34 <HAL_DMA_IRQHandler+0xcc4>
 8005ae4:	40020010 	.word	0x40020010
 8005ae8:	40020028 	.word	0x40020028
 8005aec:	40020040 	.word	0x40020040
 8005af0:	40020058 	.word	0x40020058
 8005af4:	40020070 	.word	0x40020070
 8005af8:	40020088 	.word	0x40020088
 8005afc:	400200a0 	.word	0x400200a0
 8005b00:	400200b8 	.word	0x400200b8
 8005b04:	40020410 	.word	0x40020410
 8005b08:	40020428 	.word	0x40020428
 8005b0c:	40020440 	.word	0x40020440
 8005b10:	40020458 	.word	0x40020458
 8005b14:	40020470 	.word	0x40020470
 8005b18:	40020488 	.word	0x40020488
 8005b1c:	400204a0 	.word	0x400204a0
 8005b20:	400204b8 	.word	0x400204b8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 020a 	bic.w	r2, r2, #10
 8005b32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8097 	beq.w	8005c7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b56:	e091      	b.n	8005c7c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	2208      	movs	r2, #8
 8005b62:	409a      	lsls	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8088 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8082 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a41      	ldr	r2, [pc, #260]	@ (8005c84 <HAL_DMA_IRQHandler+0xe14>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d04a      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3f      	ldr	r2, [pc, #252]	@ (8005c88 <HAL_DMA_IRQHandler+0xe18>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d045      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3e      	ldr	r2, [pc, #248]	@ (8005c8c <HAL_DMA_IRQHandler+0xe1c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d040      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c90 <HAL_DMA_IRQHandler+0xe20>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d03b      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a3b      	ldr	r2, [pc, #236]	@ (8005c94 <HAL_DMA_IRQHandler+0xe24>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d036      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a39      	ldr	r2, [pc, #228]	@ (8005c98 <HAL_DMA_IRQHandler+0xe28>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d031      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a38      	ldr	r2, [pc, #224]	@ (8005c9c <HAL_DMA_IRQHandler+0xe2c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d02c      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a36      	ldr	r2, [pc, #216]	@ (8005ca0 <HAL_DMA_IRQHandler+0xe30>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d027      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a35      	ldr	r2, [pc, #212]	@ (8005ca4 <HAL_DMA_IRQHandler+0xe34>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d022      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a33      	ldr	r2, [pc, #204]	@ (8005ca8 <HAL_DMA_IRQHandler+0xe38>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01d      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a32      	ldr	r2, [pc, #200]	@ (8005cac <HAL_DMA_IRQHandler+0xe3c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d018      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a30      	ldr	r2, [pc, #192]	@ (8005cb0 <HAL_DMA_IRQHandler+0xe40>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d013      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb4 <HAL_DMA_IRQHandler+0xe44>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00e      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb8 <HAL_DMA_IRQHandler+0xe48>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d009      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cbc <HAL_DMA_IRQHandler+0xe4c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d004      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc0 <HAL_DMA_IRQHandler+0xe50>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d108      	bne.n	8005c2c <HAL_DMA_IRQHandler+0xdbc>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 021c 	bic.w	r2, r2, #28
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e007      	b.n	8005c3c <HAL_DMA_IRQHandler+0xdcc>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 020e 	bic.w	r2, r2, #14
 8005c3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	2201      	movs	r2, #1
 8005c46:	409a      	lsls	r2, r3
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
 8005c72:	e004      	b.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005c74:	bf00      	nop
 8005c76:	e002      	b.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c78:	bf00      	nop
 8005c7a:	e000      	b.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c7e:	3728      	adds	r7, #40	@ 0x28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40020010 	.word	0x40020010
 8005c88:	40020028 	.word	0x40020028
 8005c8c:	40020040 	.word	0x40020040
 8005c90:	40020058 	.word	0x40020058
 8005c94:	40020070 	.word	0x40020070
 8005c98:	40020088 	.word	0x40020088
 8005c9c:	400200a0 	.word	0x400200a0
 8005ca0:	400200b8 	.word	0x400200b8
 8005ca4:	40020410 	.word	0x40020410
 8005ca8:	40020428 	.word	0x40020428
 8005cac:	40020440 	.word	0x40020440
 8005cb0:	40020458 	.word	0x40020458
 8005cb4:	40020470 	.word	0x40020470
 8005cb8:	40020488 	.word	0x40020488
 8005cbc:	400204a0 	.word	0x400204a0
 8005cc0:	400204b8 	.word	0x400204b8

08005cc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cdc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a7f      	ldr	r2, [pc, #508]	@ (8005ee0 <DMA_SetConfig+0x21c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d072      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a7d      	ldr	r2, [pc, #500]	@ (8005ee4 <DMA_SetConfig+0x220>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d06d      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ee8 <DMA_SetConfig+0x224>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d068      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a7a      	ldr	r2, [pc, #488]	@ (8005eec <DMA_SetConfig+0x228>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d063      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a79      	ldr	r2, [pc, #484]	@ (8005ef0 <DMA_SetConfig+0x22c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d05e      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a77      	ldr	r2, [pc, #476]	@ (8005ef4 <DMA_SetConfig+0x230>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d059      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a76      	ldr	r2, [pc, #472]	@ (8005ef8 <DMA_SetConfig+0x234>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d054      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a74      	ldr	r2, [pc, #464]	@ (8005efc <DMA_SetConfig+0x238>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d04f      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a73      	ldr	r2, [pc, #460]	@ (8005f00 <DMA_SetConfig+0x23c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d04a      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a71      	ldr	r2, [pc, #452]	@ (8005f04 <DMA_SetConfig+0x240>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d045      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a70      	ldr	r2, [pc, #448]	@ (8005f08 <DMA_SetConfig+0x244>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d040      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a6e      	ldr	r2, [pc, #440]	@ (8005f0c <DMA_SetConfig+0x248>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d03b      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a6d      	ldr	r2, [pc, #436]	@ (8005f10 <DMA_SetConfig+0x24c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d036      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a6b      	ldr	r2, [pc, #428]	@ (8005f14 <DMA_SetConfig+0x250>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d031      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a6a      	ldr	r2, [pc, #424]	@ (8005f18 <DMA_SetConfig+0x254>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d02c      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a68      	ldr	r2, [pc, #416]	@ (8005f1c <DMA_SetConfig+0x258>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d027      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a67      	ldr	r2, [pc, #412]	@ (8005f20 <DMA_SetConfig+0x25c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a65      	ldr	r2, [pc, #404]	@ (8005f24 <DMA_SetConfig+0x260>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01d      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a64      	ldr	r2, [pc, #400]	@ (8005f28 <DMA_SetConfig+0x264>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d018      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a62      	ldr	r2, [pc, #392]	@ (8005f2c <DMA_SetConfig+0x268>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a61      	ldr	r2, [pc, #388]	@ (8005f30 <DMA_SetConfig+0x26c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5f      	ldr	r2, [pc, #380]	@ (8005f34 <DMA_SetConfig+0x270>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8005f38 <DMA_SetConfig+0x274>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <DMA_SetConfig+0x10a>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a5c      	ldr	r2, [pc, #368]	@ (8005f3c <DMA_SetConfig+0x278>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d101      	bne.n	8005dd2 <DMA_SetConfig+0x10e>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <DMA_SetConfig+0x110>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00d      	beq.n	8005df4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005de0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005df2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a39      	ldr	r2, [pc, #228]	@ (8005ee0 <DMA_SetConfig+0x21c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d04a      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a38      	ldr	r2, [pc, #224]	@ (8005ee4 <DMA_SetConfig+0x220>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d045      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a36      	ldr	r2, [pc, #216]	@ (8005ee8 <DMA_SetConfig+0x224>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d040      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a35      	ldr	r2, [pc, #212]	@ (8005eec <DMA_SetConfig+0x228>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d03b      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a33      	ldr	r2, [pc, #204]	@ (8005ef0 <DMA_SetConfig+0x22c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d036      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a32      	ldr	r2, [pc, #200]	@ (8005ef4 <DMA_SetConfig+0x230>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d031      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a30      	ldr	r2, [pc, #192]	@ (8005ef8 <DMA_SetConfig+0x234>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d02c      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8005efc <DMA_SetConfig+0x238>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d027      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2d      	ldr	r2, [pc, #180]	@ (8005f00 <DMA_SetConfig+0x23c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d022      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2c      	ldr	r2, [pc, #176]	@ (8005f04 <DMA_SetConfig+0x240>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d01d      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005f08 <DMA_SetConfig+0x244>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d018      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a29      	ldr	r2, [pc, #164]	@ (8005f0c <DMA_SetConfig+0x248>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a27      	ldr	r2, [pc, #156]	@ (8005f10 <DMA_SetConfig+0x24c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00e      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a26      	ldr	r2, [pc, #152]	@ (8005f14 <DMA_SetConfig+0x250>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a24      	ldr	r2, [pc, #144]	@ (8005f18 <DMA_SetConfig+0x254>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <DMA_SetConfig+0x1d0>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a23      	ldr	r2, [pc, #140]	@ (8005f1c <DMA_SetConfig+0x258>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d101      	bne.n	8005e98 <DMA_SetConfig+0x1d4>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <DMA_SetConfig+0x1d6>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d059      	beq.n	8005f52 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	223f      	movs	r2, #63	@ 0x3f
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ebc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b40      	cmp	r3, #64	@ 0x40
 8005ecc:	d138      	bne.n	8005f40 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ede:	e086      	b.n	8005fee <DMA_SetConfig+0x32a>
 8005ee0:	40020010 	.word	0x40020010
 8005ee4:	40020028 	.word	0x40020028
 8005ee8:	40020040 	.word	0x40020040
 8005eec:	40020058 	.word	0x40020058
 8005ef0:	40020070 	.word	0x40020070
 8005ef4:	40020088 	.word	0x40020088
 8005ef8:	400200a0 	.word	0x400200a0
 8005efc:	400200b8 	.word	0x400200b8
 8005f00:	40020410 	.word	0x40020410
 8005f04:	40020428 	.word	0x40020428
 8005f08:	40020440 	.word	0x40020440
 8005f0c:	40020458 	.word	0x40020458
 8005f10:	40020470 	.word	0x40020470
 8005f14:	40020488 	.word	0x40020488
 8005f18:	400204a0 	.word	0x400204a0
 8005f1c:	400204b8 	.word	0x400204b8
 8005f20:	58025408 	.word	0x58025408
 8005f24:	5802541c 	.word	0x5802541c
 8005f28:	58025430 	.word	0x58025430
 8005f2c:	58025444 	.word	0x58025444
 8005f30:	58025458 	.word	0x58025458
 8005f34:	5802546c 	.word	0x5802546c
 8005f38:	58025480 	.word	0x58025480
 8005f3c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]
}
 8005f50:	e04d      	b.n	8005fee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a29      	ldr	r2, [pc, #164]	@ (8005ffc <DMA_SetConfig+0x338>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <DMA_SetConfig+0x2de>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a27      	ldr	r2, [pc, #156]	@ (8006000 <DMA_SetConfig+0x33c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <DMA_SetConfig+0x2de>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a26      	ldr	r2, [pc, #152]	@ (8006004 <DMA_SetConfig+0x340>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <DMA_SetConfig+0x2de>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a24      	ldr	r2, [pc, #144]	@ (8006008 <DMA_SetConfig+0x344>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <DMA_SetConfig+0x2de>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a23      	ldr	r2, [pc, #140]	@ (800600c <DMA_SetConfig+0x348>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <DMA_SetConfig+0x2de>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a21      	ldr	r2, [pc, #132]	@ (8006010 <DMA_SetConfig+0x34c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <DMA_SetConfig+0x2de>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a20      	ldr	r2, [pc, #128]	@ (8006014 <DMA_SetConfig+0x350>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <DMA_SetConfig+0x2de>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8006018 <DMA_SetConfig+0x354>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <DMA_SetConfig+0x2e2>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <DMA_SetConfig+0x2e4>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d020      	beq.n	8005fee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b40      	cmp	r3, #64	@ 0x40
 8005fca:	d108      	bne.n	8005fde <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	60da      	str	r2, [r3, #12]
}
 8005fdc:	e007      	b.n	8005fee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	60da      	str	r2, [r3, #12]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	58025408 	.word	0x58025408
 8006000:	5802541c 	.word	0x5802541c
 8006004:	58025430 	.word	0x58025430
 8006008:	58025444 	.word	0x58025444
 800600c:	58025458 	.word	0x58025458
 8006010:	5802546c 	.word	0x5802546c
 8006014:	58025480 	.word	0x58025480
 8006018:	58025494 	.word	0x58025494

0800601c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a42      	ldr	r2, [pc, #264]	@ (8006134 <DMA_CalcBaseAndBitshift+0x118>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d04a      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a41      	ldr	r2, [pc, #260]	@ (8006138 <DMA_CalcBaseAndBitshift+0x11c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d045      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a3f      	ldr	r2, [pc, #252]	@ (800613c <DMA_CalcBaseAndBitshift+0x120>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d040      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a3e      	ldr	r2, [pc, #248]	@ (8006140 <DMA_CalcBaseAndBitshift+0x124>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d03b      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a3c      	ldr	r2, [pc, #240]	@ (8006144 <DMA_CalcBaseAndBitshift+0x128>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d036      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3b      	ldr	r2, [pc, #236]	@ (8006148 <DMA_CalcBaseAndBitshift+0x12c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d031      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a39      	ldr	r2, [pc, #228]	@ (800614c <DMA_CalcBaseAndBitshift+0x130>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d02c      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a38      	ldr	r2, [pc, #224]	@ (8006150 <DMA_CalcBaseAndBitshift+0x134>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d027      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a36      	ldr	r2, [pc, #216]	@ (8006154 <DMA_CalcBaseAndBitshift+0x138>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a35      	ldr	r2, [pc, #212]	@ (8006158 <DMA_CalcBaseAndBitshift+0x13c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d01d      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a33      	ldr	r2, [pc, #204]	@ (800615c <DMA_CalcBaseAndBitshift+0x140>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a32      	ldr	r2, [pc, #200]	@ (8006160 <DMA_CalcBaseAndBitshift+0x144>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a30      	ldr	r2, [pc, #192]	@ (8006164 <DMA_CalcBaseAndBitshift+0x148>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006168 <DMA_CalcBaseAndBitshift+0x14c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2d      	ldr	r2, [pc, #180]	@ (800616c <DMA_CalcBaseAndBitshift+0x150>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2c      	ldr	r2, [pc, #176]	@ (8006170 <DMA_CalcBaseAndBitshift+0x154>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d101      	bne.n	80060c8 <DMA_CalcBaseAndBitshift+0xac>
 80060c4:	2301      	movs	r3, #1
 80060c6:	e000      	b.n	80060ca <DMA_CalcBaseAndBitshift+0xae>
 80060c8:	2300      	movs	r3, #0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d024      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	3b10      	subs	r3, #16
 80060d6:	4a27      	ldr	r2, [pc, #156]	@ (8006174 <DMA_CalcBaseAndBitshift+0x158>)
 80060d8:	fba2 2303 	umull	r2, r3, r2, r3
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	4a24      	ldr	r2, [pc, #144]	@ (8006178 <DMA_CalcBaseAndBitshift+0x15c>)
 80060e8:	5cd3      	ldrb	r3, [r2, r3]
 80060ea:	461a      	mov	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d908      	bls.n	8006108 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	4b1f      	ldr	r3, [pc, #124]	@ (800617c <DMA_CalcBaseAndBitshift+0x160>)
 80060fe:	4013      	ands	r3, r2
 8006100:	1d1a      	adds	r2, r3, #4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	659a      	str	r2, [r3, #88]	@ 0x58
 8006106:	e00d      	b.n	8006124 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	4b1b      	ldr	r3, [pc, #108]	@ (800617c <DMA_CalcBaseAndBitshift+0x160>)
 8006110:	4013      	ands	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6593      	str	r3, [r2, #88]	@ 0x58
 8006116:	e005      	b.n	8006124 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	40020010 	.word	0x40020010
 8006138:	40020028 	.word	0x40020028
 800613c:	40020040 	.word	0x40020040
 8006140:	40020058 	.word	0x40020058
 8006144:	40020070 	.word	0x40020070
 8006148:	40020088 	.word	0x40020088
 800614c:	400200a0 	.word	0x400200a0
 8006150:	400200b8 	.word	0x400200b8
 8006154:	40020410 	.word	0x40020410
 8006158:	40020428 	.word	0x40020428
 800615c:	40020440 	.word	0x40020440
 8006160:	40020458 	.word	0x40020458
 8006164:	40020470 	.word	0x40020470
 8006168:	40020488 	.word	0x40020488
 800616c:	400204a0 	.word	0x400204a0
 8006170:	400204b8 	.word	0x400204b8
 8006174:	aaaaaaab 	.word	0xaaaaaaab
 8006178:	08014018 	.word	0x08014018
 800617c:	fffffc00 	.word	0xfffffc00

08006180 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d120      	bne.n	80061d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006198:	2b03      	cmp	r3, #3
 800619a:	d858      	bhi.n	800624e <DMA_CheckFifoParam+0xce>
 800619c:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <DMA_CheckFifoParam+0x24>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061c7 	.word	0x080061c7
 80061ac:	080061b5 	.word	0x080061b5
 80061b0:	0800624f 	.word	0x0800624f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d048      	beq.n	8006252 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061c4:	e045      	b.n	8006252 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061ce:	d142      	bne.n	8006256 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061d4:	e03f      	b.n	8006256 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061de:	d123      	bne.n	8006228 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d838      	bhi.n	800625a <DMA_CheckFifoParam+0xda>
 80061e8:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <DMA_CheckFifoParam+0x70>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006207 	.word	0x08006207
 80061f8:	08006201 	.word	0x08006201
 80061fc:	08006219 	.word	0x08006219
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
        break;
 8006204:	e030      	b.n	8006268 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d025      	beq.n	800625e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006216:	e022      	b.n	800625e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006220:	d11f      	bne.n	8006262 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006226:	e01c      	b.n	8006262 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	2b02      	cmp	r3, #2
 800622e:	d902      	bls.n	8006236 <DMA_CheckFifoParam+0xb6>
 8006230:	2b03      	cmp	r3, #3
 8006232:	d003      	beq.n	800623c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006234:	e018      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
        break;
 800623a:	e015      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00e      	beq.n	8006266 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
    break;
 800624c:	e00b      	b.n	8006266 <DMA_CheckFifoParam+0xe6>
        break;
 800624e:	bf00      	nop
 8006250:	e00a      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 8006252:	bf00      	nop
 8006254:	e008      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 8006256:	bf00      	nop
 8006258:	e006      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 800625a:	bf00      	nop
 800625c:	e004      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 800625e:	bf00      	nop
 8006260:	e002      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
    break;
 8006266:	bf00      	nop
    }
  }

  return status;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop

08006278 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a38      	ldr	r2, [pc, #224]	@ (800636c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d022      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a36      	ldr	r2, [pc, #216]	@ (8006370 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01d      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a35      	ldr	r2, [pc, #212]	@ (8006374 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d018      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a33      	ldr	r2, [pc, #204]	@ (8006378 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a32      	ldr	r2, [pc, #200]	@ (800637c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00e      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a30      	ldr	r2, [pc, #192]	@ (8006380 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006384 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006388 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01a      	beq.n	8006316 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3b08      	subs	r3, #8
 80062e8:	4a28      	ldr	r2, [pc, #160]	@ (800638c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80062ea:	fba2 2303 	umull	r2, r3, r2, r3
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4b26      	ldr	r3, [pc, #152]	@ (8006390 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	461a      	mov	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a24      	ldr	r2, [pc, #144]	@ (8006394 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006304:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	2201      	movs	r2, #1
 800630e:	409a      	lsls	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006314:	e024      	b.n	8006360 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	3b10      	subs	r3, #16
 800631e:	4a1e      	ldr	r2, [pc, #120]	@ (8006398 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4a1c      	ldr	r2, [pc, #112]	@ (800639c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d806      	bhi.n	800633e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4a1b      	ldr	r2, [pc, #108]	@ (80063a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d902      	bls.n	800633e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3308      	adds	r3, #8
 800633c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4b18      	ldr	r3, [pc, #96]	@ (80063a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a16      	ldr	r2, [pc, #88]	@ (80063a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006350:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2201      	movs	r2, #1
 800635a:	409a      	lsls	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	58025408 	.word	0x58025408
 8006370:	5802541c 	.word	0x5802541c
 8006374:	58025430 	.word	0x58025430
 8006378:	58025444 	.word	0x58025444
 800637c:	58025458 	.word	0x58025458
 8006380:	5802546c 	.word	0x5802546c
 8006384:	58025480 	.word	0x58025480
 8006388:	58025494 	.word	0x58025494
 800638c:	cccccccd 	.word	0xcccccccd
 8006390:	16009600 	.word	0x16009600
 8006394:	58025880 	.word	0x58025880
 8006398:	aaaaaaab 	.word	0xaaaaaaab
 800639c:	400204b8 	.word	0x400204b8
 80063a0:	4002040f 	.word	0x4002040f
 80063a4:	10008200 	.word	0x10008200
 80063a8:	40020880 	.word	0x40020880

080063ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d04a      	beq.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d847      	bhi.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a25      	ldr	r2, [pc, #148]	@ (8006464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d022      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a24      	ldr	r2, [pc, #144]	@ (8006468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d01d      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a22      	ldr	r2, [pc, #136]	@ (800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d018      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a21      	ldr	r2, [pc, #132]	@ (8006470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d013      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00e      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d009      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1c      	ldr	r2, [pc, #112]	@ (800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d101      	bne.n	800641c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800641c:	2300      	movs	r3, #0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4b17      	ldr	r3, [pc, #92]	@ (8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a15      	ldr	r2, [pc, #84]	@ (8006488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006434:	671a      	str	r2, [r3, #112]	@ 0x70
 8006436:	e009      	b.n	800644c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4b14      	ldr	r3, [pc, #80]	@ (800648c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a11      	ldr	r2, [pc, #68]	@ (8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800644a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3b01      	subs	r3, #1
 8006450:	2201      	movs	r2, #1
 8006452:	409a      	lsls	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006458:	bf00      	nop
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	58025408 	.word	0x58025408
 8006468:	5802541c 	.word	0x5802541c
 800646c:	58025430 	.word	0x58025430
 8006470:	58025444 	.word	0x58025444
 8006474:	58025458 	.word	0x58025458
 8006478:	5802546c 	.word	0x5802546c
 800647c:	58025480 	.word	0x58025480
 8006480:	58025494 	.word	0x58025494
 8006484:	1600963f 	.word	0x1600963f
 8006488:	58025940 	.word	0x58025940
 800648c:	1000823f 	.word	0x1000823f
 8006490:	40020940 	.word	0x40020940

08006494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006494:	b480      	push	{r7}
 8006496:	b089      	sub	sp, #36	@ 0x24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80064a2:	4b89      	ldr	r3, [pc, #548]	@ (80066c8 <HAL_GPIO_Init+0x234>)
 80064a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064a6:	e194      	b.n	80067d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	2101      	movs	r1, #1
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	fa01 f303 	lsl.w	r3, r1, r3
 80064b4:	4013      	ands	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 8186 	beq.w	80067cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d005      	beq.n	80064d8 <HAL_GPIO_Init+0x44>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f003 0303 	and.w	r3, r3, #3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d130      	bne.n	800653a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	2203      	movs	r2, #3
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	43db      	mvns	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4013      	ands	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4313      	orrs	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800650e:	2201      	movs	r2, #1
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	4013      	ands	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	091b      	lsrs	r3, r3, #4
 8006524:	f003 0201 	and.w	r2, r3, #1
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4313      	orrs	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b03      	cmp	r3, #3
 8006544:	d017      	beq.n	8006576 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	2203      	movs	r2, #3
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43db      	mvns	r3, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4013      	ands	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d123      	bne.n	80065ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	08da      	lsrs	r2, r3, #3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3208      	adds	r2, #8
 800658a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	220f      	movs	r2, #15
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	43db      	mvns	r3, r3
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	4013      	ands	r3, r2
 80065a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	08da      	lsrs	r2, r3, #3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3208      	adds	r2, #8
 80065c4:	69b9      	ldr	r1, [r7, #24]
 80065c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	2203      	movs	r2, #3
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	43db      	mvns	r3, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4013      	ands	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 0203 	and.w	r2, r3, #3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80e0 	beq.w	80067cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800660c:	4b2f      	ldr	r3, [pc, #188]	@ (80066cc <HAL_GPIO_Init+0x238>)
 800660e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006612:	4a2e      	ldr	r2, [pc, #184]	@ (80066cc <HAL_GPIO_Init+0x238>)
 8006614:	f043 0302 	orr.w	r3, r3, #2
 8006618:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800661c:	4b2b      	ldr	r3, [pc, #172]	@ (80066cc <HAL_GPIO_Init+0x238>)
 800661e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800662a:	4a29      	ldr	r2, [pc, #164]	@ (80066d0 <HAL_GPIO_Init+0x23c>)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	089b      	lsrs	r3, r3, #2
 8006630:	3302      	adds	r3, #2
 8006632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	220f      	movs	r2, #15
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	43db      	mvns	r3, r3
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	4013      	ands	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a20      	ldr	r2, [pc, #128]	@ (80066d4 <HAL_GPIO_Init+0x240>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d052      	beq.n	80066fc <HAL_GPIO_Init+0x268>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a1f      	ldr	r2, [pc, #124]	@ (80066d8 <HAL_GPIO_Init+0x244>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d031      	beq.n	80066c2 <HAL_GPIO_Init+0x22e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a1e      	ldr	r2, [pc, #120]	@ (80066dc <HAL_GPIO_Init+0x248>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d02b      	beq.n	80066be <HAL_GPIO_Init+0x22a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1d      	ldr	r2, [pc, #116]	@ (80066e0 <HAL_GPIO_Init+0x24c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d025      	beq.n	80066ba <HAL_GPIO_Init+0x226>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a1c      	ldr	r2, [pc, #112]	@ (80066e4 <HAL_GPIO_Init+0x250>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01f      	beq.n	80066b6 <HAL_GPIO_Init+0x222>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a1b      	ldr	r2, [pc, #108]	@ (80066e8 <HAL_GPIO_Init+0x254>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d019      	beq.n	80066b2 <HAL_GPIO_Init+0x21e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a1a      	ldr	r2, [pc, #104]	@ (80066ec <HAL_GPIO_Init+0x258>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_GPIO_Init+0x21a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a19      	ldr	r2, [pc, #100]	@ (80066f0 <HAL_GPIO_Init+0x25c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00d      	beq.n	80066aa <HAL_GPIO_Init+0x216>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a18      	ldr	r2, [pc, #96]	@ (80066f4 <HAL_GPIO_Init+0x260>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d007      	beq.n	80066a6 <HAL_GPIO_Init+0x212>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a17      	ldr	r2, [pc, #92]	@ (80066f8 <HAL_GPIO_Init+0x264>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d101      	bne.n	80066a2 <HAL_GPIO_Init+0x20e>
 800669e:	2309      	movs	r3, #9
 80066a0:	e02d      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066a2:	230a      	movs	r3, #10
 80066a4:	e02b      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066a6:	2308      	movs	r3, #8
 80066a8:	e029      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066aa:	2307      	movs	r3, #7
 80066ac:	e027      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066ae:	2306      	movs	r3, #6
 80066b0:	e025      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066b2:	2305      	movs	r3, #5
 80066b4:	e023      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066b6:	2304      	movs	r3, #4
 80066b8:	e021      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066ba:	2303      	movs	r3, #3
 80066bc:	e01f      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066be:	2302      	movs	r3, #2
 80066c0:	e01d      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e01b      	b.n	80066fe <HAL_GPIO_Init+0x26a>
 80066c6:	bf00      	nop
 80066c8:	58000080 	.word	0x58000080
 80066cc:	58024400 	.word	0x58024400
 80066d0:	58000400 	.word	0x58000400
 80066d4:	58020000 	.word	0x58020000
 80066d8:	58020400 	.word	0x58020400
 80066dc:	58020800 	.word	0x58020800
 80066e0:	58020c00 	.word	0x58020c00
 80066e4:	58021000 	.word	0x58021000
 80066e8:	58021400 	.word	0x58021400
 80066ec:	58021800 	.word	0x58021800
 80066f0:	58021c00 	.word	0x58021c00
 80066f4:	58022000 	.word	0x58022000
 80066f8:	58022400 	.word	0x58022400
 80066fc:	2300      	movs	r3, #0
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	f002 0203 	and.w	r2, r2, #3
 8006704:	0092      	lsls	r2, r2, #2
 8006706:	4093      	lsls	r3, r2
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4313      	orrs	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800670e:	4938      	ldr	r1, [pc, #224]	@ (80067f0 <HAL_GPIO_Init+0x35c>)
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	089b      	lsrs	r3, r3, #2
 8006714:	3302      	adds	r3, #2
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800671c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	43db      	mvns	r3, r3
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	4013      	ands	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006742:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800674a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	43db      	mvns	r3, r3
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	4013      	ands	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	43db      	mvns	r3, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	43db      	mvns	r3, r3
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	4013      	ands	r3, r2
 80067b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	3301      	adds	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	fa22 f303 	lsr.w	r3, r2, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f ae63 	bne.w	80064a8 <HAL_GPIO_Init+0x14>
  }
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	3724      	adds	r7, #36	@ 0x24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	58000400 	.word	0x58000400

080067f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	807b      	strh	r3, [r7, #2]
 8006800:	4613      	mov	r3, r2
 8006802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006804:	787b      	ldrb	r3, [r7, #1]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800680a:	887a      	ldrh	r2, [r7, #2]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006810:	e003      	b.n	800681a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006812:	887b      	ldrh	r3, [r7, #2]
 8006814:	041a      	lsls	r2, r3, #16
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	619a      	str	r2, [r3, #24]
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	4603      	mov	r3, r0
 800682e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006834:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	4618      	mov	r0, r3
 800684e:	f7fa fa9d 	bl	8000d8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006864:	4b19      	ldr	r3, [pc, #100]	@ (80068cc <HAL_PWREx_ConfigSupply+0x70>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b04      	cmp	r3, #4
 800686e:	d00a      	beq.n	8006886 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006870:	4b16      	ldr	r3, [pc, #88]	@ (80068cc <HAL_PWREx_ConfigSupply+0x70>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d001      	beq.n	8006882 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e01f      	b.n	80068c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	e01d      	b.n	80068c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006886:	4b11      	ldr	r3, [pc, #68]	@ (80068cc <HAL_PWREx_ConfigSupply+0x70>)
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f023 0207 	bic.w	r2, r3, #7
 800688e:	490f      	ldr	r1, [pc, #60]	@ (80068cc <HAL_PWREx_ConfigSupply+0x70>)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4313      	orrs	r3, r2
 8006894:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006896:	f7fb fbd3 	bl	8002040 <HAL_GetTick>
 800689a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800689c:	e009      	b.n	80068b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800689e:	f7fb fbcf 	bl	8002040 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068ac:	d901      	bls.n	80068b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e007      	b.n	80068c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068b2:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <HAL_PWREx_ConfigSupply+0x70>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068be:	d1ee      	bne.n	800689e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	58024800 	.word	0x58024800

080068d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08c      	sub	sp, #48	@ 0x30
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	f000 bc48 	b.w	8007174 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 8088 	beq.w	8006a02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f2:	4b99      	ldr	r3, [pc, #612]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068fc:	4b96      	ldr	r3, [pc, #600]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006904:	2b10      	cmp	r3, #16
 8006906:	d007      	beq.n	8006918 <HAL_RCC_OscConfig+0x48>
 8006908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690a:	2b18      	cmp	r3, #24
 800690c:	d111      	bne.n	8006932 <HAL_RCC_OscConfig+0x62>
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d10c      	bne.n	8006932 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006918:	4b8f      	ldr	r3, [pc, #572]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d06d      	beq.n	8006a00 <HAL_RCC_OscConfig+0x130>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d169      	bne.n	8006a00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f000 bc21 	b.w	8007174 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800693a:	d106      	bne.n	800694a <HAL_RCC_OscConfig+0x7a>
 800693c:	4b86      	ldr	r3, [pc, #536]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a85      	ldr	r2, [pc, #532]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	e02e      	b.n	80069a8 <HAL_RCC_OscConfig+0xd8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10c      	bne.n	800696c <HAL_RCC_OscConfig+0x9c>
 8006952:	4b81      	ldr	r3, [pc, #516]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a80      	ldr	r2, [pc, #512]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	4b7e      	ldr	r3, [pc, #504]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a7d      	ldr	r2, [pc, #500]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006964:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	e01d      	b.n	80069a8 <HAL_RCC_OscConfig+0xd8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006974:	d10c      	bne.n	8006990 <HAL_RCC_OscConfig+0xc0>
 8006976:	4b78      	ldr	r3, [pc, #480]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a77      	ldr	r2, [pc, #476]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 800697c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	4b75      	ldr	r3, [pc, #468]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a74      	ldr	r2, [pc, #464]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e00b      	b.n	80069a8 <HAL_RCC_OscConfig+0xd8>
 8006990:	4b71      	ldr	r3, [pc, #452]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a70      	ldr	r2, [pc, #448]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	4b6e      	ldr	r3, [pc, #440]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a6d      	ldr	r2, [pc, #436]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 80069a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d013      	beq.n	80069d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b0:	f7fb fb46 	bl	8002040 <HAL_GetTick>
 80069b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069b8:	f7fb fb42 	bl	8002040 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b64      	cmp	r3, #100	@ 0x64
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e3d4      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069ca:	4b63      	ldr	r3, [pc, #396]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0f0      	beq.n	80069b8 <HAL_RCC_OscConfig+0xe8>
 80069d6:	e014      	b.n	8006a02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fb fb32 	bl	8002040 <HAL_GetTick>
 80069dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069e0:	f7fb fb2e 	bl	8002040 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b64      	cmp	r3, #100	@ 0x64
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e3c0      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069f2:	4b59      	ldr	r3, [pc, #356]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f0      	bne.n	80069e0 <HAL_RCC_OscConfig+0x110>
 80069fe:	e000      	b.n	8006a02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 80ca 	beq.w	8006ba4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a10:	4b51      	ldr	r3, [pc, #324]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_RCC_OscConfig+0x166>
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	2b18      	cmp	r3, #24
 8006a2a:	d156      	bne.n	8006ada <HAL_RCC_OscConfig+0x20a>
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d151      	bne.n	8006ada <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a36:	4b48      	ldr	r3, [pc, #288]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <HAL_RCC_OscConfig+0x17e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e392      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a4e:	4b42      	ldr	r3, [pc, #264]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 0219 	bic.w	r2, r3, #25
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	493f      	ldr	r1, [pc, #252]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fb faee 	bl	8002040 <HAL_GetTick>
 8006a64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a68:	f7fb faea 	bl	8002040 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e37c      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a7a:	4b37      	ldr	r3, [pc, #220]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a86:	f7fb fae7 	bl	8002058 <HAL_GetREVID>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d817      	bhi.n	8006ac4 <HAL_RCC_OscConfig+0x1f4>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b40      	cmp	r3, #64	@ 0x40
 8006a9a:	d108      	bne.n	8006aae <HAL_RCC_OscConfig+0x1de>
 8006a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aaa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aac:	e07a      	b.n	8006ba4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aae:	4b2a      	ldr	r3, [pc, #168]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	031b      	lsls	r3, r3, #12
 8006abc:	4926      	ldr	r1, [pc, #152]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ac2:	e06f      	b.n	8006ba4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac4:	4b24      	ldr	r3, [pc, #144]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	061b      	lsls	r3, r3, #24
 8006ad2:	4921      	ldr	r1, [pc, #132]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ad8:	e064      	b.n	8006ba4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d047      	beq.n	8006b72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f023 0219 	bic.w	r2, r3, #25
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	491a      	ldr	r1, [pc, #104]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fb faa4 	bl	8002040 <HAL_GetTick>
 8006af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006afc:	f7fb faa0 	bl	8002040 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e332      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b0e:	4b12      	ldr	r3, [pc, #72]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f0      	beq.n	8006afc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1a:	f7fb fa9d 	bl	8002058 <HAL_GetREVID>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d819      	bhi.n	8006b5c <HAL_RCC_OscConfig+0x28c>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b40      	cmp	r3, #64	@ 0x40
 8006b2e:	d108      	bne.n	8006b42 <HAL_RCC_OscConfig+0x272>
 8006b30:	4b09      	ldr	r3, [pc, #36]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006b38:	4a07      	ldr	r2, [pc, #28]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b3e:	6053      	str	r3, [r2, #4]
 8006b40:	e030      	b.n	8006ba4 <HAL_RCC_OscConfig+0x2d4>
 8006b42:	4b05      	ldr	r3, [pc, #20]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	031b      	lsls	r3, r3, #12
 8006b50:	4901      	ldr	r1, [pc, #4]	@ (8006b58 <HAL_RCC_OscConfig+0x288>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	604b      	str	r3, [r1, #4]
 8006b56:	e025      	b.n	8006ba4 <HAL_RCC_OscConfig+0x2d4>
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	4b9a      	ldr	r3, [pc, #616]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	4997      	ldr	r1, [pc, #604]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	604b      	str	r3, [r1, #4]
 8006b70:	e018      	b.n	8006ba4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b72:	4b95      	ldr	r3, [pc, #596]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a94      	ldr	r2, [pc, #592]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7e:	f7fb fa5f 	bl	8002040 <HAL_GetTick>
 8006b82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b86:	f7fb fa5b 	bl	8002040 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e2ed      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b98:	4b8b      	ldr	r3, [pc, #556]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1f0      	bne.n	8006b86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80a9 	beq.w	8006d04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bb2:	4b85      	ldr	r3, [pc, #532]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bbc:	4b82      	ldr	r3, [pc, #520]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d007      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x308>
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b18      	cmp	r3, #24
 8006bcc:	d13a      	bne.n	8006c44 <HAL_RCC_OscConfig+0x374>
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f003 0303 	and.w	r3, r3, #3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d135      	bne.n	8006c44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x320>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	2b80      	cmp	r3, #128	@ 0x80
 8006bea:	d001      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e2c1      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bf0:	f7fb fa32 	bl	8002058 <HAL_GetREVID>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d817      	bhi.n	8006c2e <HAL_RCC_OscConfig+0x35e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d108      	bne.n	8006c18 <HAL_RCC_OscConfig+0x348>
 8006c06:	4b70      	ldr	r3, [pc, #448]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c16:	e075      	b.n	8006d04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c18:	4b6b      	ldr	r3, [pc, #428]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	069b      	lsls	r3, r3, #26
 8006c26:	4968      	ldr	r1, [pc, #416]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c2c:	e06a      	b.n	8006d04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c2e:	4b66      	ldr	r3, [pc, #408]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	061b      	lsls	r3, r3, #24
 8006c3c:	4962      	ldr	r1, [pc, #392]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c42:	e05f      	b.n	8006d04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d042      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a5d      	ldr	r2, [pc, #372]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fb f9f2 	bl	8002040 <HAL_GetTick>
 8006c5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c60:	f7fb f9ee 	bl	8002040 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e280      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c72:	4b55      	ldr	r3, [pc, #340]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c7e:	f7fb f9eb 	bl	8002058 <HAL_GetREVID>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d817      	bhi.n	8006cbc <HAL_RCC_OscConfig+0x3ec>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d108      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x3d6>
 8006c94:	4b4c      	ldr	r3, [pc, #304]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ca2:	6053      	str	r3, [r2, #4]
 8006ca4:	e02e      	b.n	8006d04 <HAL_RCC_OscConfig+0x434>
 8006ca6:	4b48      	ldr	r3, [pc, #288]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	069b      	lsls	r3, r3, #26
 8006cb4:	4944      	ldr	r1, [pc, #272]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	604b      	str	r3, [r1, #4]
 8006cba:	e023      	b.n	8006d04 <HAL_RCC_OscConfig+0x434>
 8006cbc:	4b42      	ldr	r3, [pc, #264]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	061b      	lsls	r3, r3, #24
 8006cca:	493f      	ldr	r1, [pc, #252]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60cb      	str	r3, [r1, #12]
 8006cd0:	e018      	b.n	8006d04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a3c      	ldr	r2, [pc, #240]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006cd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cde:	f7fb f9af 	bl	8002040 <HAL_GetTick>
 8006ce2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ce6:	f7fb f9ab 	bl	8002040 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e23d      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cf8:	4b33      	ldr	r3, [pc, #204]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1f0      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d036      	beq.n	8006d7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d019      	beq.n	8006d4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d18:	4b2b      	ldr	r3, [pc, #172]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006d1e:	f043 0301 	orr.w	r3, r3, #1
 8006d22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d24:	f7fb f98c 	bl	8002040 <HAL_GetTick>
 8006d28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d2c:	f7fb f988 	bl	8002040 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e21a      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d3e:	4b22      	ldr	r3, [pc, #136]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0f0      	beq.n	8006d2c <HAL_RCC_OscConfig+0x45c>
 8006d4a:	e018      	b.n	8006d7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d50:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d58:	f7fb f972 	bl	8002040 <HAL_GetTick>
 8006d5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d60:	f7fb f96e 	bl	8002040 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e200      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d72:	4b15      	ldr	r3, [pc, #84]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f0      	bne.n	8006d60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d039      	beq.n	8006dfe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01c      	beq.n	8006dcc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d92:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006d98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d9e:	f7fb f94f 	bl	8002040 <HAL_GetTick>
 8006da2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006da4:	e008      	b.n	8006db8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006da6:	f7fb f94b 	bl	8002040 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e1dd      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006db8:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <HAL_RCC_OscConfig+0x4f8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0f0      	beq.n	8006da6 <HAL_RCC_OscConfig+0x4d6>
 8006dc4:	e01b      	b.n	8006dfe <HAL_RCC_OscConfig+0x52e>
 8006dc6:	bf00      	nop
 8006dc8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dcc:	4b9b      	ldr	r3, [pc, #620]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a9a      	ldr	r2, [pc, #616]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006dd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dd8:	f7fb f932 	bl	8002040 <HAL_GetTick>
 8006ddc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006de0:	f7fb f92e 	bl	8002040 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e1c0      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006df2:	4b92      	ldr	r3, [pc, #584]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f0      	bne.n	8006de0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8081 	beq.w	8006f0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e0c:	4b8c      	ldr	r3, [pc, #560]	@ (8007040 <HAL_RCC_OscConfig+0x770>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a8b      	ldr	r2, [pc, #556]	@ (8007040 <HAL_RCC_OscConfig+0x770>)
 8006e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e18:	f7fb f912 	bl	8002040 <HAL_GetTick>
 8006e1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e20:	f7fb f90e 	bl	8002040 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b64      	cmp	r3, #100	@ 0x64
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e1a0      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e32:	4b83      	ldr	r3, [pc, #524]	@ (8007040 <HAL_RCC_OscConfig+0x770>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f0      	beq.n	8006e20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d106      	bne.n	8006e54 <HAL_RCC_OscConfig+0x584>
 8006e46:	4b7d      	ldr	r3, [pc, #500]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e4c:	f043 0301 	orr.w	r3, r3, #1
 8006e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e52:	e02d      	b.n	8006eb0 <HAL_RCC_OscConfig+0x5e0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10c      	bne.n	8006e76 <HAL_RCC_OscConfig+0x5a6>
 8006e5c:	4b77      	ldr	r3, [pc, #476]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e60:	4a76      	ldr	r2, [pc, #472]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e68:	4b74      	ldr	r3, [pc, #464]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6c:	4a73      	ldr	r2, [pc, #460]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e6e:	f023 0304 	bic.w	r3, r3, #4
 8006e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e74:	e01c      	b.n	8006eb0 <HAL_RCC_OscConfig+0x5e0>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d10c      	bne.n	8006e98 <HAL_RCC_OscConfig+0x5c8>
 8006e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e82:	4a6e      	ldr	r2, [pc, #440]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e84:	f043 0304 	orr.w	r3, r3, #4
 8006e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e8a:	4b6c      	ldr	r3, [pc, #432]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e90:	f043 0301 	orr.w	r3, r3, #1
 8006e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e96:	e00b      	b.n	8006eb0 <HAL_RCC_OscConfig+0x5e0>
 8006e98:	4b68      	ldr	r3, [pc, #416]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e9c:	4a67      	ldr	r2, [pc, #412]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ea4:	4b65      	ldr	r3, [pc, #404]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea8:	4a64      	ldr	r2, [pc, #400]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006eaa:	f023 0304 	bic.w	r3, r3, #4
 8006eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d015      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb8:	f7fb f8c2 	bl	8002040 <HAL_GetTick>
 8006ebc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ebe:	e00a      	b.n	8006ed6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec0:	f7fb f8be 	bl	8002040 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e14e      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ed6:	4b59      	ldr	r3, [pc, #356]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0ee      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x5f0>
 8006ee2:	e014      	b.n	8006f0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee4:	f7fb f8ac 	bl	8002040 <HAL_GetTick>
 8006ee8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eea:	e00a      	b.n	8006f02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eec:	f7fb f8a8 	bl	8002040 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e138      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f02:	4b4e      	ldr	r3, [pc, #312]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1ee      	bne.n	8006eec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 812d 	beq.w	8007172 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f18:	4b48      	ldr	r3, [pc, #288]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f20:	2b18      	cmp	r3, #24
 8006f22:	f000 80bd 	beq.w	80070a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	f040 809e 	bne.w	800706c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f30:	4b42      	ldr	r3, [pc, #264]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a41      	ldr	r2, [pc, #260]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3c:	f7fb f880 	bl	8002040 <HAL_GetTick>
 8006f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f44:	f7fb f87c 	bl	8002040 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e10e      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f56:	4b39      	ldr	r3, [pc, #228]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f0      	bne.n	8006f44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f62:	4b36      	ldr	r3, [pc, #216]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006f64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f66:	4b37      	ldr	r3, [pc, #220]	@ (8007044 <HAL_RCC_OscConfig+0x774>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f72:	0112      	lsls	r2, r2, #4
 8006f74:	430a      	orrs	r2, r1
 8006f76:	4931      	ldr	r1, [pc, #196]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	3b01      	subs	r3, #1
 8006f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	025b      	lsls	r3, r3, #9
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f96:	3b01      	subs	r3, #1
 8006f98:	041b      	lsls	r3, r3, #16
 8006f9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	061b      	lsls	r3, r3, #24
 8006fa8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fac:	4923      	ldr	r1, [pc, #140]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006fb2:	4b22      	ldr	r3, [pc, #136]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb6:	4a21      	ldr	r2, [pc, #132]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006fb8:	f023 0301 	bic.w	r3, r3, #1
 8006fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fc2:	4b21      	ldr	r3, [pc, #132]	@ (8007048 <HAL_RCC_OscConfig+0x778>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006fca:	00d2      	lsls	r2, r2, #3
 8006fcc:	491b      	ldr	r1, [pc, #108]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd6:	f023 020c 	bic.w	r2, r3, #12
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fde:	4917      	ldr	r1, [pc, #92]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fe4:	4b15      	ldr	r3, [pc, #84]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe8:	f023 0202 	bic.w	r2, r3, #2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff0:	4912      	ldr	r1, [pc, #72]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ff6:	4b11      	ldr	r3, [pc, #68]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffa:	4a10      	ldr	r2, [pc, #64]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8006ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007002:	4b0e      	ldr	r3, [pc, #56]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	4a0d      	ldr	r2, [pc, #52]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8007008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800700c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800700e:	4b0b      	ldr	r3, [pc, #44]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	4a0a      	ldr	r2, [pc, #40]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8007014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007018:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800701a:	4b08      	ldr	r3, [pc, #32]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	4a07      	ldr	r2, [pc, #28]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8007020:	f043 0301 	orr.w	r3, r3, #1
 8007024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007026:	4b05      	ldr	r3, [pc, #20]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a04      	ldr	r2, [pc, #16]	@ (800703c <HAL_RCC_OscConfig+0x76c>)
 800702c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007032:	f7fb f805 	bl	8002040 <HAL_GetTick>
 8007036:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007038:	e011      	b.n	800705e <HAL_RCC_OscConfig+0x78e>
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
 8007040:	58024800 	.word	0x58024800
 8007044:	fffffc0c 	.word	0xfffffc0c
 8007048:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800704c:	f7fa fff8 	bl	8002040 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e08a      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800705e:	4b47      	ldr	r3, [pc, #284]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCC_OscConfig+0x77c>
 800706a:	e082      	b.n	8007172 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800706c:	4b43      	ldr	r3, [pc, #268]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a42      	ldr	r2, [pc, #264]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 8007072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007078:	f7fa ffe2 	bl	8002040 <HAL_GetTick>
 800707c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007080:	f7fa ffde 	bl	8002040 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e070      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007092:	4b3a      	ldr	r3, [pc, #232]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1f0      	bne.n	8007080 <HAL_RCC_OscConfig+0x7b0>
 800709e:	e068      	b.n	8007172 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80070a0:	4b36      	ldr	r3, [pc, #216]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070a6:	4b35      	ldr	r3, [pc, #212]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d031      	beq.n	8007118 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f003 0203 	and.w	r2, r3, #3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070be:	429a      	cmp	r2, r3
 80070c0:	d12a      	bne.n	8007118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	091b      	lsrs	r3, r3, #4
 80070c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d122      	bne.n	8007118 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070de:	429a      	cmp	r2, r3
 80070e0:	d11a      	bne.n	8007118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	0a5b      	lsrs	r3, r3, #9
 80070e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d111      	bne.n	8007118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	0c1b      	lsrs	r3, r3, #16
 80070f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007102:	429a      	cmp	r2, r3
 8007104:	d108      	bne.n	8007118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	0e1b      	lsrs	r3, r3, #24
 800710a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007114:	429a      	cmp	r2, r3
 8007116:	d001      	beq.n	800711c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e02b      	b.n	8007174 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800711c:	4b17      	ldr	r3, [pc, #92]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 800711e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007120:	08db      	lsrs	r3, r3, #3
 8007122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007126:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	d01f      	beq.n	8007172 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007132:	4b12      	ldr	r3, [pc, #72]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	4a11      	ldr	r2, [pc, #68]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800713e:	f7fa ff7f 	bl	8002040 <HAL_GetTick>
 8007142:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007144:	bf00      	nop
 8007146:	f7fa ff7b 	bl	8002040 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	4293      	cmp	r3, r2
 8007150:	d0f9      	beq.n	8007146 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007152:	4b0a      	ldr	r3, [pc, #40]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 8007154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007156:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <HAL_RCC_OscConfig+0x8b0>)
 8007158:	4013      	ands	r3, r2
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800715e:	00d2      	lsls	r2, r2, #3
 8007160:	4906      	ldr	r1, [pc, #24]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 8007162:	4313      	orrs	r3, r2
 8007164:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007166:	4b05      	ldr	r3, [pc, #20]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 8007168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716a:	4a04      	ldr	r2, [pc, #16]	@ (800717c <HAL_RCC_OscConfig+0x8ac>)
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3730      	adds	r7, #48	@ 0x30
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	58024400 	.word	0x58024400
 8007180:	ffff0007 	.word	0xffff0007

08007184 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e19c      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007198:	4b8a      	ldr	r3, [pc, #552]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d910      	bls.n	80071c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a6:	4b87      	ldr	r3, [pc, #540]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 020f 	bic.w	r2, r3, #15
 80071ae:	4985      	ldr	r1, [pc, #532]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b6:	4b83      	ldr	r3, [pc, #524]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d001      	beq.n	80071c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e184      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d010      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	4b7b      	ldr	r3, [pc, #492]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d908      	bls.n	80071f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071e4:	4b78      	ldr	r3, [pc, #480]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	4975      	ldr	r1, [pc, #468]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d010      	beq.n	8007224 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	4b70      	ldr	r3, [pc, #448]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800720e:	429a      	cmp	r2, r3
 8007210:	d908      	bls.n	8007224 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007212:	4b6d      	ldr	r3, [pc, #436]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	496a      	ldr	r1, [pc, #424]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007220:	4313      	orrs	r3, r2
 8007222:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	d010      	beq.n	8007252 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	4b64      	ldr	r3, [pc, #400]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800723c:	429a      	cmp	r2, r3
 800723e:	d908      	bls.n	8007252 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007240:	4b61      	ldr	r3, [pc, #388]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	495e      	ldr	r1, [pc, #376]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 800724e:	4313      	orrs	r3, r2
 8007250:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d010      	beq.n	8007280 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69da      	ldr	r2, [r3, #28]
 8007262:	4b59      	ldr	r3, [pc, #356]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800726a:	429a      	cmp	r2, r3
 800726c:	d908      	bls.n	8007280 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800726e:	4b56      	ldr	r3, [pc, #344]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	4953      	ldr	r1, [pc, #332]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 800727c:	4313      	orrs	r3, r2
 800727e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d010      	beq.n	80072ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	4b4d      	ldr	r3, [pc, #308]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	429a      	cmp	r2, r3
 800729a:	d908      	bls.n	80072ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800729c:	4b4a      	ldr	r3, [pc, #296]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	f023 020f 	bic.w	r2, r3, #15
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	4947      	ldr	r1, [pc, #284]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d055      	beq.n	8007366 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072ba:	4b43      	ldr	r3, [pc, #268]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	4940      	ldr	r1, [pc, #256]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d107      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072d4:	4b3c      	ldr	r3, [pc, #240]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d121      	bne.n	8007324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e0f6      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d107      	bne.n	80072fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072ec:	4b36      	ldr	r3, [pc, #216]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d115      	bne.n	8007324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0ea      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d107      	bne.n	8007314 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007304:	4b30      	ldr	r3, [pc, #192]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d109      	bne.n	8007324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e0de      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007314:	4b2c      	ldr	r3, [pc, #176]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e0d6      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007324:	4b28      	ldr	r3, [pc, #160]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f023 0207 	bic.w	r2, r3, #7
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4925      	ldr	r1, [pc, #148]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007332:	4313      	orrs	r3, r2
 8007334:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007336:	f7fa fe83 	bl	8002040 <HAL_GetTick>
 800733a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800733c:	e00a      	b.n	8007354 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800733e:	f7fa fe7f 	bl	8002040 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800734c:	4293      	cmp	r3, r2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e0be      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007354:	4b1c      	ldr	r3, [pc, #112]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	429a      	cmp	r2, r3
 8007364:	d1eb      	bne.n	800733e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d010      	beq.n	8007394 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	4b14      	ldr	r3, [pc, #80]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	429a      	cmp	r2, r3
 8007380:	d208      	bcs.n	8007394 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007382:	4b11      	ldr	r3, [pc, #68]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	f023 020f 	bic.w	r2, r3, #15
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	490e      	ldr	r1, [pc, #56]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007390:	4313      	orrs	r3, r2
 8007392:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007394:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d214      	bcs.n	80073cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073a2:	4b08      	ldr	r3, [pc, #32]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f023 020f 	bic.w	r2, r3, #15
 80073aa:	4906      	ldr	r1, [pc, #24]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b2:	4b04      	ldr	r3, [pc, #16]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 030f 	and.w	r3, r3, #15
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d005      	beq.n	80073cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e086      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
 80073c4:	52002000 	.word	0x52002000
 80073c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d010      	beq.n	80073fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	4b3f      	ldr	r3, [pc, #252]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d208      	bcs.n	80073fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073e8:	4b3c      	ldr	r3, [pc, #240]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	4939      	ldr	r1, [pc, #228]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d010      	beq.n	8007428 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	4b34      	ldr	r3, [pc, #208]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007412:	429a      	cmp	r2, r3
 8007414:	d208      	bcs.n	8007428 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007416:	4b31      	ldr	r3, [pc, #196]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	492e      	ldr	r1, [pc, #184]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007424:	4313      	orrs	r3, r2
 8007426:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699a      	ldr	r2, [r3, #24]
 8007438:	4b28      	ldr	r3, [pc, #160]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007440:	429a      	cmp	r2, r3
 8007442:	d208      	bcs.n	8007456 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007444:	4b25      	ldr	r3, [pc, #148]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	4922      	ldr	r1, [pc, #136]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007452:	4313      	orrs	r3, r2
 8007454:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d010      	beq.n	8007484 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69da      	ldr	r2, [r3, #28]
 8007466:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800746e:	429a      	cmp	r2, r3
 8007470:	d208      	bcs.n	8007484 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007472:	4b1a      	ldr	r3, [pc, #104]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	4917      	ldr	r1, [pc, #92]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007480:	4313      	orrs	r3, r2
 8007482:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007484:	f000 f834 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 8007488:	4602      	mov	r2, r0
 800748a:	4b14      	ldr	r3, [pc, #80]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	0a1b      	lsrs	r3, r3, #8
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	4912      	ldr	r1, [pc, #72]	@ (80074e0 <HAL_RCC_ClockConfig+0x35c>)
 8007496:	5ccb      	ldrb	r3, [r1, r3]
 8007498:	f003 031f 	and.w	r3, r3, #31
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
 80074a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074a2:	4b0e      	ldr	r3, [pc, #56]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f003 030f 	and.w	r3, r3, #15
 80074aa:	4a0d      	ldr	r2, [pc, #52]	@ (80074e0 <HAL_RCC_ClockConfig+0x35c>)
 80074ac:	5cd3      	ldrb	r3, [r2, r3]
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	4a0a      	ldr	r2, [pc, #40]	@ (80074e4 <HAL_RCC_ClockConfig+0x360>)
 80074ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074bc:	4a0a      	ldr	r2, [pc, #40]	@ (80074e8 <HAL_RCC_ClockConfig+0x364>)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80074c2:	4b0a      	ldr	r3, [pc, #40]	@ (80074ec <HAL_RCC_ClockConfig+0x368>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7f9 fe1e 	bl	8001108 <HAL_InitTick>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
 80074e0:	08014008 	.word	0x08014008
 80074e4:	24000004 	.word	0x24000004
 80074e8:	24000000 	.word	0x24000000
 80074ec:	24000008 	.word	0x24000008

080074f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b089      	sub	sp, #36	@ 0x24
 80074f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074f6:	4bb3      	ldr	r3, [pc, #716]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074fe:	2b18      	cmp	r3, #24
 8007500:	f200 8155 	bhi.w	80077ae <HAL_RCC_GetSysClockFreq+0x2be>
 8007504:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007571 	.word	0x08007571
 8007510:	080077af 	.word	0x080077af
 8007514:	080077af 	.word	0x080077af
 8007518:	080077af 	.word	0x080077af
 800751c:	080077af 	.word	0x080077af
 8007520:	080077af 	.word	0x080077af
 8007524:	080077af 	.word	0x080077af
 8007528:	080077af 	.word	0x080077af
 800752c:	08007597 	.word	0x08007597
 8007530:	080077af 	.word	0x080077af
 8007534:	080077af 	.word	0x080077af
 8007538:	080077af 	.word	0x080077af
 800753c:	080077af 	.word	0x080077af
 8007540:	080077af 	.word	0x080077af
 8007544:	080077af 	.word	0x080077af
 8007548:	080077af 	.word	0x080077af
 800754c:	0800759d 	.word	0x0800759d
 8007550:	080077af 	.word	0x080077af
 8007554:	080077af 	.word	0x080077af
 8007558:	080077af 	.word	0x080077af
 800755c:	080077af 	.word	0x080077af
 8007560:	080077af 	.word	0x080077af
 8007564:	080077af 	.word	0x080077af
 8007568:	080077af 	.word	0x080077af
 800756c:	080075a3 	.word	0x080075a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007570:	4b94      	ldr	r3, [pc, #592]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d009      	beq.n	8007590 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800757c:	4b91      	ldr	r3, [pc, #580]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	08db      	lsrs	r3, r3, #3
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	4a90      	ldr	r2, [pc, #576]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800758e:	e111      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007590:	4b8d      	ldr	r3, [pc, #564]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007592:	61bb      	str	r3, [r7, #24]
      break;
 8007594:	e10e      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007596:	4b8d      	ldr	r3, [pc, #564]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007598:	61bb      	str	r3, [r7, #24]
      break;
 800759a:	e10b      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800759c:	4b8c      	ldr	r3, [pc, #560]	@ (80077d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800759e:	61bb      	str	r3, [r7, #24]
      break;
 80075a0:	e108      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075a2:	4b88      	ldr	r3, [pc, #544]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80075ac:	4b85      	ldr	r3, [pc, #532]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b0:	091b      	lsrs	r3, r3, #4
 80075b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075b8:	4b82      	ldr	r3, [pc, #520]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075c2:	4b80      	ldr	r3, [pc, #512]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c6:	08db      	lsrs	r3, r3, #3
 80075c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 80e1 	beq.w	80077a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	f000 8083 	beq.w	80076f4 <HAL_RCC_GetSysClockFreq+0x204>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	f200 80a1 	bhi.w	8007738 <HAL_RCC_GetSysClockFreq+0x248>
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_RCC_GetSysClockFreq+0x114>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d056      	beq.n	80076b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007602:	e099      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007604:	4b6f      	ldr	r3, [pc, #444]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d02d      	beq.n	800766c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007610:	4b6c      	ldr	r3, [pc, #432]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	08db      	lsrs	r3, r3, #3
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	4a6b      	ldr	r2, [pc, #428]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800761c:	fa22 f303 	lsr.w	r3, r2, r3
 8007620:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763a:	4b62      	ldr	r3, [pc, #392]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764a:	ed97 6a02 	vldr	s12, [r7, #8]
 800764e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800765e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007666:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800766a:	e087      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80077d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800767a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767e:	4b51      	ldr	r3, [pc, #324]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007692:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076ae:	e065      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80077dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80076be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c2:	4b40      	ldr	r3, [pc, #256]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80076d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076f2:	e043      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80077e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007706:	4b2f      	ldr	r3, [pc, #188]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007716:	ed97 6a02 	vldr	s12, [r7, #8]
 800771a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800771e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800772a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007732:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007736:	e021      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007742:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80077dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774a:	4b1e      	ldr	r3, [pc, #120]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775a:	ed97 6a02 	vldr	s12, [r7, #8]
 800775e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800776e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007776:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800777a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800777c:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007780:	0a5b      	lsrs	r3, r3, #9
 8007782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007786:	3301      	adds	r3, #1
 8007788:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007794:	edd7 6a07 	vldr	s13, [r7, #28]
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a0:	ee17 3a90 	vmov	r3, s15
 80077a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80077a6:	e005      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61bb      	str	r3, [r7, #24]
      break;
 80077ac:	e002      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80077ae:	4b07      	ldr	r3, [pc, #28]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077b0:	61bb      	str	r3, [r7, #24]
      break;
 80077b2:	bf00      	nop
  }

  return sysclockfreq;
 80077b4:	69bb      	ldr	r3, [r7, #24]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3724      	adds	r7, #36	@ 0x24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	58024400 	.word	0x58024400
 80077c8:	03d09000 	.word	0x03d09000
 80077cc:	003d0900 	.word	0x003d0900
 80077d0:	007a1200 	.word	0x007a1200
 80077d4:	46000000 	.word	0x46000000
 80077d8:	4c742400 	.word	0x4c742400
 80077dc:	4a742400 	.word	0x4a742400
 80077e0:	4af42400 	.word	0x4af42400

080077e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077ea:	f7ff fe81 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 80077ee:	4602      	mov	r2, r0
 80077f0:	4b10      	ldr	r3, [pc, #64]	@ (8007834 <HAL_RCC_GetHCLKFreq+0x50>)
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	0a1b      	lsrs	r3, r3, #8
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	490f      	ldr	r1, [pc, #60]	@ (8007838 <HAL_RCC_GetHCLKFreq+0x54>)
 80077fc:	5ccb      	ldrb	r3, [r1, r3]
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	fa22 f303 	lsr.w	r3, r2, r3
 8007806:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007808:	4b0a      	ldr	r3, [pc, #40]	@ (8007834 <HAL_RCC_GetHCLKFreq+0x50>)
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	4a09      	ldr	r2, [pc, #36]	@ (8007838 <HAL_RCC_GetHCLKFreq+0x54>)
 8007812:	5cd3      	ldrb	r3, [r2, r3]
 8007814:	f003 031f 	and.w	r3, r3, #31
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	fa22 f303 	lsr.w	r3, r2, r3
 800781e:	4a07      	ldr	r2, [pc, #28]	@ (800783c <HAL_RCC_GetHCLKFreq+0x58>)
 8007820:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007822:	4a07      	ldr	r2, [pc, #28]	@ (8007840 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007828:	4b04      	ldr	r3, [pc, #16]	@ (800783c <HAL_RCC_GetHCLKFreq+0x58>)
 800782a:	681b      	ldr	r3, [r3, #0]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	58024400 	.word	0x58024400
 8007838:	08014008 	.word	0x08014008
 800783c:	24000004 	.word	0x24000004
 8007840:	24000000 	.word	0x24000000

08007844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007848:	f7ff ffcc 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 800784c:	4602      	mov	r2, r0
 800784e:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	091b      	lsrs	r3, r3, #4
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	4904      	ldr	r1, [pc, #16]	@ (800786c <HAL_RCC_GetPCLK1Freq+0x28>)
 800785a:	5ccb      	ldrb	r3, [r1, r3]
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	58024400 	.word	0x58024400
 800786c:	08014008 	.word	0x08014008

08007870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007874:	f7ff ffb6 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 8007878:	4602      	mov	r2, r0
 800787a:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	0a1b      	lsrs	r3, r3, #8
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	4904      	ldr	r1, [pc, #16]	@ (8007898 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007886:	5ccb      	ldrb	r3, [r1, r3]
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007890:	4618      	mov	r0, r3
 8007892:	bd80      	pop	{r7, pc}
 8007894:	58024400 	.word	0x58024400
 8007898:	08014008 	.word	0x08014008

0800789c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	223f      	movs	r2, #63	@ 0x3f
 80078aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007918 <HAL_RCC_GetClockConfig+0x7c>)
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	f003 0207 	and.w	r2, r3, #7
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80078b8:	4b17      	ldr	r3, [pc, #92]	@ (8007918 <HAL_RCC_GetClockConfig+0x7c>)
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80078c4:	4b14      	ldr	r3, [pc, #80]	@ (8007918 <HAL_RCC_GetClockConfig+0x7c>)
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	f003 020f 	and.w	r2, r3, #15
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80078d0:	4b11      	ldr	r3, [pc, #68]	@ (8007918 <HAL_RCC_GetClockConfig+0x7c>)
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80078dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007918 <HAL_RCC_GetClockConfig+0x7c>)
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80078e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007918 <HAL_RCC_GetClockConfig+0x7c>)
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80078f4:	4b08      	ldr	r3, [pc, #32]	@ (8007918 <HAL_RCC_GetClockConfig+0x7c>)
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007900:	4b06      	ldr	r3, [pc, #24]	@ (800791c <HAL_RCC_GetClockConfig+0x80>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 020f 	and.w	r2, r3, #15
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	601a      	str	r2, [r3, #0]
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	58024400 	.word	0x58024400
 800791c:	52002000 	.word	0x52002000

08007920 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007924:	b0ca      	sub	sp, #296	@ 0x128
 8007926:	af00      	add	r7, sp, #0
 8007928:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800792c:	2300      	movs	r3, #0
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007932:	2300      	movs	r3, #0
 8007934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007944:	2500      	movs	r5, #0
 8007946:	ea54 0305 	orrs.w	r3, r4, r5
 800794a:	d049      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007952:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007956:	d02f      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007958:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800795c:	d828      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800795e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007962:	d01a      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007964:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007968:	d822      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800796e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007972:	d007      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007974:	e01c      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007976:	4bb8      	ldr	r3, [pc, #736]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797a:	4ab7      	ldr	r2, [pc, #732]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800797c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007980:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007982:	e01a      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007988:	3308      	adds	r3, #8
 800798a:	2102      	movs	r1, #2
 800798c:	4618      	mov	r0, r3
 800798e:	f002 fb61 	bl	800a054 <RCCEx_PLL2_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007998:	e00f      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799e:	3328      	adds	r3, #40	@ 0x28
 80079a0:	2102      	movs	r1, #2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f002 fc08 	bl	800a1b8 <RCCEx_PLL3_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079ae:	e004      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079b6:	e000      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80079b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80079c2:	4ba5      	ldr	r3, [pc, #660]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079d0:	4aa1      	ldr	r2, [pc, #644]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079d2:	430b      	orrs	r3, r1
 80079d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80079d6:	e003      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80079ec:	f04f 0900 	mov.w	r9, #0
 80079f0:	ea58 0309 	orrs.w	r3, r8, r9
 80079f4:	d047      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d82a      	bhi.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007a00:	a201      	add	r2, pc, #4	@ (adr r2, 8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a1d 	.word	0x08007a1d
 8007a0c:	08007a2b 	.word	0x08007a2b
 8007a10:	08007a41 	.word	0x08007a41
 8007a14:	08007a5f 	.word	0x08007a5f
 8007a18:	08007a5f 	.word	0x08007a5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a1c:	4b8e      	ldr	r3, [pc, #568]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a20:	4a8d      	ldr	r2, [pc, #564]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a28:	e01a      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2e:	3308      	adds	r3, #8
 8007a30:	2100      	movs	r1, #0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f002 fb0e 	bl	800a054 <RCCEx_PLL2_Config>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a3e:	e00f      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a44:	3328      	adds	r3, #40	@ 0x28
 8007a46:	2100      	movs	r1, #0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f002 fbb5 	bl	800a1b8 <RCCEx_PLL3_Config>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a54:	e004      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a5c:	e000      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a68:	4b7b      	ldr	r3, [pc, #492]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a6c:	f023 0107 	bic.w	r1, r3, #7
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a76:	4a78      	ldr	r2, [pc, #480]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a7c:	e003      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007a92:	f04f 0b00 	mov.w	fp, #0
 8007a96:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a9a:	d04c      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aa6:	d030      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aac:	d829      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ab0:	d02d      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ab2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ab4:	d825      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ab6:	2b80      	cmp	r3, #128	@ 0x80
 8007ab8:	d018      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007aba:	2b80      	cmp	r3, #128	@ 0x80
 8007abc:	d821      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007ac2:	2b40      	cmp	r3, #64	@ 0x40
 8007ac4:	d007      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007ac6:	e01c      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac8:	4b63      	ldr	r3, [pc, #396]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007acc:	4a62      	ldr	r2, [pc, #392]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ad4:	e01c      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ada:	3308      	adds	r3, #8
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f002 fab8 	bl	800a054 <RCCEx_PLL2_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007aea:	e011      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af0:	3328      	adds	r3, #40	@ 0x28
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f002 fb5f 	bl	800a1b8 <RCCEx_PLL3_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b00:	e006      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b08:	e002      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b0a:	bf00      	nop
 8007b0c:	e000      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b18:	4b4f      	ldr	r3, [pc, #316]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b26:	4a4c      	ldr	r2, [pc, #304]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b2c:	e003      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007b42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007b46:	2300      	movs	r3, #0
 8007b48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007b4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d053      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b62:	d035      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007b64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b68:	d82e      	bhi.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007b6e:	d031      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007b70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007b74:	d828      	bhi.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b7a:	d01a      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007b7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b80:	d822      	bhi.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b8a:	d007      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007b8c:	e01c      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8e:	4b32      	ldr	r3, [pc, #200]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b92:	4a31      	ldr	r2, [pc, #196]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b9a:	e01c      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f002 fa55 	bl	800a054 <RCCEx_PLL2_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007bb0:	e011      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	3328      	adds	r3, #40	@ 0x28
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f002 fafc 	bl	800a1b8 <RCCEx_PLL3_Config>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bc6:	e006      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bce:	e002      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007bd0:	bf00      	nop
 8007bd2:	e000      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10b      	bne.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bde:	4b1e      	ldr	r3, [pc, #120]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007bee:	4a1a      	ldr	r2, [pc, #104]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bf4:	e003      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007c0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007c14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	d056      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c2a:	d038      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007c2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c30:	d831      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c36:	d034      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007c38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c3c:	d82b      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c42:	d01d      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007c44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c48:	d825      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d006      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c52:	d00a      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007c54:	e01f      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c56:	bf00      	nop
 8007c58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5c:	4ba2      	ldr	r3, [pc, #648]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c60:	4aa1      	ldr	r2, [pc, #644]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c68:	e01c      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6e:	3308      	adds	r3, #8
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f002 f9ee 	bl	800a054 <RCCEx_PLL2_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c7e:	e011      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c84:	3328      	adds	r3, #40	@ 0x28
 8007c86:	2100      	movs	r1, #0
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f002 fa95 	bl	800a1b8 <RCCEx_PLL3_Config>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c94:	e006      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c9c:	e002      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c9e:	bf00      	nop
 8007ca0:	e000      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10b      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007cac:	4b8e      	ldr	r3, [pc, #568]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007cbc:	4a8a      	ldr	r2, [pc, #552]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cbe:	430b      	orrs	r3, r1
 8007cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cc2:	e003      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007ce2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	d03a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cf2:	2b30      	cmp	r3, #48	@ 0x30
 8007cf4:	d01f      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007cf6:	2b30      	cmp	r3, #48	@ 0x30
 8007cf8:	d819      	bhi.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d00c      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d815      	bhi.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d019      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007d06:	2b10      	cmp	r3, #16
 8007d08:	d111      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d0a:	4b77      	ldr	r3, [pc, #476]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0e:	4a76      	ldr	r2, [pc, #472]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d16:	e011      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	2102      	movs	r1, #2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f002 f997 	bl	800a054 <RCCEx_PLL2_Config>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d2c:	e006      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d34:	e002      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d36:	bf00      	nop
 8007d38:	e000      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d44:	4b68      	ldr	r3, [pc, #416]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d52:	4a65      	ldr	r2, [pc, #404]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d54:	430b      	orrs	r3, r1
 8007d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d58:	e003      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d72:	2300      	movs	r3, #0
 8007d74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	d051      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d8c:	d035      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007d8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d92:	d82e      	bhi.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d98:	d031      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007d9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d9e:	d828      	bhi.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da4:	d01a      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007daa:	d822      	bhi.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db4:	d007      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007db6:	e01c      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db8:	4b4b      	ldr	r3, [pc, #300]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007dc4:	e01c      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dca:	3308      	adds	r3, #8
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f002 f940 	bl	800a054 <RCCEx_PLL2_Config>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007dda:	e011      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de0:	3328      	adds	r3, #40	@ 0x28
 8007de2:	2100      	movs	r1, #0
 8007de4:	4618      	mov	r0, r3
 8007de6:	f002 f9e7 	bl	800a1b8 <RCCEx_PLL3_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007df0:	e006      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007df8:	e002      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007dfa:	bf00      	nop
 8007dfc:	e000      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e08:	4b37      	ldr	r3, [pc, #220]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e16:	4a34      	ldr	r2, [pc, #208]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e18:	430b      	orrs	r3, r1
 8007e1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e1c:	e003      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007e32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e36:	2300      	movs	r3, #0
 8007e38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007e40:	460b      	mov	r3, r1
 8007e42:	4313      	orrs	r3, r2
 8007e44:	d056      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e50:	d033      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007e52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e56:	d82c      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e5c:	d02f      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007e5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e62:	d826      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e68:	d02b      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007e6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e6e:	d820      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e74:	d012      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007e76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e7a:	d81a      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d022      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e84:	d115      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f002 f8e0 	bl	800a054 <RCCEx_PLL2_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e9a:	e015      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea0:	3328      	adds	r3, #40	@ 0x28
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f002 f987 	bl	800a1b8 <RCCEx_PLL3_Config>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007eb0:	e00a      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eb8:	e006      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007eba:	bf00      	nop
 8007ebc:	e004      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ebe:	bf00      	nop
 8007ec0:	e002      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ec2:	bf00      	nop
 8007ec4:	e000      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10d      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ed0:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ede:	4a02      	ldr	r2, [pc, #8]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ee4:	e006      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ee6:	bf00      	nop
 8007ee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f04:	2300      	movs	r3, #0
 8007f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f0a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4313      	orrs	r3, r2
 8007f12:	d055      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f20:	d033      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f26:	d82c      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f2c:	d02f      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f32:	d826      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f38:	d02b      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007f3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f3e:	d820      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f44:	d012      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f4a:	d81a      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d022      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f54:	d115      	bne.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f002 f878 	bl	800a054 <RCCEx_PLL2_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f6a:	e015      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f70:	3328      	adds	r3, #40	@ 0x28
 8007f72:	2101      	movs	r1, #1
 8007f74:	4618      	mov	r0, r3
 8007f76:	f002 f91f 	bl	800a1b8 <RCCEx_PLL3_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f80:	e00a      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f88:	e006      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f8a:	bf00      	nop
 8007f8c:	e004      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f8e:	bf00      	nop
 8007f90:	e002      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f92:	bf00      	nop
 8007f94:	e000      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10b      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007fa0:	4ba3      	ldr	r3, [pc, #652]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fb0:	4a9f      	ldr	r2, [pc, #636]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fb6:	e003      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	d037      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fea:	d00e      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ff0:	d816      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d018      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007ff6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ffa:	d111      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008000:	4a8b      	ldr	r2, [pc, #556]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008008:	e00f      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800e:	3308      	adds	r3, #8
 8008010:	2101      	movs	r1, #1
 8008012:	4618      	mov	r0, r3
 8008014:	f002 f81e 	bl	800a054 <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800801e:	e004      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008026:	e000      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008032:	4b7f      	ldr	r3, [pc, #508]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008036:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008040:	4a7b      	ldr	r2, [pc, #492]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008042:	430b      	orrs	r3, r1
 8008044:	6513      	str	r3, [r2, #80]	@ 0x50
 8008046:	e003      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800804c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800805c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008060:	2300      	movs	r3, #0
 8008062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008066:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800806a:	460b      	mov	r3, r1
 800806c:	4313      	orrs	r3, r2
 800806e:	d039      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008076:	2b03      	cmp	r3, #3
 8008078:	d81c      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800807a:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	080080bd 	.word	0x080080bd
 8008084:	08008091 	.word	0x08008091
 8008088:	0800809f 	.word	0x0800809f
 800808c:	080080bd 	.word	0x080080bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008090:	4b67      	ldr	r3, [pc, #412]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008094:	4a66      	ldr	r2, [pc, #408]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800809a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800809c:	e00f      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a2:	3308      	adds	r3, #8
 80080a4:	2102      	movs	r1, #2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f001 ffd4 	bl	800a054 <RCCEx_PLL2_Config>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80080b2:	e004      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ba:	e000      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80080bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10a      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080c6:	4b5a      	ldr	r3, [pc, #360]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ca:	f023 0103 	bic.w	r1, r3, #3
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d4:	4a56      	ldr	r2, [pc, #344]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080da:	e003      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80080f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080f4:	2300      	movs	r3, #0
 80080f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80080fe:	460b      	mov	r3, r1
 8008100:	4313      	orrs	r3, r2
 8008102:	f000 809f 	beq.w	8008244 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008106:	4b4b      	ldr	r3, [pc, #300]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a4a      	ldr	r2, [pc, #296]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800810c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008110:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008112:	f7f9 ff95 	bl	8002040 <HAL_GetTick>
 8008116:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800811a:	e00b      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800811c:	f7f9 ff90 	bl	8002040 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	2b64      	cmp	r3, #100	@ 0x64
 800812a:	d903      	bls.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008132:	e005      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008134:	4b3f      	ldr	r3, [pc, #252]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0ed      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008144:	2b00      	cmp	r3, #0
 8008146:	d179      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008148:	4b39      	ldr	r3, [pc, #228]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008150:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008154:	4053      	eors	r3, r2
 8008156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800815a:	2b00      	cmp	r3, #0
 800815c:	d015      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800815e:	4b34      	ldr	r3, [pc, #208]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008166:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800816a:	4b31      	ldr	r3, [pc, #196]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800816c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800816e:	4a30      	ldr	r2, [pc, #192]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008174:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008176:	4b2e      	ldr	r3, [pc, #184]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800817a:	4a2d      	ldr	r2, [pc, #180]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800817c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008180:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008182:	4a2b      	ldr	r2, [pc, #172]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008188:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008196:	d118      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008198:	f7f9 ff52 	bl	8002040 <HAL_GetTick>
 800819c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081a0:	e00d      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081a2:	f7f9 ff4d 	bl	8002040 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80081ac:	1ad2      	subs	r2, r2, r3
 80081ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d903      	bls.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80081bc:	e005      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081be:	4b1c      	ldr	r3, [pc, #112]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0eb      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80081ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d129      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081e2:	d10e      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80081e4:	4b12      	ldr	r3, [pc, #72]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081f4:	091a      	lsrs	r2, r3, #4
 80081f6:	4b10      	ldr	r3, [pc, #64]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6113      	str	r3, [r2, #16]
 8008200:	e005      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008202:	4b0b      	ldr	r3, [pc, #44]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	4a0a      	ldr	r2, [pc, #40]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008208:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800820c:	6113      	str	r3, [r2, #16]
 800820e:	4b08      	ldr	r3, [pc, #32]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008210:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800821a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800821e:	4a04      	ldr	r2, [pc, #16]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008220:	430b      	orrs	r3, r1
 8008222:	6713      	str	r3, [r2, #112]	@ 0x70
 8008224:	e00e      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800822a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800822e:	e009      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008230:	58024400 	.word	0x58024400
 8008234:	58024800 	.word	0x58024800
 8008238:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008240:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f002 0301 	and.w	r3, r2, #1
 8008250:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008254:	2300      	movs	r3, #0
 8008256:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800825a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800825e:	460b      	mov	r3, r1
 8008260:	4313      	orrs	r3, r2
 8008262:	f000 8089 	beq.w	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800826c:	2b28      	cmp	r3, #40	@ 0x28
 800826e:	d86b      	bhi.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008270:	a201      	add	r2, pc, #4	@ (adr r2, 8008278 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	08008351 	.word	0x08008351
 800827c:	08008349 	.word	0x08008349
 8008280:	08008349 	.word	0x08008349
 8008284:	08008349 	.word	0x08008349
 8008288:	08008349 	.word	0x08008349
 800828c:	08008349 	.word	0x08008349
 8008290:	08008349 	.word	0x08008349
 8008294:	08008349 	.word	0x08008349
 8008298:	0800831d 	.word	0x0800831d
 800829c:	08008349 	.word	0x08008349
 80082a0:	08008349 	.word	0x08008349
 80082a4:	08008349 	.word	0x08008349
 80082a8:	08008349 	.word	0x08008349
 80082ac:	08008349 	.word	0x08008349
 80082b0:	08008349 	.word	0x08008349
 80082b4:	08008349 	.word	0x08008349
 80082b8:	08008333 	.word	0x08008333
 80082bc:	08008349 	.word	0x08008349
 80082c0:	08008349 	.word	0x08008349
 80082c4:	08008349 	.word	0x08008349
 80082c8:	08008349 	.word	0x08008349
 80082cc:	08008349 	.word	0x08008349
 80082d0:	08008349 	.word	0x08008349
 80082d4:	08008349 	.word	0x08008349
 80082d8:	08008351 	.word	0x08008351
 80082dc:	08008349 	.word	0x08008349
 80082e0:	08008349 	.word	0x08008349
 80082e4:	08008349 	.word	0x08008349
 80082e8:	08008349 	.word	0x08008349
 80082ec:	08008349 	.word	0x08008349
 80082f0:	08008349 	.word	0x08008349
 80082f4:	08008349 	.word	0x08008349
 80082f8:	08008351 	.word	0x08008351
 80082fc:	08008349 	.word	0x08008349
 8008300:	08008349 	.word	0x08008349
 8008304:	08008349 	.word	0x08008349
 8008308:	08008349 	.word	0x08008349
 800830c:	08008349 	.word	0x08008349
 8008310:	08008349 	.word	0x08008349
 8008314:	08008349 	.word	0x08008349
 8008318:	08008351 	.word	0x08008351
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800831c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008320:	3308      	adds	r3, #8
 8008322:	2101      	movs	r1, #1
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fe95 	bl	800a054 <RCCEx_PLL2_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008330:	e00f      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008336:	3328      	adds	r3, #40	@ 0x28
 8008338:	2101      	movs	r1, #1
 800833a:	4618      	mov	r0, r3
 800833c:	f001 ff3c 	bl	800a1b8 <RCCEx_PLL3_Config>
 8008340:	4603      	mov	r3, r0
 8008342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008346:	e004      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800834e:	e000      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10a      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800835a:	4bbf      	ldr	r3, [pc, #764]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800835c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800835e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008366:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008368:	4abb      	ldr	r2, [pc, #748]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800836a:	430b      	orrs	r3, r1
 800836c:	6553      	str	r3, [r2, #84]	@ 0x54
 800836e:	e003      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008374:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f002 0302 	and.w	r3, r2, #2
 8008384:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008388:	2300      	movs	r3, #0
 800838a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800838e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008392:	460b      	mov	r3, r1
 8008394:	4313      	orrs	r3, r2
 8008396:	d041      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d824      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80083a2:	a201      	add	r2, pc, #4	@ (adr r2, 80083a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083f5 	.word	0x080083f5
 80083ac:	080083c1 	.word	0x080083c1
 80083b0:	080083d7 	.word	0x080083d7
 80083b4:	080083f5 	.word	0x080083f5
 80083b8:	080083f5 	.word	0x080083f5
 80083bc:	080083f5 	.word	0x080083f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c4:	3308      	adds	r3, #8
 80083c6:	2101      	movs	r1, #1
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fe43 	bl	800a054 <RCCEx_PLL2_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80083d4:	e00f      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083da:	3328      	adds	r3, #40	@ 0x28
 80083dc:	2101      	movs	r1, #1
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 feea 	bl	800a1b8 <RCCEx_PLL3_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80083ea:	e004      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083f2:	e000      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80083f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80083fe:	4b96      	ldr	r3, [pc, #600]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008402:	f023 0107 	bic.w	r1, r3, #7
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800840c:	4a92      	ldr	r2, [pc, #584]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800840e:	430b      	orrs	r3, r1
 8008410:	6553      	str	r3, [r2, #84]	@ 0x54
 8008412:	e003      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f002 0304 	and.w	r3, r2, #4
 8008428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800842c:	2300      	movs	r3, #0
 800842e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008432:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008436:	460b      	mov	r3, r1
 8008438:	4313      	orrs	r3, r2
 800843a:	d044      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008444:	2b05      	cmp	r3, #5
 8008446:	d825      	bhi.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008448:	a201      	add	r2, pc, #4	@ (adr r2, 8008450 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844e:	bf00      	nop
 8008450:	0800849d 	.word	0x0800849d
 8008454:	08008469 	.word	0x08008469
 8008458:	0800847f 	.word	0x0800847f
 800845c:	0800849d 	.word	0x0800849d
 8008460:	0800849d 	.word	0x0800849d
 8008464:	0800849d 	.word	0x0800849d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846c:	3308      	adds	r3, #8
 800846e:	2101      	movs	r1, #1
 8008470:	4618      	mov	r0, r3
 8008472:	f001 fdef 	bl	800a054 <RCCEx_PLL2_Config>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800847c:	e00f      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800847e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008482:	3328      	adds	r3, #40	@ 0x28
 8008484:	2101      	movs	r1, #1
 8008486:	4618      	mov	r0, r3
 8008488:	f001 fe96 	bl	800a1b8 <RCCEx_PLL3_Config>
 800848c:	4603      	mov	r3, r0
 800848e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008492:	e004      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800849a:	e000      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800849c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800849e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10b      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084a6:	4b6c      	ldr	r3, [pc, #432]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084aa:	f023 0107 	bic.w	r1, r3, #7
 80084ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084b6:	4a68      	ldr	r2, [pc, #416]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084b8:	430b      	orrs	r3, r1
 80084ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80084bc:	e003      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f002 0320 	and.w	r3, r2, #32
 80084d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084d6:	2300      	movs	r3, #0
 80084d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80084e0:	460b      	mov	r3, r1
 80084e2:	4313      	orrs	r3, r2
 80084e4:	d055      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084f2:	d033      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80084f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084f8:	d82c      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084fe:	d02f      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008504:	d826      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008506:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800850a:	d02b      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800850c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008510:	d820      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008516:	d012      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800851c:	d81a      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d022      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008526:	d115      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852c:	3308      	adds	r3, #8
 800852e:	2100      	movs	r1, #0
 8008530:	4618      	mov	r0, r3
 8008532:	f001 fd8f 	bl	800a054 <RCCEx_PLL2_Config>
 8008536:	4603      	mov	r3, r0
 8008538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800853c:	e015      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800853e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008542:	3328      	adds	r3, #40	@ 0x28
 8008544:	2102      	movs	r1, #2
 8008546:	4618      	mov	r0, r3
 8008548:	f001 fe36 	bl	800a1b8 <RCCEx_PLL3_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008552:	e00a      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800855a:	e006      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800855c:	bf00      	nop
 800855e:	e004      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008560:	bf00      	nop
 8008562:	e002      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800856a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008572:	4b39      	ldr	r3, [pc, #228]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008576:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800857a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008582:	4a35      	ldr	r2, [pc, #212]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008584:	430b      	orrs	r3, r1
 8008586:	6553      	str	r3, [r2, #84]	@ 0x54
 8008588:	e003      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800858a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800858e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800859e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085a2:	2300      	movs	r3, #0
 80085a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80085a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4313      	orrs	r3, r2
 80085b0:	d058      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80085be:	d033      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80085c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80085c4:	d82c      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ca:	d02f      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80085cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085d0:	d826      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085d6:	d02b      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80085d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085dc:	d820      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085e2:	d012      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80085e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085e8:	d81a      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d022      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80085ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f2:	d115      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f8:	3308      	adds	r3, #8
 80085fa:	2100      	movs	r1, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 fd29 	bl	800a054 <RCCEx_PLL2_Config>
 8008602:	4603      	mov	r3, r0
 8008604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008608:	e015      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860e:	3328      	adds	r3, #40	@ 0x28
 8008610:	2102      	movs	r1, #2
 8008612:	4618      	mov	r0, r3
 8008614:	f001 fdd0 	bl	800a1b8 <RCCEx_PLL3_Config>
 8008618:	4603      	mov	r3, r0
 800861a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800861e:	e00a      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008626:	e006      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008628:	bf00      	nop
 800862a:	e004      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800862c:	bf00      	nop
 800862e:	e002      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008630:	bf00      	nop
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10e      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800863e:	4b06      	ldr	r3, [pc, #24]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008642:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800864e:	4a02      	ldr	r2, [pc, #8]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008650:	430b      	orrs	r3, r1
 8008652:	6593      	str	r3, [r2, #88]	@ 0x58
 8008654:	e006      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008656:	bf00      	nop
 8008658:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008674:	2300      	movs	r3, #0
 8008676:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800867a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800867e:	460b      	mov	r3, r1
 8008680:	4313      	orrs	r3, r2
 8008682:	d055      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008688:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800868c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008690:	d033      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008692:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008696:	d82c      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800869c:	d02f      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800869e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086a2:	d826      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80086a8:	d02b      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80086aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80086ae:	d820      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086b4:	d012      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80086b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086ba:	d81a      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d022      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80086c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086c4:	d115      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ca:	3308      	adds	r3, #8
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fcc0 	bl	800a054 <RCCEx_PLL2_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80086da:	e015      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e0:	3328      	adds	r3, #40	@ 0x28
 80086e2:	2102      	movs	r1, #2
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 fd67 	bl	800a1b8 <RCCEx_PLL3_Config>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80086f0:	e00a      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086f8:	e006      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086fa:	bf00      	nop
 80086fc:	e004      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086fe:	bf00      	nop
 8008700:	e002      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008702:	bf00      	nop
 8008704:	e000      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10b      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008710:	4ba1      	ldr	r3, [pc, #644]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008714:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008720:	4a9d      	ldr	r2, [pc, #628]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008722:	430b      	orrs	r3, r1
 8008724:	6593      	str	r3, [r2, #88]	@ 0x58
 8008726:	e003      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800872c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f002 0308 	and.w	r3, r2, #8
 800873c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008740:	2300      	movs	r3, #0
 8008742:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008746:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800874a:	460b      	mov	r3, r1
 800874c:	4313      	orrs	r3, r2
 800874e:	d01e      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800875c:	d10c      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800875e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008762:	3328      	adds	r3, #40	@ 0x28
 8008764:	2102      	movs	r1, #2
 8008766:	4618      	mov	r0, r3
 8008768:	f001 fd26 	bl	800a1b8 <RCCEx_PLL3_Config>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008778:	4b87      	ldr	r3, [pc, #540]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800877a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008784:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008788:	4a83      	ldr	r2, [pc, #524]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800878a:	430b      	orrs	r3, r1
 800878c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800878e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	f002 0310 	and.w	r3, r2, #16
 800879a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800879e:	2300      	movs	r3, #0
 80087a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80087a8:	460b      	mov	r3, r1
 80087aa:	4313      	orrs	r3, r2
 80087ac:	d01e      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ba:	d10c      	bne.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c0:	3328      	adds	r3, #40	@ 0x28
 80087c2:	2102      	movs	r1, #2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 fcf7 	bl	800a1b8 <RCCEx_PLL3_Config>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087d6:	4b70      	ldr	r3, [pc, #448]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80087de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087e6:	4a6c      	ldr	r2, [pc, #432]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80087f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087fc:	2300      	movs	r3, #0
 80087fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008802:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008806:	460b      	mov	r3, r1
 8008808:	4313      	orrs	r3, r2
 800880a:	d03e      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008818:	d022      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800881a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800881e:	d81b      	bhi.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008828:	d00b      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800882a:	e015      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800882c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008830:	3308      	adds	r3, #8
 8008832:	2100      	movs	r1, #0
 8008834:	4618      	mov	r0, r3
 8008836:	f001 fc0d 	bl	800a054 <RCCEx_PLL2_Config>
 800883a:	4603      	mov	r3, r0
 800883c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008840:	e00f      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008846:	3328      	adds	r3, #40	@ 0x28
 8008848:	2102      	movs	r1, #2
 800884a:	4618      	mov	r0, r3
 800884c:	f001 fcb4 	bl	800a1b8 <RCCEx_PLL3_Config>
 8008850:	4603      	mov	r3, r0
 8008852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008856:	e004      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800885e:	e000      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10b      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800886a:	4b4b      	ldr	r3, [pc, #300]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800886c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800887a:	4a47      	ldr	r2, [pc, #284]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800887c:	430b      	orrs	r3, r1
 800887e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008880:	e003      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008896:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008898:	2300      	movs	r3, #0
 800889a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800889c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80088a0:	460b      	mov	r3, r1
 80088a2:	4313      	orrs	r3, r2
 80088a4:	d03b      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80088a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80088b2:	d01f      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80088b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80088b8:	d818      	bhi.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80088ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088be:	d003      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80088c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088c4:	d007      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80088c6:	e011      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088c8:	4b33      	ldr	r3, [pc, #204]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088cc:	4a32      	ldr	r2, [pc, #200]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80088d4:	e00f      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088da:	3328      	adds	r3, #40	@ 0x28
 80088dc:	2101      	movs	r1, #1
 80088de:	4618      	mov	r0, r3
 80088e0:	f001 fc6a 	bl	800a1b8 <RCCEx_PLL3_Config>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80088ea:	e004      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088f2:	e000      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80088f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10b      	bne.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088fe:	4b26      	ldr	r3, [pc, #152]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008902:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800890a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890e:	4a22      	ldr	r2, [pc, #136]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008910:	430b      	orrs	r3, r1
 8008912:	6553      	str	r3, [r2, #84]	@ 0x54
 8008914:	e003      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800891a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800892a:	673b      	str	r3, [r7, #112]	@ 0x70
 800892c:	2300      	movs	r3, #0
 800892e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008930:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008934:	460b      	mov	r3, r1
 8008936:	4313      	orrs	r3, r2
 8008938:	d034      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008948:	d007      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800894a:	e011      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800894c:	4b12      	ldr	r3, [pc, #72]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800894e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008950:	4a11      	ldr	r2, [pc, #68]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008956:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008958:	e00e      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800895a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800895e:	3308      	adds	r3, #8
 8008960:	2102      	movs	r1, #2
 8008962:	4618      	mov	r0, r3
 8008964:	f001 fb76 	bl	800a054 <RCCEx_PLL2_Config>
 8008968:	4603      	mov	r3, r0
 800896a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800896e:	e003      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10d      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008980:	4b05      	ldr	r3, [pc, #20]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008984:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800898e:	4a02      	ldr	r2, [pc, #8]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008990:	430b      	orrs	r3, r1
 8008992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008994:	e006      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008996:	bf00      	nop
 8008998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80089b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089b2:	2300      	movs	r3, #0
 80089b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80089ba:	460b      	mov	r3, r1
 80089bc:	4313      	orrs	r3, r2
 80089be:	d00c      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c4:	3328      	adds	r3, #40	@ 0x28
 80089c6:	2102      	movs	r1, #2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 fbf5 	bl	800a1b8 <RCCEx_PLL3_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80089e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80089e8:	2300      	movs	r3, #0
 80089ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80089ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80089f0:	460b      	mov	r3, r1
 80089f2:	4313      	orrs	r3, r2
 80089f4:	d038      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a02:	d018      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a08:	d811      	bhi.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a0e:	d014      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a14:	d80b      	bhi.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d011      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a1e:	d106      	bne.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a20:	4bc3      	ldr	r3, [pc, #780]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	4ac2      	ldr	r2, [pc, #776]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008a2c:	e008      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a34:	e004      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a36:	bf00      	nop
 8008a38:	e002      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a3a:	bf00      	nop
 8008a3c:	e000      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10b      	bne.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a48:	4bb9      	ldr	r3, [pc, #740]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a58:	4ab5      	ldr	r2, [pc, #724]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5a:	430b      	orrs	r3, r1
 8008a5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a5e:	e003      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008a74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a76:	2300      	movs	r3, #0
 8008a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4313      	orrs	r3, r2
 8008a82:	d009      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a84:	4baa      	ldr	r3, [pc, #680]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a92:	4aa7      	ldr	r2, [pc, #668]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a94:	430b      	orrs	r3, r1
 8008a96:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008aaa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	d00a      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ab4:	4b9e      	ldr	r3, [pc, #632]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ac4:	4a9a      	ldr	r2, [pc, #616]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ac6:	430b      	orrs	r3, r1
 8008ac8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad8:	2300      	movs	r3, #0
 8008ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008adc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	d009      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ae6:	4b92      	ldr	r3, [pc, #584]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008af4:	4a8e      	ldr	r2, [pc, #568]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af6:	430b      	orrs	r3, r1
 8008af8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008b06:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b08:	2300      	movs	r3, #0
 8008b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008b10:	460b      	mov	r3, r1
 8008b12:	4313      	orrs	r3, r2
 8008b14:	d00e      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b16:	4b86      	ldr	r3, [pc, #536]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	4a85      	ldr	r2, [pc, #532]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b20:	6113      	str	r3, [r2, #16]
 8008b22:	4b83      	ldr	r3, [pc, #524]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b24:	6919      	ldr	r1, [r3, #16]
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b2e:	4a80      	ldr	r2, [pc, #512]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b30:	430b      	orrs	r3, r1
 8008b32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b42:	2300      	movs	r3, #0
 8008b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	d009      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b50:	4b77      	ldr	r3, [pc, #476]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b54:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5e:	4a74      	ldr	r2, [pc, #464]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b60:	430b      	orrs	r3, r1
 8008b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b72:	2300      	movs	r3, #0
 8008b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	d00a      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b80:	4b6b      	ldr	r3, [pc, #428]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b84:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b90:	4a67      	ldr	r2, [pc, #412]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b92:	430b      	orrs	r3, r1
 8008b94:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ba8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008bac:	460b      	mov	r3, r1
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	d011      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	2100      	movs	r1, #0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f001 fa4a 	bl	800a054 <RCCEx_PLL2_Config>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	2100      	movs	r1, #0
 8008be0:	6239      	str	r1, [r7, #32]
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008be8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008bec:	460b      	mov	r3, r1
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	d011      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f001 fa2a 	bl	800a054 <RCCEx_PLL2_Config>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	2100      	movs	r1, #0
 8008c20:	61b9      	str	r1, [r7, #24]
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	61fb      	str	r3, [r7, #28]
 8008c28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	d011      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c36:	3308      	adds	r3, #8
 8008c38:	2102      	movs	r1, #2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f001 fa0a 	bl	800a054 <RCCEx_PLL2_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	2100      	movs	r1, #0
 8008c60:	6139      	str	r1, [r7, #16]
 8008c62:	f003 0308 	and.w	r3, r3, #8
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	d011      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c76:	3328      	adds	r3, #40	@ 0x28
 8008c78:	2100      	movs	r1, #0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f001 fa9c 	bl	800a1b8 <RCCEx_PLL3_Config>
 8008c80:	4603      	mov	r3, r0
 8008c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	f003 0310 	and.w	r3, r3, #16
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008cac:	460b      	mov	r3, r1
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	d011      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb6:	3328      	adds	r3, #40	@ 0x28
 8008cb8:	2101      	movs	r1, #1
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 fa7c 	bl	800a1b8 <RCCEx_PLL3_Config>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	2100      	movs	r1, #0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	f003 0320 	and.w	r3, r3, #32
 8008ce6:	607b      	str	r3, [r7, #4]
 8008ce8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008cec:	460b      	mov	r3, r1
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	d011      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf6:	3328      	adds	r3, #40	@ 0x28
 8008cf8:	2102      	movs	r1, #2
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f001 fa5c 	bl	800a1b8 <RCCEx_PLL3_Config>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008d16:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e000      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d30:	58024400 	.word	0x58024400

08008d34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b090      	sub	sp, #64	@ 0x40
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d42:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008d46:	430b      	orrs	r3, r1
 8008d48:	f040 8094 	bne.w	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008d4c:	4b9e      	ldr	r3, [pc, #632]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	f200 8087 	bhi.w	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008d79 	.word	0x08008d79
 8008d68:	08008da1 	.word	0x08008da1
 8008d6c:	08008dc9 	.word	0x08008dc9
 8008d70:	08008e65 	.word	0x08008e65
 8008d74:	08008df1 	.word	0x08008df1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d78:	4b93      	ldr	r3, [pc, #588]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d84:	d108      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 f810 	bl	8009db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d94:	f000 bd45 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9c:	f000 bd41 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008da0:	4b89      	ldr	r3, [pc, #548]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dac:	d108      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dae:	f107 0318 	add.w	r3, r7, #24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fd54 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dbc:	f000 bd31 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc4:	f000 bd2d 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dc8:	4b7f      	ldr	r3, [pc, #508]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dd4:	d108      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dd6:	f107 030c 	add.w	r3, r7, #12
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fe94 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008de4:	f000 bd1d 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dec:	f000 bd19 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008df0:	4b75      	ldr	r3, [pc, #468]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008df4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008df8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dfa:	4b73      	ldr	r3, [pc, #460]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0304 	and.w	r3, r3, #4
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	d10c      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d109      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e0c:	4b6e      	ldr	r3, [pc, #440]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	08db      	lsrs	r3, r3, #3
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	4a6d      	ldr	r2, [pc, #436]	@ (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e18:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e1e:	e01f      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e20:	4b69      	ldr	r3, [pc, #420]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e2c:	d106      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e34:	d102      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e36:	4b66      	ldr	r3, [pc, #408]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e3a:	e011      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e3c:	4b62      	ldr	r3, [pc, #392]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e48:	d106      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e50:	d102      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e52:	4b60      	ldr	r3, [pc, #384]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e56:	e003      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e5c:	f000 bce1 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e60:	f000 bcdf 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e64:	4b5c      	ldr	r3, [pc, #368]	@ (8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e68:	f000 bcdb 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e70:	f000 bcd7 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e78:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	f040 80ad 	bne.w	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008e82:	4b51      	ldr	r3, [pc, #324]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e86:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008e8a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e92:	d056      	beq.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e9a:	f200 8090 	bhi.w	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea0:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ea2:	f000 8088 	beq.w	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	2bc0      	cmp	r3, #192	@ 0xc0
 8008eaa:	f200 8088 	bhi.w	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	2b80      	cmp	r3, #128	@ 0x80
 8008eb2:	d032      	beq.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	2b80      	cmp	r3, #128	@ 0x80
 8008eb8:	f200 8081 	bhi.w	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	2b40      	cmp	r3, #64	@ 0x40
 8008ec6:	d014      	beq.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008ec8:	e079      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eca:	4b3f      	ldr	r3, [pc, #252]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ed2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ed6:	d108      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 ff67 	bl	8009db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee6:	f000 bc9c 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eee:	f000 bc98 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ef2:	4b35      	ldr	r3, [pc, #212]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008efe:	d108      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f00:	f107 0318 	add.w	r3, r7, #24
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fcab 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f0e:	f000 bc88 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f16:	f000 bc84 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f26:	d108      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f28:	f107 030c 	add.w	r3, r7, #12
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fdeb 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f36:	f000 bc74 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f3e:	f000 bc70 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f42:	4b21      	ldr	r3, [pc, #132]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d10c      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	4a18      	ldr	r2, [pc, #96]	@ (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f70:	e01f      	b.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f72:	4b15      	ldr	r3, [pc, #84]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f7e:	d106      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f86:	d102      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f88:	4b11      	ldr	r3, [pc, #68]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f8c:	e011      	b.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f9a:	d106      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fa2:	d102      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fa8:	e003      	b.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008fae:	f000 bc38 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fb2:	f000 bc36 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fb6:	4b08      	ldr	r3, [pc, #32]	@ (8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fba:	f000 bc32 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc2:	f000 bc2e 	b.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fc6:	bf00      	nop
 8008fc8:	58024400 	.word	0x58024400
 8008fcc:	03d09000 	.word	0x03d09000
 8008fd0:	003d0900 	.word	0x003d0900
 8008fd4:	007a1200 	.word	0x007a1200
 8008fd8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	f040 809c 	bne.w	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008fea:	4b9e      	ldr	r3, [pc, #632]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fee:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008ff2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ffa:	d054      	beq.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009002:	f200 808b 	bhi.w	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800900c:	f000 8083 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009012:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009016:	f200 8081 	bhi.w	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009020:	d02f      	beq.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009028:	d878      	bhi.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009036:	d012      	beq.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009038:	e070      	b.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800903a:	4b8a      	ldr	r3, [pc, #552]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009042:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009046:	d107      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800904c:	4618      	mov	r0, r3
 800904e:	f000 feaf 	bl	8009db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009056:	e3e4      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800905c:	e3e1      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800905e:	4b81      	ldr	r3, [pc, #516]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800906a:	d107      	bne.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906c:	f107 0318 	add.w	r3, r7, #24
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fbf5 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800907a:	e3d2      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009080:	e3cf      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009082:	4b78      	ldr	r3, [pc, #480]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800908a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800908e:	d107      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009090:	f107 030c 	add.w	r3, r7, #12
 8009094:	4618      	mov	r0, r3
 8009096:	f000 fd37 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800909e:	e3c0      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a4:	e3bd      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090a6:	4b6f      	ldr	r3, [pc, #444]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090b0:	4b6c      	ldr	r3, [pc, #432]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	d10c      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80090bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d109      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090c2:	4b68      	ldr	r3, [pc, #416]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	08db      	lsrs	r3, r3, #3
 80090c8:	f003 0303 	and.w	r3, r3, #3
 80090cc:	4a66      	ldr	r2, [pc, #408]	@ (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80090ce:	fa22 f303 	lsr.w	r3, r2, r3
 80090d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090d4:	e01e      	b.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090d6:	4b63      	ldr	r3, [pc, #396]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090e2:	d106      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80090e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090ea:	d102      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090ec:	4b5f      	ldr	r3, [pc, #380]	@ (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80090ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090f0:	e010      	b.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090f2:	4b5c      	ldr	r3, [pc, #368]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090fe:	d106      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009106:	d102      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009108:	4b59      	ldr	r3, [pc, #356]	@ (8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800910a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800910c:	e002      	b.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009112:	e386      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009114:	e385      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009116:	4b57      	ldr	r3, [pc, #348]	@ (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800911a:	e382      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009120:	e37f      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009126:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800912a:	430b      	orrs	r3, r1
 800912c:	f040 80a7 	bne.w	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009130:	4b4c      	ldr	r3, [pc, #304]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009134:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009138:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009140:	d055      	beq.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009148:	f200 8096 	bhi.w	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009152:	f000 8084 	beq.w	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009158:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800915c:	f200 808c 	bhi.w	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009166:	d030      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800916e:	f200 8083 	bhi.w	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	2b00      	cmp	r3, #0
 8009176:	d004      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800917e:	d012      	beq.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009180:	e07a      	b.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009182:	4b38      	ldr	r3, [pc, #224]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800918a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800918e:	d107      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fe0b 	bl	8009db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800919a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800919e:	e340      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a4:	e33d      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091a6:	4b2f      	ldr	r3, [pc, #188]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091b2:	d107      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091b4:	f107 0318 	add.w	r3, r7, #24
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fb51 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c2:	e32e      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c8:	e32b      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ca:	4b26      	ldr	r3, [pc, #152]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091d6:	d107      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091d8:	f107 030c 	add.w	r3, r7, #12
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fc93 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091e6:	e31c      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ec:	e319      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b04      	cmp	r3, #4
 8009202:	d10c      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800920a:	4b16      	ldr	r3, [pc, #88]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	08db      	lsrs	r3, r3, #3
 8009210:	f003 0303 	and.w	r3, r3, #3
 8009214:	4a14      	ldr	r2, [pc, #80]	@ (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009216:	fa22 f303 	lsr.w	r3, r2, r3
 800921a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800921c:	e01e      	b.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800921e:	4b11      	ldr	r3, [pc, #68]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800922a:	d106      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800922c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800922e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009232:	d102      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009234:	4b0d      	ldr	r3, [pc, #52]	@ (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009238:	e010      	b.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800923a:	4b0a      	ldr	r3, [pc, #40]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009246:	d106      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800924a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800924e:	d102      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009250:	4b07      	ldr	r3, [pc, #28]	@ (8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009254:	e002      	b.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009256:	2300      	movs	r3, #0
 8009258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800925a:	e2e2      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800925c:	e2e1      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800925e:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009262:	e2de      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009264:	58024400 	.word	0x58024400
 8009268:	03d09000 	.word	0x03d09000
 800926c:	003d0900 	.word	0x003d0900
 8009270:	007a1200 	.word	0x007a1200
 8009274:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800927c:	e2d1      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800927e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009282:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009286:	430b      	orrs	r3, r1
 8009288:	f040 809c 	bne.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800928c:	4b93      	ldr	r3, [pc, #588]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800928e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009290:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009294:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009298:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800929c:	d054      	beq.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800929e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092a4:	f200 808b 	bhi.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092ae:	f000 8083 	beq.w	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092b8:	f200 8081 	bhi.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092c2:	d02f      	beq.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80092c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ca:	d878      	bhi.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d004      	beq.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092d8:	d012      	beq.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80092da:	e070      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092dc:	4b7f      	ldr	r3, [pc, #508]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092e8:	d107      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 fd5e 	bl	8009db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f8:	e293      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fe:	e290      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009300:	4b76      	ldr	r3, [pc, #472]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800930c:	d107      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930e:	f107 0318 	add.w	r3, r7, #24
 8009312:	4618      	mov	r0, r3
 8009314:	f000 faa4 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800931c:	e281      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009322:	e27e      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009324:	4b6d      	ldr	r3, [pc, #436]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800932c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009330:	d107      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009332:	f107 030c 	add.w	r3, r7, #12
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fbe6 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009340:	e26f      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009346:	e26c      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009348:	4b64      	ldr	r3, [pc, #400]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800934a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800934c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009352:	4b62      	ldr	r3, [pc, #392]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0304 	and.w	r3, r3, #4
 800935a:	2b04      	cmp	r3, #4
 800935c:	d10c      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800935e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009360:	2b00      	cmp	r3, #0
 8009362:	d109      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009364:	4b5d      	ldr	r3, [pc, #372]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	08db      	lsrs	r3, r3, #3
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	4a5c      	ldr	r2, [pc, #368]	@ (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009370:	fa22 f303 	lsr.w	r3, r2, r3
 8009374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009376:	e01e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009378:	4b58      	ldr	r3, [pc, #352]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009384:	d106      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800938c:	d102      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800938e:	4b55      	ldr	r3, [pc, #340]	@ (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009392:	e010      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009394:	4b51      	ldr	r3, [pc, #324]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800939c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093a0:	d106      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80093a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093a8:	d102      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093aa:	4b4f      	ldr	r3, [pc, #316]	@ (80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80093ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093ae:	e002      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80093b4:	e235      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093b6:	e234      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093b8:	4b4c      	ldr	r3, [pc, #304]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80093ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093bc:	e231      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c2:	e22e      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80093c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093c8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80093cc:	430b      	orrs	r3, r1
 80093ce:	f040 808f 	bne.w	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80093d2:	4b42      	ldr	r3, [pc, #264]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093d6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80093da:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093e2:	d06b      	beq.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093ea:	d874      	bhi.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093f2:	d056      	beq.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093fa:	d86c      	bhi.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009402:	d03b      	beq.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800940a:	d864      	bhi.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009412:	d021      	beq.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800941a:	d85c      	bhi.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009428:	d004      	beq.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800942a:	e054      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800942c:	f7fe fa0a 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 8009430:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009432:	e1f6      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009434:	4b29      	ldr	r3, [pc, #164]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800943c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009440:	d107      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009442:	f107 0318 	add.w	r3, r7, #24
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fa0a 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009450:	e1e7      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009456:	e1e4      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009458:	4b20      	ldr	r3, [pc, #128]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009464:	d107      	bne.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009466:	f107 030c 	add.w	r3, r7, #12
 800946a:	4618      	mov	r0, r3
 800946c:	f000 fb4c 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009474:	e1d5      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800947a:	e1d2      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800947c:	4b17      	ldr	r3, [pc, #92]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b04      	cmp	r3, #4
 8009486:	d109      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009488:	4b14      	ldr	r3, [pc, #80]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	08db      	lsrs	r3, r3, #3
 800948e:	f003 0303 	and.w	r3, r3, #3
 8009492:	4a13      	ldr	r2, [pc, #76]	@ (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009494:	fa22 f303 	lsr.w	r3, r2, r3
 8009498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949a:	e1c2      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a0:	e1bf      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094a2:	4b0e      	ldr	r3, [pc, #56]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ae:	d102      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80094b0:	4b0c      	ldr	r3, [pc, #48]	@ (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b4:	e1b5      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ba:	e1b2      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094bc:	4b07      	ldr	r3, [pc, #28]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094c8:	d102      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80094ca:	4b07      	ldr	r3, [pc, #28]	@ (80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80094cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ce:	e1a8      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d4:	e1a5      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094da:	e1a2      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094dc:	58024400 	.word	0x58024400
 80094e0:	03d09000 	.word	0x03d09000
 80094e4:	003d0900 	.word	0x003d0900
 80094e8:	007a1200 	.word	0x007a1200
 80094ec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80094f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094f4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80094f8:	430b      	orrs	r3, r1
 80094fa:	d173      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80094fc:	4b9c      	ldr	r3, [pc, #624]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009500:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009504:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800950c:	d02f      	beq.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009514:	d863      	bhi.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009518:	2b00      	cmp	r3, #0
 800951a:	d004      	beq.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800951c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009522:	d012      	beq.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009524:	e05b      	b.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009526:	4b92      	ldr	r3, [pc, #584]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800952e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009532:	d107      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009534:	f107 0318 	add.w	r3, r7, #24
 8009538:	4618      	mov	r0, r3
 800953a:	f000 f991 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009542:	e16e      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009548:	e16b      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800954a:	4b89      	ldr	r3, [pc, #548]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009556:	d107      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009558:	f107 030c 	add.w	r3, r7, #12
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fad3 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009566:	e15c      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800956c:	e159      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800956e:	4b80      	ldr	r3, [pc, #512]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009572:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009576:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009578:	4b7d      	ldr	r3, [pc, #500]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b04      	cmp	r3, #4
 8009582:	d10c      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009586:	2b00      	cmp	r3, #0
 8009588:	d109      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800958a:	4b79      	ldr	r3, [pc, #484]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	08db      	lsrs	r3, r3, #3
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	4a77      	ldr	r2, [pc, #476]	@ (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009596:	fa22 f303 	lsr.w	r3, r2, r3
 800959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800959c:	e01e      	b.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800959e:	4b74      	ldr	r3, [pc, #464]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095aa:	d106      	bne.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80095ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095b2:	d102      	bne.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095b4:	4b70      	ldr	r3, [pc, #448]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80095b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095b8:	e010      	b.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095c6:	d106      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80095c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ce:	d102      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095d0:	4b6a      	ldr	r3, [pc, #424]	@ (800977c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80095d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095d4:	e002      	b.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80095da:	e122      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095dc:	e121      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e2:	e11e      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80095e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80095ec:	430b      	orrs	r3, r1
 80095ee:	d133      	bne.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80095f0:	4b5f      	ldr	r3, [pc, #380]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009606:	d012      	beq.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009608:	e023      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800960a:	4b59      	ldr	r3, [pc, #356]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009612:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009616:	d107      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fbc7 	bl	8009db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009626:	e0fc      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962c:	e0f9      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800962e:	4b50      	ldr	r3, [pc, #320]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800963a:	d107      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800963c:	f107 0318 	add.w	r3, r7, #24
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f90d 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964a:	e0ea      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009650:	e0e7      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009656:	e0e4      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800965c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009660:	430b      	orrs	r3, r1
 8009662:	f040 808d 	bne.w	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009666:	4b42      	ldr	r3, [pc, #264]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800966a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800966e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009676:	d06b      	beq.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800967e:	d874      	bhi.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009686:	d056      	beq.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800968e:	d86c      	bhi.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009696:	d03b      	beq.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800969e:	d864      	bhi.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096a6:	d021      	beq.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80096a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ae:	d85c      	bhi.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d004      	beq.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80096b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096bc:	d004      	beq.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80096be:	e054      	b.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80096c0:	f000 f8b8 	bl	8009834 <HAL_RCCEx_GetD3PCLK1Freq>
 80096c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096c6:	e0ac      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096c8:	4b29      	ldr	r3, [pc, #164]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096d4:	d107      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096d6:	f107 0318 	add.w	r3, r7, #24
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 f8c0 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e4:	e09d      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ea:	e09a      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096ec:	4b20      	ldr	r3, [pc, #128]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096f8:	d107      	bne.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096fa:	f107 030c 	add.w	r3, r7, #12
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fa02 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009708:	e08b      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970e:	e088      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009710:	4b17      	ldr	r3, [pc, #92]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b04      	cmp	r3, #4
 800971a:	d109      	bne.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800971c:	4b14      	ldr	r3, [pc, #80]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	08db      	lsrs	r3, r3, #3
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	4a13      	ldr	r2, [pc, #76]	@ (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009728:	fa22 f303 	lsr.w	r3, r2, r3
 800972c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800972e:	e078      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009734:	e075      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009736:	4b0e      	ldr	r3, [pc, #56]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800973e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009742:	d102      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009744:	4b0c      	ldr	r3, [pc, #48]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009748:	e06b      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974e:	e068      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009750:	4b07      	ldr	r3, [pc, #28]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800975c:	d102      	bne.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800975e:	4b07      	ldr	r3, [pc, #28]	@ (800977c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009762:	e05e      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009768:	e05b      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800976e:	e058      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009770:	58024400 	.word	0x58024400
 8009774:	03d09000 	.word	0x03d09000
 8009778:	003d0900 	.word	0x003d0900
 800977c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009784:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009788:	430b      	orrs	r3, r1
 800978a:	d148      	bne.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800978c:	4b27      	ldr	r3, [pc, #156]	@ (800982c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800978e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009790:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009794:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800979c:	d02a      	beq.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800979e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097a4:	d838      	bhi.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80097a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80097ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097b2:	d00d      	beq.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80097b4:	e030      	b.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097b6:	4b1d      	ldr	r3, [pc, #116]	@ (800982c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c2:	d102      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80097c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80097c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097c8:	e02b      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ce:	e028      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097d0:	4b16      	ldr	r3, [pc, #88]	@ (800982c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097dc:	d107      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 fae4 	bl	8009db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097ec:	e019      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097f2:	e016      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097f4:	4b0d      	ldr	r3, [pc, #52]	@ (800982c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009800:	d107      	bne.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009802:	f107 0318 	add.w	r3, r7, #24
 8009806:	4618      	mov	r0, r3
 8009808:	f000 f82a 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009810:	e007      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009816:	e004      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800981c:	e001      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009824:	4618      	mov	r0, r3
 8009826:	3740      	adds	r7, #64	@ 0x40
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	58024400 	.word	0x58024400
 8009830:	007a1200 	.word	0x007a1200

08009834 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009838:	f7fd ffd4 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 800983c:	4602      	mov	r2, r0
 800983e:	4b06      	ldr	r3, [pc, #24]	@ (8009858 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	091b      	lsrs	r3, r3, #4
 8009844:	f003 0307 	and.w	r3, r3, #7
 8009848:	4904      	ldr	r1, [pc, #16]	@ (800985c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800984a:	5ccb      	ldrb	r3, [r1, r3]
 800984c:	f003 031f 	and.w	r3, r3, #31
 8009850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009854:	4618      	mov	r0, r3
 8009856:	bd80      	pop	{r7, pc}
 8009858:	58024400 	.word	0x58024400
 800985c:	08014008 	.word	0x08014008

08009860 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009860:	b480      	push	{r7}
 8009862:	b089      	sub	sp, #36	@ 0x24
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009868:	4ba1      	ldr	r3, [pc, #644]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800986a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986c:	f003 0303 	and.w	r3, r3, #3
 8009870:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009872:	4b9f      	ldr	r3, [pc, #636]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009876:	0b1b      	lsrs	r3, r3, #12
 8009878:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800987c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800987e:	4b9c      	ldr	r3, [pc, #624]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009882:	091b      	lsrs	r3, r3, #4
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800988a:	4b99      	ldr	r3, [pc, #612]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800988c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988e:	08db      	lsrs	r3, r3, #3
 8009890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	fb02 f303 	mul.w	r3, r2, r3
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 8111 	beq.w	8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	f000 8083 	beq.w	80099bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	f200 80a1 	bhi.w	8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d056      	beq.n	8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80098ca:	e099      	b.n	8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098cc:	4b88      	ldr	r3, [pc, #544]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0320 	and.w	r3, r3, #32
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d02d      	beq.n	8009934 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098d8:	4b85      	ldr	r3, [pc, #532]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	08db      	lsrs	r3, r3, #3
 80098de:	f003 0303 	and.w	r3, r3, #3
 80098e2:	4a84      	ldr	r2, [pc, #528]	@ (8009af4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80098e4:	fa22 f303 	lsr.w	r3, r2, r3
 80098e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009902:	4b7b      	ldr	r3, [pc, #492]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009912:	ed97 6a03 	vldr	s12, [r7, #12]
 8009916:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800991a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800992a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009932:	e087      	b.n	8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009afc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009946:	4b6a      	ldr	r3, [pc, #424]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800994a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009956:	ed97 6a03 	vldr	s12, [r7, #12]
 800995a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800995e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800996a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009976:	e065      	b.n	8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009982:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009b00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800998a:	4b59      	ldr	r3, [pc, #356]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800998c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800998e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999a:	ed97 6a03 	vldr	s12, [r7, #12]
 800999e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ba:	e043      	b.n	8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009b04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80099ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ce:	4b48      	ldr	r3, [pc, #288]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099de:	ed97 6a03 	vldr	s12, [r7, #12]
 80099e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099fe:	e021      	b.n	8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009b00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a12:	4b37      	ldr	r3, [pc, #220]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009a44:	4b2a      	ldr	r3, [pc, #168]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a48:	0a5b      	lsrs	r3, r3, #9
 8009a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a6a:	ee17 2a90 	vmov	r2, s15
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009a72:	4b1f      	ldr	r3, [pc, #124]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a76:	0c1b      	lsrs	r3, r3, #16
 8009a78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a7c:	ee07 3a90 	vmov	s15, r3
 8009a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a98:	ee17 2a90 	vmov	r2, s15
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009aa0:	4b13      	ldr	r3, [pc, #76]	@ (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa4:	0e1b      	lsrs	r3, r3, #24
 8009aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aba:	edd7 6a07 	vldr	s13, [r7, #28]
 8009abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ac6:	ee17 2a90 	vmov	r2, s15
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ace:	e008      	b.n	8009ae2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	609a      	str	r2, [r3, #8]
}
 8009ae2:	bf00      	nop
 8009ae4:	3724      	adds	r7, #36	@ 0x24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	58024400 	.word	0x58024400
 8009af4:	03d09000 	.word	0x03d09000
 8009af8:	46000000 	.word	0x46000000
 8009afc:	4c742400 	.word	0x4c742400
 8009b00:	4a742400 	.word	0x4a742400
 8009b04:	4af42400 	.word	0x4af42400

08009b08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b089      	sub	sp, #36	@ 0x24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b10:	4ba1      	ldr	r3, [pc, #644]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009b1a:	4b9f      	ldr	r3, [pc, #636]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b1e:	0d1b      	lsrs	r3, r3, #20
 8009b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b26:	4b9c      	ldr	r3, [pc, #624]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2a:	0a1b      	lsrs	r3, r3, #8
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009b32:	4b99      	ldr	r3, [pc, #612]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b36:	08db      	lsrs	r3, r3, #3
 8009b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	fb02 f303 	mul.w	r3, r2, r3
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 8111 	beq.w	8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	f000 8083 	beq.w	8009c64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	f200 80a1 	bhi.w	8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d003      	beq.n	8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d056      	beq.n	8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b72:	e099      	b.n	8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b74:	4b88      	ldr	r3, [pc, #544]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d02d      	beq.n	8009bdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b80:	4b85      	ldr	r3, [pc, #532]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	08db      	lsrs	r3, r3, #3
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	4a84      	ldr	r2, [pc, #528]	@ (8009d9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	ee07 3a90 	vmov	s15, r3
 8009b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009baa:	4b7b      	ldr	r3, [pc, #492]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009da0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bda:	e087      	b.n	8009cec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009da4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bee:	4b6a      	ldr	r3, [pc, #424]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009da0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c1e:	e065      	b.n	8009cec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c32:	4b59      	ldr	r3, [pc, #356]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009da0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c62:	e043      	b.n	8009cec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009dac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c76:	4b48      	ldr	r3, [pc, #288]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009da0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ca6:	e021      	b.n	8009cec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cba:	4b37      	ldr	r3, [pc, #220]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009da0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009cec:	4b2a      	ldr	r3, [pc, #168]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf0:	0a5b      	lsrs	r3, r3, #9
 8009cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d12:	ee17 2a90 	vmov	r2, s15
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1e:	0c1b      	lsrs	r3, r3, #16
 8009d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d24:	ee07 3a90 	vmov	s15, r3
 8009d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d40:	ee17 2a90 	vmov	r2, s15
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009d48:	4b13      	ldr	r3, [pc, #76]	@ (8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	0e1b      	lsrs	r3, r3, #24
 8009d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d6e:	ee17 2a90 	vmov	r2, s15
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d76:	e008      	b.n	8009d8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	609a      	str	r2, [r3, #8]
}
 8009d8a:	bf00      	nop
 8009d8c:	3724      	adds	r7, #36	@ 0x24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	03d09000 	.word	0x03d09000
 8009da0:	46000000 	.word	0x46000000
 8009da4:	4c742400 	.word	0x4c742400
 8009da8:	4a742400 	.word	0x4a742400
 8009dac:	4af42400 	.word	0x4af42400

08009db0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b089      	sub	sp, #36	@ 0x24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009db8:	4ba0      	ldr	r3, [pc, #640]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dbc:	f003 0303 	and.w	r3, r3, #3
 8009dc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009dc2:	4b9e      	ldr	r3, [pc, #632]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc6:	091b      	lsrs	r3, r3, #4
 8009dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dcc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009dce:	4b9b      	ldr	r3, [pc, #620]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009dd8:	4b98      	ldr	r3, [pc, #608]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ddc:	08db      	lsrs	r3, r3, #3
 8009dde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	fb02 f303 	mul.w	r3, r2, r3
 8009de8:	ee07 3a90 	vmov	s15, r3
 8009dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 8111 	beq.w	800a01e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	f000 8083 	beq.w	8009f0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	f200 80a1 	bhi.w	8009f4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d003      	beq.n	8009e1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d056      	beq.n	8009ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009e18:	e099      	b.n	8009f4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e1a:	4b88      	ldr	r3, [pc, #544]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d02d      	beq.n	8009e82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e26:	4b85      	ldr	r3, [pc, #532]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	08db      	lsrs	r3, r3, #3
 8009e2c:	f003 0303 	and.w	r3, r3, #3
 8009e30:	4a83      	ldr	r2, [pc, #524]	@ (800a040 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e32:	fa22 f303 	lsr.w	r3, r2, r3
 8009e36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	ee07 3a90 	vmov	s15, r3
 8009e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	ee07 3a90 	vmov	s15, r3
 8009e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e50:	4b7a      	ldr	r3, [pc, #488]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e58:	ee07 3a90 	vmov	s15, r3
 8009e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e64:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e80:	e087      	b.n	8009f92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	ee07 3a90 	vmov	s15, r3
 8009e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a048 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e94:	4b69      	ldr	r3, [pc, #420]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9c:	ee07 3a90 	vmov	s15, r3
 8009ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ec4:	e065      	b.n	8009f92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	ee07 3a90 	vmov	s15, r3
 8009ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a04c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ed8:	4b58      	ldr	r3, [pc, #352]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ef8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f08:	e043      	b.n	8009f92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	ee07 3a90 	vmov	s15, r3
 8009f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f14:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a050 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f1c:	4b47      	ldr	r3, [pc, #284]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f24:	ee07 3a90 	vmov	s15, r3
 8009f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f30:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f4c:	e021      	b.n	8009f92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	ee07 3a90 	vmov	s15, r3
 8009f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f58:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a048 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f60:	4b36      	ldr	r3, [pc, #216]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f68:	ee07 3a90 	vmov	s15, r3
 8009f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f70:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f74:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009f92:	4b2a      	ldr	r3, [pc, #168]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f96:	0a5b      	lsrs	r3, r3, #9
 8009f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f9c:	ee07 3a90 	vmov	s15, r3
 8009fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fb8:	ee17 2a90 	vmov	r2, s15
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc4:	0c1b      	lsrs	r3, r3, #16
 8009fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe6:	ee17 2a90 	vmov	r2, s15
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009fee:	4b13      	ldr	r3, [pc, #76]	@ (800a03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff2:	0e1b      	lsrs	r3, r3, #24
 8009ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ff8:	ee07 3a90 	vmov	s15, r3
 8009ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a000:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a004:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a008:	edd7 6a07 	vldr	s13, [r7, #28]
 800a00c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a014:	ee17 2a90 	vmov	r2, s15
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a01c:	e008      	b.n	800a030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	609a      	str	r2, [r3, #8]
}
 800a030:	bf00      	nop
 800a032:	3724      	adds	r7, #36	@ 0x24
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	58024400 	.word	0x58024400
 800a040:	03d09000 	.word	0x03d09000
 800a044:	46000000 	.word	0x46000000
 800a048:	4c742400 	.word	0x4c742400
 800a04c:	4a742400 	.word	0x4a742400
 800a050:	4af42400 	.word	0x4af42400

0800a054 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a062:	4b53      	ldr	r3, [pc, #332]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d101      	bne.n	800a072 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e099      	b.n	800a1a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a072:	4b4f      	ldr	r3, [pc, #316]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a4e      	ldr	r2, [pc, #312]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a078:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a07c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a07e:	f7f7 ffdf 	bl	8002040 <HAL_GetTick>
 800a082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a084:	e008      	b.n	800a098 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a086:	f7f7 ffdb 	bl	8002040 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	2b02      	cmp	r3, #2
 800a092:	d901      	bls.n	800a098 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e086      	b.n	800a1a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a098:	4b45      	ldr	r3, [pc, #276]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1f0      	bne.n	800a086 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0a4:	4b42      	ldr	r3, [pc, #264]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	031b      	lsls	r3, r3, #12
 800a0b2:	493f      	ldr	r1, [pc, #252]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	025b      	lsls	r3, r3, #9
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	041b      	lsls	r3, r3, #16
 800a0d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a0da:	431a      	orrs	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	061b      	lsls	r3, r3, #24
 800a0e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a0e8:	4931      	ldr	r1, [pc, #196]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a0ee:	4b30      	ldr	r3, [pc, #192]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	492d      	ldr	r1, [pc, #180]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a100:	4b2b      	ldr	r3, [pc, #172]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a104:	f023 0220 	bic.w	r2, r3, #32
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	4928      	ldr	r1, [pc, #160]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a112:	4b27      	ldr	r3, [pc, #156]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a116:	4a26      	ldr	r2, [pc, #152]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a118:	f023 0310 	bic.w	r3, r3, #16
 800a11c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a11e:	4b24      	ldr	r3, [pc, #144]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a122:	4b24      	ldr	r3, [pc, #144]	@ (800a1b4 <RCCEx_PLL2_Config+0x160>)
 800a124:	4013      	ands	r3, r2
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	69d2      	ldr	r2, [r2, #28]
 800a12a:	00d2      	lsls	r2, r2, #3
 800a12c:	4920      	ldr	r1, [pc, #128]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a132:	4b1f      	ldr	r3, [pc, #124]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a136:	4a1e      	ldr	r2, [pc, #120]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a138:	f043 0310 	orr.w	r3, r3, #16
 800a13c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d106      	bne.n	800a152 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a144:	4b1a      	ldr	r3, [pc, #104]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a148:	4a19      	ldr	r2, [pc, #100]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a14a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a14e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a150:	e00f      	b.n	800a172 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d106      	bne.n	800a166 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a158:	4b15      	ldr	r3, [pc, #84]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15c:	4a14      	ldr	r2, [pc, #80]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a15e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a164:	e005      	b.n	800a172 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a166:	4b12      	ldr	r3, [pc, #72]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a16a:	4a11      	ldr	r2, [pc, #68]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a16c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a170:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a172:	4b0f      	ldr	r3, [pc, #60]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a0e      	ldr	r2, [pc, #56]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a178:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a17e:	f7f7 ff5f 	bl	8002040 <HAL_GetTick>
 800a182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a184:	e008      	b.n	800a198 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a186:	f7f7 ff5b 	bl	8002040 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	2b02      	cmp	r3, #2
 800a192:	d901      	bls.n	800a198 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e006      	b.n	800a1a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a198:	4b05      	ldr	r3, [pc, #20]	@ (800a1b0 <RCCEx_PLL2_Config+0x15c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0f0      	beq.n	800a186 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	58024400 	.word	0x58024400
 800a1b4:	ffff0007 	.word	0xffff0007

0800a1b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1c6:	4b53      	ldr	r3, [pc, #332]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ca:	f003 0303 	and.w	r3, r3, #3
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d101      	bne.n	800a1d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e099      	b.n	800a30a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1d6:	4b4f      	ldr	r3, [pc, #316]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a4e      	ldr	r2, [pc, #312]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1e2:	f7f7 ff2d 	bl	8002040 <HAL_GetTick>
 800a1e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1e8:	e008      	b.n	800a1fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1ea:	f7f7 ff29 	bl	8002040 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d901      	bls.n	800a1fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e086      	b.n	800a30a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1fc:	4b45      	ldr	r3, [pc, #276]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1f0      	bne.n	800a1ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a208:	4b42      	ldr	r3, [pc, #264]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	051b      	lsls	r3, r3, #20
 800a216:	493f      	ldr	r1, [pc, #252]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a218:	4313      	orrs	r3, r2
 800a21a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	3b01      	subs	r3, #1
 800a222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	025b      	lsls	r3, r3, #9
 800a22e:	b29b      	uxth	r3, r3
 800a230:	431a      	orrs	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	3b01      	subs	r3, #1
 800a238:	041b      	lsls	r3, r3, #16
 800a23a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a23e:	431a      	orrs	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	3b01      	subs	r3, #1
 800a246:	061b      	lsls	r3, r3, #24
 800a248:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a24c:	4931      	ldr	r1, [pc, #196]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a252:	4b30      	ldr	r3, [pc, #192]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a256:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	492d      	ldr	r1, [pc, #180]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a260:	4313      	orrs	r3, r2
 800a262:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a264:	4b2b      	ldr	r3, [pc, #172]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a268:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	4928      	ldr	r1, [pc, #160]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a272:	4313      	orrs	r3, r2
 800a274:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a276:	4b27      	ldr	r3, [pc, #156]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27a:	4a26      	ldr	r2, [pc, #152]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a27c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a282:	4b24      	ldr	r3, [pc, #144]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a286:	4b24      	ldr	r3, [pc, #144]	@ (800a318 <RCCEx_PLL3_Config+0x160>)
 800a288:	4013      	ands	r3, r2
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	69d2      	ldr	r2, [r2, #28]
 800a28e:	00d2      	lsls	r2, r2, #3
 800a290:	4920      	ldr	r1, [pc, #128]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a292:	4313      	orrs	r3, r2
 800a294:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a296:	4b1f      	ldr	r3, [pc, #124]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29a:	4a1e      	ldr	r2, [pc, #120]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a29c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ac:	4a19      	ldr	r2, [pc, #100]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a2ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a2b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2b4:	e00f      	b.n	800a2d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d106      	bne.n	800a2ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2bc:	4b15      	ldr	r3, [pc, #84]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c0:	4a14      	ldr	r2, [pc, #80]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a2c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2c8:	e005      	b.n	800a2d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2ca:	4b12      	ldr	r3, [pc, #72]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a2cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ce:	4a11      	ldr	r2, [pc, #68]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a2d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a2d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a0e      	ldr	r2, [pc, #56]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a2dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2e2:	f7f7 fead 	bl	8002040 <HAL_GetTick>
 800a2e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2e8:	e008      	b.n	800a2fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2ea:	f7f7 fea9 	bl	8002040 <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d901      	bls.n	800a2fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e006      	b.n	800a30a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2fc:	4b05      	ldr	r3, [pc, #20]	@ (800a314 <RCCEx_PLL3_Config+0x15c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d0f0      	beq.n	800a2ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	58024400 	.word	0x58024400
 800a318:	ffff0007 	.word	0xffff0007

0800a31c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e049      	b.n	800a3c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	d106      	bne.n	800a348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f841 	bl	800a3ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3304      	adds	r3, #4
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f000 f9e8 	bl	800a730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
	...

0800a3e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d001      	beq.n	800a3f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e054      	b.n	800a4a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68da      	ldr	r2, [r3, #12]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f042 0201 	orr.w	r2, r2, #1
 800a40e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a26      	ldr	r2, [pc, #152]	@ (800a4b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d022      	beq.n	800a460 <HAL_TIM_Base_Start_IT+0x80>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a422:	d01d      	beq.n	800a460 <HAL_TIM_Base_Start_IT+0x80>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a22      	ldr	r2, [pc, #136]	@ (800a4b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d018      	beq.n	800a460 <HAL_TIM_Base_Start_IT+0x80>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a21      	ldr	r2, [pc, #132]	@ (800a4b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d013      	beq.n	800a460 <HAL_TIM_Base_Start_IT+0x80>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a1f      	ldr	r2, [pc, #124]	@ (800a4bc <HAL_TIM_Base_Start_IT+0xdc>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00e      	beq.n	800a460 <HAL_TIM_Base_Start_IT+0x80>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a1e      	ldr	r2, [pc, #120]	@ (800a4c0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d009      	beq.n	800a460 <HAL_TIM_Base_Start_IT+0x80>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a1c      	ldr	r2, [pc, #112]	@ (800a4c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d004      	beq.n	800a460 <HAL_TIM_Base_Start_IT+0x80>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a1b      	ldr	r2, [pc, #108]	@ (800a4c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d115      	bne.n	800a48c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	4b19      	ldr	r3, [pc, #100]	@ (800a4cc <HAL_TIM_Base_Start_IT+0xec>)
 800a468:	4013      	ands	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b06      	cmp	r3, #6
 800a470:	d015      	beq.n	800a49e <HAL_TIM_Base_Start_IT+0xbe>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a478:	d011      	beq.n	800a49e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f042 0201 	orr.w	r2, r2, #1
 800a488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a48a:	e008      	b.n	800a49e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0201 	orr.w	r2, r2, #1
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	e000      	b.n	800a4a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a49e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	40010000 	.word	0x40010000
 800a4b4:	40000400 	.word	0x40000400
 800a4b8:	40000800 	.word	0x40000800
 800a4bc:	40000c00 	.word	0x40000c00
 800a4c0:	40010400 	.word	0x40010400
 800a4c4:	40001800 	.word	0x40001800
 800a4c8:	40014000 	.word	0x40014000
 800a4cc:	00010007 	.word	0x00010007

0800a4d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d020      	beq.n	800a534 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01b      	beq.n	800a534 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f06f 0202 	mvn.w	r2, #2
 800a504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f8e9 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
 800a520:	e005      	b.n	800a52e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f8db 	bl	800a6de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f8ec 	bl	800a706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 0304 	and.w	r3, r3, #4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d020      	beq.n	800a580 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01b      	beq.n	800a580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f06f 0204 	mvn.w	r2, #4
 800a550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2202      	movs	r2, #2
 800a556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f8c3 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
 800a56c:	e005      	b.n	800a57a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f8b5 	bl	800a6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f8c6 	bl	800a706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	f003 0308 	and.w	r3, r3, #8
 800a586:	2b00      	cmp	r3, #0
 800a588:	d020      	beq.n	800a5cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f003 0308 	and.w	r3, r3, #8
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01b      	beq.n	800a5cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f06f 0208 	mvn.w	r2, #8
 800a59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f89d 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
 800a5b8:	e005      	b.n	800a5c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f88f 	bl	800a6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f8a0 	bl	800a706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f003 0310 	and.w	r3, r3, #16
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d020      	beq.n	800a618 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f003 0310 	and.w	r3, r3, #16
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01b      	beq.n	800a618 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f06f 0210 	mvn.w	r2, #16
 800a5e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f877 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
 800a604:	e005      	b.n	800a612 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f869 	bl	800a6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f87a 	bl	800a706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00c      	beq.n	800a63c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d007      	beq.n	800a63c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f06f 0201 	mvn.w	r2, #1
 800a634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7f6 fd30 	bl	800109c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a642:	2b00      	cmp	r3, #0
 800a644:	d104      	bne.n	800a650 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00c      	beq.n	800a66a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	d007      	beq.n	800a66a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f913 	bl	800a890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00c      	beq.n	800a68e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f90b 	bl	800a8a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00c      	beq.n	800a6b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d007      	beq.n	800a6b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f834 	bl	800a71a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	f003 0320 	and.w	r3, r3, #32
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00c      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f003 0320 	and.w	r3, r3, #32
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d007      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f06f 0220 	mvn.w	r2, #32
 800a6ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f8d3 	bl	800a87c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6e6:	bf00      	nop
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6fa:	bf00      	nop
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
	...

0800a730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a46      	ldr	r2, [pc, #280]	@ (800a85c <TIM_Base_SetConfig+0x12c>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d013      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a74e:	d00f      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a43      	ldr	r2, [pc, #268]	@ (800a860 <TIM_Base_SetConfig+0x130>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00b      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a42      	ldr	r2, [pc, #264]	@ (800a864 <TIM_Base_SetConfig+0x134>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d007      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a41      	ldr	r2, [pc, #260]	@ (800a868 <TIM_Base_SetConfig+0x138>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a40      	ldr	r2, [pc, #256]	@ (800a86c <TIM_Base_SetConfig+0x13c>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d108      	bne.n	800a782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	4313      	orrs	r3, r2
 800a780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a35      	ldr	r2, [pc, #212]	@ (800a85c <TIM_Base_SetConfig+0x12c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d01f      	beq.n	800a7ca <TIM_Base_SetConfig+0x9a>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a790:	d01b      	beq.n	800a7ca <TIM_Base_SetConfig+0x9a>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a32      	ldr	r2, [pc, #200]	@ (800a860 <TIM_Base_SetConfig+0x130>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d017      	beq.n	800a7ca <TIM_Base_SetConfig+0x9a>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a31      	ldr	r2, [pc, #196]	@ (800a864 <TIM_Base_SetConfig+0x134>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d013      	beq.n	800a7ca <TIM_Base_SetConfig+0x9a>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a30      	ldr	r2, [pc, #192]	@ (800a868 <TIM_Base_SetConfig+0x138>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d00f      	beq.n	800a7ca <TIM_Base_SetConfig+0x9a>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a2f      	ldr	r2, [pc, #188]	@ (800a86c <TIM_Base_SetConfig+0x13c>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d00b      	beq.n	800a7ca <TIM_Base_SetConfig+0x9a>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a2e      	ldr	r2, [pc, #184]	@ (800a870 <TIM_Base_SetConfig+0x140>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d007      	beq.n	800a7ca <TIM_Base_SetConfig+0x9a>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a2d      	ldr	r2, [pc, #180]	@ (800a874 <TIM_Base_SetConfig+0x144>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d003      	beq.n	800a7ca <TIM_Base_SetConfig+0x9a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a2c      	ldr	r2, [pc, #176]	@ (800a878 <TIM_Base_SetConfig+0x148>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d108      	bne.n	800a7dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	689a      	ldr	r2, [r3, #8]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a16      	ldr	r2, [pc, #88]	@ (800a85c <TIM_Base_SetConfig+0x12c>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d00f      	beq.n	800a828 <TIM_Base_SetConfig+0xf8>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a18      	ldr	r2, [pc, #96]	@ (800a86c <TIM_Base_SetConfig+0x13c>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d00b      	beq.n	800a828 <TIM_Base_SetConfig+0xf8>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a17      	ldr	r2, [pc, #92]	@ (800a870 <TIM_Base_SetConfig+0x140>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d007      	beq.n	800a828 <TIM_Base_SetConfig+0xf8>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a16      	ldr	r2, [pc, #88]	@ (800a874 <TIM_Base_SetConfig+0x144>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d003      	beq.n	800a828 <TIM_Base_SetConfig+0xf8>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a15      	ldr	r2, [pc, #84]	@ (800a878 <TIM_Base_SetConfig+0x148>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d103      	bne.n	800a830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	691a      	ldr	r2, [r3, #16]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d105      	bne.n	800a84e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f023 0201 	bic.w	r2, r3, #1
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	611a      	str	r2, [r3, #16]
  }
}
 800a84e:	bf00      	nop
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	40010000 	.word	0x40010000
 800a860:	40000400 	.word	0x40000400
 800a864:	40000800 	.word	0x40000800
 800a868:	40000c00 	.word	0x40000c00
 800a86c:	40010400 	.word	0x40010400
 800a870:	40014000 	.word	0x40014000
 800a874:	40014400 	.word	0x40014400
 800a878:	40014800 	.word	0x40014800

0800a87c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e042      	b.n	800a950 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d106      	bne.n	800a8e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7f7 f877 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2224      	movs	r2, #36	@ 0x24
 800a8e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 0201 	bic.w	r2, r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 fa4a 	bl	800bd9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fcdf 	bl	800b2cc <UART_SetConfig>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e01b      	b.n	800a950 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689a      	ldr	r2, [r3, #8]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f042 0201 	orr.w	r2, r2, #1
 800a946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 fac9 	bl	800bee0 <UART_CheckIdleState>
 800a94e:	4603      	mov	r3, r0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08a      	sub	sp, #40	@ 0x28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	4613      	mov	r3, r2
 800a964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a96c:	2b20      	cmp	r3, #32
 800a96e:	d167      	bne.n	800aa40 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <HAL_UART_Transmit_DMA+0x24>
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e060      	b.n	800aa42 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	88fa      	ldrh	r2, [r7, #6]
 800a98a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	88fa      	ldrh	r2, [r7, #6]
 800a992:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2221      	movs	r2, #33	@ 0x21
 800a9a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d028      	beq.n	800aa00 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9b2:	4a26      	ldr	r2, [pc, #152]	@ (800aa4c <HAL_UART_Transmit_DMA+0xf4>)
 800a9b4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9ba:	4a25      	ldr	r2, [pc, #148]	@ (800aa50 <HAL_UART_Transmit_DMA+0xf8>)
 800a9bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9c2:	4a24      	ldr	r2, [pc, #144]	@ (800aa54 <HAL_UART_Transmit_DMA+0xfc>)
 800a9c4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3328      	adds	r3, #40	@ 0x28
 800a9de:	461a      	mov	r2, r3
 800a9e0:	88fb      	ldrh	r3, [r7, #6]
 800a9e2:	f7f9 fa77 	bl	8003ed4 <HAL_DMA_Start_IT>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d009      	beq.n	800aa00 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2210      	movs	r2, #16
 800a9f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e020      	b.n	800aa42 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2240      	movs	r2, #64	@ 0x40
 800aa06:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	e853 3f00 	ldrex	r3, [r3]
 800aa16:	613b      	str	r3, [r7, #16]
   return(result);
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	3308      	adds	r3, #8
 800aa26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa28:	623a      	str	r2, [r7, #32]
 800aa2a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2c:	69f9      	ldr	r1, [r7, #28]
 800aa2e:	6a3a      	ldr	r2, [r7, #32]
 800aa30:	e841 2300 	strex	r3, r2, [r1]
 800aa34:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1e5      	bne.n	800aa08 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e000      	b.n	800aa42 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aa40:	2302      	movs	r3, #2
  }
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3728      	adds	r7, #40	@ 0x28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	0800c3ad 	.word	0x0800c3ad
 800aa50:	0800c443 	.word	0x0800c443
 800aa54:	0800c5c5 	.word	0x0800c5c5

0800aa58 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08a      	sub	sp, #40	@ 0x28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	4613      	mov	r3, r2
 800aa64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	d137      	bne.n	800aae0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d002      	beq.n	800aa7c <HAL_UART_Receive_DMA+0x24>
 800aa76:	88fb      	ldrh	r3, [r7, #6]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e030      	b.n	800aae2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a18      	ldr	r2, [pc, #96]	@ (800aaec <HAL_UART_Receive_DMA+0x94>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d01f      	beq.n	800aad0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d018      	beq.n	800aad0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	e853 3f00 	ldrex	r3, [r3]
 800aaaa:	613b      	str	r3, [r7, #16]
   return(result);
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aab2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	461a      	mov	r2, r3
 800aaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabc:	623b      	str	r3, [r7, #32]
 800aabe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac0:	69f9      	ldr	r1, [r7, #28]
 800aac2:	6a3a      	ldr	r2, [r7, #32]
 800aac4:	e841 2300 	strex	r3, r2, [r1]
 800aac8:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e6      	bne.n	800aa9e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aad0:	88fb      	ldrh	r3, [r7, #6]
 800aad2:	461a      	mov	r2, r3
 800aad4:	68b9      	ldr	r1, [r7, #8]
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f001 fb1a 	bl	800c110 <UART_Start_Receive_DMA>
 800aadc:	4603      	mov	r3, r0
 800aade:	e000      	b.n	800aae2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aae0:	2302      	movs	r3, #2
  }
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3728      	adds	r7, #40	@ 0x28
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	58000c00 	.word	0x58000c00

0800aaf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b0ba      	sub	sp, #232	@ 0xe8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ab1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ab1e:	4013      	ands	r3, r2
 800ab20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ab24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d11b      	bne.n	800ab64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab30:	f003 0320 	and.w	r3, r3, #32
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d015      	beq.n	800ab64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab3c:	f003 0320 	and.w	r3, r3, #32
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d105      	bne.n	800ab50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 8377 	beq.w	800b248 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	4798      	blx	r3
      }
      return;
 800ab62:	e371      	b.n	800b248 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 8123 	beq.w	800adb4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab72:	4b8d      	ldr	r3, [pc, #564]	@ (800ada8 <HAL_UART_IRQHandler+0x2b8>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ab7e:	4b8b      	ldr	r3, [pc, #556]	@ (800adac <HAL_UART_IRQHandler+0x2bc>)
 800ab80:	4013      	ands	r3, r2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 8116 	beq.w	800adb4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab8c:	f003 0301 	and.w	r3, r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d011      	beq.n	800abb8 <HAL_UART_IRQHandler+0xc8>
 800ab94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2201      	movs	r2, #1
 800aba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abae:	f043 0201 	orr.w	r2, r3, #1
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abbc:	f003 0302 	and.w	r3, r3, #2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d011      	beq.n	800abe8 <HAL_UART_IRQHandler+0xf8>
 800abc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00b      	beq.n	800abe8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2202      	movs	r2, #2
 800abd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abde:	f043 0204 	orr.w	r2, r3, #4
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abec:	f003 0304 	and.w	r3, r3, #4
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d011      	beq.n	800ac18 <HAL_UART_IRQHandler+0x128>
 800abf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2204      	movs	r2, #4
 800ac06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac0e:	f043 0202 	orr.w	r2, r3, #2
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac1c:	f003 0308 	and.w	r3, r3, #8
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d017      	beq.n	800ac54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d105      	bne.n	800ac3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ac34:	4b5c      	ldr	r3, [pc, #368]	@ (800ada8 <HAL_UART_IRQHandler+0x2b8>)
 800ac36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00b      	beq.n	800ac54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2208      	movs	r2, #8
 800ac42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac4a:	f043 0208 	orr.w	r2, r3, #8
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d012      	beq.n	800ac86 <HAL_UART_IRQHandler+0x196>
 800ac60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00c      	beq.n	800ac86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac7c:	f043 0220 	orr.w	r2, r3, #32
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 82dd 	beq.w	800b24c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac96:	f003 0320 	and.w	r3, r3, #32
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d013      	beq.n	800acc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca2:	f003 0320 	and.w	r3, r3, #32
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d105      	bne.n	800acb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800acaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d007      	beq.n	800acc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800accc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acda:	2b40      	cmp	r3, #64	@ 0x40
 800acdc:	d005      	beq.n	800acea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ace2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d054      	beq.n	800ad94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 faf8 	bl	800c2e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acfa:	2b40      	cmp	r3, #64	@ 0x40
 800acfc:	d146      	bne.n	800ad8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ad14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ad18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3308      	adds	r3, #8
 800ad26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ad2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ad2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ad36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ad42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1d9      	bne.n	800acfe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d017      	beq.n	800ad84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad5a:	4a15      	ldr	r2, [pc, #84]	@ (800adb0 <HAL_UART_IRQHandler+0x2c0>)
 800ad5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7f9 fe3d 	bl	80049e4 <HAL_DMA_Abort_IT>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d019      	beq.n	800ada4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ad7e:	4610      	mov	r0, r2
 800ad80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad82:	e00f      	b.n	800ada4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fa8b 	bl	800b2a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad8a:	e00b      	b.n	800ada4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fa87 	bl	800b2a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad92:	e007      	b.n	800ada4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fa83 	bl	800b2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ada2:	e253      	b.n	800b24c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ada4:	bf00      	nop
    return;
 800ada6:	e251      	b.n	800b24c <HAL_UART_IRQHandler+0x75c>
 800ada8:	10000001 	.word	0x10000001
 800adac:	04000120 	.word	0x04000120
 800adb0:	0800c645 	.word	0x0800c645

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adb8:	2b01      	cmp	r3, #1
 800adba:	f040 81e7 	bne.w	800b18c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800adbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adc2:	f003 0310 	and.w	r3, r3, #16
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 81e0 	beq.w	800b18c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800adcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800add0:	f003 0310 	and.w	r3, r3, #16
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 81d9 	beq.w	800b18c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2210      	movs	r2, #16
 800ade0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adec:	2b40      	cmp	r3, #64	@ 0x40
 800adee:	f040 8151 	bne.w	800b094 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a96      	ldr	r2, [pc, #600]	@ (800b054 <HAL_UART_IRQHandler+0x564>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d068      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a93      	ldr	r2, [pc, #588]	@ (800b058 <HAL_UART_IRQHandler+0x568>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d061      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a91      	ldr	r2, [pc, #580]	@ (800b05c <HAL_UART_IRQHandler+0x56c>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d05a      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a8e      	ldr	r2, [pc, #568]	@ (800b060 <HAL_UART_IRQHandler+0x570>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d053      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a8c      	ldr	r2, [pc, #560]	@ (800b064 <HAL_UART_IRQHandler+0x574>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d04c      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a89      	ldr	r2, [pc, #548]	@ (800b068 <HAL_UART_IRQHandler+0x578>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d045      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a87      	ldr	r2, [pc, #540]	@ (800b06c <HAL_UART_IRQHandler+0x57c>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d03e      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a84      	ldr	r2, [pc, #528]	@ (800b070 <HAL_UART_IRQHandler+0x580>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d037      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a82      	ldr	r2, [pc, #520]	@ (800b074 <HAL_UART_IRQHandler+0x584>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d030      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a7f      	ldr	r2, [pc, #508]	@ (800b078 <HAL_UART_IRQHandler+0x588>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d029      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a7d      	ldr	r2, [pc, #500]	@ (800b07c <HAL_UART_IRQHandler+0x58c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d022      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a7a      	ldr	r2, [pc, #488]	@ (800b080 <HAL_UART_IRQHandler+0x590>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d01b      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a78      	ldr	r2, [pc, #480]	@ (800b084 <HAL_UART_IRQHandler+0x594>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d014      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a75      	ldr	r2, [pc, #468]	@ (800b088 <HAL_UART_IRQHandler+0x598>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d00d      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a73      	ldr	r2, [pc, #460]	@ (800b08c <HAL_UART_IRQHandler+0x59c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d006      	beq.n	800aed2 <HAL_UART_IRQHandler+0x3e2>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a70      	ldr	r2, [pc, #448]	@ (800b090 <HAL_UART_IRQHandler+0x5a0>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d106      	bne.n	800aee0 <HAL_UART_IRQHandler+0x3f0>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	e005      	b.n	800aeec <HAL_UART_IRQHandler+0x3fc>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aef0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 81ab 	beq.w	800b250 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af04:	429a      	cmp	r2, r3
 800af06:	f080 81a3 	bcs.w	800b250 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af1a:	69db      	ldr	r3, [r3, #28]
 800af1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af20:	f000 8087 	beq.w	800b032 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800af38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800af52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800af5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800af5e:	e841 2300 	strex	r3, r2, [r1]
 800af62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800af66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1da      	bne.n	800af24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3308      	adds	r3, #8
 800af74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af78:	e853 3f00 	ldrex	r3, [r3]
 800af7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af80:	f023 0301 	bic.w	r3, r3, #1
 800af84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	3308      	adds	r3, #8
 800af8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800af96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af9e:	e841 2300 	strex	r3, r2, [r1]
 800afa2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800afa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1e1      	bne.n	800af6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3308      	adds	r3, #8
 800afb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afb4:	e853 3f00 	ldrex	r3, [r3]
 800afb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800afba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3308      	adds	r3, #8
 800afca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800afce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800afd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800afd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800afd6:	e841 2300 	strex	r3, r2, [r1]
 800afda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800afdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1e3      	bne.n	800afaa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2220      	movs	r2, #32
 800afe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800affe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b000:	f023 0310 	bic.w	r3, r3, #16
 800b004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	461a      	mov	r2, r3
 800b00e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b012:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b014:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b018:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e4      	bne.n	800aff0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7f9 f9bb 	bl	80043a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2202      	movs	r2, #2
 800b036:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b044:	b29b      	uxth	r3, r3
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	b29b      	uxth	r3, r3
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f931 	bl	800b2b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b052:	e0fd      	b.n	800b250 <HAL_UART_IRQHandler+0x760>
 800b054:	40020010 	.word	0x40020010
 800b058:	40020028 	.word	0x40020028
 800b05c:	40020040 	.word	0x40020040
 800b060:	40020058 	.word	0x40020058
 800b064:	40020070 	.word	0x40020070
 800b068:	40020088 	.word	0x40020088
 800b06c:	400200a0 	.word	0x400200a0
 800b070:	400200b8 	.word	0x400200b8
 800b074:	40020410 	.word	0x40020410
 800b078:	40020428 	.word	0x40020428
 800b07c:	40020440 	.word	0x40020440
 800b080:	40020458 	.word	0x40020458
 800b084:	40020470 	.word	0x40020470
 800b088:	40020488 	.word	0x40020488
 800b08c:	400204a0 	.word	0x400204a0
 800b090:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 80cf 	beq.w	800b254 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b0b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 80ca 	beq.w	800b254 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c8:	e853 3f00 	ldrex	r3, [r3]
 800b0cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b0e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0ea:	e841 2300 	strex	r3, r2, [r1]
 800b0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1e4      	bne.n	800b0c0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	623b      	str	r3, [r7, #32]
   return(result);
 800b106:	6a3a      	ldr	r2, [r7, #32]
 800b108:	4b55      	ldr	r3, [pc, #340]	@ (800b260 <HAL_UART_IRQHandler+0x770>)
 800b10a:	4013      	ands	r3, r2
 800b10c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3308      	adds	r3, #8
 800b116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b11a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b122:	e841 2300 	strex	r3, r2, [r1]
 800b126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e3      	bne.n	800b0f6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2220      	movs	r2, #32
 800b132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	e853 3f00 	ldrex	r3, [r3]
 800b14e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f023 0310 	bic.w	r3, r3, #16
 800b156:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b164:	61fb      	str	r3, [r7, #28]
 800b166:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b168:	69b9      	ldr	r1, [r7, #24]
 800b16a:	69fa      	ldr	r2, [r7, #28]
 800b16c:	e841 2300 	strex	r3, r2, [r1]
 800b170:	617b      	str	r3, [r7, #20]
   return(result);
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e4      	bne.n	800b142 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2202      	movs	r2, #2
 800b17c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b17e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f895 	bl	800b2b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b18a:	e063      	b.n	800b254 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00e      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x6c6>
 800b198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b19c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d008      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b1ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f001 fa89 	bl	800c6c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1b4:	e051      	b.n	800b25a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d014      	beq.n	800b1ec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d105      	bne.n	800b1da <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b1ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d008      	beq.n	800b1ec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d03a      	beq.n	800b258 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	4798      	blx	r3
    }
    return;
 800b1ea:	e035      	b.n	800b258 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d009      	beq.n	800b20c <HAL_UART_IRQHandler+0x71c>
 800b1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f001 fa33 	bl	800c670 <UART_EndTransmit_IT>
    return;
 800b20a:	e026      	b.n	800b25a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b20c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <HAL_UART_IRQHandler+0x73c>
 800b218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b21c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f001 fa62 	bl	800c6ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b22a:	e016      	b.n	800b25a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d010      	beq.n	800b25a <HAL_UART_IRQHandler+0x76a>
 800b238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	da0c      	bge.n	800b25a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 fa4a 	bl	800c6da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b246:	e008      	b.n	800b25a <HAL_UART_IRQHandler+0x76a>
      return;
 800b248:	bf00      	nop
 800b24a:	e006      	b.n	800b25a <HAL_UART_IRQHandler+0x76a>
    return;
 800b24c:	bf00      	nop
 800b24e:	e004      	b.n	800b25a <HAL_UART_IRQHandler+0x76a>
      return;
 800b250:	bf00      	nop
 800b252:	e002      	b.n	800b25a <HAL_UART_IRQHandler+0x76a>
      return;
 800b254:	bf00      	nop
 800b256:	e000      	b.n	800b25a <HAL_UART_IRQHandler+0x76a>
    return;
 800b258:	bf00      	nop
  }
}
 800b25a:	37e8      	adds	r7, #232	@ 0xe8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	effffffe 	.word	0xeffffffe

0800b264 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b26c:	bf00      	nop
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2d0:	b092      	sub	sp, #72	@ 0x48
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	431a      	orrs	r2, r3
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	431a      	orrs	r2, r3
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	69db      	ldr	r3, [r3, #28]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	4bbe      	ldr	r3, [pc, #760]	@ (800b5f4 <UART_SetConfig+0x328>)
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	6812      	ldr	r2, [r2, #0]
 800b302:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b304:	430b      	orrs	r3, r1
 800b306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	68da      	ldr	r2, [r3, #12]
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	430a      	orrs	r2, r1
 800b31c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4ab3      	ldr	r2, [pc, #716]	@ (800b5f8 <UART_SetConfig+0x32c>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d004      	beq.n	800b338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b334:	4313      	orrs	r3, r2
 800b336:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	689a      	ldr	r2, [r3, #8]
 800b33e:	4baf      	ldr	r3, [pc, #700]	@ (800b5fc <UART_SetConfig+0x330>)
 800b340:	4013      	ands	r3, r2
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	6812      	ldr	r2, [r2, #0]
 800b346:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b348:	430b      	orrs	r3, r1
 800b34a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b352:	f023 010f 	bic.w	r1, r3, #15
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4aa6      	ldr	r2, [pc, #664]	@ (800b600 <UART_SetConfig+0x334>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d177      	bne.n	800b45c <UART_SetConfig+0x190>
 800b36c:	4ba5      	ldr	r3, [pc, #660]	@ (800b604 <UART_SetConfig+0x338>)
 800b36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b374:	2b28      	cmp	r3, #40	@ 0x28
 800b376:	d86d      	bhi.n	800b454 <UART_SetConfig+0x188>
 800b378:	a201      	add	r2, pc, #4	@ (adr r2, 800b380 <UART_SetConfig+0xb4>)
 800b37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37e:	bf00      	nop
 800b380:	0800b425 	.word	0x0800b425
 800b384:	0800b455 	.word	0x0800b455
 800b388:	0800b455 	.word	0x0800b455
 800b38c:	0800b455 	.word	0x0800b455
 800b390:	0800b455 	.word	0x0800b455
 800b394:	0800b455 	.word	0x0800b455
 800b398:	0800b455 	.word	0x0800b455
 800b39c:	0800b455 	.word	0x0800b455
 800b3a0:	0800b42d 	.word	0x0800b42d
 800b3a4:	0800b455 	.word	0x0800b455
 800b3a8:	0800b455 	.word	0x0800b455
 800b3ac:	0800b455 	.word	0x0800b455
 800b3b0:	0800b455 	.word	0x0800b455
 800b3b4:	0800b455 	.word	0x0800b455
 800b3b8:	0800b455 	.word	0x0800b455
 800b3bc:	0800b455 	.word	0x0800b455
 800b3c0:	0800b435 	.word	0x0800b435
 800b3c4:	0800b455 	.word	0x0800b455
 800b3c8:	0800b455 	.word	0x0800b455
 800b3cc:	0800b455 	.word	0x0800b455
 800b3d0:	0800b455 	.word	0x0800b455
 800b3d4:	0800b455 	.word	0x0800b455
 800b3d8:	0800b455 	.word	0x0800b455
 800b3dc:	0800b455 	.word	0x0800b455
 800b3e0:	0800b43d 	.word	0x0800b43d
 800b3e4:	0800b455 	.word	0x0800b455
 800b3e8:	0800b455 	.word	0x0800b455
 800b3ec:	0800b455 	.word	0x0800b455
 800b3f0:	0800b455 	.word	0x0800b455
 800b3f4:	0800b455 	.word	0x0800b455
 800b3f8:	0800b455 	.word	0x0800b455
 800b3fc:	0800b455 	.word	0x0800b455
 800b400:	0800b445 	.word	0x0800b445
 800b404:	0800b455 	.word	0x0800b455
 800b408:	0800b455 	.word	0x0800b455
 800b40c:	0800b455 	.word	0x0800b455
 800b410:	0800b455 	.word	0x0800b455
 800b414:	0800b455 	.word	0x0800b455
 800b418:	0800b455 	.word	0x0800b455
 800b41c:	0800b455 	.word	0x0800b455
 800b420:	0800b44d 	.word	0x0800b44d
 800b424:	2301      	movs	r3, #1
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42a:	e222      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b42c:	2304      	movs	r3, #4
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b432:	e21e      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b434:	2308      	movs	r3, #8
 800b436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b43a:	e21a      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b43c:	2310      	movs	r3, #16
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b442:	e216      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b444:	2320      	movs	r3, #32
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b44a:	e212      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b44c:	2340      	movs	r3, #64	@ 0x40
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b452:	e20e      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b454:	2380      	movs	r3, #128	@ 0x80
 800b456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b45a:	e20a      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a69      	ldr	r2, [pc, #420]	@ (800b608 <UART_SetConfig+0x33c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d130      	bne.n	800b4c8 <UART_SetConfig+0x1fc>
 800b466:	4b67      	ldr	r3, [pc, #412]	@ (800b604 <UART_SetConfig+0x338>)
 800b468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b46a:	f003 0307 	and.w	r3, r3, #7
 800b46e:	2b05      	cmp	r3, #5
 800b470:	d826      	bhi.n	800b4c0 <UART_SetConfig+0x1f4>
 800b472:	a201      	add	r2, pc, #4	@ (adr r2, 800b478 <UART_SetConfig+0x1ac>)
 800b474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b478:	0800b491 	.word	0x0800b491
 800b47c:	0800b499 	.word	0x0800b499
 800b480:	0800b4a1 	.word	0x0800b4a1
 800b484:	0800b4a9 	.word	0x0800b4a9
 800b488:	0800b4b1 	.word	0x0800b4b1
 800b48c:	0800b4b9 	.word	0x0800b4b9
 800b490:	2300      	movs	r3, #0
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b496:	e1ec      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b498:	2304      	movs	r3, #4
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49e:	e1e8      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b4a0:	2308      	movs	r3, #8
 800b4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a6:	e1e4      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b4a8:	2310      	movs	r3, #16
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ae:	e1e0      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b4b0:	2320      	movs	r3, #32
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b6:	e1dc      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b4b8:	2340      	movs	r3, #64	@ 0x40
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4be:	e1d8      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b4c0:	2380      	movs	r3, #128	@ 0x80
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4c6:	e1d4      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a4f      	ldr	r2, [pc, #316]	@ (800b60c <UART_SetConfig+0x340>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d130      	bne.n	800b534 <UART_SetConfig+0x268>
 800b4d2:	4b4c      	ldr	r3, [pc, #304]	@ (800b604 <UART_SetConfig+0x338>)
 800b4d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4d6:	f003 0307 	and.w	r3, r3, #7
 800b4da:	2b05      	cmp	r3, #5
 800b4dc:	d826      	bhi.n	800b52c <UART_SetConfig+0x260>
 800b4de:	a201      	add	r2, pc, #4	@ (adr r2, 800b4e4 <UART_SetConfig+0x218>)
 800b4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e4:	0800b4fd 	.word	0x0800b4fd
 800b4e8:	0800b505 	.word	0x0800b505
 800b4ec:	0800b50d 	.word	0x0800b50d
 800b4f0:	0800b515 	.word	0x0800b515
 800b4f4:	0800b51d 	.word	0x0800b51d
 800b4f8:	0800b525 	.word	0x0800b525
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b502:	e1b6      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b504:	2304      	movs	r3, #4
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50a:	e1b2      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b50c:	2308      	movs	r3, #8
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b512:	e1ae      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b514:	2310      	movs	r3, #16
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b51a:	e1aa      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b51c:	2320      	movs	r3, #32
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b522:	e1a6      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b524:	2340      	movs	r3, #64	@ 0x40
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52a:	e1a2      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b52c:	2380      	movs	r3, #128	@ 0x80
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b532:	e19e      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a35      	ldr	r2, [pc, #212]	@ (800b610 <UART_SetConfig+0x344>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d130      	bne.n	800b5a0 <UART_SetConfig+0x2d4>
 800b53e:	4b31      	ldr	r3, [pc, #196]	@ (800b604 <UART_SetConfig+0x338>)
 800b540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	2b05      	cmp	r3, #5
 800b548:	d826      	bhi.n	800b598 <UART_SetConfig+0x2cc>
 800b54a:	a201      	add	r2, pc, #4	@ (adr r2, 800b550 <UART_SetConfig+0x284>)
 800b54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b550:	0800b569 	.word	0x0800b569
 800b554:	0800b571 	.word	0x0800b571
 800b558:	0800b579 	.word	0x0800b579
 800b55c:	0800b581 	.word	0x0800b581
 800b560:	0800b589 	.word	0x0800b589
 800b564:	0800b591 	.word	0x0800b591
 800b568:	2300      	movs	r3, #0
 800b56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b56e:	e180      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b570:	2304      	movs	r3, #4
 800b572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b576:	e17c      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b578:	2308      	movs	r3, #8
 800b57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b57e:	e178      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b580:	2310      	movs	r3, #16
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b586:	e174      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b588:	2320      	movs	r3, #32
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58e:	e170      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b590:	2340      	movs	r3, #64	@ 0x40
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b596:	e16c      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b598:	2380      	movs	r3, #128	@ 0x80
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59e:	e168      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a1b      	ldr	r2, [pc, #108]	@ (800b614 <UART_SetConfig+0x348>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d142      	bne.n	800b630 <UART_SetConfig+0x364>
 800b5aa:	4b16      	ldr	r3, [pc, #88]	@ (800b604 <UART_SetConfig+0x338>)
 800b5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ae:	f003 0307 	and.w	r3, r3, #7
 800b5b2:	2b05      	cmp	r3, #5
 800b5b4:	d838      	bhi.n	800b628 <UART_SetConfig+0x35c>
 800b5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5bc <UART_SetConfig+0x2f0>)
 800b5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5bc:	0800b5d5 	.word	0x0800b5d5
 800b5c0:	0800b5dd 	.word	0x0800b5dd
 800b5c4:	0800b5e5 	.word	0x0800b5e5
 800b5c8:	0800b5ed 	.word	0x0800b5ed
 800b5cc:	0800b619 	.word	0x0800b619
 800b5d0:	0800b621 	.word	0x0800b621
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5da:	e14a      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b5dc:	2304      	movs	r3, #4
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5e2:	e146      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b5e4:	2308      	movs	r3, #8
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ea:	e142      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b5ec:	2310      	movs	r3, #16
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f2:	e13e      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b5f4:	cfff69f3 	.word	0xcfff69f3
 800b5f8:	58000c00 	.word	0x58000c00
 800b5fc:	11fff4ff 	.word	0x11fff4ff
 800b600:	40011000 	.word	0x40011000
 800b604:	58024400 	.word	0x58024400
 800b608:	40004400 	.word	0x40004400
 800b60c:	40004800 	.word	0x40004800
 800b610:	40004c00 	.word	0x40004c00
 800b614:	40005000 	.word	0x40005000
 800b618:	2320      	movs	r3, #32
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61e:	e128      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b620:	2340      	movs	r3, #64	@ 0x40
 800b622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b626:	e124      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b628:	2380      	movs	r3, #128	@ 0x80
 800b62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b62e:	e120      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4acb      	ldr	r2, [pc, #812]	@ (800b964 <UART_SetConfig+0x698>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d176      	bne.n	800b728 <UART_SetConfig+0x45c>
 800b63a:	4bcb      	ldr	r3, [pc, #812]	@ (800b968 <UART_SetConfig+0x69c>)
 800b63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b63e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b642:	2b28      	cmp	r3, #40	@ 0x28
 800b644:	d86c      	bhi.n	800b720 <UART_SetConfig+0x454>
 800b646:	a201      	add	r2, pc, #4	@ (adr r2, 800b64c <UART_SetConfig+0x380>)
 800b648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64c:	0800b6f1 	.word	0x0800b6f1
 800b650:	0800b721 	.word	0x0800b721
 800b654:	0800b721 	.word	0x0800b721
 800b658:	0800b721 	.word	0x0800b721
 800b65c:	0800b721 	.word	0x0800b721
 800b660:	0800b721 	.word	0x0800b721
 800b664:	0800b721 	.word	0x0800b721
 800b668:	0800b721 	.word	0x0800b721
 800b66c:	0800b6f9 	.word	0x0800b6f9
 800b670:	0800b721 	.word	0x0800b721
 800b674:	0800b721 	.word	0x0800b721
 800b678:	0800b721 	.word	0x0800b721
 800b67c:	0800b721 	.word	0x0800b721
 800b680:	0800b721 	.word	0x0800b721
 800b684:	0800b721 	.word	0x0800b721
 800b688:	0800b721 	.word	0x0800b721
 800b68c:	0800b701 	.word	0x0800b701
 800b690:	0800b721 	.word	0x0800b721
 800b694:	0800b721 	.word	0x0800b721
 800b698:	0800b721 	.word	0x0800b721
 800b69c:	0800b721 	.word	0x0800b721
 800b6a0:	0800b721 	.word	0x0800b721
 800b6a4:	0800b721 	.word	0x0800b721
 800b6a8:	0800b721 	.word	0x0800b721
 800b6ac:	0800b709 	.word	0x0800b709
 800b6b0:	0800b721 	.word	0x0800b721
 800b6b4:	0800b721 	.word	0x0800b721
 800b6b8:	0800b721 	.word	0x0800b721
 800b6bc:	0800b721 	.word	0x0800b721
 800b6c0:	0800b721 	.word	0x0800b721
 800b6c4:	0800b721 	.word	0x0800b721
 800b6c8:	0800b721 	.word	0x0800b721
 800b6cc:	0800b711 	.word	0x0800b711
 800b6d0:	0800b721 	.word	0x0800b721
 800b6d4:	0800b721 	.word	0x0800b721
 800b6d8:	0800b721 	.word	0x0800b721
 800b6dc:	0800b721 	.word	0x0800b721
 800b6e0:	0800b721 	.word	0x0800b721
 800b6e4:	0800b721 	.word	0x0800b721
 800b6e8:	0800b721 	.word	0x0800b721
 800b6ec:	0800b719 	.word	0x0800b719
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f6:	e0bc      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b6f8:	2304      	movs	r3, #4
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fe:	e0b8      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b700:	2308      	movs	r3, #8
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b706:	e0b4      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b708:	2310      	movs	r3, #16
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70e:	e0b0      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b710:	2320      	movs	r3, #32
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b716:	e0ac      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b718:	2340      	movs	r3, #64	@ 0x40
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71e:	e0a8      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b720:	2380      	movs	r3, #128	@ 0x80
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b726:	e0a4      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a8f      	ldr	r2, [pc, #572]	@ (800b96c <UART_SetConfig+0x6a0>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d130      	bne.n	800b794 <UART_SetConfig+0x4c8>
 800b732:	4b8d      	ldr	r3, [pc, #564]	@ (800b968 <UART_SetConfig+0x69c>)
 800b734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b736:	f003 0307 	and.w	r3, r3, #7
 800b73a:	2b05      	cmp	r3, #5
 800b73c:	d826      	bhi.n	800b78c <UART_SetConfig+0x4c0>
 800b73e:	a201      	add	r2, pc, #4	@ (adr r2, 800b744 <UART_SetConfig+0x478>)
 800b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b744:	0800b75d 	.word	0x0800b75d
 800b748:	0800b765 	.word	0x0800b765
 800b74c:	0800b76d 	.word	0x0800b76d
 800b750:	0800b775 	.word	0x0800b775
 800b754:	0800b77d 	.word	0x0800b77d
 800b758:	0800b785 	.word	0x0800b785
 800b75c:	2300      	movs	r3, #0
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b762:	e086      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b764:	2304      	movs	r3, #4
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76a:	e082      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b76c:	2308      	movs	r3, #8
 800b76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b772:	e07e      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b774:	2310      	movs	r3, #16
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77a:	e07a      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b77c:	2320      	movs	r3, #32
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b782:	e076      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b784:	2340      	movs	r3, #64	@ 0x40
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78a:	e072      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b78c:	2380      	movs	r3, #128	@ 0x80
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b792:	e06e      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a75      	ldr	r2, [pc, #468]	@ (800b970 <UART_SetConfig+0x6a4>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d130      	bne.n	800b800 <UART_SetConfig+0x534>
 800b79e:	4b72      	ldr	r3, [pc, #456]	@ (800b968 <UART_SetConfig+0x69c>)
 800b7a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b05      	cmp	r3, #5
 800b7a8:	d826      	bhi.n	800b7f8 <UART_SetConfig+0x52c>
 800b7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b7b0 <UART_SetConfig+0x4e4>)
 800b7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b0:	0800b7c9 	.word	0x0800b7c9
 800b7b4:	0800b7d1 	.word	0x0800b7d1
 800b7b8:	0800b7d9 	.word	0x0800b7d9
 800b7bc:	0800b7e1 	.word	0x0800b7e1
 800b7c0:	0800b7e9 	.word	0x0800b7e9
 800b7c4:	0800b7f1 	.word	0x0800b7f1
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ce:	e050      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b7d0:	2304      	movs	r3, #4
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7d6:	e04c      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b7d8:	2308      	movs	r3, #8
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7de:	e048      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7e6:	e044      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b7e8:	2320      	movs	r3, #32
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ee:	e040      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b7f0:	2340      	movs	r3, #64	@ 0x40
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f6:	e03c      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b7f8:	2380      	movs	r3, #128	@ 0x80
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fe:	e038      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a5b      	ldr	r2, [pc, #364]	@ (800b974 <UART_SetConfig+0x6a8>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d130      	bne.n	800b86c <UART_SetConfig+0x5a0>
 800b80a:	4b57      	ldr	r3, [pc, #348]	@ (800b968 <UART_SetConfig+0x69c>)
 800b80c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b80e:	f003 0307 	and.w	r3, r3, #7
 800b812:	2b05      	cmp	r3, #5
 800b814:	d826      	bhi.n	800b864 <UART_SetConfig+0x598>
 800b816:	a201      	add	r2, pc, #4	@ (adr r2, 800b81c <UART_SetConfig+0x550>)
 800b818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81c:	0800b835 	.word	0x0800b835
 800b820:	0800b83d 	.word	0x0800b83d
 800b824:	0800b845 	.word	0x0800b845
 800b828:	0800b84d 	.word	0x0800b84d
 800b82c:	0800b855 	.word	0x0800b855
 800b830:	0800b85d 	.word	0x0800b85d
 800b834:	2302      	movs	r3, #2
 800b836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b83a:	e01a      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b83c:	2304      	movs	r3, #4
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b842:	e016      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b844:	2308      	movs	r3, #8
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84a:	e012      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b84c:	2310      	movs	r3, #16
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b852:	e00e      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b854:	2320      	movs	r3, #32
 800b856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b85a:	e00a      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b85c:	2340      	movs	r3, #64	@ 0x40
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b862:	e006      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b864:	2380      	movs	r3, #128	@ 0x80
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86a:	e002      	b.n	800b872 <UART_SetConfig+0x5a6>
 800b86c:	2380      	movs	r3, #128	@ 0x80
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a3f      	ldr	r2, [pc, #252]	@ (800b974 <UART_SetConfig+0x6a8>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	f040 80f8 	bne.w	800ba6e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b87e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b882:	2b20      	cmp	r3, #32
 800b884:	dc46      	bgt.n	800b914 <UART_SetConfig+0x648>
 800b886:	2b02      	cmp	r3, #2
 800b888:	f2c0 8082 	blt.w	800b990 <UART_SetConfig+0x6c4>
 800b88c:	3b02      	subs	r3, #2
 800b88e:	2b1e      	cmp	r3, #30
 800b890:	d87e      	bhi.n	800b990 <UART_SetConfig+0x6c4>
 800b892:	a201      	add	r2, pc, #4	@ (adr r2, 800b898 <UART_SetConfig+0x5cc>)
 800b894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b898:	0800b91b 	.word	0x0800b91b
 800b89c:	0800b991 	.word	0x0800b991
 800b8a0:	0800b923 	.word	0x0800b923
 800b8a4:	0800b991 	.word	0x0800b991
 800b8a8:	0800b991 	.word	0x0800b991
 800b8ac:	0800b991 	.word	0x0800b991
 800b8b0:	0800b933 	.word	0x0800b933
 800b8b4:	0800b991 	.word	0x0800b991
 800b8b8:	0800b991 	.word	0x0800b991
 800b8bc:	0800b991 	.word	0x0800b991
 800b8c0:	0800b991 	.word	0x0800b991
 800b8c4:	0800b991 	.word	0x0800b991
 800b8c8:	0800b991 	.word	0x0800b991
 800b8cc:	0800b991 	.word	0x0800b991
 800b8d0:	0800b943 	.word	0x0800b943
 800b8d4:	0800b991 	.word	0x0800b991
 800b8d8:	0800b991 	.word	0x0800b991
 800b8dc:	0800b991 	.word	0x0800b991
 800b8e0:	0800b991 	.word	0x0800b991
 800b8e4:	0800b991 	.word	0x0800b991
 800b8e8:	0800b991 	.word	0x0800b991
 800b8ec:	0800b991 	.word	0x0800b991
 800b8f0:	0800b991 	.word	0x0800b991
 800b8f4:	0800b991 	.word	0x0800b991
 800b8f8:	0800b991 	.word	0x0800b991
 800b8fc:	0800b991 	.word	0x0800b991
 800b900:	0800b991 	.word	0x0800b991
 800b904:	0800b991 	.word	0x0800b991
 800b908:	0800b991 	.word	0x0800b991
 800b90c:	0800b991 	.word	0x0800b991
 800b910:	0800b983 	.word	0x0800b983
 800b914:	2b40      	cmp	r3, #64	@ 0x40
 800b916:	d037      	beq.n	800b988 <UART_SetConfig+0x6bc>
 800b918:	e03a      	b.n	800b990 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b91a:	f7fd ff8b 	bl	8009834 <HAL_RCCEx_GetD3PCLK1Freq>
 800b91e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b920:	e03c      	b.n	800b99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b926:	4618      	mov	r0, r3
 800b928:	f7fd ff9a 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b930:	e034      	b.n	800b99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b932:	f107 0318 	add.w	r3, r7, #24
 800b936:	4618      	mov	r0, r3
 800b938:	f7fe f8e6 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b940:	e02c      	b.n	800b99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b942:	4b09      	ldr	r3, [pc, #36]	@ (800b968 <UART_SetConfig+0x69c>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 0320 	and.w	r3, r3, #32
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d016      	beq.n	800b97c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b94e:	4b06      	ldr	r3, [pc, #24]	@ (800b968 <UART_SetConfig+0x69c>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	08db      	lsrs	r3, r3, #3
 800b954:	f003 0303 	and.w	r3, r3, #3
 800b958:	4a07      	ldr	r2, [pc, #28]	@ (800b978 <UART_SetConfig+0x6ac>)
 800b95a:	fa22 f303 	lsr.w	r3, r2, r3
 800b95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b960:	e01c      	b.n	800b99c <UART_SetConfig+0x6d0>
 800b962:	bf00      	nop
 800b964:	40011400 	.word	0x40011400
 800b968:	58024400 	.word	0x58024400
 800b96c:	40007800 	.word	0x40007800
 800b970:	40007c00 	.word	0x40007c00
 800b974:	58000c00 	.word	0x58000c00
 800b978:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b97c:	4b9d      	ldr	r3, [pc, #628]	@ (800bbf4 <UART_SetConfig+0x928>)
 800b97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b980:	e00c      	b.n	800b99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b982:	4b9d      	ldr	r3, [pc, #628]	@ (800bbf8 <UART_SetConfig+0x92c>)
 800b984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b986:	e009      	b.n	800b99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b98e:	e005      	b.n	800b99c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b990:	2300      	movs	r3, #0
 800b992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b99a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 81de 	beq.w	800bd60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a8:	4a94      	ldr	r2, [pc, #592]	@ (800bbfc <UART_SetConfig+0x930>)
 800b9aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	4413      	add	r3, r2
 800b9c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d305      	bcc.n	800b9d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d903      	bls.n	800b9dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b9da:	e1c1      	b.n	800bd60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9de:	2200      	movs	r2, #0
 800b9e0:	60bb      	str	r3, [r7, #8]
 800b9e2:	60fa      	str	r2, [r7, #12]
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e8:	4a84      	ldr	r2, [pc, #528]	@ (800bbfc <UART_SetConfig+0x930>)
 800b9ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	603b      	str	r3, [r7, #0]
 800b9f4:	607a      	str	r2, [r7, #4]
 800b9f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9fe:	f7f4 fc81 	bl	8000304 <__aeabi_uldivmod>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	4610      	mov	r0, r2
 800ba08:	4619      	mov	r1, r3
 800ba0a:	f04f 0200 	mov.w	r2, #0
 800ba0e:	f04f 0300 	mov.w	r3, #0
 800ba12:	020b      	lsls	r3, r1, #8
 800ba14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba18:	0202      	lsls	r2, r0, #8
 800ba1a:	6979      	ldr	r1, [r7, #20]
 800ba1c:	6849      	ldr	r1, [r1, #4]
 800ba1e:	0849      	lsrs	r1, r1, #1
 800ba20:	2000      	movs	r0, #0
 800ba22:	460c      	mov	r4, r1
 800ba24:	4605      	mov	r5, r0
 800ba26:	eb12 0804 	adds.w	r8, r2, r4
 800ba2a:	eb43 0905 	adc.w	r9, r3, r5
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	469a      	mov	sl, r3
 800ba36:	4693      	mov	fp, r2
 800ba38:	4652      	mov	r2, sl
 800ba3a:	465b      	mov	r3, fp
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	4649      	mov	r1, r9
 800ba40:	f7f4 fc60 	bl	8000304 <__aeabi_uldivmod>
 800ba44:	4602      	mov	r2, r0
 800ba46:	460b      	mov	r3, r1
 800ba48:	4613      	mov	r3, r2
 800ba4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba52:	d308      	bcc.n	800ba66 <UART_SetConfig+0x79a>
 800ba54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba5a:	d204      	bcs.n	800ba66 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba62:	60da      	str	r2, [r3, #12]
 800ba64:	e17c      	b.n	800bd60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba6c:	e178      	b.n	800bd60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	69db      	ldr	r3, [r3, #28]
 800ba72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba76:	f040 80c5 	bne.w	800bc04 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ba7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba7e:	2b20      	cmp	r3, #32
 800ba80:	dc48      	bgt.n	800bb14 <UART_SetConfig+0x848>
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	db7b      	blt.n	800bb7e <UART_SetConfig+0x8b2>
 800ba86:	2b20      	cmp	r3, #32
 800ba88:	d879      	bhi.n	800bb7e <UART_SetConfig+0x8b2>
 800ba8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba90 <UART_SetConfig+0x7c4>)
 800ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba90:	0800bb1b 	.word	0x0800bb1b
 800ba94:	0800bb23 	.word	0x0800bb23
 800ba98:	0800bb7f 	.word	0x0800bb7f
 800ba9c:	0800bb7f 	.word	0x0800bb7f
 800baa0:	0800bb2b 	.word	0x0800bb2b
 800baa4:	0800bb7f 	.word	0x0800bb7f
 800baa8:	0800bb7f 	.word	0x0800bb7f
 800baac:	0800bb7f 	.word	0x0800bb7f
 800bab0:	0800bb3b 	.word	0x0800bb3b
 800bab4:	0800bb7f 	.word	0x0800bb7f
 800bab8:	0800bb7f 	.word	0x0800bb7f
 800babc:	0800bb7f 	.word	0x0800bb7f
 800bac0:	0800bb7f 	.word	0x0800bb7f
 800bac4:	0800bb7f 	.word	0x0800bb7f
 800bac8:	0800bb7f 	.word	0x0800bb7f
 800bacc:	0800bb7f 	.word	0x0800bb7f
 800bad0:	0800bb4b 	.word	0x0800bb4b
 800bad4:	0800bb7f 	.word	0x0800bb7f
 800bad8:	0800bb7f 	.word	0x0800bb7f
 800badc:	0800bb7f 	.word	0x0800bb7f
 800bae0:	0800bb7f 	.word	0x0800bb7f
 800bae4:	0800bb7f 	.word	0x0800bb7f
 800bae8:	0800bb7f 	.word	0x0800bb7f
 800baec:	0800bb7f 	.word	0x0800bb7f
 800baf0:	0800bb7f 	.word	0x0800bb7f
 800baf4:	0800bb7f 	.word	0x0800bb7f
 800baf8:	0800bb7f 	.word	0x0800bb7f
 800bafc:	0800bb7f 	.word	0x0800bb7f
 800bb00:	0800bb7f 	.word	0x0800bb7f
 800bb04:	0800bb7f 	.word	0x0800bb7f
 800bb08:	0800bb7f 	.word	0x0800bb7f
 800bb0c:	0800bb7f 	.word	0x0800bb7f
 800bb10:	0800bb71 	.word	0x0800bb71
 800bb14:	2b40      	cmp	r3, #64	@ 0x40
 800bb16:	d02e      	beq.n	800bb76 <UART_SetConfig+0x8aa>
 800bb18:	e031      	b.n	800bb7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb1a:	f7fb fe93 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 800bb1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb20:	e033      	b.n	800bb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb22:	f7fb fea5 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 800bb26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb28:	e02f      	b.n	800bb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fd fe96 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb38:	e027      	b.n	800bb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb3a:	f107 0318 	add.w	r3, r7, #24
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fd ffe2 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb48:	e01f      	b.n	800bb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb4a:	4b2d      	ldr	r3, [pc, #180]	@ (800bc00 <UART_SetConfig+0x934>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 0320 	and.w	r3, r3, #32
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d009      	beq.n	800bb6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb56:	4b2a      	ldr	r3, [pc, #168]	@ (800bc00 <UART_SetConfig+0x934>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	08db      	lsrs	r3, r3, #3
 800bb5c:	f003 0303 	and.w	r3, r3, #3
 800bb60:	4a24      	ldr	r2, [pc, #144]	@ (800bbf4 <UART_SetConfig+0x928>)
 800bb62:	fa22 f303 	lsr.w	r3, r2, r3
 800bb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb68:	e00f      	b.n	800bb8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bb6a:	4b22      	ldr	r3, [pc, #136]	@ (800bbf4 <UART_SetConfig+0x928>)
 800bb6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb6e:	e00c      	b.n	800bb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb70:	4b21      	ldr	r3, [pc, #132]	@ (800bbf8 <UART_SetConfig+0x92c>)
 800bb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb74:	e009      	b.n	800bb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb7c:	e005      	b.n	800bb8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bb88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 80e7 	beq.w	800bd60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb96:	4a19      	ldr	r2, [pc, #100]	@ (800bbfc <UART_SetConfig+0x930>)
 800bb98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bba4:	005a      	lsls	r2, r3, #1
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	085b      	lsrs	r3, r3, #1
 800bbac:	441a      	add	r2, r3
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbba:	2b0f      	cmp	r3, #15
 800bbbc:	d916      	bls.n	800bbec <UART_SetConfig+0x920>
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbc4:	d212      	bcs.n	800bbec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	f023 030f 	bic.w	r3, r3, #15
 800bbce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd2:	085b      	lsrs	r3, r3, #1
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	f003 0307 	and.w	r3, r3, #7
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bbe8:	60da      	str	r2, [r3, #12]
 800bbea:	e0b9      	b.n	800bd60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bbf2:	e0b5      	b.n	800bd60 <UART_SetConfig+0xa94>
 800bbf4:	03d09000 	.word	0x03d09000
 800bbf8:	003d0900 	.word	0x003d0900
 800bbfc:	08014020 	.word	0x08014020
 800bc00:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc08:	2b20      	cmp	r3, #32
 800bc0a:	dc49      	bgt.n	800bca0 <UART_SetConfig+0x9d4>
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	db7c      	blt.n	800bd0a <UART_SetConfig+0xa3e>
 800bc10:	2b20      	cmp	r3, #32
 800bc12:	d87a      	bhi.n	800bd0a <UART_SetConfig+0xa3e>
 800bc14:	a201      	add	r2, pc, #4	@ (adr r2, 800bc1c <UART_SetConfig+0x950>)
 800bc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1a:	bf00      	nop
 800bc1c:	0800bca7 	.word	0x0800bca7
 800bc20:	0800bcaf 	.word	0x0800bcaf
 800bc24:	0800bd0b 	.word	0x0800bd0b
 800bc28:	0800bd0b 	.word	0x0800bd0b
 800bc2c:	0800bcb7 	.word	0x0800bcb7
 800bc30:	0800bd0b 	.word	0x0800bd0b
 800bc34:	0800bd0b 	.word	0x0800bd0b
 800bc38:	0800bd0b 	.word	0x0800bd0b
 800bc3c:	0800bcc7 	.word	0x0800bcc7
 800bc40:	0800bd0b 	.word	0x0800bd0b
 800bc44:	0800bd0b 	.word	0x0800bd0b
 800bc48:	0800bd0b 	.word	0x0800bd0b
 800bc4c:	0800bd0b 	.word	0x0800bd0b
 800bc50:	0800bd0b 	.word	0x0800bd0b
 800bc54:	0800bd0b 	.word	0x0800bd0b
 800bc58:	0800bd0b 	.word	0x0800bd0b
 800bc5c:	0800bcd7 	.word	0x0800bcd7
 800bc60:	0800bd0b 	.word	0x0800bd0b
 800bc64:	0800bd0b 	.word	0x0800bd0b
 800bc68:	0800bd0b 	.word	0x0800bd0b
 800bc6c:	0800bd0b 	.word	0x0800bd0b
 800bc70:	0800bd0b 	.word	0x0800bd0b
 800bc74:	0800bd0b 	.word	0x0800bd0b
 800bc78:	0800bd0b 	.word	0x0800bd0b
 800bc7c:	0800bd0b 	.word	0x0800bd0b
 800bc80:	0800bd0b 	.word	0x0800bd0b
 800bc84:	0800bd0b 	.word	0x0800bd0b
 800bc88:	0800bd0b 	.word	0x0800bd0b
 800bc8c:	0800bd0b 	.word	0x0800bd0b
 800bc90:	0800bd0b 	.word	0x0800bd0b
 800bc94:	0800bd0b 	.word	0x0800bd0b
 800bc98:	0800bd0b 	.word	0x0800bd0b
 800bc9c:	0800bcfd 	.word	0x0800bcfd
 800bca0:	2b40      	cmp	r3, #64	@ 0x40
 800bca2:	d02e      	beq.n	800bd02 <UART_SetConfig+0xa36>
 800bca4:	e031      	b.n	800bd0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bca6:	f7fb fdcd 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 800bcaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bcac:	e033      	b.n	800bd16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcae:	f7fb fddf 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 800bcb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bcb4:	e02f      	b.n	800bd16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fd fdd0 	bl	8009860 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bcc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc4:	e027      	b.n	800bd16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcc6:	f107 0318 	add.w	r3, r7, #24
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fd ff1c 	bl	8009b08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd4:	e01f      	b.n	800bd16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcd6:	4b2d      	ldr	r3, [pc, #180]	@ (800bd8c <UART_SetConfig+0xac0>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 0320 	and.w	r3, r3, #32
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d009      	beq.n	800bcf6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bce2:	4b2a      	ldr	r3, [pc, #168]	@ (800bd8c <UART_SetConfig+0xac0>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	08db      	lsrs	r3, r3, #3
 800bce8:	f003 0303 	and.w	r3, r3, #3
 800bcec:	4a28      	ldr	r2, [pc, #160]	@ (800bd90 <UART_SetConfig+0xac4>)
 800bcee:	fa22 f303 	lsr.w	r3, r2, r3
 800bcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bcf4:	e00f      	b.n	800bd16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bcf6:	4b26      	ldr	r3, [pc, #152]	@ (800bd90 <UART_SetConfig+0xac4>)
 800bcf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcfa:	e00c      	b.n	800bd16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bcfc:	4b25      	ldr	r3, [pc, #148]	@ (800bd94 <UART_SetConfig+0xac8>)
 800bcfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd00:	e009      	b.n	800bd16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd08:	e005      	b.n	800bd16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bd14:	bf00      	nop
    }

    if (pclk != 0U)
 800bd16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d021      	beq.n	800bd60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd20:	4a1d      	ldr	r2, [pc, #116]	@ (800bd98 <UART_SetConfig+0xacc>)
 800bd22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd26:	461a      	mov	r2, r3
 800bd28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	085b      	lsrs	r3, r3, #1
 800bd34:	441a      	add	r2, r3
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd42:	2b0f      	cmp	r3, #15
 800bd44:	d909      	bls.n	800bd5a <UART_SetConfig+0xa8e>
 800bd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd4c:	d205      	bcs.n	800bd5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	60da      	str	r2, [r3, #12]
 800bd58:	e002      	b.n	800bd60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	2200      	movs	r2, #0
 800bd74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3748      	adds	r7, #72	@ 0x48
 800bd84:	46bd      	mov	sp, r7
 800bd86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd8a:	bf00      	nop
 800bd8c:	58024400 	.word	0x58024400
 800bd90:	03d09000 	.word	0x03d09000
 800bd94:	003d0900 	.word	0x003d0900
 800bd98:	08014020 	.word	0x08014020

0800bd9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda8:	f003 0308 	and.w	r3, r3, #8
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00a      	beq.n	800bdc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00a      	beq.n	800bde8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	430a      	orrs	r2, r1
 800bde6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdec:	f003 0302 	and.w	r3, r3, #2
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00a      	beq.n	800be0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	430a      	orrs	r2, r1
 800be08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0e:	f003 0304 	and.w	r3, r3, #4
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00a      	beq.n	800be2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	430a      	orrs	r2, r1
 800be2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be30:	f003 0310 	and.w	r3, r3, #16
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00a      	beq.n	800be4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	430a      	orrs	r2, r1
 800be4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be52:	f003 0320 	and.w	r3, r3, #32
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00a      	beq.n	800be70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d01a      	beq.n	800beb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	430a      	orrs	r2, r1
 800be90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be9a:	d10a      	bne.n	800beb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	430a      	orrs	r2, r1
 800beb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00a      	beq.n	800bed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	430a      	orrs	r2, r1
 800bed2:	605a      	str	r2, [r3, #4]
  }
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b098      	sub	sp, #96	@ 0x60
 800bee4:	af02      	add	r7, sp, #8
 800bee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bef0:	f7f6 f8a6 	bl	8002040 <HAL_GetTick>
 800bef4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0308 	and.w	r3, r3, #8
 800bf00:	2b08      	cmp	r3, #8
 800bf02:	d12f      	bne.n	800bf64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f88e 	bl	800c034 <UART_WaitOnFlagUntilTimeout>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d022      	beq.n	800bf64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf26:	e853 3f00 	ldrex	r3, [r3]
 800bf2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf32:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf44:	e841 2300 	strex	r3, r2, [r1]
 800bf48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e6      	bne.n	800bf1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2220      	movs	r2, #32
 800bf54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e063      	b.n	800c02c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 0304 	and.w	r3, r3, #4
 800bf6e:	2b04      	cmp	r3, #4
 800bf70:	d149      	bne.n	800c006 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f857 	bl	800c034 <UART_WaitOnFlagUntilTimeout>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d03c      	beq.n	800c006 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf94:	e853 3f00 	ldrex	r3, [r3]
 800bf98:	623b      	str	r3, [r7, #32]
   return(result);
 800bf9a:	6a3b      	ldr	r3, [r7, #32]
 800bf9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfb2:	e841 2300 	strex	r3, r2, [r1]
 800bfb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1e6      	bne.n	800bf8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	e853 3f00 	ldrex	r3, [r3]
 800bfcc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f023 0301 	bic.w	r3, r3, #1
 800bfd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3308      	adds	r3, #8
 800bfdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfde:	61fa      	str	r2, [r7, #28]
 800bfe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe2:	69b9      	ldr	r1, [r7, #24]
 800bfe4:	69fa      	ldr	r2, [r7, #28]
 800bfe6:	e841 2300 	strex	r3, r2, [r1]
 800bfea:	617b      	str	r3, [r7, #20]
   return(result);
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1e5      	bne.n	800bfbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2220      	movs	r2, #32
 800bff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	e012      	b.n	800c02c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2220      	movs	r2, #32
 800c00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2220      	movs	r2, #32
 800c012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3758      	adds	r7, #88	@ 0x58
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	603b      	str	r3, [r7, #0]
 800c040:	4613      	mov	r3, r2
 800c042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c044:	e04f      	b.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c04c:	d04b      	beq.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c04e:	f7f5 fff7 	bl	8002040 <HAL_GetTick>
 800c052:	4602      	mov	r2, r0
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	69ba      	ldr	r2, [r7, #24]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d302      	bcc.n	800c064 <UART_WaitOnFlagUntilTimeout+0x30>
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	e04e      	b.n	800c106 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 0304 	and.w	r3, r3, #4
 800c072:	2b00      	cmp	r3, #0
 800c074:	d037      	beq.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2b80      	cmp	r3, #128	@ 0x80
 800c07a:	d034      	beq.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	2b40      	cmp	r3, #64	@ 0x40
 800c080:	d031      	beq.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	f003 0308 	and.w	r3, r3, #8
 800c08c:	2b08      	cmp	r3, #8
 800c08e:	d110      	bne.n	800c0b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2208      	movs	r2, #8
 800c096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c098:	68f8      	ldr	r0, [r7, #12]
 800c09a:	f000 f921 	bl	800c2e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2208      	movs	r2, #8
 800c0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e029      	b.n	800c106 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	69db      	ldr	r3, [r3, #28]
 800c0b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0c0:	d111      	bne.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 f907 	bl	800c2e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2220      	movs	r2, #32
 800c0d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	e00f      	b.n	800c106 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	69da      	ldr	r2, [r3, #28]
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	4013      	ands	r3, r2
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	bf0c      	ite	eq
 800c0f6:	2301      	moveq	r3, #1
 800c0f8:	2300      	movne	r3, #0
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	79fb      	ldrb	r3, [r7, #7]
 800c100:	429a      	cmp	r2, r3
 800c102:	d0a0      	beq.n	800c046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
	...

0800c110 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b096      	sub	sp, #88	@ 0x58
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	4613      	mov	r3, r2
 800c11c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	88fa      	ldrh	r2, [r7, #6]
 800c128:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2222      	movs	r2, #34	@ 0x22
 800c138:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c142:	2b00      	cmp	r3, #0
 800c144:	d02d      	beq.n	800c1a2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c14c:	4a40      	ldr	r2, [pc, #256]	@ (800c250 <UART_Start_Receive_DMA+0x140>)
 800c14e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c156:	4a3f      	ldr	r2, [pc, #252]	@ (800c254 <UART_Start_Receive_DMA+0x144>)
 800c158:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c160:	4a3d      	ldr	r2, [pc, #244]	@ (800c258 <UART_Start_Receive_DMA+0x148>)
 800c162:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c16a:	2200      	movs	r2, #0
 800c16c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	3324      	adds	r3, #36	@ 0x24
 800c17a:	4619      	mov	r1, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c180:	461a      	mov	r2, r3
 800c182:	88fb      	ldrh	r3, [r7, #6]
 800c184:	f7f7 fea6 	bl	8003ed4 <HAL_DMA_Start_IT>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d009      	beq.n	800c1a2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2210      	movs	r2, #16
 800c192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2220      	movs	r2, #32
 800c19a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e051      	b.n	800c246 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d018      	beq.n	800c1dc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1b2:	e853 3f00 	ldrex	r3, [r3]
 800c1b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1be:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1ca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1d0:	e841 2300 	strex	r3, r2, [r1]
 800c1d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c1d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1e6      	bne.n	800c1aa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e6:	e853 3f00 	ldrex	r3, [r3]
 800c1ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ee:	f043 0301 	orr.w	r3, r3, #1
 800c1f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3308      	adds	r3, #8
 800c1fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c1fc:	637a      	str	r2, [r7, #52]	@ 0x34
 800c1fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c200:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c204:	e841 2300 	strex	r3, r2, [r1]
 800c208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1e5      	bne.n	800c1dc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3308      	adds	r3, #8
 800c216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	e853 3f00 	ldrex	r3, [r3]
 800c21e:	613b      	str	r3, [r7, #16]
   return(result);
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	3308      	adds	r3, #8
 800c22e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c230:	623a      	str	r2, [r7, #32]
 800c232:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c234:	69f9      	ldr	r1, [r7, #28]
 800c236:	6a3a      	ldr	r2, [r7, #32]
 800c238:	e841 2300 	strex	r3, r2, [r1]
 800c23c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1e5      	bne.n	800c210 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3758      	adds	r7, #88	@ 0x58
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	0800c45f 	.word	0x0800c45f
 800c254:	0800c587 	.word	0x0800c587
 800c258:	0800c5c5 	.word	0x0800c5c5

0800c25c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b08f      	sub	sp, #60	@ 0x3c
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	e853 3f00 	ldrex	r3, [r3]
 800c270:	61fb      	str	r3, [r7, #28]
   return(result);
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c278:	637b      	str	r3, [r7, #52]	@ 0x34
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	461a      	mov	r2, r3
 800c280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c284:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c28a:	e841 2300 	strex	r3, r2, [r1]
 800c28e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e6      	bne.n	800c264 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3308      	adds	r3, #8
 800c29c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	e853 3f00 	ldrex	r3, [r3]
 800c2a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c2ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3308      	adds	r3, #8
 800c2b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2b6:	61ba      	str	r2, [r7, #24]
 800c2b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ba:	6979      	ldr	r1, [r7, #20]
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	e841 2300 	strex	r3, r2, [r1]
 800c2c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1e5      	bne.n	800c296 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2220      	movs	r2, #32
 800c2ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c2d2:	bf00      	nop
 800c2d4:	373c      	adds	r7, #60	@ 0x3c
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
	...

0800c2e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b095      	sub	sp, #84	@ 0x54
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2f0:	e853 3f00 	ldrex	r3, [r3]
 800c2f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	461a      	mov	r2, r3
 800c304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c306:	643b      	str	r3, [r7, #64]	@ 0x40
 800c308:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c30c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c30e:	e841 2300 	strex	r3, r2, [r1]
 800c312:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1e6      	bne.n	800c2e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	3308      	adds	r3, #8
 800c320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c322:	6a3b      	ldr	r3, [r7, #32]
 800c324:	e853 3f00 	ldrex	r3, [r3]
 800c328:	61fb      	str	r3, [r7, #28]
   return(result);
 800c32a:	69fa      	ldr	r2, [r7, #28]
 800c32c:	4b1e      	ldr	r3, [pc, #120]	@ (800c3a8 <UART_EndRxTransfer+0xc8>)
 800c32e:	4013      	ands	r3, r2
 800c330:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3308      	adds	r3, #8
 800c338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c33a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c33c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c342:	e841 2300 	strex	r3, r2, [r1]
 800c346:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1e5      	bne.n	800c31a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c352:	2b01      	cmp	r3, #1
 800c354:	d118      	bne.n	800c388 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	e853 3f00 	ldrex	r3, [r3]
 800c362:	60bb      	str	r3, [r7, #8]
   return(result);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	f023 0310 	bic.w	r3, r3, #16
 800c36a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	461a      	mov	r2, r3
 800c372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c374:	61bb      	str	r3, [r7, #24]
 800c376:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c378:	6979      	ldr	r1, [r7, #20]
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	e841 2300 	strex	r3, r2, [r1]
 800c380:	613b      	str	r3, [r7, #16]
   return(result);
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1e6      	bne.n	800c356 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2220      	movs	r2, #32
 800c38c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c39c:	bf00      	nop
 800c39e:	3754      	adds	r7, #84	@ 0x54
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	effffffe 	.word	0xeffffffe

0800c3ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b090      	sub	sp, #64	@ 0x40
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	69db      	ldr	r3, [r3, #28]
 800c3be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3c2:	d037      	beq.n	800c434 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	3308      	adds	r3, #8
 800c3d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	e853 3f00 	ldrex	r3, [r3]
 800c3da:	623b      	str	r3, [r7, #32]
   return(result);
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3ec:	633a      	str	r2, [r7, #48]	@ 0x30
 800c3ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3f4:	e841 2300 	strex	r3, r2, [r1]
 800c3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1e5      	bne.n	800c3cc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	e853 3f00 	ldrex	r3, [r3]
 800c40c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c414:	637b      	str	r3, [r7, #52]	@ 0x34
 800c416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	461a      	mov	r2, r3
 800c41c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c41e:	61fb      	str	r3, [r7, #28]
 800c420:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c422:	69b9      	ldr	r1, [r7, #24]
 800c424:	69fa      	ldr	r2, [r7, #28]
 800c426:	e841 2300 	strex	r3, r2, [r1]
 800c42a:	617b      	str	r3, [r7, #20]
   return(result);
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1e6      	bne.n	800c400 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c432:	e002      	b.n	800c43a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c434:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c436:	f7fe ff15 	bl	800b264 <HAL_UART_TxCpltCallback>
}
 800c43a:	bf00      	nop
 800c43c:	3740      	adds	r7, #64	@ 0x40
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b084      	sub	sp, #16
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c44e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7fe ff11 	bl	800b278 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c456:	bf00      	nop
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b09c      	sub	sp, #112	@ 0x70
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c46a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	69db      	ldr	r3, [r3, #28]
 800c470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c474:	d071      	beq.n	800c55a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c478:	2200      	movs	r2, #0
 800c47a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c47e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c486:	e853 3f00 	ldrex	r3, [r3]
 800c48a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c48c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c48e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c492:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c49c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c49e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c4a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c4a4:	e841 2300 	strex	r3, r2, [r1]
 800c4a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c4aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1e6      	bne.n	800c47e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3308      	adds	r3, #8
 800c4b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ba:	e853 3f00 	ldrex	r3, [r3]
 800c4be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4c2:	f023 0301 	bic.w	r3, r3, #1
 800c4c6:	667b      	str	r3, [r7, #100]	@ 0x64
 800c4c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3308      	adds	r3, #8
 800c4ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c4d0:	647a      	str	r2, [r7, #68]	@ 0x44
 800c4d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c4d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4d8:	e841 2300 	strex	r3, r2, [r1]
 800c4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1e5      	bne.n	800c4b0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ee:	e853 3f00 	ldrex	r3, [r3]
 800c4f2:	623b      	str	r3, [r7, #32]
   return(result);
 800c4f4:	6a3b      	ldr	r3, [r7, #32]
 800c4f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800c4fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3308      	adds	r3, #8
 800c502:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c504:	633a      	str	r2, [r7, #48]	@ 0x30
 800c506:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c50a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c50c:	e841 2300 	strex	r3, r2, [r1]
 800c510:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e5      	bne.n	800c4e4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c51a:	2220      	movs	r2, #32
 800c51c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c524:	2b01      	cmp	r3, #1
 800c526:	d118      	bne.n	800c55a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	e853 3f00 	ldrex	r3, [r3]
 800c534:	60fb      	str	r3, [r7, #12]
   return(result);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f023 0310 	bic.w	r3, r3, #16
 800c53c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c53e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	461a      	mov	r2, r3
 800c544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c546:	61fb      	str	r3, [r7, #28]
 800c548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54a:	69b9      	ldr	r1, [r7, #24]
 800c54c:	69fa      	ldr	r2, [r7, #28]
 800c54e:	e841 2300 	strex	r3, r2, [r1]
 800c552:	617b      	str	r3, [r7, #20]
   return(result);
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1e6      	bne.n	800c528 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c55a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c55c:	2200      	movs	r2, #0
 800c55e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c564:	2b01      	cmp	r3, #1
 800c566:	d107      	bne.n	800c578 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c56a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c56e:	4619      	mov	r1, r3
 800c570:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c572:	f7fe fe9f 	bl	800b2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c576:	e002      	b.n	800c57e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c578:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c57a:	f7f4 fc35 	bl	8000de8 <HAL_UART_RxCpltCallback>
}
 800c57e:	bf00      	nop
 800c580:	3770      	adds	r7, #112	@ 0x70
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c592:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2201      	movs	r2, #1
 800c598:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d109      	bne.n	800c5b6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c5a8:	085b      	lsrs	r3, r3, #1
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	68f8      	ldr	r0, [r7, #12]
 800c5b0:	f7fe fe80 	bl	800b2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5b4:	e002      	b.n	800c5bc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f7fe fe68 	bl	800b28c <HAL_UART_RxHalfCpltCallback>
}
 800c5bc:	bf00      	nop
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5ec:	2b80      	cmp	r3, #128	@ 0x80
 800c5ee:	d109      	bne.n	800c604 <UART_DMAError+0x40>
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	2b21      	cmp	r3, #33	@ 0x21
 800c5f4:	d106      	bne.n	800c604 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c5fe:	6978      	ldr	r0, [r7, #20]
 800c600:	f7ff fe2c 	bl	800c25c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c60e:	2b40      	cmp	r3, #64	@ 0x40
 800c610:	d109      	bne.n	800c626 <UART_DMAError+0x62>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b22      	cmp	r3, #34	@ 0x22
 800c616:	d106      	bne.n	800c626 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c620:	6978      	ldr	r0, [r7, #20]
 800c622:	f7ff fe5d 	bl	800c2e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c62c:	f043 0210 	orr.w	r2, r3, #16
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c636:	6978      	ldr	r0, [r7, #20]
 800c638:	f7fe fe32 	bl	800b2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c63c:	bf00      	nop
 800c63e:	3718      	adds	r7, #24
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f7fe fe1c 	bl	800b2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b088      	sub	sp, #32
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	e853 3f00 	ldrex	r3, [r3]
 800c684:	60bb      	str	r3, [r7, #8]
   return(result);
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c68c:	61fb      	str	r3, [r7, #28]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	461a      	mov	r2, r3
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	61bb      	str	r3, [r7, #24]
 800c698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69a:	6979      	ldr	r1, [r7, #20]
 800c69c:	69ba      	ldr	r2, [r7, #24]
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1e6      	bne.n	800c678 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7fe fdd3 	bl	800b264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6be:	bf00      	nop
 800c6c0:	3720      	adds	r7, #32
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c6ce:	bf00      	nop
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b083      	sub	sp, #12
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c6e2:	bf00      	nop
 800c6e4:	370c      	adds	r7, #12
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr

0800c6ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c6ee:	b480      	push	{r7}
 800c6f0:	b083      	sub	sp, #12
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c6f6:	bf00      	nop
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c702:	b480      	push	{r7}
 800c704:	b085      	sub	sp, #20
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c710:	2b01      	cmp	r3, #1
 800c712:	d101      	bne.n	800c718 <HAL_UARTEx_DisableFifoMode+0x16>
 800c714:	2302      	movs	r3, #2
 800c716:	e027      	b.n	800c768 <HAL_UARTEx_DisableFifoMode+0x66>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2224      	movs	r2, #36	@ 0x24
 800c724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f022 0201 	bic.w	r2, r2, #1
 800c73e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2220      	movs	r2, #32
 800c75a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c784:	2b01      	cmp	r3, #1
 800c786:	d101      	bne.n	800c78c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c788:	2302      	movs	r3, #2
 800c78a:	e02d      	b.n	800c7e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2224      	movs	r2, #36	@ 0x24
 800c798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f022 0201 	bic.w	r2, r2, #1
 800c7b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f84f 	bl	800c86c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2220      	movs	r2, #32
 800c7da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c800:	2b01      	cmp	r3, #1
 800c802:	d101      	bne.n	800c808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c804:	2302      	movs	r3, #2
 800c806:	e02d      	b.n	800c864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2224      	movs	r2, #36	@ 0x24
 800c814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f022 0201 	bic.w	r2, r2, #1
 800c82e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	430a      	orrs	r2, r1
 800c842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f811 	bl	800c86c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2220      	movs	r2, #32
 800c856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d108      	bne.n	800c88e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c88c:	e031      	b.n	800c8f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c88e:	2310      	movs	r3, #16
 800c890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c892:	2310      	movs	r3, #16
 800c894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	0e5b      	lsrs	r3, r3, #25
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	f003 0307 	and.w	r3, r3, #7
 800c8a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	0f5b      	lsrs	r3, r3, #29
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	f003 0307 	and.w	r3, r3, #7
 800c8b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	7b3a      	ldrb	r2, [r7, #12]
 800c8ba:	4911      	ldr	r1, [pc, #68]	@ (800c900 <UARTEx_SetNbDataToProcess+0x94>)
 800c8bc:	5c8a      	ldrb	r2, [r1, r2]
 800c8be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8c2:	7b3a      	ldrb	r2, [r7, #12]
 800c8c4:	490f      	ldr	r1, [pc, #60]	@ (800c904 <UARTEx_SetNbDataToProcess+0x98>)
 800c8c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
 800c8d6:	7b7a      	ldrb	r2, [r7, #13]
 800c8d8:	4909      	ldr	r1, [pc, #36]	@ (800c900 <UARTEx_SetNbDataToProcess+0x94>)
 800c8da:	5c8a      	ldrb	r2, [r1, r2]
 800c8dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8e0:	7b7a      	ldrb	r2, [r7, #13]
 800c8e2:	4908      	ldr	r1, [pc, #32]	@ (800c904 <UARTEx_SetNbDataToProcess+0x98>)
 800c8e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c8f2:	bf00      	nop
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	08014038 	.word	0x08014038
 800c904:	08014040 	.word	0x08014040

0800c908 <__NVIC_SetPriority>:
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	4603      	mov	r3, r0
 800c910:	6039      	str	r1, [r7, #0]
 800c912:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	db0a      	blt.n	800c932 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	490c      	ldr	r1, [pc, #48]	@ (800c954 <__NVIC_SetPriority+0x4c>)
 800c922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c926:	0112      	lsls	r2, r2, #4
 800c928:	b2d2      	uxtb	r2, r2
 800c92a:	440b      	add	r3, r1
 800c92c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c930:	e00a      	b.n	800c948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	b2da      	uxtb	r2, r3
 800c936:	4908      	ldr	r1, [pc, #32]	@ (800c958 <__NVIC_SetPriority+0x50>)
 800c938:	88fb      	ldrh	r3, [r7, #6]
 800c93a:	f003 030f 	and.w	r3, r3, #15
 800c93e:	3b04      	subs	r3, #4
 800c940:	0112      	lsls	r2, r2, #4
 800c942:	b2d2      	uxtb	r2, r2
 800c944:	440b      	add	r3, r1
 800c946:	761a      	strb	r2, [r3, #24]
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr
 800c954:	e000e100 	.word	0xe000e100
 800c958:	e000ed00 	.word	0xe000ed00

0800c95c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c960:	4b05      	ldr	r3, [pc, #20]	@ (800c978 <SysTick_Handler+0x1c>)
 800c962:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c964:	f002 f998 	bl	800ec98 <xTaskGetSchedulerState>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d001      	beq.n	800c972 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c96e:	f003 fa9b 	bl	800fea8 <xPortSysTickHandler>
  }
}
 800c972:	bf00      	nop
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	e000e010 	.word	0xe000e010

0800c97c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c980:	2100      	movs	r1, #0
 800c982:	f06f 0004 	mvn.w	r0, #4
 800c986:	f7ff ffbf 	bl	800c908 <__NVIC_SetPriority>
#endif
}
 800c98a:	bf00      	nop
 800c98c:	bd80      	pop	{r7, pc}
	...

0800c990 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c996:	f3ef 8305 	mrs	r3, IPSR
 800c99a:	603b      	str	r3, [r7, #0]
  return(result);
 800c99c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d003      	beq.n	800c9aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c9a2:	f06f 0305 	mvn.w	r3, #5
 800c9a6:	607b      	str	r3, [r7, #4]
 800c9a8:	e00c      	b.n	800c9c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c9d4 <osKernelInitialize+0x44>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d105      	bne.n	800c9be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c9b2:	4b08      	ldr	r3, [pc, #32]	@ (800c9d4 <osKernelInitialize+0x44>)
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	607b      	str	r3, [r7, #4]
 800c9bc:	e002      	b.n	800c9c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c9be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c9c4:	687b      	ldr	r3, [r7, #4]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	240018b8 	.word	0x240018b8

0800c9d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9de:	f3ef 8305 	mrs	r3, IPSR
 800c9e2:	603b      	str	r3, [r7, #0]
  return(result);
 800c9e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d003      	beq.n	800c9f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c9ea:	f06f 0305 	mvn.w	r3, #5
 800c9ee:	607b      	str	r3, [r7, #4]
 800c9f0:	e010      	b.n	800ca14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800ca20 <osKernelStart+0x48>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d109      	bne.n	800ca0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c9fa:	f7ff ffbf 	bl	800c97c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c9fe:	4b08      	ldr	r3, [pc, #32]	@ (800ca20 <osKernelStart+0x48>)
 800ca00:	2202      	movs	r2, #2
 800ca02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ca04:	f001 fcc2 	bl	800e38c <vTaskStartScheduler>
      stat = osOK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	607b      	str	r3, [r7, #4]
 800ca0c:	e002      	b.n	800ca14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ca0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ca14:	687b      	ldr	r3, [r7, #4]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	240018b8 	.word	0x240018b8

0800ca24 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca2a:	f3ef 8305 	mrs	r3, IPSR
 800ca2e:	603b      	str	r3, [r7, #0]
  return(result);
 800ca30:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d003      	beq.n	800ca3e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ca36:	f001 fdd5 	bl	800e5e4 <xTaskGetTickCountFromISR>
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	e002      	b.n	800ca44 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ca3e:	f001 fdc1 	bl	800e5c4 <xTaskGetTickCount>
 800ca42:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ca44:	687b      	ldr	r3, [r7, #4]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b08e      	sub	sp, #56	@ 0x38
 800ca52:	af04      	add	r7, sp, #16
 800ca54:	60f8      	str	r0, [r7, #12]
 800ca56:	60b9      	str	r1, [r7, #8]
 800ca58:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca5e:	f3ef 8305 	mrs	r3, IPSR
 800ca62:	617b      	str	r3, [r7, #20]
  return(result);
 800ca64:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d17e      	bne.n	800cb68 <osThreadNew+0x11a>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d07b      	beq.n	800cb68 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ca70:	2380      	movs	r3, #128	@ 0x80
 800ca72:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ca74:	2318      	movs	r3, #24
 800ca76:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ca7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d045      	beq.n	800cb14 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d002      	beq.n	800ca96 <osThreadNew+0x48>
        name = attr->name;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d002      	beq.n	800caa4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d008      	beq.n	800cabc <osThreadNew+0x6e>
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	2b38      	cmp	r3, #56	@ 0x38
 800caae:	d805      	bhi.n	800cabc <osThreadNew+0x6e>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	f003 0301 	and.w	r3, r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d001      	beq.n	800cac0 <osThreadNew+0x72>
        return (NULL);
 800cabc:	2300      	movs	r3, #0
 800cabe:	e054      	b.n	800cb6a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	695b      	ldr	r3, [r3, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d003      	beq.n	800cad0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	695b      	ldr	r3, [r3, #20]
 800cacc:	089b      	lsrs	r3, r3, #2
 800cace:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00e      	beq.n	800caf6 <osThreadNew+0xa8>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	2ba7      	cmp	r3, #167	@ 0xa7
 800cade:	d90a      	bls.n	800caf6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d006      	beq.n	800caf6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <osThreadNew+0xa8>
        mem = 1;
 800caf0:	2301      	movs	r3, #1
 800caf2:	61bb      	str	r3, [r7, #24]
 800caf4:	e010      	b.n	800cb18 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10c      	bne.n	800cb18 <osThreadNew+0xca>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d108      	bne.n	800cb18 <osThreadNew+0xca>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d104      	bne.n	800cb18 <osThreadNew+0xca>
          mem = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	61bb      	str	r3, [r7, #24]
 800cb12:	e001      	b.n	800cb18 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d110      	bne.n	800cb40 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cb26:	9202      	str	r2, [sp, #8]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	6a3a      	ldr	r2, [r7, #32]
 800cb32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f001 fa35 	bl	800dfa4 <xTaskCreateStatic>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	613b      	str	r3, [r7, #16]
 800cb3e:	e013      	b.n	800cb68 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d110      	bne.n	800cb68 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cb46:	6a3b      	ldr	r3, [r7, #32]
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	f107 0310 	add.w	r3, r7, #16
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f001 fa83 	bl	800e064 <xTaskCreate>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d001      	beq.n	800cb68 <osThreadNew+0x11a>
            hTask = NULL;
 800cb64:	2300      	movs	r3, #0
 800cb66:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cb68:	693b      	ldr	r3, [r7, #16]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3728      	adds	r7, #40	@ 0x28
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b088      	sub	sp, #32
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <osThreadFlagsSet+0x1a>
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	da03      	bge.n	800cb96 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800cb8e:	f06f 0303 	mvn.w	r3, #3
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	e035      	b.n	800cc02 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800cb96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb9c:	f3ef 8305 	mrs	r3, IPSR
 800cba0:	613b      	str	r3, [r7, #16]
  return(result);
 800cba2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d01f      	beq.n	800cbe8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800cbac:	f107 0308 	add.w	r3, r7, #8
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	6839      	ldr	r1, [r7, #0]
 800cbb8:	6978      	ldr	r0, [r7, #20]
 800cbba:	f002 fb1d 	bl	800f1f8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800cbbe:	f107 030c 	add.w	r3, r7, #12
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	9200      	str	r2, [sp, #0]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	2100      	movs	r1, #0
 800cbca:	6978      	ldr	r0, [r7, #20]
 800cbcc:	f002 fb14 	bl	800f1f8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d015      	beq.n	800cc02 <osThreadFlagsSet+0x8e>
 800cbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800cc0c <osThreadFlagsSet+0x98>)
 800cbd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	f3bf 8f6f 	isb	sy
 800cbe6:	e00c      	b.n	800cc02 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800cbe8:	2300      	movs	r3, #0
 800cbea:	2201      	movs	r2, #1
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6978      	ldr	r0, [r7, #20]
 800cbf0:	f002 fa40 	bl	800f074 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800cbf4:	f107 030c 	add.w	r3, r7, #12
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	6978      	ldr	r0, [r7, #20]
 800cbfe:	f002 fa39 	bl	800f074 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800cc02:	68fb      	ldr	r3, [r7, #12]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	e000ed04 	.word	0xe000ed04

0800cc10 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc16:	f3ef 8305 	mrs	r3, IPSR
 800cc1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc1c:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800cc22:	f06f 0305 	mvn.w	r3, #5
 800cc26:	607b      	str	r3, [r7, #4]
 800cc28:	e00e      	b.n	800cc48 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800cc2a:	f002 f825 	bl	800ec78 <xTaskGetCurrentTaskHandle>
 800cc2e:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800cc30:	1d3b      	adds	r3, r7, #4
 800cc32:	2200      	movs	r2, #0
 800cc34:	2100      	movs	r1, #0
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f002 fa1c 	bl	800f074 <xTaskGenericNotify>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d002      	beq.n	800cc48 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800cc42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc46:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800cc48:	687b      	ldr	r3, [r7, #4]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b08c      	sub	sp, #48	@ 0x30
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	60f8      	str	r0, [r7, #12]
 800cc5a:	60b9      	str	r1, [r7, #8]
 800cc5c:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc5e:	f3ef 8305 	mrs	r3, IPSR
 800cc62:	617b      	str	r3, [r7, #20]
  return(result);
 800cc64:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d003      	beq.n	800cc72 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800cc6a:	f06f 0305 	mvn.w	r3, #5
 800cc6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc70:	e06b      	b.n	800cd4a <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	da03      	bge.n	800cc80 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800cc78:	f06f 0303 	mvn.w	r3, #3
 800cc7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc7e:	e064      	b.n	800cd4a <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d002      	beq.n	800cc90 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc8e:	e001      	b.n	800cc94 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800cc94:	2300      	movs	r3, #0
 800cc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800cc9c:	f001 fc92 	bl	800e5c4 <xTaskGetTickCount>
 800cca0:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800cca2:	f107 0210 	add.w	r2, r7, #16
 800cca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccaa:	2000      	movs	r0, #0
 800ccac:	f002 f982 	bl	800efb4 <xTaskNotifyWait>
 800ccb0:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d137      	bne.n	800cd28 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800ccb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	4013      	ands	r3, r2
 800ccbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	f003 0301 	and.w	r3, r3, #1
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00c      	beq.n	800ccec <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d032      	beq.n	800cd44 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10f      	bne.n	800cd04 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800cce4:	f06f 0302 	mvn.w	r3, #2
 800cce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800ccea:	e02e      	b.n	800cd4a <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d128      	bne.n	800cd48 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d103      	bne.n	800cd04 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ccfc:	f06f 0302 	mvn.w	r3, #2
 800cd00:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800cd02:	e022      	b.n	800cd4a <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800cd04:	f001 fc5e 	bl	800e5c4 <xTaskGetTickCount>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800cd10:	69ba      	ldr	r2, [r7, #24]
 800cd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d902      	bls.n	800cd1e <osThreadFlagsWait+0xcc>
          tout  = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd1c:	e00e      	b.n	800cd3c <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800cd1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd26:	e009      	b.n	800cd3c <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d103      	bne.n	800cd36 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800cd2e:	f06f 0302 	mvn.w	r3, #2
 800cd32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd34:	e002      	b.n	800cd3c <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800cd36:	f06f 0301 	mvn.w	r3, #1
 800cd3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1af      	bne.n	800cca2 <osThreadFlagsWait+0x50>
 800cd42:	e002      	b.n	800cd4a <osThreadFlagsWait+0xf8>
            break;
 800cd44:	bf00      	nop
 800cd46:	e000      	b.n	800cd4a <osThreadFlagsWait+0xf8>
            break;
 800cd48:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800cd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3730      	adds	r7, #48	@ 0x30
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd5c:	f3ef 8305 	mrs	r3, IPSR
 800cd60:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d003      	beq.n	800cd70 <osDelay+0x1c>
    stat = osErrorISR;
 800cd68:	f06f 0305 	mvn.w	r3, #5
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	e007      	b.n	800cd80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d002      	beq.n	800cd80 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f001 fad0 	bl	800e320 <vTaskDelay>
    }
  }

  return (stat);
 800cd80:	68fb      	ldr	r3, [r7, #12]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b088      	sub	sp, #32
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd96:	f3ef 8305 	mrs	r3, IPSR
 800cd9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd9c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d174      	bne.n	800ce8c <osMutexNew+0x102>
    if (attr != NULL) {
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d003      	beq.n	800cdb0 <osMutexNew+0x26>
      type = attr->attr_bits;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	61bb      	str	r3, [r7, #24]
 800cdae:	e001      	b.n	800cdb4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <osMutexNew+0x3a>
      rmtx = 1U;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	617b      	str	r3, [r7, #20]
 800cdc2:	e001      	b.n	800cdc8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	f003 0308 	and.w	r3, r3, #8
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d15c      	bne.n	800ce8c <osMutexNew+0x102>
      mem = -1;
 800cdd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdd6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d015      	beq.n	800ce0a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d006      	beq.n	800cdf4 <osMutexNew+0x6a>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	2b4f      	cmp	r3, #79	@ 0x4f
 800cdec:	d902      	bls.n	800cdf4 <osMutexNew+0x6a>
          mem = 1;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	613b      	str	r3, [r7, #16]
 800cdf2:	e00c      	b.n	800ce0e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d108      	bne.n	800ce0e <osMutexNew+0x84>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d104      	bne.n	800ce0e <osMutexNew+0x84>
            mem = 0;
 800ce04:	2300      	movs	r3, #0
 800ce06:	613b      	str	r3, [r7, #16]
 800ce08:	e001      	b.n	800ce0e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d112      	bne.n	800ce3a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d007      	beq.n	800ce2a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	4619      	mov	r1, r3
 800ce20:	2004      	movs	r0, #4
 800ce22:	f000 fb20 	bl	800d466 <xQueueCreateMutexStatic>
 800ce26:	61f8      	str	r0, [r7, #28]
 800ce28:	e016      	b.n	800ce58 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	2001      	movs	r0, #1
 800ce32:	f000 fb18 	bl	800d466 <xQueueCreateMutexStatic>
 800ce36:	61f8      	str	r0, [r7, #28]
 800ce38:	e00e      	b.n	800ce58 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10b      	bne.n	800ce58 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d004      	beq.n	800ce50 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ce46:	2004      	movs	r0, #4
 800ce48:	f000 faf5 	bl	800d436 <xQueueCreateMutex>
 800ce4c:	61f8      	str	r0, [r7, #28]
 800ce4e:	e003      	b.n	800ce58 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ce50:	2001      	movs	r0, #1
 800ce52:	f000 faf0 	bl	800d436 <xQueueCreateMutex>
 800ce56:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00c      	beq.n	800ce78 <osMutexNew+0xee>
        if (attr != NULL) {
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d003      	beq.n	800ce6c <osMutexNew+0xe2>
          name = attr->name;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	60fb      	str	r3, [r7, #12]
 800ce6a:	e001      	b.n	800ce70 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ce70:	68f9      	ldr	r1, [r7, #12]
 800ce72:	69f8      	ldr	r0, [r7, #28]
 800ce74:	f001 f838 	bl	800dee8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d006      	beq.n	800ce8c <osMutexNew+0x102>
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	f043 0301 	orr.w	r3, r3, #1
 800ce8a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ce8c:	69fb      	ldr	r3, [r7, #28]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3720      	adds	r7, #32
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b086      	sub	sp, #24
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f023 0301 	bic.w	r3, r3, #1
 800cea6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f003 0301 	and.w	r3, r3, #1
 800ceae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceb4:	f3ef 8305 	mrs	r3, IPSR
 800ceb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ceba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d003      	beq.n	800cec8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cec0:	f06f 0305 	mvn.w	r3, #5
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	e02c      	b.n	800cf22 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d103      	bne.n	800ced6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cece:	f06f 0303 	mvn.w	r3, #3
 800ced2:	617b      	str	r3, [r7, #20]
 800ced4:	e025      	b.n	800cf22 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d011      	beq.n	800cf00 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6938      	ldr	r0, [r7, #16]
 800cee0:	f000 fb11 	bl	800d506 <xQueueTakeMutexRecursive>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d01b      	beq.n	800cf22 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d003      	beq.n	800cef8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cef0:	f06f 0301 	mvn.w	r3, #1
 800cef4:	617b      	str	r3, [r7, #20]
 800cef6:	e014      	b.n	800cf22 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cef8:	f06f 0302 	mvn.w	r3, #2
 800cefc:	617b      	str	r3, [r7, #20]
 800cefe:	e010      	b.n	800cf22 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	6938      	ldr	r0, [r7, #16]
 800cf04:	f000 fdb8 	bl	800da78 <xQueueSemaphoreTake>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d009      	beq.n	800cf22 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d003      	beq.n	800cf1c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800cf14:	f06f 0301 	mvn.w	r3, #1
 800cf18:	617b      	str	r3, [r7, #20]
 800cf1a:	e002      	b.n	800cf22 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cf1c:	f06f 0302 	mvn.w	r3, #2
 800cf20:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800cf22:	697b      	ldr	r3, [r7, #20]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3718      	adds	r7, #24
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f023 0301 	bic.w	r3, r3, #1
 800cf3a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f003 0301 	and.w	r3, r3, #1
 800cf42:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf48:	f3ef 8305 	mrs	r3, IPSR
 800cf4c:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf4e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d003      	beq.n	800cf5c <osMutexRelease+0x30>
    stat = osErrorISR;
 800cf54:	f06f 0305 	mvn.w	r3, #5
 800cf58:	617b      	str	r3, [r7, #20]
 800cf5a:	e01f      	b.n	800cf9c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d103      	bne.n	800cf6a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cf62:	f06f 0303 	mvn.w	r3, #3
 800cf66:	617b      	str	r3, [r7, #20]
 800cf68:	e018      	b.n	800cf9c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d009      	beq.n	800cf84 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cf70:	6938      	ldr	r0, [r7, #16]
 800cf72:	f000 fa93 	bl	800d49c <xQueueGiveMutexRecursive>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d00f      	beq.n	800cf9c <osMutexRelease+0x70>
        stat = osErrorResource;
 800cf7c:	f06f 0302 	mvn.w	r3, #2
 800cf80:	617b      	str	r3, [r7, #20]
 800cf82:	e00b      	b.n	800cf9c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cf84:	2300      	movs	r3, #0
 800cf86:	2200      	movs	r2, #0
 800cf88:	2100      	movs	r1, #0
 800cf8a:	6938      	ldr	r0, [r7, #16]
 800cf8c:	f000 faf2 	bl	800d574 <xQueueGenericSend>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d002      	beq.n	800cf9c <osMutexRelease+0x70>
        stat = osErrorResource;
 800cf96:	f06f 0302 	mvn.w	r3, #2
 800cf9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cf9c:	697b      	ldr	r3, [r7, #20]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3718      	adds	r7, #24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
	...

0800cfa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	4a07      	ldr	r2, [pc, #28]	@ (800cfd4 <vApplicationGetIdleTaskMemory+0x2c>)
 800cfb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	4a06      	ldr	r2, [pc, #24]	@ (800cfd8 <vApplicationGetIdleTaskMemory+0x30>)
 800cfbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2280      	movs	r2, #128	@ 0x80
 800cfc4:	601a      	str	r2, [r3, #0]
}
 800cfc6:	bf00      	nop
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	240018bc 	.word	0x240018bc
 800cfd8:	24001964 	.word	0x24001964

0800cfdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cfdc:	b480      	push	{r7}
 800cfde:	b085      	sub	sp, #20
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4a07      	ldr	r2, [pc, #28]	@ (800d008 <vApplicationGetTimerTaskMemory+0x2c>)
 800cfec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	4a06      	ldr	r2, [pc, #24]	@ (800d00c <vApplicationGetTimerTaskMemory+0x30>)
 800cff2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cffa:	601a      	str	r2, [r3, #0]
}
 800cffc:	bf00      	nop
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr
 800d008:	24001b64 	.word	0x24001b64
 800d00c:	24001c0c 	.word	0x24001c0c

0800d010 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f103 0208 	add.w	r2, r3, #8
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d028:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f103 0208 	add.w	r2, r3, #8
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f103 0208 	add.w	r2, r3, #8
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d05e:	bf00      	nop
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d06a:	b480      	push	{r7}
 800d06c:	b085      	sub	sp, #20
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	683a      	ldr	r2, [r7, #0]
 800d08e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	601a      	str	r2, [r3, #0]
}
 800d0a6:	bf00      	nop
 800d0a8:	3714      	adds	r7, #20
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr

0800d0b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0b2:	b480      	push	{r7}
 800d0b4:	b085      	sub	sp, #20
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
 800d0ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0c8:	d103      	bne.n	800d0d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	60fb      	str	r3, [r7, #12]
 800d0d0:	e00c      	b.n	800d0ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	60fb      	str	r3, [r7, #12]
 800d0d8:	e002      	b.n	800d0e0 <vListInsert+0x2e>
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d2f6      	bcs.n	800d0da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	683a      	ldr	r2, [r7, #0]
 800d0fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	601a      	str	r2, [r3, #0]
}
 800d118:	bf00      	nop
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	6892      	ldr	r2, [r2, #8]
 800d13a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	6852      	ldr	r2, [r2, #4]
 800d144:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d103      	bne.n	800d158 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	689a      	ldr	r2, [r3, #8]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	1e5a      	subs	r2, r3, #1
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10b      	bne.n	800d1a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d19e:	bf00      	nop
 800d1a0:	bf00      	nop
 800d1a2:	e7fd      	b.n	800d1a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d1a4:	f002 fdf0 	bl	800fd88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1b0:	68f9      	ldr	r1, [r7, #12]
 800d1b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d1b4:	fb01 f303 	mul.w	r3, r1, r3
 800d1b8:	441a      	add	r2, r3
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	68f9      	ldr	r1, [r7, #12]
 800d1d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d1da:	fb01 f303 	mul.w	r3, r1, r3
 800d1de:	441a      	add	r2, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	22ff      	movs	r2, #255	@ 0xff
 800d1e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	22ff      	movs	r2, #255	@ 0xff
 800d1f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d114      	bne.n	800d224 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	691b      	ldr	r3, [r3, #16]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d01a      	beq.n	800d238 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3310      	adds	r3, #16
 800d206:	4618      	mov	r0, r3
 800d208:	f001 fb70 	bl	800e8ec <xTaskRemoveFromEventList>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d012      	beq.n	800d238 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d212:	4b0d      	ldr	r3, [pc, #52]	@ (800d248 <xQueueGenericReset+0xd0>)
 800d214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	e009      	b.n	800d238 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	3310      	adds	r3, #16
 800d228:	4618      	mov	r0, r3
 800d22a:	f7ff fef1 	bl	800d010 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	3324      	adds	r3, #36	@ 0x24
 800d232:	4618      	mov	r0, r3
 800d234:	f7ff feec 	bl	800d010 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d238:	f002 fdd8 	bl	800fdec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d23c:	2301      	movs	r3, #1
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	e000ed04 	.word	0xe000ed04

0800d24c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08e      	sub	sp, #56	@ 0x38
 800d250:	af02      	add	r7, sp, #8
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10b      	bne.n	800d278 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d272:	bf00      	nop
 800d274:	bf00      	nop
 800d276:	e7fd      	b.n	800d274 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10b      	bne.n	800d296 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d290:	bf00      	nop
 800d292:	bf00      	nop
 800d294:	e7fd      	b.n	800d292 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <xQueueGenericCreateStatic+0x56>
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <xQueueGenericCreateStatic+0x5a>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e000      	b.n	800d2a8 <xQueueGenericCreateStatic+0x5c>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10b      	bne.n	800d2c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	623b      	str	r3, [r7, #32]
}
 800d2be:	bf00      	nop
 800d2c0:	bf00      	nop
 800d2c2:	e7fd      	b.n	800d2c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d102      	bne.n	800d2d0 <xQueueGenericCreateStatic+0x84>
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <xQueueGenericCreateStatic+0x88>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e000      	b.n	800d2d6 <xQueueGenericCreateStatic+0x8a>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10b      	bne.n	800d2f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	61fb      	str	r3, [r7, #28]
}
 800d2ec:	bf00      	nop
 800d2ee:	bf00      	nop
 800d2f0:	e7fd      	b.n	800d2ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d2f2:	2350      	movs	r3, #80	@ 0x50
 800d2f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	2b50      	cmp	r3, #80	@ 0x50
 800d2fa:	d00b      	beq.n	800d314 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d300:	f383 8811 	msr	BASEPRI, r3
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	61bb      	str	r3, [r7, #24]
}
 800d30e:	bf00      	nop
 800d310:	bf00      	nop
 800d312:	e7fd      	b.n	800d310 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d314:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00d      	beq.n	800d33c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d322:	2201      	movs	r2, #1
 800d324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d328:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	4613      	mov	r3, r2
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	68b9      	ldr	r1, [r7, #8]
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f000 f840 	bl	800d3bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d33e:	4618      	mov	r0, r3
 800d340:	3730      	adds	r7, #48	@ 0x30
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d346:	b580      	push	{r7, lr}
 800d348:	b08a      	sub	sp, #40	@ 0x28
 800d34a:	af02      	add	r7, sp, #8
 800d34c:	60f8      	str	r0, [r7, #12]
 800d34e:	60b9      	str	r1, [r7, #8]
 800d350:	4613      	mov	r3, r2
 800d352:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10b      	bne.n	800d372 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	613b      	str	r3, [r7, #16]
}
 800d36c:	bf00      	nop
 800d36e:	bf00      	nop
 800d370:	e7fd      	b.n	800d36e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	68ba      	ldr	r2, [r7, #8]
 800d376:	fb02 f303 	mul.w	r3, r2, r3
 800d37a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	3350      	adds	r3, #80	@ 0x50
 800d380:	4618      	mov	r0, r3
 800d382:	f002 fe23 	bl	800ffcc <pvPortMalloc>
 800d386:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d011      	beq.n	800d3b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	3350      	adds	r3, #80	@ 0x50
 800d396:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3a0:	79fa      	ldrb	r2, [r7, #7]
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	697a      	ldr	r2, [r7, #20]
 800d3aa:	68b9      	ldr	r1, [r7, #8]
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f000 f805 	bl	800d3bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3b2:	69bb      	ldr	r3, [r7, #24]
	}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3720      	adds	r7, #32
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
 800d3c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d103      	bne.n	800d3d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	69ba      	ldr	r2, [r7, #24]
 800d3d4:	601a      	str	r2, [r3, #0]
 800d3d6:	e002      	b.n	800d3de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d3ea:	2101      	movs	r1, #1
 800d3ec:	69b8      	ldr	r0, [r7, #24]
 800d3ee:	f7ff fec3 	bl	800d178 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	78fa      	ldrb	r2, [r7, #3]
 800d3f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d3fa:	bf00      	nop
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d402:	b580      	push	{r7, lr}
 800d404:	b082      	sub	sp, #8
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00e      	beq.n	800d42e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d422:	2300      	movs	r3, #0
 800d424:	2200      	movs	r2, #0
 800d426:	2100      	movs	r1, #0
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f8a3 	bl	800d574 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d42e:	bf00      	nop
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d436:	b580      	push	{r7, lr}
 800d438:	b086      	sub	sp, #24
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	4603      	mov	r3, r0
 800d43e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d440:	2301      	movs	r3, #1
 800d442:	617b      	str	r3, [r7, #20]
 800d444:	2300      	movs	r3, #0
 800d446:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	461a      	mov	r2, r3
 800d44c:	6939      	ldr	r1, [r7, #16]
 800d44e:	6978      	ldr	r0, [r7, #20]
 800d450:	f7ff ff79 	bl	800d346 <xQueueGenericCreate>
 800d454:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f7ff ffd3 	bl	800d402 <prvInitialiseMutex>

		return xNewQueue;
 800d45c:	68fb      	ldr	r3, [r7, #12]
	}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d466:	b580      	push	{r7, lr}
 800d468:	b088      	sub	sp, #32
 800d46a:	af02      	add	r7, sp, #8
 800d46c:	4603      	mov	r3, r0
 800d46e:	6039      	str	r1, [r7, #0]
 800d470:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d472:	2301      	movs	r3, #1
 800d474:	617b      	str	r3, [r7, #20]
 800d476:	2300      	movs	r3, #0
 800d478:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2200      	movs	r2, #0
 800d482:	6939      	ldr	r1, [r7, #16]
 800d484:	6978      	ldr	r0, [r7, #20]
 800d486:	f7ff fee1 	bl	800d24c <xQueueGenericCreateStatic>
 800d48a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7ff ffb8 	bl	800d402 <prvInitialiseMutex>

		return xNewQueue;
 800d492:	68fb      	ldr	r3, [r7, #12]
	}
 800d494:	4618      	mov	r0, r3
 800d496:	3718      	adds	r7, #24
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d49c:	b590      	push	{r4, r7, lr}
 800d49e:	b087      	sub	sp, #28
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10b      	bne.n	800d4c6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	60fb      	str	r3, [r7, #12]
}
 800d4c0:	bf00      	nop
 800d4c2:	bf00      	nop
 800d4c4:	e7fd      	b.n	800d4c2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	689c      	ldr	r4, [r3, #8]
 800d4ca:	f001 fbd5 	bl	800ec78 <xTaskGetCurrentTaskHandle>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	429c      	cmp	r4, r3
 800d4d2:	d111      	bne.n	800d4f8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	1e5a      	subs	r2, r3, #1
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d105      	bne.n	800d4f2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	6938      	ldr	r0, [r7, #16]
 800d4ee:	f000 f841 	bl	800d574 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	617b      	str	r3, [r7, #20]
 800d4f6:	e001      	b.n	800d4fc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d4fc:	697b      	ldr	r3, [r7, #20]
	}
 800d4fe:	4618      	mov	r0, r3
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	bd90      	pop	{r4, r7, pc}

0800d506 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d506:	b590      	push	{r4, r7, lr}
 800d508:	b087      	sub	sp, #28
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10b      	bne.n	800d532 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	60fb      	str	r3, [r7, #12]
}
 800d52c:	bf00      	nop
 800d52e:	bf00      	nop
 800d530:	e7fd      	b.n	800d52e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	689c      	ldr	r4, [r3, #8]
 800d536:	f001 fb9f 	bl	800ec78 <xTaskGetCurrentTaskHandle>
 800d53a:	4603      	mov	r3, r0
 800d53c:	429c      	cmp	r4, r3
 800d53e:	d107      	bne.n	800d550 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d54a:	2301      	movs	r3, #1
 800d54c:	617b      	str	r3, [r7, #20]
 800d54e:	e00c      	b.n	800d56a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d550:	6839      	ldr	r1, [r7, #0]
 800d552:	6938      	ldr	r0, [r7, #16]
 800d554:	f000 fa90 	bl	800da78 <xQueueSemaphoreTake>
 800d558:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d004      	beq.n	800d56a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	1c5a      	adds	r2, r3, #1
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d56a:	697b      	ldr	r3, [r7, #20]
	}
 800d56c:	4618      	mov	r0, r3
 800d56e:	371c      	adds	r7, #28
 800d570:	46bd      	mov	sp, r7
 800d572:	bd90      	pop	{r4, r7, pc}

0800d574 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b08e      	sub	sp, #56	@ 0x38
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
 800d580:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d582:	2300      	movs	r3, #0
 800d584:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10b      	bne.n	800d5a8 <xQueueGenericSend+0x34>
	__asm volatile
 800d590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d5a2:	bf00      	nop
 800d5a4:	bf00      	nop
 800d5a6:	e7fd      	b.n	800d5a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d103      	bne.n	800d5b6 <xQueueGenericSend+0x42>
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d101      	bne.n	800d5ba <xQueueGenericSend+0x46>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	e000      	b.n	800d5bc <xQueueGenericSend+0x48>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10b      	bne.n	800d5d8 <xQueueGenericSend+0x64>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d5d2:	bf00      	nop
 800d5d4:	bf00      	nop
 800d5d6:	e7fd      	b.n	800d5d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d103      	bne.n	800d5e6 <xQueueGenericSend+0x72>
 800d5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d101      	bne.n	800d5ea <xQueueGenericSend+0x76>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e000      	b.n	800d5ec <xQueueGenericSend+0x78>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10b      	bne.n	800d608 <xQueueGenericSend+0x94>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	623b      	str	r3, [r7, #32]
}
 800d602:	bf00      	nop
 800d604:	bf00      	nop
 800d606:	e7fd      	b.n	800d604 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d608:	f001 fb46 	bl	800ec98 <xTaskGetSchedulerState>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d102      	bne.n	800d618 <xQueueGenericSend+0xa4>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d101      	bne.n	800d61c <xQueueGenericSend+0xa8>
 800d618:	2301      	movs	r3, #1
 800d61a:	e000      	b.n	800d61e <xQueueGenericSend+0xaa>
 800d61c:	2300      	movs	r3, #0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10b      	bne.n	800d63a <xQueueGenericSend+0xc6>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	61fb      	str	r3, [r7, #28]
}
 800d634:	bf00      	nop
 800d636:	bf00      	nop
 800d638:	e7fd      	b.n	800d636 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d63a:	f002 fba5 	bl	800fd88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d646:	429a      	cmp	r2, r3
 800d648:	d302      	bcc.n	800d650 <xQueueGenericSend+0xdc>
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d129      	bne.n	800d6a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	68b9      	ldr	r1, [r7, #8]
 800d654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d656:	f000 fb37 	bl	800dcc8 <prvCopyDataToQueue>
 800d65a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d660:	2b00      	cmp	r3, #0
 800d662:	d010      	beq.n	800d686 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d666:	3324      	adds	r3, #36	@ 0x24
 800d668:	4618      	mov	r0, r3
 800d66a:	f001 f93f 	bl	800e8ec <xTaskRemoveFromEventList>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d013      	beq.n	800d69c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d674:	4b3f      	ldr	r3, [pc, #252]	@ (800d774 <xQueueGenericSend+0x200>)
 800d676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d67a:	601a      	str	r2, [r3, #0]
 800d67c:	f3bf 8f4f 	dsb	sy
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	e00a      	b.n	800d69c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d007      	beq.n	800d69c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d68c:	4b39      	ldr	r3, [pc, #228]	@ (800d774 <xQueueGenericSend+0x200>)
 800d68e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d69c:	f002 fba6 	bl	800fdec <vPortExitCritical>
				return pdPASS;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e063      	b.n	800d76c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d103      	bne.n	800d6b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6aa:	f002 fb9f 	bl	800fdec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	e05c      	b.n	800d76c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d106      	bne.n	800d6c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6b8:	f107 0314 	add.w	r3, r7, #20
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f001 f979 	bl	800e9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6c6:	f002 fb91 	bl	800fdec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6ca:	f000 fecf 	bl	800e46c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6ce:	f002 fb5b 	bl	800fd88 <vPortEnterCritical>
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6d8:	b25b      	sxtb	r3, r3
 800d6da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6de:	d103      	bne.n	800d6e8 <xQueueGenericSend+0x174>
 800d6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6ee:	b25b      	sxtb	r3, r3
 800d6f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6f4:	d103      	bne.n	800d6fe <xQueueGenericSend+0x18a>
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6fe:	f002 fb75 	bl	800fdec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d702:	1d3a      	adds	r2, r7, #4
 800d704:	f107 0314 	add.w	r3, r7, #20
 800d708:	4611      	mov	r1, r2
 800d70a:	4618      	mov	r0, r3
 800d70c:	f001 f968 	bl	800e9e0 <xTaskCheckForTimeOut>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d124      	bne.n	800d760 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d716:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d718:	f000 fbce 	bl	800deb8 <prvIsQueueFull>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d018      	beq.n	800d754 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	3310      	adds	r3, #16
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	4611      	mov	r1, r2
 800d72a:	4618      	mov	r0, r3
 800d72c:	f001 f88c 	bl	800e848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d730:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d732:	f000 fb59 	bl	800dde8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d736:	f000 fea7 	bl	800e488 <xTaskResumeAll>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f47f af7c 	bne.w	800d63a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d742:	4b0c      	ldr	r3, [pc, #48]	@ (800d774 <xQueueGenericSend+0x200>)
 800d744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d748:	601a      	str	r2, [r3, #0]
 800d74a:	f3bf 8f4f 	dsb	sy
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	e772      	b.n	800d63a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d756:	f000 fb47 	bl	800dde8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d75a:	f000 fe95 	bl	800e488 <xTaskResumeAll>
 800d75e:	e76c      	b.n	800d63a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d762:	f000 fb41 	bl	800dde8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d766:	f000 fe8f 	bl	800e488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d76a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3738      	adds	r7, #56	@ 0x38
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	e000ed04 	.word	0xe000ed04

0800d778 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b090      	sub	sp, #64	@ 0x40
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
 800d784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d10b      	bne.n	800d7a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d7a2:	bf00      	nop
 800d7a4:	bf00      	nop
 800d7a6:	e7fd      	b.n	800d7a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d103      	bne.n	800d7b6 <xQueueGenericSendFromISR+0x3e>
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d101      	bne.n	800d7ba <xQueueGenericSendFromISR+0x42>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e000      	b.n	800d7bc <xQueueGenericSendFromISR+0x44>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10b      	bne.n	800d7d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d7d2:	bf00      	nop
 800d7d4:	bf00      	nop
 800d7d6:	e7fd      	b.n	800d7d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	2b02      	cmp	r3, #2
 800d7dc:	d103      	bne.n	800d7e6 <xQueueGenericSendFromISR+0x6e>
 800d7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d101      	bne.n	800d7ea <xQueueGenericSendFromISR+0x72>
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e000      	b.n	800d7ec <xQueueGenericSendFromISR+0x74>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10b      	bne.n	800d808 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	623b      	str	r3, [r7, #32]
}
 800d802:	bf00      	nop
 800d804:	bf00      	nop
 800d806:	e7fd      	b.n	800d804 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d808:	f002 fb9e 	bl	800ff48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d80c:	f3ef 8211 	mrs	r2, BASEPRI
 800d810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d814:	f383 8811 	msr	BASEPRI, r3
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	61fa      	str	r2, [r7, #28]
 800d822:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d824:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d826:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d830:	429a      	cmp	r2, r3
 800d832:	d302      	bcc.n	800d83a <xQueueGenericSendFromISR+0xc2>
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d12f      	bne.n	800d89a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d840:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d848:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	68b9      	ldr	r1, [r7, #8]
 800d84e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d850:	f000 fa3a 	bl	800dcc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d854:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d85c:	d112      	bne.n	800d884 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d862:	2b00      	cmp	r3, #0
 800d864:	d016      	beq.n	800d894 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d868:	3324      	adds	r3, #36	@ 0x24
 800d86a:	4618      	mov	r0, r3
 800d86c:	f001 f83e 	bl	800e8ec <xTaskRemoveFromEventList>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00e      	beq.n	800d894 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00b      	beq.n	800d894 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	e007      	b.n	800d894 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d884:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d888:	3301      	adds	r3, #1
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	b25a      	sxtb	r2, r3
 800d88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d894:	2301      	movs	r3, #1
 800d896:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d898:	e001      	b.n	800d89e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d89a:	2300      	movs	r3, #0
 800d89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d8a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3740      	adds	r7, #64	@ 0x40
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b08c      	sub	sp, #48	@ 0x30
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10b      	bne.n	800d8e6 <xQueueReceive+0x32>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	623b      	str	r3, [r7, #32]
}
 800d8e0:	bf00      	nop
 800d8e2:	bf00      	nop
 800d8e4:	e7fd      	b.n	800d8e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d103      	bne.n	800d8f4 <xQueueReceive+0x40>
 800d8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d101      	bne.n	800d8f8 <xQueueReceive+0x44>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e000      	b.n	800d8fa <xQueueReceive+0x46>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d10b      	bne.n	800d916 <xQueueReceive+0x62>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	61fb      	str	r3, [r7, #28]
}
 800d910:	bf00      	nop
 800d912:	bf00      	nop
 800d914:	e7fd      	b.n	800d912 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d916:	f001 f9bf 	bl	800ec98 <xTaskGetSchedulerState>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d102      	bne.n	800d926 <xQueueReceive+0x72>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d101      	bne.n	800d92a <xQueueReceive+0x76>
 800d926:	2301      	movs	r3, #1
 800d928:	e000      	b.n	800d92c <xQueueReceive+0x78>
 800d92a:	2300      	movs	r3, #0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10b      	bne.n	800d948 <xQueueReceive+0x94>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	61bb      	str	r3, [r7, #24]
}
 800d942:	bf00      	nop
 800d944:	bf00      	nop
 800d946:	e7fd      	b.n	800d944 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d948:	f002 fa1e 	bl	800fd88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d950:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d954:	2b00      	cmp	r3, #0
 800d956:	d01f      	beq.n	800d998 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d958:	68b9      	ldr	r1, [r7, #8]
 800d95a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d95c:	f000 fa1e 	bl	800dd9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d962:	1e5a      	subs	r2, r3, #1
 800d964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d966:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96a:	691b      	ldr	r3, [r3, #16]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00f      	beq.n	800d990 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d972:	3310      	adds	r3, #16
 800d974:	4618      	mov	r0, r3
 800d976:	f000 ffb9 	bl	800e8ec <xTaskRemoveFromEventList>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d007      	beq.n	800d990 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d980:	4b3c      	ldr	r3, [pc, #240]	@ (800da74 <xQueueReceive+0x1c0>)
 800d982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d986:	601a      	str	r2, [r3, #0]
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d990:	f002 fa2c 	bl	800fdec <vPortExitCritical>
				return pdPASS;
 800d994:	2301      	movs	r3, #1
 800d996:	e069      	b.n	800da6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d103      	bne.n	800d9a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d99e:	f002 fa25 	bl	800fdec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e062      	b.n	800da6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d106      	bne.n	800d9ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9ac:	f107 0310 	add.w	r3, r7, #16
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 ffff 	bl	800e9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9ba:	f002 fa17 	bl	800fdec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9be:	f000 fd55 	bl	800e46c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9c2:	f002 f9e1 	bl	800fd88 <vPortEnterCritical>
 800d9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9cc:	b25b      	sxtb	r3, r3
 800d9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9d2:	d103      	bne.n	800d9dc <xQueueReceive+0x128>
 800d9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9e2:	b25b      	sxtb	r3, r3
 800d9e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9e8:	d103      	bne.n	800d9f2 <xQueueReceive+0x13e>
 800d9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9f2:	f002 f9fb 	bl	800fdec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9f6:	1d3a      	adds	r2, r7, #4
 800d9f8:	f107 0310 	add.w	r3, r7, #16
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 ffee 	bl	800e9e0 <xTaskCheckForTimeOut>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d123      	bne.n	800da52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da0c:	f000 fa3e 	bl	800de8c <prvIsQueueEmpty>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d017      	beq.n	800da46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da18:	3324      	adds	r3, #36	@ 0x24
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	4611      	mov	r1, r2
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 ff12 	bl	800e848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da26:	f000 f9df 	bl	800dde8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da2a:	f000 fd2d 	bl	800e488 <xTaskResumeAll>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d189      	bne.n	800d948 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800da34:	4b0f      	ldr	r3, [pc, #60]	@ (800da74 <xQueueReceive+0x1c0>)
 800da36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da3a:	601a      	str	r2, [r3, #0]
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	f3bf 8f6f 	isb	sy
 800da44:	e780      	b.n	800d948 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da48:	f000 f9ce 	bl	800dde8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da4c:	f000 fd1c 	bl	800e488 <xTaskResumeAll>
 800da50:	e77a      	b.n	800d948 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da54:	f000 f9c8 	bl	800dde8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da58:	f000 fd16 	bl	800e488 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da5e:	f000 fa15 	bl	800de8c <prvIsQueueEmpty>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	f43f af6f 	beq.w	800d948 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3730      	adds	r7, #48	@ 0x30
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	e000ed04 	.word	0xe000ed04

0800da78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b08e      	sub	sp, #56	@ 0x38
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da82:	2300      	movs	r3, #0
 800da84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da8a:	2300      	movs	r3, #0
 800da8c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da90:	2b00      	cmp	r3, #0
 800da92:	d10b      	bne.n	800daac <xQueueSemaphoreTake+0x34>
	__asm volatile
 800da94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	623b      	str	r3, [r7, #32]
}
 800daa6:	bf00      	nop
 800daa8:	bf00      	nop
 800daaa:	e7fd      	b.n	800daa8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800daac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00b      	beq.n	800dacc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	61fb      	str	r3, [r7, #28]
}
 800dac6:	bf00      	nop
 800dac8:	bf00      	nop
 800daca:	e7fd      	b.n	800dac8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dacc:	f001 f8e4 	bl	800ec98 <xTaskGetSchedulerState>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d102      	bne.n	800dadc <xQueueSemaphoreTake+0x64>
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d101      	bne.n	800dae0 <xQueueSemaphoreTake+0x68>
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <xQueueSemaphoreTake+0x6a>
 800dae0:	2300      	movs	r3, #0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10b      	bne.n	800dafe <xQueueSemaphoreTake+0x86>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	61bb      	str	r3, [r7, #24]
}
 800daf8:	bf00      	nop
 800dafa:	bf00      	nop
 800dafc:	e7fd      	b.n	800dafa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dafe:	f002 f943 	bl	800fd88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800db02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db06:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800db08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d024      	beq.n	800db58 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800db0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db10:	1e5a      	subs	r2, r3, #1
 800db12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db14:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d104      	bne.n	800db28 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800db1e:	f001 fa35 	bl	800ef8c <pvTaskIncrementMutexHeldCount>
 800db22:	4602      	mov	r2, r0
 800db24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db2a:	691b      	ldr	r3, [r3, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00f      	beq.n	800db50 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db32:	3310      	adds	r3, #16
 800db34:	4618      	mov	r0, r3
 800db36:	f000 fed9 	bl	800e8ec <xTaskRemoveFromEventList>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d007      	beq.n	800db50 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db40:	4b54      	ldr	r3, [pc, #336]	@ (800dc94 <xQueueSemaphoreTake+0x21c>)
 800db42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db50:	f002 f94c 	bl	800fdec <vPortExitCritical>
				return pdPASS;
 800db54:	2301      	movs	r3, #1
 800db56:	e098      	b.n	800dc8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d112      	bne.n	800db84 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800db5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00b      	beq.n	800db7c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	617b      	str	r3, [r7, #20]
}
 800db76:	bf00      	nop
 800db78:	bf00      	nop
 800db7a:	e7fd      	b.n	800db78 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db7c:	f002 f936 	bl	800fdec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db80:	2300      	movs	r3, #0
 800db82:	e082      	b.n	800dc8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db86:	2b00      	cmp	r3, #0
 800db88:	d106      	bne.n	800db98 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db8a:	f107 030c 	add.w	r3, r7, #12
 800db8e:	4618      	mov	r0, r3
 800db90:	f000 ff10 	bl	800e9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db94:	2301      	movs	r3, #1
 800db96:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db98:	f002 f928 	bl	800fdec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db9c:	f000 fc66 	bl	800e46c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dba0:	f002 f8f2 	bl	800fd88 <vPortEnterCritical>
 800dba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dbaa:	b25b      	sxtb	r3, r3
 800dbac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dbb0:	d103      	bne.n	800dbba <xQueueSemaphoreTake+0x142>
 800dbb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbc0:	b25b      	sxtb	r3, r3
 800dbc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dbc6:	d103      	bne.n	800dbd0 <xQueueSemaphoreTake+0x158>
 800dbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbd0:	f002 f90c 	bl	800fdec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbd4:	463a      	mov	r2, r7
 800dbd6:	f107 030c 	add.w	r3, r7, #12
 800dbda:	4611      	mov	r1, r2
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 feff 	bl	800e9e0 <xTaskCheckForTimeOut>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d132      	bne.n	800dc4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbea:	f000 f94f 	bl	800de8c <prvIsQueueEmpty>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d026      	beq.n	800dc42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d109      	bne.n	800dc10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800dbfc:	f002 f8c4 	bl	800fd88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f001 f865 	bl	800ecd4 <xTaskPriorityInherit>
 800dc0a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dc0c:	f002 f8ee 	bl	800fdec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc12:	3324      	adds	r3, #36	@ 0x24
 800dc14:	683a      	ldr	r2, [r7, #0]
 800dc16:	4611      	mov	r1, r2
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 fe15 	bl	800e848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc20:	f000 f8e2 	bl	800dde8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc24:	f000 fc30 	bl	800e488 <xTaskResumeAll>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f47f af67 	bne.w	800dafe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dc30:	4b18      	ldr	r3, [pc, #96]	@ (800dc94 <xQueueSemaphoreTake+0x21c>)
 800dc32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc36:	601a      	str	r2, [r3, #0]
 800dc38:	f3bf 8f4f 	dsb	sy
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	e75d      	b.n	800dafe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dc42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc44:	f000 f8d0 	bl	800dde8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc48:	f000 fc1e 	bl	800e488 <xTaskResumeAll>
 800dc4c:	e757      	b.n	800dafe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dc4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc50:	f000 f8ca 	bl	800dde8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc54:	f000 fc18 	bl	800e488 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc5a:	f000 f917 	bl	800de8c <prvIsQueueEmpty>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f43f af4c 	beq.w	800dafe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00d      	beq.n	800dc88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dc6c:	f002 f88c 	bl	800fd88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc72:	f000 f811 	bl	800dc98 <prvGetDisinheritPriorityAfterTimeout>
 800dc76:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f001 f900 	bl	800ee84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc84:	f002 f8b2 	bl	800fdec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3738      	adds	r7, #56	@ 0x38
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	e000ed04 	.word	0xe000ed04

0800dc98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d006      	beq.n	800dcb6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	e001      	b.n	800dcba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dcba:	68fb      	ldr	r3, [r7, #12]
	}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d10d      	bne.n	800dd02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d14d      	bne.n	800dd8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f001 f856 	bl	800eda4 <xTaskPriorityDisinherit>
 800dcf8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	609a      	str	r2, [r3, #8]
 800dd00:	e043      	b.n	800dd8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d119      	bne.n	800dd3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6858      	ldr	r0, [r3, #4]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd10:	461a      	mov	r2, r3
 800dd12:	68b9      	ldr	r1, [r7, #8]
 800dd14:	f005 ff89 	bl	8013c2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd20:	441a      	add	r2, r3
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d32b      	bcc.n	800dd8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	605a      	str	r2, [r3, #4]
 800dd3a:	e026      	b.n	800dd8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	68d8      	ldr	r0, [r3, #12]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd44:	461a      	mov	r2, r3
 800dd46:	68b9      	ldr	r1, [r7, #8]
 800dd48:	f005 ff6f 	bl	8013c2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	68da      	ldr	r2, [r3, #12]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd54:	425b      	negs	r3, r3
 800dd56:	441a      	add	r2, r3
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	68da      	ldr	r2, [r3, #12]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d207      	bcs.n	800dd78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	689a      	ldr	r2, [r3, #8]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd70:	425b      	negs	r3, r3
 800dd72:	441a      	add	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b02      	cmp	r3, #2
 800dd7c:	d105      	bne.n	800dd8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	3b01      	subs	r3, #1
 800dd88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	1c5a      	adds	r2, r3, #1
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dd92:	697b      	ldr	r3, [r7, #20]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d018      	beq.n	800dde0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	68da      	ldr	r2, [r3, #12]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb6:	441a      	add	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	68da      	ldr	r2, [r3, #12]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d303      	bcc.n	800ddd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	68d9      	ldr	r1, [r3, #12]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddd8:	461a      	mov	r2, r3
 800ddda:	6838      	ldr	r0, [r7, #0]
 800dddc:	f005 ff25 	bl	8013c2a <memcpy>
	}
}
 800dde0:	bf00      	nop
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ddf0:	f001 ffca 	bl	800fd88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ddfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddfc:	e011      	b.n	800de22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de02:	2b00      	cmp	r3, #0
 800de04:	d012      	beq.n	800de2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	3324      	adds	r3, #36	@ 0x24
 800de0a:	4618      	mov	r0, r3
 800de0c:	f000 fd6e 	bl	800e8ec <xTaskRemoveFromEventList>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d001      	beq.n	800de1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800de16:	f000 fe47 	bl	800eaa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800de1a:	7bfb      	ldrb	r3, [r7, #15]
 800de1c:	3b01      	subs	r3, #1
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de26:	2b00      	cmp	r3, #0
 800de28:	dce9      	bgt.n	800ddfe <prvUnlockQueue+0x16>
 800de2a:	e000      	b.n	800de2e <prvUnlockQueue+0x46>
					break;
 800de2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	22ff      	movs	r2, #255	@ 0xff
 800de32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800de36:	f001 ffd9 	bl	800fdec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de3a:	f001 ffa5 	bl	800fd88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de46:	e011      	b.n	800de6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d012      	beq.n	800de76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	3310      	adds	r3, #16
 800de54:	4618      	mov	r0, r3
 800de56:	f000 fd49 	bl	800e8ec <xTaskRemoveFromEventList>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de60:	f000 fe22 	bl	800eaa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de64:	7bbb      	ldrb	r3, [r7, #14]
 800de66:	3b01      	subs	r3, #1
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de70:	2b00      	cmp	r3, #0
 800de72:	dce9      	bgt.n	800de48 <prvUnlockQueue+0x60>
 800de74:	e000      	b.n	800de78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	22ff      	movs	r2, #255	@ 0xff
 800de7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800de80:	f001 ffb4 	bl	800fdec <vPortExitCritical>
}
 800de84:	bf00      	nop
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de94:	f001 ff78 	bl	800fd88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d102      	bne.n	800dea6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dea0:	2301      	movs	r3, #1
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	e001      	b.n	800deaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dea6:	2300      	movs	r3, #0
 800dea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800deaa:	f001 ff9f 	bl	800fdec <vPortExitCritical>

	return xReturn;
 800deae:	68fb      	ldr	r3, [r7, #12]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dec0:	f001 ff62 	bl	800fd88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800decc:	429a      	cmp	r2, r3
 800dece:	d102      	bne.n	800ded6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ded0:	2301      	movs	r3, #1
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	e001      	b.n	800deda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ded6:	2300      	movs	r3, #0
 800ded8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800deda:	f001 ff87 	bl	800fdec <vPortExitCritical>

	return xReturn;
 800dede:	68fb      	ldr	r3, [r7, #12]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800def2:	2300      	movs	r3, #0
 800def4:	60fb      	str	r3, [r7, #12]
 800def6:	e014      	b.n	800df22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800def8:	4a0f      	ldr	r2, [pc, #60]	@ (800df38 <vQueueAddToRegistry+0x50>)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10b      	bne.n	800df1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df04:	490c      	ldr	r1, [pc, #48]	@ (800df38 <vQueueAddToRegistry+0x50>)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	683a      	ldr	r2, [r7, #0]
 800df0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df0e:	4a0a      	ldr	r2, [pc, #40]	@ (800df38 <vQueueAddToRegistry+0x50>)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	00db      	lsls	r3, r3, #3
 800df14:	4413      	add	r3, r2
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800df1a:	e006      	b.n	800df2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	3301      	adds	r3, #1
 800df20:	60fb      	str	r3, [r7, #12]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2b07      	cmp	r3, #7
 800df26:	d9e7      	bls.n	800def8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df28:	bf00      	nop
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	2400200c 	.word	0x2400200c

0800df3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df4c:	f001 ff1c 	bl	800fd88 <vPortEnterCritical>
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df56:	b25b      	sxtb	r3, r3
 800df58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df5c:	d103      	bne.n	800df66 <vQueueWaitForMessageRestricted+0x2a>
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	2200      	movs	r2, #0
 800df62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df6c:	b25b      	sxtb	r3, r3
 800df6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df72:	d103      	bne.n	800df7c <vQueueWaitForMessageRestricted+0x40>
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	2200      	movs	r2, #0
 800df78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df7c:	f001 ff36 	bl	800fdec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df84:	2b00      	cmp	r3, #0
 800df86:	d106      	bne.n	800df96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	3324      	adds	r3, #36	@ 0x24
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	68b9      	ldr	r1, [r7, #8]
 800df90:	4618      	mov	r0, r3
 800df92:	f000 fc7f 	bl	800e894 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df96:	6978      	ldr	r0, [r7, #20]
 800df98:	f7ff ff26 	bl	800dde8 <prvUnlockQueue>
	}
 800df9c:	bf00      	nop
 800df9e:	3718      	adds	r7, #24
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b08e      	sub	sp, #56	@ 0x38
 800dfa8:	af04      	add	r7, sp, #16
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	607a      	str	r2, [r7, #4]
 800dfb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dfb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10b      	bne.n	800dfd0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	623b      	str	r3, [r7, #32]
}
 800dfca:	bf00      	nop
 800dfcc:	bf00      	nop
 800dfce:	e7fd      	b.n	800dfcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d10b      	bne.n	800dfee <xTaskCreateStatic+0x4a>
	__asm volatile
 800dfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	61fb      	str	r3, [r7, #28]
}
 800dfe8:	bf00      	nop
 800dfea:	bf00      	nop
 800dfec:	e7fd      	b.n	800dfea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dfee:	23a8      	movs	r3, #168	@ 0xa8
 800dff0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	2ba8      	cmp	r3, #168	@ 0xa8
 800dff6:	d00b      	beq.n	800e010 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	61bb      	str	r3, [r7, #24]
}
 800e00a:	bf00      	nop
 800e00c:	bf00      	nop
 800e00e:	e7fd      	b.n	800e00c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e010:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e014:	2b00      	cmp	r3, #0
 800e016:	d01e      	beq.n	800e056 <xTaskCreateStatic+0xb2>
 800e018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d01b      	beq.n	800e056 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e020:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e024:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e026:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e02a:	2202      	movs	r2, #2
 800e02c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e030:	2300      	movs	r3, #0
 800e032:	9303      	str	r3, [sp, #12]
 800e034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e036:	9302      	str	r3, [sp, #8]
 800e038:	f107 0314 	add.w	r3, r7, #20
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	68b9      	ldr	r1, [r7, #8]
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f000 f851 	bl	800e0f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e04e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e050:	f000 f8f6 	bl	800e240 <prvAddNewTaskToReadyList>
 800e054:	e001      	b.n	800e05a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e056:	2300      	movs	r3, #0
 800e058:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e05a:	697b      	ldr	r3, [r7, #20]
	}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3728      	adds	r7, #40	@ 0x28
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08c      	sub	sp, #48	@ 0x30
 800e068:	af04      	add	r7, sp, #16
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	603b      	str	r3, [r7, #0]
 800e070:	4613      	mov	r3, r2
 800e072:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e074:	88fb      	ldrh	r3, [r7, #6]
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	4618      	mov	r0, r3
 800e07a:	f001 ffa7 	bl	800ffcc <pvPortMalloc>
 800e07e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00e      	beq.n	800e0a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e086:	20a8      	movs	r0, #168	@ 0xa8
 800e088:	f001 ffa0 	bl	800ffcc <pvPortMalloc>
 800e08c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d003      	beq.n	800e09c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	697a      	ldr	r2, [r7, #20]
 800e098:	631a      	str	r2, [r3, #48]	@ 0x30
 800e09a:	e005      	b.n	800e0a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e09c:	6978      	ldr	r0, [r7, #20]
 800e09e:	f002 f863 	bl	8010168 <vPortFree>
 800e0a2:	e001      	b.n	800e0a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d017      	beq.n	800e0de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0b6:	88fa      	ldrh	r2, [r7, #6]
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	9303      	str	r3, [sp, #12]
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	9302      	str	r3, [sp, #8]
 800e0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c2:	9301      	str	r3, [sp, #4]
 800e0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	68b9      	ldr	r1, [r7, #8]
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f000 f80f 	bl	800e0f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0d2:	69f8      	ldr	r0, [r7, #28]
 800e0d4:	f000 f8b4 	bl	800e240 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	61bb      	str	r3, [r7, #24]
 800e0dc:	e002      	b.n	800e0e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0e4:	69bb      	ldr	r3, [r7, #24]
	}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
	...

0800e0f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e100:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	461a      	mov	r2, r3
 800e108:	21a5      	movs	r1, #165	@ 0xa5
 800e10a:	f005 fcad 	bl	8013a68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e110:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e118:	440b      	add	r3, r1
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	f023 0307 	bic.w	r3, r3, #7
 800e126:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	f003 0307 	and.w	r3, r3, #7
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00b      	beq.n	800e14a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e136:	f383 8811 	msr	BASEPRI, r3
 800e13a:	f3bf 8f6f 	isb	sy
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	617b      	str	r3, [r7, #20]
}
 800e144:	bf00      	nop
 800e146:	bf00      	nop
 800e148:	e7fd      	b.n	800e146 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d01f      	beq.n	800e190 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e150:	2300      	movs	r3, #0
 800e152:	61fb      	str	r3, [r7, #28]
 800e154:	e012      	b.n	800e17c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	4413      	add	r3, r2
 800e15c:	7819      	ldrb	r1, [r3, #0]
 800e15e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	4413      	add	r3, r2
 800e164:	3334      	adds	r3, #52	@ 0x34
 800e166:	460a      	mov	r2, r1
 800e168:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	4413      	add	r3, r2
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d006      	beq.n	800e184 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	3301      	adds	r3, #1
 800e17a:	61fb      	str	r3, [r7, #28]
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	2b0f      	cmp	r3, #15
 800e180:	d9e9      	bls.n	800e156 <prvInitialiseNewTask+0x66>
 800e182:	e000      	b.n	800e186 <prvInitialiseNewTask+0x96>
			{
				break;
 800e184:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e18e:	e003      	b.n	800e198 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e192:	2200      	movs	r2, #0
 800e194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e19a:	2b37      	cmp	r3, #55	@ 0x37
 800e19c:	d901      	bls.n	800e1a2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e19e:	2337      	movs	r3, #55	@ 0x37
 800e1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fe ff49 	bl	800d050 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c0:	3318      	adds	r3, #24
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fe ff44 	bl	800d050 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f0:	3354      	adds	r3, #84	@ 0x54
 800e1f2:	224c      	movs	r2, #76	@ 0x4c
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f005 fc36 	bl	8013a68 <memset>
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1fe:	4a0d      	ldr	r2, [pc, #52]	@ (800e234 <prvInitialiseNewTask+0x144>)
 800e200:	659a      	str	r2, [r3, #88]	@ 0x58
 800e202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e204:	4a0c      	ldr	r2, [pc, #48]	@ (800e238 <prvInitialiseNewTask+0x148>)
 800e206:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20a:	4a0c      	ldr	r2, [pc, #48]	@ (800e23c <prvInitialiseNewTask+0x14c>)
 800e20c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	68f9      	ldr	r1, [r7, #12]
 800e212:	69b8      	ldr	r0, [r7, #24]
 800e214:	f001 fc84 	bl	800fb20 <pxPortInitialiseStack>
 800e218:	4602      	mov	r2, r0
 800e21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e21c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e22a:	bf00      	nop
 800e22c:	3720      	adds	r7, #32
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	240333e8 	.word	0x240333e8
 800e238:	24033450 	.word	0x24033450
 800e23c:	240334b8 	.word	0x240334b8

0800e240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e248:	f001 fd9e 	bl	800fd88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e24c:	4b2d      	ldr	r3, [pc, #180]	@ (800e304 <prvAddNewTaskToReadyList+0xc4>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	3301      	adds	r3, #1
 800e252:	4a2c      	ldr	r2, [pc, #176]	@ (800e304 <prvAddNewTaskToReadyList+0xc4>)
 800e254:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e256:	4b2c      	ldr	r3, [pc, #176]	@ (800e308 <prvAddNewTaskToReadyList+0xc8>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d109      	bne.n	800e272 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e25e:	4a2a      	ldr	r2, [pc, #168]	@ (800e308 <prvAddNewTaskToReadyList+0xc8>)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e264:	4b27      	ldr	r3, [pc, #156]	@ (800e304 <prvAddNewTaskToReadyList+0xc4>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d110      	bne.n	800e28e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e26c:	f000 fc40 	bl	800eaf0 <prvInitialiseTaskLists>
 800e270:	e00d      	b.n	800e28e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e272:	4b26      	ldr	r3, [pc, #152]	@ (800e30c <prvAddNewTaskToReadyList+0xcc>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d109      	bne.n	800e28e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e27a:	4b23      	ldr	r3, [pc, #140]	@ (800e308 <prvAddNewTaskToReadyList+0xc8>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e284:	429a      	cmp	r2, r3
 800e286:	d802      	bhi.n	800e28e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e288:	4a1f      	ldr	r2, [pc, #124]	@ (800e308 <prvAddNewTaskToReadyList+0xc8>)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e28e:	4b20      	ldr	r3, [pc, #128]	@ (800e310 <prvAddNewTaskToReadyList+0xd0>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3301      	adds	r3, #1
 800e294:	4a1e      	ldr	r2, [pc, #120]	@ (800e310 <prvAddNewTaskToReadyList+0xd0>)
 800e296:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e298:	4b1d      	ldr	r3, [pc, #116]	@ (800e310 <prvAddNewTaskToReadyList+0xd0>)
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2a4:	4b1b      	ldr	r3, [pc, #108]	@ (800e314 <prvAddNewTaskToReadyList+0xd4>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d903      	bls.n	800e2b4 <prvAddNewTaskToReadyList+0x74>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2b0:	4a18      	ldr	r2, [pc, #96]	@ (800e314 <prvAddNewTaskToReadyList+0xd4>)
 800e2b2:	6013      	str	r3, [r2, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4a15      	ldr	r2, [pc, #84]	@ (800e318 <prvAddNewTaskToReadyList+0xd8>)
 800e2c2:	441a      	add	r2, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	4610      	mov	r0, r2
 800e2cc:	f7fe fecd 	bl	800d06a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e2d0:	f001 fd8c 	bl	800fdec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e2d4:	4b0d      	ldr	r3, [pc, #52]	@ (800e30c <prvAddNewTaskToReadyList+0xcc>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00e      	beq.n	800e2fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e308 <prvAddNewTaskToReadyList+0xc8>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d207      	bcs.n	800e2fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e2ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e31c <prvAddNewTaskToReadyList+0xdc>)
 800e2ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2f0:	601a      	str	r2, [r3, #0]
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2fa:	bf00      	nop
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	24002520 	.word	0x24002520
 800e308:	2400204c 	.word	0x2400204c
 800e30c:	2400252c 	.word	0x2400252c
 800e310:	2400253c 	.word	0x2400253c
 800e314:	24002528 	.word	0x24002528
 800e318:	24002050 	.word	0x24002050
 800e31c:	e000ed04 	.word	0xe000ed04

0800e320 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e328:	2300      	movs	r3, #0
 800e32a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d018      	beq.n	800e364 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e332:	4b14      	ldr	r3, [pc, #80]	@ (800e384 <vTaskDelay+0x64>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00b      	beq.n	800e352 <vTaskDelay+0x32>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	60bb      	str	r3, [r7, #8]
}
 800e34c:	bf00      	nop
 800e34e:	bf00      	nop
 800e350:	e7fd      	b.n	800e34e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e352:	f000 f88b 	bl	800e46c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e356:	2100      	movs	r1, #0
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f001 f833 	bl	800f3c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e35e:	f000 f893 	bl	800e488 <xTaskResumeAll>
 800e362:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d107      	bne.n	800e37a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e36a:	4b07      	ldr	r3, [pc, #28]	@ (800e388 <vTaskDelay+0x68>)
 800e36c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e37a:	bf00      	nop
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	24002548 	.word	0x24002548
 800e388:	e000ed04 	.word	0xe000ed04

0800e38c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08a      	sub	sp, #40	@ 0x28
 800e390:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e392:	2300      	movs	r3, #0
 800e394:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e396:	2300      	movs	r3, #0
 800e398:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e39a:	463a      	mov	r2, r7
 800e39c:	1d39      	adds	r1, r7, #4
 800e39e:	f107 0308 	add.w	r3, r7, #8
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fe fe00 	bl	800cfa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	9202      	str	r2, [sp, #8]
 800e3b0:	9301      	str	r3, [sp, #4]
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	460a      	mov	r2, r1
 800e3ba:	4924      	ldr	r1, [pc, #144]	@ (800e44c <vTaskStartScheduler+0xc0>)
 800e3bc:	4824      	ldr	r0, [pc, #144]	@ (800e450 <vTaskStartScheduler+0xc4>)
 800e3be:	f7ff fdf1 	bl	800dfa4 <xTaskCreateStatic>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	4a23      	ldr	r2, [pc, #140]	@ (800e454 <vTaskStartScheduler+0xc8>)
 800e3c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3c8:	4b22      	ldr	r3, [pc, #136]	@ (800e454 <vTaskStartScheduler+0xc8>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d002      	beq.n	800e3d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	617b      	str	r3, [r7, #20]
 800e3d4:	e001      	b.n	800e3da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d102      	bne.n	800e3e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e3e0:	f001 f844 	bl	800f46c <xTimerCreateTimerTask>
 800e3e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d11b      	bne.n	800e424 <vTaskStartScheduler+0x98>
	__asm volatile
 800e3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	613b      	str	r3, [r7, #16]
}
 800e3fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e400:	4b15      	ldr	r3, [pc, #84]	@ (800e458 <vTaskStartScheduler+0xcc>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	3354      	adds	r3, #84	@ 0x54
 800e406:	4a15      	ldr	r2, [pc, #84]	@ (800e45c <vTaskStartScheduler+0xd0>)
 800e408:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e40a:	4b15      	ldr	r3, [pc, #84]	@ (800e460 <vTaskStartScheduler+0xd4>)
 800e40c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e410:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e412:	4b14      	ldr	r3, [pc, #80]	@ (800e464 <vTaskStartScheduler+0xd8>)
 800e414:	2201      	movs	r2, #1
 800e416:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e418:	4b13      	ldr	r3, [pc, #76]	@ (800e468 <vTaskStartScheduler+0xdc>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e41e:	f001 fc0f 	bl	800fc40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e422:	e00f      	b.n	800e444 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e42a:	d10b      	bne.n	800e444 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	60fb      	str	r3, [r7, #12]
}
 800e43e:	bf00      	nop
 800e440:	bf00      	nop
 800e442:	e7fd      	b.n	800e440 <vTaskStartScheduler+0xb4>
}
 800e444:	bf00      	nop
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	08013fac 	.word	0x08013fac
 800e450:	0800eac1 	.word	0x0800eac1
 800e454:	24002544 	.word	0x24002544
 800e458:	2400204c 	.word	0x2400204c
 800e45c:	2400139c 	.word	0x2400139c
 800e460:	24002540 	.word	0x24002540
 800e464:	2400252c 	.word	0x2400252c
 800e468:	24002524 	.word	0x24002524

0800e46c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e46c:	b480      	push	{r7}
 800e46e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e470:	4b04      	ldr	r3, [pc, #16]	@ (800e484 <vTaskSuspendAll+0x18>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	3301      	adds	r3, #1
 800e476:	4a03      	ldr	r2, [pc, #12]	@ (800e484 <vTaskSuspendAll+0x18>)
 800e478:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e47a:	bf00      	nop
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	24002548 	.word	0x24002548

0800e488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e48e:	2300      	movs	r3, #0
 800e490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e492:	2300      	movs	r3, #0
 800e494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e496:	4b42      	ldr	r3, [pc, #264]	@ (800e5a0 <xTaskResumeAll+0x118>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d10b      	bne.n	800e4b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	603b      	str	r3, [r7, #0]
}
 800e4b0:	bf00      	nop
 800e4b2:	bf00      	nop
 800e4b4:	e7fd      	b.n	800e4b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e4b6:	f001 fc67 	bl	800fd88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e4ba:	4b39      	ldr	r3, [pc, #228]	@ (800e5a0 <xTaskResumeAll+0x118>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	4a37      	ldr	r2, [pc, #220]	@ (800e5a0 <xTaskResumeAll+0x118>)
 800e4c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4c4:	4b36      	ldr	r3, [pc, #216]	@ (800e5a0 <xTaskResumeAll+0x118>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d162      	bne.n	800e592 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e4cc:	4b35      	ldr	r3, [pc, #212]	@ (800e5a4 <xTaskResumeAll+0x11c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d05e      	beq.n	800e592 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4d4:	e02f      	b.n	800e536 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4d6:	4b34      	ldr	r3, [pc, #208]	@ (800e5a8 <xTaskResumeAll+0x120>)
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	3318      	adds	r3, #24
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fe fe1e 	bl	800d124 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fe fe19 	bl	800d124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4f6:	4b2d      	ldr	r3, [pc, #180]	@ (800e5ac <xTaskResumeAll+0x124>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d903      	bls.n	800e506 <xTaskResumeAll+0x7e>
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e502:	4a2a      	ldr	r2, [pc, #168]	@ (800e5ac <xTaskResumeAll+0x124>)
 800e504:	6013      	str	r3, [r2, #0]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e50a:	4613      	mov	r3, r2
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4a27      	ldr	r2, [pc, #156]	@ (800e5b0 <xTaskResumeAll+0x128>)
 800e514:	441a      	add	r2, r3
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	3304      	adds	r3, #4
 800e51a:	4619      	mov	r1, r3
 800e51c:	4610      	mov	r0, r2
 800e51e:	f7fe fda4 	bl	800d06a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e526:	4b23      	ldr	r3, [pc, #140]	@ (800e5b4 <xTaskResumeAll+0x12c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d302      	bcc.n	800e536 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e530:	4b21      	ldr	r3, [pc, #132]	@ (800e5b8 <xTaskResumeAll+0x130>)
 800e532:	2201      	movs	r2, #1
 800e534:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e536:	4b1c      	ldr	r3, [pc, #112]	@ (800e5a8 <xTaskResumeAll+0x120>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d1cb      	bne.n	800e4d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d001      	beq.n	800e548 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e544:	f000 fb78 	bl	800ec38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e548:	4b1c      	ldr	r3, [pc, #112]	@ (800e5bc <xTaskResumeAll+0x134>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d010      	beq.n	800e576 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e554:	f000 f858 	bl	800e608 <xTaskIncrementTick>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d002      	beq.n	800e564 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e55e:	4b16      	ldr	r3, [pc, #88]	@ (800e5b8 <xTaskResumeAll+0x130>)
 800e560:	2201      	movs	r2, #1
 800e562:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	3b01      	subs	r3, #1
 800e568:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1f1      	bne.n	800e554 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e570:	4b12      	ldr	r3, [pc, #72]	@ (800e5bc <xTaskResumeAll+0x134>)
 800e572:	2200      	movs	r2, #0
 800e574:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e576:	4b10      	ldr	r3, [pc, #64]	@ (800e5b8 <xTaskResumeAll+0x130>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d009      	beq.n	800e592 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e57e:	2301      	movs	r3, #1
 800e580:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e582:	4b0f      	ldr	r3, [pc, #60]	@ (800e5c0 <xTaskResumeAll+0x138>)
 800e584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e588:	601a      	str	r2, [r3, #0]
 800e58a:	f3bf 8f4f 	dsb	sy
 800e58e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e592:	f001 fc2b 	bl	800fdec <vPortExitCritical>

	return xAlreadyYielded;
 800e596:	68bb      	ldr	r3, [r7, #8]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	24002548 	.word	0x24002548
 800e5a4:	24002520 	.word	0x24002520
 800e5a8:	240024e0 	.word	0x240024e0
 800e5ac:	24002528 	.word	0x24002528
 800e5b0:	24002050 	.word	0x24002050
 800e5b4:	2400204c 	.word	0x2400204c
 800e5b8:	24002534 	.word	0x24002534
 800e5bc:	24002530 	.word	0x24002530
 800e5c0:	e000ed04 	.word	0xe000ed04

0800e5c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e5ca:	4b05      	ldr	r3, [pc, #20]	@ (800e5e0 <xTaskGetTickCount+0x1c>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e5d0:	687b      	ldr	r3, [r7, #4]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	370c      	adds	r7, #12
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	24002524 	.word	0x24002524

0800e5e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5ea:	f001 fcad 	bl	800ff48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e5f2:	4b04      	ldr	r3, [pc, #16]	@ (800e604 <xTaskGetTickCountFromISR+0x20>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5f8:	683b      	ldr	r3, [r7, #0]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	24002524 	.word	0x24002524

0800e608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e60e:	2300      	movs	r3, #0
 800e610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e612:	4b4f      	ldr	r3, [pc, #316]	@ (800e750 <xTaskIncrementTick+0x148>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f040 8090 	bne.w	800e73c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e61c:	4b4d      	ldr	r3, [pc, #308]	@ (800e754 <xTaskIncrementTick+0x14c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	3301      	adds	r3, #1
 800e622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e624:	4a4b      	ldr	r2, [pc, #300]	@ (800e754 <xTaskIncrementTick+0x14c>)
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d121      	bne.n	800e674 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e630:	4b49      	ldr	r3, [pc, #292]	@ (800e758 <xTaskIncrementTick+0x150>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00b      	beq.n	800e652 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e63e:	f383 8811 	msr	BASEPRI, r3
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f3bf 8f4f 	dsb	sy
 800e64a:	603b      	str	r3, [r7, #0]
}
 800e64c:	bf00      	nop
 800e64e:	bf00      	nop
 800e650:	e7fd      	b.n	800e64e <xTaskIncrementTick+0x46>
 800e652:	4b41      	ldr	r3, [pc, #260]	@ (800e758 <xTaskIncrementTick+0x150>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	4b40      	ldr	r3, [pc, #256]	@ (800e75c <xTaskIncrementTick+0x154>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a3e      	ldr	r2, [pc, #248]	@ (800e758 <xTaskIncrementTick+0x150>)
 800e65e:	6013      	str	r3, [r2, #0]
 800e660:	4a3e      	ldr	r2, [pc, #248]	@ (800e75c <xTaskIncrementTick+0x154>)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6013      	str	r3, [r2, #0]
 800e666:	4b3e      	ldr	r3, [pc, #248]	@ (800e760 <xTaskIncrementTick+0x158>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	3301      	adds	r3, #1
 800e66c:	4a3c      	ldr	r2, [pc, #240]	@ (800e760 <xTaskIncrementTick+0x158>)
 800e66e:	6013      	str	r3, [r2, #0]
 800e670:	f000 fae2 	bl	800ec38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e674:	4b3b      	ldr	r3, [pc, #236]	@ (800e764 <xTaskIncrementTick+0x15c>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	693a      	ldr	r2, [r7, #16]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d349      	bcc.n	800e712 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e67e:	4b36      	ldr	r3, [pc, #216]	@ (800e758 <xTaskIncrementTick+0x150>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d104      	bne.n	800e692 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e688:	4b36      	ldr	r3, [pc, #216]	@ (800e764 <xTaskIncrementTick+0x15c>)
 800e68a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e68e:	601a      	str	r2, [r3, #0]
					break;
 800e690:	e03f      	b.n	800e712 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e692:	4b31      	ldr	r3, [pc, #196]	@ (800e758 <xTaskIncrementTick+0x150>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e6a2:	693a      	ldr	r2, [r7, #16]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d203      	bcs.n	800e6b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e6aa:	4a2e      	ldr	r2, [pc, #184]	@ (800e764 <xTaskIncrementTick+0x15c>)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e6b0:	e02f      	b.n	800e712 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	3304      	adds	r3, #4
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fe fd34 	bl	800d124 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d004      	beq.n	800e6ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	3318      	adds	r3, #24
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fe fd2b 	bl	800d124 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d2:	4b25      	ldr	r3, [pc, #148]	@ (800e768 <xTaskIncrementTick+0x160>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d903      	bls.n	800e6e2 <xTaskIncrementTick+0xda>
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6de:	4a22      	ldr	r2, [pc, #136]	@ (800e768 <xTaskIncrementTick+0x160>)
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4a1f      	ldr	r2, [pc, #124]	@ (800e76c <xTaskIncrementTick+0x164>)
 800e6f0:	441a      	add	r2, r3
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	4610      	mov	r0, r2
 800e6fa:	f7fe fcb6 	bl	800d06a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e702:	4b1b      	ldr	r3, [pc, #108]	@ (800e770 <xTaskIncrementTick+0x168>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e708:	429a      	cmp	r2, r3
 800e70a:	d3b8      	bcc.n	800e67e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e70c:	2301      	movs	r3, #1
 800e70e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e710:	e7b5      	b.n	800e67e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e712:	4b17      	ldr	r3, [pc, #92]	@ (800e770 <xTaskIncrementTick+0x168>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e718:	4914      	ldr	r1, [pc, #80]	@ (800e76c <xTaskIncrementTick+0x164>)
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	440b      	add	r3, r1
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b01      	cmp	r3, #1
 800e728:	d901      	bls.n	800e72e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e72a:	2301      	movs	r3, #1
 800e72c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e72e:	4b11      	ldr	r3, [pc, #68]	@ (800e774 <xTaskIncrementTick+0x16c>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d007      	beq.n	800e746 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e736:	2301      	movs	r3, #1
 800e738:	617b      	str	r3, [r7, #20]
 800e73a:	e004      	b.n	800e746 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e73c:	4b0e      	ldr	r3, [pc, #56]	@ (800e778 <xTaskIncrementTick+0x170>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	3301      	adds	r3, #1
 800e742:	4a0d      	ldr	r2, [pc, #52]	@ (800e778 <xTaskIncrementTick+0x170>)
 800e744:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e746:	697b      	ldr	r3, [r7, #20]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	24002548 	.word	0x24002548
 800e754:	24002524 	.word	0x24002524
 800e758:	240024d8 	.word	0x240024d8
 800e75c:	240024dc 	.word	0x240024dc
 800e760:	24002538 	.word	0x24002538
 800e764:	24002540 	.word	0x24002540
 800e768:	24002528 	.word	0x24002528
 800e76c:	24002050 	.word	0x24002050
 800e770:	2400204c 	.word	0x2400204c
 800e774:	24002534 	.word	0x24002534
 800e778:	24002530 	.word	0x24002530

0800e77c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e782:	4b2b      	ldr	r3, [pc, #172]	@ (800e830 <vTaskSwitchContext+0xb4>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d003      	beq.n	800e792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e78a:	4b2a      	ldr	r3, [pc, #168]	@ (800e834 <vTaskSwitchContext+0xb8>)
 800e78c:	2201      	movs	r2, #1
 800e78e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e790:	e047      	b.n	800e822 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e792:	4b28      	ldr	r3, [pc, #160]	@ (800e834 <vTaskSwitchContext+0xb8>)
 800e794:	2200      	movs	r2, #0
 800e796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e798:	4b27      	ldr	r3, [pc, #156]	@ (800e838 <vTaskSwitchContext+0xbc>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	60fb      	str	r3, [r7, #12]
 800e79e:	e011      	b.n	800e7c4 <vTaskSwitchContext+0x48>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d10b      	bne.n	800e7be <vTaskSwitchContext+0x42>
	__asm volatile
 800e7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7aa:	f383 8811 	msr	BASEPRI, r3
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f3bf 8f4f 	dsb	sy
 800e7b6:	607b      	str	r3, [r7, #4]
}
 800e7b8:	bf00      	nop
 800e7ba:	bf00      	nop
 800e7bc:	e7fd      	b.n	800e7ba <vTaskSwitchContext+0x3e>
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	3b01      	subs	r3, #1
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	491d      	ldr	r1, [pc, #116]	@ (800e83c <vTaskSwitchContext+0xc0>)
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	4413      	add	r3, r2
 800e7ce:	009b      	lsls	r3, r3, #2
 800e7d0:	440b      	add	r3, r1
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d0e3      	beq.n	800e7a0 <vTaskSwitchContext+0x24>
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4a16      	ldr	r2, [pc, #88]	@ (800e83c <vTaskSwitchContext+0xc0>)
 800e7e4:	4413      	add	r3, r2
 800e7e6:	60bb      	str	r3, [r7, #8]
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	685a      	ldr	r2, [r3, #4]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	605a      	str	r2, [r3, #4]
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	685a      	ldr	r2, [r3, #4]
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	3308      	adds	r3, #8
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d104      	bne.n	800e808 <vTaskSwitchContext+0x8c>
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	685a      	ldr	r2, [r3, #4]
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	605a      	str	r2, [r3, #4]
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	4a0c      	ldr	r2, [pc, #48]	@ (800e840 <vTaskSwitchContext+0xc4>)
 800e810:	6013      	str	r3, [r2, #0]
 800e812:	4a09      	ldr	r2, [pc, #36]	@ (800e838 <vTaskSwitchContext+0xbc>)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e818:	4b09      	ldr	r3, [pc, #36]	@ (800e840 <vTaskSwitchContext+0xc4>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	3354      	adds	r3, #84	@ 0x54
 800e81e:	4a09      	ldr	r2, [pc, #36]	@ (800e844 <vTaskSwitchContext+0xc8>)
 800e820:	6013      	str	r3, [r2, #0]
}
 800e822:	bf00      	nop
 800e824:	3714      	adds	r7, #20
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	24002548 	.word	0x24002548
 800e834:	24002534 	.word	0x24002534
 800e838:	24002528 	.word	0x24002528
 800e83c:	24002050 	.word	0x24002050
 800e840:	2400204c 	.word	0x2400204c
 800e844:	2400139c 	.word	0x2400139c

0800e848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d10b      	bne.n	800e870 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	60fb      	str	r3, [r7, #12]
}
 800e86a:	bf00      	nop
 800e86c:	bf00      	nop
 800e86e:	e7fd      	b.n	800e86c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e870:	4b07      	ldr	r3, [pc, #28]	@ (800e890 <vTaskPlaceOnEventList+0x48>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3318      	adds	r3, #24
 800e876:	4619      	mov	r1, r3
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7fe fc1a 	bl	800d0b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e87e:	2101      	movs	r1, #1
 800e880:	6838      	ldr	r0, [r7, #0]
 800e882:	f000 fd9f 	bl	800f3c4 <prvAddCurrentTaskToDelayedList>
}
 800e886:	bf00      	nop
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	2400204c 	.word	0x2400204c

0800e894 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d10b      	bne.n	800e8be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	617b      	str	r3, [r7, #20]
}
 800e8b8:	bf00      	nop
 800e8ba:	bf00      	nop
 800e8bc:	e7fd      	b.n	800e8ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8be:	4b0a      	ldr	r3, [pc, #40]	@ (800e8e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	3318      	adds	r3, #24
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	68f8      	ldr	r0, [r7, #12]
 800e8c8:	f7fe fbcf 	bl	800d06a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d002      	beq.n	800e8d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e8d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e8d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e8d8:	6879      	ldr	r1, [r7, #4]
 800e8da:	68b8      	ldr	r0, [r7, #8]
 800e8dc:	f000 fd72 	bl	800f3c4 <prvAddCurrentTaskToDelayedList>
	}
 800e8e0:	bf00      	nop
 800e8e2:	3718      	adds	r7, #24
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	2400204c 	.word	0x2400204c

0800e8ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10b      	bne.n	800e91a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	60fb      	str	r3, [r7, #12]
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop
 800e918:	e7fd      	b.n	800e916 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	3318      	adds	r3, #24
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe fc00 	bl	800d124 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e924:	4b1d      	ldr	r3, [pc, #116]	@ (800e99c <xTaskRemoveFromEventList+0xb0>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d11d      	bne.n	800e968 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	3304      	adds	r3, #4
 800e930:	4618      	mov	r0, r3
 800e932:	f7fe fbf7 	bl	800d124 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e93a:	4b19      	ldr	r3, [pc, #100]	@ (800e9a0 <xTaskRemoveFromEventList+0xb4>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d903      	bls.n	800e94a <xTaskRemoveFromEventList+0x5e>
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e946:	4a16      	ldr	r2, [pc, #88]	@ (800e9a0 <xTaskRemoveFromEventList+0xb4>)
 800e948:	6013      	str	r3, [r2, #0]
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e94e:	4613      	mov	r3, r2
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	4413      	add	r3, r2
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	4a13      	ldr	r2, [pc, #76]	@ (800e9a4 <xTaskRemoveFromEventList+0xb8>)
 800e958:	441a      	add	r2, r3
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	3304      	adds	r3, #4
 800e95e:	4619      	mov	r1, r3
 800e960:	4610      	mov	r0, r2
 800e962:	f7fe fb82 	bl	800d06a <vListInsertEnd>
 800e966:	e005      	b.n	800e974 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	3318      	adds	r3, #24
 800e96c:	4619      	mov	r1, r3
 800e96e:	480e      	ldr	r0, [pc, #56]	@ (800e9a8 <xTaskRemoveFromEventList+0xbc>)
 800e970:	f7fe fb7b 	bl	800d06a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e978:	4b0c      	ldr	r3, [pc, #48]	@ (800e9ac <xTaskRemoveFromEventList+0xc0>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e97e:	429a      	cmp	r2, r3
 800e980:	d905      	bls.n	800e98e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e982:	2301      	movs	r3, #1
 800e984:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e986:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b0 <xTaskRemoveFromEventList+0xc4>)
 800e988:	2201      	movs	r2, #1
 800e98a:	601a      	str	r2, [r3, #0]
 800e98c:	e001      	b.n	800e992 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e98e:	2300      	movs	r3, #0
 800e990:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e992:	697b      	ldr	r3, [r7, #20]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	24002548 	.word	0x24002548
 800e9a0:	24002528 	.word	0x24002528
 800e9a4:	24002050 	.word	0x24002050
 800e9a8:	240024e0 	.word	0x240024e0
 800e9ac:	2400204c 	.word	0x2400204c
 800e9b0:	24002534 	.word	0x24002534

0800e9b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9bc:	4b06      	ldr	r3, [pc, #24]	@ (800e9d8 <vTaskInternalSetTimeOutState+0x24>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9c4:	4b05      	ldr	r3, [pc, #20]	@ (800e9dc <vTaskInternalSetTimeOutState+0x28>)
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	605a      	str	r2, [r3, #4]
}
 800e9cc:	bf00      	nop
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr
 800e9d8:	24002538 	.word	0x24002538
 800e9dc:	24002524 	.word	0x24002524

0800e9e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b088      	sub	sp, #32
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d10b      	bne.n	800ea08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f4:	f383 8811 	msr	BASEPRI, r3
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	613b      	str	r3, [r7, #16]
}
 800ea02:	bf00      	nop
 800ea04:	bf00      	nop
 800ea06:	e7fd      	b.n	800ea04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d10b      	bne.n	800ea26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ea0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea12:	f383 8811 	msr	BASEPRI, r3
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	f3bf 8f4f 	dsb	sy
 800ea1e:	60fb      	str	r3, [r7, #12]
}
 800ea20:	bf00      	nop
 800ea22:	bf00      	nop
 800ea24:	e7fd      	b.n	800ea22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ea26:	f001 f9af 	bl	800fd88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea2a:	4b1d      	ldr	r3, [pc, #116]	@ (800eaa0 <xTaskCheckForTimeOut+0xc0>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	69ba      	ldr	r2, [r7, #24]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea42:	d102      	bne.n	800ea4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea44:	2300      	movs	r3, #0
 800ea46:	61fb      	str	r3, [r7, #28]
 800ea48:	e023      	b.n	800ea92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	4b15      	ldr	r3, [pc, #84]	@ (800eaa4 <xTaskCheckForTimeOut+0xc4>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d007      	beq.n	800ea66 <xTaskCheckForTimeOut+0x86>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	69ba      	ldr	r2, [r7, #24]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d302      	bcc.n	800ea66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea60:	2301      	movs	r3, #1
 800ea62:	61fb      	str	r3, [r7, #28]
 800ea64:	e015      	b.n	800ea92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	697a      	ldr	r2, [r7, #20]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d20b      	bcs.n	800ea88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	1ad2      	subs	r2, r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7ff ff99 	bl	800e9b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea82:	2300      	movs	r3, #0
 800ea84:	61fb      	str	r3, [r7, #28]
 800ea86:	e004      	b.n	800ea92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea92:	f001 f9ab 	bl	800fdec <vPortExitCritical>

	return xReturn;
 800ea96:	69fb      	ldr	r3, [r7, #28]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3720      	adds	r7, #32
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	24002524 	.word	0x24002524
 800eaa4:	24002538 	.word	0x24002538

0800eaa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eaac:	4b03      	ldr	r3, [pc, #12]	@ (800eabc <vTaskMissedYield+0x14>)
 800eaae:	2201      	movs	r2, #1
 800eab0:	601a      	str	r2, [r3, #0]
}
 800eab2:	bf00      	nop
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr
 800eabc:	24002534 	.word	0x24002534

0800eac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eac8:	f000 f852 	bl	800eb70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eacc:	4b06      	ldr	r3, [pc, #24]	@ (800eae8 <prvIdleTask+0x28>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d9f9      	bls.n	800eac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ead4:	4b05      	ldr	r3, [pc, #20]	@ (800eaec <prvIdleTask+0x2c>)
 800ead6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eada:	601a      	str	r2, [r3, #0]
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eae4:	e7f0      	b.n	800eac8 <prvIdleTask+0x8>
 800eae6:	bf00      	nop
 800eae8:	24002050 	.word	0x24002050
 800eaec:	e000ed04 	.word	0xe000ed04

0800eaf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	607b      	str	r3, [r7, #4]
 800eafa:	e00c      	b.n	800eb16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	4613      	mov	r3, r2
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	4413      	add	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4a12      	ldr	r2, [pc, #72]	@ (800eb50 <prvInitialiseTaskLists+0x60>)
 800eb08:	4413      	add	r3, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe fa80 	bl	800d010 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3301      	adds	r3, #1
 800eb14:	607b      	str	r3, [r7, #4]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b37      	cmp	r3, #55	@ 0x37
 800eb1a:	d9ef      	bls.n	800eafc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb1c:	480d      	ldr	r0, [pc, #52]	@ (800eb54 <prvInitialiseTaskLists+0x64>)
 800eb1e:	f7fe fa77 	bl	800d010 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb22:	480d      	ldr	r0, [pc, #52]	@ (800eb58 <prvInitialiseTaskLists+0x68>)
 800eb24:	f7fe fa74 	bl	800d010 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb28:	480c      	ldr	r0, [pc, #48]	@ (800eb5c <prvInitialiseTaskLists+0x6c>)
 800eb2a:	f7fe fa71 	bl	800d010 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb2e:	480c      	ldr	r0, [pc, #48]	@ (800eb60 <prvInitialiseTaskLists+0x70>)
 800eb30:	f7fe fa6e 	bl	800d010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb34:	480b      	ldr	r0, [pc, #44]	@ (800eb64 <prvInitialiseTaskLists+0x74>)
 800eb36:	f7fe fa6b 	bl	800d010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb3a:	4b0b      	ldr	r3, [pc, #44]	@ (800eb68 <prvInitialiseTaskLists+0x78>)
 800eb3c:	4a05      	ldr	r2, [pc, #20]	@ (800eb54 <prvInitialiseTaskLists+0x64>)
 800eb3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb40:	4b0a      	ldr	r3, [pc, #40]	@ (800eb6c <prvInitialiseTaskLists+0x7c>)
 800eb42:	4a05      	ldr	r2, [pc, #20]	@ (800eb58 <prvInitialiseTaskLists+0x68>)
 800eb44:	601a      	str	r2, [r3, #0]
}
 800eb46:	bf00      	nop
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	24002050 	.word	0x24002050
 800eb54:	240024b0 	.word	0x240024b0
 800eb58:	240024c4 	.word	0x240024c4
 800eb5c:	240024e0 	.word	0x240024e0
 800eb60:	240024f4 	.word	0x240024f4
 800eb64:	2400250c 	.word	0x2400250c
 800eb68:	240024d8 	.word	0x240024d8
 800eb6c:	240024dc 	.word	0x240024dc

0800eb70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb76:	e019      	b.n	800ebac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb78:	f001 f906 	bl	800fd88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb7c:	4b10      	ldr	r3, [pc, #64]	@ (800ebc0 <prvCheckTasksWaitingTermination+0x50>)
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	3304      	adds	r3, #4
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fe facb 	bl	800d124 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ebc4 <prvCheckTasksWaitingTermination+0x54>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	3b01      	subs	r3, #1
 800eb94:	4a0b      	ldr	r2, [pc, #44]	@ (800ebc4 <prvCheckTasksWaitingTermination+0x54>)
 800eb96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb98:	4b0b      	ldr	r3, [pc, #44]	@ (800ebc8 <prvCheckTasksWaitingTermination+0x58>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	4a0a      	ldr	r2, [pc, #40]	@ (800ebc8 <prvCheckTasksWaitingTermination+0x58>)
 800eba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eba2:	f001 f923 	bl	800fdec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 f810 	bl	800ebcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebac:	4b06      	ldr	r3, [pc, #24]	@ (800ebc8 <prvCheckTasksWaitingTermination+0x58>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1e1      	bne.n	800eb78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebb4:	bf00      	nop
 800ebb6:	bf00      	nop
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	240024f4 	.word	0x240024f4
 800ebc4:	24002520 	.word	0x24002520
 800ebc8:	24002508 	.word	0x24002508

0800ebcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	3354      	adds	r3, #84	@ 0x54
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f004 ff5d 	bl	8013a98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d108      	bne.n	800ebfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebec:	4618      	mov	r0, r3
 800ebee:	f001 fabb 	bl	8010168 <vPortFree>
				vPortFree( pxTCB );
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f001 fab8 	bl	8010168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebf8:	e019      	b.n	800ec2e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d103      	bne.n	800ec0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f001 faaf 	bl	8010168 <vPortFree>
	}
 800ec0a:	e010      	b.n	800ec2e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec12:	2b02      	cmp	r3, #2
 800ec14:	d00b      	beq.n	800ec2e <prvDeleteTCB+0x62>
	__asm volatile
 800ec16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	60fb      	str	r3, [r7, #12]
}
 800ec28:	bf00      	nop
 800ec2a:	bf00      	nop
 800ec2c:	e7fd      	b.n	800ec2a <prvDeleteTCB+0x5e>
	}
 800ec2e:	bf00      	nop
 800ec30:	3710      	adds	r7, #16
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
	...

0800ec38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec70 <prvResetNextTaskUnblockTime+0x38>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d104      	bne.n	800ec52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec48:	4b0a      	ldr	r3, [pc, #40]	@ (800ec74 <prvResetNextTaskUnblockTime+0x3c>)
 800ec4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec50:	e008      	b.n	800ec64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec52:	4b07      	ldr	r3, [pc, #28]	@ (800ec70 <prvResetNextTaskUnblockTime+0x38>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	4a04      	ldr	r2, [pc, #16]	@ (800ec74 <prvResetNextTaskUnblockTime+0x3c>)
 800ec62:	6013      	str	r3, [r2, #0]
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	240024d8 	.word	0x240024d8
 800ec74:	24002540 	.word	0x24002540

0800ec78 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ec7e:	4b05      	ldr	r3, [pc, #20]	@ (800ec94 <xTaskGetCurrentTaskHandle+0x1c>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ec84:	687b      	ldr	r3, [r7, #4]
	}
 800ec86:	4618      	mov	r0, r3
 800ec88:	370c      	adds	r7, #12
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	2400204c 	.word	0x2400204c

0800ec98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec9e:	4b0b      	ldr	r3, [pc, #44]	@ (800eccc <xTaskGetSchedulerState+0x34>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d102      	bne.n	800ecac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eca6:	2301      	movs	r3, #1
 800eca8:	607b      	str	r3, [r7, #4]
 800ecaa:	e008      	b.n	800ecbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecac:	4b08      	ldr	r3, [pc, #32]	@ (800ecd0 <xTaskGetSchedulerState+0x38>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d102      	bne.n	800ecba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ecb4:	2302      	movs	r3, #2
 800ecb6:	607b      	str	r3, [r7, #4]
 800ecb8:	e001      	b.n	800ecbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ecbe:	687b      	ldr	r3, [r7, #4]
	}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr
 800eccc:	2400252c 	.word	0x2400252c
 800ecd0:	24002548 	.word	0x24002548

0800ecd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ece0:	2300      	movs	r3, #0
 800ece2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d051      	beq.n	800ed8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecee:	4b2a      	ldr	r3, [pc, #168]	@ (800ed98 <xTaskPriorityInherit+0xc4>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d241      	bcs.n	800ed7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	699b      	ldr	r3, [r3, #24]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	db06      	blt.n	800ed0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed00:	4b25      	ldr	r3, [pc, #148]	@ (800ed98 <xTaskPriorityInherit+0xc4>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed06:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	6959      	ldr	r1, [r3, #20]
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed16:	4613      	mov	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4413      	add	r3, r2
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ed9c <xTaskPriorityInherit+0xc8>)
 800ed20:	4413      	add	r3, r2
 800ed22:	4299      	cmp	r1, r3
 800ed24:	d122      	bne.n	800ed6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fe f9fa 	bl	800d124 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed30:	4b19      	ldr	r3, [pc, #100]	@ (800ed98 <xTaskPriorityInherit+0xc4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed3e:	4b18      	ldr	r3, [pc, #96]	@ (800eda0 <xTaskPriorityInherit+0xcc>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d903      	bls.n	800ed4e <xTaskPriorityInherit+0x7a>
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed4a:	4a15      	ldr	r2, [pc, #84]	@ (800eda0 <xTaskPriorityInherit+0xcc>)
 800ed4c:	6013      	str	r3, [r2, #0]
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed52:	4613      	mov	r3, r2
 800ed54:	009b      	lsls	r3, r3, #2
 800ed56:	4413      	add	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	4a10      	ldr	r2, [pc, #64]	@ (800ed9c <xTaskPriorityInherit+0xc8>)
 800ed5c:	441a      	add	r2, r3
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	3304      	adds	r3, #4
 800ed62:	4619      	mov	r1, r3
 800ed64:	4610      	mov	r0, r2
 800ed66:	f7fe f980 	bl	800d06a <vListInsertEnd>
 800ed6a:	e004      	b.n	800ed76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed98 <xTaskPriorityInherit+0xc4>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed76:	2301      	movs	r3, #1
 800ed78:	60fb      	str	r3, [r7, #12]
 800ed7a:	e008      	b.n	800ed8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed80:	4b05      	ldr	r3, [pc, #20]	@ (800ed98 <xTaskPriorityInherit+0xc4>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d201      	bcs.n	800ed8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
	}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	2400204c 	.word	0x2400204c
 800ed9c:	24002050 	.word	0x24002050
 800eda0:	24002528 	.word	0x24002528

0800eda4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edb0:	2300      	movs	r3, #0
 800edb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d058      	beq.n	800ee6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edba:	4b2f      	ldr	r3, [pc, #188]	@ (800ee78 <xTaskPriorityDisinherit+0xd4>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	693a      	ldr	r2, [r7, #16]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d00b      	beq.n	800eddc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	60fb      	str	r3, [r7, #12]
}
 800edd6:	bf00      	nop
 800edd8:	bf00      	nop
 800edda:	e7fd      	b.n	800edd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d10b      	bne.n	800edfc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ede4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede8:	f383 8811 	msr	BASEPRI, r3
 800edec:	f3bf 8f6f 	isb	sy
 800edf0:	f3bf 8f4f 	dsb	sy
 800edf4:	60bb      	str	r3, [r7, #8]
}
 800edf6:	bf00      	nop
 800edf8:	bf00      	nop
 800edfa:	e7fd      	b.n	800edf8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee00:	1e5a      	subs	r2, r3, #1
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d02c      	beq.n	800ee6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d128      	bne.n	800ee6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	3304      	adds	r3, #4
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fe f980 	bl	800d124 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ee7c <xTaskPriorityDisinherit+0xd8>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d903      	bls.n	800ee4c <xTaskPriorityDisinherit+0xa8>
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee48:	4a0c      	ldr	r2, [pc, #48]	@ (800ee7c <xTaskPriorityDisinherit+0xd8>)
 800ee4a:	6013      	str	r3, [r2, #0]
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee50:	4613      	mov	r3, r2
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	4413      	add	r3, r2
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4a09      	ldr	r2, [pc, #36]	@ (800ee80 <xTaskPriorityDisinherit+0xdc>)
 800ee5a:	441a      	add	r2, r3
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	4619      	mov	r1, r3
 800ee62:	4610      	mov	r0, r2
 800ee64:	f7fe f901 	bl	800d06a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee6c:	697b      	ldr	r3, [r7, #20]
	}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3718      	adds	r7, #24
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	2400204c 	.word	0x2400204c
 800ee7c:	24002528 	.word	0x24002528
 800ee80:	24002050 	.word	0x24002050

0800ee84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b088      	sub	sp, #32
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee92:	2301      	movs	r3, #1
 800ee94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d06c      	beq.n	800ef76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d10b      	bne.n	800eebc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800eea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	60fb      	str	r3, [r7, #12]
}
 800eeb6:	bf00      	nop
 800eeb8:	bf00      	nop
 800eeba:	e7fd      	b.n	800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d902      	bls.n	800eecc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	61fb      	str	r3, [r7, #28]
 800eeca:	e002      	b.n	800eed2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eed0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed6:	69fa      	ldr	r2, [r7, #28]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d04c      	beq.n	800ef76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eee0:	697a      	ldr	r2, [r7, #20]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d147      	bne.n	800ef76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eee6:	4b26      	ldr	r3, [pc, #152]	@ (800ef80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	69ba      	ldr	r2, [r7, #24]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d10b      	bne.n	800ef08 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800eef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	60bb      	str	r3, [r7, #8]
}
 800ef02:	bf00      	nop
 800ef04:	bf00      	nop
 800ef06:	e7fd      	b.n	800ef04 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef08:	69bb      	ldr	r3, [r7, #24]
 800ef0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	69fa      	ldr	r2, [r7, #28]
 800ef12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	699b      	ldr	r3, [r3, #24]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	db04      	blt.n	800ef26 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	6959      	ldr	r1, [r3, #20]
 800ef2a:	693a      	ldr	r2, [r7, #16]
 800ef2c:	4613      	mov	r3, r2
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	4413      	add	r3, r2
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	4a13      	ldr	r2, [pc, #76]	@ (800ef84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef36:	4413      	add	r3, r2
 800ef38:	4299      	cmp	r1, r3
 800ef3a:	d11c      	bne.n	800ef76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef3c:	69bb      	ldr	r3, [r7, #24]
 800ef3e:	3304      	adds	r3, #4
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7fe f8ef 	bl	800d124 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ef88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d903      	bls.n	800ef5a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef56:	4a0c      	ldr	r2, [pc, #48]	@ (800ef88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef58:	6013      	str	r3, [r2, #0]
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef5e:	4613      	mov	r3, r2
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	4413      	add	r3, r2
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4a07      	ldr	r2, [pc, #28]	@ (800ef84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef68:	441a      	add	r2, r3
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	4619      	mov	r1, r3
 800ef70:	4610      	mov	r0, r2
 800ef72:	f7fe f87a 	bl	800d06a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef76:	bf00      	nop
 800ef78:	3720      	adds	r7, #32
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	2400204c 	.word	0x2400204c
 800ef84:	24002050 	.word	0x24002050
 800ef88:	24002528 	.word	0x24002528

0800ef8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ef8c:	b480      	push	{r7}
 800ef8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef90:	4b07      	ldr	r3, [pc, #28]	@ (800efb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d004      	beq.n	800efa2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef98:	4b05      	ldr	r3, [pc, #20]	@ (800efb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef9e:	3201      	adds	r2, #1
 800efa0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800efa2:	4b03      	ldr	r3, [pc, #12]	@ (800efb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800efa4:	681b      	ldr	r3, [r3, #0]
	}
 800efa6:	4618      	mov	r0, r3
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr
 800efb0:	2400204c 	.word	0x2400204c

0800efb4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
 800efc0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800efc2:	f000 fee1 	bl	800fd88 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800efc6:	4b29      	ldr	r3, [pc, #164]	@ (800f06c <xTaskNotifyWait+0xb8>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d01c      	beq.n	800f00e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800efd4:	4b25      	ldr	r3, [pc, #148]	@ (800f06c <xTaskNotifyWait+0xb8>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	43d2      	mvns	r2, r2
 800efe0:	400a      	ands	r2, r1
 800efe2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800efe6:	4b21      	ldr	r3, [pc, #132]	@ (800f06c <xTaskNotifyWait+0xb8>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2201      	movs	r2, #1
 800efec:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00b      	beq.n	800f00e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eff6:	2101      	movs	r1, #1
 800eff8:	6838      	ldr	r0, [r7, #0]
 800effa:	f000 f9e3 	bl	800f3c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800effe:	4b1c      	ldr	r3, [pc, #112]	@ (800f070 <xTaskNotifyWait+0xbc>)
 800f000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f00e:	f000 feed 	bl	800fdec <vPortExitCritical>

		taskENTER_CRITICAL();
 800f012:	f000 feb9 	bl	800fd88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d005      	beq.n	800f028 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f01c:	4b13      	ldr	r3, [pc, #76]	@ (800f06c <xTaskNotifyWait+0xb8>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f028:	4b10      	ldr	r3, [pc, #64]	@ (800f06c <xTaskNotifyWait+0xb8>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f030:	b2db      	uxtb	r3, r3
 800f032:	2b02      	cmp	r3, #2
 800f034:	d002      	beq.n	800f03c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f036:	2300      	movs	r3, #0
 800f038:	617b      	str	r3, [r7, #20]
 800f03a:	e00a      	b.n	800f052 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f03c:	4b0b      	ldr	r3, [pc, #44]	@ (800f06c <xTaskNotifyWait+0xb8>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	43d2      	mvns	r2, r2
 800f048:	400a      	ands	r2, r1
 800f04a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f04e:	2301      	movs	r3, #1
 800f050:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f052:	4b06      	ldr	r3, [pc, #24]	@ (800f06c <xTaskNotifyWait+0xb8>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2200      	movs	r2, #0
 800f058:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f05c:	f000 fec6 	bl	800fdec <vPortExitCritical>

		return xReturn;
 800f060:	697b      	ldr	r3, [r7, #20]
	}
 800f062:	4618      	mov	r0, r3
 800f064:	3718      	adds	r7, #24
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	2400204c 	.word	0x2400204c
 800f070:	e000ed04 	.word	0xe000ed04

0800f074 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f074:	b580      	push	{r7, lr}
 800f076:	b08a      	sub	sp, #40	@ 0x28
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	603b      	str	r3, [r7, #0]
 800f080:	4613      	mov	r3, r2
 800f082:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f084:	2301      	movs	r3, #1
 800f086:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10b      	bne.n	800f0a6 <xTaskGenericNotify+0x32>
	__asm volatile
 800f08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	61bb      	str	r3, [r7, #24]
}
 800f0a0:	bf00      	nop
 800f0a2:	bf00      	nop
 800f0a4:	e7fd      	b.n	800f0a2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f0aa:	f000 fe6d 	bl	800fd88 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d004      	beq.n	800f0be <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f0b4:	6a3b      	ldr	r3, [r7, #32]
 800f0b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f0be:	6a3b      	ldr	r3, [r7, #32]
 800f0c0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f0c4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f0c6:	6a3b      	ldr	r3, [r7, #32]
 800f0c8:	2202      	movs	r2, #2
 800f0ca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f0ce:	79fb      	ldrb	r3, [r7, #7]
 800f0d0:	2b04      	cmp	r3, #4
 800f0d2:	d82e      	bhi.n	800f132 <xTaskGenericNotify+0xbe>
 800f0d4:	a201      	add	r2, pc, #4	@ (adr r2, 800f0dc <xTaskGenericNotify+0x68>)
 800f0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0da:	bf00      	nop
 800f0dc:	0800f157 	.word	0x0800f157
 800f0e0:	0800f0f1 	.word	0x0800f0f1
 800f0e4:	0800f103 	.word	0x0800f103
 800f0e8:	0800f113 	.word	0x0800f113
 800f0ec:	0800f11d 	.word	0x0800f11d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f0f0:	6a3b      	ldr	r3, [r7, #32]
 800f0f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	431a      	orrs	r2, r3
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f100:	e02c      	b.n	800f15c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f102:	6a3b      	ldr	r3, [r7, #32]
 800f104:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f108:	1c5a      	adds	r2, r3, #1
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f110:	e024      	b.n	800f15c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f112:	6a3b      	ldr	r3, [r7, #32]
 800f114:	68ba      	ldr	r2, [r7, #8]
 800f116:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f11a:	e01f      	b.n	800f15c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f11c:	7ffb      	ldrb	r3, [r7, #31]
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d004      	beq.n	800f12c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	68ba      	ldr	r2, [r7, #8]
 800f126:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f12a:	e017      	b.n	800f15c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f12c:	2300      	movs	r3, #0
 800f12e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f130:	e014      	b.n	800f15c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f132:	6a3b      	ldr	r3, [r7, #32]
 800f134:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f13c:	d00d      	beq.n	800f15a <xTaskGenericNotify+0xe6>
	__asm volatile
 800f13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f142:	f383 8811 	msr	BASEPRI, r3
 800f146:	f3bf 8f6f 	isb	sy
 800f14a:	f3bf 8f4f 	dsb	sy
 800f14e:	617b      	str	r3, [r7, #20]
}
 800f150:	bf00      	nop
 800f152:	bf00      	nop
 800f154:	e7fd      	b.n	800f152 <xTaskGenericNotify+0xde>
					break;
 800f156:	bf00      	nop
 800f158:	e000      	b.n	800f15c <xTaskGenericNotify+0xe8>

					break;
 800f15a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f15c:	7ffb      	ldrb	r3, [r7, #31]
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d13b      	bne.n	800f1da <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f162:	6a3b      	ldr	r3, [r7, #32]
 800f164:	3304      	adds	r3, #4
 800f166:	4618      	mov	r0, r3
 800f168:	f7fd ffdc 	bl	800d124 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f16c:	6a3b      	ldr	r3, [r7, #32]
 800f16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f170:	4b1d      	ldr	r3, [pc, #116]	@ (800f1e8 <xTaskGenericNotify+0x174>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	429a      	cmp	r2, r3
 800f176:	d903      	bls.n	800f180 <xTaskGenericNotify+0x10c>
 800f178:	6a3b      	ldr	r3, [r7, #32]
 800f17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f17c:	4a1a      	ldr	r2, [pc, #104]	@ (800f1e8 <xTaskGenericNotify+0x174>)
 800f17e:	6013      	str	r3, [r2, #0]
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f184:	4613      	mov	r3, r2
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	4413      	add	r3, r2
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	4a17      	ldr	r2, [pc, #92]	@ (800f1ec <xTaskGenericNotify+0x178>)
 800f18e:	441a      	add	r2, r3
 800f190:	6a3b      	ldr	r3, [r7, #32]
 800f192:	3304      	adds	r3, #4
 800f194:	4619      	mov	r1, r3
 800f196:	4610      	mov	r0, r2
 800f198:	f7fd ff67 	bl	800d06a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f19c:	6a3b      	ldr	r3, [r7, #32]
 800f19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d00b      	beq.n	800f1bc <xTaskGenericNotify+0x148>
	__asm volatile
 800f1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a8:	f383 8811 	msr	BASEPRI, r3
 800f1ac:	f3bf 8f6f 	isb	sy
 800f1b0:	f3bf 8f4f 	dsb	sy
 800f1b4:	613b      	str	r3, [r7, #16]
}
 800f1b6:	bf00      	nop
 800f1b8:	bf00      	nop
 800f1ba:	e7fd      	b.n	800f1b8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f1bc:	6a3b      	ldr	r3, [r7, #32]
 800f1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f1f0 <xTaskGenericNotify+0x17c>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d907      	bls.n	800f1da <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f1ca:	4b0a      	ldr	r3, [pc, #40]	@ (800f1f4 <xTaskGenericNotify+0x180>)
 800f1cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1d0:	601a      	str	r2, [r3, #0]
 800f1d2:	f3bf 8f4f 	dsb	sy
 800f1d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f1da:	f000 fe07 	bl	800fdec <vPortExitCritical>

		return xReturn;
 800f1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3728      	adds	r7, #40	@ 0x28
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	24002528 	.word	0x24002528
 800f1ec:	24002050 	.word	0x24002050
 800f1f0:	2400204c 	.word	0x2400204c
 800f1f4:	e000ed04 	.word	0xe000ed04

0800f1f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b08e      	sub	sp, #56	@ 0x38
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	603b      	str	r3, [r7, #0]
 800f204:	4613      	mov	r3, r2
 800f206:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f208:	2301      	movs	r3, #1
 800f20a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d10b      	bne.n	800f22a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f216:	f383 8811 	msr	BASEPRI, r3
 800f21a:	f3bf 8f6f 	isb	sy
 800f21e:	f3bf 8f4f 	dsb	sy
 800f222:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f224:	bf00      	nop
 800f226:	bf00      	nop
 800f228:	e7fd      	b.n	800f226 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f22a:	f000 fe8d 	bl	800ff48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800f232:	f3ef 8211 	mrs	r2, BASEPRI
 800f236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f23a:	f383 8811 	msr	BASEPRI, r3
 800f23e:	f3bf 8f6f 	isb	sy
 800f242:	f3bf 8f4f 	dsb	sy
 800f246:	623a      	str	r2, [r7, #32]
 800f248:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f24a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d004      	beq.n	800f25e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f256:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f260:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f26a:	2202      	movs	r2, #2
 800f26c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f270:	79fb      	ldrb	r3, [r7, #7]
 800f272:	2b04      	cmp	r3, #4
 800f274:	d82e      	bhi.n	800f2d4 <xTaskGenericNotifyFromISR+0xdc>
 800f276:	a201      	add	r2, pc, #4	@ (adr r2, 800f27c <xTaskGenericNotifyFromISR+0x84>)
 800f278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f27c:	0800f2f9 	.word	0x0800f2f9
 800f280:	0800f291 	.word	0x0800f291
 800f284:	0800f2a3 	.word	0x0800f2a3
 800f288:	0800f2b3 	.word	0x0800f2b3
 800f28c:	0800f2bd 	.word	0x0800f2bd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f292:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	431a      	orrs	r2, r3
 800f29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f29c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f2a0:	e02d      	b.n	800f2fe <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f2b0:	e025      	b.n	800f2fe <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2b4:	68ba      	ldr	r2, [r7, #8]
 800f2b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f2ba:	e020      	b.n	800f2fe <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f2bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d004      	beq.n	800f2ce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f2cc:	e017      	b.n	800f2fe <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f2d2:	e014      	b.n	800f2fe <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f2da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f2de:	d00d      	beq.n	800f2fc <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e4:	f383 8811 	msr	BASEPRI, r3
 800f2e8:	f3bf 8f6f 	isb	sy
 800f2ec:	f3bf 8f4f 	dsb	sy
 800f2f0:	61bb      	str	r3, [r7, #24]
}
 800f2f2:	bf00      	nop
 800f2f4:	bf00      	nop
 800f2f6:	e7fd      	b.n	800f2f4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f2f8:	bf00      	nop
 800f2fa:	e000      	b.n	800f2fe <xTaskGenericNotifyFromISR+0x106>
					break;
 800f2fc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f2fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f302:	2b01      	cmp	r3, #1
 800f304:	d147      	bne.n	800f396 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00b      	beq.n	800f326 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	617b      	str	r3, [r7, #20]
}
 800f320:	bf00      	nop
 800f322:	bf00      	nop
 800f324:	e7fd      	b.n	800f322 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f326:	4b21      	ldr	r3, [pc, #132]	@ (800f3ac <xTaskGenericNotifyFromISR+0x1b4>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d11d      	bne.n	800f36a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f330:	3304      	adds	r3, #4
 800f332:	4618      	mov	r0, r3
 800f334:	f7fd fef6 	bl	800d124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f33a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f33c:	4b1c      	ldr	r3, [pc, #112]	@ (800f3b0 <xTaskGenericNotifyFromISR+0x1b8>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	429a      	cmp	r2, r3
 800f342:	d903      	bls.n	800f34c <xTaskGenericNotifyFromISR+0x154>
 800f344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f348:	4a19      	ldr	r2, [pc, #100]	@ (800f3b0 <xTaskGenericNotifyFromISR+0x1b8>)
 800f34a:	6013      	str	r3, [r2, #0]
 800f34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f350:	4613      	mov	r3, r2
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	4413      	add	r3, r2
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	4a16      	ldr	r2, [pc, #88]	@ (800f3b4 <xTaskGenericNotifyFromISR+0x1bc>)
 800f35a:	441a      	add	r2, r3
 800f35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f35e:	3304      	adds	r3, #4
 800f360:	4619      	mov	r1, r3
 800f362:	4610      	mov	r0, r2
 800f364:	f7fd fe81 	bl	800d06a <vListInsertEnd>
 800f368:	e005      	b.n	800f376 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f36c:	3318      	adds	r3, #24
 800f36e:	4619      	mov	r1, r3
 800f370:	4811      	ldr	r0, [pc, #68]	@ (800f3b8 <xTaskGenericNotifyFromISR+0x1c0>)
 800f372:	f7fd fe7a 	bl	800d06a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f37a:	4b10      	ldr	r3, [pc, #64]	@ (800f3bc <xTaskGenericNotifyFromISR+0x1c4>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f380:	429a      	cmp	r2, r3
 800f382:	d908      	bls.n	800f396 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f386:	2b00      	cmp	r3, #0
 800f388:	d002      	beq.n	800f390 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f38a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f38c:	2201      	movs	r2, #1
 800f38e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f390:	4b0b      	ldr	r3, [pc, #44]	@ (800f3c0 <xTaskGenericNotifyFromISR+0x1c8>)
 800f392:	2201      	movs	r2, #1
 800f394:	601a      	str	r2, [r3, #0]
 800f396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f398:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	f383 8811 	msr	BASEPRI, r3
}
 800f3a0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3738      	adds	r7, #56	@ 0x38
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	24002548 	.word	0x24002548
 800f3b0:	24002528 	.word	0x24002528
 800f3b4:	24002050 	.word	0x24002050
 800f3b8:	240024e0 	.word	0x240024e0
 800f3bc:	2400204c 	.word	0x2400204c
 800f3c0:	24002534 	.word	0x24002534

0800f3c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f3ce:	4b21      	ldr	r3, [pc, #132]	@ (800f454 <prvAddCurrentTaskToDelayedList+0x90>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3d4:	4b20      	ldr	r3, [pc, #128]	@ (800f458 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	3304      	adds	r3, #4
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fd fea2 	bl	800d124 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3e6:	d10a      	bne.n	800f3fe <prvAddCurrentTaskToDelayedList+0x3a>
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d007      	beq.n	800f3fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3ee:	4b1a      	ldr	r3, [pc, #104]	@ (800f458 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4819      	ldr	r0, [pc, #100]	@ (800f45c <prvAddCurrentTaskToDelayedList+0x98>)
 800f3f8:	f7fd fe37 	bl	800d06a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3fc:	e026      	b.n	800f44c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4413      	add	r3, r2
 800f404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f406:	4b14      	ldr	r3, [pc, #80]	@ (800f458 <prvAddCurrentTaskToDelayedList+0x94>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	68ba      	ldr	r2, [r7, #8]
 800f40c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f40e:	68ba      	ldr	r2, [r7, #8]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	429a      	cmp	r2, r3
 800f414:	d209      	bcs.n	800f42a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f416:	4b12      	ldr	r3, [pc, #72]	@ (800f460 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	4b0f      	ldr	r3, [pc, #60]	@ (800f458 <prvAddCurrentTaskToDelayedList+0x94>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	3304      	adds	r3, #4
 800f420:	4619      	mov	r1, r3
 800f422:	4610      	mov	r0, r2
 800f424:	f7fd fe45 	bl	800d0b2 <vListInsert>
}
 800f428:	e010      	b.n	800f44c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f42a:	4b0e      	ldr	r3, [pc, #56]	@ (800f464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	4b0a      	ldr	r3, [pc, #40]	@ (800f458 <prvAddCurrentTaskToDelayedList+0x94>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	3304      	adds	r3, #4
 800f434:	4619      	mov	r1, r3
 800f436:	4610      	mov	r0, r2
 800f438:	f7fd fe3b 	bl	800d0b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f43c:	4b0a      	ldr	r3, [pc, #40]	@ (800f468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	68ba      	ldr	r2, [r7, #8]
 800f442:	429a      	cmp	r2, r3
 800f444:	d202      	bcs.n	800f44c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f446:	4a08      	ldr	r2, [pc, #32]	@ (800f468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	6013      	str	r3, [r2, #0]
}
 800f44c:	bf00      	nop
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	24002524 	.word	0x24002524
 800f458:	2400204c 	.word	0x2400204c
 800f45c:	2400250c 	.word	0x2400250c
 800f460:	240024dc 	.word	0x240024dc
 800f464:	240024d8 	.word	0x240024d8
 800f468:	24002540 	.word	0x24002540

0800f46c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08a      	sub	sp, #40	@ 0x28
 800f470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f472:	2300      	movs	r3, #0
 800f474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f476:	f000 fb13 	bl	800faa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f47a:	4b1d      	ldr	r3, [pc, #116]	@ (800f4f0 <xTimerCreateTimerTask+0x84>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d021      	beq.n	800f4c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f482:	2300      	movs	r3, #0
 800f484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f486:	2300      	movs	r3, #0
 800f488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f48a:	1d3a      	adds	r2, r7, #4
 800f48c:	f107 0108 	add.w	r1, r7, #8
 800f490:	f107 030c 	add.w	r3, r7, #12
 800f494:	4618      	mov	r0, r3
 800f496:	f7fd fda1 	bl	800cfdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f49a:	6879      	ldr	r1, [r7, #4]
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	68fa      	ldr	r2, [r7, #12]
 800f4a0:	9202      	str	r2, [sp, #8]
 800f4a2:	9301      	str	r3, [sp, #4]
 800f4a4:	2302      	movs	r3, #2
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	460a      	mov	r2, r1
 800f4ac:	4911      	ldr	r1, [pc, #68]	@ (800f4f4 <xTimerCreateTimerTask+0x88>)
 800f4ae:	4812      	ldr	r0, [pc, #72]	@ (800f4f8 <xTimerCreateTimerTask+0x8c>)
 800f4b0:	f7fe fd78 	bl	800dfa4 <xTaskCreateStatic>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	4a11      	ldr	r2, [pc, #68]	@ (800f4fc <xTimerCreateTimerTask+0x90>)
 800f4b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f4ba:	4b10      	ldr	r3, [pc, #64]	@ (800f4fc <xTimerCreateTimerTask+0x90>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d001      	beq.n	800f4c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10b      	bne.n	800f4e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d0:	f383 8811 	msr	BASEPRI, r3
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	613b      	str	r3, [r7, #16]
}
 800f4de:	bf00      	nop
 800f4e0:	bf00      	nop
 800f4e2:	e7fd      	b.n	800f4e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f4e4:	697b      	ldr	r3, [r7, #20]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3718      	adds	r7, #24
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	2400257c 	.word	0x2400257c
 800f4f4:	08013fb4 	.word	0x08013fb4
 800f4f8:	0800f639 	.word	0x0800f639
 800f4fc:	24002580 	.word	0x24002580

0800f500 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b08a      	sub	sp, #40	@ 0x28
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	607a      	str	r2, [r7, #4]
 800f50c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f50e:	2300      	movs	r3, #0
 800f510:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10b      	bne.n	800f530 <xTimerGenericCommand+0x30>
	__asm volatile
 800f518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f51c:	f383 8811 	msr	BASEPRI, r3
 800f520:	f3bf 8f6f 	isb	sy
 800f524:	f3bf 8f4f 	dsb	sy
 800f528:	623b      	str	r3, [r7, #32]
}
 800f52a:	bf00      	nop
 800f52c:	bf00      	nop
 800f52e:	e7fd      	b.n	800f52c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f530:	4b19      	ldr	r3, [pc, #100]	@ (800f598 <xTimerGenericCommand+0x98>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d02a      	beq.n	800f58e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	2b05      	cmp	r3, #5
 800f548:	dc18      	bgt.n	800f57c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f54a:	f7ff fba5 	bl	800ec98 <xTaskGetSchedulerState>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b02      	cmp	r3, #2
 800f552:	d109      	bne.n	800f568 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f554:	4b10      	ldr	r3, [pc, #64]	@ (800f598 <xTimerGenericCommand+0x98>)
 800f556:	6818      	ldr	r0, [r3, #0]
 800f558:	f107 0110 	add.w	r1, r7, #16
 800f55c:	2300      	movs	r3, #0
 800f55e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f560:	f7fe f808 	bl	800d574 <xQueueGenericSend>
 800f564:	6278      	str	r0, [r7, #36]	@ 0x24
 800f566:	e012      	b.n	800f58e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f568:	4b0b      	ldr	r3, [pc, #44]	@ (800f598 <xTimerGenericCommand+0x98>)
 800f56a:	6818      	ldr	r0, [r3, #0]
 800f56c:	f107 0110 	add.w	r1, r7, #16
 800f570:	2300      	movs	r3, #0
 800f572:	2200      	movs	r2, #0
 800f574:	f7fd fffe 	bl	800d574 <xQueueGenericSend>
 800f578:	6278      	str	r0, [r7, #36]	@ 0x24
 800f57a:	e008      	b.n	800f58e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f57c:	4b06      	ldr	r3, [pc, #24]	@ (800f598 <xTimerGenericCommand+0x98>)
 800f57e:	6818      	ldr	r0, [r3, #0]
 800f580:	f107 0110 	add.w	r1, r7, #16
 800f584:	2300      	movs	r3, #0
 800f586:	683a      	ldr	r2, [r7, #0]
 800f588:	f7fe f8f6 	bl	800d778 <xQueueGenericSendFromISR>
 800f58c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f590:	4618      	mov	r0, r3
 800f592:	3728      	adds	r7, #40	@ 0x28
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	2400257c 	.word	0x2400257c

0800f59c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b088      	sub	sp, #32
 800f5a0:	af02      	add	r7, sp, #8
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5a6:	4b23      	ldr	r3, [pc, #140]	@ (800f634 <prvProcessExpiredTimer+0x98>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	3304      	adds	r3, #4
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fd fdb5 	bl	800d124 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5c0:	f003 0304 	and.w	r3, r3, #4
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d023      	beq.n	800f610 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	699a      	ldr	r2, [r3, #24]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	18d1      	adds	r1, r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	683a      	ldr	r2, [r7, #0]
 800f5d4:	6978      	ldr	r0, [r7, #20]
 800f5d6:	f000 f8d5 	bl	800f784 <prvInsertTimerInActiveList>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d020      	beq.n	800f622 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	6978      	ldr	r0, [r7, #20]
 800f5ec:	f7ff ff88 	bl	800f500 <xTimerGenericCommand>
 800f5f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d114      	bne.n	800f622 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5fc:	f383 8811 	msr	BASEPRI, r3
 800f600:	f3bf 8f6f 	isb	sy
 800f604:	f3bf 8f4f 	dsb	sy
 800f608:	60fb      	str	r3, [r7, #12]
}
 800f60a:	bf00      	nop
 800f60c:	bf00      	nop
 800f60e:	e7fd      	b.n	800f60c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f616:	f023 0301 	bic.w	r3, r3, #1
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	6a1b      	ldr	r3, [r3, #32]
 800f626:	6978      	ldr	r0, [r7, #20]
 800f628:	4798      	blx	r3
}
 800f62a:	bf00      	nop
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	24002574 	.word	0x24002574

0800f638 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f640:	f107 0308 	add.w	r3, r7, #8
 800f644:	4618      	mov	r0, r3
 800f646:	f000 f859 	bl	800f6fc <prvGetNextExpireTime>
 800f64a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	4619      	mov	r1, r3
 800f650:	68f8      	ldr	r0, [r7, #12]
 800f652:	f000 f805 	bl	800f660 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f656:	f000 f8d7 	bl	800f808 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f65a:	bf00      	nop
 800f65c:	e7f0      	b.n	800f640 <prvTimerTask+0x8>
	...

0800f660 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f66a:	f7fe feff 	bl	800e46c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f66e:	f107 0308 	add.w	r3, r7, #8
 800f672:	4618      	mov	r0, r3
 800f674:	f000 f866 	bl	800f744 <prvSampleTimeNow>
 800f678:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d130      	bne.n	800f6e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10a      	bne.n	800f69c <prvProcessTimerOrBlockTask+0x3c>
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d806      	bhi.n	800f69c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f68e:	f7fe fefb 	bl	800e488 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f692:	68f9      	ldr	r1, [r7, #12]
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7ff ff81 	bl	800f59c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f69a:	e024      	b.n	800f6e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d008      	beq.n	800f6b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f6a2:	4b13      	ldr	r3, [pc, #76]	@ (800f6f0 <prvProcessTimerOrBlockTask+0x90>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d101      	bne.n	800f6b0 <prvProcessTimerOrBlockTask+0x50>
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	e000      	b.n	800f6b2 <prvProcessTimerOrBlockTask+0x52>
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f6b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f6f4 <prvProcessTimerOrBlockTask+0x94>)
 800f6b6:	6818      	ldr	r0, [r3, #0]
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	683a      	ldr	r2, [r7, #0]
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	f7fe fc3b 	bl	800df3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f6c6:	f7fe fedf 	bl	800e488 <xTaskResumeAll>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d10a      	bne.n	800f6e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f6d0:	4b09      	ldr	r3, [pc, #36]	@ (800f6f8 <prvProcessTimerOrBlockTask+0x98>)
 800f6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6d6:	601a      	str	r2, [r3, #0]
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	f3bf 8f6f 	isb	sy
}
 800f6e0:	e001      	b.n	800f6e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f6e2:	f7fe fed1 	bl	800e488 <xTaskResumeAll>
}
 800f6e6:	bf00      	nop
 800f6e8:	3710      	adds	r7, #16
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	24002578 	.word	0x24002578
 800f6f4:	2400257c 	.word	0x2400257c
 800f6f8:	e000ed04 	.word	0xe000ed04

0800f6fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f704:	4b0e      	ldr	r3, [pc, #56]	@ (800f740 <prvGetNextExpireTime+0x44>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d101      	bne.n	800f712 <prvGetNextExpireTime+0x16>
 800f70e:	2201      	movs	r2, #1
 800f710:	e000      	b.n	800f714 <prvGetNextExpireTime+0x18>
 800f712:	2200      	movs	r2, #0
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d105      	bne.n	800f72c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f720:	4b07      	ldr	r3, [pc, #28]	@ (800f740 <prvGetNextExpireTime+0x44>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	60fb      	str	r3, [r7, #12]
 800f72a:	e001      	b.n	800f730 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f72c:	2300      	movs	r3, #0
 800f72e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f730:	68fb      	ldr	r3, [r7, #12]
}
 800f732:	4618      	mov	r0, r3
 800f734:	3714      	adds	r7, #20
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	24002574 	.word	0x24002574

0800f744 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f74c:	f7fe ff3a 	bl	800e5c4 <xTaskGetTickCount>
 800f750:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f752:	4b0b      	ldr	r3, [pc, #44]	@ (800f780 <prvSampleTimeNow+0x3c>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	68fa      	ldr	r2, [r7, #12]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d205      	bcs.n	800f768 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f75c:	f000 f93a 	bl	800f9d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2201      	movs	r2, #1
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	e002      	b.n	800f76e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f76e:	4a04      	ldr	r2, [pc, #16]	@ (800f780 <prvSampleTimeNow+0x3c>)
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f774:	68fb      	ldr	r3, [r7, #12]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	24002584 	.word	0x24002584

0800f784 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b086      	sub	sp, #24
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
 800f790:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f792:	2300      	movs	r3, #0
 800f794:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	68ba      	ldr	r2, [r7, #8]
 800f79a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	68fa      	ldr	r2, [r7, #12]
 800f7a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d812      	bhi.n	800f7d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	1ad2      	subs	r2, r2, r3
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	699b      	ldr	r3, [r3, #24]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d302      	bcc.n	800f7be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	617b      	str	r3, [r7, #20]
 800f7bc:	e01b      	b.n	800f7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f7be:	4b10      	ldr	r3, [pc, #64]	@ (800f800 <prvInsertTimerInActiveList+0x7c>)
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4610      	mov	r0, r2
 800f7ca:	f7fd fc72 	bl	800d0b2 <vListInsert>
 800f7ce:	e012      	b.n	800f7f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d206      	bcs.n	800f7e6 <prvInsertTimerInActiveList+0x62>
 800f7d8:	68ba      	ldr	r2, [r7, #8]
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d302      	bcc.n	800f7e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	617b      	str	r3, [r7, #20]
 800f7e4:	e007      	b.n	800f7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7e6:	4b07      	ldr	r3, [pc, #28]	@ (800f804 <prvInsertTimerInActiveList+0x80>)
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	3304      	adds	r3, #4
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	4610      	mov	r0, r2
 800f7f2:	f7fd fc5e 	bl	800d0b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7f6:	697b      	ldr	r3, [r7, #20]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3718      	adds	r7, #24
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	24002578 	.word	0x24002578
 800f804:	24002574 	.word	0x24002574

0800f808 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b08e      	sub	sp, #56	@ 0x38
 800f80c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f80e:	e0ce      	b.n	800f9ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	da19      	bge.n	800f84a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f816:	1d3b      	adds	r3, r7, #4
 800f818:	3304      	adds	r3, #4
 800f81a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10b      	bne.n	800f83a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f826:	f383 8811 	msr	BASEPRI, r3
 800f82a:	f3bf 8f6f 	isb	sy
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	61fb      	str	r3, [r7, #28]
}
 800f834:	bf00      	nop
 800f836:	bf00      	nop
 800f838:	e7fd      	b.n	800f836 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f840:	6850      	ldr	r0, [r2, #4]
 800f842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f844:	6892      	ldr	r2, [r2, #8]
 800f846:	4611      	mov	r1, r2
 800f848:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f2c0 80ae 	blt.w	800f9ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f858:	695b      	ldr	r3, [r3, #20]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d004      	beq.n	800f868 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f860:	3304      	adds	r3, #4
 800f862:	4618      	mov	r0, r3
 800f864:	f7fd fc5e 	bl	800d124 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f868:	463b      	mov	r3, r7
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7ff ff6a 	bl	800f744 <prvSampleTimeNow>
 800f870:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2b09      	cmp	r3, #9
 800f876:	f200 8097 	bhi.w	800f9a8 <prvProcessReceivedCommands+0x1a0>
 800f87a:	a201      	add	r2, pc, #4	@ (adr r2, 800f880 <prvProcessReceivedCommands+0x78>)
 800f87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f880:	0800f8a9 	.word	0x0800f8a9
 800f884:	0800f8a9 	.word	0x0800f8a9
 800f888:	0800f8a9 	.word	0x0800f8a9
 800f88c:	0800f91f 	.word	0x0800f91f
 800f890:	0800f933 	.word	0x0800f933
 800f894:	0800f97f 	.word	0x0800f97f
 800f898:	0800f8a9 	.word	0x0800f8a9
 800f89c:	0800f8a9 	.word	0x0800f8a9
 800f8a0:	0800f91f 	.word	0x0800f91f
 800f8a4:	0800f933 	.word	0x0800f933
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8ae:	f043 0301 	orr.w	r3, r3, #1
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	18d1      	adds	r1, r2, r3
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8c8:	f7ff ff5c 	bl	800f784 <prvInsertTimerInActiveList>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d06c      	beq.n	800f9ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d4:	6a1b      	ldr	r3, [r3, #32]
 800f8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8e0:	f003 0304 	and.w	r3, r3, #4
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d061      	beq.n	800f9ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ec:	699b      	ldr	r3, [r3, #24]
 800f8ee:	441a      	add	r2, r3
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	9300      	str	r3, [sp, #0]
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8fa:	f7ff fe01 	bl	800f500 <xTimerGenericCommand>
 800f8fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f900:	6a3b      	ldr	r3, [r7, #32]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d152      	bne.n	800f9ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f90a:	f383 8811 	msr	BASEPRI, r3
 800f90e:	f3bf 8f6f 	isb	sy
 800f912:	f3bf 8f4f 	dsb	sy
 800f916:	61bb      	str	r3, [r7, #24]
}
 800f918:	bf00      	nop
 800f91a:	bf00      	nop
 800f91c:	e7fd      	b.n	800f91a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f924:	f023 0301 	bic.w	r3, r3, #1
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f92c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f930:	e03d      	b.n	800f9ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f938:	f043 0301 	orr.w	r3, r3, #1
 800f93c:	b2da      	uxtb	r2, r3
 800f93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f940:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f948:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94c:	699b      	ldr	r3, [r3, #24]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d10b      	bne.n	800f96a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f956:	f383 8811 	msr	BASEPRI, r3
 800f95a:	f3bf 8f6f 	isb	sy
 800f95e:	f3bf 8f4f 	dsb	sy
 800f962:	617b      	str	r3, [r7, #20]
}
 800f964:	bf00      	nop
 800f966:	bf00      	nop
 800f968:	e7fd      	b.n	800f966 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f96c:	699a      	ldr	r2, [r3, #24]
 800f96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f970:	18d1      	adds	r1, r2, r3
 800f972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f978:	f7ff ff04 	bl	800f784 <prvInsertTimerInActiveList>
					break;
 800f97c:	e017      	b.n	800f9ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f984:	f003 0302 	and.w	r3, r3, #2
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d103      	bne.n	800f994 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f98c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f98e:	f000 fbeb 	bl	8010168 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f992:	e00c      	b.n	800f9ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f99a:	f023 0301 	bic.w	r3, r3, #1
 800f99e:	b2da      	uxtb	r2, r3
 800f9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f9a6:	e002      	b.n	800f9ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f9a8:	bf00      	nop
 800f9aa:	e000      	b.n	800f9ae <prvProcessReceivedCommands+0x1a6>
					break;
 800f9ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f9ae:	4b08      	ldr	r3, [pc, #32]	@ (800f9d0 <prvProcessReceivedCommands+0x1c8>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	1d39      	adds	r1, r7, #4
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fd ff7c 	bl	800d8b4 <xQueueReceive>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	f47f af26 	bne.w	800f810 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f9c4:	bf00      	nop
 800f9c6:	bf00      	nop
 800f9c8:	3730      	adds	r7, #48	@ 0x30
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	2400257c 	.word	0x2400257c

0800f9d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b088      	sub	sp, #32
 800f9d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9da:	e049      	b.n	800fa70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9dc:	4b2e      	ldr	r3, [pc, #184]	@ (800fa98 <prvSwitchTimerLists+0xc4>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9e6:	4b2c      	ldr	r3, [pc, #176]	@ (800fa98 <prvSwitchTimerLists+0xc4>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fd fb95 	bl	800d124 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa08:	f003 0304 	and.w	r3, r3, #4
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d02f      	beq.n	800fa70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	699b      	ldr	r3, [r3, #24]
 800fa14:	693a      	ldr	r2, [r7, #16]
 800fa16:	4413      	add	r3, r2
 800fa18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fa1a:	68ba      	ldr	r2, [r7, #8]
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d90e      	bls.n	800fa40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa2e:	4b1a      	ldr	r3, [pc, #104]	@ (800fa98 <prvSwitchTimerLists+0xc4>)
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	3304      	adds	r3, #4
 800fa36:	4619      	mov	r1, r3
 800fa38:	4610      	mov	r0, r2
 800fa3a:	f7fd fb3a 	bl	800d0b2 <vListInsert>
 800fa3e:	e017      	b.n	800fa70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa40:	2300      	movs	r3, #0
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	2300      	movs	r3, #0
 800fa46:	693a      	ldr	r2, [r7, #16]
 800fa48:	2100      	movs	r1, #0
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f7ff fd58 	bl	800f500 <xTimerGenericCommand>
 800fa50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d10b      	bne.n	800fa70 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fa58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa5c:	f383 8811 	msr	BASEPRI, r3
 800fa60:	f3bf 8f6f 	isb	sy
 800fa64:	f3bf 8f4f 	dsb	sy
 800fa68:	603b      	str	r3, [r7, #0]
}
 800fa6a:	bf00      	nop
 800fa6c:	bf00      	nop
 800fa6e:	e7fd      	b.n	800fa6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa70:	4b09      	ldr	r3, [pc, #36]	@ (800fa98 <prvSwitchTimerLists+0xc4>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1b0      	bne.n	800f9dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa7a:	4b07      	ldr	r3, [pc, #28]	@ (800fa98 <prvSwitchTimerLists+0xc4>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa80:	4b06      	ldr	r3, [pc, #24]	@ (800fa9c <prvSwitchTimerLists+0xc8>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4a04      	ldr	r2, [pc, #16]	@ (800fa98 <prvSwitchTimerLists+0xc4>)
 800fa86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa88:	4a04      	ldr	r2, [pc, #16]	@ (800fa9c <prvSwitchTimerLists+0xc8>)
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	6013      	str	r3, [r2, #0]
}
 800fa8e:	bf00      	nop
 800fa90:	3718      	adds	r7, #24
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	24002574 	.word	0x24002574
 800fa9c:	24002578 	.word	0x24002578

0800faa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800faa6:	f000 f96f 	bl	800fd88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800faaa:	4b15      	ldr	r3, [pc, #84]	@ (800fb00 <prvCheckForValidListAndQueue+0x60>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d120      	bne.n	800faf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fab2:	4814      	ldr	r0, [pc, #80]	@ (800fb04 <prvCheckForValidListAndQueue+0x64>)
 800fab4:	f7fd faac 	bl	800d010 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fab8:	4813      	ldr	r0, [pc, #76]	@ (800fb08 <prvCheckForValidListAndQueue+0x68>)
 800faba:	f7fd faa9 	bl	800d010 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fabe:	4b13      	ldr	r3, [pc, #76]	@ (800fb0c <prvCheckForValidListAndQueue+0x6c>)
 800fac0:	4a10      	ldr	r2, [pc, #64]	@ (800fb04 <prvCheckForValidListAndQueue+0x64>)
 800fac2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fac4:	4b12      	ldr	r3, [pc, #72]	@ (800fb10 <prvCheckForValidListAndQueue+0x70>)
 800fac6:	4a10      	ldr	r2, [pc, #64]	@ (800fb08 <prvCheckForValidListAndQueue+0x68>)
 800fac8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800faca:	2300      	movs	r3, #0
 800facc:	9300      	str	r3, [sp, #0]
 800face:	4b11      	ldr	r3, [pc, #68]	@ (800fb14 <prvCheckForValidListAndQueue+0x74>)
 800fad0:	4a11      	ldr	r2, [pc, #68]	@ (800fb18 <prvCheckForValidListAndQueue+0x78>)
 800fad2:	2110      	movs	r1, #16
 800fad4:	200a      	movs	r0, #10
 800fad6:	f7fd fbb9 	bl	800d24c <xQueueGenericCreateStatic>
 800fada:	4603      	mov	r3, r0
 800fadc:	4a08      	ldr	r2, [pc, #32]	@ (800fb00 <prvCheckForValidListAndQueue+0x60>)
 800fade:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fae0:	4b07      	ldr	r3, [pc, #28]	@ (800fb00 <prvCheckForValidListAndQueue+0x60>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d005      	beq.n	800faf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fae8:	4b05      	ldr	r3, [pc, #20]	@ (800fb00 <prvCheckForValidListAndQueue+0x60>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	490b      	ldr	r1, [pc, #44]	@ (800fb1c <prvCheckForValidListAndQueue+0x7c>)
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fe f9fa 	bl	800dee8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800faf4:	f000 f97a 	bl	800fdec <vPortExitCritical>
}
 800faf8:	bf00      	nop
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	2400257c 	.word	0x2400257c
 800fb04:	2400254c 	.word	0x2400254c
 800fb08:	24002560 	.word	0x24002560
 800fb0c:	24002574 	.word	0x24002574
 800fb10:	24002578 	.word	0x24002578
 800fb14:	24002628 	.word	0x24002628
 800fb18:	24002588 	.word	0x24002588
 800fb1c:	08013fbc 	.word	0x08013fbc

0800fb20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb20:	b480      	push	{r7}
 800fb22:	b085      	sub	sp, #20
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	3b04      	subs	r3, #4
 800fb30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fb38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	3b04      	subs	r3, #4
 800fb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	f023 0201 	bic.w	r2, r3, #1
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	3b04      	subs	r3, #4
 800fb4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb50:	4a0c      	ldr	r2, [pc, #48]	@ (800fb84 <pxPortInitialiseStack+0x64>)
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	3b14      	subs	r3, #20
 800fb5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	3b04      	subs	r3, #4
 800fb66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f06f 0202 	mvn.w	r2, #2
 800fb6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	3b20      	subs	r3, #32
 800fb74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb76:	68fb      	ldr	r3, [r7, #12]
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3714      	adds	r7, #20
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr
 800fb84:	0800fb89 	.word	0x0800fb89

0800fb88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb92:	4b13      	ldr	r3, [pc, #76]	@ (800fbe0 <prvTaskExitError+0x58>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb9a:	d00b      	beq.n	800fbb4 <prvTaskExitError+0x2c>
	__asm volatile
 800fb9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba0:	f383 8811 	msr	BASEPRI, r3
 800fba4:	f3bf 8f6f 	isb	sy
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	60fb      	str	r3, [r7, #12]
}
 800fbae:	bf00      	nop
 800fbb0:	bf00      	nop
 800fbb2:	e7fd      	b.n	800fbb0 <prvTaskExitError+0x28>
	__asm volatile
 800fbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbb8:	f383 8811 	msr	BASEPRI, r3
 800fbbc:	f3bf 8f6f 	isb	sy
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	60bb      	str	r3, [r7, #8]
}
 800fbc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fbc8:	bf00      	nop
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d0fc      	beq.n	800fbca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fbd0:	bf00      	nop
 800fbd2:	bf00      	nop
 800fbd4:	3714      	adds	r7, #20
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	24000010 	.word	0x24000010
	...

0800fbf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fbf0:	4b07      	ldr	r3, [pc, #28]	@ (800fc10 <pxCurrentTCBConst2>)
 800fbf2:	6819      	ldr	r1, [r3, #0]
 800fbf4:	6808      	ldr	r0, [r1, #0]
 800fbf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfa:	f380 8809 	msr	PSP, r0
 800fbfe:	f3bf 8f6f 	isb	sy
 800fc02:	f04f 0000 	mov.w	r0, #0
 800fc06:	f380 8811 	msr	BASEPRI, r0
 800fc0a:	4770      	bx	lr
 800fc0c:	f3af 8000 	nop.w

0800fc10 <pxCurrentTCBConst2>:
 800fc10:	2400204c 	.word	0x2400204c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fc14:	bf00      	nop
 800fc16:	bf00      	nop

0800fc18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fc18:	4808      	ldr	r0, [pc, #32]	@ (800fc3c <prvPortStartFirstTask+0x24>)
 800fc1a:	6800      	ldr	r0, [r0, #0]
 800fc1c:	6800      	ldr	r0, [r0, #0]
 800fc1e:	f380 8808 	msr	MSP, r0
 800fc22:	f04f 0000 	mov.w	r0, #0
 800fc26:	f380 8814 	msr	CONTROL, r0
 800fc2a:	b662      	cpsie	i
 800fc2c:	b661      	cpsie	f
 800fc2e:	f3bf 8f4f 	dsb	sy
 800fc32:	f3bf 8f6f 	isb	sy
 800fc36:	df00      	svc	0
 800fc38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc3a:	bf00      	nop
 800fc3c:	e000ed08 	.word	0xe000ed08

0800fc40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc46:	4b47      	ldr	r3, [pc, #284]	@ (800fd64 <xPortStartScheduler+0x124>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4a47      	ldr	r2, [pc, #284]	@ (800fd68 <xPortStartScheduler+0x128>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d10b      	bne.n	800fc68 <xPortStartScheduler+0x28>
	__asm volatile
 800fc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc54:	f383 8811 	msr	BASEPRI, r3
 800fc58:	f3bf 8f6f 	isb	sy
 800fc5c:	f3bf 8f4f 	dsb	sy
 800fc60:	613b      	str	r3, [r7, #16]
}
 800fc62:	bf00      	nop
 800fc64:	bf00      	nop
 800fc66:	e7fd      	b.n	800fc64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc68:	4b3e      	ldr	r3, [pc, #248]	@ (800fd64 <xPortStartScheduler+0x124>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a3f      	ldr	r2, [pc, #252]	@ (800fd6c <xPortStartScheduler+0x12c>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d10b      	bne.n	800fc8a <xPortStartScheduler+0x4a>
	__asm volatile
 800fc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc76:	f383 8811 	msr	BASEPRI, r3
 800fc7a:	f3bf 8f6f 	isb	sy
 800fc7e:	f3bf 8f4f 	dsb	sy
 800fc82:	60fb      	str	r3, [r7, #12]
}
 800fc84:	bf00      	nop
 800fc86:	bf00      	nop
 800fc88:	e7fd      	b.n	800fc86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc8a:	4b39      	ldr	r3, [pc, #228]	@ (800fd70 <xPortStartScheduler+0x130>)
 800fc8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	22ff      	movs	r2, #255	@ 0xff
 800fc9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fca4:	78fb      	ldrb	r3, [r7, #3]
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	4b31      	ldr	r3, [pc, #196]	@ (800fd74 <xPortStartScheduler+0x134>)
 800fcb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fcb2:	4b31      	ldr	r3, [pc, #196]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fcb4:	2207      	movs	r2, #7
 800fcb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcb8:	e009      	b.n	800fcce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fcba:	4b2f      	ldr	r3, [pc, #188]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	3b01      	subs	r3, #1
 800fcc0:	4a2d      	ldr	r2, [pc, #180]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fcc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fcc4:	78fb      	ldrb	r3, [r7, #3]
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	005b      	lsls	r3, r3, #1
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcce:	78fb      	ldrb	r3, [r7, #3]
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcd6:	2b80      	cmp	r3, #128	@ 0x80
 800fcd8:	d0ef      	beq.n	800fcba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fcda:	4b27      	ldr	r3, [pc, #156]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f1c3 0307 	rsb	r3, r3, #7
 800fce2:	2b04      	cmp	r3, #4
 800fce4:	d00b      	beq.n	800fcfe <xPortStartScheduler+0xbe>
	__asm volatile
 800fce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcea:	f383 8811 	msr	BASEPRI, r3
 800fcee:	f3bf 8f6f 	isb	sy
 800fcf2:	f3bf 8f4f 	dsb	sy
 800fcf6:	60bb      	str	r3, [r7, #8]
}
 800fcf8:	bf00      	nop
 800fcfa:	bf00      	nop
 800fcfc:	e7fd      	b.n	800fcfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fcfe:	4b1e      	ldr	r3, [pc, #120]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	021b      	lsls	r3, r3, #8
 800fd04:	4a1c      	ldr	r2, [pc, #112]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fd06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd08:	4b1b      	ldr	r3, [pc, #108]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fd10:	4a19      	ldr	r2, [pc, #100]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fd12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	b2da      	uxtb	r2, r3
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd1c:	4b17      	ldr	r3, [pc, #92]	@ (800fd7c <xPortStartScheduler+0x13c>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a16      	ldr	r2, [pc, #88]	@ (800fd7c <xPortStartScheduler+0x13c>)
 800fd22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fd26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd28:	4b14      	ldr	r3, [pc, #80]	@ (800fd7c <xPortStartScheduler+0x13c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4a13      	ldr	r2, [pc, #76]	@ (800fd7c <xPortStartScheduler+0x13c>)
 800fd2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fd32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd34:	f000 f8da 	bl	800feec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd38:	4b11      	ldr	r3, [pc, #68]	@ (800fd80 <xPortStartScheduler+0x140>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd3e:	f000 f8f9 	bl	800ff34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd42:	4b10      	ldr	r3, [pc, #64]	@ (800fd84 <xPortStartScheduler+0x144>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a0f      	ldr	r2, [pc, #60]	@ (800fd84 <xPortStartScheduler+0x144>)
 800fd48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fd4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd4e:	f7ff ff63 	bl	800fc18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd52:	f7fe fd13 	bl	800e77c <vTaskSwitchContext>
	prvTaskExitError();
 800fd56:	f7ff ff17 	bl	800fb88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	e000ed00 	.word	0xe000ed00
 800fd68:	410fc271 	.word	0x410fc271
 800fd6c:	410fc270 	.word	0x410fc270
 800fd70:	e000e400 	.word	0xe000e400
 800fd74:	24002678 	.word	0x24002678
 800fd78:	2400267c 	.word	0x2400267c
 800fd7c:	e000ed20 	.word	0xe000ed20
 800fd80:	24000010 	.word	0x24000010
 800fd84:	e000ef34 	.word	0xe000ef34

0800fd88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	607b      	str	r3, [r7, #4]
}
 800fda0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fda2:	4b10      	ldr	r3, [pc, #64]	@ (800fde4 <vPortEnterCritical+0x5c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	3301      	adds	r3, #1
 800fda8:	4a0e      	ldr	r2, [pc, #56]	@ (800fde4 <vPortEnterCritical+0x5c>)
 800fdaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fdac:	4b0d      	ldr	r3, [pc, #52]	@ (800fde4 <vPortEnterCritical+0x5c>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d110      	bne.n	800fdd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fdb4:	4b0c      	ldr	r3, [pc, #48]	@ (800fde8 <vPortEnterCritical+0x60>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00b      	beq.n	800fdd6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	603b      	str	r3, [r7, #0]
}
 800fdd0:	bf00      	nop
 800fdd2:	bf00      	nop
 800fdd4:	e7fd      	b.n	800fdd2 <vPortEnterCritical+0x4a>
	}
}
 800fdd6:	bf00      	nop
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	24000010 	.word	0x24000010
 800fde8:	e000ed04 	.word	0xe000ed04

0800fdec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fdf2:	4b12      	ldr	r3, [pc, #72]	@ (800fe3c <vPortExitCritical+0x50>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d10b      	bne.n	800fe12 <vPortExitCritical+0x26>
	__asm volatile
 800fdfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	607b      	str	r3, [r7, #4]
}
 800fe0c:	bf00      	nop
 800fe0e:	bf00      	nop
 800fe10:	e7fd      	b.n	800fe0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fe12:	4b0a      	ldr	r3, [pc, #40]	@ (800fe3c <vPortExitCritical+0x50>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	3b01      	subs	r3, #1
 800fe18:	4a08      	ldr	r2, [pc, #32]	@ (800fe3c <vPortExitCritical+0x50>)
 800fe1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe1c:	4b07      	ldr	r3, [pc, #28]	@ (800fe3c <vPortExitCritical+0x50>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d105      	bne.n	800fe30 <vPortExitCritical+0x44>
 800fe24:	2300      	movs	r3, #0
 800fe26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	f383 8811 	msr	BASEPRI, r3
}
 800fe2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe30:	bf00      	nop
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr
 800fe3c:	24000010 	.word	0x24000010

0800fe40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe40:	f3ef 8009 	mrs	r0, PSP
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	4b15      	ldr	r3, [pc, #84]	@ (800fea0 <pxCurrentTCBConst>)
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	f01e 0f10 	tst.w	lr, #16
 800fe50:	bf08      	it	eq
 800fe52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5a:	6010      	str	r0, [r2, #0]
 800fe5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fe64:	f380 8811 	msr	BASEPRI, r0
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	f3bf 8f6f 	isb	sy
 800fe70:	f7fe fc84 	bl	800e77c <vTaskSwitchContext>
 800fe74:	f04f 0000 	mov.w	r0, #0
 800fe78:	f380 8811 	msr	BASEPRI, r0
 800fe7c:	bc09      	pop	{r0, r3}
 800fe7e:	6819      	ldr	r1, [r3, #0]
 800fe80:	6808      	ldr	r0, [r1, #0]
 800fe82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe86:	f01e 0f10 	tst.w	lr, #16
 800fe8a:	bf08      	it	eq
 800fe8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe90:	f380 8809 	msr	PSP, r0
 800fe94:	f3bf 8f6f 	isb	sy
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop
 800fe9c:	f3af 8000 	nop.w

0800fea0 <pxCurrentTCBConst>:
 800fea0:	2400204c 	.word	0x2400204c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fea4:	bf00      	nop
 800fea6:	bf00      	nop

0800fea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	607b      	str	r3, [r7, #4]
}
 800fec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fec2:	f7fe fba1 	bl	800e608 <xTaskIncrementTick>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d003      	beq.n	800fed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fecc:	4b06      	ldr	r3, [pc, #24]	@ (800fee8 <xPortSysTickHandler+0x40>)
 800fece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fed2:	601a      	str	r2, [r3, #0]
 800fed4:	2300      	movs	r3, #0
 800fed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	f383 8811 	msr	BASEPRI, r3
}
 800fede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fee0:	bf00      	nop
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	e000ed04 	.word	0xe000ed04

0800feec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800feec:	b480      	push	{r7}
 800feee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fef0:	4b0b      	ldr	r3, [pc, #44]	@ (800ff20 <vPortSetupTimerInterrupt+0x34>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fef6:	4b0b      	ldr	r3, [pc, #44]	@ (800ff24 <vPortSetupTimerInterrupt+0x38>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fefc:	4b0a      	ldr	r3, [pc, #40]	@ (800ff28 <vPortSetupTimerInterrupt+0x3c>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4a0a      	ldr	r2, [pc, #40]	@ (800ff2c <vPortSetupTimerInterrupt+0x40>)
 800ff02:	fba2 2303 	umull	r2, r3, r2, r3
 800ff06:	099b      	lsrs	r3, r3, #6
 800ff08:	4a09      	ldr	r2, [pc, #36]	@ (800ff30 <vPortSetupTimerInterrupt+0x44>)
 800ff0a:	3b01      	subs	r3, #1
 800ff0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ff0e:	4b04      	ldr	r3, [pc, #16]	@ (800ff20 <vPortSetupTimerInterrupt+0x34>)
 800ff10:	2207      	movs	r2, #7
 800ff12:	601a      	str	r2, [r3, #0]
}
 800ff14:	bf00      	nop
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	e000e010 	.word	0xe000e010
 800ff24:	e000e018 	.word	0xe000e018
 800ff28:	24000000 	.word	0x24000000
 800ff2c:	10624dd3 	.word	0x10624dd3
 800ff30:	e000e014 	.word	0xe000e014

0800ff34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ff44 <vPortEnableVFP+0x10>
 800ff38:	6801      	ldr	r1, [r0, #0]
 800ff3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ff3e:	6001      	str	r1, [r0, #0]
 800ff40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff42:	bf00      	nop
 800ff44:	e000ed88 	.word	0xe000ed88

0800ff48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff48:	b480      	push	{r7}
 800ff4a:	b085      	sub	sp, #20
 800ff4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff4e:	f3ef 8305 	mrs	r3, IPSR
 800ff52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b0f      	cmp	r3, #15
 800ff58:	d915      	bls.n	800ff86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff5a:	4a18      	ldr	r2, [pc, #96]	@ (800ffbc <vPortValidateInterruptPriority+0x74>)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	4413      	add	r3, r2
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff64:	4b16      	ldr	r3, [pc, #88]	@ (800ffc0 <vPortValidateInterruptPriority+0x78>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	7afa      	ldrb	r2, [r7, #11]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d20b      	bcs.n	800ff86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	607b      	str	r3, [r7, #4]
}
 800ff80:	bf00      	nop
 800ff82:	bf00      	nop
 800ff84:	e7fd      	b.n	800ff82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff86:	4b0f      	ldr	r3, [pc, #60]	@ (800ffc4 <vPortValidateInterruptPriority+0x7c>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ff8e:	4b0e      	ldr	r3, [pc, #56]	@ (800ffc8 <vPortValidateInterruptPriority+0x80>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d90b      	bls.n	800ffae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff9a:	f383 8811 	msr	BASEPRI, r3
 800ff9e:	f3bf 8f6f 	isb	sy
 800ffa2:	f3bf 8f4f 	dsb	sy
 800ffa6:	603b      	str	r3, [r7, #0]
}
 800ffa8:	bf00      	nop
 800ffaa:	bf00      	nop
 800ffac:	e7fd      	b.n	800ffaa <vPortValidateInterruptPriority+0x62>
	}
 800ffae:	bf00      	nop
 800ffb0:	3714      	adds	r7, #20
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop
 800ffbc:	e000e3f0 	.word	0xe000e3f0
 800ffc0:	24002678 	.word	0x24002678
 800ffc4:	e000ed0c 	.word	0xe000ed0c
 800ffc8:	2400267c 	.word	0x2400267c

0800ffcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b08a      	sub	sp, #40	@ 0x28
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ffd8:	f7fe fa48 	bl	800e46c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ffdc:	4b5c      	ldr	r3, [pc, #368]	@ (8010150 <pvPortMalloc+0x184>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d101      	bne.n	800ffe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ffe4:	f000 f924 	bl	8010230 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ffe8:	4b5a      	ldr	r3, [pc, #360]	@ (8010154 <pvPortMalloc+0x188>)
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	4013      	ands	r3, r2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f040 8095 	bne.w	8010120 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d01e      	beq.n	801003a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fffc:	2208      	movs	r2, #8
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4413      	add	r3, r2
 8010002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f003 0307 	and.w	r3, r3, #7
 801000a:	2b00      	cmp	r3, #0
 801000c:	d015      	beq.n	801003a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f023 0307 	bic.w	r3, r3, #7
 8010014:	3308      	adds	r3, #8
 8010016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f003 0307 	and.w	r3, r3, #7
 801001e:	2b00      	cmp	r3, #0
 8010020:	d00b      	beq.n	801003a <pvPortMalloc+0x6e>
	__asm volatile
 8010022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010026:	f383 8811 	msr	BASEPRI, r3
 801002a:	f3bf 8f6f 	isb	sy
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	617b      	str	r3, [r7, #20]
}
 8010034:	bf00      	nop
 8010036:	bf00      	nop
 8010038:	e7fd      	b.n	8010036 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d06f      	beq.n	8010120 <pvPortMalloc+0x154>
 8010040:	4b45      	ldr	r3, [pc, #276]	@ (8010158 <pvPortMalloc+0x18c>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	429a      	cmp	r2, r3
 8010048:	d86a      	bhi.n	8010120 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801004a:	4b44      	ldr	r3, [pc, #272]	@ (801015c <pvPortMalloc+0x190>)
 801004c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801004e:	4b43      	ldr	r3, [pc, #268]	@ (801015c <pvPortMalloc+0x190>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010054:	e004      	b.n	8010060 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801005a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	429a      	cmp	r2, r3
 8010068:	d903      	bls.n	8010072 <pvPortMalloc+0xa6>
 801006a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d1f1      	bne.n	8010056 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010072:	4b37      	ldr	r3, [pc, #220]	@ (8010150 <pvPortMalloc+0x184>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010078:	429a      	cmp	r2, r3
 801007a:	d051      	beq.n	8010120 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801007c:	6a3b      	ldr	r3, [r7, #32]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2208      	movs	r2, #8
 8010082:	4413      	add	r3, r2
 8010084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	6a3b      	ldr	r3, [r7, #32]
 801008c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801008e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010090:	685a      	ldr	r2, [r3, #4]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	1ad2      	subs	r2, r2, r3
 8010096:	2308      	movs	r3, #8
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	429a      	cmp	r2, r3
 801009c:	d920      	bls.n	80100e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801009e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4413      	add	r3, r2
 80100a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	f003 0307 	and.w	r3, r3, #7
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00b      	beq.n	80100c8 <pvPortMalloc+0xfc>
	__asm volatile
 80100b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b4:	f383 8811 	msr	BASEPRI, r3
 80100b8:	f3bf 8f6f 	isb	sy
 80100bc:	f3bf 8f4f 	dsb	sy
 80100c0:	613b      	str	r3, [r7, #16]
}
 80100c2:	bf00      	nop
 80100c4:	bf00      	nop
 80100c6:	e7fd      	b.n	80100c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80100c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ca:	685a      	ldr	r2, [r3, #4]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	1ad2      	subs	r2, r2, r3
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80100d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80100da:	69b8      	ldr	r0, [r7, #24]
 80100dc:	f000 f90c 	bl	80102f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80100e0:	4b1d      	ldr	r3, [pc, #116]	@ (8010158 <pvPortMalloc+0x18c>)
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	1ad3      	subs	r3, r2, r3
 80100ea:	4a1b      	ldr	r2, [pc, #108]	@ (8010158 <pvPortMalloc+0x18c>)
 80100ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80100ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010158 <pvPortMalloc+0x18c>)
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010160 <pvPortMalloc+0x194>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d203      	bcs.n	8010102 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80100fa:	4b17      	ldr	r3, [pc, #92]	@ (8010158 <pvPortMalloc+0x18c>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a18      	ldr	r2, [pc, #96]	@ (8010160 <pvPortMalloc+0x194>)
 8010100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010104:	685a      	ldr	r2, [r3, #4]
 8010106:	4b13      	ldr	r3, [pc, #76]	@ (8010154 <pvPortMalloc+0x188>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	431a      	orrs	r2, r3
 801010c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801010e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010112:	2200      	movs	r2, #0
 8010114:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010116:	4b13      	ldr	r3, [pc, #76]	@ (8010164 <pvPortMalloc+0x198>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	3301      	adds	r3, #1
 801011c:	4a11      	ldr	r2, [pc, #68]	@ (8010164 <pvPortMalloc+0x198>)
 801011e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010120:	f7fe f9b2 	bl	800e488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	f003 0307 	and.w	r3, r3, #7
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00b      	beq.n	8010146 <pvPortMalloc+0x17a>
	__asm volatile
 801012e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010132:	f383 8811 	msr	BASEPRI, r3
 8010136:	f3bf 8f6f 	isb	sy
 801013a:	f3bf 8f4f 	dsb	sy
 801013e:	60fb      	str	r3, [r7, #12]
}
 8010140:	bf00      	nop
 8010142:	bf00      	nop
 8010144:	e7fd      	b.n	8010142 <pvPortMalloc+0x176>
	return pvReturn;
 8010146:	69fb      	ldr	r3, [r7, #28]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3728      	adds	r7, #40	@ 0x28
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	240333c8 	.word	0x240333c8
 8010154:	240333dc 	.word	0x240333dc
 8010158:	240333cc 	.word	0x240333cc
 801015c:	240333c0 	.word	0x240333c0
 8010160:	240333d0 	.word	0x240333d0
 8010164:	240333d4 	.word	0x240333d4

08010168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b086      	sub	sp, #24
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d04f      	beq.n	801021a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801017a:	2308      	movs	r3, #8
 801017c:	425b      	negs	r3, r3
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	4413      	add	r3, r2
 8010182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	685a      	ldr	r2, [r3, #4]
 801018c:	4b25      	ldr	r3, [pc, #148]	@ (8010224 <vPortFree+0xbc>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4013      	ands	r3, r2
 8010192:	2b00      	cmp	r3, #0
 8010194:	d10b      	bne.n	80101ae <vPortFree+0x46>
	__asm volatile
 8010196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019a:	f383 8811 	msr	BASEPRI, r3
 801019e:	f3bf 8f6f 	isb	sy
 80101a2:	f3bf 8f4f 	dsb	sy
 80101a6:	60fb      	str	r3, [r7, #12]
}
 80101a8:	bf00      	nop
 80101aa:	bf00      	nop
 80101ac:	e7fd      	b.n	80101aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d00b      	beq.n	80101ce <vPortFree+0x66>
	__asm volatile
 80101b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ba:	f383 8811 	msr	BASEPRI, r3
 80101be:	f3bf 8f6f 	isb	sy
 80101c2:	f3bf 8f4f 	dsb	sy
 80101c6:	60bb      	str	r3, [r7, #8]
}
 80101c8:	bf00      	nop
 80101ca:	bf00      	nop
 80101cc:	e7fd      	b.n	80101ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	685a      	ldr	r2, [r3, #4]
 80101d2:	4b14      	ldr	r3, [pc, #80]	@ (8010224 <vPortFree+0xbc>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4013      	ands	r3, r2
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d01e      	beq.n	801021a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d11a      	bne.n	801021a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	685a      	ldr	r2, [r3, #4]
 80101e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010224 <vPortFree+0xbc>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	43db      	mvns	r3, r3
 80101ee:	401a      	ands	r2, r3
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80101f4:	f7fe f93a 	bl	800e46c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	685a      	ldr	r2, [r3, #4]
 80101fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010228 <vPortFree+0xc0>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4413      	add	r3, r2
 8010202:	4a09      	ldr	r2, [pc, #36]	@ (8010228 <vPortFree+0xc0>)
 8010204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010206:	6938      	ldr	r0, [r7, #16]
 8010208:	f000 f876 	bl	80102f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801020c:	4b07      	ldr	r3, [pc, #28]	@ (801022c <vPortFree+0xc4>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	3301      	adds	r3, #1
 8010212:	4a06      	ldr	r2, [pc, #24]	@ (801022c <vPortFree+0xc4>)
 8010214:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010216:	f7fe f937 	bl	800e488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801021a:	bf00      	nop
 801021c:	3718      	adds	r7, #24
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	240333dc 	.word	0x240333dc
 8010228:	240333cc 	.word	0x240333cc
 801022c:	240333d8 	.word	0x240333d8

08010230 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010236:	4b29      	ldr	r3, [pc, #164]	@ (80102dc <prvHeapInit+0xac>)
 8010238:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801023a:	4b29      	ldr	r3, [pc, #164]	@ (80102e0 <prvHeapInit+0xb0>)
 801023c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f003 0307 	and.w	r3, r3, #7
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00c      	beq.n	8010262 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	3307      	adds	r3, #7
 801024c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f023 0307 	bic.w	r3, r3, #7
 8010254:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010256:	68ba      	ldr	r2, [r7, #8]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	4a20      	ldr	r2, [pc, #128]	@ (80102e0 <prvHeapInit+0xb0>)
 801025e:	4413      	add	r3, r2
 8010260:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010266:	4a1f      	ldr	r2, [pc, #124]	@ (80102e4 <prvHeapInit+0xb4>)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801026c:	4b1d      	ldr	r3, [pc, #116]	@ (80102e4 <prvHeapInit+0xb4>)
 801026e:	2200      	movs	r2, #0
 8010270:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	68ba      	ldr	r2, [r7, #8]
 8010276:	4413      	add	r3, r2
 8010278:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801027a:	2208      	movs	r2, #8
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	1a9b      	subs	r3, r3, r2
 8010280:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f023 0307 	bic.w	r3, r3, #7
 8010288:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	4a16      	ldr	r2, [pc, #88]	@ (80102e8 <prvHeapInit+0xb8>)
 801028e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010290:	4b15      	ldr	r3, [pc, #84]	@ (80102e8 <prvHeapInit+0xb8>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2200      	movs	r2, #0
 8010296:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010298:	4b13      	ldr	r3, [pc, #76]	@ (80102e8 <prvHeapInit+0xb8>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2200      	movs	r2, #0
 801029e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	1ad2      	subs	r2, r2, r3
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80102ae:	4b0e      	ldr	r3, [pc, #56]	@ (80102e8 <prvHeapInit+0xb8>)
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	4a0c      	ldr	r2, [pc, #48]	@ (80102ec <prvHeapInit+0xbc>)
 80102bc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	4a0b      	ldr	r2, [pc, #44]	@ (80102f0 <prvHeapInit+0xc0>)
 80102c4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80102c6:	4b0b      	ldr	r3, [pc, #44]	@ (80102f4 <prvHeapInit+0xc4>)
 80102c8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80102cc:	601a      	str	r2, [r3, #0]
}
 80102ce:	bf00      	nop
 80102d0:	3714      	adds	r7, #20
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	00030d40 	.word	0x00030d40
 80102e0:	24002680 	.word	0x24002680
 80102e4:	240333c0 	.word	0x240333c0
 80102e8:	240333c8 	.word	0x240333c8
 80102ec:	240333d0 	.word	0x240333d0
 80102f0:	240333cc 	.word	0x240333cc
 80102f4:	240333dc 	.word	0x240333dc

080102f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80102f8:	b480      	push	{r7}
 80102fa:	b085      	sub	sp, #20
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010300:	4b28      	ldr	r3, [pc, #160]	@ (80103a4 <prvInsertBlockIntoFreeList+0xac>)
 8010302:	60fb      	str	r3, [r7, #12]
 8010304:	e002      	b.n	801030c <prvInsertBlockIntoFreeList+0x14>
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	60fb      	str	r3, [r7, #12]
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	429a      	cmp	r2, r3
 8010314:	d8f7      	bhi.n	8010306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	4413      	add	r3, r2
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	429a      	cmp	r2, r3
 8010326:	d108      	bne.n	801033a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	685a      	ldr	r2, [r3, #4]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	441a      	add	r2, r3
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	68ba      	ldr	r2, [r7, #8]
 8010344:	441a      	add	r2, r3
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	429a      	cmp	r2, r3
 801034c:	d118      	bne.n	8010380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681a      	ldr	r2, [r3, #0]
 8010352:	4b15      	ldr	r3, [pc, #84]	@ (80103a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	429a      	cmp	r2, r3
 8010358:	d00d      	beq.n	8010376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	685a      	ldr	r2, [r3, #4]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	441a      	add	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	681a      	ldr	r2, [r3, #0]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	e008      	b.n	8010388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010376:	4b0c      	ldr	r3, [pc, #48]	@ (80103a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	601a      	str	r2, [r3, #0]
 801037e:	e003      	b.n	8010388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	429a      	cmp	r2, r3
 801038e:	d002      	beq.n	8010396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010396:	bf00      	nop
 8010398:	3714      	adds	r7, #20
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	240333c0 	.word	0x240333c0
 80103a8:	240333c8 	.word	0x240333c8

080103ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80103ac:	4a02      	ldr	r2, [pc, #8]	@ (80103b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 80103ae:	4b03      	ldr	r3, [pc, #12]	@ (80103bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 80103b0:	6812      	ldr	r2, [r2, #0]
 80103b2:	601a      	str	r2, [r3, #0]
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop
 80103b8:	24000e0c 	.word	0x24000e0c
 80103bc:	2400001c 	.word	0x2400001c

080103c0 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 80103c0:	f002 bb96 	b.w	8012af0 <autoware_control_msgs__msg__Control__init>

080103c4 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 80103c4:	f002 bbea 	b.w	8012b9c <autoware_control_msgs__msg__Control__fini>

080103c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80103c8:	b510      	push	{r4, lr}
 80103ca:	4c0c      	ldr	r4, [pc, #48]	@ (80103fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 80103cc:	f001 f892 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103d0:	60e0      	str	r0, [r4, #12]
 80103d2:	f001 f88f 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103d6:	64a0      	str	r0, [r4, #72]	@ 0x48
 80103d8:	f000 f81a 	bl	8010410 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 80103dc:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80103e0:	f000 f832 	bl	8010448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 80103e4:	4b06      	ldr	r3, [pc, #24]	@ (8010400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 80103e6:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	b10a      	cbz	r2, 80103f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 80103ee:	4804      	ldr	r0, [pc, #16]	@ (8010400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 80103f0:	bd10      	pop	{r4, pc}
 80103f2:	4a04      	ldr	r2, [pc, #16]	@ (8010404 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 80103f4:	4802      	ldr	r0, [pc, #8]	@ (8010400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 80103f6:	6812      	ldr	r2, [r2, #0]
 80103f8:	601a      	str	r2, [r3, #0]
 80103fa:	bd10      	pop	{r4, pc}
 80103fc:	24000028 	.word	0x24000028
 8010400:	24000118 	.word	0x24000118
 8010404:	24000e10 	.word	0x24000e10

08010408 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 8010408:	f002 bbdc 	b.w	8012bc4 <autoware_control_msgs__msg__Lateral__init>

0801040c <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 801040c:	f002 bbfe 	b.w	8012c0c <autoware_control_msgs__msg__Lateral__fini>

08010410 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8010410:	b510      	push	{r4, lr}
 8010412:	4c08      	ldr	r4, [pc, #32]	@ (8010434 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 8010414:	f001 f86e 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010418:	60e0      	str	r0, [r4, #12]
 801041a:	f001 f86b 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801041e:	4b06      	ldr	r3, [pc, #24]	@ (8010438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8010420:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	b10a      	cbz	r2, 801042a <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 8010426:	4804      	ldr	r0, [pc, #16]	@ (8010438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8010428:	bd10      	pop	{r4, pc}
 801042a:	4a04      	ldr	r2, [pc, #16]	@ (801043c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 801042c:	4802      	ldr	r0, [pc, #8]	@ (8010438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 801042e:	6812      	ldr	r2, [r2, #0]
 8010430:	601a      	str	r2, [r3, #0]
 8010432:	bd10      	pop	{r4, pc}
 8010434:	24000124 	.word	0x24000124
 8010438:	24000250 	.word	0x24000250
 801043c:	24000e10 	.word	0x24000e10

08010440 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 8010440:	f002 bbf0 	b.w	8012c24 <autoware_control_msgs__msg__Longitudinal__init>

08010444 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 8010444:	f002 bc12 	b.w	8012c6c <autoware_control_msgs__msg__Longitudinal__fini>

08010448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8010448:	b510      	push	{r4, lr}
 801044a:	4c08      	ldr	r4, [pc, #32]	@ (801046c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 801044c:	f001 f852 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010450:	60e0      	str	r0, [r4, #12]
 8010452:	f001 f84f 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010456:	4b06      	ldr	r3, [pc, #24]	@ (8010470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8010458:	64a0      	str	r0, [r4, #72]	@ 0x48
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	b10a      	cbz	r2, 8010462 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 801045e:	4804      	ldr	r0, [pc, #16]	@ (8010470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8010460:	bd10      	pop	{r4, pc}
 8010462:	4a04      	ldr	r2, [pc, #16]	@ (8010474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 8010464:	4802      	ldr	r0, [pc, #8]	@ (8010470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8010466:	6812      	ldr	r2, [r2, #0]
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	bd10      	pop	{r4, pc}
 801046c:	2400025c 	.word	0x2400025c
 8010470:	24000400 	.word	0x24000400
 8010474:	24000e10 	.word	0x24000e10

08010478 <get_serialized_size_autoware_control_msgs__msg__Control>:
 8010478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047a:	4604      	mov	r4, r0
 801047c:	b1c8      	cbz	r0, 80104b2 <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 801047e:	460f      	mov	r7, r1
 8010480:	f001 f846 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010484:	4606      	mov	r6, r0
 8010486:	f104 0008 	add.w	r0, r4, #8
 801048a:	443e      	add	r6, r7
 801048c:	4631      	mov	r1, r6
 801048e:	f001 f83f 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010492:	4605      	mov	r5, r0
 8010494:	f104 0010 	add.w	r0, r4, #16
 8010498:	4435      	add	r5, r6
 801049a:	4629      	mov	r1, r5
 801049c:	f000 f8a2 	bl	80105e4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 80104a0:	4601      	mov	r1, r0
 80104a2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80104a6:	440d      	add	r5, r1
 80104a8:	4629      	mov	r1, r5
 80104aa:	f000 f9a7 	bl	80107fc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 80104ae:	1bc0      	subs	r0, r0, r7
 80104b0:	4428      	add	r0, r5
 80104b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080104b4 <_Control__cdr_deserialize>:
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	460c      	mov	r4, r1
 80104b8:	b329      	cbz	r1, 8010506 <_Control__cdr_deserialize+0x52>
 80104ba:	4605      	mov	r5, r0
 80104bc:	f001 f88c 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80104c0:	4603      	mov	r3, r0
 80104c2:	4621      	mov	r1, r4
 80104c4:	4628      	mov	r0, r5
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	4798      	blx	r3
 80104cc:	f001 f884 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80104d0:	4603      	mov	r3, r0
 80104d2:	f104 0108 	add.w	r1, r4, #8
 80104d6:	4628      	mov	r0, r5
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	4798      	blx	r3
 80104de:	f000 f95b 	bl	8010798 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 80104e2:	4603      	mov	r3, r0
 80104e4:	f104 0110 	add.w	r1, r4, #16
 80104e8:	4628      	mov	r0, r5
 80104ea:	685b      	ldr	r3, [r3, #4]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	4798      	blx	r3
 80104f0:	f000 fa28 	bl	8010944 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 80104f4:	4603      	mov	r3, r0
 80104f6:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 80104fa:	4628      	mov	r0, r5
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	4718      	bx	r3
 8010506:	4608      	mov	r0, r1
 8010508:	bd70      	pop	{r4, r5, r6, pc}
 801050a:	bf00      	nop

0801050c <_Control__cdr_serialize>:
 801050c:	b338      	cbz	r0, 801055e <_Control__cdr_serialize+0x52>
 801050e:	b570      	push	{r4, r5, r6, lr}
 8010510:	4604      	mov	r4, r0
 8010512:	460d      	mov	r5, r1
 8010514:	f001 f860 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010518:	4603      	mov	r3, r0
 801051a:	4629      	mov	r1, r5
 801051c:	4620      	mov	r0, r4
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	4798      	blx	r3
 8010524:	f001 f858 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010528:	4603      	mov	r3, r0
 801052a:	4629      	mov	r1, r5
 801052c:	f104 0008 	add.w	r0, r4, #8
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	4798      	blx	r3
 8010536:	f000 f92f 	bl	8010798 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 801053a:	4603      	mov	r3, r0
 801053c:	4629      	mov	r1, r5
 801053e:	f104 0010 	add.w	r0, r4, #16
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	689b      	ldr	r3, [r3, #8]
 8010546:	4798      	blx	r3
 8010548:	f000 f9fc 	bl	8010944 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 801054c:	4603      	mov	r3, r0
 801054e:	4629      	mov	r1, r5
 8010550:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801055a:	689b      	ldr	r3, [r3, #8]
 801055c:	4718      	bx	r3
 801055e:	4770      	bx	lr

08010560 <_Control__get_serialized_size>:
 8010560:	b538      	push	{r3, r4, r5, lr}
 8010562:	4604      	mov	r4, r0
 8010564:	b1b8      	cbz	r0, 8010596 <_Control__get_serialized_size+0x36>
 8010566:	2100      	movs	r1, #0
 8010568:	f000 ffd2 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 801056c:	4605      	mov	r5, r0
 801056e:	f104 0008 	add.w	r0, r4, #8
 8010572:	4629      	mov	r1, r5
 8010574:	f000 ffcc 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010578:	4601      	mov	r1, r0
 801057a:	f104 0010 	add.w	r0, r4, #16
 801057e:	440d      	add	r5, r1
 8010580:	4629      	mov	r1, r5
 8010582:	f000 f82f 	bl	80105e4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8010586:	4601      	mov	r1, r0
 8010588:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801058c:	440d      	add	r5, r1
 801058e:	4629      	mov	r1, r5
 8010590:	f000 f934 	bl	80107fc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8010594:	4428      	add	r0, r5
 8010596:	bd38      	pop	{r3, r4, r5, pc}

08010598 <_Control__max_serialized_size>:
 8010598:	b530      	push	{r4, r5, lr}
 801059a:	b083      	sub	sp, #12
 801059c:	2301      	movs	r3, #1
 801059e:	2100      	movs	r1, #0
 80105a0:	f10d 0007 	add.w	r0, sp, #7
 80105a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80105a8:	f001 f802 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 80105ac:	4604      	mov	r4, r0
 80105ae:	f10d 0007 	add.w	r0, sp, #7
 80105b2:	4621      	mov	r1, r4
 80105b4:	f000 fffc 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 80105b8:	4605      	mov	r5, r0
 80105ba:	f10d 0007 	add.w	r0, sp, #7
 80105be:	4425      	add	r5, r4
 80105c0:	4629      	mov	r1, r5
 80105c2:	f000 f8c7 	bl	8010754 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 80105c6:	4604      	mov	r4, r0
 80105c8:	f10d 0007 	add.w	r0, sp, #7
 80105cc:	442c      	add	r4, r5
 80105ce:	4621      	mov	r1, r4
 80105d0:	f000 f980 	bl	80108d4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 80105d4:	4420      	add	r0, r4
 80105d6:	b003      	add	sp, #12
 80105d8:	bd30      	pop	{r4, r5, pc}
 80105da:	bf00      	nop

080105dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80105dc:	4800      	ldr	r0, [pc, #0]	@ (80105e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 80105de:	4770      	bx	lr
 80105e0:	2400040c 	.word	0x2400040c

080105e4 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 80105e4:	b5b0      	push	{r4, r5, r7, lr}
 80105e6:	4604      	mov	r4, r0
 80105e8:	b1f0      	cbz	r0, 8010628 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 80105ea:	460d      	mov	r5, r1
 80105ec:	f000 ff90 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 80105f0:	4607      	mov	r7, r0
 80105f2:	f104 0008 	add.w	r0, r4, #8
 80105f6:	442f      	add	r7, r5
 80105f8:	f1c5 0501 	rsb	r5, r5, #1
 80105fc:	4639      	mov	r1, r7
 80105fe:	f000 ff87 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010602:	4407      	add	r7, r0
 8010604:	2104      	movs	r1, #4
 8010606:	4638      	mov	r0, r7
 8010608:	f001 fea8 	bl	801235c <ucdr_alignment>
 801060c:	2104      	movs	r1, #4
 801060e:	1844      	adds	r4, r0, r1
 8010610:	443c      	add	r4, r7
 8010612:	4620      	mov	r0, r4
 8010614:	f001 fea2 	bl	801235c <ucdr_alignment>
 8010618:	3004      	adds	r0, #4
 801061a:	2101      	movs	r1, #1
 801061c:	4404      	add	r4, r0
 801061e:	4620      	mov	r0, r4
 8010620:	f001 fe9c 	bl	801235c <ucdr_alignment>
 8010624:	4428      	add	r0, r5
 8010626:	4420      	add	r0, r4
 8010628:	bdb0      	pop	{r4, r5, r7, pc}
 801062a:	bf00      	nop

0801062c <_Lateral__cdr_deserialize>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	460c      	mov	r4, r1
 8010630:	b311      	cbz	r1, 8010678 <_Lateral__cdr_deserialize+0x4c>
 8010632:	4605      	mov	r5, r0
 8010634:	f000 ffd0 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010638:	4603      	mov	r3, r0
 801063a:	4621      	mov	r1, r4
 801063c:	4628      	mov	r0, r5
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	4798      	blx	r3
 8010644:	f000 ffc8 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010648:	4603      	mov	r3, r0
 801064a:	f104 0108 	add.w	r1, r4, #8
 801064e:	4628      	mov	r0, r5
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	4798      	blx	r3
 8010656:	f104 0110 	add.w	r1, r4, #16
 801065a:	4628      	mov	r0, r5
 801065c:	f001 fc30 	bl	8011ec0 <ucdr_deserialize_float>
 8010660:	f104 0114 	add.w	r1, r4, #20
 8010664:	4628      	mov	r0, r5
 8010666:	f001 fc2b 	bl	8011ec0 <ucdr_deserialize_float>
 801066a:	f104 0118 	add.w	r1, r4, #24
 801066e:	4628      	mov	r0, r5
 8010670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010674:	f000 bfca 	b.w	801160c <ucdr_deserialize_bool>
 8010678:	4608      	mov	r0, r1
 801067a:	bd38      	pop	{r3, r4, r5, pc}

0801067c <_Lateral__cdr_serialize>:
 801067c:	b318      	cbz	r0, 80106c6 <_Lateral__cdr_serialize+0x4a>
 801067e:	b538      	push	{r3, r4, r5, lr}
 8010680:	4604      	mov	r4, r0
 8010682:	460d      	mov	r5, r1
 8010684:	f000 ffa8 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010688:	4603      	mov	r3, r0
 801068a:	4629      	mov	r1, r5
 801068c:	4620      	mov	r0, r4
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	4798      	blx	r3
 8010694:	f000 ffa0 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010698:	4603      	mov	r3, r0
 801069a:	4629      	mov	r1, r5
 801069c:	f104 0008 	add.w	r0, r4, #8
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	4798      	blx	r3
 80106a6:	ed94 0a04 	vldr	s0, [r4, #16]
 80106aa:	4628      	mov	r0, r5
 80106ac:	f001 fb70 	bl	8011d90 <ucdr_serialize_float>
 80106b0:	ed94 0a05 	vldr	s0, [r4, #20]
 80106b4:	4628      	mov	r0, r5
 80106b6:	f001 fb6b 	bl	8011d90 <ucdr_serialize_float>
 80106ba:	7e21      	ldrb	r1, [r4, #24]
 80106bc:	4628      	mov	r0, r5
 80106be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106c2:	f000 bf8d 	b.w	80115e0 <ucdr_serialize_bool>
 80106c6:	4770      	bx	lr

080106c8 <_Lateral__get_serialized_size>:
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	4604      	mov	r4, r0
 80106cc:	b1d8      	cbz	r0, 8010706 <_Lateral__get_serialized_size+0x3e>
 80106ce:	2100      	movs	r1, #0
 80106d0:	f000 ff1e 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 80106d4:	4605      	mov	r5, r0
 80106d6:	f104 0008 	add.w	r0, r4, #8
 80106da:	4629      	mov	r1, r5
 80106dc:	f000 ff18 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 80106e0:	4405      	add	r5, r0
 80106e2:	2104      	movs	r1, #4
 80106e4:	4628      	mov	r0, r5
 80106e6:	f001 fe39 	bl	801235c <ucdr_alignment>
 80106ea:	2104      	movs	r1, #4
 80106ec:	4408      	add	r0, r1
 80106ee:	1944      	adds	r4, r0, r5
 80106f0:	4620      	mov	r0, r4
 80106f2:	f001 fe33 	bl	801235c <ucdr_alignment>
 80106f6:	3004      	adds	r0, #4
 80106f8:	2101      	movs	r1, #1
 80106fa:	4404      	add	r4, r0
 80106fc:	4620      	mov	r0, r4
 80106fe:	f001 fe2d 	bl	801235c <ucdr_alignment>
 8010702:	3001      	adds	r0, #1
 8010704:	4420      	add	r0, r4
 8010706:	bd38      	pop	{r3, r4, r5, pc}

08010708 <_Lateral__max_serialized_size>:
 8010708:	b530      	push	{r4, r5, lr}
 801070a:	b083      	sub	sp, #12
 801070c:	2501      	movs	r5, #1
 801070e:	2100      	movs	r1, #0
 8010710:	f10d 0007 	add.w	r0, sp, #7
 8010714:	f88d 5007 	strb.w	r5, [sp, #7]
 8010718:	f000 ff4a 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 801071c:	4604      	mov	r4, r0
 801071e:	f10d 0007 	add.w	r0, sp, #7
 8010722:	4621      	mov	r1, r4
 8010724:	f000 ff44 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010728:	4404      	add	r4, r0
 801072a:	2104      	movs	r1, #4
 801072c:	4620      	mov	r0, r4
 801072e:	f001 fe15 	bl	801235c <ucdr_alignment>
 8010732:	2104      	movs	r1, #4
 8010734:	4408      	add	r0, r1
 8010736:	4404      	add	r4, r0
 8010738:	4620      	mov	r0, r4
 801073a:	f001 fe0f 	bl	801235c <ucdr_alignment>
 801073e:	3004      	adds	r0, #4
 8010740:	4629      	mov	r1, r5
 8010742:	4404      	add	r4, r0
 8010744:	4620      	mov	r0, r4
 8010746:	f001 fe09 	bl	801235c <ucdr_alignment>
 801074a:	4428      	add	r0, r5
 801074c:	4420      	add	r0, r4
 801074e:	b003      	add	sp, #12
 8010750:	bd30      	pop	{r4, r5, pc}
 8010752:	bf00      	nop

08010754 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 8010754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010756:	2701      	movs	r7, #1
 8010758:	460c      	mov	r4, r1
 801075a:	4606      	mov	r6, r0
 801075c:	7007      	strb	r7, [r0, #0]
 801075e:	f000 ff27 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010762:	4605      	mov	r5, r0
 8010764:	4630      	mov	r0, r6
 8010766:	4425      	add	r5, r4
 8010768:	1b3c      	subs	r4, r7, r4
 801076a:	4629      	mov	r1, r5
 801076c:	f000 ff20 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010770:	4405      	add	r5, r0
 8010772:	2104      	movs	r1, #4
 8010774:	4628      	mov	r0, r5
 8010776:	f001 fdf1 	bl	801235c <ucdr_alignment>
 801077a:	2104      	movs	r1, #4
 801077c:	4408      	add	r0, r1
 801077e:	4405      	add	r5, r0
 8010780:	4628      	mov	r0, r5
 8010782:	f001 fdeb 	bl	801235c <ucdr_alignment>
 8010786:	3004      	adds	r0, #4
 8010788:	4639      	mov	r1, r7
 801078a:	4405      	add	r5, r0
 801078c:	4628      	mov	r0, r5
 801078e:	f001 fde5 	bl	801235c <ucdr_alignment>
 8010792:	4420      	add	r0, r4
 8010794:	4428      	add	r0, r5
 8010796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010798 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8010798:	4800      	ldr	r0, [pc, #0]	@ (801079c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 801079a:	4770      	bx	lr
 801079c:	24000434 	.word	0x24000434

080107a0 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 80107a0:	b570      	push	{r4, r5, r6, lr}
 80107a2:	460c      	mov	r4, r1
 80107a4:	4606      	mov	r6, r0
 80107a6:	f000 feb3 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 80107aa:	4605      	mov	r5, r0
 80107ac:	f106 0008 	add.w	r0, r6, #8
 80107b0:	4425      	add	r5, r4
 80107b2:	f1c4 0401 	rsb	r4, r4, #1
 80107b6:	4629      	mov	r1, r5
 80107b8:	f000 feaa 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 80107bc:	4405      	add	r5, r0
 80107be:	2104      	movs	r1, #4
 80107c0:	4628      	mov	r0, r5
 80107c2:	f001 fdcb 	bl	801235c <ucdr_alignment>
 80107c6:	2104      	movs	r1, #4
 80107c8:	4408      	add	r0, r1
 80107ca:	4405      	add	r5, r0
 80107cc:	4628      	mov	r0, r5
 80107ce:	f001 fdc5 	bl	801235c <ucdr_alignment>
 80107d2:	2104      	movs	r1, #4
 80107d4:	4408      	add	r0, r1
 80107d6:	1946      	adds	r6, r0, r5
 80107d8:	4630      	mov	r0, r6
 80107da:	f001 fdbf 	bl	801235c <ucdr_alignment>
 80107de:	1d05      	adds	r5, r0, #4
 80107e0:	2101      	movs	r1, #1
 80107e2:	4435      	add	r5, r6
 80107e4:	4628      	mov	r0, r5
 80107e6:	f001 fdb9 	bl	801235c <ucdr_alignment>
 80107ea:	2101      	movs	r1, #1
 80107ec:	4408      	add	r0, r1
 80107ee:	4405      	add	r5, r0
 80107f0:	4628      	mov	r0, r5
 80107f2:	f001 fdb3 	bl	801235c <ucdr_alignment>
 80107f6:	4420      	add	r0, r4
 80107f8:	4428      	add	r0, r5
 80107fa:	bd70      	pop	{r4, r5, r6, pc}

080107fc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 80107fc:	b108      	cbz	r0, 8010802 <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 80107fe:	f7ff bfcf 	b.w	80107a0 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 8010802:	4770      	bx	lr

08010804 <_Longitudinal__get_serialized_size>:
 8010804:	b110      	cbz	r0, 801080c <_Longitudinal__get_serialized_size+0x8>
 8010806:	2100      	movs	r1, #0
 8010808:	f7ff bfca 	b.w	80107a0 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop

08010810 <_Longitudinal__cdr_deserialize>:
 8010810:	b538      	push	{r3, r4, r5, lr}
 8010812:	460c      	mov	r4, r1
 8010814:	b361      	cbz	r1, 8010870 <_Longitudinal__cdr_deserialize+0x60>
 8010816:	4605      	mov	r5, r0
 8010818:	f000 fede 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801081c:	4603      	mov	r3, r0
 801081e:	4621      	mov	r1, r4
 8010820:	4628      	mov	r0, r5
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	4798      	blx	r3
 8010828:	f000 fed6 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801082c:	4603      	mov	r3, r0
 801082e:	f104 0108 	add.w	r1, r4, #8
 8010832:	4628      	mov	r0, r5
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	4798      	blx	r3
 801083a:	f104 0110 	add.w	r1, r4, #16
 801083e:	4628      	mov	r0, r5
 8010840:	f001 fb3e 	bl	8011ec0 <ucdr_deserialize_float>
 8010844:	f104 0114 	add.w	r1, r4, #20
 8010848:	4628      	mov	r0, r5
 801084a:	f001 fb39 	bl	8011ec0 <ucdr_deserialize_float>
 801084e:	f104 0118 	add.w	r1, r4, #24
 8010852:	4628      	mov	r0, r5
 8010854:	f001 fb34 	bl	8011ec0 <ucdr_deserialize_float>
 8010858:	f104 011c 	add.w	r1, r4, #28
 801085c:	4628      	mov	r0, r5
 801085e:	f000 fed5 	bl	801160c <ucdr_deserialize_bool>
 8010862:	f104 011d 	add.w	r1, r4, #29
 8010866:	4628      	mov	r0, r5
 8010868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801086c:	f000 bece 	b.w	801160c <ucdr_deserialize_bool>
 8010870:	4608      	mov	r0, r1
 8010872:	bd38      	pop	{r3, r4, r5, pc}

08010874 <_Longitudinal__cdr_serialize>:
 8010874:	b360      	cbz	r0, 80108d0 <_Longitudinal__cdr_serialize+0x5c>
 8010876:	b538      	push	{r3, r4, r5, lr}
 8010878:	4604      	mov	r4, r0
 801087a:	460d      	mov	r5, r1
 801087c:	f000 feac 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010880:	4603      	mov	r3, r0
 8010882:	4629      	mov	r1, r5
 8010884:	4620      	mov	r0, r4
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	689b      	ldr	r3, [r3, #8]
 801088a:	4798      	blx	r3
 801088c:	f000 fea4 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010890:	4603      	mov	r3, r0
 8010892:	4629      	mov	r1, r5
 8010894:	f104 0008 	add.w	r0, r4, #8
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	4798      	blx	r3
 801089e:	ed94 0a04 	vldr	s0, [r4, #16]
 80108a2:	4628      	mov	r0, r5
 80108a4:	f001 fa74 	bl	8011d90 <ucdr_serialize_float>
 80108a8:	ed94 0a05 	vldr	s0, [r4, #20]
 80108ac:	4628      	mov	r0, r5
 80108ae:	f001 fa6f 	bl	8011d90 <ucdr_serialize_float>
 80108b2:	ed94 0a06 	vldr	s0, [r4, #24]
 80108b6:	4628      	mov	r0, r5
 80108b8:	f001 fa6a 	bl	8011d90 <ucdr_serialize_float>
 80108bc:	7f21      	ldrb	r1, [r4, #28]
 80108be:	4628      	mov	r0, r5
 80108c0:	f000 fe8e 	bl	80115e0 <ucdr_serialize_bool>
 80108c4:	7f61      	ldrb	r1, [r4, #29]
 80108c6:	4628      	mov	r0, r5
 80108c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108cc:	f000 be88 	b.w	80115e0 <ucdr_serialize_bool>
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop

080108d4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 80108d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d6:	2701      	movs	r7, #1
 80108d8:	460c      	mov	r4, r1
 80108da:	4606      	mov	r6, r0
 80108dc:	7007      	strb	r7, [r0, #0]
 80108de:	f000 fe67 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 80108e2:	4605      	mov	r5, r0
 80108e4:	4630      	mov	r0, r6
 80108e6:	4425      	add	r5, r4
 80108e8:	1b3c      	subs	r4, r7, r4
 80108ea:	4629      	mov	r1, r5
 80108ec:	f000 fe60 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 80108f0:	4405      	add	r5, r0
 80108f2:	2104      	movs	r1, #4
 80108f4:	4628      	mov	r0, r5
 80108f6:	f001 fd31 	bl	801235c <ucdr_alignment>
 80108fa:	2104      	movs	r1, #4
 80108fc:	4408      	add	r0, r1
 80108fe:	4405      	add	r5, r0
 8010900:	4628      	mov	r0, r5
 8010902:	f001 fd2b 	bl	801235c <ucdr_alignment>
 8010906:	2104      	movs	r1, #4
 8010908:	4408      	add	r0, r1
 801090a:	1946      	adds	r6, r0, r5
 801090c:	4630      	mov	r0, r6
 801090e:	f001 fd25 	bl	801235c <ucdr_alignment>
 8010912:	1d05      	adds	r5, r0, #4
 8010914:	4639      	mov	r1, r7
 8010916:	4435      	add	r5, r6
 8010918:	4628      	mov	r0, r5
 801091a:	f001 fd1f 	bl	801235c <ucdr_alignment>
 801091e:	4438      	add	r0, r7
 8010920:	4639      	mov	r1, r7
 8010922:	4405      	add	r5, r0
 8010924:	4628      	mov	r0, r5
 8010926:	f001 fd19 	bl	801235c <ucdr_alignment>
 801092a:	4420      	add	r0, r4
 801092c:	4428      	add	r0, r5
 801092e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010930 <_Longitudinal__max_serialized_size>:
 8010930:	b500      	push	{lr}
 8010932:	b083      	sub	sp, #12
 8010934:	2100      	movs	r1, #0
 8010936:	f10d 0007 	add.w	r0, sp, #7
 801093a:	f7ff ffcb 	bl	80108d4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 801093e:	b003      	add	sp, #12
 8010940:	f85d fb04 	ldr.w	pc, [sp], #4

08010944 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8010944:	4800      	ldr	r0, [pc, #0]	@ (8010948 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 8010946:	4770      	bx	lr
 8010948:	2400045c 	.word	0x2400045c

0801094c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 801094c:	4b04      	ldr	r3, [pc, #16]	@ (8010960 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 801094e:	4805      	ldr	r0, [pc, #20]	@ (8010964 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4905      	ldr	r1, [pc, #20]	@ (8010968 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8010954:	4a05      	ldr	r2, [pc, #20]	@ (801096c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010956:	6003      	str	r3, [r0, #0]
 8010958:	600b      	str	r3, [r1, #0]
 801095a:	6013      	str	r3, [r2, #0]
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	24000e0c 	.word	0x24000e0c
 8010964:	240004a8 	.word	0x240004a8
 8010968:	240004b4 	.word	0x240004b4
 801096c:	2400048c 	.word	0x2400048c

08010970 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010970:	4a02      	ldr	r2, [pc, #8]	@ (801097c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 8010972:	4b03      	ldr	r3, [pc, #12]	@ (8010980 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 8010974:	6812      	ldr	r2, [r2, #0]
 8010976:	601a      	str	r2, [r3, #0]
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop
 801097c:	24000e0c 	.word	0x24000e0c
 8010980:	240004c8 	.word	0x240004c8

08010984 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010984:	4a02      	ldr	r2, [pc, #8]	@ (8010990 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 8010986:	4b03      	ldr	r3, [pc, #12]	@ (8010994 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 8010988:	6812      	ldr	r2, [r2, #0]
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	4770      	bx	lr
 801098e:	bf00      	nop
 8010990:	24000e0c 	.word	0x24000e0c
 8010994:	240004dc 	.word	0x240004dc

08010998 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010998:	4a02      	ldr	r2, [pc, #8]	@ (80109a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 801099a:	4b03      	ldr	r3, [pc, #12]	@ (80109a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 801099c:	6812      	ldr	r2, [r2, #0]
 801099e:	601a      	str	r2, [r3, #0]
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	24000e0c 	.word	0x24000e0c
 80109a8:	240004f0 	.word	0x240004f0

080109ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80109ac:	4a02      	ldr	r2, [pc, #8]	@ (80109b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 80109ae:	4b03      	ldr	r3, [pc, #12]	@ (80109bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 80109b0:	6812      	ldr	r2, [r2, #0]
 80109b2:	601a      	str	r2, [r3, #0]
 80109b4:	4770      	bx	lr
 80109b6:	bf00      	nop
 80109b8:	24000e0c 	.word	0x24000e0c
 80109bc:	24000504 	.word	0x24000504

080109c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 80109c0:	4a02      	ldr	r2, [pc, #8]	@ (80109cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 80109c2:	4b03      	ldr	r3, [pc, #12]	@ (80109d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 80109c4:	6812      	ldr	r2, [r2, #0]
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	24000e0c 	.word	0x24000e0c
 80109d0:	24000518 	.word	0x24000518

080109d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 80109d4:	4a02      	ldr	r2, [pc, #8]	@ (80109e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 80109d6:	4b03      	ldr	r3, [pc, #12]	@ (80109e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 80109d8:	6812      	ldr	r2, [r2, #0]
 80109da:	601a      	str	r2, [r3, #0]
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop
 80109e0:	24000e0c 	.word	0x24000e0c
 80109e4:	2400052c 	.word	0x2400052c

080109e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80109e8:	4a02      	ldr	r2, [pc, #8]	@ (80109f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 80109ea:	4b03      	ldr	r3, [pc, #12]	@ (80109f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 80109ec:	6812      	ldr	r2, [r2, #0]
 80109ee:	601a      	str	r2, [r3, #0]
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	24000e0c 	.word	0x24000e0c
 80109f8:	24000540 	.word	0x24000540

080109fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 80109fc:	4a02      	ldr	r2, [pc, #8]	@ (8010a08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 80109fe:	4b03      	ldr	r3, [pc, #12]	@ (8010a0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 8010a00:	6812      	ldr	r2, [r2, #0]
 8010a02:	601a      	str	r2, [r3, #0]
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop
 8010a08:	24000e0c 	.word	0x24000e0c
 8010a0c:	24000554 	.word	0x24000554

08010a10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8010a10:	4a02      	ldr	r2, [pc, #8]	@ (8010a1c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 8010a12:	4b03      	ldr	r3, [pc, #12]	@ (8010a20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 8010a14:	6812      	ldr	r2, [r2, #0]
 8010a16:	601a      	str	r2, [r3, #0]
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	24000e0c 	.word	0x24000e0c
 8010a20:	24000568 	.word	0x24000568

08010a24 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 8010a24:	f002 b92e 	b.w	8012c84 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

08010a28 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 8010a28:	f002 b93e 	b.w	8012ca8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

08010a2c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 8010a2c:	f002 b940 	b.w	8012cb0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

08010a30 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8010a30:	f002 b942 	b.w	8012cb8 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

08010a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010a34:	b508      	push	{r3, lr}
 8010a36:	f000 fd5d 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a3a:	4b06      	ldr	r3, [pc, #24]	@ (8010a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010a3c:	4906      	ldr	r1, [pc, #24]	@ (8010a58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	60c8      	str	r0, [r1, #12]
 8010a42:	b10a      	cbz	r2, 8010a48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8010a44:	4803      	ldr	r0, [pc, #12]	@ (8010a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010a46:	bd08      	pop	{r3, pc}
 8010a48:	4a04      	ldr	r2, [pc, #16]	@ (8010a5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 8010a4a:	4802      	ldr	r0, [pc, #8]	@ (8010a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010a4c:	6812      	ldr	r2, [r2, #0]
 8010a4e:	601a      	str	r2, [r3, #0]
 8010a50:	bd08      	pop	{r3, pc}
 8010a52:	bf00      	nop
 8010a54:	240005ec 	.word	0x240005ec
 8010a58:	24000574 	.word	0x24000574
 8010a5c:	24000e10 	.word	0x24000e10

08010a60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010a60:	4b04      	ldr	r3, [pc, #16]	@ (8010a74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	b10a      	cbz	r2, 8010a6a <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 8010a66:	4803      	ldr	r0, [pc, #12]	@ (8010a74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010a68:	4770      	bx	lr
 8010a6a:	4a03      	ldr	r2, [pc, #12]	@ (8010a78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 8010a6c:	4801      	ldr	r0, [pc, #4]	@ (8010a74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010a6e:	6812      	ldr	r2, [r2, #0]
 8010a70:	601a      	str	r2, [r3, #0]
 8010a72:	4770      	bx	lr
 8010a74:	24000634 	.word	0x24000634
 8010a78:	24000e10 	.word	0x24000e10

08010a7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8010a7c:	4b16      	ldr	r3, [pc, #88]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	b510      	push	{r4, lr}
 8010a82:	b132      	cbz	r2, 8010a92 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 8010a84:	685c      	ldr	r4, [r3, #4]
 8010a86:	68a3      	ldr	r3, [r4, #8]
 8010a88:	b153      	cbz	r3, 8010aa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 8010a8a:	68e3      	ldr	r3, [r4, #12]
 8010a8c:	b1a3      	cbz	r3, 8010ab8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8010a8e:	4812      	ldr	r0, [pc, #72]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a90:	bd10      	pop	{r4, pc}
 8010a92:	4a12      	ldr	r2, [pc, #72]	@ (8010adc <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010a94:	685c      	ldr	r4, [r3, #4]
 8010a96:	6812      	ldr	r2, [r2, #0]
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	68a3      	ldr	r3, [r4, #8]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d1f4      	bne.n	8010a8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 8010aa0:	f000 fd28 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8010ae0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 8010aa6:	490f      	ldr	r1, [pc, #60]	@ (8010ae4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	60c8      	str	r0, [r1, #12]
 8010aac:	b17a      	cbz	r2, 8010ace <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	60a3      	str	r3, [r4, #8]
 8010ab2:	68e3      	ldr	r3, [r4, #12]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1ea      	bne.n	8010a8e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 8010ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8010ae8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	b11a      	cbz	r2, 8010ac6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	4805      	ldr	r0, [pc, #20]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010ac2:	60e3      	str	r3, [r4, #12]
 8010ac4:	bd10      	pop	{r4, pc}
 8010ac6:	4a05      	ldr	r2, [pc, #20]	@ (8010adc <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010ac8:	6812      	ldr	r2, [r2, #0]
 8010aca:	601a      	str	r2, [r3, #0]
 8010acc:	e7f7      	b.n	8010abe <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 8010ace:	4a03      	ldr	r2, [pc, #12]	@ (8010adc <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010ad0:	6812      	ldr	r2, [r2, #0]
 8010ad2:	601a      	str	r2, [r3, #0]
 8010ad4:	e7eb      	b.n	8010aae <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 8010ad6:	bf00      	nop
 8010ad8:	24000650 	.word	0x24000650
 8010adc:	24000e10 	.word	0x24000e10
 8010ae0:	240005ec 	.word	0x240005ec
 8010ae4:	24000574 	.word	0x24000574
 8010ae8:	24000634 	.word	0x24000634

08010aec <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8010aec:	f002 b8e6 	b.w	8012cbc <autoware_vehicle_msgs__msg__ControlModeReport__init>

08010af0 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8010af0:	f002 b8f6 	b.w	8012ce0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

08010af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010af4:	b508      	push	{r3, lr}
 8010af6:	f000 fcfd 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010afa:	4b06      	ldr	r3, [pc, #24]	@ (8010b14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010afc:	4906      	ldr	r1, [pc, #24]	@ (8010b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	60c8      	str	r0, [r1, #12]
 8010b02:	b10a      	cbz	r2, 8010b08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 8010b04:	4803      	ldr	r0, [pc, #12]	@ (8010b14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010b06:	bd08      	pop	{r3, pc}
 8010b08:	4a04      	ldr	r2, [pc, #16]	@ (8010b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 8010b0a:	4802      	ldr	r0, [pc, #8]	@ (8010b14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010b0c:	6812      	ldr	r2, [r2, #0]
 8010b0e:	601a      	str	r2, [r3, #0]
 8010b10:	bd08      	pop	{r3, pc}
 8010b12:	bf00      	nop
 8010b14:	240006d4 	.word	0x240006d4
 8010b18:	2400065c 	.word	0x2400065c
 8010b1c:	24000e10 	.word	0x24000e10

08010b20 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8010b20:	f002 b8e2 	b.w	8012ce8 <autoware_vehicle_msgs__msg__GearCommand__init>

08010b24 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 8010b24:	f002 b8f2 	b.w	8012d0c <autoware_vehicle_msgs__msg__GearCommand__fini>

08010b28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010b28:	b508      	push	{r3, lr}
 8010b2a:	f000 fce3 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b2e:	4b06      	ldr	r3, [pc, #24]	@ (8010b48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010b30:	4906      	ldr	r1, [pc, #24]	@ (8010b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 8010b32:	681a      	ldr	r2, [r3, #0]
 8010b34:	60c8      	str	r0, [r1, #12]
 8010b36:	b10a      	cbz	r2, 8010b3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 8010b38:	4803      	ldr	r0, [pc, #12]	@ (8010b48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010b3a:	bd08      	pop	{r3, pc}
 8010b3c:	4a04      	ldr	r2, [pc, #16]	@ (8010b50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 8010b3e:	4802      	ldr	r0, [pc, #8]	@ (8010b48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010b40:	6812      	ldr	r2, [r2, #0]
 8010b42:	601a      	str	r2, [r3, #0]
 8010b44:	bd08      	pop	{r3, pc}
 8010b46:	bf00      	nop
 8010b48:	24000758 	.word	0x24000758
 8010b4c:	240006e0 	.word	0x240006e0
 8010b50:	24000e10 	.word	0x24000e10

08010b54 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8010b54:	f002 b8de 	b.w	8012d14 <autoware_vehicle_msgs__msg__GearReport__init>

08010b58 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 8010b58:	f002 b8ee 	b.w	8012d38 <autoware_vehicle_msgs__msg__GearReport__fini>

08010b5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010b5c:	b508      	push	{r3, lr}
 8010b5e:	f000 fcc9 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b62:	4b06      	ldr	r3, [pc, #24]	@ (8010b7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010b64:	4906      	ldr	r1, [pc, #24]	@ (8010b80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	60c8      	str	r0, [r1, #12]
 8010b6a:	b10a      	cbz	r2, 8010b70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 8010b6c:	4803      	ldr	r0, [pc, #12]	@ (8010b7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010b6e:	bd08      	pop	{r3, pc}
 8010b70:	4a04      	ldr	r2, [pc, #16]	@ (8010b84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 8010b72:	4802      	ldr	r0, [pc, #8]	@ (8010b7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010b74:	6812      	ldr	r2, [r2, #0]
 8010b76:	601a      	str	r2, [r3, #0]
 8010b78:	bd08      	pop	{r3, pc}
 8010b7a:	bf00      	nop
 8010b7c:	240007dc 	.word	0x240007dc
 8010b80:	24000764 	.word	0x24000764
 8010b84:	24000e10 	.word	0x24000e10

08010b88 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8010b88:	f002 b8da 	b.w	8012d40 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

08010b8c <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8010b8c:	f002 b8ea 	b.w	8012d64 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

08010b90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010b90:	b508      	push	{r3, lr}
 8010b92:	f000 fcaf 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b96:	4b06      	ldr	r3, [pc, #24]	@ (8010bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b98:	4906      	ldr	r1, [pc, #24]	@ (8010bb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	60c8      	str	r0, [r1, #12]
 8010b9e:	b10a      	cbz	r2, 8010ba4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8010ba0:	4803      	ldr	r0, [pc, #12]	@ (8010bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010ba2:	bd08      	pop	{r3, pc}
 8010ba4:	4a04      	ldr	r2, [pc, #16]	@ (8010bb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 8010ba6:	4802      	ldr	r0, [pc, #8]	@ (8010bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010ba8:	6812      	ldr	r2, [r2, #0]
 8010baa:	601a      	str	r2, [r3, #0]
 8010bac:	bd08      	pop	{r3, pc}
 8010bae:	bf00      	nop
 8010bb0:	24000860 	.word	0x24000860
 8010bb4:	240007e8 	.word	0x240007e8
 8010bb8:	24000e10 	.word	0x24000e10

08010bbc <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8010bbc:	f002 b8d6 	b.w	8012d6c <autoware_vehicle_msgs__msg__HazardLightsReport__init>

08010bc0 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8010bc0:	f002 b8e6 	b.w	8012d90 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

08010bc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010bc4:	b508      	push	{r3, lr}
 8010bc6:	f000 fc95 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010bca:	4b06      	ldr	r3, [pc, #24]	@ (8010be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010bcc:	4906      	ldr	r1, [pc, #24]	@ (8010be8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	60c8      	str	r0, [r1, #12]
 8010bd2:	b10a      	cbz	r2, 8010bd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 8010bd4:	4803      	ldr	r0, [pc, #12]	@ (8010be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010bd6:	bd08      	pop	{r3, pc}
 8010bd8:	4a04      	ldr	r2, [pc, #16]	@ (8010bec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8010bda:	4802      	ldr	r0, [pc, #8]	@ (8010be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010bdc:	6812      	ldr	r2, [r2, #0]
 8010bde:	601a      	str	r2, [r3, #0]
 8010be0:	bd08      	pop	{r3, pc}
 8010be2:	bf00      	nop
 8010be4:	240008e4 	.word	0x240008e4
 8010be8:	2400086c 	.word	0x2400086c
 8010bec:	24000e10 	.word	0x24000e10

08010bf0 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8010bf0:	f002 b8d2 	b.w	8012d98 <autoware_vehicle_msgs__msg__SteeringReport__init>

08010bf4 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 8010bf4:	f002 b8e2 	b.w	8012dbc <autoware_vehicle_msgs__msg__SteeringReport__fini>

08010bf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8010bf8:	b508      	push	{r3, lr}
 8010bfa:	f000 fc7b 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010bfe:	4b06      	ldr	r3, [pc, #24]	@ (8010c18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8010c00:	4906      	ldr	r1, [pc, #24]	@ (8010c1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	60c8      	str	r0, [r1, #12]
 8010c06:	b10a      	cbz	r2, 8010c0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 8010c08:	4803      	ldr	r0, [pc, #12]	@ (8010c18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8010c0a:	bd08      	pop	{r3, pc}
 8010c0c:	4a04      	ldr	r2, [pc, #16]	@ (8010c20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 8010c0e:	4802      	ldr	r0, [pc, #8]	@ (8010c18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8010c10:	6812      	ldr	r2, [r2, #0]
 8010c12:	601a      	str	r2, [r3, #0]
 8010c14:	bd08      	pop	{r3, pc}
 8010c16:	bf00      	nop
 8010c18:	24000968 	.word	0x24000968
 8010c1c:	240008f0 	.word	0x240008f0
 8010c20:	24000e10 	.word	0x24000e10

08010c24 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 8010c24:	f002 b8ce 	b.w	8012dc4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

08010c28 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 8010c28:	f002 b8de 	b.w	8012de8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08010c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010c2c:	b508      	push	{r3, lr}
 8010c2e:	f000 fc61 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010c32:	4b06      	ldr	r3, [pc, #24]	@ (8010c4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010c34:	4906      	ldr	r1, [pc, #24]	@ (8010c50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	60c8      	str	r0, [r1, #12]
 8010c3a:	b10a      	cbz	r2, 8010c40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8010c3c:	4803      	ldr	r0, [pc, #12]	@ (8010c4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010c3e:	bd08      	pop	{r3, pc}
 8010c40:	4a04      	ldr	r2, [pc, #16]	@ (8010c54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8010c42:	4802      	ldr	r0, [pc, #8]	@ (8010c4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010c44:	6812      	ldr	r2, [r2, #0]
 8010c46:	601a      	str	r2, [r3, #0]
 8010c48:	bd08      	pop	{r3, pc}
 8010c4a:	bf00      	nop
 8010c4c:	240009ec 	.word	0x240009ec
 8010c50:	24000974 	.word	0x24000974
 8010c54:	24000e10 	.word	0x24000e10

08010c58 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 8010c58:	f002 b8ca 	b.w	8012df0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

08010c5c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8010c5c:	f002 b8da 	b.w	8012e14 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08010c60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010c60:	b508      	push	{r3, lr}
 8010c62:	f000 fc47 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010c66:	4b06      	ldr	r3, [pc, #24]	@ (8010c80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c68:	4906      	ldr	r1, [pc, #24]	@ (8010c84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 8010c6a:	681a      	ldr	r2, [r3, #0]
 8010c6c:	60c8      	str	r0, [r1, #12]
 8010c6e:	b10a      	cbz	r2, 8010c74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8010c70:	4803      	ldr	r0, [pc, #12]	@ (8010c80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c72:	bd08      	pop	{r3, pc}
 8010c74:	4a04      	ldr	r2, [pc, #16]	@ (8010c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 8010c76:	4802      	ldr	r0, [pc, #8]	@ (8010c80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c78:	6812      	ldr	r2, [r2, #0]
 8010c7a:	601a      	str	r2, [r3, #0]
 8010c7c:	bd08      	pop	{r3, pc}
 8010c7e:	bf00      	nop
 8010c80:	24000a70 	.word	0x24000a70
 8010c84:	240009f8 	.word	0x240009f8
 8010c88:	24000e10 	.word	0x24000e10

08010c8c <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8010c8c:	f002 b8c6 	b.w	8012e1c <autoware_vehicle_msgs__msg__VelocityReport__init>

08010c90 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8010c90:	f002 b8d6 	b.w	8012e40 <autoware_vehicle_msgs__msg__VelocityReport__fini>

08010c94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8010c94:	b508      	push	{r3, lr}
 8010c96:	f001 fc57 	bl	8012548 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010c9a:	4b06      	ldr	r3, [pc, #24]	@ (8010cb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c9c:	4906      	ldr	r1, [pc, #24]	@ (8010cb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	60c8      	str	r0, [r1, #12]
 8010ca2:	b10a      	cbz	r2, 8010ca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 8010ca4:	4803      	ldr	r0, [pc, #12]	@ (8010cb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010ca6:	bd08      	pop	{r3, pc}
 8010ca8:	4a04      	ldr	r2, [pc, #16]	@ (8010cbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 8010caa:	4802      	ldr	r0, [pc, #8]	@ (8010cb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010cac:	6812      	ldr	r2, [r2, #0]
 8010cae:	601a      	str	r2, [r3, #0]
 8010cb0:	bd08      	pop	{r3, pc}
 8010cb2:	bf00      	nop
 8010cb4:	24000b6c 	.word	0x24000b6c
 8010cb8:	24000a7c 	.word	0x24000a7c
 8010cbc:	24000e10 	.word	0x24000e10

08010cc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010cc0:	4800      	ldr	r0, [pc, #0]	@ (8010cc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8010cc2:	4770      	bx	lr
 8010cc4:	24000b94 	.word	0x24000b94

08010cc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010cc8:	4800      	ldr	r0, [pc, #0]	@ (8010ccc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8010cca:	4770      	bx	lr
 8010ccc:	24000ba0 	.word	0x24000ba0

08010cd0 <_ControlModeCommand_Response__max_serialized_size>:
 8010cd0:	2101      	movs	r1, #1
 8010cd2:	2000      	movs	r0, #0
 8010cd4:	b508      	push	{r3, lr}
 8010cd6:	f001 fb41 	bl	801235c <ucdr_alignment>
 8010cda:	3001      	adds	r0, #1
 8010cdc:	bd08      	pop	{r3, pc}
 8010cde:	bf00      	nop

08010ce0 <_ControlModeCommand_Response__cdr_deserialize>:
 8010ce0:	b109      	cbz	r1, 8010ce6 <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8010ce2:	f000 bc93 	b.w	801160c <ucdr_deserialize_bool>
 8010ce6:	4608      	mov	r0, r1
 8010ce8:	4770      	bx	lr
 8010cea:	bf00      	nop

08010cec <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010cec:	b538      	push	{r3, r4, r5, lr}
 8010cee:	b158      	cbz	r0, 8010d08 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8010cf0:	460d      	mov	r5, r1
 8010cf2:	f000 fc0d 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010cf6:	2101      	movs	r1, #1
 8010cf8:	182c      	adds	r4, r5, r0
 8010cfa:	f1c5 0501 	rsb	r5, r5, #1
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f001 fb2c 	bl	801235c <ucdr_alignment>
 8010d04:	4428      	add	r0, r5
 8010d06:	4420      	add	r0, r4
 8010d08:	bd38      	pop	{r3, r4, r5, pc}
 8010d0a:	bf00      	nop

08010d0c <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010d0c:	b138      	cbz	r0, 8010d1e <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8010d0e:	b508      	push	{r3, lr}
 8010d10:	460b      	mov	r3, r1
 8010d12:	2101      	movs	r1, #1
 8010d14:	4618      	mov	r0, r3
 8010d16:	f001 fb21 	bl	801235c <ucdr_alignment>
 8010d1a:	3001      	adds	r0, #1
 8010d1c:	bd08      	pop	{r3, pc}
 8010d1e:	4770      	bx	lr

08010d20 <_ControlModeCommand_Request__cdr_deserialize>:
 8010d20:	b538      	push	{r3, r4, r5, lr}
 8010d22:	460c      	mov	r4, r1
 8010d24:	b179      	cbz	r1, 8010d46 <_ControlModeCommand_Request__cdr_deserialize+0x26>
 8010d26:	4605      	mov	r5, r0
 8010d28:	f000 fc56 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	4621      	mov	r1, r4
 8010d30:	4628      	mov	r0, r5
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	4798      	blx	r3
 8010d38:	f104 0108 	add.w	r1, r4, #8
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d42:	f000 bc91 	b.w	8011668 <ucdr_deserialize_uint8_t>
 8010d46:	4608      	mov	r0, r1
 8010d48:	bd38      	pop	{r3, r4, r5, pc}
 8010d4a:	bf00      	nop

08010d4c <_ControlModeCommand_Request__cdr_serialize>:
 8010d4c:	b180      	cbz	r0, 8010d70 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8010d4e:	b538      	push	{r3, r4, r5, lr}
 8010d50:	4604      	mov	r4, r0
 8010d52:	460d      	mov	r5, r1
 8010d54:	f000 fc40 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	4629      	mov	r1, r5
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	4798      	blx	r3
 8010d64:	7a21      	ldrb	r1, [r4, #8]
 8010d66:	4628      	mov	r0, r5
 8010d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d6c:	f000 bc66 	b.w	801163c <ucdr_serialize_uint8_t>
 8010d70:	4770      	bx	lr
 8010d72:	bf00      	nop

08010d74 <_ControlModeCommand_Response__cdr_serialize>:
 8010d74:	460a      	mov	r2, r1
 8010d76:	b118      	cbz	r0, 8010d80 <_ControlModeCommand_Response__cdr_serialize+0xc>
 8010d78:	7801      	ldrb	r1, [r0, #0]
 8010d7a:	4610      	mov	r0, r2
 8010d7c:	f000 bc30 	b.w	80115e0 <ucdr_serialize_bool>
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop

08010d84 <_ControlModeCommand_Response__get_serialized_size>:
 8010d84:	b130      	cbz	r0, 8010d94 <_ControlModeCommand_Response__get_serialized_size+0x10>
 8010d86:	2101      	movs	r1, #1
 8010d88:	2000      	movs	r0, #0
 8010d8a:	b508      	push	{r3, lr}
 8010d8c:	f001 fae6 	bl	801235c <ucdr_alignment>
 8010d90:	3001      	adds	r0, #1
 8010d92:	bd08      	pop	{r3, pc}
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop

08010d98 <_ControlModeCommand_Request__get_serialized_size>:
 8010d98:	b150      	cbz	r0, 8010db0 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8010d9a:	2100      	movs	r1, #0
 8010d9c:	b510      	push	{r4, lr}
 8010d9e:	f000 fbb7 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010da2:	4604      	mov	r4, r0
 8010da4:	2101      	movs	r1, #1
 8010da6:	f001 fad9 	bl	801235c <ucdr_alignment>
 8010daa:	4420      	add	r0, r4
 8010dac:	3001      	adds	r0, #1
 8010dae:	bd10      	pop	{r4, pc}
 8010db0:	4770      	bx	lr
 8010db2:	bf00      	nop

08010db4 <_ControlModeCommand_Request__max_serialized_size>:
 8010db4:	b510      	push	{r4, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	2401      	movs	r4, #1
 8010dba:	2100      	movs	r1, #0
 8010dbc:	f10d 0007 	add.w	r0, sp, #7
 8010dc0:	f88d 4007 	strb.w	r4, [sp, #7]
 8010dc4:	f000 fbf4 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010dc8:	4621      	mov	r1, r4
 8010dca:	4604      	mov	r4, r0
 8010dcc:	f001 fac6 	bl	801235c <ucdr_alignment>
 8010dd0:	4420      	add	r0, r4
 8010dd2:	3001      	adds	r0, #1
 8010dd4:	b002      	add	sp, #8
 8010dd6:	bd10      	pop	{r4, pc}

08010dd8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8010dd8:	4800      	ldr	r0, [pc, #0]	@ (8010ddc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8010dda:	4770      	bx	lr
 8010ddc:	24000b88 	.word	0x24000b88

08010de0 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	b158      	cbz	r0, 8010dfc <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 8010de4:	460d      	mov	r5, r1
 8010de6:	f000 fb93 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010dea:	2101      	movs	r1, #1
 8010dec:	182c      	adds	r4, r5, r0
 8010dee:	f1c5 0501 	rsb	r5, r5, #1
 8010df2:	4620      	mov	r0, r4
 8010df4:	f001 fab2 	bl	801235c <ucdr_alignment>
 8010df8:	4428      	add	r0, r5
 8010dfa:	4420      	add	r0, r4
 8010dfc:	bd38      	pop	{r3, r4, r5, pc}
 8010dfe:	bf00      	nop

08010e00 <_ControlModeReport__cdr_deserialize>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	460c      	mov	r4, r1
 8010e04:	b179      	cbz	r1, 8010e26 <_ControlModeReport__cdr_deserialize+0x26>
 8010e06:	4605      	mov	r5, r0
 8010e08:	f000 fbe6 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	4621      	mov	r1, r4
 8010e10:	4628      	mov	r0, r5
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	4798      	blx	r3
 8010e18:	f104 0108 	add.w	r1, r4, #8
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e22:	f000 bc21 	b.w	8011668 <ucdr_deserialize_uint8_t>
 8010e26:	4608      	mov	r0, r1
 8010e28:	bd38      	pop	{r3, r4, r5, pc}
 8010e2a:	bf00      	nop

08010e2c <_ControlModeReport__cdr_serialize>:
 8010e2c:	b180      	cbz	r0, 8010e50 <_ControlModeReport__cdr_serialize+0x24>
 8010e2e:	b538      	push	{r3, r4, r5, lr}
 8010e30:	4604      	mov	r4, r0
 8010e32:	460d      	mov	r5, r1
 8010e34:	f000 fbd0 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	4629      	mov	r1, r5
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	689b      	ldr	r3, [r3, #8]
 8010e42:	4798      	blx	r3
 8010e44:	7a21      	ldrb	r1, [r4, #8]
 8010e46:	4628      	mov	r0, r5
 8010e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e4c:	f000 bbf6 	b.w	801163c <ucdr_serialize_uint8_t>
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop

08010e54 <_ControlModeReport__get_serialized_size>:
 8010e54:	b150      	cbz	r0, 8010e6c <_ControlModeReport__get_serialized_size+0x18>
 8010e56:	2100      	movs	r1, #0
 8010e58:	b510      	push	{r4, lr}
 8010e5a:	f000 fb59 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e5e:	4604      	mov	r4, r0
 8010e60:	2101      	movs	r1, #1
 8010e62:	f001 fa7b 	bl	801235c <ucdr_alignment>
 8010e66:	4420      	add	r0, r4
 8010e68:	3001      	adds	r0, #1
 8010e6a:	bd10      	pop	{r4, pc}
 8010e6c:	4770      	bx	lr
 8010e6e:	bf00      	nop

08010e70 <_ControlModeReport__max_serialized_size>:
 8010e70:	b510      	push	{r4, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	2401      	movs	r4, #1
 8010e76:	2100      	movs	r1, #0
 8010e78:	f10d 0007 	add.w	r0, sp, #7
 8010e7c:	f88d 4007 	strb.w	r4, [sp, #7]
 8010e80:	f000 fb96 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010e84:	4621      	mov	r1, r4
 8010e86:	4604      	mov	r4, r0
 8010e88:	f001 fa68 	bl	801235c <ucdr_alignment>
 8010e8c:	4420      	add	r0, r4
 8010e8e:	3001      	adds	r0, #1
 8010e90:	b002      	add	sp, #8
 8010e92:	bd10      	pop	{r4, pc}

08010e94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010e94:	4800      	ldr	r0, [pc, #0]	@ (8010e98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 8010e96:	4770      	bx	lr
 8010e98:	24000be4 	.word	0x24000be4

08010e9c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 8010e9c:	b538      	push	{r3, r4, r5, lr}
 8010e9e:	b158      	cbz	r0, 8010eb8 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 8010ea0:	460d      	mov	r5, r1
 8010ea2:	f000 fb35 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	182c      	adds	r4, r5, r0
 8010eaa:	f1c5 0501 	rsb	r5, r5, #1
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f001 fa54 	bl	801235c <ucdr_alignment>
 8010eb4:	4428      	add	r0, r5
 8010eb6:	4420      	add	r0, r4
 8010eb8:	bd38      	pop	{r3, r4, r5, pc}
 8010eba:	bf00      	nop

08010ebc <_GearCommand__cdr_deserialize>:
 8010ebc:	b538      	push	{r3, r4, r5, lr}
 8010ebe:	460c      	mov	r4, r1
 8010ec0:	b179      	cbz	r1, 8010ee2 <_GearCommand__cdr_deserialize+0x26>
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	f000 fb88 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	4621      	mov	r1, r4
 8010ecc:	4628      	mov	r0, r5
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	68db      	ldr	r3, [r3, #12]
 8010ed2:	4798      	blx	r3
 8010ed4:	f104 0108 	add.w	r1, r4, #8
 8010ed8:	4628      	mov	r0, r5
 8010eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ede:	f000 bbc3 	b.w	8011668 <ucdr_deserialize_uint8_t>
 8010ee2:	4608      	mov	r0, r1
 8010ee4:	bd38      	pop	{r3, r4, r5, pc}
 8010ee6:	bf00      	nop

08010ee8 <_GearCommand__cdr_serialize>:
 8010ee8:	b180      	cbz	r0, 8010f0c <_GearCommand__cdr_serialize+0x24>
 8010eea:	b538      	push	{r3, r4, r5, lr}
 8010eec:	4604      	mov	r4, r0
 8010eee:	460d      	mov	r5, r1
 8010ef0:	f000 fb72 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	4620      	mov	r0, r4
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	689b      	ldr	r3, [r3, #8]
 8010efe:	4798      	blx	r3
 8010f00:	7a21      	ldrb	r1, [r4, #8]
 8010f02:	4628      	mov	r0, r5
 8010f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f08:	f000 bb98 	b.w	801163c <ucdr_serialize_uint8_t>
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop

08010f10 <_GearCommand__get_serialized_size>:
 8010f10:	b150      	cbz	r0, 8010f28 <_GearCommand__get_serialized_size+0x18>
 8010f12:	2100      	movs	r1, #0
 8010f14:	b510      	push	{r4, lr}
 8010f16:	f000 fafb 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	2101      	movs	r1, #1
 8010f1e:	f001 fa1d 	bl	801235c <ucdr_alignment>
 8010f22:	4420      	add	r0, r4
 8010f24:	3001      	adds	r0, #1
 8010f26:	bd10      	pop	{r4, pc}
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop

08010f2c <_GearCommand__max_serialized_size>:
 8010f2c:	b510      	push	{r4, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	2401      	movs	r4, #1
 8010f32:	2100      	movs	r1, #0
 8010f34:	f10d 0007 	add.w	r0, sp, #7
 8010f38:	f88d 4007 	strb.w	r4, [sp, #7]
 8010f3c:	f000 fb38 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010f40:	4621      	mov	r1, r4
 8010f42:	4604      	mov	r4, r0
 8010f44:	f001 fa0a 	bl	801235c <ucdr_alignment>
 8010f48:	4420      	add	r0, r4
 8010f4a:	3001      	adds	r0, #1
 8010f4c:	b002      	add	sp, #8
 8010f4e:	bd10      	pop	{r4, pc}

08010f50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010f50:	4800      	ldr	r0, [pc, #0]	@ (8010f54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 8010f52:	4770      	bx	lr
 8010f54:	24000c0c 	.word	0x24000c0c

08010f58 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 8010f58:	b538      	push	{r3, r4, r5, lr}
 8010f5a:	b158      	cbz	r0, 8010f74 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 8010f5c:	460d      	mov	r5, r1
 8010f5e:	f000 fad7 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f62:	2101      	movs	r1, #1
 8010f64:	182c      	adds	r4, r5, r0
 8010f66:	f1c5 0501 	rsb	r5, r5, #1
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	f001 f9f6 	bl	801235c <ucdr_alignment>
 8010f70:	4428      	add	r0, r5
 8010f72:	4420      	add	r0, r4
 8010f74:	bd38      	pop	{r3, r4, r5, pc}
 8010f76:	bf00      	nop

08010f78 <_GearReport__cdr_deserialize>:
 8010f78:	b538      	push	{r3, r4, r5, lr}
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	b179      	cbz	r1, 8010f9e <_GearReport__cdr_deserialize+0x26>
 8010f7e:	4605      	mov	r5, r0
 8010f80:	f000 fb2a 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f84:	4603      	mov	r3, r0
 8010f86:	4621      	mov	r1, r4
 8010f88:	4628      	mov	r0, r5
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	68db      	ldr	r3, [r3, #12]
 8010f8e:	4798      	blx	r3
 8010f90:	f104 0108 	add.w	r1, r4, #8
 8010f94:	4628      	mov	r0, r5
 8010f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f9a:	f000 bb65 	b.w	8011668 <ucdr_deserialize_uint8_t>
 8010f9e:	4608      	mov	r0, r1
 8010fa0:	bd38      	pop	{r3, r4, r5, pc}
 8010fa2:	bf00      	nop

08010fa4 <_GearReport__cdr_serialize>:
 8010fa4:	b180      	cbz	r0, 8010fc8 <_GearReport__cdr_serialize+0x24>
 8010fa6:	b538      	push	{r3, r4, r5, lr}
 8010fa8:	4604      	mov	r4, r0
 8010faa:	460d      	mov	r5, r1
 8010fac:	f000 fb14 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	689b      	ldr	r3, [r3, #8]
 8010fba:	4798      	blx	r3
 8010fbc:	7a21      	ldrb	r1, [r4, #8]
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fc4:	f000 bb3a 	b.w	801163c <ucdr_serialize_uint8_t>
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop

08010fcc <_GearReport__get_serialized_size>:
 8010fcc:	b150      	cbz	r0, 8010fe4 <_GearReport__get_serialized_size+0x18>
 8010fce:	2100      	movs	r1, #0
 8010fd0:	b510      	push	{r4, lr}
 8010fd2:	f000 fa9d 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	2101      	movs	r1, #1
 8010fda:	f001 f9bf 	bl	801235c <ucdr_alignment>
 8010fde:	4420      	add	r0, r4
 8010fe0:	3001      	adds	r0, #1
 8010fe2:	bd10      	pop	{r4, pc}
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop

08010fe8 <_GearReport__max_serialized_size>:
 8010fe8:	b510      	push	{r4, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	2401      	movs	r4, #1
 8010fee:	2100      	movs	r1, #0
 8010ff0:	f10d 0007 	add.w	r0, sp, #7
 8010ff4:	f88d 4007 	strb.w	r4, [sp, #7]
 8010ff8:	f000 fada 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010ffc:	4621      	mov	r1, r4
 8010ffe:	4604      	mov	r4, r0
 8011000:	f001 f9ac 	bl	801235c <ucdr_alignment>
 8011004:	4420      	add	r0, r4
 8011006:	3001      	adds	r0, #1
 8011008:	b002      	add	sp, #8
 801100a:	bd10      	pop	{r4, pc}

0801100c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 801100c:	4800      	ldr	r0, [pc, #0]	@ (8011010 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 801100e:	4770      	bx	lr
 8011010:	24000c34 	.word	0x24000c34

08011014 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011014:	b538      	push	{r3, r4, r5, lr}
 8011016:	b158      	cbz	r0, 8011030 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8011018:	460d      	mov	r5, r1
 801101a:	f000 fa79 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 801101e:	2101      	movs	r1, #1
 8011020:	182c      	adds	r4, r5, r0
 8011022:	f1c5 0501 	rsb	r5, r5, #1
 8011026:	4620      	mov	r0, r4
 8011028:	f001 f998 	bl	801235c <ucdr_alignment>
 801102c:	4428      	add	r0, r5
 801102e:	4420      	add	r0, r4
 8011030:	bd38      	pop	{r3, r4, r5, pc}
 8011032:	bf00      	nop

08011034 <_HazardLightsCommand__cdr_deserialize>:
 8011034:	b538      	push	{r3, r4, r5, lr}
 8011036:	460c      	mov	r4, r1
 8011038:	b179      	cbz	r1, 801105a <_HazardLightsCommand__cdr_deserialize+0x26>
 801103a:	4605      	mov	r5, r0
 801103c:	f000 facc 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011040:	4603      	mov	r3, r0
 8011042:	4621      	mov	r1, r4
 8011044:	4628      	mov	r0, r5
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	4798      	blx	r3
 801104c:	f104 0108 	add.w	r1, r4, #8
 8011050:	4628      	mov	r0, r5
 8011052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011056:	f000 bb07 	b.w	8011668 <ucdr_deserialize_uint8_t>
 801105a:	4608      	mov	r0, r1
 801105c:	bd38      	pop	{r3, r4, r5, pc}
 801105e:	bf00      	nop

08011060 <_HazardLightsCommand__cdr_serialize>:
 8011060:	b180      	cbz	r0, 8011084 <_HazardLightsCommand__cdr_serialize+0x24>
 8011062:	b538      	push	{r3, r4, r5, lr}
 8011064:	4604      	mov	r4, r0
 8011066:	460d      	mov	r5, r1
 8011068:	f000 fab6 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801106c:	4603      	mov	r3, r0
 801106e:	4629      	mov	r1, r5
 8011070:	4620      	mov	r0, r4
 8011072:	685b      	ldr	r3, [r3, #4]
 8011074:	689b      	ldr	r3, [r3, #8]
 8011076:	4798      	blx	r3
 8011078:	7a21      	ldrb	r1, [r4, #8]
 801107a:	4628      	mov	r0, r5
 801107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011080:	f000 badc 	b.w	801163c <ucdr_serialize_uint8_t>
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop

08011088 <_HazardLightsCommand__get_serialized_size>:
 8011088:	b150      	cbz	r0, 80110a0 <_HazardLightsCommand__get_serialized_size+0x18>
 801108a:	2100      	movs	r1, #0
 801108c:	b510      	push	{r4, lr}
 801108e:	f000 fa3f 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8011092:	4604      	mov	r4, r0
 8011094:	2101      	movs	r1, #1
 8011096:	f001 f961 	bl	801235c <ucdr_alignment>
 801109a:	4420      	add	r0, r4
 801109c:	3001      	adds	r0, #1
 801109e:	bd10      	pop	{r4, pc}
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop

080110a4 <_HazardLightsCommand__max_serialized_size>:
 80110a4:	b510      	push	{r4, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	2401      	movs	r4, #1
 80110aa:	2100      	movs	r1, #0
 80110ac:	f10d 0007 	add.w	r0, sp, #7
 80110b0:	f88d 4007 	strb.w	r4, [sp, #7]
 80110b4:	f000 fa7c 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 80110b8:	4621      	mov	r1, r4
 80110ba:	4604      	mov	r4, r0
 80110bc:	f001 f94e 	bl	801235c <ucdr_alignment>
 80110c0:	4420      	add	r0, r4
 80110c2:	3001      	adds	r0, #1
 80110c4:	b002      	add	sp, #8
 80110c6:	bd10      	pop	{r4, pc}

080110c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80110c8:	4800      	ldr	r0, [pc, #0]	@ (80110cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 80110ca:	4770      	bx	lr
 80110cc:	24000c5c 	.word	0x24000c5c

080110d0 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	b158      	cbz	r0, 80110ec <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 80110d4:	460d      	mov	r5, r1
 80110d6:	f000 fa1b 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 80110da:	2101      	movs	r1, #1
 80110dc:	182c      	adds	r4, r5, r0
 80110de:	f1c5 0501 	rsb	r5, r5, #1
 80110e2:	4620      	mov	r0, r4
 80110e4:	f001 f93a 	bl	801235c <ucdr_alignment>
 80110e8:	4428      	add	r0, r5
 80110ea:	4420      	add	r0, r4
 80110ec:	bd38      	pop	{r3, r4, r5, pc}
 80110ee:	bf00      	nop

080110f0 <_HazardLightsReport__cdr_deserialize>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	460c      	mov	r4, r1
 80110f4:	b179      	cbz	r1, 8011116 <_HazardLightsReport__cdr_deserialize+0x26>
 80110f6:	4605      	mov	r5, r0
 80110f8:	f000 fa6e 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110fc:	4603      	mov	r3, r0
 80110fe:	4621      	mov	r1, r4
 8011100:	4628      	mov	r0, r5
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	4798      	blx	r3
 8011108:	f104 0108 	add.w	r1, r4, #8
 801110c:	4628      	mov	r0, r5
 801110e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011112:	f000 baa9 	b.w	8011668 <ucdr_deserialize_uint8_t>
 8011116:	4608      	mov	r0, r1
 8011118:	bd38      	pop	{r3, r4, r5, pc}
 801111a:	bf00      	nop

0801111c <_HazardLightsReport__cdr_serialize>:
 801111c:	b180      	cbz	r0, 8011140 <_HazardLightsReport__cdr_serialize+0x24>
 801111e:	b538      	push	{r3, r4, r5, lr}
 8011120:	4604      	mov	r4, r0
 8011122:	460d      	mov	r5, r1
 8011124:	f000 fa58 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011128:	4603      	mov	r3, r0
 801112a:	4629      	mov	r1, r5
 801112c:	4620      	mov	r0, r4
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	689b      	ldr	r3, [r3, #8]
 8011132:	4798      	blx	r3
 8011134:	7a21      	ldrb	r1, [r4, #8]
 8011136:	4628      	mov	r0, r5
 8011138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801113c:	f000 ba7e 	b.w	801163c <ucdr_serialize_uint8_t>
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop

08011144 <_HazardLightsReport__get_serialized_size>:
 8011144:	b150      	cbz	r0, 801115c <_HazardLightsReport__get_serialized_size+0x18>
 8011146:	2100      	movs	r1, #0
 8011148:	b510      	push	{r4, lr}
 801114a:	f000 f9e1 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 801114e:	4604      	mov	r4, r0
 8011150:	2101      	movs	r1, #1
 8011152:	f001 f903 	bl	801235c <ucdr_alignment>
 8011156:	4420      	add	r0, r4
 8011158:	3001      	adds	r0, #1
 801115a:	bd10      	pop	{r4, pc}
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop

08011160 <_HazardLightsReport__max_serialized_size>:
 8011160:	b510      	push	{r4, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	2401      	movs	r4, #1
 8011166:	2100      	movs	r1, #0
 8011168:	f10d 0007 	add.w	r0, sp, #7
 801116c:	f88d 4007 	strb.w	r4, [sp, #7]
 8011170:	f000 fa1e 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8011174:	4621      	mov	r1, r4
 8011176:	4604      	mov	r4, r0
 8011178:	f001 f8f0 	bl	801235c <ucdr_alignment>
 801117c:	4420      	add	r0, r4
 801117e:	3001      	adds	r0, #1
 8011180:	b002      	add	sp, #8
 8011182:	bd10      	pop	{r4, pc}

08011184 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011184:	4800      	ldr	r0, [pc, #0]	@ (8011188 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 8011186:	4770      	bx	lr
 8011188:	24000c84 	.word	0x24000c84

0801118c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	b158      	cbz	r0, 80111a8 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 8011190:	460d      	mov	r5, r1
 8011192:	f000 f9bd 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8011196:	2104      	movs	r1, #4
 8011198:	182c      	adds	r4, r5, r0
 801119a:	f1c5 0504 	rsb	r5, r5, #4
 801119e:	4620      	mov	r0, r4
 80111a0:	f001 f8dc 	bl	801235c <ucdr_alignment>
 80111a4:	4428      	add	r0, r5
 80111a6:	4420      	add	r0, r4
 80111a8:	bd38      	pop	{r3, r4, r5, pc}
 80111aa:	bf00      	nop

080111ac <_SteeringReport__cdr_deserialize>:
 80111ac:	b538      	push	{r3, r4, r5, lr}
 80111ae:	460c      	mov	r4, r1
 80111b0:	b179      	cbz	r1, 80111d2 <_SteeringReport__cdr_deserialize+0x26>
 80111b2:	4605      	mov	r5, r0
 80111b4:	f000 fa10 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80111b8:	4603      	mov	r3, r0
 80111ba:	4621      	mov	r1, r4
 80111bc:	4628      	mov	r0, r5
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	68db      	ldr	r3, [r3, #12]
 80111c2:	4798      	blx	r3
 80111c4:	f104 0108 	add.w	r1, r4, #8
 80111c8:	4628      	mov	r0, r5
 80111ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111ce:	f000 be77 	b.w	8011ec0 <ucdr_deserialize_float>
 80111d2:	4608      	mov	r0, r1
 80111d4:	bd38      	pop	{r3, r4, r5, pc}
 80111d6:	bf00      	nop

080111d8 <_SteeringReport__cdr_serialize>:
 80111d8:	b188      	cbz	r0, 80111fe <_SteeringReport__cdr_serialize+0x26>
 80111da:	b538      	push	{r3, r4, r5, lr}
 80111dc:	4604      	mov	r4, r0
 80111de:	460d      	mov	r5, r1
 80111e0:	f000 f9fa 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80111e4:	4603      	mov	r3, r0
 80111e6:	4629      	mov	r1, r5
 80111e8:	4620      	mov	r0, r4
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	689b      	ldr	r3, [r3, #8]
 80111ee:	4798      	blx	r3
 80111f0:	ed94 0a02 	vldr	s0, [r4, #8]
 80111f4:	4628      	mov	r0, r5
 80111f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111fa:	f000 bdc9 	b.w	8011d90 <ucdr_serialize_float>
 80111fe:	4770      	bx	lr

08011200 <_SteeringReport__get_serialized_size>:
 8011200:	b150      	cbz	r0, 8011218 <_SteeringReport__get_serialized_size+0x18>
 8011202:	2100      	movs	r1, #0
 8011204:	b510      	push	{r4, lr}
 8011206:	f000 f983 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 801120a:	4604      	mov	r4, r0
 801120c:	2104      	movs	r1, #4
 801120e:	f001 f8a5 	bl	801235c <ucdr_alignment>
 8011212:	4420      	add	r0, r4
 8011214:	3004      	adds	r0, #4
 8011216:	bd10      	pop	{r4, pc}
 8011218:	4770      	bx	lr
 801121a:	bf00      	nop

0801121c <_SteeringReport__max_serialized_size>:
 801121c:	b510      	push	{r4, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	2301      	movs	r3, #1
 8011222:	2100      	movs	r1, #0
 8011224:	f10d 0007 	add.w	r0, sp, #7
 8011228:	f88d 3007 	strb.w	r3, [sp, #7]
 801122c:	f000 f9c0 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8011230:	4604      	mov	r4, r0
 8011232:	2104      	movs	r1, #4
 8011234:	f001 f892 	bl	801235c <ucdr_alignment>
 8011238:	4420      	add	r0, r4
 801123a:	3004      	adds	r0, #4
 801123c:	b002      	add	sp, #8
 801123e:	bd10      	pop	{r4, pc}

08011240 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8011240:	4800      	ldr	r0, [pc, #0]	@ (8011244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 8011242:	4770      	bx	lr
 8011244:	24000cac 	.word	0x24000cac

08011248 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011248:	b538      	push	{r3, r4, r5, lr}
 801124a:	b158      	cbz	r0, 8011264 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 801124c:	460d      	mov	r5, r1
 801124e:	f000 f95f 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8011252:	2101      	movs	r1, #1
 8011254:	182c      	adds	r4, r5, r0
 8011256:	f1c5 0501 	rsb	r5, r5, #1
 801125a:	4620      	mov	r0, r4
 801125c:	f001 f87e 	bl	801235c <ucdr_alignment>
 8011260:	4428      	add	r0, r5
 8011262:	4420      	add	r0, r4
 8011264:	bd38      	pop	{r3, r4, r5, pc}
 8011266:	bf00      	nop

08011268 <_TurnIndicatorsCommand__cdr_deserialize>:
 8011268:	b538      	push	{r3, r4, r5, lr}
 801126a:	460c      	mov	r4, r1
 801126c:	b179      	cbz	r1, 801128e <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 801126e:	4605      	mov	r5, r0
 8011270:	f000 f9b2 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011274:	4603      	mov	r3, r0
 8011276:	4621      	mov	r1, r4
 8011278:	4628      	mov	r0, r5
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	4798      	blx	r3
 8011280:	f104 0108 	add.w	r1, r4, #8
 8011284:	4628      	mov	r0, r5
 8011286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801128a:	f000 b9ed 	b.w	8011668 <ucdr_deserialize_uint8_t>
 801128e:	4608      	mov	r0, r1
 8011290:	bd38      	pop	{r3, r4, r5, pc}
 8011292:	bf00      	nop

08011294 <_TurnIndicatorsCommand__cdr_serialize>:
 8011294:	b180      	cbz	r0, 80112b8 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 8011296:	b538      	push	{r3, r4, r5, lr}
 8011298:	4604      	mov	r4, r0
 801129a:	460d      	mov	r5, r1
 801129c:	f000 f99c 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80112a0:	4603      	mov	r3, r0
 80112a2:	4629      	mov	r1, r5
 80112a4:	4620      	mov	r0, r4
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	689b      	ldr	r3, [r3, #8]
 80112aa:	4798      	blx	r3
 80112ac:	7a21      	ldrb	r1, [r4, #8]
 80112ae:	4628      	mov	r0, r5
 80112b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112b4:	f000 b9c2 	b.w	801163c <ucdr_serialize_uint8_t>
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop

080112bc <_TurnIndicatorsCommand__get_serialized_size>:
 80112bc:	b150      	cbz	r0, 80112d4 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 80112be:	2100      	movs	r1, #0
 80112c0:	b510      	push	{r4, lr}
 80112c2:	f000 f925 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 80112c6:	4604      	mov	r4, r0
 80112c8:	2101      	movs	r1, #1
 80112ca:	f001 f847 	bl	801235c <ucdr_alignment>
 80112ce:	4420      	add	r0, r4
 80112d0:	3001      	adds	r0, #1
 80112d2:	bd10      	pop	{r4, pc}
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop

080112d8 <_TurnIndicatorsCommand__max_serialized_size>:
 80112d8:	b510      	push	{r4, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	2401      	movs	r4, #1
 80112de:	2100      	movs	r1, #0
 80112e0:	f10d 0007 	add.w	r0, sp, #7
 80112e4:	f88d 4007 	strb.w	r4, [sp, #7]
 80112e8:	f000 f962 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 80112ec:	4621      	mov	r1, r4
 80112ee:	4604      	mov	r4, r0
 80112f0:	f001 f834 	bl	801235c <ucdr_alignment>
 80112f4:	4420      	add	r0, r4
 80112f6:	3001      	adds	r0, #1
 80112f8:	b002      	add	sp, #8
 80112fa:	bd10      	pop	{r4, pc}

080112fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80112fc:	4800      	ldr	r0, [pc, #0]	@ (8011300 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 80112fe:	4770      	bx	lr
 8011300:	24000cd4 	.word	0x24000cd4

08011304 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011304:	b538      	push	{r3, r4, r5, lr}
 8011306:	b158      	cbz	r0, 8011320 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 8011308:	460d      	mov	r5, r1
 801130a:	f000 f901 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 801130e:	2101      	movs	r1, #1
 8011310:	182c      	adds	r4, r5, r0
 8011312:	f1c5 0501 	rsb	r5, r5, #1
 8011316:	4620      	mov	r0, r4
 8011318:	f001 f820 	bl	801235c <ucdr_alignment>
 801131c:	4428      	add	r0, r5
 801131e:	4420      	add	r0, r4
 8011320:	bd38      	pop	{r3, r4, r5, pc}
 8011322:	bf00      	nop

08011324 <_TurnIndicatorsReport__cdr_deserialize>:
 8011324:	b538      	push	{r3, r4, r5, lr}
 8011326:	460c      	mov	r4, r1
 8011328:	b179      	cbz	r1, 801134a <_TurnIndicatorsReport__cdr_deserialize+0x26>
 801132a:	4605      	mov	r5, r0
 801132c:	f000 f954 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011330:	4603      	mov	r3, r0
 8011332:	4621      	mov	r1, r4
 8011334:	4628      	mov	r0, r5
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	4798      	blx	r3
 801133c:	f104 0108 	add.w	r1, r4, #8
 8011340:	4628      	mov	r0, r5
 8011342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011346:	f000 b98f 	b.w	8011668 <ucdr_deserialize_uint8_t>
 801134a:	4608      	mov	r0, r1
 801134c:	bd38      	pop	{r3, r4, r5, pc}
 801134e:	bf00      	nop

08011350 <_TurnIndicatorsReport__cdr_serialize>:
 8011350:	b180      	cbz	r0, 8011374 <_TurnIndicatorsReport__cdr_serialize+0x24>
 8011352:	b538      	push	{r3, r4, r5, lr}
 8011354:	4604      	mov	r4, r0
 8011356:	460d      	mov	r5, r1
 8011358:	f000 f93e 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801135c:	4603      	mov	r3, r0
 801135e:	4629      	mov	r1, r5
 8011360:	4620      	mov	r0, r4
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	689b      	ldr	r3, [r3, #8]
 8011366:	4798      	blx	r3
 8011368:	7a21      	ldrb	r1, [r4, #8]
 801136a:	4628      	mov	r0, r5
 801136c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011370:	f000 b964 	b.w	801163c <ucdr_serialize_uint8_t>
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop

08011378 <_TurnIndicatorsReport__get_serialized_size>:
 8011378:	b150      	cbz	r0, 8011390 <_TurnIndicatorsReport__get_serialized_size+0x18>
 801137a:	2100      	movs	r1, #0
 801137c:	b510      	push	{r4, lr}
 801137e:	f000 f8c7 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8011382:	4604      	mov	r4, r0
 8011384:	2101      	movs	r1, #1
 8011386:	f000 ffe9 	bl	801235c <ucdr_alignment>
 801138a:	4420      	add	r0, r4
 801138c:	3001      	adds	r0, #1
 801138e:	bd10      	pop	{r4, pc}
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop

08011394 <_TurnIndicatorsReport__max_serialized_size>:
 8011394:	b510      	push	{r4, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	2401      	movs	r4, #1
 801139a:	2100      	movs	r1, #0
 801139c:	f10d 0007 	add.w	r0, sp, #7
 80113a0:	f88d 4007 	strb.w	r4, [sp, #7]
 80113a4:	f000 f904 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 80113a8:	4621      	mov	r1, r4
 80113aa:	4604      	mov	r4, r0
 80113ac:	f000 ffd6 	bl	801235c <ucdr_alignment>
 80113b0:	4420      	add	r0, r4
 80113b2:	3001      	adds	r0, #1
 80113b4:	b002      	add	sp, #8
 80113b6:	bd10      	pop	{r4, pc}

080113b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 80113b8:	4800      	ldr	r0, [pc, #0]	@ (80113bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 80113ba:	4770      	bx	lr
 80113bc:	24000cfc 	.word	0x24000cfc

080113c0 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 80113c0:	b1c8      	cbz	r0, 80113f6 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 80113c2:	b570      	push	{r4, r5, r6, lr}
 80113c4:	460d      	mov	r5, r1
 80113c6:	f001 f8e3 	bl	8012590 <get_serialized_size_std_msgs__msg__Header>
 80113ca:	2104      	movs	r1, #4
 80113cc:	182e      	adds	r6, r5, r0
 80113ce:	f1c5 0504 	rsb	r5, r5, #4
 80113d2:	4630      	mov	r0, r6
 80113d4:	f000 ffc2 	bl	801235c <ucdr_alignment>
 80113d8:	2104      	movs	r1, #4
 80113da:	1844      	adds	r4, r0, r1
 80113dc:	4434      	add	r4, r6
 80113de:	4620      	mov	r0, r4
 80113e0:	f000 ffbc 	bl	801235c <ucdr_alignment>
 80113e4:	2104      	movs	r1, #4
 80113e6:	4408      	add	r0, r1
 80113e8:	4404      	add	r4, r0
 80113ea:	4620      	mov	r0, r4
 80113ec:	f000 ffb6 	bl	801235c <ucdr_alignment>
 80113f0:	4428      	add	r0, r5
 80113f2:	4420      	add	r0, r4
 80113f4:	bd70      	pop	{r4, r5, r6, pc}
 80113f6:	4770      	bx	lr

080113f8 <_VelocityReport__cdr_deserialize>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	460c      	mov	r4, r1
 80113fc:	b1c9      	cbz	r1, 8011432 <_VelocityReport__cdr_deserialize+0x3a>
 80113fe:	4605      	mov	r5, r0
 8011400:	f001 f94a 	bl	8012698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011404:	4603      	mov	r3, r0
 8011406:	4621      	mov	r1, r4
 8011408:	4628      	mov	r0, r5
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	4798      	blx	r3
 8011410:	f104 0114 	add.w	r1, r4, #20
 8011414:	4628      	mov	r0, r5
 8011416:	f000 fd53 	bl	8011ec0 <ucdr_deserialize_float>
 801141a:	f104 0118 	add.w	r1, r4, #24
 801141e:	4628      	mov	r0, r5
 8011420:	f000 fd4e 	bl	8011ec0 <ucdr_deserialize_float>
 8011424:	f104 011c 	add.w	r1, r4, #28
 8011428:	4628      	mov	r0, r5
 801142a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801142e:	f000 bd47 	b.w	8011ec0 <ucdr_deserialize_float>
 8011432:	4608      	mov	r0, r1
 8011434:	bd38      	pop	{r3, r4, r5, pc}
 8011436:	bf00      	nop

08011438 <_VelocityReport__cdr_serialize>:
 8011438:	b1d8      	cbz	r0, 8011472 <_VelocityReport__cdr_serialize+0x3a>
 801143a:	b538      	push	{r3, r4, r5, lr}
 801143c:	4604      	mov	r4, r0
 801143e:	460d      	mov	r5, r1
 8011440:	f001 f92a 	bl	8012698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011444:	4603      	mov	r3, r0
 8011446:	4629      	mov	r1, r5
 8011448:	4620      	mov	r0, r4
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	689b      	ldr	r3, [r3, #8]
 801144e:	4798      	blx	r3
 8011450:	ed94 0a05 	vldr	s0, [r4, #20]
 8011454:	4628      	mov	r0, r5
 8011456:	f000 fc9b 	bl	8011d90 <ucdr_serialize_float>
 801145a:	ed94 0a06 	vldr	s0, [r4, #24]
 801145e:	4628      	mov	r0, r5
 8011460:	f000 fc96 	bl	8011d90 <ucdr_serialize_float>
 8011464:	ed94 0a07 	vldr	s0, [r4, #28]
 8011468:	4628      	mov	r0, r5
 801146a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801146e:	f000 bc8f 	b.w	8011d90 <ucdr_serialize_float>
 8011472:	4770      	bx	lr

08011474 <_VelocityReport__get_serialized_size>:
 8011474:	b1b0      	cbz	r0, 80114a4 <_VelocityReport__get_serialized_size+0x30>
 8011476:	2100      	movs	r1, #0
 8011478:	b510      	push	{r4, lr}
 801147a:	f001 f889 	bl	8012590 <get_serialized_size_std_msgs__msg__Header>
 801147e:	4604      	mov	r4, r0
 8011480:	2104      	movs	r1, #4
 8011482:	f000 ff6b 	bl	801235c <ucdr_alignment>
 8011486:	2104      	movs	r1, #4
 8011488:	4420      	add	r0, r4
 801148a:	1844      	adds	r4, r0, r1
 801148c:	4620      	mov	r0, r4
 801148e:	f000 ff65 	bl	801235c <ucdr_alignment>
 8011492:	2104      	movs	r1, #4
 8011494:	4408      	add	r0, r1
 8011496:	4404      	add	r4, r0
 8011498:	4620      	mov	r0, r4
 801149a:	f000 ff5f 	bl	801235c <ucdr_alignment>
 801149e:	3004      	adds	r0, #4
 80114a0:	4420      	add	r0, r4
 80114a2:	bd10      	pop	{r4, pc}
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop

080114a8 <_VelocityReport__max_serialized_size>:
 80114a8:	b510      	push	{r4, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	2301      	movs	r3, #1
 80114ae:	2100      	movs	r1, #0
 80114b0:	f10d 0007 	add.w	r0, sp, #7
 80114b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80114b8:	f001 f8e4 	bl	8012684 <max_serialized_size_std_msgs__msg__Header>
 80114bc:	4604      	mov	r4, r0
 80114be:	2104      	movs	r1, #4
 80114c0:	f000 ff4c 	bl	801235c <ucdr_alignment>
 80114c4:	2104      	movs	r1, #4
 80114c6:	4420      	add	r0, r4
 80114c8:	1844      	adds	r4, r0, r1
 80114ca:	4620      	mov	r0, r4
 80114cc:	f000 ff46 	bl	801235c <ucdr_alignment>
 80114d0:	2104      	movs	r1, #4
 80114d2:	4408      	add	r0, r1
 80114d4:	4404      	add	r4, r0
 80114d6:	4620      	mov	r0, r4
 80114d8:	f000 ff40 	bl	801235c <ucdr_alignment>
 80114dc:	3004      	adds	r0, #4
 80114de:	4420      	add	r0, r4
 80114e0:	b002      	add	sp, #8
 80114e2:	bd10      	pop	{r4, pc}

080114e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80114e4:	4800      	ldr	r0, [pc, #0]	@ (80114e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 80114e6:	4770      	bx	lr
 80114e8:	24000d24 	.word	0x24000d24

080114ec <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80114ec:	f001 bcac 	b.w	8012e48 <builtin_interfaces__msg__Time__init>

080114f0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80114f0:	f001 bcae 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>

080114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80114f4:	4b04      	ldr	r3, [pc, #16]	@ (8011508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	b10a      	cbz	r2, 80114fe <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80114fa:	4803      	ldr	r0, [pc, #12]	@ (8011508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114fc:	4770      	bx	lr
 80114fe:	4a03      	ldr	r2, [pc, #12]	@ (801150c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011500:	4801      	ldr	r0, [pc, #4]	@ (8011508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011502:	6812      	ldr	r2, [r2, #0]
 8011504:	601a      	str	r2, [r3, #0]
 8011506:	4770      	bx	lr
 8011508:	24000dc4 	.word	0x24000dc4
 801150c:	24000e10 	.word	0x24000e10

08011510 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011510:	b180      	cbz	r0, 8011534 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011512:	b538      	push	{r3, r4, r5, lr}
 8011514:	460d      	mov	r5, r1
 8011516:	2104      	movs	r1, #4
 8011518:	4628      	mov	r0, r5
 801151a:	f000 ff1f 	bl	801235c <ucdr_alignment>
 801151e:	1d2b      	adds	r3, r5, #4
 8011520:	f1c5 0504 	rsb	r5, r5, #4
 8011524:	2104      	movs	r1, #4
 8011526:	181c      	adds	r4, r3, r0
 8011528:	4620      	mov	r0, r4
 801152a:	f000 ff17 	bl	801235c <ucdr_alignment>
 801152e:	4428      	add	r0, r5
 8011530:	4420      	add	r0, r4
 8011532:	bd38      	pop	{r3, r4, r5, pc}
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop

08011538 <_Time__cdr_deserialize>:
 8011538:	b538      	push	{r3, r4, r5, lr}
 801153a:	460c      	mov	r4, r1
 801153c:	b141      	cbz	r1, 8011550 <_Time__cdr_deserialize+0x18>
 801153e:	4605      	mov	r5, r0
 8011540:	f000 fb96 	bl	8011c70 <ucdr_deserialize_int32_t>
 8011544:	1d21      	adds	r1, r4, #4
 8011546:	4628      	mov	r0, r5
 8011548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801154c:	f000 b9d2 	b.w	80118f4 <ucdr_deserialize_uint32_t>
 8011550:	4608      	mov	r0, r1
 8011552:	bd38      	pop	{r3, r4, r5, pc}

08011554 <_Time__cdr_serialize>:
 8011554:	b160      	cbz	r0, 8011570 <_Time__cdr_serialize+0x1c>
 8011556:	b538      	push	{r3, r4, r5, lr}
 8011558:	460d      	mov	r5, r1
 801155a:	4604      	mov	r4, r0
 801155c:	6801      	ldr	r1, [r0, #0]
 801155e:	4628      	mov	r0, r5
 8011560:	f000 faee 	bl	8011b40 <ucdr_serialize_int32_t>
 8011564:	6861      	ldr	r1, [r4, #4]
 8011566:	4628      	mov	r0, r5
 8011568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801156c:	f000 b892 	b.w	8011694 <ucdr_serialize_uint32_t>
 8011570:	4770      	bx	lr
 8011572:	bf00      	nop

08011574 <_Time__get_serialized_size>:
 8011574:	b160      	cbz	r0, 8011590 <_Time__get_serialized_size+0x1c>
 8011576:	2104      	movs	r1, #4
 8011578:	2000      	movs	r0, #0
 801157a:	b510      	push	{r4, lr}
 801157c:	f000 feee 	bl	801235c <ucdr_alignment>
 8011580:	2104      	movs	r1, #4
 8011582:	1844      	adds	r4, r0, r1
 8011584:	4620      	mov	r0, r4
 8011586:	f000 fee9 	bl	801235c <ucdr_alignment>
 801158a:	3004      	adds	r0, #4
 801158c:	4420      	add	r0, r4
 801158e:	bd10      	pop	{r4, pc}
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop

08011594 <_Time__max_serialized_size>:
 8011594:	b510      	push	{r4, lr}
 8011596:	2104      	movs	r1, #4
 8011598:	2000      	movs	r0, #0
 801159a:	f000 fedf 	bl	801235c <ucdr_alignment>
 801159e:	2104      	movs	r1, #4
 80115a0:	1844      	adds	r4, r0, r1
 80115a2:	4620      	mov	r0, r4
 80115a4:	f000 feda 	bl	801235c <ucdr_alignment>
 80115a8:	3004      	adds	r0, #4
 80115aa:	4420      	add	r0, r4
 80115ac:	bd10      	pop	{r4, pc}
 80115ae:	bf00      	nop

080115b0 <max_serialized_size_builtin_interfaces__msg__Time>:
 80115b0:	b538      	push	{r3, r4, r5, lr}
 80115b2:	460c      	mov	r4, r1
 80115b4:	2301      	movs	r3, #1
 80115b6:	2104      	movs	r1, #4
 80115b8:	1d25      	adds	r5, r4, #4
 80115ba:	7003      	strb	r3, [r0, #0]
 80115bc:	4620      	mov	r0, r4
 80115be:	f1c4 0404 	rsb	r4, r4, #4
 80115c2:	f000 fecb 	bl	801235c <ucdr_alignment>
 80115c6:	4405      	add	r5, r0
 80115c8:	2104      	movs	r1, #4
 80115ca:	4628      	mov	r0, r5
 80115cc:	f000 fec6 	bl	801235c <ucdr_alignment>
 80115d0:	4420      	add	r0, r4
 80115d2:	4428      	add	r0, r5
 80115d4:	bd38      	pop	{r3, r4, r5, pc}
 80115d6:	bf00      	nop

080115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80115d8:	4800      	ldr	r0, [pc, #0]	@ (80115dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80115da:	4770      	bx	lr
 80115dc:	24000dd0 	.word	0x24000dd0

080115e0 <ucdr_serialize_bool>:
 80115e0:	b538      	push	{r3, r4, r5, lr}
 80115e2:	460d      	mov	r5, r1
 80115e4:	2101      	movs	r1, #1
 80115e6:	4604      	mov	r4, r0
 80115e8:	f000 fe9c 	bl	8012324 <ucdr_check_final_buffer_behavior>
 80115ec:	b148      	cbz	r0, 8011602 <ucdr_serialize_bool+0x22>
 80115ee:	68a3      	ldr	r3, [r4, #8]
 80115f0:	2101      	movs	r1, #1
 80115f2:	701d      	strb	r5, [r3, #0]
 80115f4:	68a2      	ldr	r2, [r4, #8]
 80115f6:	6923      	ldr	r3, [r4, #16]
 80115f8:	440a      	add	r2, r1
 80115fa:	7561      	strb	r1, [r4, #21]
 80115fc:	440b      	add	r3, r1
 80115fe:	60a2      	str	r2, [r4, #8]
 8011600:	6123      	str	r3, [r4, #16]
 8011602:	7da0      	ldrb	r0, [r4, #22]
 8011604:	f080 0001 	eor.w	r0, r0, #1
 8011608:	bd38      	pop	{r3, r4, r5, pc}
 801160a:	bf00      	nop

0801160c <ucdr_deserialize_bool>:
 801160c:	b538      	push	{r3, r4, r5, lr}
 801160e:	460d      	mov	r5, r1
 8011610:	2101      	movs	r1, #1
 8011612:	4604      	mov	r4, r0
 8011614:	f000 fe86 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011618:	b160      	cbz	r0, 8011634 <ucdr_deserialize_bool+0x28>
 801161a:	68a2      	ldr	r2, [r4, #8]
 801161c:	2101      	movs	r1, #1
 801161e:	6923      	ldr	r3, [r4, #16]
 8011620:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011624:	440b      	add	r3, r1
 8011626:	3800      	subs	r0, #0
 8011628:	bf18      	it	ne
 801162a:	2001      	movne	r0, #1
 801162c:	7028      	strb	r0, [r5, #0]
 801162e:	60a2      	str	r2, [r4, #8]
 8011630:	6123      	str	r3, [r4, #16]
 8011632:	7561      	strb	r1, [r4, #21]
 8011634:	7da0      	ldrb	r0, [r4, #22]
 8011636:	f080 0001 	eor.w	r0, r0, #1
 801163a:	bd38      	pop	{r3, r4, r5, pc}

0801163c <ucdr_serialize_uint8_t>:
 801163c:	b538      	push	{r3, r4, r5, lr}
 801163e:	460d      	mov	r5, r1
 8011640:	2101      	movs	r1, #1
 8011642:	4604      	mov	r4, r0
 8011644:	f000 fe6e 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011648:	b148      	cbz	r0, 801165e <ucdr_serialize_uint8_t+0x22>
 801164a:	68a3      	ldr	r3, [r4, #8]
 801164c:	2101      	movs	r1, #1
 801164e:	701d      	strb	r5, [r3, #0]
 8011650:	68a2      	ldr	r2, [r4, #8]
 8011652:	6923      	ldr	r3, [r4, #16]
 8011654:	440a      	add	r2, r1
 8011656:	7561      	strb	r1, [r4, #21]
 8011658:	440b      	add	r3, r1
 801165a:	60a2      	str	r2, [r4, #8]
 801165c:	6123      	str	r3, [r4, #16]
 801165e:	7da0      	ldrb	r0, [r4, #22]
 8011660:	f080 0001 	eor.w	r0, r0, #1
 8011664:	bd38      	pop	{r3, r4, r5, pc}
 8011666:	bf00      	nop

08011668 <ucdr_deserialize_uint8_t>:
 8011668:	b538      	push	{r3, r4, r5, lr}
 801166a:	460d      	mov	r5, r1
 801166c:	2101      	movs	r1, #1
 801166e:	4604      	mov	r4, r0
 8011670:	f000 fe58 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011674:	b150      	cbz	r0, 801168c <ucdr_deserialize_uint8_t+0x24>
 8011676:	68a3      	ldr	r3, [r4, #8]
 8011678:	2101      	movs	r1, #1
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	702b      	strb	r3, [r5, #0]
 801167e:	68a2      	ldr	r2, [r4, #8]
 8011680:	6923      	ldr	r3, [r4, #16]
 8011682:	440a      	add	r2, r1
 8011684:	7561      	strb	r1, [r4, #21]
 8011686:	440b      	add	r3, r1
 8011688:	60a2      	str	r2, [r4, #8]
 801168a:	6123      	str	r3, [r4, #16]
 801168c:	7da0      	ldrb	r0, [r4, #22]
 801168e:	f080 0001 	eor.w	r0, r0, #1
 8011692:	bd38      	pop	{r3, r4, r5, pc}

08011694 <ucdr_serialize_uint32_t>:
 8011694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011698:	b082      	sub	sp, #8
 801169a:	4604      	mov	r4, r0
 801169c:	9101      	str	r1, [sp, #4]
 801169e:	2104      	movs	r1, #4
 80116a0:	f000 fe64 	bl	801236c <ucdr_buffer_alignment>
 80116a4:	4601      	mov	r1, r0
 80116a6:	4620      	mov	r0, r4
 80116a8:	7d67      	ldrb	r7, [r4, #21]
 80116aa:	f000 fea3 	bl	80123f4 <ucdr_advance_buffer>
 80116ae:	2104      	movs	r1, #4
 80116b0:	4620      	mov	r0, r4
 80116b2:	f000 fe2b 	bl	801230c <ucdr_check_buffer_available_for>
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d139      	bne.n	801172e <ucdr_serialize_uint32_t+0x9a>
 80116ba:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80116be:	42ab      	cmp	r3, r5
 80116c0:	d930      	bls.n	8011724 <ucdr_serialize_uint32_t+0x90>
 80116c2:	1b5e      	subs	r6, r3, r5
 80116c4:	60a3      	str	r3, [r4, #8]
 80116c6:	6923      	ldr	r3, [r4, #16]
 80116c8:	4620      	mov	r0, r4
 80116ca:	f1c6 0804 	rsb	r8, r6, #4
 80116ce:	4433      	add	r3, r6
 80116d0:	4641      	mov	r1, r8
 80116d2:	6123      	str	r3, [r4, #16]
 80116d4:	f000 fe26 	bl	8012324 <ucdr_check_final_buffer_behavior>
 80116d8:	2800      	cmp	r0, #0
 80116da:	d04c      	beq.n	8011776 <ucdr_serialize_uint32_t+0xe2>
 80116dc:	7d23      	ldrb	r3, [r4, #20]
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d063      	beq.n	80117aa <ucdr_serialize_uint32_t+0x116>
 80116e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116e6:	702b      	strb	r3, [r5, #0]
 80116e8:	2e00      	cmp	r6, #0
 80116ea:	d051      	beq.n	8011790 <ucdr_serialize_uint32_t+0xfc>
 80116ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116f0:	2e01      	cmp	r6, #1
 80116f2:	706b      	strb	r3, [r5, #1]
 80116f4:	d050      	beq.n	8011798 <ucdr_serialize_uint32_t+0x104>
 80116f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80116fa:	2e02      	cmp	r6, #2
 80116fc:	70ab      	strb	r3, [r5, #2]
 80116fe:	d04f      	beq.n	80117a0 <ucdr_serialize_uint32_t+0x10c>
 8011700:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011704:	70eb      	strb	r3, [r5, #3]
 8011706:	6923      	ldr	r3, [r4, #16]
 8011708:	2104      	movs	r1, #4
 801170a:	68a2      	ldr	r2, [r4, #8]
 801170c:	3304      	adds	r3, #4
 801170e:	7da0      	ldrb	r0, [r4, #22]
 8011710:	4442      	add	r2, r8
 8011712:	7561      	strb	r1, [r4, #21]
 8011714:	1b9e      	subs	r6, r3, r6
 8011716:	f080 0001 	eor.w	r0, r0, #1
 801171a:	60a2      	str	r2, [r4, #8]
 801171c:	6126      	str	r6, [r4, #16]
 801171e:	b002      	add	sp, #8
 8011720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011724:	2104      	movs	r1, #4
 8011726:	4620      	mov	r0, r4
 8011728:	f000 fdfc 	bl	8012324 <ucdr_check_final_buffer_behavior>
 801172c:	b1d0      	cbz	r0, 8011764 <ucdr_serialize_uint32_t+0xd0>
 801172e:	7d23      	ldrb	r3, [r4, #20]
 8011730:	2b01      	cmp	r3, #1
 8011732:	68a3      	ldr	r3, [r4, #8]
 8011734:	d01c      	beq.n	8011770 <ucdr_serialize_uint32_t+0xdc>
 8011736:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801173a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801173e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011742:	7018      	strb	r0, [r3, #0]
 8011744:	68a3      	ldr	r3, [r4, #8]
 8011746:	705a      	strb	r2, [r3, #1]
 8011748:	68a3      	ldr	r3, [r4, #8]
 801174a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801174e:	7099      	strb	r1, [r3, #2]
 8011750:	68a3      	ldr	r3, [r4, #8]
 8011752:	70da      	strb	r2, [r3, #3]
 8011754:	2104      	movs	r1, #4
 8011756:	68a2      	ldr	r2, [r4, #8]
 8011758:	6923      	ldr	r3, [r4, #16]
 801175a:	440a      	add	r2, r1
 801175c:	7561      	strb	r1, [r4, #21]
 801175e:	440b      	add	r3, r1
 8011760:	60a2      	str	r2, [r4, #8]
 8011762:	6123      	str	r3, [r4, #16]
 8011764:	7da0      	ldrb	r0, [r4, #22]
 8011766:	f080 0001 	eor.w	r0, r0, #1
 801176a:	b002      	add	sp, #8
 801176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011770:	9a01      	ldr	r2, [sp, #4]
 8011772:	601a      	str	r2, [r3, #0]
 8011774:	e7ee      	b.n	8011754 <ucdr_serialize_uint32_t+0xc0>
 8011776:	68a2      	ldr	r2, [r4, #8]
 8011778:	6923      	ldr	r3, [r4, #16]
 801177a:	7da0      	ldrb	r0, [r4, #22]
 801177c:	1b92      	subs	r2, r2, r6
 801177e:	1b9b      	subs	r3, r3, r6
 8011780:	7567      	strb	r7, [r4, #21]
 8011782:	f080 0001 	eor.w	r0, r0, #1
 8011786:	60a2      	str	r2, [r4, #8]
 8011788:	6123      	str	r3, [r4, #16]
 801178a:	b002      	add	sp, #8
 801178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011790:	68a3      	ldr	r3, [r4, #8]
 8011792:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011796:	701a      	strb	r2, [r3, #0]
 8011798:	68a3      	ldr	r3, [r4, #8]
 801179a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801179e:	701a      	strb	r2, [r3, #0]
 80117a0:	68a3      	ldr	r3, [r4, #8]
 80117a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80117a6:	701a      	strb	r2, [r3, #0]
 80117a8:	e7ad      	b.n	8011706 <ucdr_serialize_uint32_t+0x72>
 80117aa:	4628      	mov	r0, r5
 80117ac:	ad01      	add	r5, sp, #4
 80117ae:	4632      	mov	r2, r6
 80117b0:	4629      	mov	r1, r5
 80117b2:	f002 fa3a 	bl	8013c2a <memcpy>
 80117b6:	4642      	mov	r2, r8
 80117b8:	19a9      	adds	r1, r5, r6
 80117ba:	68a0      	ldr	r0, [r4, #8]
 80117bc:	f002 fa35 	bl	8013c2a <memcpy>
 80117c0:	e7a1      	b.n	8011706 <ucdr_serialize_uint32_t+0x72>
 80117c2:	bf00      	nop

080117c4 <ucdr_serialize_endian_uint32_t>:
 80117c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117c8:	4604      	mov	r4, r0
 80117ca:	b083      	sub	sp, #12
 80117cc:	460d      	mov	r5, r1
 80117ce:	2104      	movs	r1, #4
 80117d0:	9201      	str	r2, [sp, #4]
 80117d2:	f000 fdcb 	bl	801236c <ucdr_buffer_alignment>
 80117d6:	4601      	mov	r1, r0
 80117d8:	4620      	mov	r0, r4
 80117da:	f894 8015 	ldrb.w	r8, [r4, #21]
 80117de:	f000 fe09 	bl	80123f4 <ucdr_advance_buffer>
 80117e2:	2104      	movs	r1, #4
 80117e4:	4620      	mov	r0, r4
 80117e6:	f000 fd91 	bl	801230c <ucdr_check_buffer_available_for>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d138      	bne.n	8011860 <ucdr_serialize_endian_uint32_t+0x9c>
 80117ee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80117f2:	42b7      	cmp	r7, r6
 80117f4:	d92f      	bls.n	8011856 <ucdr_serialize_endian_uint32_t+0x92>
 80117f6:	6923      	ldr	r3, [r4, #16]
 80117f8:	4620      	mov	r0, r4
 80117fa:	60a7      	str	r7, [r4, #8]
 80117fc:	1bbf      	subs	r7, r7, r6
 80117fe:	443b      	add	r3, r7
 8011800:	f1c7 0904 	rsb	r9, r7, #4
 8011804:	6123      	str	r3, [r4, #16]
 8011806:	4649      	mov	r1, r9
 8011808:	f000 fd8c 	bl	8012324 <ucdr_check_final_buffer_behavior>
 801180c:	2800      	cmp	r0, #0
 801180e:	d04a      	beq.n	80118a6 <ucdr_serialize_endian_uint32_t+0xe2>
 8011810:	2d01      	cmp	r5, #1
 8011812:	d063      	beq.n	80118dc <ucdr_serialize_endian_uint32_t+0x118>
 8011814:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011818:	7033      	strb	r3, [r6, #0]
 801181a:	2f00      	cmp	r7, #0
 801181c:	d051      	beq.n	80118c2 <ucdr_serialize_endian_uint32_t+0xfe>
 801181e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011822:	2f01      	cmp	r7, #1
 8011824:	7073      	strb	r3, [r6, #1]
 8011826:	d050      	beq.n	80118ca <ucdr_serialize_endian_uint32_t+0x106>
 8011828:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801182c:	2f02      	cmp	r7, #2
 801182e:	70b3      	strb	r3, [r6, #2]
 8011830:	d04f      	beq.n	80118d2 <ucdr_serialize_endian_uint32_t+0x10e>
 8011832:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011836:	70f3      	strb	r3, [r6, #3]
 8011838:	6923      	ldr	r3, [r4, #16]
 801183a:	2104      	movs	r1, #4
 801183c:	68a2      	ldr	r2, [r4, #8]
 801183e:	7da0      	ldrb	r0, [r4, #22]
 8011840:	3304      	adds	r3, #4
 8011842:	444a      	add	r2, r9
 8011844:	7561      	strb	r1, [r4, #21]
 8011846:	1bdb      	subs	r3, r3, r7
 8011848:	f080 0001 	eor.w	r0, r0, #1
 801184c:	60a2      	str	r2, [r4, #8]
 801184e:	6123      	str	r3, [r4, #16]
 8011850:	b003      	add	sp, #12
 8011852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011856:	2104      	movs	r1, #4
 8011858:	4620      	mov	r0, r4
 801185a:	f000 fd63 	bl	8012324 <ucdr_check_final_buffer_behavior>
 801185e:	b1c8      	cbz	r0, 8011894 <ucdr_serialize_endian_uint32_t+0xd0>
 8011860:	2d01      	cmp	r5, #1
 8011862:	68a3      	ldr	r3, [r4, #8]
 8011864:	d01c      	beq.n	80118a0 <ucdr_serialize_endian_uint32_t+0xdc>
 8011866:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801186a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801186e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011872:	7018      	strb	r0, [r3, #0]
 8011874:	68a3      	ldr	r3, [r4, #8]
 8011876:	705a      	strb	r2, [r3, #1]
 8011878:	68a3      	ldr	r3, [r4, #8]
 801187a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801187e:	7099      	strb	r1, [r3, #2]
 8011880:	68a3      	ldr	r3, [r4, #8]
 8011882:	70da      	strb	r2, [r3, #3]
 8011884:	2104      	movs	r1, #4
 8011886:	68a2      	ldr	r2, [r4, #8]
 8011888:	6923      	ldr	r3, [r4, #16]
 801188a:	440a      	add	r2, r1
 801188c:	7561      	strb	r1, [r4, #21]
 801188e:	440b      	add	r3, r1
 8011890:	60a2      	str	r2, [r4, #8]
 8011892:	6123      	str	r3, [r4, #16]
 8011894:	7da0      	ldrb	r0, [r4, #22]
 8011896:	f080 0001 	eor.w	r0, r0, #1
 801189a:	b003      	add	sp, #12
 801189c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118a0:	9a01      	ldr	r2, [sp, #4]
 80118a2:	601a      	str	r2, [r3, #0]
 80118a4:	e7ee      	b.n	8011884 <ucdr_serialize_endian_uint32_t+0xc0>
 80118a6:	68a2      	ldr	r2, [r4, #8]
 80118a8:	6923      	ldr	r3, [r4, #16]
 80118aa:	7da0      	ldrb	r0, [r4, #22]
 80118ac:	1bd2      	subs	r2, r2, r7
 80118ae:	1bdb      	subs	r3, r3, r7
 80118b0:	f884 8015 	strb.w	r8, [r4, #21]
 80118b4:	f080 0001 	eor.w	r0, r0, #1
 80118b8:	60a2      	str	r2, [r4, #8]
 80118ba:	6123      	str	r3, [r4, #16]
 80118bc:	b003      	add	sp, #12
 80118be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118c2:	68a3      	ldr	r3, [r4, #8]
 80118c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80118c8:	701a      	strb	r2, [r3, #0]
 80118ca:	68a3      	ldr	r3, [r4, #8]
 80118cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80118d0:	701a      	strb	r2, [r3, #0]
 80118d2:	68a3      	ldr	r3, [r4, #8]
 80118d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80118d8:	701a      	strb	r2, [r3, #0]
 80118da:	e7ad      	b.n	8011838 <ucdr_serialize_endian_uint32_t+0x74>
 80118dc:	ad01      	add	r5, sp, #4
 80118de:	463a      	mov	r2, r7
 80118e0:	4630      	mov	r0, r6
 80118e2:	4629      	mov	r1, r5
 80118e4:	f002 f9a1 	bl	8013c2a <memcpy>
 80118e8:	464a      	mov	r2, r9
 80118ea:	19e9      	adds	r1, r5, r7
 80118ec:	68a0      	ldr	r0, [r4, #8]
 80118ee:	f002 f99c 	bl	8013c2a <memcpy>
 80118f2:	e7a1      	b.n	8011838 <ucdr_serialize_endian_uint32_t+0x74>

080118f4 <ucdr_deserialize_uint32_t>:
 80118f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118f8:	4604      	mov	r4, r0
 80118fa:	460d      	mov	r5, r1
 80118fc:	2104      	movs	r1, #4
 80118fe:	f000 fd35 	bl	801236c <ucdr_buffer_alignment>
 8011902:	4601      	mov	r1, r0
 8011904:	4620      	mov	r0, r4
 8011906:	f894 8015 	ldrb.w	r8, [r4, #21]
 801190a:	f000 fd73 	bl	80123f4 <ucdr_advance_buffer>
 801190e:	2104      	movs	r1, #4
 8011910:	4620      	mov	r0, r4
 8011912:	f000 fcfb 	bl	801230c <ucdr_check_buffer_available_for>
 8011916:	2800      	cmp	r0, #0
 8011918:	d138      	bne.n	801198c <ucdr_deserialize_uint32_t+0x98>
 801191a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801191e:	42b7      	cmp	r7, r6
 8011920:	d92f      	bls.n	8011982 <ucdr_deserialize_uint32_t+0x8e>
 8011922:	6923      	ldr	r3, [r4, #16]
 8011924:	4620      	mov	r0, r4
 8011926:	60a7      	str	r7, [r4, #8]
 8011928:	1bbf      	subs	r7, r7, r6
 801192a:	443b      	add	r3, r7
 801192c:	f1c7 0904 	rsb	r9, r7, #4
 8011930:	6123      	str	r3, [r4, #16]
 8011932:	4649      	mov	r1, r9
 8011934:	f000 fcf6 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011938:	2800      	cmp	r0, #0
 801193a:	d046      	beq.n	80119ca <ucdr_deserialize_uint32_t+0xd6>
 801193c:	7d23      	ldrb	r3, [r4, #20]
 801193e:	2b01      	cmp	r3, #1
 8011940:	d05c      	beq.n	80119fc <ucdr_deserialize_uint32_t+0x108>
 8011942:	78f3      	ldrb	r3, [r6, #3]
 8011944:	702b      	strb	r3, [r5, #0]
 8011946:	2f00      	cmp	r7, #0
 8011948:	d04c      	beq.n	80119e4 <ucdr_deserialize_uint32_t+0xf0>
 801194a:	78b3      	ldrb	r3, [r6, #2]
 801194c:	2f01      	cmp	r7, #1
 801194e:	706b      	strb	r3, [r5, #1]
 8011950:	f105 0302 	add.w	r3, r5, #2
 8011954:	d04a      	beq.n	80119ec <ucdr_deserialize_uint32_t+0xf8>
 8011956:	7873      	ldrb	r3, [r6, #1]
 8011958:	2f02      	cmp	r7, #2
 801195a:	70ab      	strb	r3, [r5, #2]
 801195c:	f105 0303 	add.w	r3, r5, #3
 8011960:	d048      	beq.n	80119f4 <ucdr_deserialize_uint32_t+0x100>
 8011962:	7833      	ldrb	r3, [r6, #0]
 8011964:	70eb      	strb	r3, [r5, #3]
 8011966:	6923      	ldr	r3, [r4, #16]
 8011968:	2104      	movs	r1, #4
 801196a:	68a2      	ldr	r2, [r4, #8]
 801196c:	3304      	adds	r3, #4
 801196e:	7da0      	ldrb	r0, [r4, #22]
 8011970:	444a      	add	r2, r9
 8011972:	7561      	strb	r1, [r4, #21]
 8011974:	1bdb      	subs	r3, r3, r7
 8011976:	f080 0001 	eor.w	r0, r0, #1
 801197a:	60a2      	str	r2, [r4, #8]
 801197c:	6123      	str	r3, [r4, #16]
 801197e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011982:	2104      	movs	r1, #4
 8011984:	4620      	mov	r0, r4
 8011986:	f000 fccd 	bl	8012324 <ucdr_check_final_buffer_behavior>
 801198a:	b1b0      	cbz	r0, 80119ba <ucdr_deserialize_uint32_t+0xc6>
 801198c:	7d23      	ldrb	r3, [r4, #20]
 801198e:	2b01      	cmp	r3, #1
 8011990:	68a3      	ldr	r3, [r4, #8]
 8011992:	d017      	beq.n	80119c4 <ucdr_deserialize_uint32_t+0xd0>
 8011994:	78db      	ldrb	r3, [r3, #3]
 8011996:	702b      	strb	r3, [r5, #0]
 8011998:	68a3      	ldr	r3, [r4, #8]
 801199a:	789b      	ldrb	r3, [r3, #2]
 801199c:	706b      	strb	r3, [r5, #1]
 801199e:	68a3      	ldr	r3, [r4, #8]
 80119a0:	785b      	ldrb	r3, [r3, #1]
 80119a2:	70ab      	strb	r3, [r5, #2]
 80119a4:	68a3      	ldr	r3, [r4, #8]
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	70eb      	strb	r3, [r5, #3]
 80119aa:	2104      	movs	r1, #4
 80119ac:	68a2      	ldr	r2, [r4, #8]
 80119ae:	6923      	ldr	r3, [r4, #16]
 80119b0:	440a      	add	r2, r1
 80119b2:	7561      	strb	r1, [r4, #21]
 80119b4:	440b      	add	r3, r1
 80119b6:	60a2      	str	r2, [r4, #8]
 80119b8:	6123      	str	r3, [r4, #16]
 80119ba:	7da0      	ldrb	r0, [r4, #22]
 80119bc:	f080 0001 	eor.w	r0, r0, #1
 80119c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	602b      	str	r3, [r5, #0]
 80119c8:	e7ef      	b.n	80119aa <ucdr_deserialize_uint32_t+0xb6>
 80119ca:	68a2      	ldr	r2, [r4, #8]
 80119cc:	6923      	ldr	r3, [r4, #16]
 80119ce:	1bd2      	subs	r2, r2, r7
 80119d0:	7da0      	ldrb	r0, [r4, #22]
 80119d2:	1bdb      	subs	r3, r3, r7
 80119d4:	f884 8015 	strb.w	r8, [r4, #21]
 80119d8:	f080 0001 	eor.w	r0, r0, #1
 80119dc:	60a2      	str	r2, [r4, #8]
 80119de:	6123      	str	r3, [r4, #16]
 80119e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119e4:	68a3      	ldr	r3, [r4, #8]
 80119e6:	789b      	ldrb	r3, [r3, #2]
 80119e8:	706b      	strb	r3, [r5, #1]
 80119ea:	1cab      	adds	r3, r5, #2
 80119ec:	68a2      	ldr	r2, [r4, #8]
 80119ee:	7852      	ldrb	r2, [r2, #1]
 80119f0:	f803 2b01 	strb.w	r2, [r3], #1
 80119f4:	68a2      	ldr	r2, [r4, #8]
 80119f6:	7812      	ldrb	r2, [r2, #0]
 80119f8:	701a      	strb	r2, [r3, #0]
 80119fa:	e7b4      	b.n	8011966 <ucdr_deserialize_uint32_t+0x72>
 80119fc:	4631      	mov	r1, r6
 80119fe:	463a      	mov	r2, r7
 8011a00:	4628      	mov	r0, r5
 8011a02:	f002 f912 	bl	8013c2a <memcpy>
 8011a06:	464a      	mov	r2, r9
 8011a08:	19e8      	adds	r0, r5, r7
 8011a0a:	68a1      	ldr	r1, [r4, #8]
 8011a0c:	f002 f90d 	bl	8013c2a <memcpy>
 8011a10:	e7a9      	b.n	8011966 <ucdr_deserialize_uint32_t+0x72>
 8011a12:	bf00      	nop

08011a14 <ucdr_deserialize_endian_uint32_t>:
 8011a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a18:	4604      	mov	r4, r0
 8011a1a:	460e      	mov	r6, r1
 8011a1c:	2104      	movs	r1, #4
 8011a1e:	4615      	mov	r5, r2
 8011a20:	f000 fca4 	bl	801236c <ucdr_buffer_alignment>
 8011a24:	4601      	mov	r1, r0
 8011a26:	4620      	mov	r0, r4
 8011a28:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011a2c:	f000 fce2 	bl	80123f4 <ucdr_advance_buffer>
 8011a30:	2104      	movs	r1, #4
 8011a32:	4620      	mov	r0, r4
 8011a34:	f000 fc6a 	bl	801230c <ucdr_check_buffer_available_for>
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	d13c      	bne.n	8011ab6 <ucdr_deserialize_endian_uint32_t+0xa2>
 8011a3c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011a40:	42bb      	cmp	r3, r7
 8011a42:	d933      	bls.n	8011aac <ucdr_deserialize_endian_uint32_t+0x98>
 8011a44:	eba3 0907 	sub.w	r9, r3, r7
 8011a48:	60a3      	str	r3, [r4, #8]
 8011a4a:	6923      	ldr	r3, [r4, #16]
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	f1c9 0a04 	rsb	sl, r9, #4
 8011a52:	444b      	add	r3, r9
 8011a54:	4651      	mov	r1, sl
 8011a56:	6123      	str	r3, [r4, #16]
 8011a58:	f000 fc64 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d048      	beq.n	8011af2 <ucdr_deserialize_endian_uint32_t+0xde>
 8011a60:	2e01      	cmp	r6, #1
 8011a62:	d061      	beq.n	8011b28 <ucdr_deserialize_endian_uint32_t+0x114>
 8011a64:	78fb      	ldrb	r3, [r7, #3]
 8011a66:	702b      	strb	r3, [r5, #0]
 8011a68:	f1b9 0f00 	cmp.w	r9, #0
 8011a6c:	d050      	beq.n	8011b10 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011a6e:	78bb      	ldrb	r3, [r7, #2]
 8011a70:	f1b9 0f01 	cmp.w	r9, #1
 8011a74:	706b      	strb	r3, [r5, #1]
 8011a76:	f105 0302 	add.w	r3, r5, #2
 8011a7a:	d04d      	beq.n	8011b18 <ucdr_deserialize_endian_uint32_t+0x104>
 8011a7c:	787b      	ldrb	r3, [r7, #1]
 8011a7e:	f1b9 0f02 	cmp.w	r9, #2
 8011a82:	70ab      	strb	r3, [r5, #2]
 8011a84:	f105 0303 	add.w	r3, r5, #3
 8011a88:	d04a      	beq.n	8011b20 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011a8a:	783b      	ldrb	r3, [r7, #0]
 8011a8c:	70eb      	strb	r3, [r5, #3]
 8011a8e:	6923      	ldr	r3, [r4, #16]
 8011a90:	2104      	movs	r1, #4
 8011a92:	68a2      	ldr	r2, [r4, #8]
 8011a94:	3304      	adds	r3, #4
 8011a96:	7da0      	ldrb	r0, [r4, #22]
 8011a98:	4452      	add	r2, sl
 8011a9a:	7561      	strb	r1, [r4, #21]
 8011a9c:	eba3 0309 	sub.w	r3, r3, r9
 8011aa0:	f080 0001 	eor.w	r0, r0, #1
 8011aa4:	60a2      	str	r2, [r4, #8]
 8011aa6:	6123      	str	r3, [r4, #16]
 8011aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aac:	2104      	movs	r1, #4
 8011aae:	4620      	mov	r0, r4
 8011ab0:	f000 fc38 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011ab4:	b1a8      	cbz	r0, 8011ae2 <ucdr_deserialize_endian_uint32_t+0xce>
 8011ab6:	2e01      	cmp	r6, #1
 8011ab8:	68a3      	ldr	r3, [r4, #8]
 8011aba:	d017      	beq.n	8011aec <ucdr_deserialize_endian_uint32_t+0xd8>
 8011abc:	78db      	ldrb	r3, [r3, #3]
 8011abe:	702b      	strb	r3, [r5, #0]
 8011ac0:	68a3      	ldr	r3, [r4, #8]
 8011ac2:	789b      	ldrb	r3, [r3, #2]
 8011ac4:	706b      	strb	r3, [r5, #1]
 8011ac6:	68a3      	ldr	r3, [r4, #8]
 8011ac8:	785b      	ldrb	r3, [r3, #1]
 8011aca:	70ab      	strb	r3, [r5, #2]
 8011acc:	68a3      	ldr	r3, [r4, #8]
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	70eb      	strb	r3, [r5, #3]
 8011ad2:	2104      	movs	r1, #4
 8011ad4:	68a2      	ldr	r2, [r4, #8]
 8011ad6:	6923      	ldr	r3, [r4, #16]
 8011ad8:	440a      	add	r2, r1
 8011ada:	7561      	strb	r1, [r4, #21]
 8011adc:	440b      	add	r3, r1
 8011ade:	60a2      	str	r2, [r4, #8]
 8011ae0:	6123      	str	r3, [r4, #16]
 8011ae2:	7da0      	ldrb	r0, [r4, #22]
 8011ae4:	f080 0001 	eor.w	r0, r0, #1
 8011ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	602b      	str	r3, [r5, #0]
 8011af0:	e7ef      	b.n	8011ad2 <ucdr_deserialize_endian_uint32_t+0xbe>
 8011af2:	68a2      	ldr	r2, [r4, #8]
 8011af4:	6923      	ldr	r3, [r4, #16]
 8011af6:	eba2 0209 	sub.w	r2, r2, r9
 8011afa:	7da0      	ldrb	r0, [r4, #22]
 8011afc:	eba3 0309 	sub.w	r3, r3, r9
 8011b00:	f884 8015 	strb.w	r8, [r4, #21]
 8011b04:	f080 0001 	eor.w	r0, r0, #1
 8011b08:	60a2      	str	r2, [r4, #8]
 8011b0a:	6123      	str	r3, [r4, #16]
 8011b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b10:	68a3      	ldr	r3, [r4, #8]
 8011b12:	789b      	ldrb	r3, [r3, #2]
 8011b14:	706b      	strb	r3, [r5, #1]
 8011b16:	1cab      	adds	r3, r5, #2
 8011b18:	68a2      	ldr	r2, [r4, #8]
 8011b1a:	7852      	ldrb	r2, [r2, #1]
 8011b1c:	f803 2b01 	strb.w	r2, [r3], #1
 8011b20:	68a2      	ldr	r2, [r4, #8]
 8011b22:	7812      	ldrb	r2, [r2, #0]
 8011b24:	701a      	strb	r2, [r3, #0]
 8011b26:	e7b2      	b.n	8011a8e <ucdr_deserialize_endian_uint32_t+0x7a>
 8011b28:	4639      	mov	r1, r7
 8011b2a:	464a      	mov	r2, r9
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	f002 f87c 	bl	8013c2a <memcpy>
 8011b32:	4652      	mov	r2, sl
 8011b34:	eb05 0009 	add.w	r0, r5, r9
 8011b38:	68a1      	ldr	r1, [r4, #8]
 8011b3a:	f002 f876 	bl	8013c2a <memcpy>
 8011b3e:	e7a6      	b.n	8011a8e <ucdr_deserialize_endian_uint32_t+0x7a>

08011b40 <ucdr_serialize_int32_t>:
 8011b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b44:	b082      	sub	sp, #8
 8011b46:	4604      	mov	r4, r0
 8011b48:	9101      	str	r1, [sp, #4]
 8011b4a:	2104      	movs	r1, #4
 8011b4c:	f000 fc0e 	bl	801236c <ucdr_buffer_alignment>
 8011b50:	4601      	mov	r1, r0
 8011b52:	4620      	mov	r0, r4
 8011b54:	7d67      	ldrb	r7, [r4, #21]
 8011b56:	f000 fc4d 	bl	80123f4 <ucdr_advance_buffer>
 8011b5a:	2104      	movs	r1, #4
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	f000 fbd5 	bl	801230c <ucdr_check_buffer_available_for>
 8011b62:	2800      	cmp	r0, #0
 8011b64:	d139      	bne.n	8011bda <ucdr_serialize_int32_t+0x9a>
 8011b66:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011b6a:	42ab      	cmp	r3, r5
 8011b6c:	d930      	bls.n	8011bd0 <ucdr_serialize_int32_t+0x90>
 8011b6e:	1b5e      	subs	r6, r3, r5
 8011b70:	60a3      	str	r3, [r4, #8]
 8011b72:	6923      	ldr	r3, [r4, #16]
 8011b74:	4620      	mov	r0, r4
 8011b76:	f1c6 0804 	rsb	r8, r6, #4
 8011b7a:	4433      	add	r3, r6
 8011b7c:	4641      	mov	r1, r8
 8011b7e:	6123      	str	r3, [r4, #16]
 8011b80:	f000 fbd0 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011b84:	2800      	cmp	r0, #0
 8011b86:	d04c      	beq.n	8011c22 <ucdr_serialize_int32_t+0xe2>
 8011b88:	7d23      	ldrb	r3, [r4, #20]
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	d063      	beq.n	8011c56 <ucdr_serialize_int32_t+0x116>
 8011b8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b92:	702b      	strb	r3, [r5, #0]
 8011b94:	2e00      	cmp	r6, #0
 8011b96:	d051      	beq.n	8011c3c <ucdr_serialize_int32_t+0xfc>
 8011b98:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b9c:	2e01      	cmp	r6, #1
 8011b9e:	706b      	strb	r3, [r5, #1]
 8011ba0:	d050      	beq.n	8011c44 <ucdr_serialize_int32_t+0x104>
 8011ba2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ba6:	2e02      	cmp	r6, #2
 8011ba8:	70ab      	strb	r3, [r5, #2]
 8011baa:	d04f      	beq.n	8011c4c <ucdr_serialize_int32_t+0x10c>
 8011bac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011bb0:	70eb      	strb	r3, [r5, #3]
 8011bb2:	6923      	ldr	r3, [r4, #16]
 8011bb4:	2104      	movs	r1, #4
 8011bb6:	68a2      	ldr	r2, [r4, #8]
 8011bb8:	3304      	adds	r3, #4
 8011bba:	7da0      	ldrb	r0, [r4, #22]
 8011bbc:	4442      	add	r2, r8
 8011bbe:	7561      	strb	r1, [r4, #21]
 8011bc0:	1b9e      	subs	r6, r3, r6
 8011bc2:	f080 0001 	eor.w	r0, r0, #1
 8011bc6:	60a2      	str	r2, [r4, #8]
 8011bc8:	6126      	str	r6, [r4, #16]
 8011bca:	b002      	add	sp, #8
 8011bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bd0:	2104      	movs	r1, #4
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f000 fba6 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011bd8:	b1d0      	cbz	r0, 8011c10 <ucdr_serialize_int32_t+0xd0>
 8011bda:	7d23      	ldrb	r3, [r4, #20]
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	68a3      	ldr	r3, [r4, #8]
 8011be0:	d01c      	beq.n	8011c1c <ucdr_serialize_int32_t+0xdc>
 8011be2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011be6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011bea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011bee:	7018      	strb	r0, [r3, #0]
 8011bf0:	68a3      	ldr	r3, [r4, #8]
 8011bf2:	705a      	strb	r2, [r3, #1]
 8011bf4:	68a3      	ldr	r3, [r4, #8]
 8011bf6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011bfa:	7099      	strb	r1, [r3, #2]
 8011bfc:	68a3      	ldr	r3, [r4, #8]
 8011bfe:	70da      	strb	r2, [r3, #3]
 8011c00:	2104      	movs	r1, #4
 8011c02:	68a2      	ldr	r2, [r4, #8]
 8011c04:	6923      	ldr	r3, [r4, #16]
 8011c06:	440a      	add	r2, r1
 8011c08:	7561      	strb	r1, [r4, #21]
 8011c0a:	440b      	add	r3, r1
 8011c0c:	60a2      	str	r2, [r4, #8]
 8011c0e:	6123      	str	r3, [r4, #16]
 8011c10:	7da0      	ldrb	r0, [r4, #22]
 8011c12:	f080 0001 	eor.w	r0, r0, #1
 8011c16:	b002      	add	sp, #8
 8011c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c1c:	9a01      	ldr	r2, [sp, #4]
 8011c1e:	601a      	str	r2, [r3, #0]
 8011c20:	e7ee      	b.n	8011c00 <ucdr_serialize_int32_t+0xc0>
 8011c22:	68a2      	ldr	r2, [r4, #8]
 8011c24:	6923      	ldr	r3, [r4, #16]
 8011c26:	7da0      	ldrb	r0, [r4, #22]
 8011c28:	1b92      	subs	r2, r2, r6
 8011c2a:	1b9b      	subs	r3, r3, r6
 8011c2c:	7567      	strb	r7, [r4, #21]
 8011c2e:	f080 0001 	eor.w	r0, r0, #1
 8011c32:	60a2      	str	r2, [r4, #8]
 8011c34:	6123      	str	r3, [r4, #16]
 8011c36:	b002      	add	sp, #8
 8011c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c3c:	68a3      	ldr	r3, [r4, #8]
 8011c3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c42:	701a      	strb	r2, [r3, #0]
 8011c44:	68a3      	ldr	r3, [r4, #8]
 8011c46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011c4a:	701a      	strb	r2, [r3, #0]
 8011c4c:	68a3      	ldr	r3, [r4, #8]
 8011c4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011c52:	701a      	strb	r2, [r3, #0]
 8011c54:	e7ad      	b.n	8011bb2 <ucdr_serialize_int32_t+0x72>
 8011c56:	4628      	mov	r0, r5
 8011c58:	ad01      	add	r5, sp, #4
 8011c5a:	4632      	mov	r2, r6
 8011c5c:	4629      	mov	r1, r5
 8011c5e:	f001 ffe4 	bl	8013c2a <memcpy>
 8011c62:	4642      	mov	r2, r8
 8011c64:	19a9      	adds	r1, r5, r6
 8011c66:	68a0      	ldr	r0, [r4, #8]
 8011c68:	f001 ffdf 	bl	8013c2a <memcpy>
 8011c6c:	e7a1      	b.n	8011bb2 <ucdr_serialize_int32_t+0x72>
 8011c6e:	bf00      	nop

08011c70 <ucdr_deserialize_int32_t>:
 8011c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c74:	4604      	mov	r4, r0
 8011c76:	460d      	mov	r5, r1
 8011c78:	2104      	movs	r1, #4
 8011c7a:	f000 fb77 	bl	801236c <ucdr_buffer_alignment>
 8011c7e:	4601      	mov	r1, r0
 8011c80:	4620      	mov	r0, r4
 8011c82:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011c86:	f000 fbb5 	bl	80123f4 <ucdr_advance_buffer>
 8011c8a:	2104      	movs	r1, #4
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	f000 fb3d 	bl	801230c <ucdr_check_buffer_available_for>
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d138      	bne.n	8011d08 <ucdr_deserialize_int32_t+0x98>
 8011c96:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011c9a:	42b7      	cmp	r7, r6
 8011c9c:	d92f      	bls.n	8011cfe <ucdr_deserialize_int32_t+0x8e>
 8011c9e:	6923      	ldr	r3, [r4, #16]
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	60a7      	str	r7, [r4, #8]
 8011ca4:	1bbf      	subs	r7, r7, r6
 8011ca6:	443b      	add	r3, r7
 8011ca8:	f1c7 0904 	rsb	r9, r7, #4
 8011cac:	6123      	str	r3, [r4, #16]
 8011cae:	4649      	mov	r1, r9
 8011cb0:	f000 fb38 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d046      	beq.n	8011d46 <ucdr_deserialize_int32_t+0xd6>
 8011cb8:	7d23      	ldrb	r3, [r4, #20]
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	d05c      	beq.n	8011d78 <ucdr_deserialize_int32_t+0x108>
 8011cbe:	78f3      	ldrb	r3, [r6, #3]
 8011cc0:	702b      	strb	r3, [r5, #0]
 8011cc2:	2f00      	cmp	r7, #0
 8011cc4:	d04c      	beq.n	8011d60 <ucdr_deserialize_int32_t+0xf0>
 8011cc6:	78b3      	ldrb	r3, [r6, #2]
 8011cc8:	2f01      	cmp	r7, #1
 8011cca:	706b      	strb	r3, [r5, #1]
 8011ccc:	f105 0302 	add.w	r3, r5, #2
 8011cd0:	d04a      	beq.n	8011d68 <ucdr_deserialize_int32_t+0xf8>
 8011cd2:	7873      	ldrb	r3, [r6, #1]
 8011cd4:	2f02      	cmp	r7, #2
 8011cd6:	70ab      	strb	r3, [r5, #2]
 8011cd8:	f105 0303 	add.w	r3, r5, #3
 8011cdc:	d048      	beq.n	8011d70 <ucdr_deserialize_int32_t+0x100>
 8011cde:	7833      	ldrb	r3, [r6, #0]
 8011ce0:	70eb      	strb	r3, [r5, #3]
 8011ce2:	6923      	ldr	r3, [r4, #16]
 8011ce4:	2104      	movs	r1, #4
 8011ce6:	68a2      	ldr	r2, [r4, #8]
 8011ce8:	3304      	adds	r3, #4
 8011cea:	7da0      	ldrb	r0, [r4, #22]
 8011cec:	444a      	add	r2, r9
 8011cee:	7561      	strb	r1, [r4, #21]
 8011cf0:	1bdb      	subs	r3, r3, r7
 8011cf2:	f080 0001 	eor.w	r0, r0, #1
 8011cf6:	60a2      	str	r2, [r4, #8]
 8011cf8:	6123      	str	r3, [r4, #16]
 8011cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cfe:	2104      	movs	r1, #4
 8011d00:	4620      	mov	r0, r4
 8011d02:	f000 fb0f 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011d06:	b1b0      	cbz	r0, 8011d36 <ucdr_deserialize_int32_t+0xc6>
 8011d08:	7d23      	ldrb	r3, [r4, #20]
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	68a3      	ldr	r3, [r4, #8]
 8011d0e:	d017      	beq.n	8011d40 <ucdr_deserialize_int32_t+0xd0>
 8011d10:	78db      	ldrb	r3, [r3, #3]
 8011d12:	702b      	strb	r3, [r5, #0]
 8011d14:	68a3      	ldr	r3, [r4, #8]
 8011d16:	789b      	ldrb	r3, [r3, #2]
 8011d18:	706b      	strb	r3, [r5, #1]
 8011d1a:	68a3      	ldr	r3, [r4, #8]
 8011d1c:	785b      	ldrb	r3, [r3, #1]
 8011d1e:	70ab      	strb	r3, [r5, #2]
 8011d20:	68a3      	ldr	r3, [r4, #8]
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	70eb      	strb	r3, [r5, #3]
 8011d26:	2104      	movs	r1, #4
 8011d28:	68a2      	ldr	r2, [r4, #8]
 8011d2a:	6923      	ldr	r3, [r4, #16]
 8011d2c:	440a      	add	r2, r1
 8011d2e:	7561      	strb	r1, [r4, #21]
 8011d30:	440b      	add	r3, r1
 8011d32:	60a2      	str	r2, [r4, #8]
 8011d34:	6123      	str	r3, [r4, #16]
 8011d36:	7da0      	ldrb	r0, [r4, #22]
 8011d38:	f080 0001 	eor.w	r0, r0, #1
 8011d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	602b      	str	r3, [r5, #0]
 8011d44:	e7ef      	b.n	8011d26 <ucdr_deserialize_int32_t+0xb6>
 8011d46:	68a2      	ldr	r2, [r4, #8]
 8011d48:	6923      	ldr	r3, [r4, #16]
 8011d4a:	1bd2      	subs	r2, r2, r7
 8011d4c:	7da0      	ldrb	r0, [r4, #22]
 8011d4e:	1bdb      	subs	r3, r3, r7
 8011d50:	f884 8015 	strb.w	r8, [r4, #21]
 8011d54:	f080 0001 	eor.w	r0, r0, #1
 8011d58:	60a2      	str	r2, [r4, #8]
 8011d5a:	6123      	str	r3, [r4, #16]
 8011d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d60:	68a3      	ldr	r3, [r4, #8]
 8011d62:	789b      	ldrb	r3, [r3, #2]
 8011d64:	706b      	strb	r3, [r5, #1]
 8011d66:	1cab      	adds	r3, r5, #2
 8011d68:	68a2      	ldr	r2, [r4, #8]
 8011d6a:	7852      	ldrb	r2, [r2, #1]
 8011d6c:	f803 2b01 	strb.w	r2, [r3], #1
 8011d70:	68a2      	ldr	r2, [r4, #8]
 8011d72:	7812      	ldrb	r2, [r2, #0]
 8011d74:	701a      	strb	r2, [r3, #0]
 8011d76:	e7b4      	b.n	8011ce2 <ucdr_deserialize_int32_t+0x72>
 8011d78:	4631      	mov	r1, r6
 8011d7a:	463a      	mov	r2, r7
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	f001 ff54 	bl	8013c2a <memcpy>
 8011d82:	464a      	mov	r2, r9
 8011d84:	19e8      	adds	r0, r5, r7
 8011d86:	68a1      	ldr	r1, [r4, #8]
 8011d88:	f001 ff4f 	bl	8013c2a <memcpy>
 8011d8c:	e7a9      	b.n	8011ce2 <ucdr_deserialize_int32_t+0x72>
 8011d8e:	bf00      	nop

08011d90 <ucdr_serialize_float>:
 8011d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d94:	4604      	mov	r4, r0
 8011d96:	b082      	sub	sp, #8
 8011d98:	2104      	movs	r1, #4
 8011d9a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011d9e:	f000 fae5 	bl	801236c <ucdr_buffer_alignment>
 8011da2:	4601      	mov	r1, r0
 8011da4:	4620      	mov	r0, r4
 8011da6:	7d67      	ldrb	r7, [r4, #21]
 8011da8:	f000 fb24 	bl	80123f4 <ucdr_advance_buffer>
 8011dac:	2104      	movs	r1, #4
 8011dae:	4620      	mov	r0, r4
 8011db0:	f000 faac 	bl	801230c <ucdr_check_buffer_available_for>
 8011db4:	2800      	cmp	r0, #0
 8011db6:	d139      	bne.n	8011e2c <ucdr_serialize_float+0x9c>
 8011db8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011dbc:	42ab      	cmp	r3, r5
 8011dbe:	d930      	bls.n	8011e22 <ucdr_serialize_float+0x92>
 8011dc0:	1b5e      	subs	r6, r3, r5
 8011dc2:	60a3      	str	r3, [r4, #8]
 8011dc4:	6923      	ldr	r3, [r4, #16]
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	f1c6 0804 	rsb	r8, r6, #4
 8011dcc:	4433      	add	r3, r6
 8011dce:	4641      	mov	r1, r8
 8011dd0:	6123      	str	r3, [r4, #16]
 8011dd2:	f000 faa7 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d04c      	beq.n	8011e74 <ucdr_serialize_float+0xe4>
 8011dda:	7d23      	ldrb	r3, [r4, #20]
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d063      	beq.n	8011ea8 <ucdr_serialize_float+0x118>
 8011de0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011de4:	702b      	strb	r3, [r5, #0]
 8011de6:	2e00      	cmp	r6, #0
 8011de8:	d051      	beq.n	8011e8e <ucdr_serialize_float+0xfe>
 8011dea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011dee:	2e01      	cmp	r6, #1
 8011df0:	706b      	strb	r3, [r5, #1]
 8011df2:	d050      	beq.n	8011e96 <ucdr_serialize_float+0x106>
 8011df4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011df8:	2e02      	cmp	r6, #2
 8011dfa:	70ab      	strb	r3, [r5, #2]
 8011dfc:	d04f      	beq.n	8011e9e <ucdr_serialize_float+0x10e>
 8011dfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011e02:	70eb      	strb	r3, [r5, #3]
 8011e04:	6923      	ldr	r3, [r4, #16]
 8011e06:	2104      	movs	r1, #4
 8011e08:	68a2      	ldr	r2, [r4, #8]
 8011e0a:	3304      	adds	r3, #4
 8011e0c:	7da0      	ldrb	r0, [r4, #22]
 8011e0e:	4442      	add	r2, r8
 8011e10:	7561      	strb	r1, [r4, #21]
 8011e12:	1b9e      	subs	r6, r3, r6
 8011e14:	f080 0001 	eor.w	r0, r0, #1
 8011e18:	60a2      	str	r2, [r4, #8]
 8011e1a:	6126      	str	r6, [r4, #16]
 8011e1c:	b002      	add	sp, #8
 8011e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e22:	2104      	movs	r1, #4
 8011e24:	4620      	mov	r0, r4
 8011e26:	f000 fa7d 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011e2a:	b1d0      	cbz	r0, 8011e62 <ucdr_serialize_float+0xd2>
 8011e2c:	7d23      	ldrb	r3, [r4, #20]
 8011e2e:	2b01      	cmp	r3, #1
 8011e30:	68a3      	ldr	r3, [r4, #8]
 8011e32:	d01c      	beq.n	8011e6e <ucdr_serialize_float+0xde>
 8011e34:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011e38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e3c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011e40:	7018      	strb	r0, [r3, #0]
 8011e42:	68a3      	ldr	r3, [r4, #8]
 8011e44:	705a      	strb	r2, [r3, #1]
 8011e46:	68a3      	ldr	r3, [r4, #8]
 8011e48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e4c:	7099      	strb	r1, [r3, #2]
 8011e4e:	68a3      	ldr	r3, [r4, #8]
 8011e50:	70da      	strb	r2, [r3, #3]
 8011e52:	2104      	movs	r1, #4
 8011e54:	68a2      	ldr	r2, [r4, #8]
 8011e56:	6923      	ldr	r3, [r4, #16]
 8011e58:	440a      	add	r2, r1
 8011e5a:	7561      	strb	r1, [r4, #21]
 8011e5c:	440b      	add	r3, r1
 8011e5e:	60a2      	str	r2, [r4, #8]
 8011e60:	6123      	str	r3, [r4, #16]
 8011e62:	7da0      	ldrb	r0, [r4, #22]
 8011e64:	f080 0001 	eor.w	r0, r0, #1
 8011e68:	b002      	add	sp, #8
 8011e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e6e:	9a01      	ldr	r2, [sp, #4]
 8011e70:	601a      	str	r2, [r3, #0]
 8011e72:	e7ee      	b.n	8011e52 <ucdr_serialize_float+0xc2>
 8011e74:	68a2      	ldr	r2, [r4, #8]
 8011e76:	6923      	ldr	r3, [r4, #16]
 8011e78:	7da0      	ldrb	r0, [r4, #22]
 8011e7a:	1b92      	subs	r2, r2, r6
 8011e7c:	1b9b      	subs	r3, r3, r6
 8011e7e:	7567      	strb	r7, [r4, #21]
 8011e80:	f080 0001 	eor.w	r0, r0, #1
 8011e84:	60a2      	str	r2, [r4, #8]
 8011e86:	6123      	str	r3, [r4, #16]
 8011e88:	b002      	add	sp, #8
 8011e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e8e:	68a3      	ldr	r3, [r4, #8]
 8011e90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e94:	701a      	strb	r2, [r3, #0]
 8011e96:	68a3      	ldr	r3, [r4, #8]
 8011e98:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e9c:	701a      	strb	r2, [r3, #0]
 8011e9e:	68a3      	ldr	r3, [r4, #8]
 8011ea0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011ea4:	701a      	strb	r2, [r3, #0]
 8011ea6:	e7ad      	b.n	8011e04 <ucdr_serialize_float+0x74>
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	ad01      	add	r5, sp, #4
 8011eac:	4632      	mov	r2, r6
 8011eae:	4629      	mov	r1, r5
 8011eb0:	f001 febb 	bl	8013c2a <memcpy>
 8011eb4:	4642      	mov	r2, r8
 8011eb6:	19a9      	adds	r1, r5, r6
 8011eb8:	68a0      	ldr	r0, [r4, #8]
 8011eba:	f001 feb6 	bl	8013c2a <memcpy>
 8011ebe:	e7a1      	b.n	8011e04 <ucdr_serialize_float+0x74>

08011ec0 <ucdr_deserialize_float>:
 8011ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	460d      	mov	r5, r1
 8011ec8:	2104      	movs	r1, #4
 8011eca:	f000 fa4f 	bl	801236c <ucdr_buffer_alignment>
 8011ece:	4601      	mov	r1, r0
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011ed6:	f000 fa8d 	bl	80123f4 <ucdr_advance_buffer>
 8011eda:	2104      	movs	r1, #4
 8011edc:	4620      	mov	r0, r4
 8011ede:	f000 fa15 	bl	801230c <ucdr_check_buffer_available_for>
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	d138      	bne.n	8011f58 <ucdr_deserialize_float+0x98>
 8011ee6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011eea:	42b7      	cmp	r7, r6
 8011eec:	d92f      	bls.n	8011f4e <ucdr_deserialize_float+0x8e>
 8011eee:	6923      	ldr	r3, [r4, #16]
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	60a7      	str	r7, [r4, #8]
 8011ef4:	1bbf      	subs	r7, r7, r6
 8011ef6:	443b      	add	r3, r7
 8011ef8:	f1c7 0904 	rsb	r9, r7, #4
 8011efc:	6123      	str	r3, [r4, #16]
 8011efe:	4649      	mov	r1, r9
 8011f00:	f000 fa10 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011f04:	2800      	cmp	r0, #0
 8011f06:	d046      	beq.n	8011f96 <ucdr_deserialize_float+0xd6>
 8011f08:	7d23      	ldrb	r3, [r4, #20]
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d05c      	beq.n	8011fc8 <ucdr_deserialize_float+0x108>
 8011f0e:	78f3      	ldrb	r3, [r6, #3]
 8011f10:	702b      	strb	r3, [r5, #0]
 8011f12:	2f00      	cmp	r7, #0
 8011f14:	d04c      	beq.n	8011fb0 <ucdr_deserialize_float+0xf0>
 8011f16:	78b3      	ldrb	r3, [r6, #2]
 8011f18:	2f01      	cmp	r7, #1
 8011f1a:	706b      	strb	r3, [r5, #1]
 8011f1c:	f105 0302 	add.w	r3, r5, #2
 8011f20:	d04a      	beq.n	8011fb8 <ucdr_deserialize_float+0xf8>
 8011f22:	7873      	ldrb	r3, [r6, #1]
 8011f24:	2f02      	cmp	r7, #2
 8011f26:	70ab      	strb	r3, [r5, #2]
 8011f28:	f105 0303 	add.w	r3, r5, #3
 8011f2c:	d048      	beq.n	8011fc0 <ucdr_deserialize_float+0x100>
 8011f2e:	7833      	ldrb	r3, [r6, #0]
 8011f30:	70eb      	strb	r3, [r5, #3]
 8011f32:	6923      	ldr	r3, [r4, #16]
 8011f34:	2104      	movs	r1, #4
 8011f36:	68a2      	ldr	r2, [r4, #8]
 8011f38:	3304      	adds	r3, #4
 8011f3a:	7da0      	ldrb	r0, [r4, #22]
 8011f3c:	444a      	add	r2, r9
 8011f3e:	7561      	strb	r1, [r4, #21]
 8011f40:	1bdb      	subs	r3, r3, r7
 8011f42:	f080 0001 	eor.w	r0, r0, #1
 8011f46:	60a2      	str	r2, [r4, #8]
 8011f48:	6123      	str	r3, [r4, #16]
 8011f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f4e:	2104      	movs	r1, #4
 8011f50:	4620      	mov	r0, r4
 8011f52:	f000 f9e7 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8011f56:	b1b0      	cbz	r0, 8011f86 <ucdr_deserialize_float+0xc6>
 8011f58:	7d23      	ldrb	r3, [r4, #20]
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	68a3      	ldr	r3, [r4, #8]
 8011f5e:	d017      	beq.n	8011f90 <ucdr_deserialize_float+0xd0>
 8011f60:	78db      	ldrb	r3, [r3, #3]
 8011f62:	702b      	strb	r3, [r5, #0]
 8011f64:	68a3      	ldr	r3, [r4, #8]
 8011f66:	789b      	ldrb	r3, [r3, #2]
 8011f68:	706b      	strb	r3, [r5, #1]
 8011f6a:	68a3      	ldr	r3, [r4, #8]
 8011f6c:	785b      	ldrb	r3, [r3, #1]
 8011f6e:	70ab      	strb	r3, [r5, #2]
 8011f70:	68a3      	ldr	r3, [r4, #8]
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	70eb      	strb	r3, [r5, #3]
 8011f76:	2104      	movs	r1, #4
 8011f78:	68a2      	ldr	r2, [r4, #8]
 8011f7a:	6923      	ldr	r3, [r4, #16]
 8011f7c:	440a      	add	r2, r1
 8011f7e:	7561      	strb	r1, [r4, #21]
 8011f80:	440b      	add	r3, r1
 8011f82:	60a2      	str	r2, [r4, #8]
 8011f84:	6123      	str	r3, [r4, #16]
 8011f86:	7da0      	ldrb	r0, [r4, #22]
 8011f88:	f080 0001 	eor.w	r0, r0, #1
 8011f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	602b      	str	r3, [r5, #0]
 8011f94:	e7ef      	b.n	8011f76 <ucdr_deserialize_float+0xb6>
 8011f96:	68a2      	ldr	r2, [r4, #8]
 8011f98:	6923      	ldr	r3, [r4, #16]
 8011f9a:	1bd2      	subs	r2, r2, r7
 8011f9c:	7da0      	ldrb	r0, [r4, #22]
 8011f9e:	1bdb      	subs	r3, r3, r7
 8011fa0:	f884 8015 	strb.w	r8, [r4, #21]
 8011fa4:	f080 0001 	eor.w	r0, r0, #1
 8011fa8:	60a2      	str	r2, [r4, #8]
 8011faa:	6123      	str	r3, [r4, #16]
 8011fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fb0:	68a3      	ldr	r3, [r4, #8]
 8011fb2:	789b      	ldrb	r3, [r3, #2]
 8011fb4:	706b      	strb	r3, [r5, #1]
 8011fb6:	1cab      	adds	r3, r5, #2
 8011fb8:	68a2      	ldr	r2, [r4, #8]
 8011fba:	7852      	ldrb	r2, [r2, #1]
 8011fbc:	f803 2b01 	strb.w	r2, [r3], #1
 8011fc0:	68a2      	ldr	r2, [r4, #8]
 8011fc2:	7812      	ldrb	r2, [r2, #0]
 8011fc4:	701a      	strb	r2, [r3, #0]
 8011fc6:	e7b4      	b.n	8011f32 <ucdr_deserialize_float+0x72>
 8011fc8:	4631      	mov	r1, r6
 8011fca:	463a      	mov	r2, r7
 8011fcc:	4628      	mov	r0, r5
 8011fce:	f001 fe2c 	bl	8013c2a <memcpy>
 8011fd2:	464a      	mov	r2, r9
 8011fd4:	19e8      	adds	r0, r5, r7
 8011fd6:	68a1      	ldr	r1, [r4, #8]
 8011fd8:	f001 fe27 	bl	8013c2a <memcpy>
 8011fdc:	e7a9      	b.n	8011f32 <ucdr_deserialize_float+0x72>
 8011fde:	bf00      	nop

08011fe0 <ucdr_serialize_double>:
 8011fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	2108      	movs	r1, #8
 8011fea:	ed8d 0b00 	vstr	d0, [sp]
 8011fee:	f000 f9bd 	bl	801236c <ucdr_buffer_alignment>
 8011ff2:	4601      	mov	r1, r0
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	7d67      	ldrb	r7, [r4, #21]
 8011ff8:	f000 f9fc 	bl	80123f4 <ucdr_advance_buffer>
 8011ffc:	2108      	movs	r1, #8
 8011ffe:	4620      	mov	r0, r4
 8012000:	f000 f984 	bl	801230c <ucdr_check_buffer_available_for>
 8012004:	2800      	cmp	r0, #0
 8012006:	d14e      	bne.n	80120a6 <ucdr_serialize_double+0xc6>
 8012008:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801200c:	42ab      	cmp	r3, r5
 801200e:	d945      	bls.n	801209c <ucdr_serialize_double+0xbc>
 8012010:	1b5e      	subs	r6, r3, r5
 8012012:	60a3      	str	r3, [r4, #8]
 8012014:	6923      	ldr	r3, [r4, #16]
 8012016:	4620      	mov	r0, r4
 8012018:	f1c6 0808 	rsb	r8, r6, #8
 801201c:	4433      	add	r3, r6
 801201e:	4641      	mov	r1, r8
 8012020:	6123      	str	r3, [r4, #16]
 8012022:	f000 f97f 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8012026:	2800      	cmp	r0, #0
 8012028:	d074      	beq.n	8012114 <ucdr_serialize_double+0x134>
 801202a:	7d23      	ldrb	r3, [r4, #20]
 801202c:	2b01      	cmp	r3, #1
 801202e:	f000 809b 	beq.w	8012168 <ucdr_serialize_double+0x188>
 8012032:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012036:	702b      	strb	r3, [r5, #0]
 8012038:	2e00      	cmp	r6, #0
 801203a:	d078      	beq.n	801212e <ucdr_serialize_double+0x14e>
 801203c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012040:	2e01      	cmp	r6, #1
 8012042:	706b      	strb	r3, [r5, #1]
 8012044:	d077      	beq.n	8012136 <ucdr_serialize_double+0x156>
 8012046:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801204a:	2e02      	cmp	r6, #2
 801204c:	70ab      	strb	r3, [r5, #2]
 801204e:	d076      	beq.n	801213e <ucdr_serialize_double+0x15e>
 8012050:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012054:	2e03      	cmp	r6, #3
 8012056:	70eb      	strb	r3, [r5, #3]
 8012058:	d075      	beq.n	8012146 <ucdr_serialize_double+0x166>
 801205a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801205e:	2e04      	cmp	r6, #4
 8012060:	712b      	strb	r3, [r5, #4]
 8012062:	d074      	beq.n	801214e <ucdr_serialize_double+0x16e>
 8012064:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012068:	2e05      	cmp	r6, #5
 801206a:	716b      	strb	r3, [r5, #5]
 801206c:	d073      	beq.n	8012156 <ucdr_serialize_double+0x176>
 801206e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012072:	2e06      	cmp	r6, #6
 8012074:	71ab      	strb	r3, [r5, #6]
 8012076:	d072      	beq.n	801215e <ucdr_serialize_double+0x17e>
 8012078:	f89d 3000 	ldrb.w	r3, [sp]
 801207c:	71eb      	strb	r3, [r5, #7]
 801207e:	6923      	ldr	r3, [r4, #16]
 8012080:	2108      	movs	r1, #8
 8012082:	68a2      	ldr	r2, [r4, #8]
 8012084:	3308      	adds	r3, #8
 8012086:	7da0      	ldrb	r0, [r4, #22]
 8012088:	4442      	add	r2, r8
 801208a:	7561      	strb	r1, [r4, #21]
 801208c:	1b9e      	subs	r6, r3, r6
 801208e:	f080 0001 	eor.w	r0, r0, #1
 8012092:	60a2      	str	r2, [r4, #8]
 8012094:	6126      	str	r6, [r4, #16]
 8012096:	b002      	add	sp, #8
 8012098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801209c:	2108      	movs	r1, #8
 801209e:	4620      	mov	r0, r4
 80120a0:	f000 f940 	bl	8012324 <ucdr_check_final_buffer_behavior>
 80120a4:	b350      	cbz	r0, 80120fc <ucdr_serialize_double+0x11c>
 80120a6:	7d23      	ldrb	r3, [r4, #20]
 80120a8:	2b01      	cmp	r3, #1
 80120aa:	d02d      	beq.n	8012108 <ucdr_serialize_double+0x128>
 80120ac:	68a3      	ldr	r3, [r4, #8]
 80120ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80120b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80120ba:	7018      	strb	r0, [r3, #0]
 80120bc:	68a3      	ldr	r3, [r4, #8]
 80120be:	705a      	strb	r2, [r3, #1]
 80120c0:	68a3      	ldr	r3, [r4, #8]
 80120c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80120c6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80120ca:	7099      	strb	r1, [r3, #2]
 80120cc:	68a3      	ldr	r3, [r4, #8]
 80120ce:	70da      	strb	r2, [r3, #3]
 80120d0:	68a3      	ldr	r3, [r4, #8]
 80120d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80120d6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80120da:	7118      	strb	r0, [r3, #4]
 80120dc:	68a3      	ldr	r3, [r4, #8]
 80120de:	715a      	strb	r2, [r3, #5]
 80120e0:	68a3      	ldr	r3, [r4, #8]
 80120e2:	f89d 2000 	ldrb.w	r2, [sp]
 80120e6:	7199      	strb	r1, [r3, #6]
 80120e8:	68a3      	ldr	r3, [r4, #8]
 80120ea:	71da      	strb	r2, [r3, #7]
 80120ec:	2108      	movs	r1, #8
 80120ee:	68a2      	ldr	r2, [r4, #8]
 80120f0:	6923      	ldr	r3, [r4, #16]
 80120f2:	440a      	add	r2, r1
 80120f4:	7561      	strb	r1, [r4, #21]
 80120f6:	440b      	add	r3, r1
 80120f8:	60a2      	str	r2, [r4, #8]
 80120fa:	6123      	str	r3, [r4, #16]
 80120fc:	7da0      	ldrb	r0, [r4, #22]
 80120fe:	f080 0001 	eor.w	r0, r0, #1
 8012102:	b002      	add	sp, #8
 8012104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012108:	466b      	mov	r3, sp
 801210a:	68a2      	ldr	r2, [r4, #8]
 801210c:	cb03      	ldmia	r3!, {r0, r1}
 801210e:	6010      	str	r0, [r2, #0]
 8012110:	6051      	str	r1, [r2, #4]
 8012112:	e7eb      	b.n	80120ec <ucdr_serialize_double+0x10c>
 8012114:	68a2      	ldr	r2, [r4, #8]
 8012116:	6923      	ldr	r3, [r4, #16]
 8012118:	7da0      	ldrb	r0, [r4, #22]
 801211a:	1b92      	subs	r2, r2, r6
 801211c:	1b9b      	subs	r3, r3, r6
 801211e:	7567      	strb	r7, [r4, #21]
 8012120:	f080 0001 	eor.w	r0, r0, #1
 8012124:	60a2      	str	r2, [r4, #8]
 8012126:	6123      	str	r3, [r4, #16]
 8012128:	b002      	add	sp, #8
 801212a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801212e:	68a3      	ldr	r3, [r4, #8]
 8012130:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012134:	701a      	strb	r2, [r3, #0]
 8012136:	68a3      	ldr	r3, [r4, #8]
 8012138:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801213c:	701a      	strb	r2, [r3, #0]
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012144:	701a      	strb	r2, [r3, #0]
 8012146:	68a3      	ldr	r3, [r4, #8]
 8012148:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801214c:	701a      	strb	r2, [r3, #0]
 801214e:	68a3      	ldr	r3, [r4, #8]
 8012150:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012154:	701a      	strb	r2, [r3, #0]
 8012156:	68a3      	ldr	r3, [r4, #8]
 8012158:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801215c:	701a      	strb	r2, [r3, #0]
 801215e:	68a3      	ldr	r3, [r4, #8]
 8012160:	f89d 2000 	ldrb.w	r2, [sp]
 8012164:	701a      	strb	r2, [r3, #0]
 8012166:	e78a      	b.n	801207e <ucdr_serialize_double+0x9e>
 8012168:	4628      	mov	r0, r5
 801216a:	466d      	mov	r5, sp
 801216c:	4632      	mov	r2, r6
 801216e:	4629      	mov	r1, r5
 8012170:	f001 fd5b 	bl	8013c2a <memcpy>
 8012174:	4642      	mov	r2, r8
 8012176:	19a9      	adds	r1, r5, r6
 8012178:	68a0      	ldr	r0, [r4, #8]
 801217a:	f001 fd56 	bl	8013c2a <memcpy>
 801217e:	e77e      	b.n	801207e <ucdr_serialize_double+0x9e>

08012180 <ucdr_deserialize_double>:
 8012180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012184:	4604      	mov	r4, r0
 8012186:	460d      	mov	r5, r1
 8012188:	2108      	movs	r1, #8
 801218a:	f000 f8ef 	bl	801236c <ucdr_buffer_alignment>
 801218e:	4601      	mov	r1, r0
 8012190:	4620      	mov	r0, r4
 8012192:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012196:	f000 f92d 	bl	80123f4 <ucdr_advance_buffer>
 801219a:	2108      	movs	r1, #8
 801219c:	4620      	mov	r0, r4
 801219e:	f000 f8b5 	bl	801230c <ucdr_check_buffer_available_for>
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d151      	bne.n	801224a <ucdr_deserialize_double+0xca>
 80121a6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80121aa:	42be      	cmp	r6, r7
 80121ac:	d948      	bls.n	8012240 <ucdr_deserialize_double+0xc0>
 80121ae:	6923      	ldr	r3, [r4, #16]
 80121b0:	4620      	mov	r0, r4
 80121b2:	60a6      	str	r6, [r4, #8]
 80121b4:	1bf6      	subs	r6, r6, r7
 80121b6:	4433      	add	r3, r6
 80121b8:	f1c6 0908 	rsb	r9, r6, #8
 80121bc:	6123      	str	r3, [r4, #16]
 80121be:	4649      	mov	r1, r9
 80121c0:	f000 f8b0 	bl	8012324 <ucdr_check_final_buffer_behavior>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d06d      	beq.n	80122a4 <ucdr_deserialize_double+0x124>
 80121c8:	7d23      	ldrb	r3, [r4, #20]
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	f000 8093 	beq.w	80122f6 <ucdr_deserialize_double+0x176>
 80121d0:	79fb      	ldrb	r3, [r7, #7]
 80121d2:	702b      	strb	r3, [r5, #0]
 80121d4:	2e00      	cmp	r6, #0
 80121d6:	d072      	beq.n	80122be <ucdr_deserialize_double+0x13e>
 80121d8:	79bb      	ldrb	r3, [r7, #6]
 80121da:	2e01      	cmp	r6, #1
 80121dc:	706b      	strb	r3, [r5, #1]
 80121de:	f105 0302 	add.w	r3, r5, #2
 80121e2:	d070      	beq.n	80122c6 <ucdr_deserialize_double+0x146>
 80121e4:	797b      	ldrb	r3, [r7, #5]
 80121e6:	2e02      	cmp	r6, #2
 80121e8:	70ab      	strb	r3, [r5, #2]
 80121ea:	f105 0303 	add.w	r3, r5, #3
 80121ee:	d06e      	beq.n	80122ce <ucdr_deserialize_double+0x14e>
 80121f0:	793b      	ldrb	r3, [r7, #4]
 80121f2:	2e03      	cmp	r6, #3
 80121f4:	70eb      	strb	r3, [r5, #3]
 80121f6:	f105 0304 	add.w	r3, r5, #4
 80121fa:	d06c      	beq.n	80122d6 <ucdr_deserialize_double+0x156>
 80121fc:	78fb      	ldrb	r3, [r7, #3]
 80121fe:	2e04      	cmp	r6, #4
 8012200:	712b      	strb	r3, [r5, #4]
 8012202:	f105 0305 	add.w	r3, r5, #5
 8012206:	d06a      	beq.n	80122de <ucdr_deserialize_double+0x15e>
 8012208:	78bb      	ldrb	r3, [r7, #2]
 801220a:	2e05      	cmp	r6, #5
 801220c:	716b      	strb	r3, [r5, #5]
 801220e:	f105 0306 	add.w	r3, r5, #6
 8012212:	d068      	beq.n	80122e6 <ucdr_deserialize_double+0x166>
 8012214:	787b      	ldrb	r3, [r7, #1]
 8012216:	2e06      	cmp	r6, #6
 8012218:	71ab      	strb	r3, [r5, #6]
 801221a:	f105 0307 	add.w	r3, r5, #7
 801221e:	d066      	beq.n	80122ee <ucdr_deserialize_double+0x16e>
 8012220:	783b      	ldrb	r3, [r7, #0]
 8012222:	71eb      	strb	r3, [r5, #7]
 8012224:	6923      	ldr	r3, [r4, #16]
 8012226:	2108      	movs	r1, #8
 8012228:	68a2      	ldr	r2, [r4, #8]
 801222a:	3308      	adds	r3, #8
 801222c:	7da0      	ldrb	r0, [r4, #22]
 801222e:	444a      	add	r2, r9
 8012230:	7561      	strb	r1, [r4, #21]
 8012232:	1b9e      	subs	r6, r3, r6
 8012234:	f080 0001 	eor.w	r0, r0, #1
 8012238:	60a2      	str	r2, [r4, #8]
 801223a:	6126      	str	r6, [r4, #16]
 801223c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012240:	2108      	movs	r1, #8
 8012242:	4620      	mov	r0, r4
 8012244:	f000 f86e 	bl	8012324 <ucdr_check_final_buffer_behavior>
 8012248:	b310      	cbz	r0, 8012290 <ucdr_deserialize_double+0x110>
 801224a:	7d23      	ldrb	r3, [r4, #20]
 801224c:	2b01      	cmp	r3, #1
 801224e:	68a3      	ldr	r3, [r4, #8]
 8012250:	d023      	beq.n	801229a <ucdr_deserialize_double+0x11a>
 8012252:	79db      	ldrb	r3, [r3, #7]
 8012254:	702b      	strb	r3, [r5, #0]
 8012256:	68a3      	ldr	r3, [r4, #8]
 8012258:	799b      	ldrb	r3, [r3, #6]
 801225a:	706b      	strb	r3, [r5, #1]
 801225c:	68a3      	ldr	r3, [r4, #8]
 801225e:	795b      	ldrb	r3, [r3, #5]
 8012260:	70ab      	strb	r3, [r5, #2]
 8012262:	68a3      	ldr	r3, [r4, #8]
 8012264:	791b      	ldrb	r3, [r3, #4]
 8012266:	70eb      	strb	r3, [r5, #3]
 8012268:	68a3      	ldr	r3, [r4, #8]
 801226a:	78db      	ldrb	r3, [r3, #3]
 801226c:	712b      	strb	r3, [r5, #4]
 801226e:	68a3      	ldr	r3, [r4, #8]
 8012270:	789b      	ldrb	r3, [r3, #2]
 8012272:	716b      	strb	r3, [r5, #5]
 8012274:	68a3      	ldr	r3, [r4, #8]
 8012276:	785b      	ldrb	r3, [r3, #1]
 8012278:	71ab      	strb	r3, [r5, #6]
 801227a:	68a3      	ldr	r3, [r4, #8]
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	71eb      	strb	r3, [r5, #7]
 8012280:	2108      	movs	r1, #8
 8012282:	68a2      	ldr	r2, [r4, #8]
 8012284:	6923      	ldr	r3, [r4, #16]
 8012286:	440a      	add	r2, r1
 8012288:	7561      	strb	r1, [r4, #21]
 801228a:	440b      	add	r3, r1
 801228c:	60a2      	str	r2, [r4, #8]
 801228e:	6123      	str	r3, [r4, #16]
 8012290:	7da0      	ldrb	r0, [r4, #22]
 8012292:	f080 0001 	eor.w	r0, r0, #1
 8012296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	602a      	str	r2, [r5, #0]
 80122a0:	606b      	str	r3, [r5, #4]
 80122a2:	e7ed      	b.n	8012280 <ucdr_deserialize_double+0x100>
 80122a4:	68a2      	ldr	r2, [r4, #8]
 80122a6:	6923      	ldr	r3, [r4, #16]
 80122a8:	1b92      	subs	r2, r2, r6
 80122aa:	7da0      	ldrb	r0, [r4, #22]
 80122ac:	1b9b      	subs	r3, r3, r6
 80122ae:	f884 8015 	strb.w	r8, [r4, #21]
 80122b2:	f080 0001 	eor.w	r0, r0, #1
 80122b6:	60a2      	str	r2, [r4, #8]
 80122b8:	6123      	str	r3, [r4, #16]
 80122ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122be:	68a3      	ldr	r3, [r4, #8]
 80122c0:	799b      	ldrb	r3, [r3, #6]
 80122c2:	706b      	strb	r3, [r5, #1]
 80122c4:	1cab      	adds	r3, r5, #2
 80122c6:	68a2      	ldr	r2, [r4, #8]
 80122c8:	7952      	ldrb	r2, [r2, #5]
 80122ca:	f803 2b01 	strb.w	r2, [r3], #1
 80122ce:	68a2      	ldr	r2, [r4, #8]
 80122d0:	7912      	ldrb	r2, [r2, #4]
 80122d2:	f803 2b01 	strb.w	r2, [r3], #1
 80122d6:	68a2      	ldr	r2, [r4, #8]
 80122d8:	78d2      	ldrb	r2, [r2, #3]
 80122da:	f803 2b01 	strb.w	r2, [r3], #1
 80122de:	68a2      	ldr	r2, [r4, #8]
 80122e0:	7892      	ldrb	r2, [r2, #2]
 80122e2:	f803 2b01 	strb.w	r2, [r3], #1
 80122e6:	68a2      	ldr	r2, [r4, #8]
 80122e8:	7852      	ldrb	r2, [r2, #1]
 80122ea:	f803 2b01 	strb.w	r2, [r3], #1
 80122ee:	68a2      	ldr	r2, [r4, #8]
 80122f0:	7812      	ldrb	r2, [r2, #0]
 80122f2:	701a      	strb	r2, [r3, #0]
 80122f4:	e796      	b.n	8012224 <ucdr_deserialize_double+0xa4>
 80122f6:	4639      	mov	r1, r7
 80122f8:	4632      	mov	r2, r6
 80122fa:	4628      	mov	r0, r5
 80122fc:	f001 fc95 	bl	8013c2a <memcpy>
 8012300:	464a      	mov	r2, r9
 8012302:	19a8      	adds	r0, r5, r6
 8012304:	68a1      	ldr	r1, [r4, #8]
 8012306:	f001 fc90 	bl	8013c2a <memcpy>
 801230a:	e78b      	b.n	8012224 <ucdr_deserialize_double+0xa4>

0801230c <ucdr_check_buffer_available_for>:
 801230c:	7d83      	ldrb	r3, [r0, #22]
 801230e:	b93b      	cbnz	r3, 8012320 <ucdr_check_buffer_available_for+0x14>
 8012310:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012314:	4419      	add	r1, r3
 8012316:	4288      	cmp	r0, r1
 8012318:	bf34      	ite	cc
 801231a:	2000      	movcc	r0, #0
 801231c:	2001      	movcs	r0, #1
 801231e:	4770      	bx	lr
 8012320:	2000      	movs	r0, #0
 8012322:	4770      	bx	lr

08012324 <ucdr_check_final_buffer_behavior>:
 8012324:	7d83      	ldrb	r3, [r0, #22]
 8012326:	b943      	cbnz	r3, 801233a <ucdr_check_final_buffer_behavior+0x16>
 8012328:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801232c:	b510      	push	{r4, lr}
 801232e:	4291      	cmp	r1, r2
 8012330:	4604      	mov	r4, r0
 8012332:	d205      	bcs.n	8012340 <ucdr_check_final_buffer_behavior+0x1c>
 8012334:	2301      	movs	r3, #1
 8012336:	4618      	mov	r0, r3
 8012338:	bd10      	pop	{r4, pc}
 801233a:	2300      	movs	r3, #0
 801233c:	4618      	mov	r0, r3
 801233e:	4770      	bx	lr
 8012340:	6982      	ldr	r2, [r0, #24]
 8012342:	b13a      	cbz	r2, 8012354 <ucdr_check_final_buffer_behavior+0x30>
 8012344:	69c1      	ldr	r1, [r0, #28]
 8012346:	4790      	blx	r2
 8012348:	f080 0301 	eor.w	r3, r0, #1
 801234c:	75a0      	strb	r0, [r4, #22]
 801234e:	b2db      	uxtb	r3, r3
 8012350:	4618      	mov	r0, r3
 8012352:	bd10      	pop	{r4, pc}
 8012354:	2001      	movs	r0, #1
 8012356:	75a0      	strb	r0, [r4, #22]
 8012358:	e7fa      	b.n	8012350 <ucdr_check_final_buffer_behavior+0x2c>
 801235a:	bf00      	nop

0801235c <ucdr_alignment>:
 801235c:	fbb0 f2f1 	udiv	r2, r0, r1
 8012360:	fb02 0011 	mls	r0, r2, r1, r0
 8012364:	1e4b      	subs	r3, r1, #1
 8012366:	1a08      	subs	r0, r1, r0
 8012368:	4018      	ands	r0, r3
 801236a:	4770      	bx	lr

0801236c <ucdr_buffer_alignment>:
 801236c:	7d43      	ldrb	r3, [r0, #21]
 801236e:	428b      	cmp	r3, r1
 8012370:	d209      	bcs.n	8012386 <ucdr_buffer_alignment+0x1a>
 8012372:	6903      	ldr	r3, [r0, #16]
 8012374:	1e4a      	subs	r2, r1, #1
 8012376:	fbb3 f0f1 	udiv	r0, r3, r1
 801237a:	fb01 3010 	mls	r0, r1, r0, r3
 801237e:	1a09      	subs	r1, r1, r0
 8012380:	ea01 0002 	and.w	r0, r1, r2
 8012384:	4770      	bx	lr
 8012386:	2000      	movs	r0, #0
 8012388:	4770      	bx	lr
 801238a:	bf00      	nop

0801238c <ucdr_align_to>:
 801238c:	b538      	push	{r3, r4, r5, lr}
 801238e:	4604      	mov	r4, r0
 8012390:	460d      	mov	r5, r1
 8012392:	f7ff ffeb 	bl	801236c <ucdr_buffer_alignment>
 8012396:	68a3      	ldr	r3, [r4, #8]
 8012398:	7565      	strb	r5, [r4, #21]
 801239a:	181a      	adds	r2, r3, r0
 801239c:	6923      	ldr	r3, [r4, #16]
 801239e:	4418      	add	r0, r3
 80123a0:	6863      	ldr	r3, [r4, #4]
 80123a2:	4293      	cmp	r3, r2
 80123a4:	6120      	str	r0, [r4, #16]
 80123a6:	bf28      	it	cs
 80123a8:	4613      	movcs	r3, r2
 80123aa:	60a3      	str	r3, [r4, #8]
 80123ac:	bd38      	pop	{r3, r4, r5, pc}
 80123ae:	bf00      	nop

080123b0 <ucdr_buffer_remaining>:
 80123b0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80123b4:	1a10      	subs	r0, r2, r0
 80123b6:	4770      	bx	lr

080123b8 <ucdr_check_final_buffer_behavior_array>:
 80123b8:	b538      	push	{r3, r4, r5, lr}
 80123ba:	7d83      	ldrb	r3, [r0, #22]
 80123bc:	b9a3      	cbnz	r3, 80123e8 <ucdr_check_final_buffer_behavior_array+0x30>
 80123be:	4604      	mov	r4, r0
 80123c0:	460d      	mov	r5, r1
 80123c2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d300      	bcc.n	80123cc <ucdr_check_final_buffer_behavior_array+0x14>
 80123ca:	b931      	cbnz	r1, 80123da <ucdr_check_final_buffer_behavior_array+0x22>
 80123cc:	4620      	mov	r0, r4
 80123ce:	f7ff ffef 	bl	80123b0 <ucdr_buffer_remaining>
 80123d2:	42a8      	cmp	r0, r5
 80123d4:	bf28      	it	cs
 80123d6:	4628      	movcs	r0, r5
 80123d8:	bd38      	pop	{r3, r4, r5, pc}
 80123da:	6983      	ldr	r3, [r0, #24]
 80123dc:	b133      	cbz	r3, 80123ec <ucdr_check_final_buffer_behavior_array+0x34>
 80123de:	69c1      	ldr	r1, [r0, #28]
 80123e0:	4798      	blx	r3
 80123e2:	75a0      	strb	r0, [r4, #22]
 80123e4:	2800      	cmp	r0, #0
 80123e6:	d0f1      	beq.n	80123cc <ucdr_check_final_buffer_behavior_array+0x14>
 80123e8:	2000      	movs	r0, #0
 80123ea:	bd38      	pop	{r3, r4, r5, pc}
 80123ec:	2301      	movs	r3, #1
 80123ee:	7583      	strb	r3, [r0, #22]
 80123f0:	e7fa      	b.n	80123e8 <ucdr_check_final_buffer_behavior_array+0x30>
 80123f2:	bf00      	nop

080123f4 <ucdr_advance_buffer>:
 80123f4:	b538      	push	{r3, r4, r5, lr}
 80123f6:	4604      	mov	r4, r0
 80123f8:	460d      	mov	r5, r1
 80123fa:	f7ff ff87 	bl	801230c <ucdr_check_buffer_available_for>
 80123fe:	b178      	cbz	r0, 8012420 <ucdr_advance_buffer+0x2c>
 8012400:	6923      	ldr	r3, [r4, #16]
 8012402:	68a2      	ldr	r2, [r4, #8]
 8012404:	442b      	add	r3, r5
 8012406:	442a      	add	r2, r5
 8012408:	6123      	str	r3, [r4, #16]
 801240a:	2301      	movs	r3, #1
 801240c:	60a2      	str	r2, [r4, #8]
 801240e:	7563      	strb	r3, [r4, #21]
 8012410:	bd38      	pop	{r3, r4, r5, pc}
 8012412:	68a2      	ldr	r2, [r4, #8]
 8012414:	1a2d      	subs	r5, r5, r0
 8012416:	6923      	ldr	r3, [r4, #16]
 8012418:	4402      	add	r2, r0
 801241a:	4418      	add	r0, r3
 801241c:	60a2      	str	r2, [r4, #8]
 801241e:	6120      	str	r0, [r4, #16]
 8012420:	4629      	mov	r1, r5
 8012422:	2201      	movs	r2, #1
 8012424:	4620      	mov	r0, r4
 8012426:	f7ff ffc7 	bl	80123b8 <ucdr_check_final_buffer_behavior_array>
 801242a:	2800      	cmp	r0, #0
 801242c:	d1f1      	bne.n	8012412 <ucdr_advance_buffer+0x1e>
 801242e:	2301      	movs	r3, #1
 8012430:	7563      	strb	r3, [r4, #21]
 8012432:	bd38      	pop	{r3, r4, r5, pc}

08012434 <__default_zero_allocate>:
 8012434:	f001 b802 	b.w	801343c <calloc>

08012438 <__default_reallocate>:
 8012438:	f001 b8ec 	b.w	8013614 <realloc>

0801243c <__default_deallocate>:
 801243c:	f001 b834 	b.w	80134a8 <free>

08012440 <__default_allocate>:
 8012440:	f001 b82a 	b.w	8013498 <malloc>

08012444 <rcutils_get_default_allocator>:
 8012444:	b510      	push	{r4, lr}
 8012446:	4c05      	ldr	r4, [pc, #20]	@ (801245c <rcutils_get_default_allocator+0x18>)
 8012448:	4686      	mov	lr, r0
 801244a:	4684      	mov	ip, r0
 801244c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801244e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012452:	6823      	ldr	r3, [r4, #0]
 8012454:	4670      	mov	r0, lr
 8012456:	f8cc 3000 	str.w	r3, [ip]
 801245a:	bd10      	pop	{r4, pc}
 801245c:	24000df8 	.word	0x24000df8

08012460 <get_message_typesupport_handle_function>:
 8012460:	b510      	push	{r4, lr}
 8012462:	4604      	mov	r4, r0
 8012464:	6800      	ldr	r0, [r0, #0]
 8012466:	f7ed ff3b 	bl	80002e0 <strcmp>
 801246a:	2800      	cmp	r0, #0
 801246c:	bf0c      	ite	eq
 801246e:	4620      	moveq	r0, r4
 8012470:	2000      	movne	r0, #0
 8012472:	bd10      	pop	{r4, pc}

08012474 <get_service_typesupport_handle_function>:
 8012474:	b510      	push	{r4, lr}
 8012476:	4604      	mov	r4, r0
 8012478:	6800      	ldr	r0, [r0, #0]
 801247a:	f7ed ff31 	bl	80002e0 <strcmp>
 801247e:	2800      	cmp	r0, #0
 8012480:	bf0c      	ite	eq
 8012482:	4620      	moveq	r0, r4
 8012484:	2000      	movne	r0, #0
 8012486:	bd10      	pop	{r4, pc}

08012488 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801248c:	6805      	ldr	r5, [r0, #0]
 801248e:	4604      	mov	r4, r0
 8012490:	460e      	mov	r6, r1
 8012492:	4628      	mov	r0, r5
 8012494:	f7ed ff24 	bl	80002e0 <strcmp>
 8012498:	b1c8      	cbz	r0, 80124ce <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801249a:	4b11      	ldr	r3, [pc, #68]	@ (80124e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	429d      	cmp	r5, r3
 80124a0:	d112      	bne.n	80124c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80124a2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80124a6:	f8d8 4000 	ldr.w	r4, [r8]
 80124aa:	b16c      	cbz	r4, 80124c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80124ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80124b0:	2700      	movs	r7, #0
 80124b2:	3d04      	subs	r5, #4
 80124b4:	4631      	mov	r1, r6
 80124b6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80124ba:	f7ed ff11 	bl	80002e0 <strcmp>
 80124be:	00bb      	lsls	r3, r7, #2
 80124c0:	b140      	cbz	r0, 80124d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80124c2:	3701      	adds	r7, #1
 80124c4:	42bc      	cmp	r4, r7
 80124c6:	d1f5      	bne.n	80124b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80124c8:	2000      	movs	r0, #0
 80124ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ce:	4620      	mov	r0, r4
 80124d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80124d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124dc:	58d3      	ldr	r3, [r2, r3]
 80124de:	4718      	bx	r3
 80124e0:	24000e0c 	.word	0x24000e0c

080124e4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80124e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124e8:	6805      	ldr	r5, [r0, #0]
 80124ea:	4604      	mov	r4, r0
 80124ec:	460e      	mov	r6, r1
 80124ee:	4628      	mov	r0, r5
 80124f0:	f7ed fef6 	bl	80002e0 <strcmp>
 80124f4:	b1c8      	cbz	r0, 801252a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80124f6:	4b11      	ldr	r3, [pc, #68]	@ (801253c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	429d      	cmp	r5, r3
 80124fc:	d112      	bne.n	8012524 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80124fe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012502:	f8d8 4000 	ldr.w	r4, [r8]
 8012506:	b16c      	cbz	r4, 8012524 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8012508:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801250c:	2700      	movs	r7, #0
 801250e:	3d04      	subs	r5, #4
 8012510:	4631      	mov	r1, r6
 8012512:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012516:	f7ed fee3 	bl	80002e0 <strcmp>
 801251a:	00bb      	lsls	r3, r7, #2
 801251c:	b140      	cbz	r0, 8012530 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 801251e:	3701      	adds	r7, #1
 8012520:	42bc      	cmp	r4, r7
 8012522:	d1f5      	bne.n	8012510 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8012524:	2000      	movs	r0, #0
 8012526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801252a:	4620      	mov	r0, r4
 801252c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012530:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012538:	58d3      	ldr	r3, [r2, r3]
 801253a:	4718      	bx	r3
 801253c:	24000e0c 	.word	0x24000e0c

08012540 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8012540:	f000 bcb4 	b.w	8012eac <std_msgs__msg__Header__init>

08012544 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8012544:	f000 bcd6 	b.w	8012ef4 <std_msgs__msg__Header__fini>

08012548 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012548:	b508      	push	{r3, lr}
 801254a:	f7fe ffd3 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801254e:	4b06      	ldr	r3, [pc, #24]	@ (8012568 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012550:	4906      	ldr	r1, [pc, #24]	@ (801256c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	60c8      	str	r0, [r1, #12]
 8012556:	b10a      	cbz	r2, 801255c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8012558:	4803      	ldr	r0, [pc, #12]	@ (8012568 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801255a:	bd08      	pop	{r3, pc}
 801255c:	4a04      	ldr	r2, [pc, #16]	@ (8012570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801255e:	4802      	ldr	r0, [pc, #8]	@ (8012568 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012560:	6812      	ldr	r2, [r2, #0]
 8012562:	601a      	str	r2, [r3, #0]
 8012564:	bd08      	pop	{r3, pc}
 8012566:	bf00      	nop
 8012568:	24000e8c 	.word	0x24000e8c
 801256c:	24000e14 	.word	0x24000e14
 8012570:	24000e10 	.word	0x24000e10

08012574 <_Header__max_serialized_size>:
 8012574:	b500      	push	{lr}
 8012576:	b083      	sub	sp, #12
 8012578:	2301      	movs	r3, #1
 801257a:	2100      	movs	r1, #0
 801257c:	f10d 0007 	add.w	r0, sp, #7
 8012580:	f88d 3007 	strb.w	r3, [sp, #7]
 8012584:	f7ff f814 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8012588:	b003      	add	sp, #12
 801258a:	f85d fb04 	ldr.w	pc, [sp], #4
 801258e:	bf00      	nop

08012590 <get_serialized_size_std_msgs__msg__Header>:
 8012590:	b570      	push	{r4, r5, r6, lr}
 8012592:	4605      	mov	r5, r0
 8012594:	b168      	cbz	r0, 80125b2 <get_serialized_size_std_msgs__msg__Header+0x22>
 8012596:	460c      	mov	r4, r1
 8012598:	f7fe ffba 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 801259c:	2104      	movs	r1, #4
 801259e:	1826      	adds	r6, r4, r0
 80125a0:	f1c4 0405 	rsb	r4, r4, #5
 80125a4:	4630      	mov	r0, r6
 80125a6:	f7ff fed9 	bl	801235c <ucdr_alignment>
 80125aa:	68e9      	ldr	r1, [r5, #12]
 80125ac:	440c      	add	r4, r1
 80125ae:	4404      	add	r4, r0
 80125b0:	19a0      	adds	r0, r4, r6
 80125b2:	bd70      	pop	{r4, r5, r6, pc}

080125b4 <_Header__cdr_deserialize>:
 80125b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125b6:	460c      	mov	r4, r1
 80125b8:	b083      	sub	sp, #12
 80125ba:	b1e9      	cbz	r1, 80125f8 <_Header__cdr_deserialize+0x44>
 80125bc:	4606      	mov	r6, r0
 80125be:	f7ff f80b 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125c2:	4603      	mov	r3, r0
 80125c4:	4621      	mov	r1, r4
 80125c6:	4630      	mov	r0, r6
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	68db      	ldr	r3, [r3, #12]
 80125cc:	4798      	blx	r3
 80125ce:	6927      	ldr	r7, [r4, #16]
 80125d0:	ab01      	add	r3, sp, #4
 80125d2:	68a1      	ldr	r1, [r4, #8]
 80125d4:	463a      	mov	r2, r7
 80125d6:	4630      	mov	r0, r6
 80125d8:	f000 fc4e 	bl	8012e78 <ucdr_deserialize_sequence_char>
 80125dc:	9b01      	ldr	r3, [sp, #4]
 80125de:	4605      	mov	r5, r0
 80125e0:	b920      	cbnz	r0, 80125ec <_Header__cdr_deserialize+0x38>
 80125e2:	429f      	cmp	r7, r3
 80125e4:	d30c      	bcc.n	8012600 <_Header__cdr_deserialize+0x4c>
 80125e6:	4628      	mov	r0, r5
 80125e8:	b003      	add	sp, #12
 80125ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125ec:	b103      	cbz	r3, 80125f0 <_Header__cdr_deserialize+0x3c>
 80125ee:	3b01      	subs	r3, #1
 80125f0:	4628      	mov	r0, r5
 80125f2:	60e3      	str	r3, [r4, #12]
 80125f4:	b003      	add	sp, #12
 80125f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125f8:	460d      	mov	r5, r1
 80125fa:	4628      	mov	r0, r5
 80125fc:	b003      	add	sp, #12
 80125fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012600:	2101      	movs	r1, #1
 8012602:	4630      	mov	r0, r6
 8012604:	75b5      	strb	r5, [r6, #22]
 8012606:	7571      	strb	r1, [r6, #21]
 8012608:	60e5      	str	r5, [r4, #12]
 801260a:	f7ff febf 	bl	801238c <ucdr_align_to>
 801260e:	4630      	mov	r0, r6
 8012610:	9901      	ldr	r1, [sp, #4]
 8012612:	f7ff feef 	bl	80123f4 <ucdr_advance_buffer>
 8012616:	4628      	mov	r0, r5
 8012618:	b003      	add	sp, #12
 801261a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801261c <_Header__cdr_serialize>:
 801261c:	b308      	cbz	r0, 8012662 <_Header__cdr_serialize+0x46>
 801261e:	b570      	push	{r4, r5, r6, lr}
 8012620:	4604      	mov	r4, r0
 8012622:	460d      	mov	r5, r1
 8012624:	f7fe ffd8 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012628:	4603      	mov	r3, r0
 801262a:	4629      	mov	r1, r5
 801262c:	4620      	mov	r0, r4
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	689b      	ldr	r3, [r3, #8]
 8012632:	4798      	blx	r3
 8012634:	68a6      	ldr	r6, [r4, #8]
 8012636:	b15e      	cbz	r6, 8012650 <_Header__cdr_serialize+0x34>
 8012638:	4630      	mov	r0, r6
 801263a:	f7ed fe5b 	bl	80002f4 <strlen>
 801263e:	4603      	mov	r3, r0
 8012640:	1c42      	adds	r2, r0, #1
 8012642:	4631      	mov	r1, r6
 8012644:	4628      	mov	r0, r5
 8012646:	60e3      	str	r3, [r4, #12]
 8012648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801264c:	f000 bc02 	b.w	8012e54 <ucdr_serialize_sequence_char>
 8012650:	4633      	mov	r3, r6
 8012652:	4632      	mov	r2, r6
 8012654:	4631      	mov	r1, r6
 8012656:	4628      	mov	r0, r5
 8012658:	60e3      	str	r3, [r4, #12]
 801265a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801265e:	f000 bbf9 	b.w	8012e54 <ucdr_serialize_sequence_char>
 8012662:	4770      	bx	lr

08012664 <_Header__get_serialized_size>:
 8012664:	b538      	push	{r3, r4, r5, lr}
 8012666:	4604      	mov	r4, r0
 8012668:	b150      	cbz	r0, 8012680 <_Header__get_serialized_size+0x1c>
 801266a:	2100      	movs	r1, #0
 801266c:	f7fe ff50 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8012670:	2104      	movs	r1, #4
 8012672:	4605      	mov	r5, r0
 8012674:	f7ff fe72 	bl	801235c <ucdr_alignment>
 8012678:	68e2      	ldr	r2, [r4, #12]
 801267a:	3205      	adds	r2, #5
 801267c:	1953      	adds	r3, r2, r5
 801267e:	4418      	add	r0, r3
 8012680:	bd38      	pop	{r3, r4, r5, pc}
 8012682:	bf00      	nop

08012684 <max_serialized_size_std_msgs__msg__Header>:
 8012684:	2301      	movs	r3, #1
 8012686:	b510      	push	{r4, lr}
 8012688:	7003      	strb	r3, [r0, #0]
 801268a:	4604      	mov	r4, r0
 801268c:	f7fe ff90 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8012690:	2300      	movs	r3, #0
 8012692:	7023      	strb	r3, [r4, #0]
 8012694:	bd10      	pop	{r4, pc}
 8012696:	bf00      	nop

08012698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012698:	4800      	ldr	r0, [pc, #0]	@ (801269c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801269a:	4770      	bx	lr
 801269c:	24000e98 	.word	0x24000e98

080126a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80126a0:	4a02      	ldr	r2, [pc, #8]	@ (80126ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 80126a2:	4b03      	ldr	r3, [pc, #12]	@ (80126b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 80126a4:	6812      	ldr	r2, [r2, #0]
 80126a6:	601a      	str	r2, [r3, #0]
 80126a8:	4770      	bx	lr
 80126aa:	bf00      	nop
 80126ac:	24000e0c 	.word	0x24000e0c
 80126b0:	24000ec8 	.word	0x24000ec8

080126b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80126b4:	4a02      	ldr	r2, [pc, #8]	@ (80126c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 80126b6:	4b03      	ldr	r3, [pc, #12]	@ (80126c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 80126b8:	6812      	ldr	r2, [r2, #0]
 80126ba:	601a      	str	r2, [r3, #0]
 80126bc:	4770      	bx	lr
 80126be:	bf00      	nop
 80126c0:	24000e0c 	.word	0x24000e0c
 80126c4:	24000edc 	.word	0x24000edc

080126c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80126c8:	4a02      	ldr	r2, [pc, #8]	@ (80126d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 80126ca:	4b03      	ldr	r3, [pc, #12]	@ (80126d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 80126cc:	6812      	ldr	r2, [r2, #0]
 80126ce:	601a      	str	r2, [r3, #0]
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop
 80126d4:	24000e0c 	.word	0x24000e0c
 80126d8:	24000ef0 	.word	0x24000ef0

080126dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80126dc:	4a02      	ldr	r2, [pc, #8]	@ (80126e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 80126de:	4b03      	ldr	r3, [pc, #12]	@ (80126ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 80126e0:	6812      	ldr	r2, [r2, #0]
 80126e2:	601a      	str	r2, [r3, #0]
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	24000e0c 	.word	0x24000e0c
 80126ec:	24000f04 	.word	0x24000f04

080126f0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 80126f0:	f000 bc0c 	b.w	8012f0c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

080126f4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 80126f4:	f000 bc2e 	b.w	8012f54 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

080126f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80126f8:	b510      	push	{r4, lr}
 80126fa:	4c08      	ldr	r4, [pc, #32]	@ (801271c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 80126fc:	f7ff ff24 	bl	8012548 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012700:	60e0      	str	r0, [r4, #12]
 8012702:	f000 fc93 	bl	801302c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8012706:	4b06      	ldr	r3, [pc, #24]	@ (8012720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8012708:	64a0      	str	r0, [r4, #72]	@ 0x48
 801270a:	681a      	ldr	r2, [r3, #0]
 801270c:	b10a      	cbz	r2, 8012712 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 801270e:	4804      	ldr	r0, [pc, #16]	@ (8012720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8012710:	bd10      	pop	{r4, pc}
 8012712:	4a04      	ldr	r2, [pc, #16]	@ (8012724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8012714:	4802      	ldr	r0, [pc, #8]	@ (8012720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8012716:	6812      	ldr	r2, [r2, #0]
 8012718:	601a      	str	r2, [r3, #0]
 801271a:	bd10      	pop	{r4, pc}
 801271c:	24000f10 	.word	0x24000f10
 8012720:	24000f88 	.word	0x24000f88
 8012724:	24000e10 	.word	0x24000e10

08012728 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8012728:	f000 bc20 	b.w	8012f6c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

0801272c <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 801272c:	f000 bc42 	b.w	8012fb4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08012730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012730:	b510      	push	{r4, lr}
 8012732:	4c08      	ldr	r4, [pc, #32]	@ (8012754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8012734:	f7ff ff08 	bl	8012548 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012738:	60e0      	str	r0, [r4, #12]
 801273a:	f000 fc89 	bl	8013050 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801273e:	4b06      	ldr	r3, [pc, #24]	@ (8012758 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8012740:	64a0      	str	r0, [r4, #72]	@ 0x48
 8012742:	681a      	ldr	r2, [r3, #0]
 8012744:	b10a      	cbz	r2, 801274a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8012746:	4804      	ldr	r0, [pc, #16]	@ (8012758 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8012748:	bd10      	pop	{r4, pc}
 801274a:	4a04      	ldr	r2, [pc, #16]	@ (801275c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 801274c:	4802      	ldr	r0, [pc, #8]	@ (8012758 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 801274e:	6812      	ldr	r2, [r2, #0]
 8012750:	601a      	str	r2, [r3, #0]
 8012752:	bd10      	pop	{r4, pc}
 8012754:	24000f94 	.word	0x24000f94
 8012758:	2400100c 	.word	0x2400100c
 801275c:	24000e10 	.word	0x24000e10

08012760 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8012760:	f000 bc34 	b.w	8012fcc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08012764 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8012764:	f000 bc44 	b.w	8012ff0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08012768 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012768:	b508      	push	{r3, lr}
 801276a:	f7fe fec3 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801276e:	4b06      	ldr	r3, [pc, #24]	@ (8012788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012770:	4906      	ldr	r1, [pc, #24]	@ (801278c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	60c8      	str	r0, [r1, #12]
 8012776:	b10a      	cbz	r2, 801277c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8012778:	4803      	ldr	r0, [pc, #12]	@ (8012788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 801277a:	bd08      	pop	{r3, pc}
 801277c:	4a04      	ldr	r2, [pc, #16]	@ (8012790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 801277e:	4802      	ldr	r0, [pc, #8]	@ (8012788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012780:	6812      	ldr	r2, [r2, #0]
 8012782:	601a      	str	r2, [r3, #0]
 8012784:	bd08      	pop	{r3, pc}
 8012786:	bf00      	nop
 8012788:	24001090 	.word	0x24001090
 801278c:	24001018 	.word	0x24001018
 8012790:	24000e10 	.word	0x24000e10

08012794 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8012794:	f000 bc30 	b.w	8012ff8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08012798 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8012798:	f000 bc40 	b.w	801301c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

0801279c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801279c:	b508      	push	{r3, lr}
 801279e:	f7fe fea9 	bl	80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127a2:	4b06      	ldr	r3, [pc, #24]	@ (80127bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80127a4:	4906      	ldr	r1, [pc, #24]	@ (80127c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 80127a6:	681a      	ldr	r2, [r3, #0]
 80127a8:	60c8      	str	r0, [r1, #12]
 80127aa:	b10a      	cbz	r2, 80127b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 80127ac:	4803      	ldr	r0, [pc, #12]	@ (80127bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80127ae:	bd08      	pop	{r3, pc}
 80127b0:	4a04      	ldr	r2, [pc, #16]	@ (80127c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 80127b2:	4802      	ldr	r0, [pc, #8]	@ (80127bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80127b4:	6812      	ldr	r2, [r2, #0]
 80127b6:	601a      	str	r2, [r3, #0]
 80127b8:	bd08      	pop	{r3, pc}
 80127ba:	bf00      	nop
 80127bc:	24001114 	.word	0x24001114
 80127c0:	2400109c 	.word	0x2400109c
 80127c4:	24000e10 	.word	0x24000e10

080127c8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	4604      	mov	r4, r0
 80127cc:	b150      	cbz	r0, 80127e4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 80127ce:	460d      	mov	r5, r1
 80127d0:	f7ff fede 	bl	8012590 <get_serialized_size_std_msgs__msg__Header>
 80127d4:	4603      	mov	r3, r0
 80127d6:	f104 0018 	add.w	r0, r4, #24
 80127da:	461c      	mov	r4, r3
 80127dc:	18e9      	adds	r1, r5, r3
 80127de:	f000 fc45 	bl	801306c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80127e2:	4420      	add	r0, r4
 80127e4:	bd38      	pop	{r3, r4, r5, pc}
 80127e6:	bf00      	nop

080127e8 <_ActuationCommandStamped__cdr_deserialize>:
 80127e8:	b570      	push	{r4, r5, r6, lr}
 80127ea:	460c      	mov	r4, r1
 80127ec:	b199      	cbz	r1, 8012816 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 80127ee:	4605      	mov	r5, r0
 80127f0:	f7ff ff52 	bl	8012698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80127f4:	4603      	mov	r3, r0
 80127f6:	4621      	mov	r1, r4
 80127f8:	4628      	mov	r0, r5
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	4798      	blx	r3
 8012800:	f000 fcbc 	bl	801317c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8012804:	4603      	mov	r3, r0
 8012806:	f104 0118 	add.w	r1, r4, #24
 801280a:	4628      	mov	r0, r5
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012812:	68db      	ldr	r3, [r3, #12]
 8012814:	4718      	bx	r3
 8012816:	4608      	mov	r0, r1
 8012818:	bd70      	pop	{r4, r5, r6, pc}
 801281a:	bf00      	nop

0801281c <_ActuationCommandStamped__cdr_serialize>:
 801281c:	b510      	push	{r4, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	9101      	str	r1, [sp, #4]
 8012822:	b1a0      	cbz	r0, 801284e <_ActuationCommandStamped__cdr_serialize+0x32>
 8012824:	4604      	mov	r4, r0
 8012826:	f7ff ff37 	bl	8012698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801282a:	4603      	mov	r3, r0
 801282c:	9901      	ldr	r1, [sp, #4]
 801282e:	4620      	mov	r0, r4
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	689b      	ldr	r3, [r3, #8]
 8012834:	4798      	blx	r3
 8012836:	f000 fca1 	bl	801317c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801283a:	4603      	mov	r3, r0
 801283c:	9901      	ldr	r1, [sp, #4]
 801283e:	f104 0018 	add.w	r0, r4, #24
 8012842:	685b      	ldr	r3, [r3, #4]
 8012844:	689b      	ldr	r3, [r3, #8]
 8012846:	b002      	add	sp, #8
 8012848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801284c:	4718      	bx	r3
 801284e:	b002      	add	sp, #8
 8012850:	bd10      	pop	{r4, pc}
 8012852:	bf00      	nop

08012854 <_ActuationCommandStamped__get_serialized_size>:
 8012854:	b510      	push	{r4, lr}
 8012856:	4604      	mov	r4, r0
 8012858:	b148      	cbz	r0, 801286e <_ActuationCommandStamped__get_serialized_size+0x1a>
 801285a:	2100      	movs	r1, #0
 801285c:	f7ff fe98 	bl	8012590 <get_serialized_size_std_msgs__msg__Header>
 8012860:	4601      	mov	r1, r0
 8012862:	f104 0018 	add.w	r0, r4, #24
 8012866:	460c      	mov	r4, r1
 8012868:	f000 fc00 	bl	801306c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801286c:	4420      	add	r0, r4
 801286e:	bd10      	pop	{r4, pc}

08012870 <_ActuationCommandStamped__max_serialized_size>:
 8012870:	b510      	push	{r4, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	2301      	movs	r3, #1
 8012876:	2100      	movs	r1, #0
 8012878:	f10d 0007 	add.w	r0, sp, #7
 801287c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012880:	f7ff ff00 	bl	8012684 <max_serialized_size_std_msgs__msg__Header>
 8012884:	4604      	mov	r4, r0
 8012886:	f10d 0007 	add.w	r0, sp, #7
 801288a:	4621      	mov	r1, r4
 801288c:	f000 fc5c 	bl	8013148 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012890:	4420      	add	r0, r4
 8012892:	b002      	add	sp, #8
 8012894:	bd10      	pop	{r4, pc}
 8012896:	bf00      	nop

08012898 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012898:	4800      	ldr	r0, [pc, #0]	@ (801289c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 801289a:	4770      	bx	lr
 801289c:	24001120 	.word	0x24001120

080128a0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	4604      	mov	r4, r0
 80128a4:	b150      	cbz	r0, 80128bc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 80128a6:	460d      	mov	r5, r1
 80128a8:	f7ff fe72 	bl	8012590 <get_serialized_size_std_msgs__msg__Header>
 80128ac:	4603      	mov	r3, r0
 80128ae:	f104 0018 	add.w	r0, r4, #24
 80128b2:	461c      	mov	r4, r3
 80128b4:	18e9      	adds	r1, r5, r3
 80128b6:	f000 fc65 	bl	8013184 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80128ba:	4420      	add	r0, r4
 80128bc:	bd38      	pop	{r3, r4, r5, pc}
 80128be:	bf00      	nop

080128c0 <_ActuationStatusStamped__cdr_deserialize>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	460c      	mov	r4, r1
 80128c4:	b199      	cbz	r1, 80128ee <_ActuationStatusStamped__cdr_deserialize+0x2e>
 80128c6:	4605      	mov	r5, r0
 80128c8:	f7ff fee6 	bl	8012698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80128cc:	4603      	mov	r3, r0
 80128ce:	4621      	mov	r1, r4
 80128d0:	4628      	mov	r0, r5
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	4798      	blx	r3
 80128d8:	f000 fcdc 	bl	8013294 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80128dc:	4603      	mov	r3, r0
 80128de:	f104 0118 	add.w	r1, r4, #24
 80128e2:	4628      	mov	r0, r5
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128ea:	68db      	ldr	r3, [r3, #12]
 80128ec:	4718      	bx	r3
 80128ee:	4608      	mov	r0, r1
 80128f0:	bd70      	pop	{r4, r5, r6, pc}
 80128f2:	bf00      	nop

080128f4 <_ActuationStatusStamped__cdr_serialize>:
 80128f4:	b510      	push	{r4, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	9101      	str	r1, [sp, #4]
 80128fa:	b1a0      	cbz	r0, 8012926 <_ActuationStatusStamped__cdr_serialize+0x32>
 80128fc:	4604      	mov	r4, r0
 80128fe:	f7ff fecb 	bl	8012698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012902:	4603      	mov	r3, r0
 8012904:	9901      	ldr	r1, [sp, #4]
 8012906:	4620      	mov	r0, r4
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	689b      	ldr	r3, [r3, #8]
 801290c:	4798      	blx	r3
 801290e:	f000 fcc1 	bl	8013294 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8012912:	4603      	mov	r3, r0
 8012914:	9901      	ldr	r1, [sp, #4]
 8012916:	f104 0018 	add.w	r0, r4, #24
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	b002      	add	sp, #8
 8012920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012924:	4718      	bx	r3
 8012926:	b002      	add	sp, #8
 8012928:	bd10      	pop	{r4, pc}
 801292a:	bf00      	nop

0801292c <_ActuationStatusStamped__get_serialized_size>:
 801292c:	b510      	push	{r4, lr}
 801292e:	4604      	mov	r4, r0
 8012930:	b148      	cbz	r0, 8012946 <_ActuationStatusStamped__get_serialized_size+0x1a>
 8012932:	2100      	movs	r1, #0
 8012934:	f7ff fe2c 	bl	8012590 <get_serialized_size_std_msgs__msg__Header>
 8012938:	4601      	mov	r1, r0
 801293a:	f104 0018 	add.w	r0, r4, #24
 801293e:	460c      	mov	r4, r1
 8012940:	f000 fc20 	bl	8013184 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8012944:	4420      	add	r0, r4
 8012946:	bd10      	pop	{r4, pc}

08012948 <_ActuationStatusStamped__max_serialized_size>:
 8012948:	b510      	push	{r4, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	2301      	movs	r3, #1
 801294e:	2100      	movs	r1, #0
 8012950:	f10d 0007 	add.w	r0, sp, #7
 8012954:	f88d 3007 	strb.w	r3, [sp, #7]
 8012958:	f7ff fe94 	bl	8012684 <max_serialized_size_std_msgs__msg__Header>
 801295c:	4604      	mov	r4, r0
 801295e:	f10d 0007 	add.w	r0, sp, #7
 8012962:	4621      	mov	r1, r4
 8012964:	f000 fc7c 	bl	8013260 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8012968:	4420      	add	r0, r4
 801296a:	b002      	add	sp, #8
 801296c:	bd10      	pop	{r4, pc}
 801296e:	bf00      	nop

08012970 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012970:	4800      	ldr	r0, [pc, #0]	@ (8012974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8012972:	4770      	bx	lr
 8012974:	24001148 	.word	0x24001148

08012978 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012978:	b538      	push	{r3, r4, r5, lr}
 801297a:	b158      	cbz	r0, 8012994 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 801297c:	460d      	mov	r5, r1
 801297e:	f7fe fdc7 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8012982:	2104      	movs	r1, #4
 8012984:	182c      	adds	r4, r5, r0
 8012986:	f1c5 0504 	rsb	r5, r5, #4
 801298a:	4620      	mov	r0, r4
 801298c:	f7ff fce6 	bl	801235c <ucdr_alignment>
 8012990:	4428      	add	r0, r5
 8012992:	4420      	add	r0, r4
 8012994:	bd38      	pop	{r3, r4, r5, pc}
 8012996:	bf00      	nop

08012998 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	460c      	mov	r4, r1
 801299c:	b179      	cbz	r1, 80129be <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 801299e:	4605      	mov	r5, r0
 80129a0:	f7fe fe1a 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129a4:	4603      	mov	r3, r0
 80129a6:	4621      	mov	r1, r4
 80129a8:	4628      	mov	r0, r5
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	4798      	blx	r3
 80129b0:	f104 0108 	add.w	r1, r4, #8
 80129b4:	4628      	mov	r0, r5
 80129b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129ba:	f7ff ba81 	b.w	8011ec0 <ucdr_deserialize_float>
 80129be:	4608      	mov	r0, r1
 80129c0:	bd38      	pop	{r3, r4, r5, pc}
 80129c2:	bf00      	nop

080129c4 <_SteeringWheelStatusStamped__cdr_serialize>:
 80129c4:	b188      	cbz	r0, 80129ea <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 80129c6:	b538      	push	{r3, r4, r5, lr}
 80129c8:	4604      	mov	r4, r0
 80129ca:	460d      	mov	r5, r1
 80129cc:	f7fe fe04 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129d0:	4603      	mov	r3, r0
 80129d2:	4629      	mov	r1, r5
 80129d4:	4620      	mov	r0, r4
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	689b      	ldr	r3, [r3, #8]
 80129da:	4798      	blx	r3
 80129dc:	ed94 0a02 	vldr	s0, [r4, #8]
 80129e0:	4628      	mov	r0, r5
 80129e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129e6:	f7ff b9d3 	b.w	8011d90 <ucdr_serialize_float>
 80129ea:	4770      	bx	lr

080129ec <_SteeringWheelStatusStamped__get_serialized_size>:
 80129ec:	b150      	cbz	r0, 8012a04 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 80129ee:	2100      	movs	r1, #0
 80129f0:	b510      	push	{r4, lr}
 80129f2:	f7fe fd8d 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 80129f6:	4604      	mov	r4, r0
 80129f8:	2104      	movs	r1, #4
 80129fa:	f7ff fcaf 	bl	801235c <ucdr_alignment>
 80129fe:	4420      	add	r0, r4
 8012a00:	3004      	adds	r0, #4
 8012a02:	bd10      	pop	{r4, pc}
 8012a04:	4770      	bx	lr
 8012a06:	bf00      	nop

08012a08 <_SteeringWheelStatusStamped__max_serialized_size>:
 8012a08:	b510      	push	{r4, lr}
 8012a0a:	b082      	sub	sp, #8
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	2100      	movs	r1, #0
 8012a10:	f10d 0007 	add.w	r0, sp, #7
 8012a14:	f88d 3007 	strb.w	r3, [sp, #7]
 8012a18:	f7fe fdca 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	2104      	movs	r1, #4
 8012a20:	f7ff fc9c 	bl	801235c <ucdr_alignment>
 8012a24:	4420      	add	r0, r4
 8012a26:	3004      	adds	r0, #4
 8012a28:	b002      	add	sp, #8
 8012a2a:	bd10      	pop	{r4, pc}

08012a2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012a2c:	4800      	ldr	r0, [pc, #0]	@ (8012a30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8012a2e:	4770      	bx	lr
 8012a30:	24001170 	.word	0x24001170

08012a34 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012a34:	b538      	push	{r3, r4, r5, lr}
 8012a36:	b158      	cbz	r0, 8012a50 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8012a38:	460d      	mov	r5, r1
 8012a3a:	f7fe fd69 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a3e:	2101      	movs	r1, #1
 8012a40:	182c      	adds	r4, r5, r0
 8012a42:	f1c5 0501 	rsb	r5, r5, #1
 8012a46:	4620      	mov	r0, r4
 8012a48:	f7ff fc88 	bl	801235c <ucdr_alignment>
 8012a4c:	4428      	add	r0, r5
 8012a4e:	4420      	add	r0, r4
 8012a50:	bd38      	pop	{r3, r4, r5, pc}
 8012a52:	bf00      	nop

08012a54 <_VehicleEmergencyStamped__cdr_deserialize>:
 8012a54:	b538      	push	{r3, r4, r5, lr}
 8012a56:	460c      	mov	r4, r1
 8012a58:	b179      	cbz	r1, 8012a7a <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 8012a5a:	4605      	mov	r5, r0
 8012a5c:	f7fe fdbc 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a60:	4603      	mov	r3, r0
 8012a62:	4621      	mov	r1, r4
 8012a64:	4628      	mov	r0, r5
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	68db      	ldr	r3, [r3, #12]
 8012a6a:	4798      	blx	r3
 8012a6c:	f104 0108 	add.w	r1, r4, #8
 8012a70:	4628      	mov	r0, r5
 8012a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a76:	f7fe bdc9 	b.w	801160c <ucdr_deserialize_bool>
 8012a7a:	4608      	mov	r0, r1
 8012a7c:	bd38      	pop	{r3, r4, r5, pc}
 8012a7e:	bf00      	nop

08012a80 <_VehicleEmergencyStamped__cdr_serialize>:
 8012a80:	b180      	cbz	r0, 8012aa4 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8012a82:	b538      	push	{r3, r4, r5, lr}
 8012a84:	4604      	mov	r4, r0
 8012a86:	460d      	mov	r5, r1
 8012a88:	f7fe fda6 	bl	80115d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	4629      	mov	r1, r5
 8012a90:	4620      	mov	r0, r4
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	689b      	ldr	r3, [r3, #8]
 8012a96:	4798      	blx	r3
 8012a98:	7a21      	ldrb	r1, [r4, #8]
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aa0:	f7fe bd9e 	b.w	80115e0 <ucdr_serialize_bool>
 8012aa4:	4770      	bx	lr
 8012aa6:	bf00      	nop

08012aa8 <_VehicleEmergencyStamped__get_serialized_size>:
 8012aa8:	b150      	cbz	r0, 8012ac0 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8012aaa:	2100      	movs	r1, #0
 8012aac:	b510      	push	{r4, lr}
 8012aae:	f7fe fd2f 	bl	8011510 <get_serialized_size_builtin_interfaces__msg__Time>
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	2101      	movs	r1, #1
 8012ab6:	f7ff fc51 	bl	801235c <ucdr_alignment>
 8012aba:	4420      	add	r0, r4
 8012abc:	3001      	adds	r0, #1
 8012abe:	bd10      	pop	{r4, pc}
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop

08012ac4 <_VehicleEmergencyStamped__max_serialized_size>:
 8012ac4:	b510      	push	{r4, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	2401      	movs	r4, #1
 8012aca:	2100      	movs	r1, #0
 8012acc:	f10d 0007 	add.w	r0, sp, #7
 8012ad0:	f88d 4007 	strb.w	r4, [sp, #7]
 8012ad4:	f7fe fd6c 	bl	80115b0 <max_serialized_size_builtin_interfaces__msg__Time>
 8012ad8:	4621      	mov	r1, r4
 8012ada:	4604      	mov	r4, r0
 8012adc:	f7ff fc3e 	bl	801235c <ucdr_alignment>
 8012ae0:	4420      	add	r0, r4
 8012ae2:	3001      	adds	r0, #1
 8012ae4:	b002      	add	sp, #8
 8012ae6:	bd10      	pop	{r4, pc}

08012ae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012ae8:	4800      	ldr	r0, [pc, #0]	@ (8012aec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8012aea:	4770      	bx	lr
 8012aec:	24001198 	.word	0x24001198

08012af0 <autoware_control_msgs__msg__Control__init>:
 8012af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af4:	4605      	mov	r5, r0
 8012af6:	b3c0      	cbz	r0, 8012b6a <autoware_control_msgs__msg__Control__init+0x7a>
 8012af8:	f000 f9a6 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012afc:	4604      	mov	r4, r0
 8012afe:	b310      	cbz	r0, 8012b46 <autoware_control_msgs__msg__Control__init+0x56>
 8012b00:	f105 0608 	add.w	r6, r5, #8
 8012b04:	4630      	mov	r0, r6
 8012b06:	f000 f99f 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012b0a:	4604      	mov	r4, r0
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	d040      	beq.n	8012b92 <autoware_control_msgs__msg__Control__init+0xa2>
 8012b10:	f105 0710 	add.w	r7, r5, #16
 8012b14:	4638      	mov	r0, r7
 8012b16:	f000 f855 	bl	8012bc4 <autoware_control_msgs__msg__Lateral__init>
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	b348      	cbz	r0, 8012b72 <autoware_control_msgs__msg__Control__init+0x82>
 8012b1e:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 8012b22:	4640      	mov	r0, r8
 8012b24:	f000 f87e 	bl	8012c24 <autoware_control_msgs__msg__Longitudinal__init>
 8012b28:	4604      	mov	r4, r0
 8012b2a:	b9d8      	cbnz	r0, 8012b64 <autoware_control_msgs__msg__Control__init+0x74>
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	f000 f98f 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012b32:	4630      	mov	r0, r6
 8012b34:	f000 f98c 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012b38:	4638      	mov	r0, r7
 8012b3a:	f000 f867 	bl	8012c0c <autoware_control_msgs__msg__Lateral__fini>
 8012b3e:	4640      	mov	r0, r8
 8012b40:	f000 f894 	bl	8012c6c <autoware_control_msgs__msg__Longitudinal__fini>
 8012b44:	e00e      	b.n	8012b64 <autoware_control_msgs__msg__Control__init+0x74>
 8012b46:	4628      	mov	r0, r5
 8012b48:	f000 f982 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012b4c:	f105 0008 	add.w	r0, r5, #8
 8012b50:	f000 f97e 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012b54:	f105 0010 	add.w	r0, r5, #16
 8012b58:	f000 f858 	bl	8012c0c <autoware_control_msgs__msg__Lateral__fini>
 8012b5c:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012b60:	f000 f884 	bl	8012c6c <autoware_control_msgs__msg__Longitudinal__fini>
 8012b64:	4620      	mov	r0, r4
 8012b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b6a:	4604      	mov	r4, r0
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b72:	4628      	mov	r0, r5
 8012b74:	f000 f96c 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012b78:	4630      	mov	r0, r6
 8012b7a:	f000 f969 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012b7e:	4638      	mov	r0, r7
 8012b80:	f000 f844 	bl	8012c0c <autoware_control_msgs__msg__Lateral__fini>
 8012b84:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012b88:	f000 f870 	bl	8012c6c <autoware_control_msgs__msg__Longitudinal__fini>
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b92:	4628      	mov	r0, r5
 8012b94:	f000 f95c 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012b98:	4630      	mov	r0, r6
 8012b9a:	e7d9      	b.n	8012b50 <autoware_control_msgs__msg__Control__init+0x60>

08012b9c <autoware_control_msgs__msg__Control__fini>:
 8012b9c:	b188      	cbz	r0, 8012bc2 <autoware_control_msgs__msg__Control__fini+0x26>
 8012b9e:	b510      	push	{r4, lr}
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	f000 f955 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012ba6:	f104 0008 	add.w	r0, r4, #8
 8012baa:	f000 f951 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012bae:	f104 0010 	add.w	r0, r4, #16
 8012bb2:	f000 f82b 	bl	8012c0c <autoware_control_msgs__msg__Lateral__fini>
 8012bb6:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bbe:	f000 b855 	b.w	8012c6c <autoware_control_msgs__msg__Longitudinal__fini>
 8012bc2:	4770      	bx	lr

08012bc4 <autoware_control_msgs__msg__Lateral__init>:
 8012bc4:	b570      	push	{r4, r5, r6, lr}
 8012bc6:	4605      	mov	r5, r0
 8012bc8:	b1a8      	cbz	r0, 8012bf6 <autoware_control_msgs__msg__Lateral__init+0x32>
 8012bca:	f000 f93d 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012bce:	4604      	mov	r4, r0
 8012bd0:	b140      	cbz	r0, 8012be4 <autoware_control_msgs__msg__Lateral__init+0x20>
 8012bd2:	f105 0608 	add.w	r6, r5, #8
 8012bd6:	4630      	mov	r0, r6
 8012bd8:	f000 f936 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012bdc:	4604      	mov	r4, r0
 8012bde:	b168      	cbz	r0, 8012bfc <autoware_control_msgs__msg__Lateral__init+0x38>
 8012be0:	4620      	mov	r0, r4
 8012be2:	bd70      	pop	{r4, r5, r6, pc}
 8012be4:	4628      	mov	r0, r5
 8012be6:	f000 f933 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012bea:	f105 0008 	add.w	r0, r5, #8
 8012bee:	f000 f92f 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	bd70      	pop	{r4, r5, r6, pc}
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	bd70      	pop	{r4, r5, r6, pc}
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	f000 f927 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c02:	4630      	mov	r0, r6
 8012c04:	f000 f924 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c08:	e7ea      	b.n	8012be0 <autoware_control_msgs__msg__Lateral__init+0x1c>
 8012c0a:	bf00      	nop

08012c0c <autoware_control_msgs__msg__Lateral__fini>:
 8012c0c:	b148      	cbz	r0, 8012c22 <autoware_control_msgs__msg__Lateral__fini+0x16>
 8012c0e:	b510      	push	{r4, lr}
 8012c10:	4604      	mov	r4, r0
 8012c12:	f000 f91d 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c16:	f104 0008 	add.w	r0, r4, #8
 8012c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c1e:	f000 b917 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c22:	4770      	bx	lr

08012c24 <autoware_control_msgs__msg__Longitudinal__init>:
 8012c24:	b570      	push	{r4, r5, r6, lr}
 8012c26:	4605      	mov	r5, r0
 8012c28:	b1a8      	cbz	r0, 8012c56 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 8012c2a:	f000 f90d 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012c2e:	4604      	mov	r4, r0
 8012c30:	b140      	cbz	r0, 8012c44 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8012c32:	f105 0608 	add.w	r6, r5, #8
 8012c36:	4630      	mov	r0, r6
 8012c38:	f000 f906 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012c3c:	4604      	mov	r4, r0
 8012c3e:	b168      	cbz	r0, 8012c5c <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8012c40:	4620      	mov	r0, r4
 8012c42:	bd70      	pop	{r4, r5, r6, pc}
 8012c44:	4628      	mov	r0, r5
 8012c46:	f000 f903 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c4a:	f105 0008 	add.w	r0, r5, #8
 8012c4e:	f000 f8ff 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c52:	4620      	mov	r0, r4
 8012c54:	bd70      	pop	{r4, r5, r6, pc}
 8012c56:	4604      	mov	r4, r0
 8012c58:	4620      	mov	r0, r4
 8012c5a:	bd70      	pop	{r4, r5, r6, pc}
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	f000 f8f7 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c62:	4630      	mov	r0, r6
 8012c64:	f000 f8f4 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c68:	e7ea      	b.n	8012c40 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 8012c6a:	bf00      	nop

08012c6c <autoware_control_msgs__msg__Longitudinal__fini>:
 8012c6c:	b148      	cbz	r0, 8012c82 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 8012c6e:	b510      	push	{r4, lr}
 8012c70:	4604      	mov	r4, r0
 8012c72:	f000 f8ed 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c76:	f104 0008 	add.w	r0, r4, #8
 8012c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c7e:	f000 b8e7 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012c82:	4770      	bx	lr

08012c84 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	4604      	mov	r4, r0
 8012c88:	b128      	cbz	r0, 8012c96 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8012c8a:	f000 f8dd 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012c8e:	4605      	mov	r5, r0
 8012c90:	b120      	cbz	r0, 8012c9c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8012c92:	4628      	mov	r0, r5
 8012c94:	bd38      	pop	{r3, r4, r5, pc}
 8012c96:	4605      	mov	r5, r0
 8012c98:	4628      	mov	r0, r5
 8012c9a:	bd38      	pop	{r3, r4, r5, pc}
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f000 f8d7 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	bd38      	pop	{r3, r4, r5, pc}
 8012ca6:	bf00      	nop

08012ca8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8012ca8:	b108      	cbz	r0, 8012cae <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8012caa:	f000 b8d1 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012cae:	4770      	bx	lr

08012cb0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8012cb0:	3800      	subs	r0, #0
 8012cb2:	bf18      	it	ne
 8012cb4:	2001      	movne	r0, #1
 8012cb6:	4770      	bx	lr

08012cb8 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8012cb8:	4770      	bx	lr
 8012cba:	bf00      	nop

08012cbc <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8012cbc:	b538      	push	{r3, r4, r5, lr}
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	b128      	cbz	r0, 8012cce <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8012cc2:	f000 f8c1 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012cc6:	4605      	mov	r5, r0
 8012cc8:	b120      	cbz	r0, 8012cd4 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 8012cca:	4628      	mov	r0, r5
 8012ccc:	bd38      	pop	{r3, r4, r5, pc}
 8012cce:	4605      	mov	r5, r0
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	bd38      	pop	{r3, r4, r5, pc}
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	f000 f8bb 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012cda:	4628      	mov	r0, r5
 8012cdc:	bd38      	pop	{r3, r4, r5, pc}
 8012cde:	bf00      	nop

08012ce0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 8012ce0:	b108      	cbz	r0, 8012ce6 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8012ce2:	f000 b8b5 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012ce6:	4770      	bx	lr

08012ce8 <autoware_vehicle_msgs__msg__GearCommand__init>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4604      	mov	r4, r0
 8012cec:	b128      	cbz	r0, 8012cfa <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 8012cee:	f000 f8ab 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012cf2:	4605      	mov	r5, r0
 8012cf4:	b120      	cbz	r0, 8012d00 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	bd38      	pop	{r3, r4, r5, pc}
 8012cfa:	4605      	mov	r5, r0
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	bd38      	pop	{r3, r4, r5, pc}
 8012d00:	4620      	mov	r0, r4
 8012d02:	f000 f8a5 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012d06:	4628      	mov	r0, r5
 8012d08:	bd38      	pop	{r3, r4, r5, pc}
 8012d0a:	bf00      	nop

08012d0c <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8012d0c:	b108      	cbz	r0, 8012d12 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 8012d0e:	f000 b89f 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012d12:	4770      	bx	lr

08012d14 <autoware_vehicle_msgs__msg__GearReport__init>:
 8012d14:	b538      	push	{r3, r4, r5, lr}
 8012d16:	4604      	mov	r4, r0
 8012d18:	b128      	cbz	r0, 8012d26 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 8012d1a:	f000 f895 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012d1e:	4605      	mov	r5, r0
 8012d20:	b120      	cbz	r0, 8012d2c <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 8012d22:	4628      	mov	r0, r5
 8012d24:	bd38      	pop	{r3, r4, r5, pc}
 8012d26:	4605      	mov	r5, r0
 8012d28:	4628      	mov	r0, r5
 8012d2a:	bd38      	pop	{r3, r4, r5, pc}
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f000 f88f 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012d32:	4628      	mov	r0, r5
 8012d34:	bd38      	pop	{r3, r4, r5, pc}
 8012d36:	bf00      	nop

08012d38 <autoware_vehicle_msgs__msg__GearReport__fini>:
 8012d38:	b108      	cbz	r0, 8012d3e <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 8012d3a:	f000 b889 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012d3e:	4770      	bx	lr

08012d40 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8012d40:	b538      	push	{r3, r4, r5, lr}
 8012d42:	4604      	mov	r4, r0
 8012d44:	b128      	cbz	r0, 8012d52 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8012d46:	f000 f87f 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012d4a:	4605      	mov	r5, r0
 8012d4c:	b120      	cbz	r0, 8012d58 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 8012d4e:	4628      	mov	r0, r5
 8012d50:	bd38      	pop	{r3, r4, r5, pc}
 8012d52:	4605      	mov	r5, r0
 8012d54:	4628      	mov	r0, r5
 8012d56:	bd38      	pop	{r3, r4, r5, pc}
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f000 f879 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012d5e:	4628      	mov	r0, r5
 8012d60:	bd38      	pop	{r3, r4, r5, pc}
 8012d62:	bf00      	nop

08012d64 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8012d64:	b108      	cbz	r0, 8012d6a <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8012d66:	f000 b873 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012d6a:	4770      	bx	lr

08012d6c <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 8012d6c:	b538      	push	{r3, r4, r5, lr}
 8012d6e:	4604      	mov	r4, r0
 8012d70:	b128      	cbz	r0, 8012d7e <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8012d72:	f000 f869 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012d76:	4605      	mov	r5, r0
 8012d78:	b120      	cbz	r0, 8012d84 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	bd38      	pop	{r3, r4, r5, pc}
 8012d7e:	4605      	mov	r5, r0
 8012d80:	4628      	mov	r0, r5
 8012d82:	bd38      	pop	{r3, r4, r5, pc}
 8012d84:	4620      	mov	r0, r4
 8012d86:	f000 f863 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	bd38      	pop	{r3, r4, r5, pc}
 8012d8e:	bf00      	nop

08012d90 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8012d90:	b108      	cbz	r0, 8012d96 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8012d92:	f000 b85d 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012d96:	4770      	bx	lr

08012d98 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8012d98:	b538      	push	{r3, r4, r5, lr}
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	b128      	cbz	r0, 8012daa <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 8012d9e:	f000 f853 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012da2:	4605      	mov	r5, r0
 8012da4:	b120      	cbz	r0, 8012db0 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8012da6:	4628      	mov	r0, r5
 8012da8:	bd38      	pop	{r3, r4, r5, pc}
 8012daa:	4605      	mov	r5, r0
 8012dac:	4628      	mov	r0, r5
 8012dae:	bd38      	pop	{r3, r4, r5, pc}
 8012db0:	4620      	mov	r0, r4
 8012db2:	f000 f84d 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012db6:	4628      	mov	r0, r5
 8012db8:	bd38      	pop	{r3, r4, r5, pc}
 8012dba:	bf00      	nop

08012dbc <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8012dbc:	b108      	cbz	r0, 8012dc2 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8012dbe:	f000 b847 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012dc2:	4770      	bx	lr

08012dc4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8012dc4:	b538      	push	{r3, r4, r5, lr}
 8012dc6:	4604      	mov	r4, r0
 8012dc8:	b128      	cbz	r0, 8012dd6 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 8012dca:	f000 f83d 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012dce:	4605      	mov	r5, r0
 8012dd0:	b120      	cbz	r0, 8012ddc <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	bd38      	pop	{r3, r4, r5, pc}
 8012dd6:	4605      	mov	r5, r0
 8012dd8:	4628      	mov	r0, r5
 8012dda:	bd38      	pop	{r3, r4, r5, pc}
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f000 f837 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012de2:	4628      	mov	r0, r5
 8012de4:	bd38      	pop	{r3, r4, r5, pc}
 8012de6:	bf00      	nop

08012de8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8012de8:	b108      	cbz	r0, 8012dee <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8012dea:	f000 b831 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012dee:	4770      	bx	lr

08012df0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8012df0:	b538      	push	{r3, r4, r5, lr}
 8012df2:	4604      	mov	r4, r0
 8012df4:	b128      	cbz	r0, 8012e02 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8012df6:	f000 f827 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012dfa:	4605      	mov	r5, r0
 8012dfc:	b120      	cbz	r0, 8012e08 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 8012dfe:	4628      	mov	r0, r5
 8012e00:	bd38      	pop	{r3, r4, r5, pc}
 8012e02:	4605      	mov	r5, r0
 8012e04:	4628      	mov	r0, r5
 8012e06:	bd38      	pop	{r3, r4, r5, pc}
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f000 f821 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012e0e:	4628      	mov	r0, r5
 8012e10:	bd38      	pop	{r3, r4, r5, pc}
 8012e12:	bf00      	nop

08012e14 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8012e14:	b108      	cbz	r0, 8012e1a <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8012e16:	f000 b81b 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012e1a:	4770      	bx	lr

08012e1c <autoware_vehicle_msgs__msg__VelocityReport__init>:
 8012e1c:	b538      	push	{r3, r4, r5, lr}
 8012e1e:	4604      	mov	r4, r0
 8012e20:	b128      	cbz	r0, 8012e2e <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 8012e22:	f000 f843 	bl	8012eac <std_msgs__msg__Header__init>
 8012e26:	4605      	mov	r5, r0
 8012e28:	b120      	cbz	r0, 8012e34 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	bd38      	pop	{r3, r4, r5, pc}
 8012e2e:	4605      	mov	r5, r0
 8012e30:	4628      	mov	r0, r5
 8012e32:	bd38      	pop	{r3, r4, r5, pc}
 8012e34:	4620      	mov	r0, r4
 8012e36:	f000 f85d 	bl	8012ef4 <std_msgs__msg__Header__fini>
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	bd38      	pop	{r3, r4, r5, pc}
 8012e3e:	bf00      	nop

08012e40 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8012e40:	b108      	cbz	r0, 8012e46 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8012e42:	f000 b857 	b.w	8012ef4 <std_msgs__msg__Header__fini>
 8012e46:	4770      	bx	lr

08012e48 <builtin_interfaces__msg__Time__init>:
 8012e48:	3800      	subs	r0, #0
 8012e4a:	bf18      	it	ne
 8012e4c:	2001      	movne	r0, #1
 8012e4e:	4770      	bx	lr

08012e50 <builtin_interfaces__msg__Time__fini>:
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop

08012e54 <ucdr_serialize_sequence_char>:
 8012e54:	b570      	push	{r4, r5, r6, lr}
 8012e56:	4615      	mov	r5, r2
 8012e58:	460e      	mov	r6, r1
 8012e5a:	7d01      	ldrb	r1, [r0, #20]
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	f7fe fcb1 	bl	80117c4 <ucdr_serialize_endian_uint32_t>
 8012e62:	b90d      	cbnz	r5, 8012e68 <ucdr_serialize_sequence_char+0x14>
 8012e64:	2001      	movs	r0, #1
 8012e66:	bd70      	pop	{r4, r5, r6, pc}
 8012e68:	462b      	mov	r3, r5
 8012e6a:	4632      	mov	r2, r6
 8012e6c:	7d21      	ldrb	r1, [r4, #20]
 8012e6e:	4620      	mov	r0, r4
 8012e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e74:	f000 ba12 	b.w	801329c <ucdr_serialize_endian_array_char>

08012e78 <ucdr_deserialize_sequence_char>:
 8012e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e7c:	461d      	mov	r5, r3
 8012e7e:	4616      	mov	r6, r2
 8012e80:	460f      	mov	r7, r1
 8012e82:	461a      	mov	r2, r3
 8012e84:	7d01      	ldrb	r1, [r0, #20]
 8012e86:	4604      	mov	r4, r0
 8012e88:	f7fe fdc4 	bl	8011a14 <ucdr_deserialize_endian_uint32_t>
 8012e8c:	682b      	ldr	r3, [r5, #0]
 8012e8e:	429e      	cmp	r6, r3
 8012e90:	d201      	bcs.n	8012e96 <ucdr_deserialize_sequence_char+0x1e>
 8012e92:	2201      	movs	r2, #1
 8012e94:	75a2      	strb	r2, [r4, #22]
 8012e96:	b913      	cbnz	r3, 8012e9e <ucdr_deserialize_sequence_char+0x26>
 8012e98:	2001      	movs	r0, #1
 8012e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e9e:	463a      	mov	r2, r7
 8012ea0:	7d21      	ldrb	r1, [r4, #20]
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea8:	f000 ba2a 	b.w	8013300 <ucdr_deserialize_endian_array_char>

08012eac <std_msgs__msg__Header__init>:
 8012eac:	b570      	push	{r4, r5, r6, lr}
 8012eae:	4605      	mov	r5, r0
 8012eb0:	b1a8      	cbz	r0, 8012ede <std_msgs__msg__Header__init+0x32>
 8012eb2:	f7ff ffc9 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012eb6:	4604      	mov	r4, r0
 8012eb8:	b140      	cbz	r0, 8012ecc <std_msgs__msg__Header__init+0x20>
 8012eba:	f105 0608 	add.w	r6, r5, #8
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	f000 fa52 	bl	8013368 <rosidl_runtime_c__String__init>
 8012ec4:	4604      	mov	r4, r0
 8012ec6:	b168      	cbz	r0, 8012ee4 <std_msgs__msg__Header__init+0x38>
 8012ec8:	4620      	mov	r0, r4
 8012eca:	bd70      	pop	{r4, r5, r6, pc}
 8012ecc:	4628      	mov	r0, r5
 8012ece:	f7ff ffbf 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012ed2:	f105 0008 	add.w	r0, r5, #8
 8012ed6:	f000 fa5d 	bl	8013394 <rosidl_runtime_c__String__fini>
 8012eda:	4620      	mov	r0, r4
 8012edc:	bd70      	pop	{r4, r5, r6, pc}
 8012ede:	4604      	mov	r4, r0
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	bd70      	pop	{r4, r5, r6, pc}
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	f7ff ffb3 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012eea:	4630      	mov	r0, r6
 8012eec:	f000 fa52 	bl	8013394 <rosidl_runtime_c__String__fini>
 8012ef0:	e7ea      	b.n	8012ec8 <std_msgs__msg__Header__init+0x1c>
 8012ef2:	bf00      	nop

08012ef4 <std_msgs__msg__Header__fini>:
 8012ef4:	b148      	cbz	r0, 8012f0a <std_msgs__msg__Header__fini+0x16>
 8012ef6:	b510      	push	{r4, lr}
 8012ef8:	4604      	mov	r4, r0
 8012efa:	f7ff ffa9 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012efe:	f104 0008 	add.w	r0, r4, #8
 8012f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f06:	f000 ba45 	b.w	8013394 <rosidl_runtime_c__String__fini>
 8012f0a:	4770      	bx	lr

08012f0c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 8012f0c:	b570      	push	{r4, r5, r6, lr}
 8012f0e:	4605      	mov	r5, r0
 8012f10:	b1a8      	cbz	r0, 8012f3e <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8012f12:	f7ff ffcb 	bl	8012eac <std_msgs__msg__Header__init>
 8012f16:	4604      	mov	r4, r0
 8012f18:	b140      	cbz	r0, 8012f2c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 8012f1a:	f105 0618 	add.w	r6, r5, #24
 8012f1e:	4630      	mov	r0, r6
 8012f20:	f000 fa80 	bl	8013424 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 8012f24:	4604      	mov	r4, r0
 8012f26:	b168      	cbz	r0, 8012f44 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 8012f28:	4620      	mov	r0, r4
 8012f2a:	bd70      	pop	{r4, r5, r6, pc}
 8012f2c:	4628      	mov	r0, r5
 8012f2e:	f7ff ffe1 	bl	8012ef4 <std_msgs__msg__Header__fini>
 8012f32:	f105 0018 	add.w	r0, r5, #24
 8012f36:	f000 fa79 	bl	801342c <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012f3a:	4620      	mov	r0, r4
 8012f3c:	bd70      	pop	{r4, r5, r6, pc}
 8012f3e:	4604      	mov	r4, r0
 8012f40:	4620      	mov	r0, r4
 8012f42:	bd70      	pop	{r4, r5, r6, pc}
 8012f44:	4628      	mov	r0, r5
 8012f46:	f7ff ffd5 	bl	8012ef4 <std_msgs__msg__Header__fini>
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	f000 fa6e 	bl	801342c <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012f50:	e7ea      	b.n	8012f28 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8012f52:	bf00      	nop

08012f54 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8012f54:	b148      	cbz	r0, 8012f6a <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8012f56:	b510      	push	{r4, lr}
 8012f58:	4604      	mov	r4, r0
 8012f5a:	f7ff ffcb 	bl	8012ef4 <std_msgs__msg__Header__fini>
 8012f5e:	f104 0018 	add.w	r0, r4, #24
 8012f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f66:	f000 ba61 	b.w	801342c <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012f6a:	4770      	bx	lr

08012f6c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 8012f6c:	b570      	push	{r4, r5, r6, lr}
 8012f6e:	4605      	mov	r5, r0
 8012f70:	b1a8      	cbz	r0, 8012f9e <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8012f72:	f7ff ff9b 	bl	8012eac <std_msgs__msg__Header__init>
 8012f76:	4604      	mov	r4, r0
 8012f78:	b140      	cbz	r0, 8012f8c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 8012f7a:	f105 0618 	add.w	r6, r5, #24
 8012f7e:	4630      	mov	r0, r6
 8012f80:	f000 fa56 	bl	8013430 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8012f84:	4604      	mov	r4, r0
 8012f86:	b168      	cbz	r0, 8012fa4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8012f88:	4620      	mov	r0, r4
 8012f8a:	bd70      	pop	{r4, r5, r6, pc}
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	f7ff ffb1 	bl	8012ef4 <std_msgs__msg__Header__fini>
 8012f92:	f105 0018 	add.w	r0, r5, #24
 8012f96:	f000 fa4f 	bl	8013438 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	bd70      	pop	{r4, r5, r6, pc}
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	bd70      	pop	{r4, r5, r6, pc}
 8012fa4:	4628      	mov	r0, r5
 8012fa6:	f7ff ffa5 	bl	8012ef4 <std_msgs__msg__Header__fini>
 8012faa:	4630      	mov	r0, r6
 8012fac:	f000 fa44 	bl	8013438 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012fb0:	e7ea      	b.n	8012f88 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8012fb2:	bf00      	nop

08012fb4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8012fb4:	b148      	cbz	r0, 8012fca <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 8012fb6:	b510      	push	{r4, lr}
 8012fb8:	4604      	mov	r4, r0
 8012fba:	f7ff ff9b 	bl	8012ef4 <std_msgs__msg__Header__fini>
 8012fbe:	f104 0018 	add.w	r0, r4, #24
 8012fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fc6:	f000 ba37 	b.w	8013438 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012fca:	4770      	bx	lr

08012fcc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 8012fcc:	b538      	push	{r3, r4, r5, lr}
 8012fce:	4604      	mov	r4, r0
 8012fd0:	b128      	cbz	r0, 8012fde <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8012fd2:	f7ff ff39 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8012fd6:	4605      	mov	r5, r0
 8012fd8:	b120      	cbz	r0, 8012fe4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 8012fda:	4628      	mov	r0, r5
 8012fdc:	bd38      	pop	{r3, r4, r5, pc}
 8012fde:	4605      	mov	r5, r0
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	bd38      	pop	{r3, r4, r5, pc}
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f7ff ff33 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8012fea:	4628      	mov	r0, r5
 8012fec:	bd38      	pop	{r3, r4, r5, pc}
 8012fee:	bf00      	nop

08012ff0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 8012ff0:	b108      	cbz	r0, 8012ff6 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 8012ff2:	f7ff bf2d 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8012ff6:	4770      	bx	lr

08012ff8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 8012ff8:	b538      	push	{r3, r4, r5, lr}
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	b128      	cbz	r0, 801300a <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 8012ffe:	f7ff ff23 	bl	8012e48 <builtin_interfaces__msg__Time__init>
 8013002:	4605      	mov	r5, r0
 8013004:	b120      	cbz	r0, 8013010 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 8013006:	4628      	mov	r0, r5
 8013008:	bd38      	pop	{r3, r4, r5, pc}
 801300a:	4605      	mov	r5, r0
 801300c:	4628      	mov	r0, r5
 801300e:	bd38      	pop	{r3, r4, r5, pc}
 8013010:	4620      	mov	r0, r4
 8013012:	f7ff ff1d 	bl	8012e50 <builtin_interfaces__msg__Time__fini>
 8013016:	4628      	mov	r0, r5
 8013018:	bd38      	pop	{r3, r4, r5, pc}
 801301a:	bf00      	nop

0801301c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801301c:	b108      	cbz	r0, 8013022 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801301e:	f7ff bf17 	b.w	8012e50 <builtin_interfaces__msg__Time__fini>
 8013022:	4770      	bx	lr

08013024 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 8013024:	f000 b9fe 	b.w	8013424 <tier4_vehicle_msgs__msg__ActuationCommand__init>

08013028 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 8013028:	f000 ba00 	b.w	801342c <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801302c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801302c:	4b04      	ldr	r3, [pc, #16]	@ (8013040 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	b10a      	cbz	r2, 8013036 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8013032:	4803      	ldr	r0, [pc, #12]	@ (8013040 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8013034:	4770      	bx	lr
 8013036:	4a03      	ldr	r2, [pc, #12]	@ (8013044 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 8013038:	4801      	ldr	r0, [pc, #4]	@ (8013040 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801303a:	6812      	ldr	r2, [r2, #0]
 801303c:	601a      	str	r2, [r3, #0]
 801303e:	4770      	bx	lr
 8013040:	24001274 	.word	0x24001274
 8013044:	24000e10 	.word	0x24000e10

08013048 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 8013048:	f000 b9f2 	b.w	8013430 <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801304c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801304c:	f000 b9f4 	b.w	8013438 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08013050 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8013050:	4b04      	ldr	r3, [pc, #16]	@ (8013064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8013052:	681a      	ldr	r2, [r3, #0]
 8013054:	b10a      	cbz	r2, 801305a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 8013056:	4803      	ldr	r0, [pc, #12]	@ (8013064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8013058:	4770      	bx	lr
 801305a:	4a03      	ldr	r2, [pc, #12]	@ (8013068 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801305c:	4801      	ldr	r0, [pc, #4]	@ (8013064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801305e:	6812      	ldr	r2, [r2, #0]
 8013060:	601a      	str	r2, [r3, #0]
 8013062:	4770      	bx	lr
 8013064:	24001334 	.word	0x24001334
 8013068:	24000e10 	.word	0x24000e10

0801306c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801306c:	b1b8      	cbz	r0, 801309e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801306e:	b538      	push	{r3, r4, r5, lr}
 8013070:	460d      	mov	r5, r1
 8013072:	2108      	movs	r1, #8
 8013074:	4628      	mov	r0, r5
 8013076:	f7ff f971 	bl	801235c <ucdr_alignment>
 801307a:	f105 0308 	add.w	r3, r5, #8
 801307e:	2108      	movs	r1, #8
 8013080:	f1c5 0508 	rsb	r5, r5, #8
 8013084:	181c      	adds	r4, r3, r0
 8013086:	4620      	mov	r0, r4
 8013088:	f7ff f968 	bl	801235c <ucdr_alignment>
 801308c:	2108      	movs	r1, #8
 801308e:	4408      	add	r0, r1
 8013090:	4404      	add	r4, r0
 8013092:	4620      	mov	r0, r4
 8013094:	f7ff f962 	bl	801235c <ucdr_alignment>
 8013098:	4428      	add	r0, r5
 801309a:	4420      	add	r0, r4
 801309c:	bd38      	pop	{r3, r4, r5, pc}
 801309e:	4770      	bx	lr

080130a0 <_ActuationCommand__cdr_deserialize>:
 80130a0:	b538      	push	{r3, r4, r5, lr}
 80130a2:	460c      	mov	r4, r1
 80130a4:	b171      	cbz	r1, 80130c4 <_ActuationCommand__cdr_deserialize+0x24>
 80130a6:	4605      	mov	r5, r0
 80130a8:	f7ff f86a 	bl	8012180 <ucdr_deserialize_double>
 80130ac:	f104 0108 	add.w	r1, r4, #8
 80130b0:	4628      	mov	r0, r5
 80130b2:	f7ff f865 	bl	8012180 <ucdr_deserialize_double>
 80130b6:	f104 0110 	add.w	r1, r4, #16
 80130ba:	4628      	mov	r0, r5
 80130bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130c0:	f7ff b85e 	b.w	8012180 <ucdr_deserialize_double>
 80130c4:	4608      	mov	r0, r1
 80130c6:	bd38      	pop	{r3, r4, r5, pc}

080130c8 <_ActuationCommand__cdr_serialize>:
 80130c8:	b198      	cbz	r0, 80130f2 <_ActuationCommand__cdr_serialize+0x2a>
 80130ca:	b538      	push	{r3, r4, r5, lr}
 80130cc:	460d      	mov	r5, r1
 80130ce:	4604      	mov	r4, r0
 80130d0:	ed90 0b00 	vldr	d0, [r0]
 80130d4:	4608      	mov	r0, r1
 80130d6:	f7fe ff83 	bl	8011fe0 <ucdr_serialize_double>
 80130da:	4628      	mov	r0, r5
 80130dc:	ed94 0b02 	vldr	d0, [r4, #8]
 80130e0:	f7fe ff7e 	bl	8011fe0 <ucdr_serialize_double>
 80130e4:	4628      	mov	r0, r5
 80130e6:	ed94 0b04 	vldr	d0, [r4, #16]
 80130ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130ee:	f7fe bf77 	b.w	8011fe0 <ucdr_serialize_double>
 80130f2:	4770      	bx	lr

080130f4 <_ActuationCommand__get_serialized_size>:
 80130f4:	b190      	cbz	r0, 801311c <_ActuationCommand__get_serialized_size+0x28>
 80130f6:	2108      	movs	r1, #8
 80130f8:	2000      	movs	r0, #0
 80130fa:	b510      	push	{r4, lr}
 80130fc:	f7ff f92e 	bl	801235c <ucdr_alignment>
 8013100:	2108      	movs	r1, #8
 8013102:	1844      	adds	r4, r0, r1
 8013104:	4620      	mov	r0, r4
 8013106:	f7ff f929 	bl	801235c <ucdr_alignment>
 801310a:	2108      	movs	r1, #8
 801310c:	4408      	add	r0, r1
 801310e:	4404      	add	r4, r0
 8013110:	4620      	mov	r0, r4
 8013112:	f7ff f923 	bl	801235c <ucdr_alignment>
 8013116:	3008      	adds	r0, #8
 8013118:	4420      	add	r0, r4
 801311a:	bd10      	pop	{r4, pc}
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop

08013120 <_ActuationCommand__max_serialized_size>:
 8013120:	b538      	push	{r3, r4, r5, lr}
 8013122:	2108      	movs	r1, #8
 8013124:	2000      	movs	r0, #0
 8013126:	f7ff f919 	bl	801235c <ucdr_alignment>
 801312a:	2108      	movs	r1, #8
 801312c:	1845      	adds	r5, r0, r1
 801312e:	4628      	mov	r0, r5
 8013130:	f7ff f914 	bl	801235c <ucdr_alignment>
 8013134:	2108      	movs	r1, #8
 8013136:	1844      	adds	r4, r0, r1
 8013138:	442c      	add	r4, r5
 801313a:	4620      	mov	r0, r4
 801313c:	f7ff f90e 	bl	801235c <ucdr_alignment>
 8013140:	3008      	adds	r0, #8
 8013142:	4420      	add	r0, r4
 8013144:	bd38      	pop	{r3, r4, r5, pc}
 8013146:	bf00      	nop

08013148 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8013148:	b570      	push	{r4, r5, r6, lr}
 801314a:	460c      	mov	r4, r1
 801314c:	2301      	movs	r3, #1
 801314e:	2108      	movs	r1, #8
 8013150:	f104 0508 	add.w	r5, r4, #8
 8013154:	7003      	strb	r3, [r0, #0]
 8013156:	4620      	mov	r0, r4
 8013158:	f1c4 0408 	rsb	r4, r4, #8
 801315c:	f7ff f8fe 	bl	801235c <ucdr_alignment>
 8013160:	1946      	adds	r6, r0, r5
 8013162:	2108      	movs	r1, #8
 8013164:	4630      	mov	r0, r6
 8013166:	f7ff f8f9 	bl	801235c <ucdr_alignment>
 801316a:	2108      	movs	r1, #8
 801316c:	1845      	adds	r5, r0, r1
 801316e:	4435      	add	r5, r6
 8013170:	4628      	mov	r0, r5
 8013172:	f7ff f8f3 	bl	801235c <ucdr_alignment>
 8013176:	4420      	add	r0, r4
 8013178:	4428      	add	r0, r5
 801317a:	bd70      	pop	{r4, r5, r6, pc}

0801317c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801317c:	4800      	ldr	r0, [pc, #0]	@ (8013180 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801317e:	4770      	bx	lr
 8013180:	24001340 	.word	0x24001340

08013184 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8013184:	b1b8      	cbz	r0, 80131b6 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 8013186:	b538      	push	{r3, r4, r5, lr}
 8013188:	460d      	mov	r5, r1
 801318a:	2108      	movs	r1, #8
 801318c:	4628      	mov	r0, r5
 801318e:	f7ff f8e5 	bl	801235c <ucdr_alignment>
 8013192:	f105 0308 	add.w	r3, r5, #8
 8013196:	2108      	movs	r1, #8
 8013198:	f1c5 0508 	rsb	r5, r5, #8
 801319c:	181c      	adds	r4, r3, r0
 801319e:	4620      	mov	r0, r4
 80131a0:	f7ff f8dc 	bl	801235c <ucdr_alignment>
 80131a4:	2108      	movs	r1, #8
 80131a6:	4408      	add	r0, r1
 80131a8:	4404      	add	r4, r0
 80131aa:	4620      	mov	r0, r4
 80131ac:	f7ff f8d6 	bl	801235c <ucdr_alignment>
 80131b0:	4428      	add	r0, r5
 80131b2:	4420      	add	r0, r4
 80131b4:	bd38      	pop	{r3, r4, r5, pc}
 80131b6:	4770      	bx	lr

080131b8 <_ActuationStatus__cdr_deserialize>:
 80131b8:	b538      	push	{r3, r4, r5, lr}
 80131ba:	460c      	mov	r4, r1
 80131bc:	b171      	cbz	r1, 80131dc <_ActuationStatus__cdr_deserialize+0x24>
 80131be:	4605      	mov	r5, r0
 80131c0:	f7fe ffde 	bl	8012180 <ucdr_deserialize_double>
 80131c4:	f104 0108 	add.w	r1, r4, #8
 80131c8:	4628      	mov	r0, r5
 80131ca:	f7fe ffd9 	bl	8012180 <ucdr_deserialize_double>
 80131ce:	f104 0110 	add.w	r1, r4, #16
 80131d2:	4628      	mov	r0, r5
 80131d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131d8:	f7fe bfd2 	b.w	8012180 <ucdr_deserialize_double>
 80131dc:	4608      	mov	r0, r1
 80131de:	bd38      	pop	{r3, r4, r5, pc}

080131e0 <_ActuationStatus__cdr_serialize>:
 80131e0:	b198      	cbz	r0, 801320a <_ActuationStatus__cdr_serialize+0x2a>
 80131e2:	b538      	push	{r3, r4, r5, lr}
 80131e4:	460d      	mov	r5, r1
 80131e6:	4604      	mov	r4, r0
 80131e8:	ed90 0b00 	vldr	d0, [r0]
 80131ec:	4608      	mov	r0, r1
 80131ee:	f7fe fef7 	bl	8011fe0 <ucdr_serialize_double>
 80131f2:	4628      	mov	r0, r5
 80131f4:	ed94 0b02 	vldr	d0, [r4, #8]
 80131f8:	f7fe fef2 	bl	8011fe0 <ucdr_serialize_double>
 80131fc:	4628      	mov	r0, r5
 80131fe:	ed94 0b04 	vldr	d0, [r4, #16]
 8013202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013206:	f7fe beeb 	b.w	8011fe0 <ucdr_serialize_double>
 801320a:	4770      	bx	lr

0801320c <_ActuationStatus__get_serialized_size>:
 801320c:	b190      	cbz	r0, 8013234 <_ActuationStatus__get_serialized_size+0x28>
 801320e:	2108      	movs	r1, #8
 8013210:	2000      	movs	r0, #0
 8013212:	b510      	push	{r4, lr}
 8013214:	f7ff f8a2 	bl	801235c <ucdr_alignment>
 8013218:	2108      	movs	r1, #8
 801321a:	1844      	adds	r4, r0, r1
 801321c:	4620      	mov	r0, r4
 801321e:	f7ff f89d 	bl	801235c <ucdr_alignment>
 8013222:	2108      	movs	r1, #8
 8013224:	4408      	add	r0, r1
 8013226:	4404      	add	r4, r0
 8013228:	4620      	mov	r0, r4
 801322a:	f7ff f897 	bl	801235c <ucdr_alignment>
 801322e:	3008      	adds	r0, #8
 8013230:	4420      	add	r0, r4
 8013232:	bd10      	pop	{r4, pc}
 8013234:	4770      	bx	lr
 8013236:	bf00      	nop

08013238 <_ActuationStatus__max_serialized_size>:
 8013238:	b538      	push	{r3, r4, r5, lr}
 801323a:	2108      	movs	r1, #8
 801323c:	2000      	movs	r0, #0
 801323e:	f7ff f88d 	bl	801235c <ucdr_alignment>
 8013242:	2108      	movs	r1, #8
 8013244:	1845      	adds	r5, r0, r1
 8013246:	4628      	mov	r0, r5
 8013248:	f7ff f888 	bl	801235c <ucdr_alignment>
 801324c:	2108      	movs	r1, #8
 801324e:	1844      	adds	r4, r0, r1
 8013250:	442c      	add	r4, r5
 8013252:	4620      	mov	r0, r4
 8013254:	f7ff f882 	bl	801235c <ucdr_alignment>
 8013258:	3008      	adds	r0, #8
 801325a:	4420      	add	r0, r4
 801325c:	bd38      	pop	{r3, r4, r5, pc}
 801325e:	bf00      	nop

08013260 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8013260:	b570      	push	{r4, r5, r6, lr}
 8013262:	460c      	mov	r4, r1
 8013264:	2301      	movs	r3, #1
 8013266:	2108      	movs	r1, #8
 8013268:	f104 0508 	add.w	r5, r4, #8
 801326c:	7003      	strb	r3, [r0, #0]
 801326e:	4620      	mov	r0, r4
 8013270:	f1c4 0408 	rsb	r4, r4, #8
 8013274:	f7ff f872 	bl	801235c <ucdr_alignment>
 8013278:	1946      	adds	r6, r0, r5
 801327a:	2108      	movs	r1, #8
 801327c:	4630      	mov	r0, r6
 801327e:	f7ff f86d 	bl	801235c <ucdr_alignment>
 8013282:	2108      	movs	r1, #8
 8013284:	1845      	adds	r5, r0, r1
 8013286:	4435      	add	r5, r6
 8013288:	4628      	mov	r0, r5
 801328a:	f7ff f867 	bl	801235c <ucdr_alignment>
 801328e:	4420      	add	r0, r4
 8013290:	4428      	add	r0, r5
 8013292:	bd70      	pop	{r4, r5, r6, pc}

08013294 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8013294:	4800      	ldr	r0, [pc, #0]	@ (8013298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 8013296:	4770      	bx	lr
 8013298:	24001368 	.word	0x24001368

0801329c <ucdr_serialize_endian_array_char>:
 801329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a0:	4619      	mov	r1, r3
 80132a2:	461f      	mov	r7, r3
 80132a4:	4605      	mov	r5, r0
 80132a6:	4690      	mov	r8, r2
 80132a8:	f7ff f830 	bl	801230c <ucdr_check_buffer_available_for>
 80132ac:	b9e0      	cbnz	r0, 80132e8 <ucdr_serialize_endian_array_char+0x4c>
 80132ae:	463e      	mov	r6, r7
 80132b0:	e00b      	b.n	80132ca <ucdr_serialize_endian_array_char+0x2e>
 80132b2:	4441      	add	r1, r8
 80132b4:	68a8      	ldr	r0, [r5, #8]
 80132b6:	4622      	mov	r2, r4
 80132b8:	1b36      	subs	r6, r6, r4
 80132ba:	f000 fcb6 	bl	8013c2a <memcpy>
 80132be:	68ab      	ldr	r3, [r5, #8]
 80132c0:	6928      	ldr	r0, [r5, #16]
 80132c2:	4423      	add	r3, r4
 80132c4:	4420      	add	r0, r4
 80132c6:	60ab      	str	r3, [r5, #8]
 80132c8:	6128      	str	r0, [r5, #16]
 80132ca:	4631      	mov	r1, r6
 80132cc:	2201      	movs	r2, #1
 80132ce:	4628      	mov	r0, r5
 80132d0:	f7ff f872 	bl	80123b8 <ucdr_check_final_buffer_behavior_array>
 80132d4:	1bb9      	subs	r1, r7, r6
 80132d6:	4604      	mov	r4, r0
 80132d8:	2800      	cmp	r0, #0
 80132da:	d1ea      	bne.n	80132b2 <ucdr_serialize_endian_array_char+0x16>
 80132dc:	2301      	movs	r3, #1
 80132de:	7da8      	ldrb	r0, [r5, #22]
 80132e0:	756b      	strb	r3, [r5, #21]
 80132e2:	4058      	eors	r0, r3
 80132e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132e8:	463a      	mov	r2, r7
 80132ea:	4641      	mov	r1, r8
 80132ec:	68a8      	ldr	r0, [r5, #8]
 80132ee:	f000 fc9c 	bl	8013c2a <memcpy>
 80132f2:	68aa      	ldr	r2, [r5, #8]
 80132f4:	692b      	ldr	r3, [r5, #16]
 80132f6:	443a      	add	r2, r7
 80132f8:	443b      	add	r3, r7
 80132fa:	60aa      	str	r2, [r5, #8]
 80132fc:	612b      	str	r3, [r5, #16]
 80132fe:	e7ed      	b.n	80132dc <ucdr_serialize_endian_array_char+0x40>

08013300 <ucdr_deserialize_endian_array_char>:
 8013300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013304:	4619      	mov	r1, r3
 8013306:	461f      	mov	r7, r3
 8013308:	4605      	mov	r5, r0
 801330a:	4690      	mov	r8, r2
 801330c:	f7fe fffe 	bl	801230c <ucdr_check_buffer_available_for>
 8013310:	b9e8      	cbnz	r0, 801334e <ucdr_deserialize_endian_array_char+0x4e>
 8013312:	463e      	mov	r6, r7
 8013314:	e00c      	b.n	8013330 <ucdr_deserialize_endian_array_char+0x30>
 8013316:	eb08 0003 	add.w	r0, r8, r3
 801331a:	68a9      	ldr	r1, [r5, #8]
 801331c:	4622      	mov	r2, r4
 801331e:	1b36      	subs	r6, r6, r4
 8013320:	f000 fc83 	bl	8013c2a <memcpy>
 8013324:	68ab      	ldr	r3, [r5, #8]
 8013326:	6928      	ldr	r0, [r5, #16]
 8013328:	4423      	add	r3, r4
 801332a:	4420      	add	r0, r4
 801332c:	60ab      	str	r3, [r5, #8]
 801332e:	6128      	str	r0, [r5, #16]
 8013330:	4631      	mov	r1, r6
 8013332:	2201      	movs	r2, #1
 8013334:	4628      	mov	r0, r5
 8013336:	f7ff f83f 	bl	80123b8 <ucdr_check_final_buffer_behavior_array>
 801333a:	1bbb      	subs	r3, r7, r6
 801333c:	4604      	mov	r4, r0
 801333e:	2800      	cmp	r0, #0
 8013340:	d1e9      	bne.n	8013316 <ucdr_deserialize_endian_array_char+0x16>
 8013342:	2301      	movs	r3, #1
 8013344:	7da8      	ldrb	r0, [r5, #22]
 8013346:	756b      	strb	r3, [r5, #21]
 8013348:	4058      	eors	r0, r3
 801334a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801334e:	463a      	mov	r2, r7
 8013350:	68a9      	ldr	r1, [r5, #8]
 8013352:	4640      	mov	r0, r8
 8013354:	f000 fc69 	bl	8013c2a <memcpy>
 8013358:	68aa      	ldr	r2, [r5, #8]
 801335a:	692b      	ldr	r3, [r5, #16]
 801335c:	443a      	add	r2, r7
 801335e:	443b      	add	r3, r7
 8013360:	60aa      	str	r2, [r5, #8]
 8013362:	612b      	str	r3, [r5, #16]
 8013364:	e7ed      	b.n	8013342 <ucdr_deserialize_endian_array_char+0x42>
 8013366:	bf00      	nop

08013368 <rosidl_runtime_c__String__init>:
 8013368:	b510      	push	{r4, lr}
 801336a:	4604      	mov	r4, r0
 801336c:	b086      	sub	sp, #24
 801336e:	b170      	cbz	r0, 801338e <rosidl_runtime_c__String__init+0x26>
 8013370:	a801      	add	r0, sp, #4
 8013372:	f7ff f867 	bl	8012444 <rcutils_get_default_allocator>
 8013376:	9b01      	ldr	r3, [sp, #4]
 8013378:	9905      	ldr	r1, [sp, #20]
 801337a:	2001      	movs	r0, #1
 801337c:	4798      	blx	r3
 801337e:	6020      	str	r0, [r4, #0]
 8013380:	b128      	cbz	r0, 801338e <rosidl_runtime_c__String__init+0x26>
 8013382:	2100      	movs	r1, #0
 8013384:	2201      	movs	r2, #1
 8013386:	7001      	strb	r1, [r0, #0]
 8013388:	4610      	mov	r0, r2
 801338a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801338e:	b006      	add	sp, #24
 8013390:	bd10      	pop	{r4, pc}
 8013392:	bf00      	nop

08013394 <rosidl_runtime_c__String__fini>:
 8013394:	b320      	cbz	r0, 80133e0 <rosidl_runtime_c__String__fini+0x4c>
 8013396:	6803      	ldr	r3, [r0, #0]
 8013398:	b510      	push	{r4, lr}
 801339a:	4604      	mov	r4, r0
 801339c:	b086      	sub	sp, #24
 801339e:	b173      	cbz	r3, 80133be <rosidl_runtime_c__String__fini+0x2a>
 80133a0:	6883      	ldr	r3, [r0, #8]
 80133a2:	b1f3      	cbz	r3, 80133e2 <rosidl_runtime_c__String__fini+0x4e>
 80133a4:	a801      	add	r0, sp, #4
 80133a6:	f7ff f84d 	bl	8012444 <rcutils_get_default_allocator>
 80133aa:	9b02      	ldr	r3, [sp, #8]
 80133ac:	9905      	ldr	r1, [sp, #20]
 80133ae:	6820      	ldr	r0, [r4, #0]
 80133b0:	4798      	blx	r3
 80133b2:	2300      	movs	r3, #0
 80133b4:	e9c4 3300 	strd	r3, r3, [r4]
 80133b8:	60a3      	str	r3, [r4, #8]
 80133ba:	b006      	add	sp, #24
 80133bc:	bd10      	pop	{r4, pc}
 80133be:	6843      	ldr	r3, [r0, #4]
 80133c0:	b9db      	cbnz	r3, 80133fa <rosidl_runtime_c__String__fini+0x66>
 80133c2:	6883      	ldr	r3, [r0, #8]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d0f8      	beq.n	80133ba <rosidl_runtime_c__String__fini+0x26>
 80133c8:	4b12      	ldr	r3, [pc, #72]	@ (8013414 <rosidl_runtime_c__String__fini+0x80>)
 80133ca:	2251      	movs	r2, #81	@ 0x51
 80133cc:	2101      	movs	r1, #1
 80133ce:	4812      	ldr	r0, [pc, #72]	@ (8013418 <rosidl_runtime_c__String__fini+0x84>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	f000 fa62 	bl	801389c <fwrite>
 80133d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80133dc:	f000 f84a 	bl	8013474 <exit>
 80133e0:	4770      	bx	lr
 80133e2:	4b0c      	ldr	r3, [pc, #48]	@ (8013414 <rosidl_runtime_c__String__fini+0x80>)
 80133e4:	224c      	movs	r2, #76	@ 0x4c
 80133e6:	2101      	movs	r1, #1
 80133e8:	480c      	ldr	r0, [pc, #48]	@ (801341c <rosidl_runtime_c__String__fini+0x88>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	68db      	ldr	r3, [r3, #12]
 80133ee:	f000 fa55 	bl	801389c <fwrite>
 80133f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80133f6:	f000 f83d 	bl	8013474 <exit>
 80133fa:	4b06      	ldr	r3, [pc, #24]	@ (8013414 <rosidl_runtime_c__String__fini+0x80>)
 80133fc:	224e      	movs	r2, #78	@ 0x4e
 80133fe:	2101      	movs	r1, #1
 8013400:	4807      	ldr	r0, [pc, #28]	@ (8013420 <rosidl_runtime_c__String__fini+0x8c>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	f000 fa49 	bl	801389c <fwrite>
 801340a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801340e:	f000 f831 	bl	8013474 <exit>
 8013412:	bf00      	nop
 8013414:	2400139c 	.word	0x2400139c
 8013418:	0801596c 	.word	0x0801596c
 801341c:	080158cc 	.word	0x080158cc
 8013420:	0801591c 	.word	0x0801591c

08013424 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8013424:	3800      	subs	r0, #0
 8013426:	bf18      	it	ne
 8013428:	2001      	movne	r0, #1
 801342a:	4770      	bx	lr

0801342c <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 801342c:	4770      	bx	lr
 801342e:	bf00      	nop

08013430 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8013430:	3800      	subs	r0, #0
 8013432:	bf18      	it	ne
 8013434:	2001      	movne	r0, #1
 8013436:	4770      	bx	lr

08013438 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 8013438:	4770      	bx	lr
 801343a:	bf00      	nop

0801343c <calloc>:
 801343c:	4b02      	ldr	r3, [pc, #8]	@ (8013448 <calloc+0xc>)
 801343e:	460a      	mov	r2, r1
 8013440:	4601      	mov	r1, r0
 8013442:	6818      	ldr	r0, [r3, #0]
 8013444:	f000 b802 	b.w	801344c <_calloc_r>
 8013448:	2400139c 	.word	0x2400139c

0801344c <_calloc_r>:
 801344c:	b570      	push	{r4, r5, r6, lr}
 801344e:	fba1 5402 	umull	r5, r4, r1, r2
 8013452:	b93c      	cbnz	r4, 8013464 <_calloc_r+0x18>
 8013454:	4629      	mov	r1, r5
 8013456:	f000 f851 	bl	80134fc <_malloc_r>
 801345a:	4606      	mov	r6, r0
 801345c:	b928      	cbnz	r0, 801346a <_calloc_r+0x1e>
 801345e:	2600      	movs	r6, #0
 8013460:	4630      	mov	r0, r6
 8013462:	bd70      	pop	{r4, r5, r6, pc}
 8013464:	220c      	movs	r2, #12
 8013466:	6002      	str	r2, [r0, #0]
 8013468:	e7f9      	b.n	801345e <_calloc_r+0x12>
 801346a:	462a      	mov	r2, r5
 801346c:	4621      	mov	r1, r4
 801346e:	f000 fafb 	bl	8013a68 <memset>
 8013472:	e7f5      	b.n	8013460 <_calloc_r+0x14>

08013474 <exit>:
 8013474:	b508      	push	{r3, lr}
 8013476:	4b06      	ldr	r3, [pc, #24]	@ (8013490 <exit+0x1c>)
 8013478:	4604      	mov	r4, r0
 801347a:	b113      	cbz	r3, 8013482 <exit+0xe>
 801347c:	2100      	movs	r1, #0
 801347e:	f3af 8000 	nop.w
 8013482:	4b04      	ldr	r3, [pc, #16]	@ (8013494 <exit+0x20>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	b103      	cbz	r3, 801348a <exit+0x16>
 8013488:	4798      	blx	r3
 801348a:	4620      	mov	r0, r4
 801348c:	f7ed ff22 	bl	80012d4 <_exit>
 8013490:	00000000 	.word	0x00000000
 8013494:	24033520 	.word	0x24033520

08013498 <malloc>:
 8013498:	4b02      	ldr	r3, [pc, #8]	@ (80134a4 <malloc+0xc>)
 801349a:	4601      	mov	r1, r0
 801349c:	6818      	ldr	r0, [r3, #0]
 801349e:	f000 b82d 	b.w	80134fc <_malloc_r>
 80134a2:	bf00      	nop
 80134a4:	2400139c 	.word	0x2400139c

080134a8 <free>:
 80134a8:	4b02      	ldr	r3, [pc, #8]	@ (80134b4 <free+0xc>)
 80134aa:	4601      	mov	r1, r0
 80134ac:	6818      	ldr	r0, [r3, #0]
 80134ae:	f000 bbcb 	b.w	8013c48 <_free_r>
 80134b2:	bf00      	nop
 80134b4:	2400139c 	.word	0x2400139c

080134b8 <sbrk_aligned>:
 80134b8:	b570      	push	{r4, r5, r6, lr}
 80134ba:	4e0f      	ldr	r6, [pc, #60]	@ (80134f8 <sbrk_aligned+0x40>)
 80134bc:	460c      	mov	r4, r1
 80134be:	6831      	ldr	r1, [r6, #0]
 80134c0:	4605      	mov	r5, r0
 80134c2:	b911      	cbnz	r1, 80134ca <sbrk_aligned+0x12>
 80134c4:	f000 fb62 	bl	8013b8c <_sbrk_r>
 80134c8:	6030      	str	r0, [r6, #0]
 80134ca:	4621      	mov	r1, r4
 80134cc:	4628      	mov	r0, r5
 80134ce:	f000 fb5d 	bl	8013b8c <_sbrk_r>
 80134d2:	1c43      	adds	r3, r0, #1
 80134d4:	d103      	bne.n	80134de <sbrk_aligned+0x26>
 80134d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80134da:	4620      	mov	r0, r4
 80134dc:	bd70      	pop	{r4, r5, r6, pc}
 80134de:	1cc4      	adds	r4, r0, #3
 80134e0:	f024 0403 	bic.w	r4, r4, #3
 80134e4:	42a0      	cmp	r0, r4
 80134e6:	d0f8      	beq.n	80134da <sbrk_aligned+0x22>
 80134e8:	1a21      	subs	r1, r4, r0
 80134ea:	4628      	mov	r0, r5
 80134ec:	f000 fb4e 	bl	8013b8c <_sbrk_r>
 80134f0:	3001      	adds	r0, #1
 80134f2:	d1f2      	bne.n	80134da <sbrk_aligned+0x22>
 80134f4:	e7ef      	b.n	80134d6 <sbrk_aligned+0x1e>
 80134f6:	bf00      	nop
 80134f8:	240333e0 	.word	0x240333e0

080134fc <_malloc_r>:
 80134fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013500:	1ccd      	adds	r5, r1, #3
 8013502:	f025 0503 	bic.w	r5, r5, #3
 8013506:	3508      	adds	r5, #8
 8013508:	2d0c      	cmp	r5, #12
 801350a:	bf38      	it	cc
 801350c:	250c      	movcc	r5, #12
 801350e:	2d00      	cmp	r5, #0
 8013510:	4606      	mov	r6, r0
 8013512:	db01      	blt.n	8013518 <_malloc_r+0x1c>
 8013514:	42a9      	cmp	r1, r5
 8013516:	d904      	bls.n	8013522 <_malloc_r+0x26>
 8013518:	230c      	movs	r3, #12
 801351a:	6033      	str	r3, [r6, #0]
 801351c:	2000      	movs	r0, #0
 801351e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80135f8 <_malloc_r+0xfc>
 8013526:	f000 f869 	bl	80135fc <__malloc_lock>
 801352a:	f8d8 3000 	ldr.w	r3, [r8]
 801352e:	461c      	mov	r4, r3
 8013530:	bb44      	cbnz	r4, 8013584 <_malloc_r+0x88>
 8013532:	4629      	mov	r1, r5
 8013534:	4630      	mov	r0, r6
 8013536:	f7ff ffbf 	bl	80134b8 <sbrk_aligned>
 801353a:	1c43      	adds	r3, r0, #1
 801353c:	4604      	mov	r4, r0
 801353e:	d158      	bne.n	80135f2 <_malloc_r+0xf6>
 8013540:	f8d8 4000 	ldr.w	r4, [r8]
 8013544:	4627      	mov	r7, r4
 8013546:	2f00      	cmp	r7, #0
 8013548:	d143      	bne.n	80135d2 <_malloc_r+0xd6>
 801354a:	2c00      	cmp	r4, #0
 801354c:	d04b      	beq.n	80135e6 <_malloc_r+0xea>
 801354e:	6823      	ldr	r3, [r4, #0]
 8013550:	4639      	mov	r1, r7
 8013552:	4630      	mov	r0, r6
 8013554:	eb04 0903 	add.w	r9, r4, r3
 8013558:	f000 fb18 	bl	8013b8c <_sbrk_r>
 801355c:	4581      	cmp	r9, r0
 801355e:	d142      	bne.n	80135e6 <_malloc_r+0xea>
 8013560:	6821      	ldr	r1, [r4, #0]
 8013562:	1a6d      	subs	r5, r5, r1
 8013564:	4629      	mov	r1, r5
 8013566:	4630      	mov	r0, r6
 8013568:	f7ff ffa6 	bl	80134b8 <sbrk_aligned>
 801356c:	3001      	adds	r0, #1
 801356e:	d03a      	beq.n	80135e6 <_malloc_r+0xea>
 8013570:	6823      	ldr	r3, [r4, #0]
 8013572:	442b      	add	r3, r5
 8013574:	6023      	str	r3, [r4, #0]
 8013576:	f8d8 3000 	ldr.w	r3, [r8]
 801357a:	685a      	ldr	r2, [r3, #4]
 801357c:	bb62      	cbnz	r2, 80135d8 <_malloc_r+0xdc>
 801357e:	f8c8 7000 	str.w	r7, [r8]
 8013582:	e00f      	b.n	80135a4 <_malloc_r+0xa8>
 8013584:	6822      	ldr	r2, [r4, #0]
 8013586:	1b52      	subs	r2, r2, r5
 8013588:	d420      	bmi.n	80135cc <_malloc_r+0xd0>
 801358a:	2a0b      	cmp	r2, #11
 801358c:	d917      	bls.n	80135be <_malloc_r+0xc2>
 801358e:	1961      	adds	r1, r4, r5
 8013590:	42a3      	cmp	r3, r4
 8013592:	6025      	str	r5, [r4, #0]
 8013594:	bf18      	it	ne
 8013596:	6059      	strne	r1, [r3, #4]
 8013598:	6863      	ldr	r3, [r4, #4]
 801359a:	bf08      	it	eq
 801359c:	f8c8 1000 	streq.w	r1, [r8]
 80135a0:	5162      	str	r2, [r4, r5]
 80135a2:	604b      	str	r3, [r1, #4]
 80135a4:	4630      	mov	r0, r6
 80135a6:	f000 f82f 	bl	8013608 <__malloc_unlock>
 80135aa:	f104 000b 	add.w	r0, r4, #11
 80135ae:	1d23      	adds	r3, r4, #4
 80135b0:	f020 0007 	bic.w	r0, r0, #7
 80135b4:	1ac2      	subs	r2, r0, r3
 80135b6:	bf1c      	itt	ne
 80135b8:	1a1b      	subne	r3, r3, r0
 80135ba:	50a3      	strne	r3, [r4, r2]
 80135bc:	e7af      	b.n	801351e <_malloc_r+0x22>
 80135be:	6862      	ldr	r2, [r4, #4]
 80135c0:	42a3      	cmp	r3, r4
 80135c2:	bf0c      	ite	eq
 80135c4:	f8c8 2000 	streq.w	r2, [r8]
 80135c8:	605a      	strne	r2, [r3, #4]
 80135ca:	e7eb      	b.n	80135a4 <_malloc_r+0xa8>
 80135cc:	4623      	mov	r3, r4
 80135ce:	6864      	ldr	r4, [r4, #4]
 80135d0:	e7ae      	b.n	8013530 <_malloc_r+0x34>
 80135d2:	463c      	mov	r4, r7
 80135d4:	687f      	ldr	r7, [r7, #4]
 80135d6:	e7b6      	b.n	8013546 <_malloc_r+0x4a>
 80135d8:	461a      	mov	r2, r3
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	42a3      	cmp	r3, r4
 80135de:	d1fb      	bne.n	80135d8 <_malloc_r+0xdc>
 80135e0:	2300      	movs	r3, #0
 80135e2:	6053      	str	r3, [r2, #4]
 80135e4:	e7de      	b.n	80135a4 <_malloc_r+0xa8>
 80135e6:	230c      	movs	r3, #12
 80135e8:	6033      	str	r3, [r6, #0]
 80135ea:	4630      	mov	r0, r6
 80135ec:	f000 f80c 	bl	8013608 <__malloc_unlock>
 80135f0:	e794      	b.n	801351c <_malloc_r+0x20>
 80135f2:	6005      	str	r5, [r0, #0]
 80135f4:	e7d6      	b.n	80135a4 <_malloc_r+0xa8>
 80135f6:	bf00      	nop
 80135f8:	240333e4 	.word	0x240333e4

080135fc <__malloc_lock>:
 80135fc:	4801      	ldr	r0, [pc, #4]	@ (8013604 <__malloc_lock+0x8>)
 80135fe:	f000 bb12 	b.w	8013c26 <__retarget_lock_acquire_recursive>
 8013602:	bf00      	nop
 8013604:	24033528 	.word	0x24033528

08013608 <__malloc_unlock>:
 8013608:	4801      	ldr	r0, [pc, #4]	@ (8013610 <__malloc_unlock+0x8>)
 801360a:	f000 bb0d 	b.w	8013c28 <__retarget_lock_release_recursive>
 801360e:	bf00      	nop
 8013610:	24033528 	.word	0x24033528

08013614 <realloc>:
 8013614:	4b02      	ldr	r3, [pc, #8]	@ (8013620 <realloc+0xc>)
 8013616:	460a      	mov	r2, r1
 8013618:	4601      	mov	r1, r0
 801361a:	6818      	ldr	r0, [r3, #0]
 801361c:	f000 b802 	b.w	8013624 <_realloc_r>
 8013620:	2400139c 	.word	0x2400139c

08013624 <_realloc_r>:
 8013624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013628:	4680      	mov	r8, r0
 801362a:	4615      	mov	r5, r2
 801362c:	460c      	mov	r4, r1
 801362e:	b921      	cbnz	r1, 801363a <_realloc_r+0x16>
 8013630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013634:	4611      	mov	r1, r2
 8013636:	f7ff bf61 	b.w	80134fc <_malloc_r>
 801363a:	b92a      	cbnz	r2, 8013648 <_realloc_r+0x24>
 801363c:	f000 fb04 	bl	8013c48 <_free_r>
 8013640:	2400      	movs	r4, #0
 8013642:	4620      	mov	r0, r4
 8013644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013648:	f000 fb48 	bl	8013cdc <_malloc_usable_size_r>
 801364c:	4285      	cmp	r5, r0
 801364e:	4606      	mov	r6, r0
 8013650:	d802      	bhi.n	8013658 <_realloc_r+0x34>
 8013652:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013656:	d8f4      	bhi.n	8013642 <_realloc_r+0x1e>
 8013658:	4629      	mov	r1, r5
 801365a:	4640      	mov	r0, r8
 801365c:	f7ff ff4e 	bl	80134fc <_malloc_r>
 8013660:	4607      	mov	r7, r0
 8013662:	2800      	cmp	r0, #0
 8013664:	d0ec      	beq.n	8013640 <_realloc_r+0x1c>
 8013666:	42b5      	cmp	r5, r6
 8013668:	462a      	mov	r2, r5
 801366a:	4621      	mov	r1, r4
 801366c:	bf28      	it	cs
 801366e:	4632      	movcs	r2, r6
 8013670:	f000 fadb 	bl	8013c2a <memcpy>
 8013674:	4621      	mov	r1, r4
 8013676:	4640      	mov	r0, r8
 8013678:	f000 fae6 	bl	8013c48 <_free_r>
 801367c:	463c      	mov	r4, r7
 801367e:	e7e0      	b.n	8013642 <_realloc_r+0x1e>

08013680 <std>:
 8013680:	2300      	movs	r3, #0
 8013682:	b510      	push	{r4, lr}
 8013684:	4604      	mov	r4, r0
 8013686:	e9c0 3300 	strd	r3, r3, [r0]
 801368a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801368e:	6083      	str	r3, [r0, #8]
 8013690:	8181      	strh	r1, [r0, #12]
 8013692:	6643      	str	r3, [r0, #100]	@ 0x64
 8013694:	81c2      	strh	r2, [r0, #14]
 8013696:	6183      	str	r3, [r0, #24]
 8013698:	4619      	mov	r1, r3
 801369a:	2208      	movs	r2, #8
 801369c:	305c      	adds	r0, #92	@ 0x5c
 801369e:	f000 f9e3 	bl	8013a68 <memset>
 80136a2:	4b0d      	ldr	r3, [pc, #52]	@ (80136d8 <std+0x58>)
 80136a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80136a6:	4b0d      	ldr	r3, [pc, #52]	@ (80136dc <std+0x5c>)
 80136a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80136aa:	4b0d      	ldr	r3, [pc, #52]	@ (80136e0 <std+0x60>)
 80136ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80136ae:	4b0d      	ldr	r3, [pc, #52]	@ (80136e4 <std+0x64>)
 80136b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80136b2:	4b0d      	ldr	r3, [pc, #52]	@ (80136e8 <std+0x68>)
 80136b4:	6224      	str	r4, [r4, #32]
 80136b6:	429c      	cmp	r4, r3
 80136b8:	d006      	beq.n	80136c8 <std+0x48>
 80136ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80136be:	4294      	cmp	r4, r2
 80136c0:	d002      	beq.n	80136c8 <std+0x48>
 80136c2:	33d0      	adds	r3, #208	@ 0xd0
 80136c4:	429c      	cmp	r4, r3
 80136c6:	d105      	bne.n	80136d4 <std+0x54>
 80136c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80136cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136d0:	f000 baa8 	b.w	8013c24 <__retarget_lock_init_recursive>
 80136d4:	bd10      	pop	{r4, pc}
 80136d6:	bf00      	nop
 80136d8:	080138b9 	.word	0x080138b9
 80136dc:	080138db 	.word	0x080138db
 80136e0:	08013913 	.word	0x08013913
 80136e4:	08013937 	.word	0x08013937
 80136e8:	240333e8 	.word	0x240333e8

080136ec <stdio_exit_handler>:
 80136ec:	4a02      	ldr	r2, [pc, #8]	@ (80136f8 <stdio_exit_handler+0xc>)
 80136ee:	4903      	ldr	r1, [pc, #12]	@ (80136fc <stdio_exit_handler+0x10>)
 80136f0:	4803      	ldr	r0, [pc, #12]	@ (8013700 <stdio_exit_handler+0x14>)
 80136f2:	f000 b869 	b.w	80137c8 <_fwalk_sglue>
 80136f6:	bf00      	nop
 80136f8:	24001390 	.word	0x24001390
 80136fc:	08013df5 	.word	0x08013df5
 8013700:	240013a0 	.word	0x240013a0

08013704 <cleanup_stdio>:
 8013704:	6841      	ldr	r1, [r0, #4]
 8013706:	4b0c      	ldr	r3, [pc, #48]	@ (8013738 <cleanup_stdio+0x34>)
 8013708:	4299      	cmp	r1, r3
 801370a:	b510      	push	{r4, lr}
 801370c:	4604      	mov	r4, r0
 801370e:	d001      	beq.n	8013714 <cleanup_stdio+0x10>
 8013710:	f000 fb70 	bl	8013df4 <_fflush_r>
 8013714:	68a1      	ldr	r1, [r4, #8]
 8013716:	4b09      	ldr	r3, [pc, #36]	@ (801373c <cleanup_stdio+0x38>)
 8013718:	4299      	cmp	r1, r3
 801371a:	d002      	beq.n	8013722 <cleanup_stdio+0x1e>
 801371c:	4620      	mov	r0, r4
 801371e:	f000 fb69 	bl	8013df4 <_fflush_r>
 8013722:	68e1      	ldr	r1, [r4, #12]
 8013724:	4b06      	ldr	r3, [pc, #24]	@ (8013740 <cleanup_stdio+0x3c>)
 8013726:	4299      	cmp	r1, r3
 8013728:	d004      	beq.n	8013734 <cleanup_stdio+0x30>
 801372a:	4620      	mov	r0, r4
 801372c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013730:	f000 bb60 	b.w	8013df4 <_fflush_r>
 8013734:	bd10      	pop	{r4, pc}
 8013736:	bf00      	nop
 8013738:	240333e8 	.word	0x240333e8
 801373c:	24033450 	.word	0x24033450
 8013740:	240334b8 	.word	0x240334b8

08013744 <global_stdio_init.part.0>:
 8013744:	b510      	push	{r4, lr}
 8013746:	4b0b      	ldr	r3, [pc, #44]	@ (8013774 <global_stdio_init.part.0+0x30>)
 8013748:	4c0b      	ldr	r4, [pc, #44]	@ (8013778 <global_stdio_init.part.0+0x34>)
 801374a:	4a0c      	ldr	r2, [pc, #48]	@ (801377c <global_stdio_init.part.0+0x38>)
 801374c:	601a      	str	r2, [r3, #0]
 801374e:	4620      	mov	r0, r4
 8013750:	2200      	movs	r2, #0
 8013752:	2104      	movs	r1, #4
 8013754:	f7ff ff94 	bl	8013680 <std>
 8013758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801375c:	2201      	movs	r2, #1
 801375e:	2109      	movs	r1, #9
 8013760:	f7ff ff8e 	bl	8013680 <std>
 8013764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013768:	2202      	movs	r2, #2
 801376a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801376e:	2112      	movs	r1, #18
 8013770:	f7ff bf86 	b.w	8013680 <std>
 8013774:	24033520 	.word	0x24033520
 8013778:	240333e8 	.word	0x240333e8
 801377c:	080136ed 	.word	0x080136ed

08013780 <__sfp_lock_acquire>:
 8013780:	4801      	ldr	r0, [pc, #4]	@ (8013788 <__sfp_lock_acquire+0x8>)
 8013782:	f000 ba50 	b.w	8013c26 <__retarget_lock_acquire_recursive>
 8013786:	bf00      	nop
 8013788:	24033529 	.word	0x24033529

0801378c <__sfp_lock_release>:
 801378c:	4801      	ldr	r0, [pc, #4]	@ (8013794 <__sfp_lock_release+0x8>)
 801378e:	f000 ba4b 	b.w	8013c28 <__retarget_lock_release_recursive>
 8013792:	bf00      	nop
 8013794:	24033529 	.word	0x24033529

08013798 <__sinit>:
 8013798:	b510      	push	{r4, lr}
 801379a:	4604      	mov	r4, r0
 801379c:	f7ff fff0 	bl	8013780 <__sfp_lock_acquire>
 80137a0:	6a23      	ldr	r3, [r4, #32]
 80137a2:	b11b      	cbz	r3, 80137ac <__sinit+0x14>
 80137a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137a8:	f7ff bff0 	b.w	801378c <__sfp_lock_release>
 80137ac:	4b04      	ldr	r3, [pc, #16]	@ (80137c0 <__sinit+0x28>)
 80137ae:	6223      	str	r3, [r4, #32]
 80137b0:	4b04      	ldr	r3, [pc, #16]	@ (80137c4 <__sinit+0x2c>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d1f5      	bne.n	80137a4 <__sinit+0xc>
 80137b8:	f7ff ffc4 	bl	8013744 <global_stdio_init.part.0>
 80137bc:	e7f2      	b.n	80137a4 <__sinit+0xc>
 80137be:	bf00      	nop
 80137c0:	08013705 	.word	0x08013705
 80137c4:	24033520 	.word	0x24033520

080137c8 <_fwalk_sglue>:
 80137c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137cc:	4607      	mov	r7, r0
 80137ce:	4688      	mov	r8, r1
 80137d0:	4614      	mov	r4, r2
 80137d2:	2600      	movs	r6, #0
 80137d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80137d8:	f1b9 0901 	subs.w	r9, r9, #1
 80137dc:	d505      	bpl.n	80137ea <_fwalk_sglue+0x22>
 80137de:	6824      	ldr	r4, [r4, #0]
 80137e0:	2c00      	cmp	r4, #0
 80137e2:	d1f7      	bne.n	80137d4 <_fwalk_sglue+0xc>
 80137e4:	4630      	mov	r0, r6
 80137e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ea:	89ab      	ldrh	r3, [r5, #12]
 80137ec:	2b01      	cmp	r3, #1
 80137ee:	d907      	bls.n	8013800 <_fwalk_sglue+0x38>
 80137f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80137f4:	3301      	adds	r3, #1
 80137f6:	d003      	beq.n	8013800 <_fwalk_sglue+0x38>
 80137f8:	4629      	mov	r1, r5
 80137fa:	4638      	mov	r0, r7
 80137fc:	47c0      	blx	r8
 80137fe:	4306      	orrs	r6, r0
 8013800:	3568      	adds	r5, #104	@ 0x68
 8013802:	e7e9      	b.n	80137d8 <_fwalk_sglue+0x10>

08013804 <_fwrite_r>:
 8013804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013808:	9c08      	ldr	r4, [sp, #32]
 801380a:	468a      	mov	sl, r1
 801380c:	4690      	mov	r8, r2
 801380e:	fb02 f903 	mul.w	r9, r2, r3
 8013812:	4606      	mov	r6, r0
 8013814:	b118      	cbz	r0, 801381e <_fwrite_r+0x1a>
 8013816:	6a03      	ldr	r3, [r0, #32]
 8013818:	b90b      	cbnz	r3, 801381e <_fwrite_r+0x1a>
 801381a:	f7ff ffbd 	bl	8013798 <__sinit>
 801381e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013820:	07dd      	lsls	r5, r3, #31
 8013822:	d405      	bmi.n	8013830 <_fwrite_r+0x2c>
 8013824:	89a3      	ldrh	r3, [r4, #12]
 8013826:	0598      	lsls	r0, r3, #22
 8013828:	d402      	bmi.n	8013830 <_fwrite_r+0x2c>
 801382a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801382c:	f000 f9fb 	bl	8013c26 <__retarget_lock_acquire_recursive>
 8013830:	89a3      	ldrh	r3, [r4, #12]
 8013832:	0719      	lsls	r1, r3, #28
 8013834:	d516      	bpl.n	8013864 <_fwrite_r+0x60>
 8013836:	6923      	ldr	r3, [r4, #16]
 8013838:	b1a3      	cbz	r3, 8013864 <_fwrite_r+0x60>
 801383a:	2500      	movs	r5, #0
 801383c:	454d      	cmp	r5, r9
 801383e:	d01f      	beq.n	8013880 <_fwrite_r+0x7c>
 8013840:	68a7      	ldr	r7, [r4, #8]
 8013842:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8013846:	3f01      	subs	r7, #1
 8013848:	2f00      	cmp	r7, #0
 801384a:	60a7      	str	r7, [r4, #8]
 801384c:	da04      	bge.n	8013858 <_fwrite_r+0x54>
 801384e:	69a3      	ldr	r3, [r4, #24]
 8013850:	429f      	cmp	r7, r3
 8013852:	db0f      	blt.n	8013874 <_fwrite_r+0x70>
 8013854:	290a      	cmp	r1, #10
 8013856:	d00d      	beq.n	8013874 <_fwrite_r+0x70>
 8013858:	6823      	ldr	r3, [r4, #0]
 801385a:	1c5a      	adds	r2, r3, #1
 801385c:	6022      	str	r2, [r4, #0]
 801385e:	7019      	strb	r1, [r3, #0]
 8013860:	3501      	adds	r5, #1
 8013862:	e7eb      	b.n	801383c <_fwrite_r+0x38>
 8013864:	4621      	mov	r1, r4
 8013866:	4630      	mov	r0, r6
 8013868:	f000 f8a8 	bl	80139bc <__swsetup_r>
 801386c:	2800      	cmp	r0, #0
 801386e:	d0e4      	beq.n	801383a <_fwrite_r+0x36>
 8013870:	2500      	movs	r5, #0
 8013872:	e005      	b.n	8013880 <_fwrite_r+0x7c>
 8013874:	4622      	mov	r2, r4
 8013876:	4630      	mov	r0, r6
 8013878:	f000 f861 	bl	801393e <__swbuf_r>
 801387c:	3001      	adds	r0, #1
 801387e:	d1ef      	bne.n	8013860 <_fwrite_r+0x5c>
 8013880:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013882:	07da      	lsls	r2, r3, #31
 8013884:	d405      	bmi.n	8013892 <_fwrite_r+0x8e>
 8013886:	89a3      	ldrh	r3, [r4, #12]
 8013888:	059b      	lsls	r3, r3, #22
 801388a:	d402      	bmi.n	8013892 <_fwrite_r+0x8e>
 801388c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801388e:	f000 f9cb 	bl	8013c28 <__retarget_lock_release_recursive>
 8013892:	fbb5 f0f8 	udiv	r0, r5, r8
 8013896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801389c <fwrite>:
 801389c:	b507      	push	{r0, r1, r2, lr}
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	4613      	mov	r3, r2
 80138a2:	460a      	mov	r2, r1
 80138a4:	4601      	mov	r1, r0
 80138a6:	4803      	ldr	r0, [pc, #12]	@ (80138b4 <fwrite+0x18>)
 80138a8:	6800      	ldr	r0, [r0, #0]
 80138aa:	f7ff ffab 	bl	8013804 <_fwrite_r>
 80138ae:	b003      	add	sp, #12
 80138b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80138b4:	2400139c 	.word	0x2400139c

080138b8 <__sread>:
 80138b8:	b510      	push	{r4, lr}
 80138ba:	460c      	mov	r4, r1
 80138bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138c0:	f000 f952 	bl	8013b68 <_read_r>
 80138c4:	2800      	cmp	r0, #0
 80138c6:	bfab      	itete	ge
 80138c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80138ca:	89a3      	ldrhlt	r3, [r4, #12]
 80138cc:	181b      	addge	r3, r3, r0
 80138ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80138d2:	bfac      	ite	ge
 80138d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80138d6:	81a3      	strhlt	r3, [r4, #12]
 80138d8:	bd10      	pop	{r4, pc}

080138da <__swrite>:
 80138da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138de:	461f      	mov	r7, r3
 80138e0:	898b      	ldrh	r3, [r1, #12]
 80138e2:	05db      	lsls	r3, r3, #23
 80138e4:	4605      	mov	r5, r0
 80138e6:	460c      	mov	r4, r1
 80138e8:	4616      	mov	r6, r2
 80138ea:	d505      	bpl.n	80138f8 <__swrite+0x1e>
 80138ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138f0:	2302      	movs	r3, #2
 80138f2:	2200      	movs	r2, #0
 80138f4:	f000 f926 	bl	8013b44 <_lseek_r>
 80138f8:	89a3      	ldrh	r3, [r4, #12]
 80138fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013902:	81a3      	strh	r3, [r4, #12]
 8013904:	4632      	mov	r2, r6
 8013906:	463b      	mov	r3, r7
 8013908:	4628      	mov	r0, r5
 801390a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801390e:	f000 b94d 	b.w	8013bac <_write_r>

08013912 <__sseek>:
 8013912:	b510      	push	{r4, lr}
 8013914:	460c      	mov	r4, r1
 8013916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801391a:	f000 f913 	bl	8013b44 <_lseek_r>
 801391e:	1c43      	adds	r3, r0, #1
 8013920:	89a3      	ldrh	r3, [r4, #12]
 8013922:	bf15      	itete	ne
 8013924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801392a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801392e:	81a3      	strheq	r3, [r4, #12]
 8013930:	bf18      	it	ne
 8013932:	81a3      	strhne	r3, [r4, #12]
 8013934:	bd10      	pop	{r4, pc}

08013936 <__sclose>:
 8013936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801393a:	f000 b89d 	b.w	8013a78 <_close_r>

0801393e <__swbuf_r>:
 801393e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013940:	460e      	mov	r6, r1
 8013942:	4614      	mov	r4, r2
 8013944:	4605      	mov	r5, r0
 8013946:	b118      	cbz	r0, 8013950 <__swbuf_r+0x12>
 8013948:	6a03      	ldr	r3, [r0, #32]
 801394a:	b90b      	cbnz	r3, 8013950 <__swbuf_r+0x12>
 801394c:	f7ff ff24 	bl	8013798 <__sinit>
 8013950:	69a3      	ldr	r3, [r4, #24]
 8013952:	60a3      	str	r3, [r4, #8]
 8013954:	89a3      	ldrh	r3, [r4, #12]
 8013956:	071a      	lsls	r2, r3, #28
 8013958:	d501      	bpl.n	801395e <__swbuf_r+0x20>
 801395a:	6923      	ldr	r3, [r4, #16]
 801395c:	b943      	cbnz	r3, 8013970 <__swbuf_r+0x32>
 801395e:	4621      	mov	r1, r4
 8013960:	4628      	mov	r0, r5
 8013962:	f000 f82b 	bl	80139bc <__swsetup_r>
 8013966:	b118      	cbz	r0, 8013970 <__swbuf_r+0x32>
 8013968:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801396c:	4638      	mov	r0, r7
 801396e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013970:	6823      	ldr	r3, [r4, #0]
 8013972:	6922      	ldr	r2, [r4, #16]
 8013974:	1a98      	subs	r0, r3, r2
 8013976:	6963      	ldr	r3, [r4, #20]
 8013978:	b2f6      	uxtb	r6, r6
 801397a:	4283      	cmp	r3, r0
 801397c:	4637      	mov	r7, r6
 801397e:	dc05      	bgt.n	801398c <__swbuf_r+0x4e>
 8013980:	4621      	mov	r1, r4
 8013982:	4628      	mov	r0, r5
 8013984:	f000 fa36 	bl	8013df4 <_fflush_r>
 8013988:	2800      	cmp	r0, #0
 801398a:	d1ed      	bne.n	8013968 <__swbuf_r+0x2a>
 801398c:	68a3      	ldr	r3, [r4, #8]
 801398e:	3b01      	subs	r3, #1
 8013990:	60a3      	str	r3, [r4, #8]
 8013992:	6823      	ldr	r3, [r4, #0]
 8013994:	1c5a      	adds	r2, r3, #1
 8013996:	6022      	str	r2, [r4, #0]
 8013998:	701e      	strb	r6, [r3, #0]
 801399a:	6962      	ldr	r2, [r4, #20]
 801399c:	1c43      	adds	r3, r0, #1
 801399e:	429a      	cmp	r2, r3
 80139a0:	d004      	beq.n	80139ac <__swbuf_r+0x6e>
 80139a2:	89a3      	ldrh	r3, [r4, #12]
 80139a4:	07db      	lsls	r3, r3, #31
 80139a6:	d5e1      	bpl.n	801396c <__swbuf_r+0x2e>
 80139a8:	2e0a      	cmp	r6, #10
 80139aa:	d1df      	bne.n	801396c <__swbuf_r+0x2e>
 80139ac:	4621      	mov	r1, r4
 80139ae:	4628      	mov	r0, r5
 80139b0:	f000 fa20 	bl	8013df4 <_fflush_r>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	d0d9      	beq.n	801396c <__swbuf_r+0x2e>
 80139b8:	e7d6      	b.n	8013968 <__swbuf_r+0x2a>
	...

080139bc <__swsetup_r>:
 80139bc:	b538      	push	{r3, r4, r5, lr}
 80139be:	4b29      	ldr	r3, [pc, #164]	@ (8013a64 <__swsetup_r+0xa8>)
 80139c0:	4605      	mov	r5, r0
 80139c2:	6818      	ldr	r0, [r3, #0]
 80139c4:	460c      	mov	r4, r1
 80139c6:	b118      	cbz	r0, 80139d0 <__swsetup_r+0x14>
 80139c8:	6a03      	ldr	r3, [r0, #32]
 80139ca:	b90b      	cbnz	r3, 80139d0 <__swsetup_r+0x14>
 80139cc:	f7ff fee4 	bl	8013798 <__sinit>
 80139d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139d4:	0719      	lsls	r1, r3, #28
 80139d6:	d422      	bmi.n	8013a1e <__swsetup_r+0x62>
 80139d8:	06da      	lsls	r2, r3, #27
 80139da:	d407      	bmi.n	80139ec <__swsetup_r+0x30>
 80139dc:	2209      	movs	r2, #9
 80139de:	602a      	str	r2, [r5, #0]
 80139e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139e4:	81a3      	strh	r3, [r4, #12]
 80139e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80139ea:	e033      	b.n	8013a54 <__swsetup_r+0x98>
 80139ec:	0758      	lsls	r0, r3, #29
 80139ee:	d512      	bpl.n	8013a16 <__swsetup_r+0x5a>
 80139f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139f2:	b141      	cbz	r1, 8013a06 <__swsetup_r+0x4a>
 80139f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80139f8:	4299      	cmp	r1, r3
 80139fa:	d002      	beq.n	8013a02 <__swsetup_r+0x46>
 80139fc:	4628      	mov	r0, r5
 80139fe:	f000 f923 	bl	8013c48 <_free_r>
 8013a02:	2300      	movs	r3, #0
 8013a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8013a06:	89a3      	ldrh	r3, [r4, #12]
 8013a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013a0c:	81a3      	strh	r3, [r4, #12]
 8013a0e:	2300      	movs	r3, #0
 8013a10:	6063      	str	r3, [r4, #4]
 8013a12:	6923      	ldr	r3, [r4, #16]
 8013a14:	6023      	str	r3, [r4, #0]
 8013a16:	89a3      	ldrh	r3, [r4, #12]
 8013a18:	f043 0308 	orr.w	r3, r3, #8
 8013a1c:	81a3      	strh	r3, [r4, #12]
 8013a1e:	6923      	ldr	r3, [r4, #16]
 8013a20:	b94b      	cbnz	r3, 8013a36 <__swsetup_r+0x7a>
 8013a22:	89a3      	ldrh	r3, [r4, #12]
 8013a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013a2c:	d003      	beq.n	8013a36 <__swsetup_r+0x7a>
 8013a2e:	4621      	mov	r1, r4
 8013a30:	4628      	mov	r0, r5
 8013a32:	f000 fa2d 	bl	8013e90 <__smakebuf_r>
 8013a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a3a:	f013 0201 	ands.w	r2, r3, #1
 8013a3e:	d00a      	beq.n	8013a56 <__swsetup_r+0x9a>
 8013a40:	2200      	movs	r2, #0
 8013a42:	60a2      	str	r2, [r4, #8]
 8013a44:	6962      	ldr	r2, [r4, #20]
 8013a46:	4252      	negs	r2, r2
 8013a48:	61a2      	str	r2, [r4, #24]
 8013a4a:	6922      	ldr	r2, [r4, #16]
 8013a4c:	b942      	cbnz	r2, 8013a60 <__swsetup_r+0xa4>
 8013a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013a52:	d1c5      	bne.n	80139e0 <__swsetup_r+0x24>
 8013a54:	bd38      	pop	{r3, r4, r5, pc}
 8013a56:	0799      	lsls	r1, r3, #30
 8013a58:	bf58      	it	pl
 8013a5a:	6962      	ldrpl	r2, [r4, #20]
 8013a5c:	60a2      	str	r2, [r4, #8]
 8013a5e:	e7f4      	b.n	8013a4a <__swsetup_r+0x8e>
 8013a60:	2000      	movs	r0, #0
 8013a62:	e7f7      	b.n	8013a54 <__swsetup_r+0x98>
 8013a64:	2400139c 	.word	0x2400139c

08013a68 <memset>:
 8013a68:	4402      	add	r2, r0
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	4293      	cmp	r3, r2
 8013a6e:	d100      	bne.n	8013a72 <memset+0xa>
 8013a70:	4770      	bx	lr
 8013a72:	f803 1b01 	strb.w	r1, [r3], #1
 8013a76:	e7f9      	b.n	8013a6c <memset+0x4>

08013a78 <_close_r>:
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4d06      	ldr	r5, [pc, #24]	@ (8013a94 <_close_r+0x1c>)
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	4604      	mov	r4, r0
 8013a80:	4608      	mov	r0, r1
 8013a82:	602b      	str	r3, [r5, #0]
 8013a84:	f7ed fc6a 	bl	800135c <_close>
 8013a88:	1c43      	adds	r3, r0, #1
 8013a8a:	d102      	bne.n	8013a92 <_close_r+0x1a>
 8013a8c:	682b      	ldr	r3, [r5, #0]
 8013a8e:	b103      	cbz	r3, 8013a92 <_close_r+0x1a>
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	bd38      	pop	{r3, r4, r5, pc}
 8013a94:	24033524 	.word	0x24033524

08013a98 <_reclaim_reent>:
 8013a98:	4b29      	ldr	r3, [pc, #164]	@ (8013b40 <_reclaim_reent+0xa8>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	4283      	cmp	r3, r0
 8013a9e:	b570      	push	{r4, r5, r6, lr}
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	d04b      	beq.n	8013b3c <_reclaim_reent+0xa4>
 8013aa4:	69c3      	ldr	r3, [r0, #28]
 8013aa6:	b1ab      	cbz	r3, 8013ad4 <_reclaim_reent+0x3c>
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	b16b      	cbz	r3, 8013ac8 <_reclaim_reent+0x30>
 8013aac:	2500      	movs	r5, #0
 8013aae:	69e3      	ldr	r3, [r4, #28]
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	5959      	ldr	r1, [r3, r5]
 8013ab4:	2900      	cmp	r1, #0
 8013ab6:	d13b      	bne.n	8013b30 <_reclaim_reent+0x98>
 8013ab8:	3504      	adds	r5, #4
 8013aba:	2d80      	cmp	r5, #128	@ 0x80
 8013abc:	d1f7      	bne.n	8013aae <_reclaim_reent+0x16>
 8013abe:	69e3      	ldr	r3, [r4, #28]
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	68d9      	ldr	r1, [r3, #12]
 8013ac4:	f000 f8c0 	bl	8013c48 <_free_r>
 8013ac8:	69e3      	ldr	r3, [r4, #28]
 8013aca:	6819      	ldr	r1, [r3, #0]
 8013acc:	b111      	cbz	r1, 8013ad4 <_reclaim_reent+0x3c>
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f000 f8ba 	bl	8013c48 <_free_r>
 8013ad4:	6961      	ldr	r1, [r4, #20]
 8013ad6:	b111      	cbz	r1, 8013ade <_reclaim_reent+0x46>
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f000 f8b5 	bl	8013c48 <_free_r>
 8013ade:	69e1      	ldr	r1, [r4, #28]
 8013ae0:	b111      	cbz	r1, 8013ae8 <_reclaim_reent+0x50>
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f000 f8b0 	bl	8013c48 <_free_r>
 8013ae8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013aea:	b111      	cbz	r1, 8013af2 <_reclaim_reent+0x5a>
 8013aec:	4620      	mov	r0, r4
 8013aee:	f000 f8ab 	bl	8013c48 <_free_r>
 8013af2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013af4:	b111      	cbz	r1, 8013afc <_reclaim_reent+0x64>
 8013af6:	4620      	mov	r0, r4
 8013af8:	f000 f8a6 	bl	8013c48 <_free_r>
 8013afc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013afe:	b111      	cbz	r1, 8013b06 <_reclaim_reent+0x6e>
 8013b00:	4620      	mov	r0, r4
 8013b02:	f000 f8a1 	bl	8013c48 <_free_r>
 8013b06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013b08:	b111      	cbz	r1, 8013b10 <_reclaim_reent+0x78>
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	f000 f89c 	bl	8013c48 <_free_r>
 8013b10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013b12:	b111      	cbz	r1, 8013b1a <_reclaim_reent+0x82>
 8013b14:	4620      	mov	r0, r4
 8013b16:	f000 f897 	bl	8013c48 <_free_r>
 8013b1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013b1c:	b111      	cbz	r1, 8013b24 <_reclaim_reent+0x8c>
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f000 f892 	bl	8013c48 <_free_r>
 8013b24:	6a23      	ldr	r3, [r4, #32]
 8013b26:	b14b      	cbz	r3, 8013b3c <_reclaim_reent+0xa4>
 8013b28:	4620      	mov	r0, r4
 8013b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b2e:	4718      	bx	r3
 8013b30:	680e      	ldr	r6, [r1, #0]
 8013b32:	4620      	mov	r0, r4
 8013b34:	f000 f888 	bl	8013c48 <_free_r>
 8013b38:	4631      	mov	r1, r6
 8013b3a:	e7bb      	b.n	8013ab4 <_reclaim_reent+0x1c>
 8013b3c:	bd70      	pop	{r4, r5, r6, pc}
 8013b3e:	bf00      	nop
 8013b40:	2400139c 	.word	0x2400139c

08013b44 <_lseek_r>:
 8013b44:	b538      	push	{r3, r4, r5, lr}
 8013b46:	4d07      	ldr	r5, [pc, #28]	@ (8013b64 <_lseek_r+0x20>)
 8013b48:	4604      	mov	r4, r0
 8013b4a:	4608      	mov	r0, r1
 8013b4c:	4611      	mov	r1, r2
 8013b4e:	2200      	movs	r2, #0
 8013b50:	602a      	str	r2, [r5, #0]
 8013b52:	461a      	mov	r2, r3
 8013b54:	f7ed fc29 	bl	80013aa <_lseek>
 8013b58:	1c43      	adds	r3, r0, #1
 8013b5a:	d102      	bne.n	8013b62 <_lseek_r+0x1e>
 8013b5c:	682b      	ldr	r3, [r5, #0]
 8013b5e:	b103      	cbz	r3, 8013b62 <_lseek_r+0x1e>
 8013b60:	6023      	str	r3, [r4, #0]
 8013b62:	bd38      	pop	{r3, r4, r5, pc}
 8013b64:	24033524 	.word	0x24033524

08013b68 <_read_r>:
 8013b68:	b538      	push	{r3, r4, r5, lr}
 8013b6a:	4d07      	ldr	r5, [pc, #28]	@ (8013b88 <_read_r+0x20>)
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	4608      	mov	r0, r1
 8013b70:	4611      	mov	r1, r2
 8013b72:	2200      	movs	r2, #0
 8013b74:	602a      	str	r2, [r5, #0]
 8013b76:	461a      	mov	r2, r3
 8013b78:	f7ed fbb7 	bl	80012ea <_read>
 8013b7c:	1c43      	adds	r3, r0, #1
 8013b7e:	d102      	bne.n	8013b86 <_read_r+0x1e>
 8013b80:	682b      	ldr	r3, [r5, #0]
 8013b82:	b103      	cbz	r3, 8013b86 <_read_r+0x1e>
 8013b84:	6023      	str	r3, [r4, #0]
 8013b86:	bd38      	pop	{r3, r4, r5, pc}
 8013b88:	24033524 	.word	0x24033524

08013b8c <_sbrk_r>:
 8013b8c:	b538      	push	{r3, r4, r5, lr}
 8013b8e:	4d06      	ldr	r5, [pc, #24]	@ (8013ba8 <_sbrk_r+0x1c>)
 8013b90:	2300      	movs	r3, #0
 8013b92:	4604      	mov	r4, r0
 8013b94:	4608      	mov	r0, r1
 8013b96:	602b      	str	r3, [r5, #0]
 8013b98:	f7ed fc14 	bl	80013c4 <_sbrk>
 8013b9c:	1c43      	adds	r3, r0, #1
 8013b9e:	d102      	bne.n	8013ba6 <_sbrk_r+0x1a>
 8013ba0:	682b      	ldr	r3, [r5, #0]
 8013ba2:	b103      	cbz	r3, 8013ba6 <_sbrk_r+0x1a>
 8013ba4:	6023      	str	r3, [r4, #0]
 8013ba6:	bd38      	pop	{r3, r4, r5, pc}
 8013ba8:	24033524 	.word	0x24033524

08013bac <_write_r>:
 8013bac:	b538      	push	{r3, r4, r5, lr}
 8013bae:	4d07      	ldr	r5, [pc, #28]	@ (8013bcc <_write_r+0x20>)
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	4608      	mov	r0, r1
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	602a      	str	r2, [r5, #0]
 8013bba:	461a      	mov	r2, r3
 8013bbc:	f7ed fbb2 	bl	8001324 <_write>
 8013bc0:	1c43      	adds	r3, r0, #1
 8013bc2:	d102      	bne.n	8013bca <_write_r+0x1e>
 8013bc4:	682b      	ldr	r3, [r5, #0]
 8013bc6:	b103      	cbz	r3, 8013bca <_write_r+0x1e>
 8013bc8:	6023      	str	r3, [r4, #0]
 8013bca:	bd38      	pop	{r3, r4, r5, pc}
 8013bcc:	24033524 	.word	0x24033524

08013bd0 <__errno>:
 8013bd0:	4b01      	ldr	r3, [pc, #4]	@ (8013bd8 <__errno+0x8>)
 8013bd2:	6818      	ldr	r0, [r3, #0]
 8013bd4:	4770      	bx	lr
 8013bd6:	bf00      	nop
 8013bd8:	2400139c 	.word	0x2400139c

08013bdc <__libc_init_array>:
 8013bdc:	b570      	push	{r4, r5, r6, lr}
 8013bde:	4d0d      	ldr	r5, [pc, #52]	@ (8013c14 <__libc_init_array+0x38>)
 8013be0:	4c0d      	ldr	r4, [pc, #52]	@ (8013c18 <__libc_init_array+0x3c>)
 8013be2:	1b64      	subs	r4, r4, r5
 8013be4:	10a4      	asrs	r4, r4, #2
 8013be6:	2600      	movs	r6, #0
 8013be8:	42a6      	cmp	r6, r4
 8013bea:	d109      	bne.n	8013c00 <__libc_init_array+0x24>
 8013bec:	4d0b      	ldr	r5, [pc, #44]	@ (8013c1c <__libc_init_array+0x40>)
 8013bee:	4c0c      	ldr	r4, [pc, #48]	@ (8013c20 <__libc_init_array+0x44>)
 8013bf0:	f000 f9ac 	bl	8013f4c <_init>
 8013bf4:	1b64      	subs	r4, r4, r5
 8013bf6:	10a4      	asrs	r4, r4, #2
 8013bf8:	2600      	movs	r6, #0
 8013bfa:	42a6      	cmp	r6, r4
 8013bfc:	d105      	bne.n	8013c0a <__libc_init_array+0x2e>
 8013bfe:	bd70      	pop	{r4, r5, r6, pc}
 8013c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c04:	4798      	blx	r3
 8013c06:	3601      	adds	r6, #1
 8013c08:	e7ee      	b.n	8013be8 <__libc_init_array+0xc>
 8013c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c0e:	4798      	blx	r3
 8013c10:	3601      	adds	r6, #1
 8013c12:	e7f2      	b.n	8013bfa <__libc_init_array+0x1e>
 8013c14:	080159c8 	.word	0x080159c8
 8013c18:	080159c8 	.word	0x080159c8
 8013c1c:	080159c8 	.word	0x080159c8
 8013c20:	08015a08 	.word	0x08015a08

08013c24 <__retarget_lock_init_recursive>:
 8013c24:	4770      	bx	lr

08013c26 <__retarget_lock_acquire_recursive>:
 8013c26:	4770      	bx	lr

08013c28 <__retarget_lock_release_recursive>:
 8013c28:	4770      	bx	lr

08013c2a <memcpy>:
 8013c2a:	440a      	add	r2, r1
 8013c2c:	4291      	cmp	r1, r2
 8013c2e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013c32:	d100      	bne.n	8013c36 <memcpy+0xc>
 8013c34:	4770      	bx	lr
 8013c36:	b510      	push	{r4, lr}
 8013c38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c40:	4291      	cmp	r1, r2
 8013c42:	d1f9      	bne.n	8013c38 <memcpy+0xe>
 8013c44:	bd10      	pop	{r4, pc}
	...

08013c48 <_free_r>:
 8013c48:	b538      	push	{r3, r4, r5, lr}
 8013c4a:	4605      	mov	r5, r0
 8013c4c:	2900      	cmp	r1, #0
 8013c4e:	d041      	beq.n	8013cd4 <_free_r+0x8c>
 8013c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c54:	1f0c      	subs	r4, r1, #4
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	bfb8      	it	lt
 8013c5a:	18e4      	addlt	r4, r4, r3
 8013c5c:	f7ff fcce 	bl	80135fc <__malloc_lock>
 8013c60:	4a1d      	ldr	r2, [pc, #116]	@ (8013cd8 <_free_r+0x90>)
 8013c62:	6813      	ldr	r3, [r2, #0]
 8013c64:	b933      	cbnz	r3, 8013c74 <_free_r+0x2c>
 8013c66:	6063      	str	r3, [r4, #4]
 8013c68:	6014      	str	r4, [r2, #0]
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c70:	f7ff bcca 	b.w	8013608 <__malloc_unlock>
 8013c74:	42a3      	cmp	r3, r4
 8013c76:	d908      	bls.n	8013c8a <_free_r+0x42>
 8013c78:	6820      	ldr	r0, [r4, #0]
 8013c7a:	1821      	adds	r1, r4, r0
 8013c7c:	428b      	cmp	r3, r1
 8013c7e:	bf01      	itttt	eq
 8013c80:	6819      	ldreq	r1, [r3, #0]
 8013c82:	685b      	ldreq	r3, [r3, #4]
 8013c84:	1809      	addeq	r1, r1, r0
 8013c86:	6021      	streq	r1, [r4, #0]
 8013c88:	e7ed      	b.n	8013c66 <_free_r+0x1e>
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	b10b      	cbz	r3, 8013c94 <_free_r+0x4c>
 8013c90:	42a3      	cmp	r3, r4
 8013c92:	d9fa      	bls.n	8013c8a <_free_r+0x42>
 8013c94:	6811      	ldr	r1, [r2, #0]
 8013c96:	1850      	adds	r0, r2, r1
 8013c98:	42a0      	cmp	r0, r4
 8013c9a:	d10b      	bne.n	8013cb4 <_free_r+0x6c>
 8013c9c:	6820      	ldr	r0, [r4, #0]
 8013c9e:	4401      	add	r1, r0
 8013ca0:	1850      	adds	r0, r2, r1
 8013ca2:	4283      	cmp	r3, r0
 8013ca4:	6011      	str	r1, [r2, #0]
 8013ca6:	d1e0      	bne.n	8013c6a <_free_r+0x22>
 8013ca8:	6818      	ldr	r0, [r3, #0]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	6053      	str	r3, [r2, #4]
 8013cae:	4408      	add	r0, r1
 8013cb0:	6010      	str	r0, [r2, #0]
 8013cb2:	e7da      	b.n	8013c6a <_free_r+0x22>
 8013cb4:	d902      	bls.n	8013cbc <_free_r+0x74>
 8013cb6:	230c      	movs	r3, #12
 8013cb8:	602b      	str	r3, [r5, #0]
 8013cba:	e7d6      	b.n	8013c6a <_free_r+0x22>
 8013cbc:	6820      	ldr	r0, [r4, #0]
 8013cbe:	1821      	adds	r1, r4, r0
 8013cc0:	428b      	cmp	r3, r1
 8013cc2:	bf04      	itt	eq
 8013cc4:	6819      	ldreq	r1, [r3, #0]
 8013cc6:	685b      	ldreq	r3, [r3, #4]
 8013cc8:	6063      	str	r3, [r4, #4]
 8013cca:	bf04      	itt	eq
 8013ccc:	1809      	addeq	r1, r1, r0
 8013cce:	6021      	streq	r1, [r4, #0]
 8013cd0:	6054      	str	r4, [r2, #4]
 8013cd2:	e7ca      	b.n	8013c6a <_free_r+0x22>
 8013cd4:	bd38      	pop	{r3, r4, r5, pc}
 8013cd6:	bf00      	nop
 8013cd8:	240333e4 	.word	0x240333e4

08013cdc <_malloc_usable_size_r>:
 8013cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ce0:	1f18      	subs	r0, r3, #4
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	bfbc      	itt	lt
 8013ce6:	580b      	ldrlt	r3, [r1, r0]
 8013ce8:	18c0      	addlt	r0, r0, r3
 8013cea:	4770      	bx	lr

08013cec <__sflush_r>:
 8013cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf4:	0716      	lsls	r6, r2, #28
 8013cf6:	4605      	mov	r5, r0
 8013cf8:	460c      	mov	r4, r1
 8013cfa:	d454      	bmi.n	8013da6 <__sflush_r+0xba>
 8013cfc:	684b      	ldr	r3, [r1, #4]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	dc02      	bgt.n	8013d08 <__sflush_r+0x1c>
 8013d02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	dd48      	ble.n	8013d9a <__sflush_r+0xae>
 8013d08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013d0a:	2e00      	cmp	r6, #0
 8013d0c:	d045      	beq.n	8013d9a <__sflush_r+0xae>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013d14:	682f      	ldr	r7, [r5, #0]
 8013d16:	6a21      	ldr	r1, [r4, #32]
 8013d18:	602b      	str	r3, [r5, #0]
 8013d1a:	d030      	beq.n	8013d7e <__sflush_r+0x92>
 8013d1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013d1e:	89a3      	ldrh	r3, [r4, #12]
 8013d20:	0759      	lsls	r1, r3, #29
 8013d22:	d505      	bpl.n	8013d30 <__sflush_r+0x44>
 8013d24:	6863      	ldr	r3, [r4, #4]
 8013d26:	1ad2      	subs	r2, r2, r3
 8013d28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013d2a:	b10b      	cbz	r3, 8013d30 <__sflush_r+0x44>
 8013d2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013d2e:	1ad2      	subs	r2, r2, r3
 8013d30:	2300      	movs	r3, #0
 8013d32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013d34:	6a21      	ldr	r1, [r4, #32]
 8013d36:	4628      	mov	r0, r5
 8013d38:	47b0      	blx	r6
 8013d3a:	1c43      	adds	r3, r0, #1
 8013d3c:	89a3      	ldrh	r3, [r4, #12]
 8013d3e:	d106      	bne.n	8013d4e <__sflush_r+0x62>
 8013d40:	6829      	ldr	r1, [r5, #0]
 8013d42:	291d      	cmp	r1, #29
 8013d44:	d82b      	bhi.n	8013d9e <__sflush_r+0xb2>
 8013d46:	4a2a      	ldr	r2, [pc, #168]	@ (8013df0 <__sflush_r+0x104>)
 8013d48:	410a      	asrs	r2, r1
 8013d4a:	07d6      	lsls	r6, r2, #31
 8013d4c:	d427      	bmi.n	8013d9e <__sflush_r+0xb2>
 8013d4e:	2200      	movs	r2, #0
 8013d50:	6062      	str	r2, [r4, #4]
 8013d52:	04d9      	lsls	r1, r3, #19
 8013d54:	6922      	ldr	r2, [r4, #16]
 8013d56:	6022      	str	r2, [r4, #0]
 8013d58:	d504      	bpl.n	8013d64 <__sflush_r+0x78>
 8013d5a:	1c42      	adds	r2, r0, #1
 8013d5c:	d101      	bne.n	8013d62 <__sflush_r+0x76>
 8013d5e:	682b      	ldr	r3, [r5, #0]
 8013d60:	b903      	cbnz	r3, 8013d64 <__sflush_r+0x78>
 8013d62:	6560      	str	r0, [r4, #84]	@ 0x54
 8013d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013d66:	602f      	str	r7, [r5, #0]
 8013d68:	b1b9      	cbz	r1, 8013d9a <__sflush_r+0xae>
 8013d6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013d6e:	4299      	cmp	r1, r3
 8013d70:	d002      	beq.n	8013d78 <__sflush_r+0x8c>
 8013d72:	4628      	mov	r0, r5
 8013d74:	f7ff ff68 	bl	8013c48 <_free_r>
 8013d78:	2300      	movs	r3, #0
 8013d7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8013d7c:	e00d      	b.n	8013d9a <__sflush_r+0xae>
 8013d7e:	2301      	movs	r3, #1
 8013d80:	4628      	mov	r0, r5
 8013d82:	47b0      	blx	r6
 8013d84:	4602      	mov	r2, r0
 8013d86:	1c50      	adds	r0, r2, #1
 8013d88:	d1c9      	bne.n	8013d1e <__sflush_r+0x32>
 8013d8a:	682b      	ldr	r3, [r5, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d0c6      	beq.n	8013d1e <__sflush_r+0x32>
 8013d90:	2b1d      	cmp	r3, #29
 8013d92:	d001      	beq.n	8013d98 <__sflush_r+0xac>
 8013d94:	2b16      	cmp	r3, #22
 8013d96:	d11e      	bne.n	8013dd6 <__sflush_r+0xea>
 8013d98:	602f      	str	r7, [r5, #0]
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	e022      	b.n	8013de4 <__sflush_r+0xf8>
 8013d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013da2:	b21b      	sxth	r3, r3
 8013da4:	e01b      	b.n	8013dde <__sflush_r+0xf2>
 8013da6:	690f      	ldr	r7, [r1, #16]
 8013da8:	2f00      	cmp	r7, #0
 8013daa:	d0f6      	beq.n	8013d9a <__sflush_r+0xae>
 8013dac:	0793      	lsls	r3, r2, #30
 8013dae:	680e      	ldr	r6, [r1, #0]
 8013db0:	bf08      	it	eq
 8013db2:	694b      	ldreq	r3, [r1, #20]
 8013db4:	600f      	str	r7, [r1, #0]
 8013db6:	bf18      	it	ne
 8013db8:	2300      	movne	r3, #0
 8013dba:	eba6 0807 	sub.w	r8, r6, r7
 8013dbe:	608b      	str	r3, [r1, #8]
 8013dc0:	f1b8 0f00 	cmp.w	r8, #0
 8013dc4:	dde9      	ble.n	8013d9a <__sflush_r+0xae>
 8013dc6:	6a21      	ldr	r1, [r4, #32]
 8013dc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013dca:	4643      	mov	r3, r8
 8013dcc:	463a      	mov	r2, r7
 8013dce:	4628      	mov	r0, r5
 8013dd0:	47b0      	blx	r6
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	dc08      	bgt.n	8013de8 <__sflush_r+0xfc>
 8013dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013dde:	81a3      	strh	r3, [r4, #12]
 8013de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013de8:	4407      	add	r7, r0
 8013dea:	eba8 0800 	sub.w	r8, r8, r0
 8013dee:	e7e7      	b.n	8013dc0 <__sflush_r+0xd4>
 8013df0:	dfbffffe 	.word	0xdfbffffe

08013df4 <_fflush_r>:
 8013df4:	b538      	push	{r3, r4, r5, lr}
 8013df6:	690b      	ldr	r3, [r1, #16]
 8013df8:	4605      	mov	r5, r0
 8013dfa:	460c      	mov	r4, r1
 8013dfc:	b913      	cbnz	r3, 8013e04 <_fflush_r+0x10>
 8013dfe:	2500      	movs	r5, #0
 8013e00:	4628      	mov	r0, r5
 8013e02:	bd38      	pop	{r3, r4, r5, pc}
 8013e04:	b118      	cbz	r0, 8013e0e <_fflush_r+0x1a>
 8013e06:	6a03      	ldr	r3, [r0, #32]
 8013e08:	b90b      	cbnz	r3, 8013e0e <_fflush_r+0x1a>
 8013e0a:	f7ff fcc5 	bl	8013798 <__sinit>
 8013e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d0f3      	beq.n	8013dfe <_fflush_r+0xa>
 8013e16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013e18:	07d0      	lsls	r0, r2, #31
 8013e1a:	d404      	bmi.n	8013e26 <_fflush_r+0x32>
 8013e1c:	0599      	lsls	r1, r3, #22
 8013e1e:	d402      	bmi.n	8013e26 <_fflush_r+0x32>
 8013e20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e22:	f7ff ff00 	bl	8013c26 <__retarget_lock_acquire_recursive>
 8013e26:	4628      	mov	r0, r5
 8013e28:	4621      	mov	r1, r4
 8013e2a:	f7ff ff5f 	bl	8013cec <__sflush_r>
 8013e2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e30:	07da      	lsls	r2, r3, #31
 8013e32:	4605      	mov	r5, r0
 8013e34:	d4e4      	bmi.n	8013e00 <_fflush_r+0xc>
 8013e36:	89a3      	ldrh	r3, [r4, #12]
 8013e38:	059b      	lsls	r3, r3, #22
 8013e3a:	d4e1      	bmi.n	8013e00 <_fflush_r+0xc>
 8013e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e3e:	f7ff fef3 	bl	8013c28 <__retarget_lock_release_recursive>
 8013e42:	e7dd      	b.n	8013e00 <_fflush_r+0xc>

08013e44 <__swhatbuf_r>:
 8013e44:	b570      	push	{r4, r5, r6, lr}
 8013e46:	460c      	mov	r4, r1
 8013e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e4c:	2900      	cmp	r1, #0
 8013e4e:	b096      	sub	sp, #88	@ 0x58
 8013e50:	4615      	mov	r5, r2
 8013e52:	461e      	mov	r6, r3
 8013e54:	da0d      	bge.n	8013e72 <__swhatbuf_r+0x2e>
 8013e56:	89a3      	ldrh	r3, [r4, #12]
 8013e58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013e5c:	f04f 0100 	mov.w	r1, #0
 8013e60:	bf14      	ite	ne
 8013e62:	2340      	movne	r3, #64	@ 0x40
 8013e64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013e68:	2000      	movs	r0, #0
 8013e6a:	6031      	str	r1, [r6, #0]
 8013e6c:	602b      	str	r3, [r5, #0]
 8013e6e:	b016      	add	sp, #88	@ 0x58
 8013e70:	bd70      	pop	{r4, r5, r6, pc}
 8013e72:	466a      	mov	r2, sp
 8013e74:	f000 f848 	bl	8013f08 <_fstat_r>
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	dbec      	blt.n	8013e56 <__swhatbuf_r+0x12>
 8013e7c:	9901      	ldr	r1, [sp, #4]
 8013e7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013e82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013e86:	4259      	negs	r1, r3
 8013e88:	4159      	adcs	r1, r3
 8013e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013e8e:	e7eb      	b.n	8013e68 <__swhatbuf_r+0x24>

08013e90 <__smakebuf_r>:
 8013e90:	898b      	ldrh	r3, [r1, #12]
 8013e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e94:	079d      	lsls	r5, r3, #30
 8013e96:	4606      	mov	r6, r0
 8013e98:	460c      	mov	r4, r1
 8013e9a:	d507      	bpl.n	8013eac <__smakebuf_r+0x1c>
 8013e9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013ea0:	6023      	str	r3, [r4, #0]
 8013ea2:	6123      	str	r3, [r4, #16]
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	6163      	str	r3, [r4, #20]
 8013ea8:	b003      	add	sp, #12
 8013eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eac:	ab01      	add	r3, sp, #4
 8013eae:	466a      	mov	r2, sp
 8013eb0:	f7ff ffc8 	bl	8013e44 <__swhatbuf_r>
 8013eb4:	9f00      	ldr	r7, [sp, #0]
 8013eb6:	4605      	mov	r5, r0
 8013eb8:	4639      	mov	r1, r7
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f7ff fb1e 	bl	80134fc <_malloc_r>
 8013ec0:	b948      	cbnz	r0, 8013ed6 <__smakebuf_r+0x46>
 8013ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ec6:	059a      	lsls	r2, r3, #22
 8013ec8:	d4ee      	bmi.n	8013ea8 <__smakebuf_r+0x18>
 8013eca:	f023 0303 	bic.w	r3, r3, #3
 8013ece:	f043 0302 	orr.w	r3, r3, #2
 8013ed2:	81a3      	strh	r3, [r4, #12]
 8013ed4:	e7e2      	b.n	8013e9c <__smakebuf_r+0xc>
 8013ed6:	89a3      	ldrh	r3, [r4, #12]
 8013ed8:	6020      	str	r0, [r4, #0]
 8013eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ede:	81a3      	strh	r3, [r4, #12]
 8013ee0:	9b01      	ldr	r3, [sp, #4]
 8013ee2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013ee6:	b15b      	cbz	r3, 8013f00 <__smakebuf_r+0x70>
 8013ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013eec:	4630      	mov	r0, r6
 8013eee:	f000 f81d 	bl	8013f2c <_isatty_r>
 8013ef2:	b128      	cbz	r0, 8013f00 <__smakebuf_r+0x70>
 8013ef4:	89a3      	ldrh	r3, [r4, #12]
 8013ef6:	f023 0303 	bic.w	r3, r3, #3
 8013efa:	f043 0301 	orr.w	r3, r3, #1
 8013efe:	81a3      	strh	r3, [r4, #12]
 8013f00:	89a3      	ldrh	r3, [r4, #12]
 8013f02:	431d      	orrs	r5, r3
 8013f04:	81a5      	strh	r5, [r4, #12]
 8013f06:	e7cf      	b.n	8013ea8 <__smakebuf_r+0x18>

08013f08 <_fstat_r>:
 8013f08:	b538      	push	{r3, r4, r5, lr}
 8013f0a:	4d07      	ldr	r5, [pc, #28]	@ (8013f28 <_fstat_r+0x20>)
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	4604      	mov	r4, r0
 8013f10:	4608      	mov	r0, r1
 8013f12:	4611      	mov	r1, r2
 8013f14:	602b      	str	r3, [r5, #0]
 8013f16:	f7ed fa2d 	bl	8001374 <_fstat>
 8013f1a:	1c43      	adds	r3, r0, #1
 8013f1c:	d102      	bne.n	8013f24 <_fstat_r+0x1c>
 8013f1e:	682b      	ldr	r3, [r5, #0]
 8013f20:	b103      	cbz	r3, 8013f24 <_fstat_r+0x1c>
 8013f22:	6023      	str	r3, [r4, #0]
 8013f24:	bd38      	pop	{r3, r4, r5, pc}
 8013f26:	bf00      	nop
 8013f28:	24033524 	.word	0x24033524

08013f2c <_isatty_r>:
 8013f2c:	b538      	push	{r3, r4, r5, lr}
 8013f2e:	4d06      	ldr	r5, [pc, #24]	@ (8013f48 <_isatty_r+0x1c>)
 8013f30:	2300      	movs	r3, #0
 8013f32:	4604      	mov	r4, r0
 8013f34:	4608      	mov	r0, r1
 8013f36:	602b      	str	r3, [r5, #0]
 8013f38:	f7ed fa2c 	bl	8001394 <_isatty>
 8013f3c:	1c43      	adds	r3, r0, #1
 8013f3e:	d102      	bne.n	8013f46 <_isatty_r+0x1a>
 8013f40:	682b      	ldr	r3, [r5, #0]
 8013f42:	b103      	cbz	r3, 8013f46 <_isatty_r+0x1a>
 8013f44:	6023      	str	r3, [r4, #0]
 8013f46:	bd38      	pop	{r3, r4, r5, pc}
 8013f48:	24033524 	.word	0x24033524

08013f4c <_init>:
 8013f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f4e:	bf00      	nop
 8013f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f52:	bc08      	pop	{r3}
 8013f54:	469e      	mov	lr, r3
 8013f56:	4770      	bx	lr

08013f58 <_fini>:
 8013f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f5a:	bf00      	nop
 8013f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f5e:	bc08      	pop	{r3}
 8013f60:	469e      	mov	lr, r3
 8013f62:	4770      	bx	lr
